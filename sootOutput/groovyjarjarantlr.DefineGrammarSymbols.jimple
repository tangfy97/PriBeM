public class groovyjarjarantlr.DefineGrammarSymbols extends java.lang.Object implements groovyjarjarantlr.ANTLRGrammarParseBehavior
{
    protected java.util.Hashtable grammars;
    protected java.util.Hashtable tokenManagers;
    protected groovyjarjarantlr.Grammar grammar;
    protected groovyjarjarantlr.Tool tool;
    groovyjarjarantlr.LLkAnalyzer analyzer;
    java.lang.String[] args;
    static final java.lang.String DEFAULT_TOKENMANAGER_NAME;
    protected java.util.Hashtable headerActions;
    groovyjarjarantlr.Token thePreambleAction;
    java.lang.String language;
    protected int numLexers;
    protected int numParsers;
    protected int numTreeParsers;

    public void <init>(groovyjarjarantlr.Tool, java.lang.String[], groovyjarjarantlr.LLkAnalyzer)
    {
        groovyjarjarantlr.CommonToken $r4;
        java.lang.String[] r6;
        groovyjarjarantlr.Tool r5;
        groovyjarjarantlr.LLkAnalyzer r7;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        java.util.Hashtable $r1, $r2, $r3;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r5 := @parameter0: groovyjarjarantlr.Tool;

        r6 := @parameter1: java.lang.String[];

        r7 := @parameter2: groovyjarjarantlr.LLkAnalyzer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers> = $r2;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable headerActions> = $r3;

        $r4 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r4.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(0, "");

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction> = $r4;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String language> = "Java";

        r0.<groovyjarjarantlr.DefineGrammarSymbols: int numLexers> = 0;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: int numParsers> = 0;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: int numTreeParsers> = 0;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool> = r5;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String[] args> = r6;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.LLkAnalyzer analyzer> = r7;

        return;
    }

    public void _refStringLiteral(groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        groovyjarjarantlr.StringLiteralSymbol $r7;
        groovyjarjarantlr.Grammar $r1, $r4, $r8, $r10;
        int $i0, i1;
        java.lang.String $r3;
        groovyjarjarantlr.TokenManager $r5, $r9, $r11;
        groovyjarjarantlr.Token r2, r12;
        boolean $z0, z1;
        groovyjarjarantlr.TokenSymbol $r6;
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r12 := @parameter1: groovyjarjarantlr.Token;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        $r1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r4 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r5 = $r4.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r6 = interfaceinvoke $r5.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>($r3);

        if $r6 == null goto label1;

        return;

     label1:
        $r7 = new groovyjarjarantlr.StringLiteralSymbol;

        specialinvoke $r7.<groovyjarjarantlr.StringLiteralSymbol: void <init>(java.lang.String)>($r3);

        $r8 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i0 = interfaceinvoke $r9.<groovyjarjarantlr.TokenManager: int nextTokenType()>();

        virtualinvoke $r7.<groovyjarjarantlr.StringLiteralSymbol: void setTokenType(int)>($i0);

        $r10 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r11 = $r10.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r11.<groovyjarjarantlr.TokenManager: void define(groovyjarjarantlr.TokenSymbol)>($r7);

     label2:
        return;
    }

    public void _refToken(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean, int, boolean)
    {
        groovyjarjarantlr.Grammar $r3, $r5, $r8;
        int $i0, i1;
        java.lang.String $r1;
        groovyjarjarantlr.TokenManager $r4, $r6, $r9;
        groovyjarjarantlr.Token r0, r10, r11, r12;
        boolean $z0, z1, z2;
        groovyjarjarantlr.TokenSymbol $r7;
        groovyjarjarantlr.DefineGrammarSymbols r2;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r10 := @parameter0: groovyjarjarantlr.Token;

        r0 := @parameter1: groovyjarjarantlr.Token;

        r11 := @parameter2: groovyjarjarantlr.Token;

        r12 := @parameter3: groovyjarjarantlr.Token;

        z1 := @parameter4: boolean;

        i1 := @parameter5: int;

        z2 := @parameter6: boolean;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r3 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $z0 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: boolean tokenDefined(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r5 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r6 = $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i0 = interfaceinvoke $r6.<groovyjarjarantlr.TokenManager: int nextTokenType()>();

        $r7 = new groovyjarjarantlr.TokenSymbol;

        specialinvoke $r7.<groovyjarjarantlr.TokenSymbol: void <init>(java.lang.String)>($r1);

        virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: void setTokenType(int)>($i0);

        $r8 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r9.<groovyjarjarantlr.TokenManager: void define(groovyjarjarantlr.TokenSymbol)>($r7);

     label1:
        return;
    }

    public void abortGrammar()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        java.lang.String $r3, $r6;
        groovyjarjarantlr.Grammar $r1, $r2, $r4;
        java.util.Hashtable $r5;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        $r1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        if $r1 == null goto label1;

        $r2 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        if $r3 == null goto label1;

        $r5 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r4 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r4.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r6);

     label1:
        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar> = null;

        return;
    }

    public void beginAlt(boolean)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        z0 := @parameter0: boolean;

        return;
    }

    public void beginChildList()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void beginExceptionGroup()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void beginExceptionSpec(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void beginSubRule(groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;
        boolean z0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        z0 := @parameter2: boolean;

        return;
    }

    public void beginTree(groovyjarjarantlr.Token) throws groovyjarjarantlr.SemanticException
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void defineRuleName(groovyjarjarantlr.Token, java.lang.String, boolean, java.lang.String) throws groovyjarjarantlr.SemanticException
    {
        groovyjarjarantlr.Grammar $r4, $r7, $r14, $r16, $r19, $r23, $r26;
        groovyjarjarantlr.TokenManager $r17, $r20, $r24;
        groovyjarjarantlr.Token r0;
        boolean $z0, $z1, z2, $z3;
        groovyjarjarantlr.TokenSymbol $r21;
        groovyjarjarantlr.GrammarSymbol $r8;
        groovyjarjarantlr.Tool $r10;
        java.lang.StringBuffer $r9, $r11, $r12;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, r5, r6, $r13, $r15, $r18, $r22, r25;
        groovyjarjarantlr.RuleSymbol $r3, r27;
        groovyjarjarantlr.DefineGrammarSymbols r2;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r5 := @parameter1: java.lang.String;

        z2 := @parameter2: boolean;

        r6 := @parameter3: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r25 = $r1;

        $i0 = r0.<groovyjarjarantlr.Token: int type>;

        if $i0 != 24 goto label1;

        r25 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r1);

        $r16 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r17 = $r16.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r18 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z1 = interfaceinvoke $r17.<groovyjarjarantlr.TokenManager: boolean tokenDefined(java.lang.String)>($r18);

        if $z1 != 0 goto label1;

        $r19 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r20 = $r19.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i3 = interfaceinvoke $r20.<groovyjarjarantlr.TokenManager: int nextTokenType()>();

        $r21 = new groovyjarjarantlr.TokenSymbol;

        $r22 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        specialinvoke $r21.<groovyjarjarantlr.TokenSymbol: void <init>(java.lang.String)>($r22);

        virtualinvoke $r21.<groovyjarjarantlr.TokenSymbol: void setTokenType(int)>($i3);

        $r23 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r24 = $r23.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r24.<groovyjarjarantlr.TokenManager: void define(groovyjarjarantlr.TokenSymbol)>($r21);

     label1:
        $r26 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $z3 = virtualinvoke $r26.<groovyjarjarantlr.Grammar: boolean isDefined(java.lang.String)>(r25);

        if $z3 == 0 goto label2;

        $r7 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r25);

        r27 = (groovyjarjarantlr.RuleSymbol) $r8;

        $z0 = virtualinvoke r27.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z0 == 0 goto label3;

        $r10 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("redefinition of rule ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r13, $r15, $i1, $i2);

        goto label3;

     label2:
        $r3 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r3.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>(r25);

        r27 = $r3;

        $r4 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r4.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r3);

     label3:
        virtualinvoke r27.<groovyjarjarantlr.RuleSymbol: void setDefined()>();

        r27.<groovyjarjarantlr.RuleSymbol: java.lang.String access> = r5;

        r27.<groovyjarjarantlr.RuleSymbol: java.lang.String comment> = r6;

        return;
    }

    public void defineToken(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.TokenManager $r4, $r6, $r9, $r18, $r22, $r24, $r26, $r28, $r32, $r34, $r51;
        groovyjarjarantlr.Tool $r11, $r36, $r43;
        java.lang.StringBuffer $r10, $r12, $r13, $r35, $r37, $r38, $r42, $r44, $r45;
        java.lang.String $r14, $r16, $r39, $r41, $r46, $r48, $r49, r52, r53;
        groovyjarjarantlr.DefineGrammarSymbols r2;
        groovyjarjarantlr.StringLiteralSymbol $r20, $r30, r54;
        groovyjarjarantlr.Grammar $r3, $r5, $r8, $r15, $r17, $r21, $r23, $r25, $r27, $r31, $r33, $r40, $r47, $r50;
        groovyjarjarantlr.Token r0, r1;
        boolean $z0, $z1;
        groovyjarjarantlr.TokenSymbol $r7, $r19, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r1 := @parameter1: groovyjarjarantlr.Token;

        r52 = null;

        r53 = null;

        if r0 == null goto label01;

        r52 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label01:
        if r1 == null goto label02;

        r53 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label02:
        if r53 == null goto label08;

        $r17 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r18 = $r17.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r19 = interfaceinvoke $r18.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r53);

        r54 = (groovyjarjarantlr.StringLiteralSymbol) $r19;

        if r54 == null goto label05;

        if r52 == null goto label03;

        $r49 = virtualinvoke r54.<groovyjarjarantlr.StringLiteralSymbol: java.lang.String getLabel()>();

        if $r49 == null goto label04;

     label03:
        $r43 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redefinition of literal in tokens {...}: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r53);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        $r47 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r48 = virtualinvoke $r47.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i7 = virtualinvoke r1.<groovyjarjarantlr.Token: int getLine()>();

        $i8 = virtualinvoke r1.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r43.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r46, $r48, $i7, $i8);

        return;

     label04:
        if r52 == null goto label05;

        virtualinvoke r54.<groovyjarjarantlr.StringLiteralSymbol: void setLabel(java.lang.String)>(r52);

        $r50 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r51 = $r50.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r51.<groovyjarjarantlr.TokenManager: void mapToTokenSymbol(java.lang.String,groovyjarjarantlr.TokenSymbol)>(r52, r54);

     label05:
        if r52 == null goto label07;

        $r27 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r28 = $r27.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r29 = interfaceinvoke $r28.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>(r52);

        if $r29 == null goto label07;

        $z1 = $r29 instanceof groovyjarjarantlr.StringLiteralSymbol;

        if $z1 == 0 goto label06;

        $r36 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redefinition of token in tokens {...}: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        $r40 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r41 = virtualinvoke $r40.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r1.<groovyjarjarantlr.Token: int getLine()>();

        $i6 = virtualinvoke r1.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r36.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r39, $r41, $i5, $i6);

        return;

     label06:
        $i4 = virtualinvoke $r29.<groovyjarjarantlr.TokenSymbol: int getTokenType()>();

        $r30 = new groovyjarjarantlr.StringLiteralSymbol;

        specialinvoke $r30.<groovyjarjarantlr.StringLiteralSymbol: void <init>(java.lang.String)>(r53);

        virtualinvoke $r30.<groovyjarjarantlr.StringLiteralSymbol: void setTokenType(int)>($i4);

        virtualinvoke $r30.<groovyjarjarantlr.StringLiteralSymbol: void setLabel(java.lang.String)>(r52);

        $r31 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r32 = $r31.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r32.<groovyjarjarantlr.TokenManager: void define(groovyjarjarantlr.TokenSymbol)>($r30);

        $r33 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r34 = $r33.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r34.<groovyjarjarantlr.TokenManager: void mapToTokenSymbol(java.lang.String,groovyjarjarantlr.TokenSymbol)>(r52, $r30);

        return;

     label07:
        $r20 = new groovyjarjarantlr.StringLiteralSymbol;

        specialinvoke $r20.<groovyjarjarantlr.StringLiteralSymbol: void <init>(java.lang.String)>(r53);

        $r21 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i3 = interfaceinvoke $r22.<groovyjarjarantlr.TokenManager: int nextTokenType()>();

        virtualinvoke $r20.<groovyjarjarantlr.StringLiteralSymbol: void setTokenType(int)>($i3);

        virtualinvoke $r20.<groovyjarjarantlr.StringLiteralSymbol: void setLabel(java.lang.String)>(r52);

        $r23 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r24 = $r23.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r24.<groovyjarjarantlr.TokenManager: void define(groovyjarjarantlr.TokenSymbol)>($r20);

        if r52 == null goto label10;

        $r25 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r26 = $r25.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r26.<groovyjarjarantlr.TokenManager: void mapToTokenSymbol(java.lang.String,groovyjarjarantlr.TokenSymbol)>(r52, $r20);

        goto label10;

     label08:
        $r3 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $z0 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: boolean tokenDefined(java.lang.String)>(r52);

        if $z0 == 0 goto label09;

        $r11 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redefinition of token in tokens {...}: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r52);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>($r14, $r16, $i1, $i2);

        return;

     label09:
        $r5 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r6 = $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i0 = interfaceinvoke $r6.<groovyjarjarantlr.TokenManager: int nextTokenType()>();

        $r7 = new groovyjarjarantlr.TokenSymbol;

        specialinvoke $r7.<groovyjarjarantlr.TokenSymbol: void <init>(java.lang.String)>(r52);

        virtualinvoke $r7.<groovyjarjarantlr.TokenSymbol: void setTokenType(int)>($i0);

        $r8 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        interfaceinvoke $r9.<groovyjarjarantlr.TokenManager: void define(groovyjarjarantlr.TokenSymbol)>($r7);

     label10:
        return;
    }

    public void endAlt()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void endChildList()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void endExceptionGroup()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void endExceptionSpec()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void endGrammar()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void endOptions()
    {
        groovyjarjarantlr.SimpleTokenManager $r62, $r135;
        java.lang.StringBuffer $r19, $r23, $r25, $r27, $r49, $r51, $r54, $r55, $r90, $r94, $r96, $r98, $r120, $r122, $r125, $r126;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Grammar $r1, $r3, $r5, $r7, $r9, $r11, $r12, $r15, $r20, $r21, $r29, $r32, $r35, $r38, $r43, $r45, $r46, $r52, $r57, $r59, $r63, $r66, $r67, $r72, $r76, $r77, $r79, $r80, $r82, $r83, $r86, $r91, $r92, $r100, $r103, $r106, $r109, $r114, $r116, $r117, $r123, $r128, $r129, $r131, $r132, $r136, $r139, $r140, $r144, $r147;
        groovyjarjarantlr.ImportVocabTokenManager $r18, $r89;
        java.lang.Object $r41, $r42, $r75, $r112, $r113, $r146;
        groovyjarjarantlr.TokenManager r148, r149, r150, r151, r152, r153;
        groovyjarjarantlr.Tool $r30, $r50, $r64, $r101, $r121, $r137;
        java.lang.String $r2, $r4, $r6, $r8, $r10, $r13, $r14, $r16, $r22, $r24, $r26, $r28, $r31, $r33, $r39, $r44, $r47, $r53, $r56, $r58, $r60, $r65, $r68, $r73, $r78, $r81, $r84, $r85, $r87, $r93, $r95, $r97, $r99, $r102, $r104, $r110, $r115, $r118, $r124, $r127, $r130, $r133, $r138, $r141;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Hashtable $r17, $r34, $r36, $r37, $r40, $r48, $r61, $r69, $r70, $r71, $r74, $r88, $r105, $r107, $r108, $r111, $r119, $r134, $r142, $r143, $r145;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        $r1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        if $r2 != null goto label02;

        $r129 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r130 = $r129.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        if $r130 != null goto label02;

        $r132 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r131 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r133 = virtualinvoke $r131.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r132.<groovyjarjarantlr.Grammar: java.lang.String exportVocab> = $r133;

        $r134 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $z8 = virtualinvoke $r134.<java.util.Hashtable: boolean containsKey(java.lang.Object)>("*default");

        if $z8 == 0 goto label01;

        $r144 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r144.<groovyjarjarantlr.Grammar: java.lang.String exportVocab> = "*default";

        $r145 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r146 = virtualinvoke $r145.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("*default");

        r148 = (groovyjarjarantlr.TokenManager) $r146;

        $r147 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r147.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>(r148);

        return;

     label01:
        $r135 = new groovyjarjarantlr.SimpleTokenManager;

        $r136 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r138 = $r136.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $r137 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r135.<groovyjarjarantlr.SimpleTokenManager: void <init>(java.lang.String,groovyjarjarantlr.Tool)>($r138, $r137);

        $r139 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r139.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>($r135);

        $r142 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r140 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r141 = $r140.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        virtualinvoke $r142.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r141, $r135);

        $r143 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        virtualinvoke $r143.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("*default", $r135);

        return;

     label02:
        $r3 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        if $r4 != null goto label06;

        $r77 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r78 = $r77.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        if $r78 == null goto label06;

        $r80 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r79 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r81 = virtualinvoke $r79.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r80.<groovyjarjarantlr.Grammar: java.lang.String exportVocab> = $r81;

        $r82 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r85 = $r82.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $r83 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r84 = $r83.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $z5 = virtualinvoke $r85.<java.lang.String: boolean equals(java.lang.Object)>($r84);

        if $z5 == 0 goto label03;

        $r121 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r120 = new java.lang.StringBuffer;

        specialinvoke $r120.<java.lang.StringBuffer: void <init>()>();

        $r122 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Grammar ");

        $r123 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r124 = virtualinvoke $r123.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r125 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cannot have importVocab same as default output vocab (grammar name); ignored.");

        $r127 = virtualinvoke $r126.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r121.<groovyjarjarantlr.Tool: void warning(java.lang.String)>($r127);

        $r128 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r128.<groovyjarjarantlr.Grammar: java.lang.String importVocab> = null;

        virtualinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endOptions()>();

        return;

     label03:
        $r88 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r86 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r87 = $r86.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $z6 = virtualinvoke $r88.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r87);

        if $z6 == 0 goto label04;

        $r111 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r109 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r110 = $r109.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $r112 = virtualinvoke $r111.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r110);

        r149 = (groovyjarjarantlr.TokenManager) $r112;

        $r113 = interfaceinvoke r149.<groovyjarjarantlr.TokenManager: java.lang.Object clone()>();

        r150 = (groovyjarjarantlr.TokenManager) $r113;

        $r114 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r115 = $r114.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        interfaceinvoke r150.<groovyjarjarantlr.TokenManager: void setName(java.lang.String)>($r115);

        interfaceinvoke r150.<groovyjarjarantlr.TokenManager: void setReadOnly(boolean)>(0);

        $r116 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r116.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>(r150);

        $r119 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r117 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r118 = $r117.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        virtualinvoke $r119.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r118, r150);

        return;

     label04:
        $r89 = new groovyjarjarantlr.ImportVocabTokenManager;

        $r91 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r90 = new java.lang.StringBuffer;

        specialinvoke $r90.<java.lang.StringBuffer: void <init>()>();

        $r92 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r93 = $r92.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $r94 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r93);

        $r95 = <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r96 = virtualinvoke $r94.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r95);

        $r97 = <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileExt>;

        $r98 = virtualinvoke $r96.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r97);

        $r99 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.String toString()>();

        $r100 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r102 = $r100.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $r101 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r89.<groovyjarjarantlr.ImportVocabTokenManager: void <init>(groovyjarjarantlr.Grammar,java.lang.String,java.lang.String,groovyjarjarantlr.Tool)>($r91, $r99, $r102, $r101);

        virtualinvoke $r89.<groovyjarjarantlr.ImportVocabTokenManager: void setReadOnly(boolean)>(0);

        $r105 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r103 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r104 = $r103.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        virtualinvoke $r105.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r104, $r89);

        $r106 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r106.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>($r89);

        $r107 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $z7 = virtualinvoke $r107.<java.util.Hashtable: boolean containsKey(java.lang.Object)>("*default");

        if $z7 != 0 goto label05;

        $r108 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        virtualinvoke $r108.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("*default", $r89);

     label05:
        return;

     label06:
        $r5 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r6 = $r5.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        if $r6 == null goto label09;

        $r57 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r58 = $r57.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        if $r58 != null goto label09;

        $r61 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r59 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r60 = $r59.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $z3 = virtualinvoke $r61.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r60);

        if $z3 == 0 goto label07;

        $r74 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r72 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r73 = $r72.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $r75 = virtualinvoke $r74.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r73);

        r151 = (groovyjarjarantlr.TokenManager) $r75;

        $r76 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r76.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>(r151);

        return;

     label07:
        $r62 = new groovyjarjarantlr.SimpleTokenManager;

        $r63 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r65 = $r63.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $r64 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r62.<groovyjarjarantlr.SimpleTokenManager: void <init>(java.lang.String,groovyjarjarantlr.Tool)>($r65, $r64);

        $r66 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r66.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>($r62);

        $r69 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r67 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r68 = $r67.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        virtualinvoke $r69.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r68, $r62);

        $r70 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $z4 = virtualinvoke $r70.<java.util.Hashtable: boolean containsKey(java.lang.Object)>("*default");

        if $z4 != 0 goto label08;

        $r71 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        virtualinvoke $r71.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("*default", $r62);

     label08:
        return;

     label09:
        $r7 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r8 = $r7.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        if $r8 == null goto label13;

        $r9 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r9.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        if $r10 == null goto label13;

        $r11 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r14 = $r11.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $r12 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r13 = $r12.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label10;

        $r50 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("exportVocab of ");

        $r52 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r53 = $r52.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $r54 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" same as importVocab; probably not what you want");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r50.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r56);

     label10:
        $r17 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r15 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r16 = $r15.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $z1 = virtualinvoke $r17.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r16);

        if $z1 == 0 goto label11;

        $r40 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r38 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r39 = $r38.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $r41 = virtualinvoke $r40.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r39);

        r152 = (groovyjarjarantlr.TokenManager) $r41;

        $r42 = interfaceinvoke r152.<groovyjarjarantlr.TokenManager: java.lang.Object clone()>();

        r153 = (groovyjarjarantlr.TokenManager) $r42;

        $r43 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r44 = $r43.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        interfaceinvoke r153.<groovyjarjarantlr.TokenManager: void setName(java.lang.String)>($r44);

        interfaceinvoke r153.<groovyjarjarantlr.TokenManager: void setReadOnly(boolean)>(0);

        $r45 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r45.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>(r153);

        $r48 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r46 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r47 = $r46.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        virtualinvoke $r48.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, r153);

        return;

     label11:
        $r18 = new groovyjarjarantlr.ImportVocabTokenManager;

        $r20 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r21 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r22 = $r21.<groovyjarjarantlr.Grammar: java.lang.String importVocab>;

        $r23 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileSuffix>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = <groovyjarjarantlr.CodeGenerator: java.lang.String TokenTypesFileExt>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r29 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r29.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        $r30 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r18.<groovyjarjarantlr.ImportVocabTokenManager: void <init>(groovyjarjarantlr.Grammar,java.lang.String,java.lang.String,groovyjarjarantlr.Tool)>($r20, $r28, $r31, $r30);

        virtualinvoke $r18.<groovyjarjarantlr.ImportVocabTokenManager: void setReadOnly(boolean)>(0);

        $r34 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $r32 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r33 = $r32.<groovyjarjarantlr.Grammar: java.lang.String exportVocab>;

        virtualinvoke $r34.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r18);

        $r35 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r35.<groovyjarjarantlr.Grammar: void setTokenManager(groovyjarjarantlr.TokenManager)>($r18);

        $r36 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        $z2 = virtualinvoke $r36.<java.util.Hashtable: boolean containsKey(java.lang.Object)>("*default");

        if $z2 != 0 goto label12;

        $r37 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable tokenManagers>;

        virtualinvoke $r37.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("*default", $r18);

     label12:
        return;

     label13:
        return;
    }

    public void endRule(java.lang.String)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void endSubRule()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void endTree()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void hasError()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void noASTSubRule()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void oneOrMoreSubRule()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void optionalSubRule()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void setUserExceptions(java.lang.String)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        java.lang.String r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void refAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refArgAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refCharLiteral(groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean, int, boolean)
    {
        int i0;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;
        boolean z0, z1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        return;
    }

    public void refCharRange(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        int i0;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2, r3;
        boolean z0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        r3 := @parameter2: groovyjarjarantlr.Token;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        return;
    }

    public void refElementOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        return;
    }

    public void refTokensSpecElementOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2, r3;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        r3 := @parameter2: groovyjarjarantlr.Token;

        return;
    }

    public void refExceptionHandler(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        return;
    }

    public void refHeaderAction(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Tool $r6, $r13;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r10, $r12, $r14, $r15;
        int $i0, $i1;
        java.lang.String $r1, $r11, $r16, r17;
        groovyjarjarantlr.Token r0, r4;
        java.util.Hashtable $r3, $r18;
        boolean $z0, $z1;
        groovyjarjarantlr.DefineGrammarSymbols r2;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r4 := @parameter1: groovyjarjarantlr.Token;

        if r0 != null goto label1;

        r17 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r17 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r1, "\"", "\"");

     label2:
        $r3 = r2.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable headerActions>;

        $z0 = virtualinvoke $r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>(r17);

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label3;

        $r13 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $i1 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": header action already defined");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r16);

        goto label4;

     label3:
        $r6 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": header action \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' already defined");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r11);

     label4:
        $r18 = r2.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable headerActions>;

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r4);

        return;
    }

    public java.lang.String getHeaderAction(java.lang.String)
    {
        java.lang.Object $r3;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        java.lang.String r1, $r5;
        java.util.Hashtable $r2;
        groovyjarjarantlr.Token r4;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable headerActions>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (groovyjarjarantlr.Token) $r3;

        if r4 != null goto label1;

        return "";

     label1:
        $r5 = virtualinvoke r4.<groovyjarjarantlr.Token: java.lang.String getText()>();

        return $r5;
    }

    public int getHeaderActionLine(java.lang.String)
    {
        int $i0;
        java.lang.Object $r3;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        java.lang.String r1;
        java.util.Hashtable $r2;
        groovyjarjarantlr.Token r4;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable headerActions>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (groovyjarjarantlr.Token) $r3;

        if r4 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        return $i0;
    }

    public void refInitAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refMemberAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refPreambleAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction> = r1;

        return;
    }

    public void refReturnAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refRule(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, int)
    {
        groovyjarjarantlr.Grammar $r3, $r5;
        groovyjarjarantlr.RuleSymbol $r4;
        int $i0, i1;
        java.lang.String $r1, r9;
        groovyjarjarantlr.DefineGrammarSymbols r2;
        groovyjarjarantlr.Token r0, r6, r7, r8;
        boolean $z0;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r6 := @parameter0: groovyjarjarantlr.Token;

        r0 := @parameter1: groovyjarjarantlr.Token;

        r7 := @parameter2: groovyjarjarantlr.Token;

        r8 := @parameter3: groovyjarjarantlr.Token;

        i1 := @parameter4: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r9 = $r1;

        $i0 = r0.<groovyjarjarantlr.Token: int type>;

        if $i0 != 24 goto label1;

        r9 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r1);

     label1:
        $r3 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $z0 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: boolean isDefined(java.lang.String)>(r9);

        if $z0 != 0 goto label2;

        $r5 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r4 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r4.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>(r9);

        virtualinvoke $r5.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r4);

     label2:
        return;
    }

    public void refSemPred(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refStringLiteral(groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        int i0;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;
        boolean z0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        virtualinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void _refStringLiteral(groovyjarjarantlr.Token,groovyjarjarantlr.Token,int,boolean)>(r1, r2, i0, z0);

        return;
    }

    public void refToken(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean, int, boolean)
    {
        int i0;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2, r3, r4;
        boolean z0, z1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        r3 := @parameter2: groovyjarjarantlr.Token;

        r4 := @parameter3: groovyjarjarantlr.Token;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        z1 := @parameter6: boolean;

        virtualinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void _refToken(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,boolean,int,boolean)>(r1, r2, r3, r4, z0, i0, z1);

        return;
    }

    public void refTokenRange(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        char $c0, $c1;
        int i2, $i3, $i4;
        java.lang.String $r1, $r4;
        groovyjarjarantlr.DefineGrammarSymbols r2;
        groovyjarjarantlr.Token r0, r3, r5;
        boolean z0;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r3 := @parameter1: groovyjarjarantlr.Token;

        r5 := @parameter2: groovyjarjarantlr.Token;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i3 = (int) $c0;

        if $i3 != 34 goto label1;

        virtualinvoke r2.<groovyjarjarantlr.DefineGrammarSymbols: void refStringLiteral(groovyjarjarantlr.Token,groovyjarjarantlr.Token,int,boolean)>(r0, null, 1, z0);

        goto label2;

     label1:
        virtualinvoke r2.<groovyjarjarantlr.DefineGrammarSymbols: void _refToken(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,boolean,int,boolean)>(null, r0, null, null, 0, 1, z0);

     label2:
        $r4 = virtualinvoke r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c1;

        if $i4 != 34 goto label3;

        virtualinvoke r2.<groovyjarjarantlr.DefineGrammarSymbols: void _refStringLiteral(groovyjarjarantlr.Token,groovyjarjarantlr.Token,int,boolean)>(r3, null, 1, z0);

        goto label4;

     label3:
        virtualinvoke r2.<groovyjarjarantlr.DefineGrammarSymbols: void _refToken(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,boolean,int,boolean)>(null, r3, null, null, 0, 1, z0);

     label4:
        return;
    }

    public void refTreeSpecifier(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void refWildcard(groovyjarjarantlr.Token, groovyjarjarantlr.Token, int)
    {
        int i0;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        i0 := @parameter2: int;

        return;
    }

    public void reset()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar> = null;

        return;
    }

    public void setArgOfRuleRef(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        return;
    }

    public void setCharVocabulary(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.LexerGrammar $r3;
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.collections.impl.BitSet r2;
        groovyjarjarantlr.Grammar $r1;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r2 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        $r1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r3 = (groovyjarjarantlr.LexerGrammar) $r1;

        virtualinvoke $r3.<groovyjarjarantlr.LexerGrammar: void setCharVocabulary(groovyjarjarantlr.collections.impl.BitSet)>(r2);

        return;
    }

    public void setFileOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token, java.lang.String)
    {
        java.lang.StringBuffer $r15, $r18, $r19, $r28, $r31, $r32, $r37, $r39, $r41, $r47, $r50, $r51, $r54, $r57, $r58;
        groovyjarjarantlr.DefineGrammarSymbols r5;
        groovyjarjarantlr.Grammar $r62;
        groovyjarjarantlr.Token r0, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        groovyjarjarantlr.Tool $r11, $r13, $r16, $r24, $r27, $r29, $r38, $r45, $r48, $r55, $r63, $r64, $r65, $r66, $r67, $r71, $r76, $r78;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r14, $r17, $r20, r21, $r22, $r23, $r25, $r26, $r30, $r33, $r34, $r35, $r36, $r40, $r42, $r43, $r44, $r46, $r49, $r52, $r53, $r56, $r59, $r60, $r61, $r68, $r69, $r70, $r72, $r73, $r74, $r75, $r77, $r79;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22;

        r5 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r8 := @parameter1: groovyjarjarantlr.Token;

        r21 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("language");

        if $z0 == 0 goto label04;

        $i21 = virtualinvoke r8.<groovyjarjarantlr.Token: int getType()>();

        if $i21 != 6 goto label01;

        $r72 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r73 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFront(java.lang.String,char)>($r72, 34);

        $r74 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripBack(java.lang.String,char)>($r73, 34);

        r5.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String language> = $r74;

        goto label22;

     label01:
        $i22 = virtualinvoke r8.<groovyjarjarantlr.Token: int getType()>();

        if $i22 == 24 goto label02;

        $i23 = virtualinvoke r8.<groovyjarjarantlr.Token: int getType()>();

        if $i23 != 41 goto label03;

     label02:
        $r70 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r5.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String language> = $r70;

        goto label22;

     label03:
        $r71 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $i24 = virtualinvoke r8.<groovyjarjarantlr.Token: int getLine()>();

        $i25 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r71.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("language option must be string or identifier", r21, $i24, $i25);

        goto label22;

     label04:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("mangleLiteralPrefix");

        if $z1 == 0 goto label06;

        $i18 = virtualinvoke r8.<groovyjarjarantlr.Token: int getType()>();

        if $i18 != 6 goto label05;

        $r67 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r68 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r69 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFrontBack(java.lang.String,java.lang.String,java.lang.String)>($r68, "\"", "\"");

        $r67.<groovyjarjarantlr.Tool: java.lang.String literalsPrefix> = $r69;

        goto label22;

     label05:
        $r66 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $i19 = virtualinvoke r8.<groovyjarjarantlr.Token: int getLine()>();

        $i20 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r66.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("mangleLiteralPrefix option must be string", r21, $i19, $i20);

        goto label22;

     label06:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("upperCaseMangledLiterals");

        if $z2 == 0 goto label09;

        $r60 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z18 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z18 == 0 goto label07;

        $r65 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r65.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals> = 1;

        goto label22;

     label07:
        $r61 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z19 = virtualinvoke $r61.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z19 == 0 goto label08;

        $r64 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r64.<groovyjarjarantlr.Tool: boolean upperCaseMangledLiterals> = 0;

        goto label22;

     label08:
        $r62 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r63 = $r62.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $i16 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i17 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r63.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for upperCaseMangledLiterals must be true or false", r21, $i16, $i17);

        goto label22;

     label09:
        $r4 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("namespaceStd");

        if $z3 != 0 goto label10;

        $r34 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z12 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>("namespaceAntlr");

        if $z12 != 0 goto label10;

        $r35 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z13 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("genHashLines");

        if $z13 == 0 goto label18;

     label10:
        $r75 = r5.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String language>;

        $z20 = virtualinvoke $r75.<java.lang.String: boolean equals(java.lang.Object)>("Cpp");

        if $z20 != 0 goto label11;

        $r29 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" option only valid for C++");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $i7 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i8 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r29.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r33, r21, $i7, $i8);

        goto label22;

     label11:
        $r6 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("noConstructors");

        if $z4 == 0 goto label13;

        $r25 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z10 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z10 != 0 goto label12;

        $r26 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z11 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z11 != 0 goto label12;

        $r27 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $i5 = virtualinvoke r8.<groovyjarjarantlr.Token: int getLine()>();

        $i6 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r27.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("noConstructors option must be true or false", r21, $i5, $i6);

     label12:
        $r76 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r77 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z21 = virtualinvoke $r77.<java.lang.String: boolean equals(java.lang.Object)>("true");

        $r76.<groovyjarjarantlr.Tool: boolean noConstructors> = $z21;

        goto label22;

     label13:
        $r7 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("genHashLines");

        if $z5 == 0 goto label15;

        $r22 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z8 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z8 != 0 goto label14;

        $r23 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z9 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z9 != 0 goto label14;

        $r24 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $i3 = virtualinvoke r8.<groovyjarjarantlr.Token: int getLine()>();

        $i4 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r24.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("genHashLines option must be true or false", r21, $i3, $i4);

     label14:
        $r78 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r79 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z22 = virtualinvoke $r79.<java.lang.String: boolean equals(java.lang.Object)>("true");

        $r78.<groovyjarjarantlr.Tool: boolean genHashLines> = $z22;

        goto label22;

     label15:
        $i0 = virtualinvoke r8.<groovyjarjarantlr.Token: int getType()>();

        if $i0 == 6 goto label16;

        $r16 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" option must be a string");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = virtualinvoke r8.<groovyjarjarantlr.Token: int getLine()>();

        $i2 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r16.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r20, r21, $i1, $i2);

        goto label22;

     label16:
        $r9 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("namespaceStd");

        if $z6 == 0 goto label17;

        $r13 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r14 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r13.<groovyjarjarantlr.Tool: java.lang.String namespaceStd> = $r14;

        goto label22;

     label17:
        $r10 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("namespaceAntlr");

        if $z7 == 0 goto label22;

        $r11 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r12 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r11.<groovyjarjarantlr.Tool: java.lang.String namespaceAntlr> = $r12;

        goto label22;

     label18:
        $r36 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z14 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>("namespace");

        if $z14 == 0 goto label21;

        $r43 = r5.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String language>;

        $z15 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("Cpp");

        if $z15 != 0 goto label19;

        $r53 = r5.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String language>;

        $z17 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>("CSharp");

        if $z17 != 0 goto label19;

        $r55 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r57 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" option only valid for C++ and C# (a.k.a CSharp)");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        $i14 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i15 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r55.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r59, r21, $i14, $i15);

        goto label22;

     label19:
        $i11 = virtualinvoke r8.<groovyjarjarantlr.Token: int getType()>();

        if $i11 == 6 goto label20;

        $r48 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r50 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" option must be a string");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        $i12 = virtualinvoke r8.<groovyjarjarantlr.Token: int getLine()>();

        $i13 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r48.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r52, r21, $i12, $i13);

        goto label22;

     label20:
        $r44 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z16 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>("namespace");

        if $z16 == 0 goto label22;

        $r45 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r46 = virtualinvoke r8.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r45.<groovyjarjarantlr.Tool: void setNameSpace(java.lang.String)>($r46);

        goto label22;

     label21:
        $r38 = r5.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid file-level option: ");

        $r40 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        $i9 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i10 = virtualinvoke r8.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r38.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r42, r21, $i9, $i10);

     label22:
        return;
    }

    public void setGrammarOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Grammar $r3, $r12, $r14, $r15, $r18, $r21, $r23, $r26, $r28, $r31, $r32;
        groovyjarjarantlr.Token r0, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        groovyjarjarantlr.Tool $r4, $r19, $r24, $r29, $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r1, $r5, $r7, $r8, $r9, $r10, $r11, $r13, $r16, $r17, $r20, $r22, $r25, $r27, $r30, $r34;
        groovyjarjarantlr.DefineGrammarSymbols r2;

        r2 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r6 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("tokdef");

        if $z0 != 0 goto label01;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("tokenVocabulary");

        if $z1 == 0 goto label02;

     label01:
        $r4 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r3 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r6.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r6.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r4.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("tokdef/tokenVocabulary options are invalid >= ANTLR 2.6.0.\n  Use importVocab/exportVocab instead.  Please see the documentation.\n  The previous options were so heinous that Terence changed the whole\n  vocabulary mechanism; it was better to change the names rather than\n  subtly change the functionality of the known options.  Sorry!", $r5, $i0, $i1);

        goto label12;

     label02:
        $r8 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("literal");

        if $z2 == 0 goto label03;

        $r31 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r31 instanceof groovyjarjarantlr.LexerGrammar;

        if $z8 == 0 goto label03;

        $r33 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r32 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r34 = virtualinvoke $r32.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i12 = virtualinvoke r6.<groovyjarjarantlr.Token: int getLine()>();

        $i13 = virtualinvoke r6.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r33.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("the literal option is invalid >= ANTLR 2.6.0.\n  Use the \"tokens {...}\" mechanism instead.", $r34, $i12, $i13);

        goto label12;

     label03:
        $r9 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("exportVocab");

        if $z3 == 0 goto label06;

        $i8 = virtualinvoke r6.<groovyjarjarantlr.Token: int getType()>();

        if $i8 == 41 goto label04;

        $i9 = virtualinvoke r6.<groovyjarjarantlr.Token: int getType()>();

        if $i9 != 24 goto label05;

     label04:
        $r26 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r27 = virtualinvoke r6.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r26.<groovyjarjarantlr.Grammar: java.lang.String exportVocab> = $r27;

        goto label12;

     label05:
        $r29 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r28 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r30 = virtualinvoke $r28.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i10 = virtualinvoke r6.<groovyjarjarantlr.Token: int getLine()>();

        $i11 = virtualinvoke r6.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r29.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("exportVocab must be an identifier", $r30, $i10, $i11);

        goto label12;

     label06:
        $r10 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("importVocab");

        if $z4 == 0 goto label09;

        $i4 = virtualinvoke r6.<groovyjarjarantlr.Token: int getType()>();

        if $i4 == 41 goto label07;

        $i5 = virtualinvoke r6.<groovyjarjarantlr.Token: int getType()>();

        if $i5 != 24 goto label08;

     label07:
        $r21 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r22 = virtualinvoke r6.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r21.<groovyjarjarantlr.Grammar: java.lang.String importVocab> = $r22;

        goto label12;

     label08:
        $r24 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r23 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r25 = virtualinvoke $r23.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r6.<groovyjarjarantlr.Token: int getLine()>();

        $i7 = virtualinvoke r6.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r24.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("importVocab must be an identifier", $r25, $i6, $i7);

        goto label12;

     label09:
        $r11 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("k");

        if $z5 == 0 goto label11;

        $r14 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $z6 = $r14 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z6 == 0 goto label10;

        $r17 = virtualinvoke r6.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z7 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z7 != 0 goto label10;

        $r19 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r18 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r20 = virtualinvoke $r18.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r6.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r6.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r19.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Treewalkers only support k=1", $r20, $i2, $i3);

        goto label12;

     label10:
        $r15 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r15.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>($r16, r6);

        goto label12;

     label11:
        $r12 = r2.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r12.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>($r13, r6);

     label12:
        return;
    }

    public void setRuleOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        return;
    }

    public void setSubruleOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        return;
    }

    public void startLexer(java.lang.String, groovyjarjarantlr.Token, java.lang.String, java.lang.String)
    {
        groovyjarjarantlr.Grammar $r35;
        groovyjarjarantlr.Token r1, $r13;
        boolean $z0;
        groovyjarjarantlr.CommonToken $r14;
        groovyjarjarantlr.LexerGrammar $r4;
        java.lang.String[] $r9;
        groovyjarjarantlr.Tool $r7, $r16, $r23, $r30;
        java.lang.StringBuffer $r15, $r17, $r19, $r20, $r22, $r24, $r26, $r27, $r29, $r31, $r33;
        int $i0, $i1, $i2;
        java.lang.String $r5, r6, r8, r10, $r12, $r18, $r21, $r25, $r28, $r32, $r34;
        java.util.Hashtable $r2, $r11;
        java.lang.Object $r3;
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: groovyjarjarantlr.Token;

        r6 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.DefineGrammarSymbols: int numLexers>;

        if $i0 <= 0 goto label1;

        $r30 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You may only have one lexer per grammar file: class ");

        $r32 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r34);

     label1:
        $i1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: int numLexers>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: int numLexers> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void reset()>();

        $r2 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r35 = (groovyjarjarantlr.Grammar) $r3;

        if $r35 == null goto label3;

        $z0 = $r35 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 != 0 goto label2;

        $r23 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r25 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is already defined as a non-lexer");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r28);

        goto label4;

     label2:
        $r16 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Lexer \'");

        $r18 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is already defined");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r16.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r21);

        goto label4;

     label3:
        $r4 = new groovyjarjarantlr.LexerGrammar;

        $r5 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r7 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r4.<groovyjarjarantlr.LexerGrammar: void <init>(java.lang.String,groovyjarjarantlr.Tool,java.lang.String)>($r5, $r7, r6);

        $r4.<groovyjarjarantlr.LexerGrammar: java.lang.String comment> = r8;

        $r9 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String[] args>;

        virtualinvoke $r4.<groovyjarjarantlr.LexerGrammar: void processArguments(java.lang.String[])>($r9);

        virtualinvoke $r4.<groovyjarjarantlr.LexerGrammar: void setFilename(java.lang.String)>(r10);

        $r11 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r12 = virtualinvoke $r4.<groovyjarjarantlr.LexerGrammar: java.lang.String getClassName()>();

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r4);

        $r13 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction>;

        $r4.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Token preambleAction> = $r13;

        $r14 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r14.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(0, "");

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction> = $r14;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar> = $r4;

     label4:
        return;
    }

    public void startParser(java.lang.String, groovyjarjarantlr.Token, java.lang.String, java.lang.String)
    {
        groovyjarjarantlr.Grammar $r9, $r11, $r13, $r14, $r17, $r19, $r41;
        groovyjarjarantlr.Token r1, $r18;
        boolean $z0;
        groovyjarjarantlr.CommonToken $r20;
        java.lang.String[] $r10;
        groovyjarjarantlr.Tool $r7, $r22, $r29, $r36;
        java.lang.StringBuffer $r21, $r23, $r25, $r26, $r28, $r30, $r32, $r33, $r35, $r37, $r39;
        int $i0, $i1, $i2;
        java.lang.String $r5, r6, r8, r12, $r16, $r24, $r27, $r31, $r34, $r38, $r40;
        java.util.Hashtable $r2, $r15;
        groovyjarjarantlr.ParserGrammar $r4;
        java.lang.Object $r3;
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: groovyjarjarantlr.Token;

        r6 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.DefineGrammarSymbols: int numParsers>;

        if $i0 <= 0 goto label1;

        $r36 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You may only have one parser per grammar file: class ");

        $r38 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r36.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r40);

     label1:
        $i1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: int numParsers>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: int numParsers> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void reset()>();

        $r2 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r41 = (groovyjarjarantlr.Grammar) $r3;

        if $r41 == null goto label3;

        $z0 = $r41 instanceof groovyjarjarantlr.ParserGrammar;

        if $z0 != 0 goto label2;

        $r29 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r31 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is already defined as a non-parser");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r29.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r34);

        goto label4;

     label2:
        $r22 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parser \'");

        $r24 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is already defined");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r27);

        goto label4;

     label3:
        $r4 = new groovyjarjarantlr.ParserGrammar;

        $r5 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r7 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r4.<groovyjarjarantlr.ParserGrammar: void <init>(java.lang.String,groovyjarjarantlr.Tool,java.lang.String)>($r5, $r7, r6);

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar> = $r4;

        $r9 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r9.<groovyjarjarantlr.Grammar: java.lang.String comment> = r8;

        $r11 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r10 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String[] args>;

        virtualinvoke $r11.<groovyjarjarantlr.Grammar: void processArguments(java.lang.String[])>($r10);

        $r13 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r13.<groovyjarjarantlr.Grammar: void setFilename(java.lang.String)>(r12);

        $r15 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r14 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r17 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r19 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r18 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction>;

        $r19.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction> = $r18;

        $r20 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r20.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(0, "");

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction> = $r20;

     label4:
        return;
    }

    public void startTreeWalker(java.lang.String, groovyjarjarantlr.Token, java.lang.String, java.lang.String)
    {
        groovyjarjarantlr.Grammar $r9, $r11, $r13, $r14, $r17, $r19, $r41;
        groovyjarjarantlr.Token r1, $r18;
        boolean $z0;
        groovyjarjarantlr.CommonToken $r20;
        java.lang.String[] $r10;
        groovyjarjarantlr.Tool $r7, $r22, $r29, $r36;
        java.lang.StringBuffer $r21, $r23, $r25, $r26, $r28, $r30, $r32, $r33, $r35, $r37, $r39;
        int $i0, $i1, $i2;
        java.lang.String $r5, r6, r8, r12, $r16, $r24, $r27, $r31, $r34, $r38, $r40;
        java.util.Hashtable $r2, $r15;
        java.lang.Object $r3;
        groovyjarjarantlr.TreeWalkerGrammar $r4;
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: groovyjarjarantlr.Token;

        r6 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.DefineGrammarSymbols: int numTreeParsers>;

        if $i0 <= 0 goto label1;

        $r36 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You may only have one tree parser per grammar file: class ");

        $r38 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r36.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r40);

     label1:
        $i1 = r0.<groovyjarjarantlr.DefineGrammarSymbols: int numTreeParsers>;

        $i2 = $i1 + 1;

        r0.<groovyjarjarantlr.DefineGrammarSymbols: int numTreeParsers> = $i2;

        virtualinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void reset()>();

        $r2 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r41 = (groovyjarjarantlr.Grammar) $r3;

        if $r41 == null goto label3;

        $z0 = $r41 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 != 0 goto label2;

        $r29 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r31 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is already defined as a non-tree-walker");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r29.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r34);

        goto label4;

     label2:
        $r22 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tree-walker \'");

        $r24 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is already defined");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r27);

        goto label4;

     label3:
        $r4 = new groovyjarjarantlr.TreeWalkerGrammar;

        $r5 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r7 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Tool tool>;

        specialinvoke $r4.<groovyjarjarantlr.TreeWalkerGrammar: void <init>(java.lang.String,groovyjarjarantlr.Tool,java.lang.String)>($r5, $r7, r6);

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar> = $r4;

        $r9 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r9.<groovyjarjarantlr.Grammar: java.lang.String comment> = r8;

        $r11 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r10 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.lang.String[] args>;

        virtualinvoke $r11.<groovyjarjarantlr.Grammar: void processArguments(java.lang.String[])>($r10);

        $r13 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r13.<groovyjarjarantlr.Grammar: void setFilename(java.lang.String)>(r12);

        $r15 = r0.<groovyjarjarantlr.DefineGrammarSymbols: java.util.Hashtable grammars>;

        $r14 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

        $r17 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r19 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Grammar grammar>;

        $r18 = r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction>;

        $r19.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token preambleAction> = $r18;

        $r20 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r20.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(0, "");

        r0.<groovyjarjarantlr.DefineGrammarSymbols: groovyjarjarantlr.Token thePreambleAction> = $r20;

     label4:
        return;
    }

    public void synPred()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public void zeroOrMoreSubRule()
    {
        groovyjarjarantlr.DefineGrammarSymbols r0;

        r0 := @this: groovyjarjarantlr.DefineGrammarSymbols;

        return;
    }

    public static void <clinit>()
    {
        <groovyjarjarantlr.DefineGrammarSymbols: java.lang.String DEFAULT_TOKENMANAGER_NAME> = "*default";

        return;
    }
}
