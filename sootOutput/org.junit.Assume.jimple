public class org.junit.Assume extends java.lang.Object
{

    public void <init>()
    {
        org.junit.Assume r0;

        r0 := @this: org.junit.Assume;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assumeTrue(boolean)
    {
        org.hamcrest.Matcher $r2;
        java.lang.Boolean $r0, $r1;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r1);

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.Object,org.hamcrest.Matcher)>($r0, $r2);

        return;
    }

    public static void assumeFalse(boolean)
    {
        boolean z0, $z1;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z1);

        return;
    }

    public static void assumeTrue(java.lang.String, boolean)
    {
        org.junit.internal.AssumptionViolatedException $r0;
        java.lang.String r1;
        boolean z0;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r0 = new org.junit.internal.AssumptionViolatedException;

        specialinvoke $r0.<org.junit.internal.AssumptionViolatedException: void <init>(java.lang.String)>(r1);

        throw $r0;

     label1:
        return;
    }

    public static void assumeFalse(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>(r0, $z1);

        return;
    }

    public static transient void assumeNotNull(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        org.hamcrest.Matcher $r2, $r3;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher notNullValue()>();

        $r3 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher everyItem(org.hamcrest.Matcher)>($r2);

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.Object,org.hamcrest.Matcher)>($r1, $r3);

        return;
    }

    public static void assumeThat(java.lang.Object, org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        java.lang.Object r1;
        org.junit.internal.AssumptionViolatedException $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.hamcrest.Matcher;

        $z0 = interfaceinvoke r0.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new org.junit.internal.AssumptionViolatedException;

        specialinvoke $r2.<org.junit.internal.AssumptionViolatedException: void <init>(java.lang.Object,org.hamcrest.Matcher)>(r1, r0);

        throw $r2;

     label1:
        return;
    }

    public static void assumeThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        java.lang.Object r1;
        org.junit.internal.AssumptionViolatedException $r2;
        java.lang.String r3;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r0 := @parameter2: org.hamcrest.Matcher;

        $z0 = interfaceinvoke r0.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new org.junit.internal.AssumptionViolatedException;

        specialinvoke $r2.<org.junit.internal.AssumptionViolatedException: void <init>(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>(r3, r1, r0);

        throw $r2;

     label1:
        return;
    }

    public static void assumeNoException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.hamcrest.Matcher $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.Object,org.hamcrest.Matcher)>(r0, $r1);

        return;
    }

    public static void assumeNoException(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.String r0;
        org.hamcrest.Matcher $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assume: void assumeThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>(r0, r1, $r2);

        return;
    }
}
