public final class org.joda.time.chrono.LimitChronology extends org.joda.time.chrono.AssembledChronology
{
    private static final long serialVersionUID;
    final org.joda.time.DateTime iLowerLimit;
    final org.joda.time.DateTime iUpperLimit;
    private transient org.joda.time.chrono.LimitChronology iWithUTC;

    public static org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology, org.joda.time.ReadableDateTime, org.joda.time.ReadableDateTime)
    {
        org.joda.time.chrono.LimitChronology $r9;
        org.joda.time.Chronology r0;
        org.joda.time.DateTime $r5, r6, $r7, r8, $r10, $r11;
        java.lang.IllegalArgumentException $r1, $r2;
        org.joda.time.ReadableDateTime r3, r4;
        boolean $z0;

        r0 := @parameter0: org.joda.time.Chronology;

        r3 := @parameter1: org.joda.time.ReadableDateTime;

        r4 := @parameter2: org.joda.time.ReadableDateTime;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must supply a chronology");

        throw $r2;

     label1:
        if r3 != null goto label2;

        $r5 = null;

        goto label3;

     label2:
        $r5 = interfaceinvoke r3.<org.joda.time.ReadableDateTime: org.joda.time.DateTime toDateTime()>();

     label3:
        r6 = $r5;

        if r4 != null goto label4;

        $r7 = null;

        goto label5;

     label4:
        $r7 = interfaceinvoke r4.<org.joda.time.ReadableDateTime: org.joda.time.DateTime toDateTime()>();

     label5:
        r8 = $r7;

        if r6 == null goto label6;

        if $r7 == null goto label6;

        $z0 = interfaceinvoke r6.<org.joda.time.ReadableDateTime: boolean isBefore(org.joda.time.ReadableInstant)>($r7);

        if $z0 != 0 goto label6;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The lower limit must be come before than the upper limit");

        throw $r1;

     label6:
        $r9 = new org.joda.time.chrono.LimitChronology;

        $r10 = (org.joda.time.DateTime) r6;

        $r11 = (org.joda.time.DateTime) r8;

        specialinvoke $r9.<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>(r0, $r10, $r11);

        return $r9;
    }

    private void <init>(org.joda.time.Chronology, org.joda.time.DateTime, org.joda.time.DateTime)
    {
        org.joda.time.chrono.LimitChronology r0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTime r2, r3;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: org.joda.time.DateTime;

        r3 := @parameter2: org.joda.time.DateTime;

        specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>(r1, null);

        r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit> = r2;

        r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit> = r3;

        return;
    }

    public org.joda.time.DateTime getLowerLimit()
    {
        org.joda.time.DateTime $r1;
        org.joda.time.chrono.LimitChronology r0;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        $r1 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>;

        return $r1;
    }

    public org.joda.time.DateTime getUpperLimit()
    {
        org.joda.time.DateTime $r1;
        org.joda.time.chrono.LimitChronology r0;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        $r1 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>;

        return $r1;
    }

    public org.joda.time.Chronology withUTC()
    {
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeZone $r1;
        org.joda.time.chrono.LimitChronology r0;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r1);

        return $r2;
    }

    public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone $r1, $r2, $r6, r13;
        org.joda.time.chrono.LimitChronology r0, $r5, $r10, $r12;
        org.joda.time.Chronology $r3, $r4;
        org.joda.time.DateTime $r9, $r11, r14, r15;
        org.joda.time.MutableDateTime $r7, $r8;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        r13 := @parameter0: org.joda.time.DateTimeZone;

        if r13 != null goto label1;

        r13 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>();

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeZone getZone()>();

        if r13 != $r1 goto label2;

        return r0;

     label2:
        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r13 != $r2 goto label3;

        $r10 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC>;

        if $r10 == null goto label3;

        $r12 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC>;

        return $r12;

     label3:
        $r11 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>;

        r14 = $r11;

        if $r11 == null goto label4;

        $r8 = virtualinvoke $r11.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>();

        virtualinvoke $r8.<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>(r13);

        r14 = virtualinvoke $r8.<org.joda.time.MutableDateTime: org.joda.time.DateTime toDateTime()>();

     label4:
        $r9 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>;

        r15 = $r9;

        if $r9 == null goto label5;

        $r7 = virtualinvoke $r9.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>();

        virtualinvoke $r7.<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>(r13);

        r15 = virtualinvoke $r7.<org.joda.time.MutableDateTime: org.joda.time.DateTime toDateTime()>();

     label5:
        $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r13);

        $r5 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r4, r14, r15);

        $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        if r13 != $r6 goto label6;

        r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC> = $r5;

     label6:
        return $r5;
    }

    public long getDateTimeMillis(int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.LimitChronology r0;
        org.joda.time.Chronology $r1;
        int i0, i1, i2, i3;
        long $l4;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>($l4, "resulting");

        return $l4;
    }

    public long getDateTimeMillis(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.LimitChronology r0;
        org.joda.time.Chronology $r1;
        long $l7;
        int i0, i1, i2, i3, i4, i5, i6;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6);

        virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>($l7, "resulting");

        return $l7;
    }

    public long getDateTimeMillis(long, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        org.joda.time.chrono.LimitChronology r0;
        org.joda.time.Chronology $r1;
        long $l4, l5;
        int i0, i1, i2, i3;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        l5 := @parameter0: long;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l5, null);

        $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l5, i0, i1, i2, i3);

        virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>($l4, "resulting");

        return $l4;
    }

    protected void assemble(org.joda.time.chrono.AssembledChronology$Fields)
    {
        org.joda.time.DateTimeField $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72;
        org.joda.time.chrono.LimitChronology r2;
        org.joda.time.chrono.AssembledChronology$Fields r1;
        java.util.HashMap $r0;
        org.joda.time.DurationField $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;

        r2 := @this: org.joda.time.chrono.LimitChronology;

        r1 := @parameter0: org.joda.time.chrono.AssembledChronology$Fields;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r3 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>;

        $r4 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r3, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r4;

        $r5 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>;

        $r6 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r5, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r6;

        $r7 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>;

        $r8 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r8;

        $r9 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>;

        $r10 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r10;

        $r11 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>;

        $r12 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r12;

        $r13 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>;

        $r14 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r13, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r14;

        $r15 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>;

        $r16 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r15, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r16;

        $r17 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>;

        $r18 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r17, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r18;

        $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>;

        $r20 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r19, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r20;

        $r21 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>;

        $r22 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r21, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r22;

        $r23 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>;

        $r24 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r23, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r24;

        $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>;

        $r26 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r25, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r26;

        $r27 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>;

        $r28 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r27, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r28;

        $r29 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>;

        $r30 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r29, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r30;

        $r31 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>;

        $r32 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r31, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r32;

        $r33 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>;

        $r34 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r33, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r34;

        $r35 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>;

        $r36 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r35, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r36;

        $r37 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>;

        $r38 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r37, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r38;

        $r39 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>;

        $r40 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r39, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r40;

        $r41 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>;

        $r42 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r41, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r42;

        $r43 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>;

        $r44 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r43, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r44;

        $r45 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>;

        $r46 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r45, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r46;

        $r47 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>;

        $r48 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r47, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r48;

        $r49 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>;

        $r50 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r49, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r50;

        $r51 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>;

        $r52 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r51, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r52;

        $r53 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>;

        $r54 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r53, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r54;

        $r55 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>;

        $r56 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r55, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r56;

        $r57 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>;

        $r58 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r57, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r58;

        $r59 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>;

        $r60 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r59, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r60;

        $r61 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>;

        $r62 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r61, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r62;

        $r63 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>;

        $r64 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r63, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r64;

        $r65 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>;

        $r66 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r65, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r66;

        $r67 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>;

        $r68 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r67, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r68;

        $r69 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>;

        $r70 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r69, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r70;

        $r71 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>;

        $r72 = specialinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r71, $r0);

        r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r72;

        return;
    }

    private org.joda.time.DurationField convertField(org.joda.time.DurationField, java.util.HashMap)
    {
        org.joda.time.DurationField r0, $r5;
        org.joda.time.chrono.LimitChronology r3;
        java.util.HashMap r1;
        org.joda.time.chrono.LimitChronology$LimitDurationField $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r3 := @this: org.joda.time.chrono.LimitChronology;

        r0 := @parameter0: org.joda.time.DurationField;

        r1 := @parameter1: java.util.HashMap;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $z1 = virtualinvoke r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r5 = (org.joda.time.DurationField) $r4;

        return $r5;

     label3:
        $r2 = new org.joda.time.chrono.LimitChronology$LimitDurationField;

        specialinvoke $r2.<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>(r3, r0);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

        return $r2;
    }

    private org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField, java.util.HashMap)
    {
        org.joda.time.DurationField $r4, $r5, $r6, $r7, $r8, $r9;
        org.joda.time.chrono.LimitChronology r3;
        org.joda.time.chrono.LimitChronology$LimitDateTimeField $r2;
        java.util.HashMap r1;
        org.joda.time.DateTimeField r0, $r11;
        java.lang.Object $r10;
        boolean $z0, $z1;

        r3 := @this: org.joda.time.chrono.LimitChronology;

        r0 := @parameter0: org.joda.time.DateTimeField;

        r1 := @parameter1: java.util.HashMap;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>();

        if $z0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $z1 = virtualinvoke r1.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r11 = (org.joda.time.DateTimeField) $r10;

        return $r11;

     label3:
        $r2 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField;

        $r4 = virtualinvoke r0.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r5 = specialinvoke r3.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r1);

        $r6 = virtualinvoke r0.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r7 = specialinvoke r3.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r1);

        $r8 = virtualinvoke r0.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>();

        $r9 = specialinvoke r3.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r1);

        specialinvoke $r2.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r3, r0, $r5, $r7, $r9);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

        return $r2;
    }

    void checkLimits(long, java.lang.String)
    {
        org.joda.time.chrono.LimitChronology r0;
        org.joda.time.DateTime $r1, $r2;
        long l0, $l1, $l3;
        org.joda.time.chrono.LimitChronology$LimitException $r6, $r7;
        byte $b2, $b4;
        int $i5, $i6;
        java.lang.String r4;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        l0 := @parameter0: long;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>;

        if $r1 == null goto label1;

        $l3 = virtualinvoke $r1.<org.joda.time.DateTime: long getMillis()>();

        $b4 = l0 cmp $l3;

        $i5 = (int) $b4;

        if $i5 >= 0 goto label1;

        $r6 = new org.joda.time.chrono.LimitChronology$LimitException;

        specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>(r0, r4, 1);

        throw $r6;

     label1:
        $r2 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>;

        if $r2 == null goto label2;

        $l1 = virtualinvoke $r2.<org.joda.time.DateTime: long getMillis()>();

        $b2 = l0 cmp $l1;

        $i6 = (int) $b2;

        if $i6 < 0 goto label2;

        $r7 = new org.joda.time.chrono.LimitChronology$LimitException;

        specialinvoke $r7.<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>(r0, r4, 0);

        throw $r7;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.chrono.LimitChronology r0, r2;
        org.joda.time.Chronology $r3, $r4;
        org.joda.time.DateTime $r5, $r6, $r7, $r8;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.chrono.LimitChronology;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.joda.time.chrono.LimitChronology) r1;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>();

        $r6 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>();

        $z2 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 == 0 goto label3;

        $r7 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>();

        $r8 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>();

        $z3 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r7, $r8);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public int hashCode()
    {
        org.joda.time.chrono.LimitChronology r0;
        org.joda.time.DateTime $r1, $r2, $r4, $r5;
        org.joda.time.Chronology $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.joda.time.chrono.LimitChronology;

        $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>();

        if $r1 == null goto label1;

        $r5 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>();

        $i5 = virtualinvoke $r5.<org.joda.time.DateTime: int hashCode()>();

        goto label2;

     label1:
        $i5 = 0;

     label2:
        $i4 = 317351877 + $i5;

        $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>();

        if $r2 == null goto label3;

        $r4 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>();

        $i6 = virtualinvoke $r4.<org.joda.time.DateTime: int hashCode()>();

        goto label4;

     label3:
        $i6 = 0;

     label4:
        $i2 = $i4 + $i6;

        $r3 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $i1 = $i0 * 7;

        $i3 = $i2 + $i1;

        return $i3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r9, $r10, $r13, $r14;
        java.lang.String $r4, $r15, $r16, $r17;
        org.joda.time.chrono.LimitChronology r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTime $r7, $r8, $r11, $r12;

        r2 := @this: org.joda.time.chrono.LimitChronology;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("LimitChronology[");

        $r3 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r7 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>();

        if $r7 != null goto label1;

        $r16 = "NoLimit";

        goto label2;

     label1:
        $r8 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>();

        $r16 = virtualinvoke $r8.<org.joda.time.DateTime: java.lang.String toString()>();

     label2:
        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r11 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>();

        if $r11 != null goto label3;

        $r17 = "NoLimit";

        goto label4;

     label3:
        $r12 = virtualinvoke r2.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>();

        $r17 = virtualinvoke $r12.<org.joda.time.DateTime: java.lang.String toString()>();

     label4:
        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.LimitChronology: long serialVersionUID> = 7670866536893052522L;

        return;
    }
}
