public abstract class org.springframework.remoting.support.RemotingSupport extends java.lang.Object implements org.springframework.beans.factory.BeanClassLoaderAware
{
    protected final org.apache.commons.logging.Log logger;
    private java.lang.ClassLoader beanClassLoader;

    public void <init>()
    {
        org.springframework.remoting.support.RemotingSupport r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.lang.ClassLoader $r3;

        r0 := @this: org.springframework.remoting.support.RemotingSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.remoting.support.RemotingSupport: org.apache.commons.logging.Log logger> = $r2;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.remoting.support.RemotingSupport: java.lang.ClassLoader beanClassLoader> = $r3;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        org.springframework.remoting.support.RemotingSupport r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.remoting.support.RemotingSupport;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.remoting.support.RemotingSupport: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    protected java.lang.ClassLoader getBeanClassLoader()
    {
        org.springframework.remoting.support.RemotingSupport r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.remoting.support.RemotingSupport;

        $r1 = r0.<org.springframework.remoting.support.RemotingSupport: java.lang.ClassLoader beanClassLoader>;

        return $r1;
    }

    protected java.lang.ClassLoader overrideThreadContextClassLoader()
    {
        org.springframework.remoting.support.RemotingSupport r0;
        java.lang.ClassLoader $r1, $r2;

        r0 := @this: org.springframework.remoting.support.RemotingSupport;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.RemotingSupport: java.lang.ClassLoader getBeanClassLoader()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader overrideThreadContextClassLoader(java.lang.ClassLoader)>($r1);

        return $r2;
    }

    protected void resetThreadContextClassLoader(java.lang.ClassLoader)
    {
        org.springframework.remoting.support.RemotingSupport r2;
        java.lang.ClassLoader r0;
        java.lang.Thread $r1;

        r2 := @this: org.springframework.remoting.support.RemotingSupport;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 == null goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r0);

     label1:
        return;
    }
}
