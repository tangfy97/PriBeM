public class com.hp.hpl.jena.sparql.modify.UpdateCompare extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.modify.UpdateCompare r0;

        r0 := @this: com.hp.hpl.jena.sparql.modify.UpdateCompare;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isomorphic(com.hp.hpl.jena.update.UpdateRequest, com.hp.hpl.jena.update.UpdateRequest)
    {
        com.hp.hpl.jena.update.UpdateRequest r0, r1;
        java.util.List $r2, $r3;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap $r4;
        java.lang.Object $r5, $r7;
        com.hp.hpl.jena.update.Update r6, r8;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.update.UpdateRequest;

        r1 := @parameter1: com.hp.hpl.jena.update.UpdateRequest;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.update.UpdateRequest: boolean samePrologue(com.hp.hpl.jena.sparql.core.Prologue)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.update.UpdateRequest: java.util.List getOperations()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.update.UpdateRequest: java.util.List getOperations()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r4 = new com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: void <init>()>();

        i3 = 0;

     label4:
        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i2 goto label6;

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (com.hp.hpl.jena.update.Update) $r5;

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r8 = (com.hp.hpl.jena.update.Update) $r7;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateCompare: boolean isomorphic(com.hp.hpl.jena.update.Update,com.hp.hpl.jena.update.Update,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r6, r8, $r4);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return 1;
    }

    public static boolean isomorphic(com.hp.hpl.jena.update.Update, com.hp.hpl.jena.update.Update)
    {
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap $r2;
        com.hp.hpl.jena.update.Update r0, r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.update.Update;

        r1 := @parameter1: com.hp.hpl.jena.update.Update;

        $r2 = new com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: void <init>()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.modify.UpdateCompare: boolean isomorphic(com.hp.hpl.jena.update.Update,com.hp.hpl.jena.update.Update,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r0, r1, $r2);

        return $z0;
    }

    private static boolean isomorphic(com.hp.hpl.jena.update.Update, com.hp.hpl.jena.update.Update, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r2;
        com.hp.hpl.jena.update.Update r0, r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.update.Update;

        r1 := @parameter1: com.hp.hpl.jena.update.Update;

        r2 := @parameter2: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.update.Update: boolean equalTo(com.hp.hpl.jena.update.Update,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r1, r2);

        return $z0;
    }
}
