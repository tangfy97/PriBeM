class org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator extends java.lang.Object implements java.lang.Runnable
{
    private volatile int counter;
    private volatile boolean stop;
    final org.bouncycastle.crypto.prng.ThreadedSeedGenerator this$0;

    private void <init>(org.bouncycastle.crypto.prng.ThreadedSeedGenerator)
    {
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator r1;

        r0 := @this: org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

        r1 := @parameter0: org.bouncycastle.crypto.prng.ThreadedSeedGenerator;

        r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: org.bouncycastle.crypto.prng.ThreadedSeedGenerator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter> = 0;

        r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop> = 0;

        return;
    }

    public void run()
    {
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

     label1:
        $z0 = r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop>;

        if $z0 != 0 goto label2;

        $i0 = r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter>;

        $i1 = $i0 + 1;

        r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter> = $i1;

        goto label1;

     label2:
        return;
    }

    public byte[] generateSeed(int, boolean)
    {
        byte[] r2;
        byte $b1, $b5, $b7;
        java.lang.Thread $r4;
        int i0, $i2, $i3, $i4, $i6, i8, i9, i10, $i11, i12, $i13;
        boolean z0;
        java.lang.InterruptedException $r3;
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r1;

        r1 := @this: org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r4 = new java.lang.Thread;

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

        r2 = newarray (byte)[i0];

        r1.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter> = 0;

        r1.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop> = 0;

        i8 = 0;

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        if z0 == 0 goto label01;

        i9 = i0;

        goto label02;

     label01:
        i9 = i0 * 8;

     label02:
        i10 = 0;

     label03:
        if i10 >= i9 goto label11;

     label04:
        $i11 = r1.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter>;

        if $i11 != i8 goto label08;

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

     label06:
        goto label04;

     label07:
        $r3 := @caughtexception;

        goto label04;

     label08:
        i8 = r1.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: int counter>;

        if z0 == 0 goto label09;

        $i6 = i8 & 255;

        $b7 = (byte) $i6;

        r2[i10] = $b7;

        goto label10;

     label09:
        i12 = i10 / 8;

        $b1 = r2[i12];

        $i13 = (int) $b1;

        $i3 = $i13 << 1;

        $i2 = i8 & 1;

        $i4 = $i3 | $i2;

        $b5 = (byte) $i4;

        r2[i12] = $b5;

     label10:
        i10 = i10 + 1;

        goto label03;

     label11:
        r1.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: boolean stop> = 1;

        return r2;

        catch java.lang.InterruptedException from label05 to label06 with label07;
    }

    void <init>(org.bouncycastle.crypto.prng.ThreadedSeedGenerator, org.bouncycastle.crypto.prng.ThreadedSeedGenerator$1)
    {
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator r0;
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator r1;
        org.bouncycastle.crypto.prng.ThreadedSeedGenerator$1 r2;

        r0 := @this: org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator;

        r1 := @parameter0: org.bouncycastle.crypto.prng.ThreadedSeedGenerator;

        r2 := @parameter1: org.bouncycastle.crypto.prng.ThreadedSeedGenerator$1;

        specialinvoke r0.<org.bouncycastle.crypto.prng.ThreadedSeedGenerator$SeedGenerator: void <init>(org.bouncycastle.crypto.prng.ThreadedSeedGenerator)>(r1);

        return;
    }
}
