public class org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl extends java.lang.Object implements org.aspectj.lang.reflect.InterTypeDeclaration
{
    private org.aspectj.lang.reflect.AjType declaringType;
    protected java.lang.String targetTypeName;
    private org.aspectj.lang.reflect.AjType targetType;
    private int modifiers;

    public void <init>(org.aspectj.lang.reflect.AjType, java.lang.String, int)
    {
        org.aspectj.lang.reflect.AjType r1, $r5;
        org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl r0;
        java.lang.reflect.Type $r4;
        int i0;
        java.lang.Class $r3;
        java.lang.ClassNotFoundException $r6;
        java.lang.String r2;

        r0 := @this: org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.AjType;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType declaringType> = r1;

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: java.lang.String targetTypeName> = r2;

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: int modifiers> = i0;

     label1:
        $r3 = interfaceinvoke r1.<org.aspectj.lang.reflect.AjType: java.lang.Class getJavaClass()>();

        $r4 = staticinvoke <org.aspectj.internal.lang.reflect.StringToType: java.lang.reflect.Type stringToType(java.lang.String,java.lang.Class)>(r2, $r3);

        $r5 = (org.aspectj.lang.reflect.AjType) $r4;

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType targetType> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>(org.aspectj.lang.reflect.AjType, org.aspectj.lang.reflect.AjType, int)
    {
        org.aspectj.lang.reflect.AjType r1, r2;
        int i0;
        org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl r0;
        java.lang.String $r3;

        r0 := @this: org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.AjType;

        r2 := @parameter1: org.aspectj.lang.reflect.AjType;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType declaringType> = r1;

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType targetType> = r2;

        $r3 = interfaceinvoke r2.<org.aspectj.lang.reflect.AjType: java.lang.String getName()>();

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: java.lang.String targetTypeName> = $r3;

        r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: int modifiers> = i0;

        return;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl r0;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType declaringType>;

        return $r1;
    }

    public org.aspectj.lang.reflect.AjType getTargetType() throws java.lang.ClassNotFoundException
    {
        org.aspectj.lang.reflect.AjType $r1, $r2;
        org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl r0;
        java.lang.ClassNotFoundException $r3;
        java.lang.String $r4;

        r0 := @this: org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType targetType>;

        if $r1 != null goto label1;

        $r3 = new java.lang.ClassNotFoundException;

        $r4 = r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: java.lang.String targetTypeName>;

        specialinvoke $r3.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r2 = r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: org.aspectj.lang.reflect.AjType targetType>;

        return $r2;
    }

    public int getModifiers()
    {
        int $i0;
        org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl;

        $i0 = r0.<org.aspectj.internal.lang.reflect.InterTypeDeclarationImpl: int modifiers>;

        return $i0;
    }
}
