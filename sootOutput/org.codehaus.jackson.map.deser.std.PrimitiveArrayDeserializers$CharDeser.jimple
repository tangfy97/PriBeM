final class org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser extends org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$Base: void <init>(java.lang.Class)>(class "[C");

        return;
    }

    public char[] deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        byte[] $r10, $r11;
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r19, $r20, $r23;
        org.codehaus.jackson.Base64Variant $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r18, $r25, $r26, $r27, $r28;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.map.JsonMappingException $r7, $r30, $r32;
        int $i0, $i2, $i3, $i4;
        java.lang.String $r12, $r14, $r21, $r24, $r29;
        org.codehaus.jackson.JsonParser r0;
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser r5;
        char $c1;
        char[] $r13, $r15, $r16, $r17, $r22, $r33, r34;
        java.lang.Class $r6, $r31;
        java.lang.Object $r8;

        r5 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label01;

        $r33 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: char[] getTextCharacters()>();

        $i3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getTextOffset()>();

        $i4 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getTextLength()>();

        r34 = newarray (char)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r33, $i3, r34, 0, $i4);

        return r34;

     label01:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 == 0 goto label06;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(int)>(64);

     label02:
        $r19 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r20 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r19 == $r20 goto label05;

        $r23 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r19 == $r23 goto label03;

        $r31 = <java.lang.Character: java.lang.Class TYPE>;

        $r32 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r31);

        throw $r32;

     label03:
        $r24 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r24.<java.lang.String: int length()>();

        if $i0 == 1 goto label04;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not convert a JSON String of length ");

        $i2 = virtualinvoke $r24.<java.lang.String: int length()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into a char element of char array");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException 'from'(org.codehaus.jackson.JsonParser,java.lang.String)>(r0, $r29);

        throw $r30;

     label04:
        $c1 = virtualinvoke $r24.<java.lang.String: char charAt(int)>(0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label02;

     label05:
        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke $r21.<java.lang.String: char[] toCharArray()>();

        return $r22;

     label06:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r1 != $r3 goto label10;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        if $r8 != null goto label07;

        return null;

     label07:
        $z1 = $r8 instanceof char[];

        if $z1 == 0 goto label08;

        $r16 = (char[]) $r8;

        $r17 = (char[]) $r16;

        return $r17;

     label08:
        $z2 = $r8 instanceof java.lang.String;

        if $z2 == 0 goto label09;

        $r14 = (java.lang.String) $r8;

        $r15 = virtualinvoke $r14.<java.lang.String: char[] toCharArray()>();

        return $r15;

     label09:
        $z3 = $r8 instanceof byte[];

        if $z3 == 0 goto label10;

        $r9 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        $r10 = (byte[]) $r8;

        $r11 = (byte[]) $r10;

        $r12 = virtualinvoke $r9.<org.codehaus.jackson.Base64Variant: java.lang.String encode(byte[],boolean)>($r11, 0);

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        return $r13;

     label10:
        $r6 = r5.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser: java.lang.Class _valueClass>;

        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r7;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser r0;
        char[] $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers$CharDeser: char[] deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
