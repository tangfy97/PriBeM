public class org.waveprotocol.wave.client.editor.EditorUpdateEventImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.EditorUpdateEvent
{
    private static final int INITIAL_NOTIFY_SCHEDULE_DELAY_MS;
    private static final int NOTIFY_SCHEDULE_DELAY_GAP_MS;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners;
    private final org.waveprotocol.wave.client.editor.EditorImpl editor;
    private boolean notifyAgain;
    private boolean notedSelectionCoordsChanged;
    private boolean notedSelectionLocationChanged;
    private boolean notedContentChanged;
    private boolean notedUserDirectlyChangedContent;
    private final org.waveprotocol.wave.model.util.StringSet suppressedEventNames;
    org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask;

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.util.StringSet $r2;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1 $r3;
        org.waveprotocol.wave.client.editor.EditorImpl r4;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners> = $r1;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notifyAgain> = 0;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionCoordsChanged> = 0;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionLocationChanged> = 0;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedContentChanged> = 0;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedUserDirectlyChangedContent> = 0;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.StringSet suppressedEventNames> = $r2;

        $r3 = new org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl$1: void <init>(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)>(r0);

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask> = $r3;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.editor.EditorImpl editor> = r4;

        return;
    }

    public boolean selectionCoordsChanged()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionCoordsChanged>;

        return $z0;
    }

    public boolean selectionLocationChanged()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionLocationChanged>;

        return $z0;
    }

    public boolean contentChanged()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedContentChanged>;

        return $z0;
    }

    public boolean contentChangedDirectlyByUser()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedUserDirectlyChangedContent>;

        return $z0;
    }

    void scheduleUpdateNotification(boolean, boolean, boolean, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$Priority $r4;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r5;
        int $i0;
        boolean z0, $z1, $z2, z3, $z4, $z5, z6, $z7, $z8, z9, $z10, $z11, $z12;
        org.waveprotocol.wave.client.scheduler.Scheduler $r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask $r2, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        z0 := @parameter0: boolean;

        z3 := @parameter1: boolean;

        z6 := @parameter2: boolean;

        z9 := @parameter3: boolean;

        $z1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionCoordsChanged>;

        $z2 = $z1 | z0;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionCoordsChanged> = $z2;

        $z4 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionLocationChanged>;

        $z5 = $z4 | z3;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionLocationChanged> = $z5;

        $z7 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedContentChanged>;

        $z8 = $z7 | z6;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedContentChanged> = $z8;

        $z10 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedUserDirectlyChangedContent>;

        $z11 = $z10 | z9;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedUserDirectlyChangedContent> = $z11;

        $r1 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask>;

        $r5 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r2;

        $z12 = interfaceinvoke $r1.<org.waveprotocol.wave.client.scheduler.Scheduler: boolean isScheduled(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r5);

        if $z12 != 0 goto label1;

        $r4 = <org.waveprotocol.wave.client.scheduler.Scheduler$Priority: org.waveprotocol.wave.client.scheduler.Scheduler$Priority MEDIUM>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask>;

        $i0 = <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: int NOTIFY_SCHEDULE_DELAY_GAP_MS>;

        interfaceinvoke $r1.<org.waveprotocol.wave.client.scheduler.Scheduler: void scheduleRepeating(org.waveprotocol.wave.client.scheduler.Scheduler$Priority,org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask,int,int)>($r4, $r3, 20, $i0);

        goto label2;

     label1:
        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notifyAgain> = 1;

     label2:
        return;
    }

    void addUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    void removeUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    void flushUpdates()
    {
        org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask $r2, $r3;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r4;
        org.waveprotocol.wave.client.scheduler.Scheduler $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r0 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask>;

        $r4 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r2;

        interfaceinvoke $r0.<org.waveprotocol.wave.client.scheduler.Scheduler: void cancel(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r4);

        $r3 = r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask: boolean execute()>();

        return;
    }

    void clear()
    {
        org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask $r2;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r1;
        org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable $r4;
        org.waveprotocol.wave.client.scheduler.Scheduler $r0;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r0 = staticinvoke <org.waveprotocol.wave.client.scheduler.SchedulerInstance: org.waveprotocol.wave.client.scheduler.Scheduler get()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask notificationTask>;

        $r4 = (org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable) $r2;

        interfaceinvoke $r0.<org.waveprotocol.wave.client.scheduler.Scheduler: void cancel(org.waveprotocol.wave.client.scheduler.Scheduler$Schedulable)>($r4);

        $r3 = r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: void clear()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.EditorContext context()
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.editor.EditorImpl editor>;

        return $r1;
    }

    public void debugSuppressUpdateEvent(java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.util.StringSet $r2, $r3;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.StringSet suppressedEventNames>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r1);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.StringSet suppressedEventNames>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringSet: void remove(java.lang.String)>(r1);

     label2:
        return;
    }

    public org.waveprotocol.wave.model.util.StringSet debugGetAllUpdateEventNames()
    {
        org.waveprotocol.wave.model.util.StringSet $r0;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r1;
        java.util.Iterator $r3;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r5;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.lang.Object $r4;
        java.lang.Class $r6;
        java.lang.String $r7;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener) $r4;

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r0.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet debugGetSuppressedUpdateEventNames()
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.StringSet suppressedEventNames>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.EditorImpl access$000(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.client.editor.EditorImpl editor>;

        return $r1;
    }

    static boolean access$102(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notifyAgain> = z0;

        return z0;
    }

    static boolean access$200(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionCoordsChanged>;

        return $z0;
    }

    static boolean access$300(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionLocationChanged>;

        return $z0;
    }

    static boolean access$400(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedContentChanged>;

        return $z0;
    }

    static boolean access$500(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedUserDirectlyChangedContent>;

        return $z0;
    }

    static org.waveprotocol.wave.model.util.CopyOnWriteSet access$600(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet updateListeners>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.StringSet access$700(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.model.util.StringSet $r1;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: org.waveprotocol.wave.model.util.StringSet suppressedEventNames>;

        return $r1;
    }

    static boolean access$202(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionCoordsChanged> = z0;

        return z0;
    }

    static boolean access$302(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedSelectionLocationChanged> = z0;

        return z0;
    }

    static boolean access$402(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedContentChanged> = z0;

        return z0;
    }

    static boolean access$502(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notedUserDirectlyChangedContent> = z0;

        return z0;
    }

    static boolean access$100(org.waveprotocol.wave.client.editor.EditorUpdateEventImpl)
    {
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: boolean notifyAgain>;

        return $z0;
    }

    static void <clinit>()
    {
        short $s0;
        boolean $z0;

        <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: int INITIAL_NOTIFY_SCHEDULE_DELAY_MS> = 20;

        $z0 = staticinvoke <com.google.gwt.core.client.GWT: boolean isScript()>();

        if $z0 == 0 goto label1;

        $s0 = 500;

        goto label2;

     label1:
        $s0 = 2000;

     label2:
        <org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: int NOTIFY_SCHEDULE_DELAY_GAP_MS> = $s0;

        return;
    }
}
