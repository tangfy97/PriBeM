public class org.apache.batik.ext.awt.image.URLImageCache extends org.apache.batik.util.SoftReferenceCache
{
    static org.apache.batik.ext.awt.image.URLImageCache theCache;

    public static org.apache.batik.ext.awt.image.URLImageCache getDefaultCache()
    {
        org.apache.batik.ext.awt.image.URLImageCache $r0;

        $r0 = <org.apache.batik.ext.awt.image.URLImageCache: org.apache.batik.ext.awt.image.URLImageCache theCache>;

        return $r0;
    }

    public void <init>()
    {
        org.apache.batik.ext.awt.image.URLImageCache r0;

        r0 := @this: org.apache.batik.ext.awt.image.URLImageCache;

        specialinvoke r0.<org.apache.batik.util.SoftReferenceCache: void <init>()>();

        return;
    }

    public synchronized boolean isPresent(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.URLImageCache r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.URLImageCache;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        $z0 = specialinvoke r0.<org.apache.batik.util.SoftReferenceCache: boolean isPresentImpl(java.lang.Object)>(r1);

        return $z0;
    }

    public synchronized boolean isDone(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.URLImageCache r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.URLImageCache;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        $z0 = specialinvoke r0.<org.apache.batik.util.SoftReferenceCache: boolean isDoneImpl(java.lang.Object)>(r1);

        return $z0;
    }

    public synchronized org.apache.batik.ext.awt.image.renderable.Filter request(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;
        org.apache.batik.ext.awt.image.URLImageCache r0;

        r0 := @this: org.apache.batik.ext.awt.image.URLImageCache;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        $r2 = specialinvoke r0.<org.apache.batik.util.SoftReferenceCache: java.lang.Object requestImpl(java.lang.Object)>(r1);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public synchronized void clear(org.apache.batik.util.ParsedURL)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.URLImageCache r0;

        r0 := @this: org.apache.batik.ext.awt.image.URLImageCache;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        specialinvoke r0.<org.apache.batik.util.SoftReferenceCache: void clearImpl(java.lang.Object)>(r1);

        return;
    }

    public synchronized void put(org.apache.batik.util.ParsedURL, org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.util.ParsedURL r1;
        org.apache.batik.ext.awt.image.renderable.Filter r2;
        org.apache.batik.ext.awt.image.URLImageCache r0;

        r0 := @this: org.apache.batik.ext.awt.image.URLImageCache;

        r1 := @parameter0: org.apache.batik.util.ParsedURL;

        r2 := @parameter1: org.apache.batik.ext.awt.image.renderable.Filter;

        specialinvoke r0.<org.apache.batik.util.SoftReferenceCache: void putImpl(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        org.apache.batik.ext.awt.image.URLImageCache $r0;

        $r0 = new org.apache.batik.ext.awt.image.URLImageCache;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.URLImageCache: void <init>()>();

        <org.apache.batik.ext.awt.image.URLImageCache: org.apache.batik.ext.awt.image.URLImageCache theCache> = $r0;

        return;
    }
}
