class org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess extends org.waveprotocol.box.server.waveserver.ForwardingWaveletDeltaRecordReader implements org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess
{
    private final org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess;
    private org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot;
    private boolean isClosed;

    private void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess, org.waveprotocol.wave.model.wave.data.ReadableWaveletData)
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r2;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.ForwardingWaveletDeltaRecordReader: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: boolean isClosed> = 0;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess> = r1;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot> = r2;

        return;
    }

    protected org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader delegate()
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: boolean isClosed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Illegal access after closure");

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        return $r1;
    }

    public boolean isEmpty()
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getEndVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.data.ReadableWaveletData getSnapshot()
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: boolean isClosed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Illegal access after closure");

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot>;

        return $r1;
    }

    public void appendDeltas(java.util.Collection, org.waveprotocol.wave.model.wave.data.ReadableWaveletData) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r3;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;
        java.util.Collection r1;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        r1 := @parameter0: java.util.Collection;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        $z0 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: boolean isClosed>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Illegal access after closure");

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: void append(java.util.Collection)>(r1);

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.wave.model.wave.data.ReadableWaveletData snapshot> = r3;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: boolean isClosed> = 1;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess deltasAccess>;

        interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: void close()>();

        return;
    }

    void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess, org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$1)
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess r0;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$1 r3;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r3 := @parameter2: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$1;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess,org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r1, r2);

        return;
    }
}
