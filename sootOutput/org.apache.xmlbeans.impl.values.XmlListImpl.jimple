public class org.apache.xmlbeans.impl.values.XmlListImpl extends org.apache.xmlbeans.impl.values.XmlObjectBase implements org.apache.xmlbeans.XmlAnySimpleType
{
    private org.apache.xmlbeans.SchemaType _schemaType;
    private org.apache.xmlbeans.XmlSimpleList _value;
    private org.apache.xmlbeans.XmlSimpleList _jvalue;
    private static final java.lang.String[] EMPTY_STRINGARRAY;

    public void <init>(org.apache.xmlbeans.SchemaType, boolean)
    {
        org.apache.xmlbeans.SchemaType r1;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r1 := @parameter0: org.apache.xmlbeans.SchemaType;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.xmlbeans.impl.values.XmlObjectBase: void <init>()>();

        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType> = r1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: void initComplexType(boolean,boolean)>(z0, 0);

        return;
    }

    public org.apache.xmlbeans.SchemaType schemaType()
    {
        org.apache.xmlbeans.SchemaType $r1;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        return $r1;
    }

    private static java.lang.String nullAsEmpty(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return "";

     label1:
        return r0;
    }

    private static java.lang.String compute_list_text(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r7;
        java.lang.String $r4, $r5, $r6, $r9, $r10;
        org.apache.xmlbeans.SimpleValue $r3, $r8;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.apache.xmlbeans.SimpleValue) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.xmlbeans.SimpleValue: java.lang.String getStringValue()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String nullAsEmpty(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        i2 = 1;

     label2:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i1 goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r8 = (org.apache.xmlbeans.SimpleValue) $r7;

        $r9 = interfaceinvoke $r8.<org.apache.xmlbeans.SimpleValue: java.lang.String getStringValue()>();

        $r10 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String nullAsEmpty(java.lang.String)>($r9);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    protected java.lang.String compute_text(org.apache.xmlbeans.impl.values.NamespaceManager)
    {
        org.apache.xmlbeans.XmlSimpleList $r1;
        org.apache.xmlbeans.impl.values.NamespaceManager r3;
        java.lang.String $r2;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r3 := @parameter0: org.apache.xmlbeans.impl.values.NamespaceManager;

        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String compute_list_text(java.util.List)>($r1);

        return $r2;
    }

    protected boolean is_defaultable_ws(java.lang.String)
    {
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r2;
        org.apache.xmlbeans.XmlSimpleList r3;
        java.lang.String r1;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        r3 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: void set_text(java.lang.String)>(r1);

        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value> = r3;

     label2:
        return 0;

     label3:
        $r2 := @caughtexception;

        return 1;

        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label1 to label2 with label3;
    }

    protected void set_text(java.lang.String)
    {
        java.lang.Object[] $r10;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r9;
        java.lang.String r3, $r12;
        org.apache.xmlbeans.SchemaType $r1, $r2, $r7, $r8, $r11;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.values.TypeStore $r13;
        org.apache.xmlbeans.impl.common.ValidationContext $r4, $r6;
        org.apache.xmlbeans.XmlSimpleList $r5;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r3 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: boolean _validateOnSet()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        $z3 = interfaceinvoke $r8.<org.apache.xmlbeans.SchemaType: boolean matchPatternFacet(java.lang.String)>(r3);

        if $z3 != 0 goto label1;

        $r9 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        $r10 = newarray (java.lang.Object)[3];

        $r10[0] = "list";

        $r10[1] = r3;

        $r11 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        $r12 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>($r11);

        $r10[2] = $r12;

        specialinvoke $r9.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>(java.lang.String,java.lang.Object[])>("cvc-datatype-valid.1.1", $r10);

        throw $r9;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getListItemType()>();

        $r4 = <org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: boolean has_store()>();

        if $z1 == 0 goto label2;

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        goto label3;

     label2:
        $r13 = null;

     label3:
        $r5 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList lex(java.lang.String,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext,org.apache.xmlbeans.impl.common.PrefixResolver)>(r3, $r2, $r4, $r13);

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: boolean _validateOnSet()>();

        if $z2 == 0 goto label4;

        $r7 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        $r6 = <org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: void validateValue(org.apache.xmlbeans.XmlSimpleList,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext)>($r5, $r7, $r6);

     label4:
        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value> = $r5;

        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _jvalue> = null;

        return;
    }

    public static java.lang.String[] split_list(java.lang.String)
    {
        java.lang.Object[] $r4;
        java.lang.String[] $r3, $r5, $r6, $r7;
        java.util.ArrayList $r8;
        int $i0, $i1, $i2, i5, $i6, i7, $i8, $i9;
        java.lang.String r0, $r2;
        boolean $z0, $z1;
        char $c3, $c4;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r7 = <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String[] EMPTY_STRINGARRAY>;

        return $r7;

     label1:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label2:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i6 goto label3;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i8 = (int) $c4;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.common.XMLChar: boolean isSpace(int)>($i8);

        if $z1 == 0 goto label3;

        i5 = i5 + 1;

        goto label2;

     label3:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 < $i1 goto label4;

        $r3 = <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String[] EMPTY_STRINGARRAY>;

        $r4 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        $r6 = (java.lang.String[]) $r5;

        return $r6;

     label4:
        i7 = i5;

     label5:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 >= $i2 goto label6;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i9 = (int) $c3;

        $z0 = staticinvoke <org.apache.xmlbeans.impl.common.XMLChar: boolean isSpace(int)>($i9);

        if $z0 != 0 goto label6;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i7, i5);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r2);

        goto label2;
    }

    public static org.apache.xmlbeans.XmlSimpleList lex(java.lang.String, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.common.ValidationContext, org.apache.xmlbeans.impl.common.PrefixResolver)
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r13;
        java.lang.String[] $r1;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r11;
        org.apache.xmlbeans.XmlAnySimpleType[] r2;
        java.lang.StringBuffer $r14, $r15, $r17, $r18, $r20;
        int $i0, i1, $i2;
        java.lang.String r0, $r7, $r16, $r19, $r21;
        org.apache.xmlbeans.SchemaType r6;
        org.apache.xmlbeans.impl.common.PrefixResolver r3;
        boolean z0, z1, z2;
        org.apache.xmlbeans.XmlAnySimpleType $r8;
        org.apache.xmlbeans.impl.values.NamespaceContext $r9;
        java.util.List $r5;
        org.apache.xmlbeans.impl.common.ValidationContext r12;
        org.apache.xmlbeans.XmlSimpleList $r4;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.xmlbeans.SchemaType;

        r12 := @parameter2: org.apache.xmlbeans.impl.common.ValidationContext;

        r3 := @parameter3: org.apache.xmlbeans.impl.common.PrefixResolver;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String[] split_list(java.lang.String)>(r0);

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.xmlbeans.XmlAnySimpleType)[$i0];

        z0 = 0;

        z2 = 0;

        z1 = 0;

        if r3 == null goto label01;

        $r9 = new org.apache.xmlbeans.impl.values.NamespaceContext;

        specialinvoke $r9.<org.apache.xmlbeans.impl.values.NamespaceContext: void <init>(org.apache.xmlbeans.impl.common.PrefixResolver)>(r3);

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void push(org.apache.xmlbeans.impl.values.NamespaceContext)>($r9);

        z0 = 1;

        z2 = 1;

        z1 = 1;

     label01:
        i1 = 0;

     label02:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label07;

     label03:
        $r7 = $r1[i1];

        $r8 = interfaceinvoke r6.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)>($r7);

        r2[i1] = $r8;

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("item \'");

        $r16 = $r1[i1];

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not a valid value of ");

        $r19 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r6);

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13[0] = $r21;

        interfaceinvoke r12.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("list", $r13);

     label06:
        i1 = i1 + 1;

        goto label02;

     label07:
        if z1 == 0 goto label11;

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        goto label11;

     label08:
        $r10 := @caughtexception;

     label09:
        if z2 == 0 goto label10;

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

     label10:
        throw $r10;

     label11:
        $r4 = new org.apache.xmlbeans.XmlSimpleList;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r2);

        specialinvoke $r4.<org.apache.xmlbeans.XmlSimpleList: void <init>(java.util.List)>($r5);

        return $r4;

        catch org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    protected void set_nil()
    {
        org.apache.xmlbeans.impl.values.XmlListImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value> = null;

        return;
    }

    public java.util.List xgetListValue()
    {
        org.apache.xmlbeans.impl.values.XmlListImpl r0;
        org.apache.xmlbeans.XmlSimpleList $r1;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: void check_dated()>();

        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        return $r1;
    }

    public java.util.List getListValue()
    {
        java.util.ArrayList $r3;
        org.apache.xmlbeans.XmlSimpleList $r1, $r2, $r4, $r5, $r6, $r7, $r11;
        int $i0, i1;
        java.lang.Object $r8, $r10;
        org.apache.xmlbeans.XmlObject $r9;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: void check_dated()>();

        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _jvalue>;

        if $r2 == null goto label2;

        $r11 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _jvalue>;

        return $r11;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label3:
        $r4 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $i0 = virtualinvoke $r4.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        if i1 >= $i0 goto label4;

        $r7 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.XmlSimpleList: java.lang.Object get(int)>(i1);

        $r9 = (org.apache.xmlbeans.XmlObject) $r8;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.Object java_value(org.apache.xmlbeans.XmlObject)>($r9);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r5 = new org.apache.xmlbeans.XmlSimpleList;

        specialinvoke $r5.<org.apache.xmlbeans.XmlSimpleList: void <init>(java.util.List)>($r3);

        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _jvalue> = $r5;

        $r6 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _jvalue>;

        return $r6;
    }

    private static boolean permits_inner_space(org.apache.xmlbeans.XmlObject)
    {
        int $i0;
        org.apache.xmlbeans.XmlObject r0;
        org.apache.xmlbeans.SchemaType $r2, $r3;
        org.apache.xmlbeans.SimpleValue $r1;

        r0 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r1 = (org.apache.xmlbeans.SimpleValue) r0;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SimpleValue: org.apache.xmlbeans.SchemaType instanceType()>();

        $r3 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getPrimitiveType()>();

        $i0 = interfaceinvoke $r3.<org.apache.xmlbeans.SchemaType: int getBuiltinTypeCode()>();

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 6: goto label1;
            case 12: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private static boolean contains_white_space(java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        if $i0 >= 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(9);

        if $i1 >= 0 goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(10);

        if $i2 >= 0 goto label1;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(13);

        if $i3 < 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void set_list(java.util.List)
    {
        java.lang.Throwable $r17;
        org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException $r13;
        org.apache.xmlbeans.XmlAnySimpleType[] $r16;
        int $i0, i1, $i2;
        org.apache.xmlbeans.XmlObject $r10;
        java.lang.String $r12;
        org.apache.xmlbeans.SchemaType $r1, $r2, $r7;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7;
        org.apache.xmlbeans.XmlAnySimpleType $r18;
        org.apache.xmlbeans.impl.values.NamespaceContext $r14;
        org.apache.xmlbeans.impl.values.TypeStore $r15;
        java.util.List r3, $r5;
        org.apache.xmlbeans.impl.common.ValidationContext $r6;
        org.apache.xmlbeans.XmlSimpleList $r4;
        java.lang.Object $r8, $r9, $r11;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r3 := @parameter0: java.util.List;

        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        $r2 = interfaceinvoke $r1.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType getListItemType()>();

        z5 = 0;

        z7 = 0;

        z6 = 0;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: boolean has_store()>();

        if $z0 == 0 goto label01;

        $r14 = new org.apache.xmlbeans.impl.values.NamespaceContext;

        $r15 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.impl.values.TypeStore get_store()>();

        specialinvoke $r14.<org.apache.xmlbeans.impl.values.NamespaceContext: void <init>(org.apache.xmlbeans.impl.values.TypeStore)>($r15);

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void push(org.apache.xmlbeans.impl.values.NamespaceContext)>($r14);

        z5 = 1;

        z7 = 1;

        z6 = 1;

     label01:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r16 = newarray (org.apache.xmlbeans.XmlAnySimpleType)[$i0];

        i1 = 0;

     label02:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if i1 >= $i2 goto label04;

        $r8 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        $z2 = $r8 instanceof org.apache.xmlbeans.XmlObject;

        if $z2 == 0 goto label03;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (org.apache.xmlbeans.XmlObject) $r9;

        $z3 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: boolean permits_inner_space(org.apache.xmlbeans.XmlObject)>($r10);

        if $z3 == 0 goto label03;

        $r11 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        $z4 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: boolean contains_white_space(java.lang.String)>($r12);

        if $z4 == 0 goto label03;

        $r13 = new org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException;

        specialinvoke $r13.<org.apache.xmlbeans.impl.values.XmlValueOutOfRangeException: void <init>()>();

        throw $r13;

     label03:
        $r18 = interfaceinvoke $r2.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType newValue(java.lang.Object)>($r8);

        $r16[i1] = $r18;

        i1 = i1 + 1;

        goto label02;

     label04:
        $r4 = new org.apache.xmlbeans.XmlSimpleList;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r16);

        specialinvoke $r4.<org.apache.xmlbeans.XmlSimpleList: void <init>(java.util.List)>($r5);

     label05:
        if z6 == 0 goto label09;

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

        goto label09;

     label06:
        $r17 := @caughtexception;

     label07:
        if z7 == 0 goto label08;

        staticinvoke <org.apache.xmlbeans.impl.values.NamespaceContext: void pop()>();

     label08:
        throw $r17;

     label09:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: boolean _validateOnSet()>();

        if $z1 == 0 goto label10;

        $r7 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType _schemaType>;

        $r6 = <org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.impl.common.ValidationContext _voorVc>;

        staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: void validateValue(org.apache.xmlbeans.XmlSimpleList,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext)>($r4, $r7, $r6);

     label10:
        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value> = $r4;

        r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _jvalue> = null;

        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static void validateValue(org.apache.xmlbeans.XmlSimpleList, org.apache.xmlbeans.SchemaType, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        org.apache.xmlbeans.impl.values.XmlObjectBase $r22;
        java.lang.Integer $r6, $r7, $r11, $r12, $r16, $r17;
        org.apache.xmlbeans.SchemaType r0;
        boolean $z0;
        org.apache.xmlbeans.XmlAnySimpleType $r21, $r24, $r25, $r26;
        java.util.List $r23;
        org.apache.xmlbeans.XmlSimpleList r3;
        java.lang.Object[] $r5, $r10, $r15, $r19;
        org.apache.xmlbeans.XmlAnySimpleType[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r8, $r13, $r18, $r20;
        org.apache.xmlbeans.SimpleValue $r2, $r9, $r14;
        org.apache.xmlbeans.impl.common.ValidationContext r4;

        r3 := @parameter0: org.apache.xmlbeans.XmlSimpleList;

        r0 := @parameter1: org.apache.xmlbeans.SchemaType;

        r4 := @parameter2: org.apache.xmlbeans.impl.common.ValidationContext;

        $r1 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType[] getEnumerationValues()>();

        if $r1 == null goto label4;

        i10 = 0;

     label1:
        $i9 = lengthof $r1;

        if i10 >= $i9 goto label3;

        $r21 = $r1[i10];

        $r22 = (org.apache.xmlbeans.impl.values.XmlObjectBase) $r21;

        $r23 = virtualinvoke $r22.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.util.List xlistValue()>();

        $z0 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: boolean equal_xmlLists(java.util.List,java.util.List)>(r3, $r23);

        if $z0 == 0 goto label2;

        goto label4;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        $r19 = newarray (java.lang.Object)[3];

        $r19[0] = "list";

        $r19[1] = r3;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r0);

        $r19[2] = $r20;

        interfaceinvoke r4.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-enumeration-valid", $r19);

     label4:
        $r24 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(0);

        if $r24 == null goto label5;

        $r14 = (org.apache.xmlbeans.SimpleValue) $r24;

        $i6 = interfaceinvoke $r14.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

        $i7 = virtualinvoke r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        if $i6 == $i7 goto label5;

        $r15 = newarray (java.lang.Object)[4];

        $r15[0] = r3;

        $r16 = new java.lang.Integer;

        $i8 = virtualinvoke r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        specialinvoke $r16.<java.lang.Integer: void <init>(int)>($i8);

        $r15[1] = $r16;

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i6);

        $r15[2] = $r17;

        $r18 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r0);

        $r15[3] = $r18;

        interfaceinvoke r4.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-length-valid.2", $r15);

     label5:
        $r25 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(1);

        if $r25 == null goto label6;

        $r9 = (org.apache.xmlbeans.SimpleValue) $r25;

        $i3 = interfaceinvoke $r9.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

        $i4 = virtualinvoke r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        if $i3 <= $i4 goto label6;

        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = r3;

        $r11 = new java.lang.Integer;

        $i5 = virtualinvoke r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i5);

        $r10[1] = $r11;

        $r12 = new java.lang.Integer;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i3);

        $r10[2] = $r12;

        $r13 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r0);

        $r10[3] = $r13;

        interfaceinvoke r4.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-minLength-valid.2", $r10);

     label6:
        $r26 = interfaceinvoke r0.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.XmlAnySimpleType getFacet(int)>(2);

        if $r26 == null goto label7;

        $r2 = (org.apache.xmlbeans.SimpleValue) $r26;

        $i0 = interfaceinvoke $r2.<org.apache.xmlbeans.SimpleValue: int getIntValue()>();

        $i1 = virtualinvoke r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        if $i0 >= $i1 goto label7;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r3;

        $r6 = new java.lang.Integer;

        $i2 = virtualinvoke r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i2);

        $r5[1] = $r6;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i0);

        $r5[2] = $r7;

        $r8 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String readable(org.apache.xmlbeans.SchemaType)>(r0);

        $r5[3] = $r8;

        interfaceinvoke r4.<org.apache.xmlbeans.impl.common.ValidationContext: void invalid(java.lang.String,java.lang.Object[])>("cvc-maxLength-valid.2", $r5);

     label7:
        return;
    }

    protected boolean equal_to(org.apache.xmlbeans.XmlObject)
    {
        java.util.List $r4;
        org.apache.xmlbeans.impl.values.XmlObjectBase $r2;
        org.apache.xmlbeans.XmlSimpleList $r3;
        org.apache.xmlbeans.XmlObject r1;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r1 := @parameter0: org.apache.xmlbeans.XmlObject;

        $r3 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $r2 = (org.apache.xmlbeans.impl.values.XmlObjectBase) r1;

        $r4 = virtualinvoke $r2.<org.apache.xmlbeans.impl.values.XmlObjectBase: java.util.List xlistValue()>();

        $z0 = staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: boolean equal_xmlLists(java.util.List,java.util.List)>($r3, $r4);

        return $z0;
    }

    private static boolean equal_xmlLists(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    protected int value_hash_code()
    {
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, i8, i9;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;
        org.apache.xmlbeans.XmlSimpleList $r1, $r2, $r3, $r4, $r5, $r7, $r9;
        java.lang.Object $r6, $r8;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        i4 = virtualinvoke $r2.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        $r3 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $i0 = virtualinvoke $r3.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        i5 = $i0 / 9;

        if i5 >= 1 goto label2;

        i5 = 1;

     label2:
        i6 = 0;

     label3:
        $r9 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $i7 = virtualinvoke $r9.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        if i6 >= $i7 goto label4;

        i8 = i4 * 19;

        $r7 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.XmlSimpleList: java.lang.Object get(int)>(i6);

        $i3 = virtualinvoke $r8.<java.lang.Object: int hashCode()>();

        i4 = i8 + $i3;

        i6 = i6 + i5;

        goto label3;

     label4:
        $r4 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $i1 = virtualinvoke $r4.<org.apache.xmlbeans.XmlSimpleList: int size()>();

        if i6 >= $i1 goto label5;

        i9 = i4 * 19;

        $r5 = r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.XmlSimpleList _value>;

        $r6 = virtualinvoke $r5.<org.apache.xmlbeans.XmlSimpleList: java.lang.Object get(int)>(i6);

        $i2 = virtualinvoke $r6.<java.lang.Object: int hashCode()>();

        i4 = i9 + $i2;

     label5:
        return i4;
    }

    protected void validate_simpleval(java.lang.String, org.apache.xmlbeans.impl.common.ValidationContext)
    {
        java.util.List $r1;
        org.apache.xmlbeans.impl.common.ValidationContext r4;
        org.apache.xmlbeans.XmlSimpleList $r2;
        java.lang.String r5;
        org.apache.xmlbeans.SchemaType $r3;
        org.apache.xmlbeans.impl.values.XmlListImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.values.XmlListImpl;

        r5 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.xmlbeans.impl.common.ValidationContext;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: java.util.List xlistValue()>();

        $r2 = (org.apache.xmlbeans.XmlSimpleList) $r1;

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.values.XmlListImpl: org.apache.xmlbeans.SchemaType schemaType()>();

        staticinvoke <org.apache.xmlbeans.impl.values.XmlListImpl: void validateValue(org.apache.xmlbeans.XmlSimpleList,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.impl.common.ValidationContext)>($r2, $r3, r4);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <org.apache.xmlbeans.impl.values.XmlListImpl: java.lang.String[] EMPTY_STRINGARRAY> = $r0;

        return;
    }
}
