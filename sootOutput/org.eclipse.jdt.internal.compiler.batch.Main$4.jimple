final class org.eclipse.jdt.internal.compiler.batch.Main$4 extends java.lang.Object implements org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy
{
    final org.eclipse.jdt.internal.compiler.batch.Main this$0;

    void <init>(org.eclipse.jdt.internal.compiler.batch.Main)
    {
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        org.eclipse.jdt.internal.compiler.batch.Main$4 r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$4;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.batch.Main;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main$4: org.eclipse.jdt.internal.compiler.batch.Main this$0> = r1;

        return;
    }

    public boolean proceedOnErrors()
    {
        org.eclipse.jdt.internal.compiler.batch.Main $r1;
        org.eclipse.jdt.internal.compiler.batch.Main$4 r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$4;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main$4: org.eclipse.jdt.internal.compiler.batch.Main this$0>;

        $z0 = $r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceedOnError>;

        return $z0;
    }

    public boolean stopOnFirstError()
    {
        org.eclipse.jdt.internal.compiler.batch.Main$4 r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main$4;

        return 0;
    }
}
