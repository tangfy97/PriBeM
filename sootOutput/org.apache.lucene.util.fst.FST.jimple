public final class org.apache.lucene.util.fst.FST extends java.lang.Object
{
    public final org.apache.lucene.util.fst.FST$INPUT_TYPE inputType;
    static final int BIT_FINAL_ARC;
    static final int BIT_LAST_ARC;
    static final int BIT_TARGET_NEXT;
    static final int BIT_STOP_NODE;
    static final int BIT_ARC_HAS_OUTPUT;
    static final int BIT_ARC_HAS_FINAL_OUTPUT;
    private static final int BIT_TARGET_DELTA;
    private static final byte ARCS_AS_FIXED_ARRAY;
    static final int FIXED_ARRAY_SHALLOW_DISTANCE;
    static final int FIXED_ARRAY_NUM_ARCS_SHALLOW;
    static final int FIXED_ARRAY_NUM_ARCS_DEEP;
    private int[] bytesPerArc;
    private static final java.lang.String FILE_FORMAT_NAME;
    private static final int VERSION_START;
    private static final int VERSION_INT_NUM_BYTES_PER_ARC;
    private static final int VERSION_SHORT_BYTE2_LABELS;
    private static final int VERSION_PACKED;
    private static final int VERSION_VINT_TARGET;
    private static final int VERSION_CURRENT;
    private static final long FINAL_END_NODE;
    private static final long NON_FINAL_END_NODE;
    java.lang.Object emptyOutput;
    final org.apache.lucene.util.fst.BytesStore bytes;
    private long startNode;
    public final org.apache.lucene.util.fst.Outputs outputs;
    private long lastFrozenNode;
    private final java.lang.Object NO_OUTPUT;
    public long nodeCount;
    public long arcCount;
    public long arcWithOutputCount;
    private final boolean packed;
    private org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress;
    public static final int END_LABEL;
    private final boolean allowArrayArcs;
    private org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs;
    private org.apache.lucene.util.packed.GrowableWriter nodeAddress;
    private org.apache.lucene.util.packed.GrowableWriter inCounts;
    private final int version;
    public static final int DEFAULT_MAX_BLOCK_BITS;
    static final boolean $assertionsDisabled;

    private static boolean flag(int, int)
    {
        int i0, i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & i1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs, boolean, float, boolean, int)
    {
        org.apache.lucene.util.fst.BytesStore $r4, $r5;
        org.apache.lucene.util.packed.GrowableWriter $r7, $r8;
        org.apache.lucene.util.fst.Outputs r3;
        int[] $r1;
        int i0;
        org.apache.lucene.util.fst.FST r0;
        float f0;
        org.apache.lucene.util.fst.FST$INPUT_TYPE r2;
        java.lang.Object $r6;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r2 := @parameter0: org.apache.lucene.util.fst.FST$INPUT_TYPE;

        r3 := @parameter1: org.apache.lucene.util.fst.Outputs;

        z1 := @parameter2: boolean;

        f0 := @parameter3: float;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[0];

        r0.<org.apache.lucene.util.fst.FST: int[] bytesPerArc> = $r1;

        r0.<org.apache.lucene.util.fst.FST: long startNode> = -1L;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType> = r2;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs> = r3;

        r0.<org.apache.lucene.util.fst.FST: boolean allowArrayArcs> = z0;

        r0.<org.apache.lucene.util.fst.FST: int version> = 4;

        $r4 = new org.apache.lucene.util.fst.BytesStore;

        specialinvoke $r4.<org.apache.lucene.util.fst.BytesStore: void <init>(int)>(i0);

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes> = $r4;

        $r5 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r5.<org.apache.lucene.util.fst.BytesStore: void writeByte(byte)>(0);

        $r6 = virtualinvoke r3.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT> = $r6;

        if z1 == 0 goto label1;

        $r7 = new org.apache.lucene.util.packed.GrowableWriter;

        specialinvoke $r7.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,float)>(15, 8, f0);

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress> = $r7;

        $r8 = new org.apache.lucene.util.packed.GrowableWriter;

        specialinvoke $r8.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,float)>(1, 8, f0);

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts> = $r8;

        goto label2;

     label1:
        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress> = null;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts> = null;

     label2:
        r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput> = null;

        r0.<org.apache.lucene.util.fst.FST: boolean packed> = 0;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress> = null;

        return;
    }

    public void <init>(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r1;
        int $i0;
        org.apache.lucene.util.fst.FST r0;
        org.apache.lucene.util.fst.Outputs r2;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r1 := @parameter0: org.apache.lucene.store.DataInput;

        r2 := @parameter1: org.apache.lucene.util.fst.Outputs;

        $i0 = <org.apache.lucene.util.fst.FST: int DEFAULT_MAX_BLOCK_BITS>;

        specialinvoke r0.<org.apache.lucene.util.fst.FST: void <init>(org.apache.lucene.store.DataInput,org.apache.lucene.util.fst.Outputs,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs, int) throws java.io.IOException
    {
        java.lang.IllegalStateException $r28;
        org.apache.lucene.util.fst.BytesStore $r26, $r29;
        byte $b2, $b3, $b4;
        int[] $r1;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.packed.PackedInts$Reader $r12;
        java.lang.StringBuilder $r5, $r6, $r17, $r18, $r24, $r27;
        org.apache.lucene.store.DataInput r8;
        org.apache.lucene.util.fst.FST$BytesReader $r21, r22;
        long $l5, $l6, $l7, $l8, $l9, $l12, $l14;
        org.apache.lucene.util.fst.Outputs r2;
        int i0, $i1, $i10, $i11, $i13, $i15, $i16;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r9, $r13, $r14;
        java.lang.String $r7, $r19;
        java.lang.IllegalArgumentException $r25;
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r11, $r23;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r8 := @parameter0: org.apache.lucene.store.DataInput;

        r2 := @parameter1: org.apache.lucene.util.fst.Outputs;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[0];

        r0.<org.apache.lucene.util.fst.FST: int[] bytesPerArc> = $r1;

        r0.<org.apache.lucene.util.fst.FST: long startNode> = -1L;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs> = r2;

        if i0 < 1 goto label01;

        if i0 <= 30 goto label02;

     label01:
        $r25 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxBlockBits should be 1 .. 30; got ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r25;

     label02:
        $i1 = staticinvoke <org.apache.lucene.codecs.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>(r8, "FST", 3, 4);

        r0.<org.apache.lucene.util.fst.FST: int version> = $i1;

        $b2 = virtualinvoke r8.<org.apache.lucene.store.DataInput: byte readByte()>();

        if $b2 != 1 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        r0.<org.apache.lucene.util.fst.FST: boolean packed> = $z1;

        $b3 = virtualinvoke r8.<org.apache.lucene.store.DataInput: byte readByte()>();

        if $b3 != 1 goto label07;

        $r26 = new org.apache.lucene.util.fst.BytesStore;

        specialinvoke $r26.<org.apache.lucene.util.fst.BytesStore: void <init>(int)>(10);

        $i11 = virtualinvoke r8.<org.apache.lucene.store.DataInput: int readVInt()>();

        $l12 = (long) $i11;

        virtualinvoke $r26.<org.apache.lucene.util.fst.BytesStore: void copyBytes(org.apache.lucene.store.DataInput,long)>(r8, $l12);

        $z0 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z0 == 0 goto label05;

        r22 = virtualinvoke $r26.<org.apache.lucene.util.fst.BytesStore: org.apache.lucene.util.fst.FST$BytesReader getForwardReader()>();

        goto label06;

     label05:
        $r21 = virtualinvoke $r26.<org.apache.lucene.util.fst.BytesStore: org.apache.lucene.util.fst.FST$BytesReader getReverseReader()>();

        r22 = $r21;

        if $i11 <= 0 goto label06;

        $i13 = $i11 - 1;

        $l14 = (long) $i13;

        virtualinvoke $r21.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l14);

     label06:
        $r23 = virtualinvoke r2.<org.apache.lucene.util.fst.Outputs: java.lang.Object readFinalOutput(org.apache.lucene.store.DataInput)>(r22);

        r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput> = $r23;

        goto label08;

     label07:
        r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput> = null;

     label08:
        $b4 = virtualinvoke r8.<org.apache.lucene.store.DataInput: byte readByte()>();

        $i15 = (int) $b4;

        tableswitch($i15)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label09:
        $r14 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType> = $r14;

        goto label13;

     label10:
        $r13 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE2>;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType> = $r13;

        goto label13;

     label11:
        $r9 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE4>;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType> = $r9;

        goto label13;

     label12:
        $r28 = new java.lang.IllegalStateException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid input type ");

        $i16 = (int) $b4;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r28;

     label13:
        $z2 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z2 == 0 goto label14;

        $r12 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Reader getReader(org.apache.lucene.store.DataInput)>(r8);

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress> = $r12;

        goto label15;

     label14:
        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress> = null;

     label15:
        $l5 = virtualinvoke r8.<org.apache.lucene.store.DataInput: long readVLong()>();

        r0.<org.apache.lucene.util.fst.FST: long startNode> = $l5;

        $l6 = virtualinvoke r8.<org.apache.lucene.store.DataInput: long readVLong()>();

        r0.<org.apache.lucene.util.fst.FST: long nodeCount> = $l6;

        $l7 = virtualinvoke r8.<org.apache.lucene.store.DataInput: long readVLong()>();

        r0.<org.apache.lucene.util.fst.FST: long arcCount> = $l7;

        $l8 = virtualinvoke r8.<org.apache.lucene.store.DataInput: long readVLong()>();

        r0.<org.apache.lucene.util.fst.FST: long arcWithOutputCount> = $l8;

        $l9 = virtualinvoke r8.<org.apache.lucene.store.DataInput: long readVLong()>();

        $r29 = new org.apache.lucene.util.fst.BytesStore;

        $i10 = 1 << i0;

        specialinvoke $r29.<org.apache.lucene.util.fst.BytesStore: void <init>(org.apache.lucene.store.DataInput,long,int)>(r8, $l9, $i10);

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes> = $r29;

        $r11 = virtualinvoke r2.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT> = $r11;

        specialinvoke r0.<org.apache.lucene.util.fst.FST: void cacheRootArcs()>();

        r0.<org.apache.lucene.util.fst.FST: boolean allowArrayArcs> = 0;

        return;
    }

    public org.apache.lucene.util.fst.FST$INPUT_TYPE getInputType()
    {
        org.apache.lucene.util.fst.FST r0;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r1;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $r1 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        return $r1;
    }

    public long sizeInBytes()
    {
        org.apache.lucene.util.fst.BytesStore $r1;
        org.apache.lucene.util.packed.GrowableWriter $r2, $r3, $r4;
        long $l0, $l1, $l2, $l3, l4, l5;
        org.apache.lucene.util.packed.PackedInts$Reader $r5;
        org.apache.lucene.util.fst.FST r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $r1 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        l4 = $l0;

        $z0 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress>;

        $l3 = interfaceinvoke $r5.<org.apache.lucene.util.packed.PackedInts$Reader: long ramBytesUsed()>();

        l4 = $l0 + $l3;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $l1 = virtualinvoke $r3.<org.apache.lucene.util.packed.GrowableWriter: long ramBytesUsed()>();

        l5 = $l0 + $l1;

        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l2 = virtualinvoke $r4.<org.apache.lucene.util.packed.GrowableWriter: long ramBytesUsed()>();

        l4 = l5 + $l2;

     label2:
        return l4;
    }

    void finish(long) throws java.io.IOException
    {
        java.lang.IllegalStateException $r2;
        org.apache.lucene.util.fst.BytesStore $r3;
        long $l0, l3;
        byte $b1, $b2;
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.lucene.util.fst.FST;

        l3 := @parameter0: long;

        $l0 = r0.<org.apache.lucene.util.fst.FST: long startNode>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already finished");

        throw $r2;

     label1:
        $b2 = l3 cmp -1L;

        if $b2 != 0 goto label2;

        $r1 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        if $r1 == null goto label2;

        l3 = 0L;

     label2:
        r0.<org.apache.lucene.util.fst.FST: long startNode> = l3;

        $r3 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r3.<org.apache.lucene.util.fst.BytesStore: void finish()>();

        specialinvoke r0.<org.apache.lucene.util.fst.FST: void cacheRootArcs()>();

        return;
    }

    private long getNodeAddress(long)
    {
        org.apache.lucene.util.packed.GrowableWriter $r1, $r2;
        int $i1;
        org.apache.lucene.util.fst.FST r0;
        long l0, $l2;

        r0 := @this: org.apache.lucene.util.fst.FST;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $i1 = (int) l0;

        $l2 = virtualinvoke $r2.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i1);

        return $l2;

     label1:
        return l0;
    }

    private void cacheRootArcs() throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader $r4;
        long $l0;
        java.lang.AssertionError $r11;
        org.apache.lucene.util.fst.FST$Arc $r8, $r10, $r12;
        int $i1, $i2, $i3, $i4, $i6;
        org.apache.lucene.util.fst.FST$Arc[] $r1, $r2, $r5, $r7;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.fst.FST r0;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $r1 = newarray (org.apache.lucene.util.fst.FST$Arc)[128];

        $r2 = (org.apache.lucene.util.fst.FST$Arc[]) $r1;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs> = $r2;

        $r10 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r10.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc getFirstArc(org.apache.lucene.util.fst.FST$Arc)>($r10);

        $r4 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$BytesReader getBytesReader()>();

        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>($r10);

        if $z0 == 0 goto label4;

        $l0 = $r10.<org.apache.lucene.util.fst.FST$Arc: long target>;

        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l0, $r10, $r4);

     label1:
        $z1 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i4 = $r10.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $i6 = (int) -1;

        if $i4 != $i6 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $i2 = $r10.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r5 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs>;

        $i1 = lengthof $r5;

        if $i2 >= $i1 goto label4;

        $r7 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs>;

        $i3 = $r10.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $r12 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r12.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r8 = virtualinvoke $r12.<org.apache.lucene.util.fst.FST$Arc: org.apache.lucene.util.fst.FST$Arc copyFrom(org.apache.lucene.util.fst.FST$Arc)>($r10);

        $r7[$i3] = $r8;

        $z2 = virtualinvoke $r10.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($r10, $r4);

        goto label1;

     label4:
        return;
    }

    public java.lang.Object getEmptyOutput()
    {
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $r1 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        return $r1;
    }

    void setEmptyOutput(java.lang.Object) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r1, r2, $r3, $r5;
        org.apache.lucene.util.fst.Outputs $r4;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r3 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.util.fst.Outputs: java.lang.Object merge(java.lang.Object,java.lang.Object)>($r3, r2);

        r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput> = $r5;

        goto label2;

     label1:
        r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput> = r2;

     label2:
        return;
    }

    public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException
    {
        java.lang.IllegalStateException $r16, $r17, $r18;
        byte[] r19;
        org.apache.lucene.util.fst.BytesStore $r8, $r9;
        byte $b1, b13, $b17, b22;
        org.apache.lucene.util.packed.PackedInts$Mutable $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.packed.PackedInts$Reader $r10, $r15;
        org.apache.lucene.store.DataOutput r2;
        org.apache.lucene.util.packed.GrowableWriter $r1;
        long $l0, $l2, $l3, $l4, $l5, $l6, $l7;
        org.apache.lucene.util.fst.Outputs $r14;
        int $i8, $i9, $i10, $i11, i12, $i14, $i15, $i16, $i18, $i19, $i20, i21;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r4, $r5, $r6, $r7;
        org.apache.lucene.store.RAMOutputStream $r12;
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r3, $r13;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r2 := @parameter0: org.apache.lucene.store.DataOutput;

        $l0 = r0.<org.apache.lucene.util.fst.FST: long startNode>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label01;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("call finish first");

        throw $r18;

     label01:
        $r1 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r1 == null goto label02;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot save an FST pre-packed FST; it must first be packed");

        throw $r17;

     label02:
        $z0 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z0 == 0 goto label03;

        $r15 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress>;

        $z3 = $r15 instanceof org.apache.lucene.util.packed.PackedInts$Mutable;

        if $z3 != 0 goto label03;

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot save a FST which has been loaded from disk ");

        throw $r16;

     label03:
        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>(r2, "FST", 4);

        $z1 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z1 == 0 goto label04;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeByte(byte)>(1);

        goto label05;

     label04:
        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeByte(byte)>(0);

     label05:
        $r3 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        if $r3 == null goto label08;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeByte(byte)>(1);

        $r12 = new org.apache.lucene.store.RAMOutputStream;

        specialinvoke $r12.<org.apache.lucene.store.RAMOutputStream: void <init>()>();

        $r14 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r13 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        virtualinvoke $r14.<org.apache.lucene.util.fst.Outputs: void writeFinalOutput(java.lang.Object,org.apache.lucene.store.DataOutput)>($r13, $r12);

        $l7 = virtualinvoke $r12.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        $i8 = (int) $l7;

        r19 = newarray (byte)[$i8];

        virtualinvoke $r12.<org.apache.lucene.store.RAMOutputStream: void writeTo(byte[],int)>(r19, 0);

        $z2 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z2 != 0 goto label07;

        $i11 = lengthof r19;

        i12 = $i11 / 2;

        i21 = 0;

     label06:
        if i21 >= i12 goto label07;

        b13 = r19[i21];

        $i14 = lengthof r19;

        $i15 = $i14 - i21;

        $i16 = $i15 - 1;

        $b17 = r19[$i16];

        r19[i21] = $b17;

        $i18 = lengthof r19;

        $i19 = $i18 - i21;

        $i20 = $i19 - 1;

        r19[$i20] = b13;

        i21 = i21 + 1;

        goto label06;

     label07:
        $i9 = lengthof r19;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeVInt(int)>($i9);

        $i10 = lengthof r19;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeBytes(byte[],int,int)>(r19, 0, $i10);

        goto label09;

     label08:
        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeByte(byte)>(0);

     label09:
        $r5 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r4 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        if $r5 != $r4 goto label10;

        b22 = 0;

        goto label12;

     label10:
        $r7 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r6 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE2>;

        if $r7 != $r6 goto label11;

        b22 = 1;

        goto label12;

     label11:
        b22 = 2;

     label12:
        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeByte(byte)>(b22);

        $z4 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z4 == 0 goto label13;

        $r10 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress>;

        $r11 = (org.apache.lucene.util.packed.PackedInts$Mutable) $r10;

        interfaceinvoke $r11.<org.apache.lucene.util.packed.PackedInts$Mutable: void save(org.apache.lucene.store.DataOutput)>(r2);

     label13:
        $l2 = r0.<org.apache.lucene.util.fst.FST: long startNode>;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l2);

        $l3 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l3);

        $l4 = r0.<org.apache.lucene.util.fst.FST: long arcCount>;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l4);

        $l5 = r0.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l5);

        $r8 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l6 = virtualinvoke $r8.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        virtualinvoke r2.<org.apache.lucene.store.DataOutput: void writeVLong(long)>($l6);

        $r9 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r9.<org.apache.lucene.util.fst.BytesStore: void writeTo(org.apache.lucene.store.DataOutput)>(r2);

        return;
    }

    public void save(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r7;
        java.io.FileOutputStream $r1;
        java.io.File r2;
        java.io.BufferedOutputStream $r0;
        org.apache.lucene.store.OutputStreamDataOutput $r4;
        java.io.Closeable[] $r5, $r6, $r8, $r9;
        org.apache.lucene.util.fst.FST r3;

        r3 := @this: org.apache.lucene.util.fst.FST;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.BufferedOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r1);

     label1:
        $r4 = new org.apache.lucene.store.OutputStreamDataOutput;

        specialinvoke $r4.<org.apache.lucene.store.OutputStreamDataOutput: void <init>(java.io.OutputStream)>($r0);

        virtualinvoke r3.<org.apache.lucene.util.fst.FST: void save(org.apache.lucene.store.DataOutput)>($r4);

     label2:
        if 1 == 0 goto label3;

        $r6 = newarray (java.io.Closeable)[1];

        $r6[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r6);

        goto label8;

     label3:
        $r5 = newarray (java.io.Closeable)[1];

        $r5[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r5);

        goto label8;

     label4:
        $r7 := @caughtexception;

     label5:
        if 0 == 0 goto label6;

        $r9 = newarray (java.io.Closeable)[1];

        $r9[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r9);

        goto label7;

     label6:
        $r8 = newarray (java.io.Closeable)[1];

        $r8[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r8);

     label7:
        throw $r7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static org.apache.lucene.util.fst.FST read(java.io.File, org.apache.lucene.util.fst.Outputs) throws java.io.IOException
    {
        java.lang.Throwable $r8;
        java.io.BufferedInputStream $r0;
        java.io.FileInputStream $r1;
        org.apache.lucene.util.fst.Outputs r5;
        java.io.File r2;
        org.apache.lucene.store.InputStreamDataInput $r4;
        java.io.Closeable[] $r6, $r7, $r9, $r10;
        org.apache.lucene.util.fst.FST $r3;
        boolean z0;

        r2 := @parameter0: java.io.File;

        r5 := @parameter1: org.apache.lucene.util.fst.Outputs;

        $r0 = new java.io.BufferedInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r1);

        z0 = 0;

     label1:
        $r3 = new org.apache.lucene.util.fst.FST;

        $r4 = new org.apache.lucene.store.InputStreamDataInput;

        specialinvoke $r4.<org.apache.lucene.store.InputStreamDataInput: void <init>(java.io.InputStream)>($r0);

        specialinvoke $r3.<org.apache.lucene.util.fst.FST: void <init>(org.apache.lucene.store.DataInput,org.apache.lucene.util.fst.Outputs)>($r4, r5);

        z0 = 1;

     label2:
        if 1 == 0 goto label3;

        $r7 = newarray (java.io.Closeable)[1];

        $r7[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r7);

        goto label4;

     label3:
        $r6 = newarray (java.io.Closeable)[1];

        $r6[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r6);

     label4:
        return $r3;

     label5:
        $r8 := @caughtexception;

     label6:
        if 0 == 0 goto label7;

        $r10 = newarray (java.io.Closeable)[1];

        $r10[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r10);

        goto label8;

     label7:
        $r9 = newarray (java.io.Closeable)[1];

        $r9[0] = $r0;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r9);

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void writeLabel(org.apache.lucene.store.DataOutput, int) throws java.io.IOException
    {
        org.apache.lucene.store.DataOutput r5;
        java.lang.AssertionError $r22, $r24, $r26;
        short $s1;
        byte $b2;
        int i0, $i4;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r1, $r2, $r3, $r4;
        java.lang.String $r10, $r15, $r20;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.fst.FST r0;
        java.lang.StringBuilder $r8, $r9, $r13, $r14, $r18, $r19, $r21, $r23, $r25;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r5 := @parameter0: org.apache.lucene.store.DataOutput;

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r22 = new java.lang.AssertionError;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("v=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.AssertionError: void <init>(java.lang.Object)>($r20);

        throw $r22;

     label1:
        $r2 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r1 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        if $r2 != $r1 goto label3;

        $z2 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        if i0 <= 255 goto label2;

        $r24 = new java.lang.AssertionError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("v=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r24;

     label2:
        $b2 = (byte) i0;

        virtualinvoke r5.<org.apache.lucene.store.DataOutput: void writeByte(byte)>($b2);

        goto label6;

     label3:
        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r3 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE2>;

        if $r4 != $r3 goto label5;

        $z1 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $i4 = (int) 65535;

        if i0 <= $i4 goto label4;

        $r26 = new java.lang.AssertionError;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("v=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r26;

     label4:
        $s1 = (short) i0;

        virtualinvoke r5.<org.apache.lucene.store.DataOutput: void writeShort(short)>($s1);

        goto label6;

     label5:
        virtualinvoke r5.<org.apache.lucene.store.DataOutput: void writeVInt(int)>(i0);

     label6:
        return;
    }

    int readLabel(org.apache.lucene.store.DataInput) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput r5;
        short $s0;
        byte $b1;
        int i2, $i3, $i4, $i6;
        org.apache.lucene.util.fst.FST r0;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r5 := @parameter0: org.apache.lucene.store.DataInput;

        $r2 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r1 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE1>;

        if $r2 != $r1 goto label1;

        $b1 = virtualinvoke r5.<org.apache.lucene.store.DataInput: byte readByte()>();

        $i3 = (int) $b1;

        i2 = $i3 & 255;

        goto label3;

     label1:
        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r3 = <org.apache.lucene.util.fst.FST$INPUT_TYPE: org.apache.lucene.util.fst.FST$INPUT_TYPE BYTE2>;

        if $r4 != $r3 goto label2;

        $s0 = virtualinvoke r5.<org.apache.lucene.store.DataInput: short readShort()>();

        $i4 = (int) $s0;

        $i6 = (int) 65535;

        i2 = $i4 & $i6;

        goto label3;

     label2:
        i2 = virtualinvoke r5.<org.apache.lucene.store.DataInput: int readVInt()>();

     label3:
        return i2;
    }

    public static boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)
    {
        byte $b1;
        int $i2;
        long $l0;
        org.apache.lucene.util.fst.FST$Arc r0;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        $l0 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    long addNode(org.apache.lucene.util.fst.Builder$UnCompiledNode) throws java.io.IOException
    {
        byte[] $r39;
        org.apache.lucene.util.fst.Builder$UnCompiledNode r0;
        byte $b18, $b26, $b33, $b35, $b38, $b43, $b44, $b53, $b78;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r84;
        org.apache.lucene.store.ByteArrayDataOutput $r82;
        long $l1, $l2, $l3, $l4, $l7, $l17, $l21, $l22, $l25, $l27, $l30, $l32, $l39, $l40, $l41, $l42, $l46, $l47, $l51, $l52, $l54, $l55, $l56, $l57, $l60, $l61, $l66, $l68, $l69, l72, $l77, l79, l80, $l82, $l83, l84;
        org.apache.lucene.util.fst.Builder$Node $r42;
        int[] $r19, $r20, $r33, $r51, $r53, $r69, $r70;
        org.apache.lucene.util.packed.GrowableWriter $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r43, $r62, $r63, $r78;
        org.apache.lucene.util.fst.Builder$Arc[] $r41;
        int $i0, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i23, $i24, $i28, $i29, $i31, $i34, $i36, $i37, $i45, $i48, $i49, $i50, $i58, $i59, $i62, $i63, $i64, $i65, $i67, $i70, $i71, i73, i74, $i75, i76, i81, $i85, $i86, $i87, $i88, $i89, $i91;
        java.lang.Object $r46, $r47, $r48, $r49, $r57, $r60, $r64, $r65, $r67, $r68, $r74, $r75;
        org.apache.lucene.util.fst.BytesStore $r2, $r16, $r17, $r18, $r21, $r44, $r45, $r50, $r52, $r54, $r56, $r59, $r71, $r76, $r77;
        org.apache.lucene.util.fst.Builder$CompiledNode r73;
        java.lang.AssertionError $r79, $r80, $r81, $r83, $r85;
        org.apache.lucene.util.fst.Outputs $r58, $r61;
        org.apache.lucene.util.fst.Builder$Arc r72;
        java.lang.String $r37;
        org.apache.lucene.util.fst.FST r1;
        java.lang.IllegalStateException $r86;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z9, $z10, $z11;

        r1 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        $i0 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i0 != 0 goto label02;

        $z6 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: boolean isFinal>;

        if $z6 == 0 goto label01;

        return -1L;

     label01:
        return 0L;

     label02:
        $r2 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l1 = virtualinvoke $r2.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $z0 = specialinvoke r1.<org.apache.lucene.util.fst.FST: boolean shouldExpand(org.apache.lucene.util.fst.Builder$UnCompiledNode)>(r0);

        if $z0 == 0 goto label03;

        $r69 = r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc>;

        $i63 = lengthof $r69;

        $i62 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i63 >= $i62 goto label03;

        $i64 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i65 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i64, 1);

        $r70 = newarray (int)[$i65];

        r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc> = $r70;

     label03:
        $l66 = r1.<org.apache.lucene.util.fst.FST: long arcCount>;

        $i67 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $l68 = (long) $i67;

        $l69 = $l66 + $l68;

        r1.<org.apache.lucene.util.fst.FST: long arcCount> = $l69;

        $i70 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i71 = $i70 - 1;

        $r71 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        l72 = virtualinvoke $r71.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        i73 = 0;

        i74 = 0;

     label04:
        $i75 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if i74 >= $i75 goto label19;

        $r41 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: org.apache.lucene.util.fst.Builder$Arc[] arcs>;

        r72 = $r41[i74];

        $r42 = r72.<org.apache.lucene.util.fst.Builder$Arc: org.apache.lucene.util.fst.Builder$Node target>;

        r73 = (org.apache.lucene.util.fst.Builder$CompiledNode) $r42;

        i76 = 0;

        if i74 != $i71 goto label05;

        i76 = 2;

     label05:
        $l42 = r1.<org.apache.lucene.util.fst.FST: long lastFrozenNode>;

        $l41 = r73.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $b43 = $l42 cmp $l41;

        if $b43 != 0 goto label06;

        if $z0 != 0 goto label06;

        i76 = i76 + 4;

     label06:
        $z7 = r72.<org.apache.lucene.util.fst.Builder$Arc: boolean isFinal>;

        if $z7 == 0 goto label07;

        i76 = i76 + 1;

        $r68 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput>;

        $r67 = r1.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r68 == $r67 goto label08;

        i76 = i76 + 32;

        goto label08;

     label07:
        $z4 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z4 != 0 goto label08;

        $r65 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput>;

        $r64 = r1.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r65 == $r64 goto label08;

        $r79 = new java.lang.AssertionError;

        specialinvoke $r79.<java.lang.AssertionError: void <init>()>();

        throw $r79;

     label08:
        $l77 = r73.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $b78 = $l77 cmp 0L;

        $i85 = (int) $b78;

        if $i85 <= 0 goto label09;

        $z11 = 1;

        $z10 = 1;

        goto label10;

     label09:
        $z11 = 0;

        $z10 = 0;

     label10:
        z9 = $z11;

        if $z10 != 0 goto label11;

        i76 = i76 + 8;

        goto label12;

     label11:
        $r43 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        if $r43 == null goto label12;

        $r63 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l56 = r73.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $i59 = (int) $l56;

        $r62 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l57 = r73.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $i58 = (int) $l57;

        $l60 = virtualinvoke $r62.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i58);

        $l61 = $l60 + 1L;

        virtualinvoke $r63.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>($i59, $l61);

     label12:
        $r74 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $r75 = r1.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r74 == $r75 goto label13;

        i76 = i76 + 16;

     label13:
        $r44 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $b44 = (byte) i76;

        virtualinvoke $r44.<org.apache.lucene.util.fst.BytesStore: void writeByte(byte)>($b44);

        $r45 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $i45 = r72.<org.apache.lucene.util.fst.Builder$Arc: int label>;

        specialinvoke r1.<org.apache.lucene.util.fst.FST: void writeLabel(org.apache.lucene.store.DataOutput,int)>($r45, $i45);

        $r47 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $r46 = r1.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r47 == $r46 goto label14;

        $r61 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r60 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object output>;

        $r59 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r61.<org.apache.lucene.util.fst.Outputs: void write(java.lang.Object,org.apache.lucene.store.DataOutput)>($r60, $r59);

        $l54 = r1.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        $l55 = $l54 + 1L;

        r1.<org.apache.lucene.util.fst.FST: long arcWithOutputCount> = $l55;

     label14:
        $r49 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput>;

        $r48 = r1.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r49 == $r48 goto label15;

        $r58 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r57 = r72.<org.apache.lucene.util.fst.Builder$Arc: java.lang.Object nextFinalOutput>;

        $r56 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r58.<org.apache.lucene.util.fst.Outputs: void writeFinalOutput(java.lang.Object,org.apache.lucene.store.DataOutput)>($r57, $r56);

     label15:
        if z9 == 0 goto label17;

        $i50 = i76 & 4;

        if $i50 != 0 goto label17;

        $z5 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z5 != 0 goto label16;

        $l52 = r73.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        $b53 = $l52 cmp 0L;

        $i86 = (int) $b53;

        if $i86 > 0 goto label16;

        $r80 = new java.lang.AssertionError;

        specialinvoke $r80.<java.lang.AssertionError: void <init>()>();

        throw $r80;

     label16:
        $r54 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l51 = r73.<org.apache.lucene.util.fst.Builder$CompiledNode: long node>;

        virtualinvoke $r54.<org.apache.lucene.util.fst.BytesStore: void writeVLong(long)>($l51);

     label17:
        if $z0 == 0 goto label18;

        $r51 = r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc>;

        $r50 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l46 = virtualinvoke $r50.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l47 = $l46 - l72;

        $i48 = (int) $l47;

        $r51[i74] = $i48;

        $r52 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        l72 = virtualinvoke $r52.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $r53 = r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc>;

        $i49 = $r53[i74];

        i73 = staticinvoke <java.lang.Math: int max(int,int)>(i73, $i49);

     label18:
        i74 = i74 + 1;

        goto label04;

     label19:
        if $z0 == 0 goto label26;

        $z1 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z1 != 0 goto label20;

        if i73 > 0 goto label20;

        $r81 = new java.lang.AssertionError;

        specialinvoke $r81.<java.lang.AssertionError: void <init>()>();

        throw $r81;

     label20:
        $r39 = newarray (byte)[11];

        $r82 = new org.apache.lucene.store.ByteArrayDataOutput;

        specialinvoke $r82.<org.apache.lucene.store.ByteArrayDataOutput: void <init>(byte[])>($r39);

        virtualinvoke $r82.<org.apache.lucene.store.ByteArrayDataOutput: void writeByte(byte)>(32);

        $i19 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        virtualinvoke $r82.<org.apache.lucene.store.ByteArrayDataOutput: void writeVInt(int)>($i19);

        virtualinvoke $r82.<org.apache.lucene.store.ByteArrayDataOutput: void writeVInt(int)>(i73);

        $i20 = virtualinvoke $r82.<org.apache.lucene.store.ByteArrayDataOutput: int getPosition()>();

        $l21 = (long) $i20;

        $l39 = $l1 + $l21;

        $r16 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l22 = virtualinvoke $r16.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        l79 = $l22;

        $i23 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $i24 = $i23 * i73;

        $l25 = (long) $i24;

        $l40 = $l39 + $l25;

        l80 = $l40;

        $z2 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z2 != 0 goto label21;

        $b38 = $l40 cmp $l22;

        $i87 = (int) $b38;

        if $i87 >= 0 goto label21;

        $r83 = new java.lang.AssertionError;

        specialinvoke $r83.<java.lang.AssertionError: void <init>()>();

        throw $r83;

     label21:
        $b26 = $l40 cmp $l22;

        $i88 = (int) $b26;

        if $i88 <= 0 goto label25;

        $r18 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l27 = $l40 - $l22;

        $i28 = (int) $l27;

        virtualinvoke $r18.<org.apache.lucene.util.fst.BytesStore: void skipBytes(int)>($i28);

        $i29 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        i81 = $i29 - 1;

     label22:
        if i81 < 0 goto label25;

        $l30 = (long) i73;

        l80 = l80 - $l30;

        $r19 = r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc>;

        $i31 = $r19[i81];

        $l32 = (long) $i31;

        l79 = l79 - $l32;

        $b33 = l79 cmp l80;

        if $b33 == 0 goto label24;

        $z3 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z3 != 0 goto label23;

        $b35 = l80 cmp l79;

        $i89 = (int) $b35;

        if $i89 > 0 goto label23;

        $r85 = new java.lang.AssertionError;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destPos=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l80);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" srcPos=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l79);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arcIdx=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i81);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxBytesPerArc=");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i73);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytesPerArc[arcIdx]=");

        $r33 = r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc>;

        $i36 = $r33[i81];

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i36);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nodeIn.numArcs=");

        $i37 = r0.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r85.<java.lang.AssertionError: void <init>(java.lang.Object)>($r37);

        throw $r85;

     label23:
        $r21 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $r20 = r1.<org.apache.lucene.util.fst.FST: int[] bytesPerArc>;

        $i34 = $r20[i81];

        virtualinvoke $r21.<org.apache.lucene.util.fst.BytesStore: void copyBytes(long,long,int)>(l79, l80, $i34);

     label24:
        $i91 = (int) -1;

        i81 = i81 + $i91;

        goto label22;

     label25:
        $r17 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r17.<org.apache.lucene.util.fst.BytesStore: void writeBytes(long,byte[],int,int)>($l1, $r39, 0, $i20);

     label26:
        $r76 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l82 = virtualinvoke $r76.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l83 = $l82 - 1L;

        $r77 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r77.<org.apache.lucene.util.fst.BytesStore: void reverse(long,long)>($l1, $l83);

        $r78 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r78 == null goto label27;

        $l17 = r1.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $b18 = $l17 cmp 2147483647L;

        if $b18 != 0 goto label27;

        $r86 = new java.lang.IllegalStateException;

        specialinvoke $r86.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot create a packed FST with more than 2.1 billion nodes");

        throw $r86;

     label27:
        $l2 = r1.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $l3 = $l2 + 1L;

        r1.<org.apache.lucene.util.fst.FST: long nodeCount> = $l3;

        $r3 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r3 == null goto label29;

        $l4 = r1.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $i5 = (int) $l4;

        $r4 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $i6 = virtualinvoke $r4.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        if $i5 != $i6 goto label28;

        $r7 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $r6 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $i9 = virtualinvoke $r6.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i10 = $i9 + 1;

        $r8 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $i11 = virtualinvoke $r8.<org.apache.lucene.util.packed.GrowableWriter: int getBitsPerValue()>();

        $i12 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i10, $i11);

        $r9 = virtualinvoke $r7.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.GrowableWriter resize(int)>($i12);

        r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress> = $r9;

        $r11 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $r10 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $i13 = virtualinvoke $r10.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i14 = $i13 + 1;

        $r12 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $i15 = virtualinvoke $r12.<org.apache.lucene.util.packed.GrowableWriter: int getBitsPerValue()>();

        $i16 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i14, $i15);

        $r13 = virtualinvoke $r11.<org.apache.lucene.util.packed.GrowableWriter: org.apache.lucene.util.packed.GrowableWriter resize(int)>($i16);

        r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts> = $r13;

     label28:
        $r5 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $l7 = r1.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $i8 = (int) $l7;

        virtualinvoke $r5.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>($i8, $l83);

        l84 = r1.<org.apache.lucene.util.fst.FST: long nodeCount>;

        goto label30;

     label29:
        l84 = $l83;

     label30:
        r1.<org.apache.lucene.util.fst.FST: long lastFrozenNode> = l84;

        return l84;
    }

    public org.apache.lucene.util.fst.FST$Arc getFirstArc(org.apache.lucene.util.fst.FST$Arc)
    {
        org.apache.lucene.util.fst.FST r0;
        java.lang.Object $r1, $r3, $r4, $r5;
        long $l0;
        org.apache.lucene.util.fst.FST$Arc r2;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r2 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        $r1 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        if $r1 == null goto label1;

        r2.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 3;

        $r5 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput> = $r5;

        goto label2;

     label1:
        r2.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 2;

        $r3 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput> = $r3;

     label2:
        $r4 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r4;

        $l0 = r0.<org.apache.lucene.util.fst.FST: long startNode>;

        r2.<org.apache.lucene.util.fst.FST$Arc: long target> = $l0;

        return r2;
    }

    public org.apache.lucene.util.fst.FST$Arc readLastTargetArc(org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$Arc r0, r3;
        byte $b3, $b12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.apache.lucene.util.fst.FST$BytesReader r1;
        long $l0, $l1, $l2, $l4, $l7;
        java.lang.AssertionError $r9, $r10;
        org.apache.lucene.util.fst.Outputs $r5, $r6;
        int $i5, $i6, $i8, $i9, $i10, $i11, $i14, $i15, $i17;
        org.apache.lucene.util.fst.FST r2;
        java.lang.Object $r7;

        r2 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        r3 := @parameter1: org.apache.lucene.util.fst.FST$Arc;

        r1 := @parameter2: org.apache.lucene.util.fst.FST$BytesReader;

        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r0);

        if $z0 != 0 goto label02;

        $z10 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z10 != 0 goto label01;

        $z11 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z11 != 0 goto label01;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label01:
        $i14 = (int) -1;

        r3.<org.apache.lucene.util.fst.FST$Arc: int label> = $i14;

        r3.<org.apache.lucene.util.fst.FST$Arc: long target> = -1L;

        $r7 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        r3.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r7;

        r3.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 2;

        return r3;

     label02:
        $l0 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $l1 = specialinvoke r2.<org.apache.lucene.util.fst.FST: long getNodeAddress(long)>($l0);

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l1);

        $l2 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r3.<org.apache.lucene.util.fst.FST$Arc: long node> = $l2;

        $b3 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        $i15 = (int) $b3;

        if $i15 != 32 goto label06;

        $i5 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: int numArcs> = $i5;

        $z9 = r2.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z9 != 0 goto label03;

        $i10 = r2.<org.apache.lucene.util.fst.FST: int version>;

        if $i10 < 4 goto label04;

     label03:
        $i6 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = $i6;

        goto label05;

     label04:
        $i11 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readInt()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = $i11;

     label05:
        $l7 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart> = $l7;

        $i8 = r3.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        $i9 = $i8 - 2;

        r3.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i9;

        goto label15;

     label06:
        r3.<org.apache.lucene.util.fst.FST$Arc: byte flags> = $b3;

        r3.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = 0;

     label07:
        $z1 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z1 != 0 goto label14;

        virtualinvoke r2.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r1);

        $z4 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(16);

        if $z4 == 0 goto label08;

        $r6 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        virtualinvoke $r6.<org.apache.lucene.util.fst.Outputs: java.lang.Object read(org.apache.lucene.store.DataInput)>(r1);

     label08:
        $z5 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(32);

        if $z5 == 0 goto label09;

        $r5 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        virtualinvoke $r5.<org.apache.lucene.util.fst.Outputs: java.lang.Object readFinalOutput(org.apache.lucene.store.DataInput)>(r1);

     label09:
        $z6 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(8);

        if $z6 == 0 goto label10;

        goto label13;

     label10:
        $z7 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(4);

        if $z7 == 0 goto label11;

        goto label13;

     label11:
        $z8 = r2.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z8 == 0 goto label12;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long readVLong()>();

        goto label13;

     label12:
        specialinvoke r2.<org.apache.lucene.util.fst.FST: long readUnpackedNodeTarget(org.apache.lucene.util.fst.FST$BytesReader)>(r1);

     label13:
        $b12 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: byte flags> = $b12;

        goto label07;

     label14:
        $i17 = (int) -1;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i17);

        $l4 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l4;

     label15:
        virtualinvoke r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r3, r1);

        $z2 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z2 != 0 goto label16;

        $z3 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z3 != 0 goto label16;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label16:
        return r3;
    }

    private long readUnpackedNodeTarget(org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r1;
        int $i0, $i1;
        org.apache.lucene.util.fst.FST r0;
        long l2;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r1 := @parameter0: org.apache.lucene.util.fst.FST$BytesReader;

        $i0 = r0.<org.apache.lucene.util.fst.FST: int version>;

        if $i0 >= 4 goto label1;

        $i1 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readInt()>();

        l2 = (long) $i1;

        goto label2;

     label1:
        l2 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long readVLong()>();

     label2:
        return l2;
    }

    public org.apache.lucene.util.fst.FST$Arc readFirstTargetArc(org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r3;
        long $l0, $l1, $l3, $l4;
        org.apache.lucene.util.fst.FST$Arc r0, r2, $r4;
        byte $b2, $b5, $b6, $b7;
        int $i9, $i10;
        boolean $z0;
        org.apache.lucene.util.fst.FST r1;
        java.lang.Object $r5;

        r1 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        r2 := @parameter1: org.apache.lucene.util.fst.FST$Arc;

        r3 := @parameter2: org.apache.lucene.util.fst.FST$BytesReader;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z0 == 0 goto label3;

        $i9 = (int) -1;

        r2.<org.apache.lucene.util.fst.FST$Arc: int label> = $i9;

        $r5 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        r2.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r5;

        r2.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 1;

        $l1 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b2 = $l1 cmp 0L;

        $i10 = (int) $b2;

        if $i10 > 0 goto label1;

        $b5 = r2.<org.apache.lucene.util.fst.FST$Arc: byte flags>;

        $b6 = $b5 | 2;

        $b7 = (byte) $b6;

        r2.<org.apache.lucene.util.fst.FST$Arc: byte flags> = $b7;

        goto label2;

     label1:
        $l3 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r2.<org.apache.lucene.util.fst.FST$Arc: long node> = $l3;

        $l4 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r2.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l4;

     label2:
        r2.<org.apache.lucene.util.fst.FST$Arc: long target> = -1L;

        return r2;

     label3:
        $l0 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r4 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l0, r2, r3);

        return $r4;
    }

    public org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r1;
        long l0, $l1, $l5;
        org.apache.lucene.util.fst.FST$Arc r2, $r3;
        byte $b2;
        int $i3, $i4, $i6, $i7, $i8, $i10;
        org.apache.lucene.util.fst.FST r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.fst.FST;

        l0 := @parameter0: long;

        r2 := @parameter1: org.apache.lucene.util.fst.FST$Arc;

        r1 := @parameter2: org.apache.lucene.util.fst.FST$BytesReader;

        $l1 = specialinvoke r0.<org.apache.lucene.util.fst.FST: long getNodeAddress(long)>(l0);

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l1);

        r2.<org.apache.lucene.util.fst.FST$Arc: long node> = l0;

        $b2 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        $i8 = (int) $b2;

        if $i8 != 32 goto label4;

        $i3 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        r2.<org.apache.lucene.util.fst.FST$Arc: int numArcs> = $i3;

        $z0 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z0 != 0 goto label1;

        $i6 = r0.<org.apache.lucene.util.fst.FST: int version>;

        if $i6 < 4 goto label2;

     label1:
        $i4 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        r2.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = $i4;

        goto label3;

     label2:
        $i7 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readInt()>();

        r2.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = $i7;

     label3:
        $i10 = (int) -1;

        r2.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i10;

        $l5 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r2.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart> = $l5;

        r2.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l5;

        goto label5;

     label4:
        r2.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l1;

        r2.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = 0;

     label5:
        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r2, r1);

        return $r3;
    }

    boolean isExpandedTarget(org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r1;
        long $l0, $l1;
        org.apache.lucene.util.fst.FST$Arc r0;
        byte $b2;
        int $i3;
        org.apache.lucene.util.fst.FST r2;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        r1 := @parameter1: org.apache.lucene.util.fst.FST$BytesReader;

        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $l1 = specialinvoke r2.<org.apache.lucene.util.fst.FST: long getNodeAddress(long)>($l0);

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l1);

        $b2 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        $i3 = (int) $b2;

        if $i3 != 32 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public org.apache.lucene.util.fst.FST$Arc readNextArc(org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r2;
        long $l1, $l3;
        java.lang.IllegalArgumentException $r6;
        org.apache.lucene.util.fst.FST$Arc r0, $r3, $r4;
        byte $b2;
        int $i0, $i5, $i6;
        org.apache.lucene.util.fst.FST r1;

        r1 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        r2 := @parameter1: org.apache.lucene.util.fst.FST$BytesReader;

        $i0 = r0.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        $l1 = r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc>;

        $b2 = $l1 cmp 0L;

        $i6 = (int) $b2;

        if $i6 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot readNextArc when arc.isLast()=true");

        throw $r6;

     label1:
        $l3 = r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc>;

        $r4 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l3, r0, r2);

        return $r4;

     label2:
        $r3 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r0, r2);

        return $r3;
    }

    public int readNextArcLabel(org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r1;
        long $l2, $l3, $l8, $l9;
        java.lang.AssertionError $r4;
        org.apache.lucene.util.fst.FST$Arc r0;
        byte $b10;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i11, $i12, $i14, $i15;
        boolean $z0, $z1, $z2;
        org.apache.lucene.util.fst.FST r2;

        r2 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        r1 := @parameter1: org.apache.lucene.util.fst.FST$BytesReader;

        $z0 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z2 == 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $i0 = r0.<org.apache.lucene.util.fst.FST$Arc: int label>;

        $i14 = (int) -1;

        if $i0 != $i14 goto label6;

        $l8 = r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc>;

        $l9 = specialinvoke r2.<org.apache.lucene.util.fst.FST: long getNodeAddress(long)>($l8);

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l9);

        $b10 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        $i15 = (int) $b10;

        if $i15 != 32 goto label4;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        $z1 = r2.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z1 != 0 goto label2;

        $i11 = r2.<org.apache.lucene.util.fst.FST: int version>;

        if $i11 < 4 goto label3;

     label2:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        goto label5;

     label3:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: int readInt()>();

        goto label5;

     label4:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l9);

     label5:
        goto label8;

     label6:
        $i1 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i1 == 0 goto label7;

        $l3 = r0.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l3);

        $i4 = r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx>;

        $i6 = 1 + $i4;

        $i5 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        $i7 = $i6 * $i5;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i7);

        goto label8;

     label7:
        $l2 = r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l2);

     label8:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        $i12 = virtualinvoke r2.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r1);

        return $i12;
    }

    public org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$Arc r0;
        byte $b2, $b10, $b18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.lucene.util.packed.PackedInts$Reader $r7, $r8;
        org.apache.lucene.util.fst.FST$BytesReader r1;
        org.apache.lucene.util.packed.GrowableWriter $r9;
        long $l1, $l4, $l5, $l6, $l7, $l9, $l12, $l13, $l14, $l15, $l16, $l17, $l20, $l24, $l27, $l33;
        java.lang.AssertionError $r16, $r17;
        org.apache.lucene.util.fst.Outputs $r3, $r5, $r11, $r13;
        int $i0, $i3, $i8, $i11, $i19, $i21, $i22, $i23, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i34, $i35;
        org.apache.lucene.util.fst.FST r2;
        java.lang.Object $r4, $r6, $r12, $r14;

        r2 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$Arc;

        r1 := @parameter1: org.apache.lucene.util.fst.FST$BytesReader;

        $i0 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i0 == 0 goto label02;

        $i25 = r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx>;

        $i26 = $i25 + 1;

        r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i26;

        $z9 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z9 != 0 goto label01;

        $i32 = r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx>;

        $i31 = r0.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        if $i32 < $i31 goto label01;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label01:
        $l27 = r0.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l27);

        $i29 = r0.<org.apache.lucene.util.fst.FST$Arc: int arcIdx>;

        $i28 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        $i30 = $i29 * $i28;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i30);

        goto label03;

     label02:
        $l1 = r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l1);

     label03:
        $b2 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: byte flags> = $b2;

        $i3 = virtualinvoke r2.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r1);

        r0.<org.apache.lucene.util.fst.FST$Arc: int label> = $i3;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(16);

        if $z0 == 0 goto label04;

        $r13 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r14 = virtualinvoke $r13.<org.apache.lucene.util.fst.Outputs: java.lang.Object read(org.apache.lucene.store.DataInput)>(r1);

        r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r14;

        goto label05;

     label04:
        $r3 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r4;

     label05:
        $z1 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(32);

        if $z1 == 0 goto label06;

        $r11 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.util.fst.Outputs: java.lang.Object readFinalOutput(org.apache.lucene.store.DataInput)>(r1);

        r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput> = $r12;

        goto label07;

     label06:
        $r5 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r6 = virtualinvoke $r5.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput> = $r6;

     label07:
        $z2 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(8);

        if $z2 == 0 goto label10;

        $z8 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(1);

        if $z8 == 0 goto label08;

        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = -1L;

        goto label09;

     label08:
        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = 0L;

     label09:
        $l24 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l24;

        goto label20;

     label10:
        $z3 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(4);

        if $z3 == 0 goto label14;

        $l14 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l14;

        $r9 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r9 != null goto label13;

        $z7 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(2);

        if $z7 != 0 goto label12;

        $i19 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i19 != 0 goto label11;

        specialinvoke r2.<org.apache.lucene.util.fst.FST: void seekToNextNode(org.apache.lucene.util.fst.FST$BytesReader)>(r1);

        goto label12;

     label11:
        $l20 = r0.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l20);

        $i22 = r0.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        $i21 = r0.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        $i23 = $i22 * $i21;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i23);

     label12:
        $l33 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = $l33;

        goto label20;

     label13:
        $l15 = r0.<org.apache.lucene.util.fst.FST$Arc: long node>;

        $l16 = $l15 - 1L;

        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = $l16;

        $z6 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z6 != 0 goto label20;

        $l17 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b18 = $l17 cmp 0L;

        $i34 = (int) $b18;

        if $i34 > 0 goto label20;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label14:
        $z4 = r2.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z4 == 0 goto label18;

        $l6 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        $l7 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long readVLong()>();

        $z5 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean flag(int)>(64);

        if $z5 == 0 goto label15;

        $l13 = $l6 + $l7;

        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = $l13;

        goto label17;

     label15:
        $r7 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress>;

        $i8 = interfaceinvoke $r7.<org.apache.lucene.util.packed.PackedInts$Reader: int size()>();

        $l9 = (long) $i8;

        $b10 = $l7 cmp $l9;

        $i35 = (int) $b10;

        if $i35 >= 0 goto label16;

        $r8 = r2.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress>;

        $i11 = (int) $l7;

        $l12 = interfaceinvoke $r8.<org.apache.lucene.util.packed.PackedInts$Reader: long get(int)>($i11);

        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = $l12;

        goto label17;

     label16:
        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = $l7;

     label17:
        goto label19;

     label18:
        $l4 = specialinvoke r2.<org.apache.lucene.util.fst.FST: long readUnpackedNodeTarget(org.apache.lucene.util.fst.FST$BytesReader)>(r1);

        r0.<org.apache.lucene.util.fst.FST$Arc: long target> = $l4;

     label19:
        $l5 = virtualinvoke r1.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r0.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l5;

     label20:
        return r0;
    }

    public org.apache.lucene.util.fst.FST$Arc findTargetArc(int, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$Arc, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$Arc r0, r3, $r4, r10;
        byte $b3, $b7, $b28;
        org.apache.lucene.util.fst.FST$Arc[] $r5, $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.util.fst.FST$BytesReader r2;
        long $l1, $l2, $l4, $l5, $l6, $l8, $l13, $l17, $l27, $l29, $l30;
        java.lang.AssertionError $r11;
        int i0, $i9, $i10, $i11, $i12, $i14, $i15, i16, $i18, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, i31, i32, $i34, $i35, $i37, $i38;
        org.apache.lucene.util.fst.FST r1;
        java.lang.Object $r7;

        r1 := @this: org.apache.lucene.util.fst.FST;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.lucene.util.fst.FST$Arc;

        r3 := @parameter2: org.apache.lucene.util.fst.FST$Arc;

        r2 := @parameter3: org.apache.lucene.util.fst.FST$BytesReader;

        $z0 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r8 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs>;

        if $r8 != null goto label01;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label01:
        $i34 = (int) -1;

        if i0 != $i34 goto label05;

        $z4 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z4 == 0 goto label04;

        $l27 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $b28 = $l27 cmp 0L;

        $i35 = (int) $b28;

        if $i35 > 0 goto label02;

        r3.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 2;

        goto label03;

     label02:
        r3.<org.apache.lucene.util.fst.FST$Arc: byte flags> = 0;

        $l29 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r3.<org.apache.lucene.util.fst.FST$Arc: long nextArc> = $l29;

        $l30 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r3.<org.apache.lucene.util.fst.FST$Arc: long node> = $l30;

     label03:
        $r7 = r0.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        r3.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output> = $r7;

        $i37 = (int) -1;

        r3.<org.apache.lucene.util.fst.FST$Arc: int label> = $i37;

        return r3;

     label04:
        return null;

     label05:
        $l2 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $l1 = r1.<org.apache.lucene.util.fst.FST: long startNode>;

        $b3 = $l2 cmp $l1;

        if $b3 != 0 goto label07;

        $r5 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs>;

        $i26 = lengthof $r5;

        if i0 >= $i26 goto label07;

        $r6 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc[] cachedRootArcs>;

        r10 = $r6[i0];

        if r10 != null goto label06;

        return r10;

     label06:
        virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: org.apache.lucene.util.fst.FST$Arc copyFrom(org.apache.lucene.util.fst.FST$Arc)>(r10);

        return r3;

     label07:
        $z1 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>(r0);

        if $z1 != 0 goto label08;

        return null;

     label08:
        $l4 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $l5 = specialinvoke r1.<org.apache.lucene.util.fst.FST: long getNodeAddress(long)>($l4);

        virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l5);

        $l6 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        r3.<org.apache.lucene.util.fst.FST$Arc: long node> = $l6;

        $b7 = virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        $i38 = (int) $b7;

        if $i38 != 32 goto label17;

        $i11 = virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: int numArcs> = $i11;

        $z3 = r1.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z3 != 0 goto label09;

        $i24 = r1.<org.apache.lucene.util.fst.FST: int version>;

        if $i24 < 4 goto label10;

     label09:
        $i12 = virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: int readVInt()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = $i12;

        goto label11;

     label10:
        $i25 = virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: int readInt()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc> = $i25;

     label11:
        $l13 = virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: long getPosition()>();

        r3.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart> = $l13;

        i31 = 0;

        $i14 = r3.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        i32 = $i14 - 1;

     label12:
        if i31 > i32 goto label16;

        $i15 = i31 + i32;

        i16 = $i15 >>> 1;

        $l17 = r3.<org.apache.lucene.util.fst.FST$Arc: long posArcsStart>;

        virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: void setPosition(long)>($l17);

        $i18 = r3.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        $i19 = $i18 * i16;

        $i20 = $i19 + 1;

        virtualinvoke r2.<org.apache.lucene.util.fst.FST$BytesReader: void skipBytes(int)>($i20);

        $i21 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r2);

        i22 = $i21 - i0;

        if i22 >= 0 goto label13;

        i31 = i16 + 1;

        goto label15;

     label13:
        if i22 <= 0 goto label14;

        i32 = i16 - 1;

        goto label15;

     label14:
        $i23 = i16 - 1;

        r3.<org.apache.lucene.util.fst.FST$Arc: int arcIdx> = $i23;

        $r4 = virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r3, r2);

        return $r4;

     label15:
        goto label12;

     label16:
        return null;

     label17:
        $l8 = r0.<org.apache.lucene.util.fst.FST$Arc: long target>;

        virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l8, r3, r2);

     label18:
        $i9 = r3.<org.apache.lucene.util.fst.FST$Arc: int label>;

        if $i9 != i0 goto label19;

        return r3;

     label19:
        $i10 = r3.<org.apache.lucene.util.fst.FST$Arc: int label>;

        if $i10 <= i0 goto label20;

        return null;

     label20:
        $z2 = virtualinvoke r3.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z2 == 0 goto label21;

        return null;

     label21:
        virtualinvoke r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>(r3, r2);

        goto label18;
    }

    private void seekToNextNode(org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException
    {
        org.apache.lucene.util.fst.FST$BytesReader r0;
        org.apache.lucene.util.fst.Outputs $r2, $r3;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.lucene.util.fst.FST r1;

        r1 := @this: org.apache.lucene.util.fst.FST;

        r0 := @parameter0: org.apache.lucene.util.fst.FST$BytesReader;

     label1:
        $b0 = virtualinvoke r0.<org.apache.lucene.util.fst.FST$BytesReader: byte readByte()>();

        virtualinvoke r1.<org.apache.lucene.util.fst.FST: int readLabel(org.apache.lucene.store.DataInput)>(r0);

        $i1 = (int) $b0;

        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>($i1, 16);

        if $z0 == 0 goto label2;

        $r3 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        virtualinvoke $r3.<org.apache.lucene.util.fst.Outputs: java.lang.Object read(org.apache.lucene.store.DataInput)>(r0);

     label2:
        $i2 = (int) $b0;

        $z1 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>($i2, 32);

        if $z1 == 0 goto label3;

        $r2 = r1.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        virtualinvoke $r2.<org.apache.lucene.util.fst.Outputs: java.lang.Object readFinalOutput(org.apache.lucene.store.DataInput)>(r0);

     label3:
        $i3 = (int) $b0;

        $z2 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>($i3, 8);

        if $z2 != 0 goto label5;

        $i4 = (int) $b0;

        $z3 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>($i4, 4);

        if $z3 != 0 goto label5;

        $z4 = r1.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z4 == 0 goto label4;

        virtualinvoke r0.<org.apache.lucene.util.fst.FST$BytesReader: long readVLong()>();

        goto label5;

     label4:
        specialinvoke r1.<org.apache.lucene.util.fst.FST: long readUnpackedNodeTarget(org.apache.lucene.util.fst.FST$BytesReader)>(r0);

     label5:
        $i5 = (int) $b0;

        $z5 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>($i5, 2);

        if $z5 == 0 goto label6;

        return;

     label6:
        goto label1;
    }

    public long getNodeCount()
    {
        org.apache.lucene.util.fst.FST r0;
        long $l0, $l1;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $l0 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $l1 = 1L + $l0;

        return $l1;
    }

    public long getArcCount()
    {
        org.apache.lucene.util.fst.FST r0;
        long $l0;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $l0 = r0.<org.apache.lucene.util.fst.FST: long arcCount>;

        return $l0;
    }

    public long getArcWithOutputCount()
    {
        org.apache.lucene.util.fst.FST r0;
        long $l0;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $l0 = r0.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        return $l0;
    }

    private boolean shouldExpand(org.apache.lucene.util.fst.Builder$UnCompiledNode)
    {
        int $i0, $i1, $i2;
        org.apache.lucene.util.fst.FST r0;
        org.apache.lucene.util.fst.Builder$UnCompiledNode r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r1 := @parameter0: org.apache.lucene.util.fst.Builder$UnCompiledNode;

        $z0 = r0.<org.apache.lucene.util.fst.FST: boolean allowArrayArcs>;

        if $z0 == 0 goto label3;

        $i0 = r1.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int depth>;

        if $i0 > 3 goto label1;

        $i2 = r1.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i2 >= 5 goto label2;

     label1:
        $i1 = r1.<org.apache.lucene.util.fst.Builder$UnCompiledNode: int numArcs>;

        if $i1 < 10 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public org.apache.lucene.util.fst.FST$BytesReader getBytesReader()
    {
        org.apache.lucene.util.fst.BytesStore $r1, $r2;
        org.apache.lucene.util.fst.FST$BytesReader r3;
        org.apache.lucene.util.fst.FST r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.fst.FST;

        $z0 = r0.<org.apache.lucene.util.fst.FST: boolean packed>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        r3 = virtualinvoke $r2.<org.apache.lucene.util.fst.BytesStore: org.apache.lucene.util.fst.FST$BytesReader getForwardReader()>();

        goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        r3 = virtualinvoke $r1.<org.apache.lucene.util.fst.BytesStore: org.apache.lucene.util.fst.FST$BytesReader getReverseReader()>();

     label2:
        return r3;
    }

    private void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs, int)
    {
        org.apache.lucene.util.fst.BytesStore $r3;
        int[] $r1;
        int i0;
        org.apache.lucene.util.fst.FST r0;
        org.apache.lucene.util.fst.FST$INPUT_TYPE r2;
        java.lang.Object $r5;
        org.apache.lucene.util.fst.Outputs r4;

        r0 := @this: org.apache.lucene.util.fst.FST;

        r2 := @parameter0: org.apache.lucene.util.fst.FST$INPUT_TYPE;

        r4 := @parameter1: org.apache.lucene.util.fst.Outputs;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[0];

        r0.<org.apache.lucene.util.fst.FST: int[] bytesPerArc> = $r1;

        r0.<org.apache.lucene.util.fst.FST: long startNode> = -1L;

        r0.<org.apache.lucene.util.fst.FST: int version> = 4;

        r0.<org.apache.lucene.util.fst.FST: boolean packed> = 1;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType> = r2;

        $r3 = new org.apache.lucene.util.fst.BytesStore;

        specialinvoke $r3.<org.apache.lucene.util.fst.BytesStore: void <init>(int)>(i0);

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes> = $r3;

        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs> = r4;

        $r5 = virtualinvoke r4.<org.apache.lucene.util.fst.Outputs: java.lang.Object getNoOutput()>();

        r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT> = $r5;

        r0.<org.apache.lucene.util.fst.FST: boolean allowArrayArcs> = 0;

        return;
    }

    org.apache.lucene.util.fst.FST pack(int, int, float) throws java.io.IOException
    {
        java.lang.Integer $r40, $r42, $r44, $r65, $r66, r77;
        byte $b12, $b22, $b27, $b30, $b43, $b57, $b60, $b76, $b77, $b78, $b81, $b89, $b101, $b105, b122;
        java.lang.Long $r55;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r35, $r92, $r95;
        long $l5, $l7, $l8, $l10, $l11, $l14, $l17, $l19, $l20, $l21, $l23, $l24, $l25, $l26, $l28, $l29, $l31, $l32, $l35, $l38, $l39, $l40, $l41, $l42, $l45, $l46, $l47, $l48, $l49, $l50, $l52, $l54, $l55, $l56, $l59, $l61, $l62, $l63, $l65, $l67, $l68, $l69, $l70, $l72, $l73, $l74, $l75, $l80, $l87, $l88, $l92, $l93, $l94, $l95, $l96, $l98, $l100, $l102, $l104, $l106, $l108, l114, $l118, $l121, l123, l124, l125, $l127, $l128, $l129, l130, l131;
        org.apache.lucene.util.fst.FST$BytesReader $r3;
        org.apache.lucene.util.packed.GrowableWriter $r1, $r4, $r6, $r63, $r67, $r68, $r70, $r72, $r87;
        int i0, $i1, $i2, $i3, $i4, $i6, $i9, $i13, $i15, $i16, $i18, $i33, $i34, $i36, $i37, $i44, $i51, $i53, $i58, $i64, $i66, $i71, $i79, $i82, $i83, $i84, $i85, $i86, $i90, $i91, $i97, i99, $i103, $i107, $i109, $i110, i111, i112, i113, i115, i116, i117, $i119, i120, i126, $i132, $i133, $i135, $i136, $i137, $i138, $i139, $i140, $i142;
        org.apache.lucene.util.fst.FST$INPUT_TYPE $r12;
        java.lang.Object $r20, $r37, $r38, $r39, $r41, $r43, $r46, $r47, $r48, $r49, $r50, $r52, $r56, $r57, $r58, $r60, $r61, $r64, $r73, $r78, $r79;
        org.apache.lucene.util.fst.BytesStore $r9, $r11, $r14, $r21, $r62;
        org.apache.lucene.util.fst.FST$Arc $r82;
        org.apache.lucene.util.fst.FST$NodeAndInCount r75, r76, $r84, $r85;
        org.apache.lucene.util.packed.PackedInts$Mutable $r17;
        java.util.Set $r15, $r18;
        java.lang.AssertionError $r89, $r90, $r91, $r93, $r94, $r96;
        org.apache.lucene.util.fst.Outputs $r13, $r51, $r53;
        java.lang.String $r28, $r36;
        java.util.Map$Entry r80;
        org.apache.lucene.util.fst.FST r0, $r88;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6, $z7, z8, $z9, $z10, $z11, z12, z13, z14, z15, $z17, $z18, $z19, $z21, $z22, $z23, z24, z25, z26, z27, z28, $z29, $z30;
        float f0;
        org.apache.lucene.util.fst.FST$NodeQueue $r83;
        java.util.HashMap $r86;
        java.util.Iterator $r16, $r19;
        java.lang.IllegalArgumentException $r81;

        r0 := @this: org.apache.lucene.util.fst.FST;

        i99 := @parameter0: int;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        $r1 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        if $r1 != null goto label01;

        $r81 = new java.lang.IllegalArgumentException;

        specialinvoke $r81.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("this FST was not built with willPackFST=true");

        throw $r81;

     label01:
        $r82 = new org.apache.lucene.util.fst.FST$Arc;

        specialinvoke $r82.<org.apache.lucene.util.fst.FST$Arc: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$BytesReader getBytesReader()>();

        $r4 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $i1 = virtualinvoke $r4.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        $r83 = new org.apache.lucene.util.fst.FST$NodeQueue;

        specialinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: void <init>(int)>($i2);

        r75 = null;

        i111 = 0;

     label02:
        $r6 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $i3 = virtualinvoke $r6.<org.apache.lucene.util.packed.GrowableWriter: int size()>();

        if i111 >= $i3 goto label05;

        $r67 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l98 = virtualinvoke $r67.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i111);

        $l100 = (long) i99;

        $b101 = $l98 cmp $l100;

        $i132 = (int) $b101;

        if $i132 < 0 goto label04;

        if r75 != null goto label03;

        $r84 = new org.apache.lucene.util.fst.FST$NodeAndInCount;

        $r72 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l108 = virtualinvoke $r72.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i111);

        $i109 = (int) $l108;

        specialinvoke $r84.<org.apache.lucene.util.fst.FST$NodeAndInCount: void <init>(int,int)>(i111, $i109);

        virtualinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: java.lang.Object add(java.lang.Object)>($r84);

        $i110 = virtualinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: int size()>();

        if $i110 != $i2 goto label04;

        $r73 = virtualinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: java.lang.Object top()>();

        r75 = (org.apache.lucene.util.fst.FST$NodeAndInCount) $r73;

        goto label04;

     label03:
        $r68 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l102 = virtualinvoke $r68.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i111);

        $i103 = r75.<org.apache.lucene.util.fst.FST$NodeAndInCount: int count>;

        $l104 = (long) $i103;

        $b105 = $l102 cmp $l104;

        $i133 = (int) $b105;

        if $i133 <= 0 goto label04;

        $r85 = new org.apache.lucene.util.fst.FST$NodeAndInCount;

        $r70 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts>;

        $l106 = virtualinvoke $r70.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i111);

        $i107 = (int) $l106;

        specialinvoke $r85.<org.apache.lucene.util.fst.FST$NodeAndInCount: void <init>(int,int)>(i111, $i107);

        virtualinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: java.lang.Object insertWithOverflow(java.lang.Object)>($r85);

     label04:
        i111 = i111 + 1;

        goto label02;

     label05:
        r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter inCounts> = null;

        $r86 = new java.util.HashMap;

        specialinvoke $r86.<java.util.HashMap: void <init>()>();

        $i4 = virtualinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: int size()>();

        i112 = $i4 - 1;

     label06:
        if i112 < 0 goto label07;

        $r64 = virtualinvoke $r83.<org.apache.lucene.util.fst.FST$NodeQueue: java.lang.Object pop()>();

        r76 = (org.apache.lucene.util.fst.FST$NodeAndInCount) $r64;

        $i97 = r76.<org.apache.lucene.util.fst.FST$NodeAndInCount: int node>;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i97);

        $r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i112);

        interfaceinvoke $r86.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r65, $r66);

        $i135 = (int) -1;

        i112 = i112 + $i135;

        goto label06;

     label07:
        $r87 = new org.apache.lucene.util.packed.GrowableWriter;

        $r9 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l5 = virtualinvoke $r9.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $i6 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>($l5);

        $l7 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $l8 = 1L + $l7;

        $i9 = (int) $l8;

        specialinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: void <init>(int,int,float)>($i6, $i9, f0);

        i113 = 1;

     label08:
        $l11 = (long) i113;

        $l10 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $b12 = $l11 cmp $l10;

        $i136 = (int) $b12;

        if $i136 > 0 goto label09;

        $r62 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $l93 = virtualinvoke $r62.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l94 = 1L + $l93;

        $r63 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.GrowableWriter nodeAddress>;

        $l95 = virtualinvoke $r63.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i113);

        $l96 = $l94 - $l95;

        virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>(i113, $l96);

        i113 = i113 + 1;

        goto label08;

     label09:
        z12 = 0;

        z13 = 0;

        $r88 = new org.apache.lucene.util.fst.FST;

        $r12 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$INPUT_TYPE inputType>;

        $r13 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r11 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        $i13 = virtualinvoke $r11.<org.apache.lucene.util.fst.BytesStore: int getBlockBits()>();

        specialinvoke $r88.<org.apache.lucene.util.fst.FST: void <init>(org.apache.lucene.util.fst.FST$INPUT_TYPE,org.apache.lucene.util.fst.Outputs,int)>($r12, $r13, $i13);

        $r14 = $r88.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeByte(byte)>(0);

        $r88.<org.apache.lucene.util.fst.FST: long arcWithOutputCount> = 0L;

        $r88.<org.apache.lucene.util.fst.FST: long nodeCount> = 0L;

        $r88.<org.apache.lucene.util.fst.FST: long arcCount> = 0L;

        l114 = 0L;

        $l14 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        i115 = (int) $l14;

     label10:
        if i115 < 1 goto label43;

        $l39 = $r88.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $l40 = $l39 + 1L;

        $r88.<org.apache.lucene.util.fst.FST: long nodeCount> = $l40;

        $l41 = virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l42 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i115);

        $b43 = $l41 cmp $l42;

        if $b43 == 0 goto label11;

        $l92 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>(i115);

        l114 = $l41 - $l92;

        z12 = 1;

        virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: void set(int,long)>(i115, $l41);

     label11:
        i116 = 0;

        i117 = 0;

        z14 = 0;

        z28 = 0;

        z27 = 0;

        z26 = 0;

        z25 = 0;

        z24 = 0;

        z15 = 0;

     label12:
        $l118 = (long) i115;

        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readFirstRealTargetArc(long,org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($l118, $r82, $r3);

        $i119 = $r82.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

        if $i119 == 0 goto label13;

        $z23 = 1;

        $z22 = 1;

        goto label14;

     label13:
        $z23 = 0;

        $z22 = 0;

     label14:
        z5 = $z23;

        if $z22 == 0 goto label16;

        if i117 != 0 goto label15;

        i117 = $r82.<org.apache.lucene.util.fst.FST$Arc: int bytesPerArc>;

     label15:
        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeByte(byte)>(32);

        $i91 = $r82.<org.apache.lucene.util.fst.FST$Arc: int numArcs>;

        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeVInt(int)>($i91);

        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeVInt(int)>(i117);

     label16:
        i120 = 0;

     label17:
        $l121 = virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        i116 = i116 + 1;

        b122 = 0;

        $z17 = virtualinvoke $r82.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z17 == 0 goto label18;

        b122 = (byte) 2;

     label18:
        if z5 != 0 goto label19;

        if i115 == 1 goto label19;

        $l88 = $r82.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i86 = i115 - 1;

        $l87 = (long) $i86;

        $b89 = $l88 cmp $l87;

        if $b89 != 0 goto label19;

        $i90 = b122 + 4;

        b122 = (byte) $i90;

        if z24 != 0 goto label19;

     label19:
        $z18 = virtualinvoke $r82.<org.apache.lucene.util.fst.FST$Arc: boolean isFinal()>();

        if $z18 == 0 goto label20;

        $i84 = b122 + 1;

        b122 = (byte) $i84;

        $r61 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r60 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r61 == $r60 goto label21;

        $i85 = b122 + 32;

        b122 = (byte) $i85;

        goto label21;

     label20:
        $z6 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z6 != 0 goto label21;

        $r58 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r57 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r58 == $r57 goto label21;

        $r89 = new java.lang.AssertionError;

        specialinvoke $r89.<java.lang.AssertionError: void <init>()>();

        throw $r89;

     label21:
        $z19 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>($r82);

        if $z19 != 0 goto label22;

        $i83 = b122 + 8;

        b122 = (byte) $i83;

     label22:
        $r47 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r46 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r47 == $r46 goto label23;

        $i82 = b122 + 16;

        b122 = (byte) $i82;

     label23:
        $z7 = staticinvoke <org.apache.lucene.util.fst.FST: boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc)>($r82);

        if $z7 == 0 goto label24;

        $b81 = b122 & 4;

        if $b81 != 0 goto label24;

        $z30 = 1;

        $z29 = 1;

        goto label25;

     label24:
        $z30 = 0;

        $z29 = 0;

     label25:
        z8 = $z30;

        if $z29 == 0 goto label30;

        $l63 = $r82.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $r55 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l63);

        $r56 = interfaceinvoke $r86.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        r77 = (java.lang.Integer) $r56;

        if r77 == null goto label26;

        $i79 = virtualinvoke r77.<java.lang.Integer: int intValue()>();

        l123 = (long) $i79;

        goto label27;

     label26:
        $i64 = interfaceinvoke $r86.<java.util.Map: int size()>();

        $l67 = (long) $i64;

        $l65 = $r82.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i66 = (int) $l65;

        $l68 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i66);

        $l69 = $l67 + $l68;

        l123 = $l69 + l114;

     label27:
        $l70 = $r82.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i71 = (int) $l70;

        $l72 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i71);

        $l73 = $l72 + l114;

        $l74 = virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l75 = $l73 - $l74;

        $l80 = $l75 - 2L;

        l124 = $l80;

        $b76 = $l80 cmp 0L;

        $i137 = (int) $b76;

        if $i137 >= 0 goto label28;

        z15 = 1;

        l124 = 0L;

     label28:
        $b77 = l124 cmp l123;

        $i138 = (int) $b77;

        if $i138 >= 0 goto label29;

        $b78 = b122 | 64;

        b122 = (byte) $b78;

     label29:
        goto label31;

     label30:
        l123 = 0L;

     label31:
        $z9 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z9 != 0 goto label32;

        if b122 != 32 goto label32;

        $r90 = new java.lang.AssertionError;

        specialinvoke $r90.<java.lang.AssertionError: void <init>()>();

        throw $r90;

     label32:
        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeByte(byte)>(b122);

        $i44 = $r82.<org.apache.lucene.util.fst.FST$Arc: int label>;

        specialinvoke $r88.<org.apache.lucene.util.fst.FST: void writeLabel(org.apache.lucene.store.DataOutput,int)>($r14, $i44);

        $r49 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        $r48 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r49 == $r48 goto label33;

        $r53 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r52 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object output>;

        virtualinvoke $r53.<org.apache.lucene.util.fst.Outputs: void write(java.lang.Object,org.apache.lucene.store.DataOutput)>($r52, $r14);

        if z26 != 0 goto label33;

        $l61 = $r88.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        $l62 = $l61 + 1L;

        $r88.<org.apache.lucene.util.fst.FST: long arcWithOutputCount> = $l62;

     label33:
        $r78 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        $r79 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object NO_OUTPUT>;

        if $r78 == $r79 goto label34;

        $r51 = r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.Outputs outputs>;

        $r50 = $r82.<org.apache.lucene.util.fst.FST$Arc: java.lang.Object nextFinalOutput>;

        virtualinvoke $r51.<org.apache.lucene.util.fst.Outputs: void writeFinalOutput(java.lang.Object,org.apache.lucene.store.DataOutput)>($r50, $r14);

     label34:
        if z8 == 0 goto label37;

        $l52 = $r82.<org.apache.lucene.util.fst.FST$Arc: long target>;

        $i53 = (int) $l52;

        $l54 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i53);

        $l55 = $l54 + l114;

        $l56 = virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        l125 = $l55 - $l56;

        $b57 = l125 cmp 0L;

        $i139 = (int) $b57;

        if $i139 >= 0 goto label35;

        z15 = 1;

        l125 = 0L;

     label35:
        $z11 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>(b122, 64);

        if $z11 == 0 goto label36;

        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeVLong(long)>(l125);

        if z27 != 0 goto label37;

        goto label37;

     label36:
        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void writeVLong(long)>(l123);

        if z25 != 0 goto label37;

        $i58 = interfaceinvoke $r86.<java.util.Map: int size()>();

        $l59 = (long) $i58;

        $b60 = l123 cmp $l59;

        $i140 = (int) $b60;

        if $i140 < 0 goto label37;

        goto label37;

     label37:
        if z5 == 0 goto label38;

        $l45 = virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l46 = $l45 - $l121;

        i126 = (int) $l46;

        i120 = staticinvoke <java.lang.Math: int max(int,int)>(i120, i126);

        $l47 = (long) i117;

        $l48 = $l121 + $l47;

        $l49 = virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: long getPosition()>();

        $l50 = $l48 - $l49;

        $i51 = (int) $l50;

        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void skipBytes(int)>($i51);

     label38:
        $z10 = virtualinvoke $r82.<org.apache.lucene.util.fst.FST$Arc: boolean isLast()>();

        if $z10 == 0 goto label39;

        goto label40;

     label39:
        virtualinvoke r0.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.FST$Arc readNextRealArc(org.apache.lucene.util.fst.FST$Arc,org.apache.lucene.util.fst.FST$BytesReader)>($r82, $r3);

        goto label17;

     label40:
        if z5 == 0 goto label42;

        if i120 == i117 goto label42;

        if z28 == 0 goto label41;

        if i120 > i117 goto label41;

        goto label42;

     label41:
        i117 = i120;

        virtualinvoke $r14.<org.apache.lucene.util.fst.BytesStore: void truncate(long)>($l41);

        i116 = 0;

        z14 = 1;

        z28 = 1;

        z27 = 1;

        z26 = 1;

        z25 = 1;

        z24 = 1;

        z15 = 0;

        goto label12;

     label42:
        z13 = z13 | z15;

        $l127 = $r88.<org.apache.lucene.util.fst.FST: long arcCount>;

        $l128 = (long) i116;

        $l129 = $l127 + $l128;

        $r88.<org.apache.lucene.util.fst.FST: long arcCount> = $l129;

        $i142 = (int) -1;

        i115 = i115 + $i142;

        goto label10;

     label43:
        if z12 != 0 goto label44;

        $z0 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z0 != 0 goto label45;

        if z13 == 0 goto label45;

        $r91 = new java.lang.AssertionError;

        specialinvoke $r91.<java.lang.AssertionError: void <init>()>();

        throw $r91;

     label44:
        goto label09;

     label45:
        l130 = 0L;

        $r15 = interfaceinvoke $r86.<java.util.Map: java.util.Set keySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label46:
        $z21 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z21 == 0 goto label47;

        $r43 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r44 = (java.lang.Integer) $r43;

        $i36 = virtualinvoke $r44.<java.lang.Integer: int intValue()>();

        l131 = (long) $i36;

        $i37 = (int) l131;

        $l38 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i37);

        l130 = staticinvoke <java.lang.Math: long max(long,long)>(l130, $l38);

        goto label46;

     label47:
        $i15 = interfaceinvoke $r86.<java.util.Map: int size()>();

        $i16 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l130);

        $r17 = staticinvoke <org.apache.lucene.util.packed.PackedInts: org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int,float)>($i15, $i16, f0);

        $r18 = interfaceinvoke $r86.<java.util.Map: java.util.Set entrySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label48:
        $z1 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label49;

        $r38 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r80 = (java.util.Map$Entry) $r38;

        $r39 = interfaceinvoke r80.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r40 = (java.lang.Integer) $r39;

        $i33 = virtualinvoke $r40.<java.lang.Integer: int intValue()>();

        $r41 = interfaceinvoke r80.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r42 = (java.lang.Integer) $r41;

        $i34 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        $l35 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i34);

        interfaceinvoke $r17.<org.apache.lucene.util.packed.PackedInts$Mutable: void set(int,long)>($i33, $l35);

        goto label48;

     label49:
        $r88.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.packed.PackedInts$Reader nodeRefToAddress> = $r17;

        $l17 = r0.<org.apache.lucene.util.fst.FST: long startNode>;

        $i18 = (int) $l17;

        $l19 = virtualinvoke $r87.<org.apache.lucene.util.packed.GrowableWriter: long get(int)>($i18);

        $r88.<org.apache.lucene.util.fst.FST: long startNode> = $l19;

        $r20 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        if $r20 == null goto label50;

        $r37 = r0.<org.apache.lucene.util.fst.FST: java.lang.Object emptyOutput>;

        virtualinvoke $r88.<org.apache.lucene.util.fst.FST: void setEmptyOutput(java.lang.Object)>($r37);

     label50:
        $z2 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z2 != 0 goto label51;

        $l29 = $r88.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $l28 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $b30 = $l29 cmp $l28;

        if $b30 == 0 goto label51;

        $r93 = new java.lang.AssertionError;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fst.nodeCount=");

        $l31 = $r88.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l31);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nodeCount=");

        $l32 = r0.<org.apache.lucene.util.fst.FST: long nodeCount>;

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l32);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r93.<java.lang.AssertionError: void <init>(java.lang.Object)>($r36);

        throw $r93;

     label51:
        $z3 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z3 != 0 goto label52;

        $l26 = $r88.<org.apache.lucene.util.fst.FST: long arcCount>;

        $l25 = r0.<org.apache.lucene.util.fst.FST: long arcCount>;

        $b27 = $l26 cmp $l25;

        if $b27 == 0 goto label52;

        $r94 = new java.lang.AssertionError;

        specialinvoke $r94.<java.lang.AssertionError: void <init>()>();

        throw $r94;

     label52:
        $z4 = <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled>;

        if $z4 != 0 goto label53;

        $l21 = $r88.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        $l20 = r0.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        $b22 = $l21 cmp $l20;

        if $b22 == 0 goto label53;

        $r96 = new java.lang.AssertionError;

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fst.arcWithOutputCount=");

        $l23 = $r88.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l23);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arcWithOutputCount=");

        $l24 = r0.<org.apache.lucene.util.fst.FST: long arcWithOutputCount>;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r96.<java.lang.AssertionError: void <init>(java.lang.Object)>($r28);

        throw $r96;

     label53:
        $r21 = $r88.<org.apache.lucene.util.fst.FST: org.apache.lucene.util.fst.BytesStore bytes>;

        virtualinvoke $r21.<org.apache.lucene.util.fst.BytesStore: void finish()>();

        specialinvoke $r88.<org.apache.lucene.util.fst.FST: void cacheRootArcs()>();

        return $r88;
    }

    static boolean access$000(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <org.apache.lucene.util.fst.FST: boolean flag(int,int)>(i0, i1);

        return $z0;
    }

    static void <clinit>()
    {
        byte $b0;
        java.lang.Class $r0;
        boolean $z0, $z1, $z2;

        <org.apache.lucene.util.fst.FST: int END_LABEL> = -1;

        <org.apache.lucene.util.fst.FST: long NON_FINAL_END_NODE> = 0L;

        <org.apache.lucene.util.fst.FST: long FINAL_END_NODE> = -1L;

        <org.apache.lucene.util.fst.FST: int VERSION_CURRENT> = 4;

        <org.apache.lucene.util.fst.FST: int VERSION_VINT_TARGET> = 4;

        <org.apache.lucene.util.fst.FST: int VERSION_PACKED> = 3;

        <org.apache.lucene.util.fst.FST: int VERSION_SHORT_BYTE2_LABELS> = 2;

        <org.apache.lucene.util.fst.FST: int VERSION_INT_NUM_BYTES_PER_ARC> = 1;

        <org.apache.lucene.util.fst.FST: int VERSION_START> = 0;

        <org.apache.lucene.util.fst.FST: java.lang.String FILE_FORMAT_NAME> = "FST";

        <org.apache.lucene.util.fst.FST: int FIXED_ARRAY_NUM_ARCS_DEEP> = 10;

        <org.apache.lucene.util.fst.FST: int FIXED_ARRAY_NUM_ARCS_SHALLOW> = 5;

        <org.apache.lucene.util.fst.FST: int FIXED_ARRAY_SHALLOW_DISTANCE> = 3;

        <org.apache.lucene.util.fst.FST: byte ARCS_AS_FIXED_ARRAY> = 32;

        <org.apache.lucene.util.fst.FST: int BIT_TARGET_DELTA> = 64;

        <org.apache.lucene.util.fst.FST: int BIT_ARC_HAS_FINAL_OUTPUT> = 32;

        <org.apache.lucene.util.fst.FST: int BIT_ARC_HAS_OUTPUT> = 16;

        <org.apache.lucene.util.fst.FST: int BIT_STOP_NODE> = 8;

        <org.apache.lucene.util.fst.FST: int BIT_TARGET_NEXT> = 4;

        <org.apache.lucene.util.fst.FST: int BIT_LAST_ARC> = 2;

        <org.apache.lucene.util.fst.FST: int BIT_FINAL_ARC> = 1;

        $r0 = class "Lorg/apache/lucene/util/fst/FST;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <org.apache.lucene.util.fst.FST: boolean $assertionsDisabled> = $z2;

        $z1 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z1 == 0 goto label3;

        $b0 = 30;

        goto label4;

     label3:
        $b0 = 28;

     label4:
        <org.apache.lucene.util.fst.FST: int DEFAULT_MAX_BLOCK_BITS> = $b0;

        return;
    }
}
