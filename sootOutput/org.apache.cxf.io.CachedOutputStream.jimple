public class org.apache.cxf.io.CachedOutputStream extends java.io.OutputStream
{
    private static final java.io.File DEFAULT_TEMP_DIR;
    private static int defaultThreshold;
    private static long defaultMaxSize;
    private static java.lang.String defaultCipherTransformation;
    protected boolean outputLocked;
    protected java.io.OutputStream currentStream;
    private long threshold;
    private long maxSize;
    private long totalLength;
    private boolean inmem;
    private boolean tempFileFailed;
    private java.io.File tempFile;
    private java.io.File outputDir;
    private boolean allowDeleteOfFile;
    private java.lang.String cipherTransformation;
    private org.apache.cxf.io.CipherPair ciphers;
    private java.util.List callbacks;
    private java.util.List streamList;

    public void <init>(java.io.PipedInputStream) throws java.io.IOException
    {
        long $l1, $l2;
        java.io.PipedOutputStream $r4;
        java.io.File $r1;
        java.util.ArrayList $r3;
        java.io.PipedInputStream r5;
        int $i0;
        java.lang.String $r2;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r5 := @parameter0: java.io.PipedInputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $i0 = <org.apache.cxf.io.CachedOutputStream: int defaultThreshold>;

        $l1 = (long) $i0;

        r0.<org.apache.cxf.io.CachedOutputStream: long threshold> = $l1;

        $l2 = <org.apache.cxf.io.CachedOutputStream: long defaultMaxSize>;

        r0.<org.apache.cxf.io.CachedOutputStream: long maxSize> = $l2;

        $r1 = <org.apache.cxf.io.CachedOutputStream: java.io.File DEFAULT_TEMP_DIR>;

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.File outputDir> = $r1;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean allowDeleteOfFile> = 1;

        $r2 = <org.apache.cxf.io.CachedOutputStream: java.lang.String defaultCipherTransformation>;

        r0.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList> = $r3;

        $r4 = new java.io.PipedOutputStream;

        specialinvoke $r4.<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>(r5);

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream> = $r4;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem> = 1;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void readBusProperties()>();

        return;
    }

    public void <init>()
    {
        int $i0;
        long $l1;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $i0 = <org.apache.cxf.io.CachedOutputStream: int defaultThreshold>;

        $l1 = (long) $i0;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void <init>(long)>($l1);

        return;
    }

    public void <init>(long)
    {
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r4;
        long $l1, $l2, l3;
        java.io.File $r1;
        java.util.ArrayList $r3;
        int $i0;
        java.lang.String $r2;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        l3 := @parameter0: long;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $i0 = <org.apache.cxf.io.CachedOutputStream: int defaultThreshold>;

        $l1 = (long) $i0;

        r0.<org.apache.cxf.io.CachedOutputStream: long threshold> = $l1;

        $l2 = <org.apache.cxf.io.CachedOutputStream: long defaultMaxSize>;

        r0.<org.apache.cxf.io.CachedOutputStream: long maxSize> = $l2;

        $r1 = <org.apache.cxf.io.CachedOutputStream: java.io.File DEFAULT_TEMP_DIR>;

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.File outputDir> = $r1;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean allowDeleteOfFile> = 1;

        $r2 = <org.apache.cxf.io.CachedOutputStream: java.lang.String defaultCipherTransformation>;

        r0.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList> = $r3;

        r0.<org.apache.cxf.io.CachedOutputStream: long threshold> = l3;

        $r4 = new org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        specialinvoke $r4.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: void <init>(int)>(2048);

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream> = $r4;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem> = 1;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void readBusProperties()>();

        return;
    }

    private void readBusProperties()
    {
        org.apache.cxf.Bus $r0;
        long $l1, $l3, $l4, $l7;
        byte $b5;
        int $i0, $i2, $i6;
        java.lang.String $r1, $r2, $r4;
        org.apache.cxf.io.CachedOutputStream r3;

        r3 := @this: org.apache.cxf.io.CachedOutputStream;

        $r0 = staticinvoke <org.apache.cxf.BusFactory: org.apache.cxf.Bus getThreadDefaultBus(boolean)>(0);

        if $r0 == null goto label3;

        $r1 = staticinvoke <org.apache.cxf.io.CachedOutputStream: java.lang.String getBusProperty(org.apache.cxf.Bus,java.lang.String,java.lang.String)>($r0, "bus.io.CachedOutputStream.Threshold", null);

        if $r1 == null goto label1;

        $l4 = r3.<org.apache.cxf.io.CachedOutputStream: long threshold>;

        $i2 = <org.apache.cxf.io.CachedOutputStream: int defaultThreshold>;

        $l3 = (long) $i2;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label1;

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $l7 = (long) $i6;

        r3.<org.apache.cxf.io.CachedOutputStream: long threshold> = $l7;

     label1:
        $r4 = staticinvoke <org.apache.cxf.io.CachedOutputStream: java.lang.String getBusProperty(org.apache.cxf.Bus,java.lang.String,java.lang.String)>($r0, "bus.io.CachedOutputStream.MaxSize", null);

        if $r4 == null goto label2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $l1 = (long) $i0;

        r3.<org.apache.cxf.io.CachedOutputStream: long maxSize> = $l1;

     label2:
        $r2 = staticinvoke <org.apache.cxf.io.CachedOutputStream: java.lang.String getBusProperty(org.apache.cxf.Bus,java.lang.String,java.lang.String)>($r0, "bus.io.CachedOutputStream.CipherTransformation", null);

        if $r2 == null goto label3;

        r3.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation> = $r2;

     label3:
        return;
    }

    private static java.lang.String getBusProperty(org.apache.cxf.Bus, java.lang.String, java.lang.String)
    {
        org.apache.cxf.Bus r0;
        java.lang.Object $r2;
        java.lang.String r1, r3, r4, $r5;

        r0 := @parameter0: org.apache.cxf.Bus;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = interfaceinvoke r0.<org.apache.cxf.Bus: java.lang.Object getProperty(java.lang.String)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 == null goto label1;

        $r5 = r3;

        goto label2;

     label1:
        $r5 = r4;

     label2:
        return $r5;
    }

    public void holdTempFile()
    {
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean allowDeleteOfFile> = 0;

        return;
    }

    public void releaseTempFileHold()
    {
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean allowDeleteOfFile> = 1;

        return;
    }

    public void registerCallback(org.apache.cxf.io.CachedOutputStreamCallback)
    {
        org.apache.cxf.io.CachedOutputStreamCallback r2;
        java.util.List $r1, $r3;
        org.apache.cxf.io.CachedOutputStream r0;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r2 := @parameter0: org.apache.cxf.io.CachedOutputStreamCallback;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        if null != $r1 goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks> = $r4;

     label1:
        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void deregisterCallback(org.apache.cxf.io.CachedOutputStreamCallback)
    {
        org.apache.cxf.io.CachedOutputStreamCallback r2;
        java.util.List $r1, $r3;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r2 := @parameter0: org.apache.cxf.io.CachedOutputStreamCallback;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        if null == $r1 goto label1;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public java.util.List getCallbacks()
    {
        java.util.List $r1, $r2, $r3;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

     label2:
        return $r3;
    }

    protected void doFlush() throws java.io.IOException
    {
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.cxf.io.CachedOutputStreamCallback r6;
        java.util.Iterator $r4;
        java.util.List $r2, $r3;
        java.lang.Object $r5;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        if null == $r2 goto label2;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.cxf.io.CachedOutputStreamCallback) $r5;

        interfaceinvoke r6.<org.apache.cxf.io.CachedOutputStreamCallback: void onFlush(org.apache.cxf.io.CachedOutputStream)>(r0);

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void doFlush()>();

        return;
    }

    protected void doClose() throws java.io.IOException
    {
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        return;
    }

    protected void postClose() throws java.io.IOException
    {
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        return;
    }

    public void lockOutputStream() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r3;
        org.apache.cxf.io.CachedOutputStreamCallback r8;
        java.util.Iterator $r6;
        java.util.List $r2, $r4, $r5;
        java.lang.Object $r7;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked> = 1;

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        if null == $r2 goto label3;

        $r5 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.cxf.io.CachedOutputStreamCallback) $r7;

        interfaceinvoke r8.<org.apache.cxf.io.CachedOutputStreamCallback: void onClose(org.apache.cxf.io.CachedOutputStream)>(r0);

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void doClose()>();

        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList>;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>($r3);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r3, $r4;
        org.apache.cxf.io.CachedOutputStreamCallback r8;
        java.util.Iterator $r6;
        java.util.List $r2, $r5;
        java.lang.Object $r7;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked> = 1;

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        if null == $r2 goto label2;

        $r5 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List callbacks>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.cxf.io.CachedOutputStreamCallback) $r7;

        interfaceinvoke r8.<org.apache.cxf.io.CachedOutputStreamCallback: void onClose(org.apache.cxf.io.CachedOutputStream)>(r0);

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void doClose()>();

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void maybeDeleteTempFile(java.lang.Object)>($r4);

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void postClose()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.io.OutputStream $r2, $r4, $r5;
        java.lang.Object r0;
        org.apache.cxf.io.CachedOutputStream r1, $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.cxf.io.CachedOutputStream;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.cxf.io.CachedOutputStream;

        if $z0 == 0 goto label2;

        $r5 = r1.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r3 = (org.apache.cxf.io.CachedOutputStream) r0;

        $r4 = $r3.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z2;

     label2:
        $r2 = r1.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z1;
    }

    public void resetOut(java.io.OutputStream, boolean) throws java.io.IOException
    {
        java.io.ByteArrayOutputStream r18;
        java.io.PipedInputStream $r11;
        int $i0;
        boolean $z0, $z1, z2, $z3, $z4;
        java.io.OutputStream $r1, $r2, $r3, $r7, $r8, $r10, $r12, $r13, r16;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r15;
        java.io.IOException $r9;
        java.io.PipedOutputStream r19;
        java.io.File $r5;
        java.util.List $r4;
        org.apache.cxf.io.CachedOutputStream r0, r17;
        java.io.InputStream $r6, $r14;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r16 := @parameter0: java.io.OutputStream;

        z2 := @parameter1: boolean;

        if r16 != null goto label1;

        $r15 = new org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        specialinvoke $r15.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: void <init>()>();

        r16 = $r15;

     label1:
        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z0 = $r1 instanceof org.apache.cxf.io.CachedOutputStream;

        if $z0 == 0 goto label2;

        $r13 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        r17 = (org.apache.cxf.io.CachedOutputStream) $r13;

        $r14 = virtualinvoke r17.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>();

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>($r14, r16);

        goto label8;

     label2:
        $z1 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z1 == 0 goto label6;

        $r7 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z3 = $r7 instanceof java.io.ByteArrayOutputStream;

        if $z3 == 0 goto label4;

        $r12 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        r18 = (java.io.ByteArrayOutputStream) $r12;

        if z2 == 0 goto label3;

        $i0 = virtualinvoke r18.<java.io.ByteArrayOutputStream: int size()>();

        if $i0 <= 0 goto label3;

        virtualinvoke r18.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r16);

     label3:
        goto label8;

     label4:
        $r8 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z4 = $r8 instanceof java.io.PipedOutputStream;

        if $z4 == 0 goto label5;

        $r10 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        r19 = (java.io.PipedOutputStream) $r10;

        $r11 = new java.io.PipedInputStream;

        specialinvoke $r11.<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>(r19);

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>($r11, r16);

        goto label8;

     label5:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Unknown format of currentStream");

        throw $r9;

     label6:
        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        if z2 == 0 goto label7;

        $r5 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $r6 = specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream createInputStream(java.io.File)>($r5);

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>($r6, r16);

     label7:
        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList>;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>($r3);

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void deleteTempFile()>();

        r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem> = 1;

     label8:
        r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream> = r16;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked> = 0;

        return;
    }

    public static void copyStream(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        int i0;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream,int)>(r0, r1, i0);

        return;
    }

    public long size()
    {
        long $l0;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $l0 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        return $l0;
    }

    public byte[] getBytes() throws java.io.IOException
    {
        java.io.OutputStream $r4, $r6;
        byte[] $r3, $r8;
        java.io.ByteArrayOutputStream $r7;
        java.io.IOException $r5;
        java.io.File $r1;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0, $z1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void flush()>();

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = $r4 instanceof java.io.ByteArrayOutputStream;

        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r7 = (java.io.ByteArrayOutputStream) $r6;

        $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r8;

     label1:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Unknown format of currentStream");

        throw $r5;

     label2:
        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $r2 = specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream createInputStream(java.io.File)>($r1);

        $r3 = staticinvoke <org.apache.cxf.helpers.IOUtils: byte[] readBytesFromStream(java.io.InputStream)>($r2);

        return $r3;
    }

    public void writeCacheTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3, $r4, $r6;
        java.io.ByteArrayOutputStream $r7;
        java.io.IOException $r5;
        java.io.File $r1;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0, $z1;
        java.io.InputStream $r2;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r3 := @parameter0: java.io.OutputStream;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void flush()>();

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = $r4 instanceof java.io.ByteArrayOutputStream;

        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r7 = (java.io.ByteArrayOutputStream) $r6;

        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r3);

        goto label3;

     label1:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Unknown format of currentStream");

        throw $r5;

     label2:
        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $r2 = specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream createInputStream(java.io.File)>($r1);

        staticinvoke <org.apache.cxf.helpers.IOUtils: int copyAndCloseInput(java.io.InputStream,java.io.OutputStream)>($r2, r3);

     label3:
        return;
    }

    public void writeCacheTo(java.lang.StringBuilder, long) throws java.io.IOException
    {
        java.lang.StringBuilder r1;
        long l0;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.lang.StringBuilder;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,java.lang.String,long)>(r1, "UTF-8", l0);

        return;
    }

    public void writeCacheTo(java.lang.StringBuilder, java.lang.String, long) throws java.io.IOException
    {
        byte[] $r12, $r15;
        byte $b2, $b3, $b6, $b8, $b15;
        boolean $z0, $z1, $z2;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream r18;
        java.lang.StringBuilder r1;
        java.lang.Throwable $r17;
        java.io.ByteArrayOutputStream $r11;
        long l0, $l1, $l5, $l10, l13, l14;
        int $i4, $i7, $i9, $i11, $i12, $i16, $i17, $i18;
        java.lang.String r2, $r13, $r16;
        java.io.OutputStream $r7, $r8, $r10, $r14;
        java.io.IOException $r21;
        java.io.InputStreamReader r20, $r22;
        java.io.File $r3;
        char[] r6;
        org.apache.cxf.io.CachedOutputStream r0;
        java.io.InputStream $r4, r19;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void flush()>();

        $l1 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        $b2 = $l1 cmp l0;

        $i16 = (int) $b2;

        if $i16 < 0 goto label01;

        $b3 = l0 cmp -1L;

        if $b3 != 0 goto label02;

     label01:
        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,java.lang.String)>(r1, r2);

        return;

     label02:
        l13 = 0L;

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 == 0 goto label05;

        $r7 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = $r7 instanceof org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        if $z1 == 0 goto label03;

        $r14 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        r18 = (org.apache.cxf.helpers.LoadingByteArrayOutputStream) $r14;

        $r15 = virtualinvoke r18.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: byte[] getRawBytes()>();

        $i12 = (int) l0;

        $r16 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],java.lang.String,int,int)>($r15, r2, 0, $i12);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label16;

     label03:
        $r8 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z2 = $r8 instanceof java.io.ByteArrayOutputStream;

        if $z2 == 0 goto label04;

        $r10 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r11 = (java.io.ByteArrayOutputStream) $r10;

        $r12 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i11 = (int) l0;

        $r13 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],java.lang.String,int,int)>($r12, r2, 0, $i11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label16;

     label04:
        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Unknown format of currentStream");

        throw $r21;

     label05:
        r19 = null;

        r20 = null;

     label06:
        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $r4 = specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream createInputStream(java.io.File)>($r3);

        r19 = $r4;

        $r22 = new java.io.InputStreamReader;

        specialinvoke $r22.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r4, r2);

        r20 = $r22;

        r6 = newarray (char)[1024];

        $i4 = virtualinvoke $r22.<java.io.Reader: int read(char[])>(r6);

        l14 = (long) $i4;

     label07:
        $b15 = l14 cmp -1L;

        if $b15 == 0 goto label10;

        $l5 = l13 + l14;

        $b6 = $l5 cmp l0;

        $i17 = (int) $b6;

        if $i17 <= 0 goto label08;

        l14 = l0 - l13;

     label08:
        $i7 = (int) l14;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r6, 0, $i7);

        $l10 = l13 + l14;

        l13 = $l10;

        $b8 = $l10 cmp l0;

        $i18 = (int) $b8;

        if $i18 < 0 goto label09;

        l14 = -1L;

        goto label07;

     label09:
        $i9 = virtualinvoke $r22.<java.io.Reader: int read(char[])>(r6);

        l14 = (long) $i9;

        goto label07;

     label10:
        if $r22 == null goto label11;

        virtualinvoke $r22.<java.io.Reader: void close()>();

     label11:
        if $r4 == null goto label16;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        goto label16;

     label12:
        $r17 := @caughtexception;

     label13:
        if r20 == null goto label14;

        virtualinvoke r20.<java.io.Reader: void close()>();

     label14:
        if r19 == null goto label15;

        virtualinvoke r19.<java.io.InputStream: void close()>();

     label15:
        throw $r17;

     label16:
        return;

        catch java.lang.Throwable from label06 to label10 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void writeCacheTo(java.lang.StringBuilder) throws java.io.IOException
    {
        java.lang.StringBuilder r1;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,java.lang.String)>(r1, "UTF-8");

        return;
    }

    public void writeCacheTo(java.lang.StringBuilder, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r17;
        byte[] $r12, $r15;
        java.io.ByteArrayOutputStream $r11;
        int $i0, i1, $i3;
        java.lang.String r4, $r13, $r16;
        boolean $z0, $z1, $z2;
        java.io.OutputStream $r7, $r8, $r10, $r14;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream r18;
        java.io.IOException $r21;
        java.io.InputStreamReader r20, $r22;
        java.io.File $r1;
        char[] r5;
        java.lang.StringBuilder r6;
        org.apache.cxf.io.CachedOutputStream r0;
        java.io.InputStream $r2, r19;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r6 := @parameter0: java.lang.StringBuilder;

        r4 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void flush()>();

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 == 0 goto label03;

        $r7 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = $r7 instanceof org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        if $z1 == 0 goto label01;

        $r14 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        r18 = (org.apache.cxf.helpers.LoadingByteArrayOutputStream) $r14;

        $r15 = virtualinvoke r18.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: byte[] getRawBytes()>();

        $i0 = virtualinvoke r18.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: int size()>();

        $r16 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],java.lang.String,int,int)>($r15, r4, 0, $i0);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label12;

     label01:
        $r8 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z2 = $r8 instanceof java.io.ByteArrayOutputStream;

        if $z2 == 0 goto label02;

        $r10 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r11 = (java.io.ByteArrayOutputStream) $r10;

        $r12 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r13 = staticinvoke <org.apache.cxf.helpers.IOUtils: java.lang.String newStringFromBytes(byte[],java.lang.String)>($r12, r4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label12;

     label02:
        $r21 = new java.io.IOException;

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>("Unknown format of currentStream");

        throw $r21;

     label03:
        r19 = null;

        r20 = null;

     label04:
        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $r2 = specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream createInputStream(java.io.File)>($r1);

        r19 = $r2;

        $r22 = new java.io.InputStreamReader;

        specialinvoke $r22.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r2, r4);

        r20 = $r22;

        r5 = newarray (char)[1024];

        i1 = virtualinvoke $r22.<java.io.Reader: int read(char[])>(r5);

     label05:
        $i3 = (int) -1;

        if i1 == $i3 goto label06;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r5, 0, i1);

        i1 = virtualinvoke $r22.<java.io.Reader: int read(char[])>(r5);

        goto label05;

     label06:
        if $r22 == null goto label07;

        virtualinvoke $r22.<java.io.Reader: void close()>();

     label07:
        if $r2 == null goto label12;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label12;

     label08:
        $r17 := @caughtexception;

     label09:
        if r20 == null goto label10;

        virtualinvoke r20.<java.io.Reader: void close()>();

     label10:
        if r19 == null goto label11;

        virtualinvoke r19.<java.io.InputStream: void close()>();

     label11:
        throw $r17;

     label12:
        return;

        catch java.lang.Throwable from label04 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.io.OutputStream getOut()
    {
        java.io.OutputStream $r1;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        return $r1;
    }

    public int hashCode()
    {
        java.io.OutputStream $r1;
        int $i0;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.io.IOException $r9;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r8;
        org.apache.cxf.io.CachedOutputStream r6;

        r6 := @this: org.apache.cxf.io.CachedOutputStream;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r2 = class "Lorg/apache/cxf/io/CachedOutputStream;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Content: ");

     label1:
        virtualinvoke r6.<org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder)>($r5);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void onWrite() throws java.io.IOException
    {
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        return;
    }

    private void enforceLimits() throws java.io.IOException
    {
        long $l0, $l2, $l3, $l5, $l6;
        org.apache.cxf.io.CacheSizeExceededException $r3;
        byte $b1, $b4, $b7;
        int $i8, $i9, $i10;
        boolean $z0, $z1;
        java.io.OutputStream $r1;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $l0 = r0.<org.apache.cxf.io.CachedOutputStream: long maxSize>;

        $b1 = $l0 cmp 0L;

        $i8 = (int) $b1;

        if $i8 <= 0 goto label1;

        $l6 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        $l5 = r0.<org.apache.cxf.io.CachedOutputStream: long maxSize>;

        $b7 = $l6 cmp $l5;

        $i9 = (int) $b7;

        if $i9 <= 0 goto label1;

        $r3 = new org.apache.cxf.io.CacheSizeExceededException;

        specialinvoke $r3.<org.apache.cxf.io.CacheSizeExceededException: void <init>()>();

        throw $r3;

     label1:
        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 == 0 goto label2;

        $l3 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        $l2 = r0.<org.apache.cxf.io.CachedOutputStream: long threshold>;

        $b4 = $l3 cmp $l2;

        $i10 = (int) $b4;

        if $i10 <= 0 goto label2;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = $r1 instanceof java.io.ByteArrayOutputStream;

        if $z1 == 0 goto label2;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void createFileOutputStream()>();

     label2:
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        long $l1, $l2, $l3;
        int i0, i4;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void onWrite()>();

        $l2 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        r0.<org.apache.cxf.io.CachedOutputStream: long totalLength> = $l3;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void enforceLimits()>();

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i4, i0);

     label1:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        long $l1, $l2, $l3;
        int $i0;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: byte[];

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void onWrite()>();

        $l2 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        $l3 = $l2 + $l1;

        r0.<org.apache.cxf.io.CachedOutputStream: long totalLength> = $l3;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void enforceLimits()>();

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

     label1:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        int i2;
        long $l0, $l1;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        i2 := @parameter0: int;

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean outputLocked>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void onWrite()>();

        $l0 = r0.<org.apache.cxf.io.CachedOutputStream: long totalLength>;

        $l1 = $l0 + 1L;

        r0.<org.apache.cxf.io.CachedOutputStream: long totalLength> = $l1;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void enforceLimits()>();

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i2);

     label1:
        return;
    }

    private void createFileOutputStream() throws java.io.IOException
    {
        java.io.ByteArrayOutputStream r2;
        boolean $z0;
        java.io.OutputStream $r1, $r7, $r8, $r9, $r13, $r14;
        java.io.File $r3, $r4, $r5, $r6, $r11;
        java.lang.Exception $r12;
        java.util.List $r10;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean tempFileFailed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        r2 = (java.io.ByteArrayOutputStream) $r1;

     label2:
        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File outputDir>;

        if $r3 != null goto label3;

        $r11 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String)>("cos", "tmp");

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile> = $r11;

        goto label4;

     label3:
        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File outputDir>;

        $r5 = staticinvoke <org.apache.cxf.helpers.FileUtils: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File,boolean)>("cos", "tmp", $r4, 0);

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile> = $r5;

     label4:
        $r6 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $r7 = specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream createOutputStream(java.io.File)>($r6);

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream> = $r7;

        $r8 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke r2.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r8);

        r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem> = 0;

        $r10 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList>;

        $r9 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r9);

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean tempFileFailed> = 1;

        $r13 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        if $r13 == r2 goto label7;

        $r14 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r14.<java.io.OutputStream: void close()>();

     label7:
        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void deleteTempFile()>();

        r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem> = 1;

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream> = r2;

     label8:
        return;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    public java.io.File getTempFile()
    {
        org.apache.cxf.io.CachedOutputStream r0;
        java.io.File $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        byte[] $r17;
        org.apache.cxf.io.CipherPair $r6;
        java.io.ByteArrayInputStream $r14, $r20;
        java.io.PipedInputStream $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r19;
        java.io.FileNotFoundException $r21;
        java.util.List $r3;
        java.lang.StringBuilder $r23, $r24, $r26;
        org.apache.cxf.io.CachedOutputStream$1 $r1;
        org.apache.cxf.io.CachedOutputStream$2 $r5;
        java.io.ByteArrayOutputStream $r16;
        javax.crypto.Cipher $r7;
        java.lang.String $r4, $r25, $r27;
        java.io.OutputStream $r8, $r9, $r10, $r12, $r15, $r18;
        java.io.IOException $r22;
        java.io.PipedOutputStream $r13;
        java.io.File $r2;
        org.apache.cxf.io.CachedOutputStream r0;
        java.io.InputStream r28;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void flush()>();

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 == 0 goto label4;

        $r8 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z1 = $r8 instanceof org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        if $z1 == 0 goto label1;

        $r18 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r19 = (org.apache.cxf.helpers.LoadingByteArrayOutputStream) $r18;

        $r20 = virtualinvoke $r19.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: java.io.ByteArrayInputStream createInputStream()>();

        return $r20;

     label1:
        $r9 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z2 = $r9 instanceof java.io.ByteArrayOutputStream;

        if $z2 == 0 goto label2;

        $r14 = new java.io.ByteArrayInputStream;

        $r15 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r16 = (java.io.ByteArrayOutputStream) $r15;

        $r17 = virtualinvoke $r16.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[])>($r17);

        return $r14;

     label2:
        $r10 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $z3 = $r10 instanceof java.io.PipedOutputStream;

        if $z3 == 0 goto label3;

        $r11 = new java.io.PipedInputStream;

        $r12 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        $r13 = (java.io.PipedOutputStream) $r12;

        specialinvoke $r11.<java.io.PipedInputStream: void <init>(java.io.PipedOutputStream)>($r13);

        return $r11;

     label3:
        return null;

     label4:
        $r1 = new org.apache.cxf.io.CachedOutputStream$1;

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        specialinvoke $r1.<org.apache.cxf.io.CachedOutputStream$1: void <init>(org.apache.cxf.io.CachedOutputStream,java.io.File)>(r0, $r2);

        r28 = $r1;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation>;

        if $r4 == null goto label5;

        $r5 = new org.apache.cxf.io.CachedOutputStream$2;

        $r6 = r0.<org.apache.cxf.io.CachedOutputStream: org.apache.cxf.io.CipherPair ciphers>;

        $r7 = virtualinvoke $r6.<org.apache.cxf.io.CipherPair: javax.crypto.Cipher getDecryptor()>();

        specialinvoke $r5.<org.apache.cxf.io.CachedOutputStream$2: void <init>(org.apache.cxf.io.CachedOutputStream,java.io.InputStream,javax.crypto.Cipher)>(r0, $r1, $r7);

        r28 = $r5;

     label5:
        return r28;

     label6:
        $r21 := @caughtexception;

        $r22 = new java.io.IOException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cached file was deleted, ");

        $r25 = virtualinvoke $r21.<java.io.FileNotFoundException: java.lang.String toString()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r22;

        catch java.io.FileNotFoundException from label4 to label5 with label6;
    }

    private synchronized void deleteTempFile()
    {
        org.apache.cxf.io.CachedOutputStream r0;
        java.io.File $r1, r2;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        $r1 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        if $r1 == null goto label1;

        r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile> = null;

        staticinvoke <org.apache.cxf.helpers.FileUtils: void delete(java.io.File)>(r2);

     label1:
        return;
    }

    private void maybeDeleteTempFile(java.lang.Object)
    {
        java.io.OutputStream $r5, $r6;
        org.apache.cxf.helpers.LoadingByteArrayOutputStream $r8;
        java.io.File $r3;
        java.lang.Exception $r7;
        java.util.List $r2, $r4;
        java.lang.Object r1;
        org.apache.cxf.io.CachedOutputStream r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $z0 = r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem>;

        if $z0 != 0 goto label5;

        $r3 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.File tempFile>;

        if $r3 == null goto label5;

        $r4 = r0.<org.apache.cxf.io.CachedOutputStream: java.util.List streamList>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        $z2 = r0.<org.apache.cxf.io.CachedOutputStream: boolean allowDeleteOfFile>;

        if $z2 == 0 goto label5;

        $r5 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        if $r5 == null goto label4;

     label1:
        $r6 = r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream>;

        virtualinvoke $r6.<java.io.OutputStream: void close()>();

        virtualinvoke r0.<org.apache.cxf.io.CachedOutputStream: void postClose()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void deleteTempFile()>();

        $r8 = new org.apache.cxf.helpers.LoadingByteArrayOutputStream;

        specialinvoke $r8.<org.apache.cxf.helpers.LoadingByteArrayOutputStream: void <init>(int)>(1024);

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.OutputStream currentStream> = $r8;

        r0.<org.apache.cxf.io.CachedOutputStream: boolean inmem> = 1;

     label5:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setOutputDir(java.io.File) throws java.io.IOException
    {
        org.apache.cxf.io.CachedOutputStream r0;
        java.io.File r1;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.io.File;

        r0.<org.apache.cxf.io.CachedOutputStream: java.io.File outputDir> = r1;

        return;
    }

    public void setThreshold(long)
    {
        long l0;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        l0 := @parameter0: long;

        r0.<org.apache.cxf.io.CachedOutputStream: long threshold> = l0;

        return;
    }

    public void setMaxSize(long)
    {
        long l0;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        l0 := @parameter0: long;

        r0.<org.apache.cxf.io.CachedOutputStream: long maxSize> = l0;

        return;
    }

    public void setCipherTransformation(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation> = r1;

        return;
    }

    public static void setDefaultMaxSize(long)
    {
        long l1;
        java.lang.String $r0;
        byte $b0;

        l1 := @parameter0: long;

        $b0 = l1 cmp -1L;

        if $b0 != 0 goto label1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.cxf.io.CachedOutputStream.MaxSize", "-1");

        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label1:
        <org.apache.cxf.io.CachedOutputStream: long defaultMaxSize> = l1;

        return;
    }

    public static void setDefaultThreshold(int)
    {
        int $i0, i1, $i3;
        java.lang.String $r0;

        i1 := @parameter0: int;

        $i3 = (int) -1;

        if i1 != $i3 goto label1;

        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.cxf.io.CachedOutputStream.Threshold", "-1");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        i1 = $i0;

        if $i0 > 0 goto label1;

        i1 = 65536;

     label1:
        <org.apache.cxf.io.CachedOutputStream: int defaultThreshold> = i1;

        return;
    }

    public static void setDefaultCipherTransformation(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("org.apache.cxf.io.CachedOutputStream.CipherTransformation");

     label1:
        <org.apache.cxf.io.CachedOutputStream: java.lang.String defaultCipherTransformation> = r0;

        return;
    }

    private java.io.OutputStream createOutputStream(java.io.File) throws java.io.IOException
    {
        java.io.FileOutputStream $r1;
        java.io.IOException $r12;
        java.io.FilterOutputStream r14;
        javax.crypto.Cipher $r8;
        java.io.File r2;
        org.apache.cxf.io.CipherPair $r5, $r7, $r9;
        java.io.BufferedOutputStream $r0;
        java.security.GeneralSecurityException $r11;
        java.lang.String $r4, $r10, $r13;
        org.apache.cxf.io.CachedOutputStream r3;
        org.apache.cxf.io.CachedOutputStream$3 $r6;

        r3 := @this: org.apache.cxf.io.CachedOutputStream;

        r2 := @parameter0: java.io.File;

        $r0 = new java.io.BufferedOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r1);

        r14 = $r0;

        $r4 = r3.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation>;

        if $r4 == null goto label5;

     label1:
        $r5 = r3.<org.apache.cxf.io.CachedOutputStream: org.apache.cxf.io.CipherPair ciphers>;

        if $r5 != null goto label2;

        $r9 = new org.apache.cxf.io.CipherPair;

        $r10 = r3.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation>;

        specialinvoke $r9.<org.apache.cxf.io.CipherPair: void <init>(java.lang.String)>($r10);

        r3.<org.apache.cxf.io.CachedOutputStream: org.apache.cxf.io.CipherPair ciphers> = $r9;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r11.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r11);

        throw $r12;

     label4:
        $r6 = new org.apache.cxf.io.CachedOutputStream$3;

        $r7 = r3.<org.apache.cxf.io.CachedOutputStream: org.apache.cxf.io.CipherPair ciphers>;

        $r8 = virtualinvoke $r7.<org.apache.cxf.io.CipherPair: javax.crypto.Cipher getEncryptor()>();

        specialinvoke $r6.<org.apache.cxf.io.CachedOutputStream$3: void <init>(org.apache.cxf.io.CachedOutputStream,java.io.OutputStream,javax.crypto.Cipher)>(r3, $r0, $r8);

        r14 = $r6;

     label5:
        return r14;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    private java.io.InputStream createInputStream(java.io.File) throws java.io.IOException
    {
        java.io.FileInputStream $r0;
        javax.crypto.Cipher $r6;
        java.io.File r1;
        org.apache.cxf.io.CipherPair $r5;
        org.apache.cxf.io.CachedOutputStream$4 $r4;
        java.lang.String $r3;
        org.apache.cxf.io.CachedOutputStream r2;
        java.io.InputStream r7;

        r2 := @this: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

        r7 = $r0;

        $r3 = r2.<org.apache.cxf.io.CachedOutputStream: java.lang.String cipherTransformation>;

        if $r3 == null goto label1;

        $r4 = new org.apache.cxf.io.CachedOutputStream$4;

        $r5 = r2.<org.apache.cxf.io.CachedOutputStream: org.apache.cxf.io.CipherPair ciphers>;

        $r6 = virtualinvoke $r5.<org.apache.cxf.io.CipherPair: javax.crypto.Cipher getDecryptor()>();

        specialinvoke $r4.<org.apache.cxf.io.CachedOutputStream$4: void <init>(org.apache.cxf.io.CachedOutputStream,java.io.InputStream,javax.crypto.Cipher)>(r2, $r0, $r6);

        r7 = $r4;

     label1:
        return r7;
    }

    static void access$000(org.apache.cxf.io.CachedOutputStream, java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.cxf.io.CachedOutputStream r0;

        r0 := @parameter0: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.cxf.io.CachedOutputStream: void maybeDeleteTempFile(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        int $i1;
        java.lang.String $r0;
        java.io.File $r2;
        boolean $z0, $z1;

        $r0 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("org.apache.cxf.io.CachedOutputStream.OutputDirectory");

        if $r0 == null goto label3;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        <org.apache.cxf.io.CachedOutputStream: java.io.File DEFAULT_TEMP_DIR> = $r2;

        goto label2;

     label1:
        <org.apache.cxf.io.CachedOutputStream: java.io.File DEFAULT_TEMP_DIR> = null;

     label2:
        goto label4;

     label3:
        <org.apache.cxf.io.CachedOutputStream: java.io.File DEFAULT_TEMP_DIR> = null;

     label4:
        $i1 = (int) -1;

        staticinvoke <org.apache.cxf.io.CachedOutputStream: void setDefaultThreshold(int)>($i1);

        staticinvoke <org.apache.cxf.io.CachedOutputStream: void setDefaultMaxSize(long)>(-1L);

        staticinvoke <org.apache.cxf.io.CachedOutputStream: void setDefaultCipherTransformation(java.lang.String)>(null);

        return;
    }
}
