class com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    private java.util.Deque stack;

    void <init>(java.util.Deque)
    {
        java.util.Deque r1;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher;

        r1 := @parameter0: java.util.Deque;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher: java.util.Deque stack> = r1;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.graph.Node $r3;
        java.util.Deque $r2;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Pusher: java.util.Deque stack>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        interfaceinvoke $r2.<java.util.Deque: void push(java.lang.Object)>($r3);

        return;
    }
}
