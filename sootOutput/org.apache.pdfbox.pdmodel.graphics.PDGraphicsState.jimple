public class org.apache.pdfbox.pdmodel.graphics.PDGraphicsState extends java.lang.Object implements java.lang.Cloneable
{
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.pdfbox.util.Matrix currentTransformationMatrix;
    private org.apache.pdfbox.pdmodel.graphics.color.PDColorState strokingColor;
    private org.apache.pdfbox.pdmodel.graphics.color.PDColorState nonStrokingColor;
    private org.apache.pdfbox.pdmodel.text.PDTextState textState;
    private double lineWidth;
    private int lineCap;
    private int lineJoin;
    private double miterLimit;
    private org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern;
    private java.lang.String renderingIntent;
    private boolean strokeAdjustment;
    private double alphaConstants;
    private double nonStrokingAlphaConstants;
    private boolean alphaSource;
    private boolean overprint;
    private double overprintMode;
    private double flatness;
    private double smoothness;
    private java.awt.geom.GeneralPath currentClippingPath;

    public void <init>()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.util.Matrix $r1;
        org.apache.pdfbox.pdmodel.text.PDTextState $r4;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r2, $r3;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.pdfbox.util.Matrix;

        specialinvoke $r1.<org.apache.pdfbox.util.Matrix: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> = $r1;

        $r2 = new org.apache.pdfbox.pdmodel.graphics.color.PDColorState;

        specialinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState strokingColor> = $r2;

        $r3 = new org.apache.pdfbox.pdmodel.graphics.color.PDColorState;

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState nonStrokingColor> = $r3;

        $r4 = new org.apache.pdfbox.pdmodel.text.PDTextState;

        specialinvoke $r4.<org.apache.pdfbox.pdmodel.text.PDTextState: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState textState> = $r4;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double lineWidth> = 0.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineCap> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineJoin> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double miterLimit> = 0.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean strokeAdjustment> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double alphaConstants> = 1.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double nonStrokingAlphaConstants> = 1.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean alphaSource> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean overprint> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double overprintMode> = 0.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double flatness> = 1.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double smoothness> = 0.0;

        return;
    }

    public void <init>(org.apache.pdfbox.pdmodel.common.PDRectangle)
    {
        java.awt.Rectangle $r6;
        byte $b0, $b1;
        org.apache.pdfbox.pdmodel.text.PDTextState $r4;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.common.PDRectangle r7;
        java.awt.Dimension $r8;
        org.apache.pdfbox.util.Matrix $r1, $r9, $r10, $r11;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.awt.geom.GeneralPath $r5;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r2, $r3;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r7 := @parameter0: org.apache.pdfbox.pdmodel.common.PDRectangle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.pdfbox.util.Matrix;

        specialinvoke $r1.<org.apache.pdfbox.util.Matrix: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> = $r1;

        $r2 = new org.apache.pdfbox.pdmodel.graphics.color.PDColorState;

        specialinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState strokingColor> = $r2;

        $r3 = new org.apache.pdfbox.pdmodel.graphics.color.PDColorState;

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState nonStrokingColor> = $r3;

        $r4 = new org.apache.pdfbox.pdmodel.text.PDTextState;

        specialinvoke $r4.<org.apache.pdfbox.pdmodel.text.PDTextState: void <init>()>();

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState textState> = $r4;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double lineWidth> = 0.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineCap> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineJoin> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double miterLimit> = 0.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean strokeAdjustment> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double alphaConstants> = 1.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double nonStrokingAlphaConstants> = 1.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean alphaSource> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean overprint> = 0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double overprintMode> = 0.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double flatness> = 1.0;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double smoothness> = 0.0;

        $r5 = new java.awt.geom.GeneralPath;

        $r6 = new java.awt.Rectangle;

        $r8 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.PDRectangle: java.awt.Dimension createDimension()>();

        specialinvoke $r6.<java.awt.Rectangle: void <init>(java.awt.Dimension)>($r8);

        specialinvoke $r5.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r6);

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath> = $r5;

        $f0 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        $f5 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>();

        $b1 = $f5 cmpl 0.0F;

        if $b1 == 0 goto label2;

     label1:
        $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix>;

        $f1 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>();

        $f2 = neg $f1;

        $f3 = virtualinvoke r7.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>();

        $f4 = neg $f3;

        $r10 = staticinvoke <org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix getTranslatingInstance(float,float)>($f2, $f4);

        $r11 = virtualinvoke $r9.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix multiply(org.apache.pdfbox.util.Matrix)>($r10);

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> = $r11;

     label2:
        return;
    }

    public org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.util.Matrix $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix>;

        return $r1;
    }

    public void setCurrentTransformationMatrix(org.apache.pdfbox.util.Matrix)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.util.Matrix r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r1 := @parameter0: org.apache.pdfbox.util.Matrix;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> = r1;

        return;
    }

    public double getLineWidth()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double lineWidth>;

        return $d0;
    }

    public void setLineWidth(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double lineWidth> = d0;

        return;
    }

    public int getLineCap()
    {
        int $i0;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $i0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineCap>;

        return $i0;
    }

    public void setLineCap(int)
    {
        int i0;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        i0 := @parameter0: int;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineCap> = i0;

        return;
    }

    public int getLineJoin()
    {
        int $i0;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $i0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineJoin>;

        return $i0;
    }

    public void setLineJoin(int)
    {
        int i0;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        i0 := @parameter0: int;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: int lineJoin> = i0;

        return;
    }

    public double getMiterLimit()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double miterLimit>;

        return $d0;
    }

    public void setMiterLimit(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double miterLimit> = d0;

        return;
    }

    public boolean isStrokeAdjustment()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $z0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean strokeAdjustment>;

        return $z0;
    }

    public void setStrokeAdjustment(boolean)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean strokeAdjustment> = z0;

        return;
    }

    public double getAlphaConstants()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double alphaConstants>;

        return $d0;
    }

    public void setAlphaConstants(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double alphaConstants> = d0;

        return;
    }

    public double getNonStrokeAlphaConstants()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double nonStrokingAlphaConstants>;

        return $d0;
    }

    public void setNonStrokeAlphaConstants(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double nonStrokingAlphaConstants> = d0;

        return;
    }

    public boolean isAlphaSource()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $z0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean alphaSource>;

        return $z0;
    }

    public void setAlphaSource(boolean)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean alphaSource> = z0;

        return;
    }

    public boolean isOverprint()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $z0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean overprint>;

        return $z0;
    }

    public void setOverprint(boolean)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: boolean overprint> = z0;

        return;
    }

    public double getOverprintMode()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double overprintMode>;

        return $d0;
    }

    public void setOverprintMode(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double overprintMode> = d0;

        return;
    }

    public double getFlatness()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double flatness>;

        return $d0;
    }

    public void setFlatness(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double flatness> = d0;

        return;
    }

    public double getSmoothness()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double smoothness>;

        return $d0;
    }

    public void setSmoothness(double)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        double d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        d0 := @parameter0: double;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double smoothness> = d0;

        return;
    }

    public org.apache.pdfbox.pdmodel.text.PDTextState getTextState()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.text.PDTextState $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState textState>;

        return $r1;
    }

    public void setTextState(org.apache.pdfbox.pdmodel.text.PDTextState)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.text.PDTextState r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.text.PDTextState;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState textState> = r1;

        return;
    }

    public org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern getLineDashPattern()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern>;

        return $r1;
    }

    public void setLineDashPattern(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r1 := @parameter0: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern> = r1;

        return;
    }

    public java.lang.String getRenderingIntent()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        java.lang.String $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.lang.String renderingIntent>;

        return $r1;
    }

    public void setRenderingIntent(java.lang.String)
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        java.lang.String r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.lang.String renderingIntent> = r1;

        return;
    }

    public java.lang.Object clone()
    {
        java.lang.CloneNotSupportedException $r21;
        org.apache.pdfbox.pdmodel.text.PDTextState $r2, $r4;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0, r23;
        org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern $r13, $r18, $r20;
        org.apache.pdfbox.util.Matrix $r5, $r6;
        java.lang.Object $r1, $r3, $r8, $r11, $r16, $r19;
        org.apache.commons.logging.Log $r22;
        java.awt.geom.GeneralPath $r14, $r15, $r17;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r23 = null;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r23 = (org.apache.pdfbox.pdmodel.graphics.PDGraphicsState) $r1;

        $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.text.PDTextState textState>;

        $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.text.PDTextState: java.lang.Object clone()>();

        $r4 = (org.apache.pdfbox.pdmodel.text.PDTextState) $r3;

        virtualinvoke r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setTextState(org.apache.pdfbox.pdmodel.text.PDTextState)>($r4);

        $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix>;

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix copy()>();

        virtualinvoke r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setCurrentTransformationMatrix(org.apache.pdfbox.util.Matrix)>($r6);

        $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState strokingColor>;

        $r8 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.lang.Object clone()>();

        $r9 = (org.apache.pdfbox.pdmodel.graphics.color.PDColorState) $r8;

        r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState strokingColor> = $r9;

        $r10 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState nonStrokingColor>;

        $r11 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.graphics.color.PDColorState: java.lang.Object clone()>();

        $r12 = (org.apache.pdfbox.pdmodel.graphics.color.PDColorState) $r11;

        r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState nonStrokingColor> = $r12;

        $r13 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern>;

        if $r13 == null goto label2;

        $r18 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern>;

        $r19 = virtualinvoke $r18.<org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern: java.lang.Object clone()>();

        $r20 = (org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern) $r19;

        virtualinvoke r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setLineDashPattern(org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern)>($r20);

     label2:
        $r14 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath>;

        if $r14 == null goto label3;

        $r15 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath>;

        $r16 = virtualinvoke $r15.<java.awt.geom.GeneralPath: java.lang.Object clone()>();

        $r17 = (java.awt.geom.GeneralPath) $r16;

        virtualinvoke r23.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: void setCurrentClippingPath(java.awt.Shape)>($r17);

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        $r22 = <org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r21, $r21);

     label5:
        return r23;

        catch java.lang.CloneNotSupportedException from label1 to label3 with label4;
    }

    public org.apache.pdfbox.pdmodel.graphics.color.PDColorState getStrokingColor()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState strokingColor>;

        return $r1;
    }

    public org.apache.pdfbox.pdmodel.graphics.color.PDColorState getNonStrokingColor()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorState $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColorState nonStrokingColor>;

        return $r1;
    }

    public void setCurrentClippingPath(java.awt.Shape)
    {
        java.awt.Shape r0;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r1;
        java.awt.geom.GeneralPath $r2, $r3, $r4;
        boolean $z0;

        r1 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        r0 := @parameter0: java.awt.Shape;

        if r0 == null goto label2;

        $z0 = r0 instanceof java.awt.geom.GeneralPath;

        if $z0 == 0 goto label1;

        $r4 = (java.awt.geom.GeneralPath) r0;

        r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath> = $r4;

        goto label3;

     label1:
        $r2 = new java.awt.geom.GeneralPath;

        specialinvoke $r2.<java.awt.geom.GeneralPath: void <init>()>();

        r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath> = $r2;

        $r3 = r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath>;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>(r0, 0);

        goto label3;

     label2:
        r1.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath> = null;

     label3:
        return;
    }

    public java.awt.Shape getCurrentClippingPath()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        java.awt.geom.GeneralPath $r1;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: java.awt.geom.GeneralPath currentClippingPath>;

        return $r1;
    }

    public java.awt.Composite getStrokeJavaComposite()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        java.awt.AlphaComposite $r1;
        float $f0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double alphaConstants>;

        $f0 = (float) $d0;

        $r1 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $f0);

        return $r1;
    }

    public java.awt.Composite getNonStrokeJavaComposite()
    {
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState r0;
        java.awt.AlphaComposite $r1;
        float $f0;
        double $d0;

        r0 := @this: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState;

        $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: double nonStrokingAlphaConstants>;

        $f0 = (float) $d0;

        $r1 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, $f0);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdmodel/graphics/PDGraphicsState;");

        <org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
