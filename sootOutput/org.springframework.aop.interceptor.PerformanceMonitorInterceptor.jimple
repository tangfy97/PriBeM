public class org.springframework.aop.interceptor.PerformanceMonitorInterceptor extends org.springframework.aop.interceptor.AbstractMonitoringInterceptor
{

    public void <init>()
    {
        org.springframework.aop.interceptor.PerformanceMonitorInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.PerformanceMonitorInterceptor;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractMonitoringInterceptor: void <init>()>();

        return;
    }

    public void <init>(boolean)
    {
        org.springframework.aop.interceptor.PerformanceMonitorInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.aop.interceptor.PerformanceMonitorInterceptor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractMonitoringInterceptor: void <init>()>();

        virtualinvoke r0.<org.springframework.aop.interceptor.PerformanceMonitorInterceptor: void setUseDynamicLogger(boolean)>(z0);

        return;
    }

    protected java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log) throws java.lang.Throwable
    {
        java.lang.Throwable $r7;
        org.springframework.util.StopWatch $r3;
        org.aopalliance.intercept.MethodInvocation r1;
        org.springframework.aop.interceptor.PerformanceMonitorInterceptor r0;
        java.lang.Object $r4;
        org.apache.commons.logging.Log r5;
        java.lang.String $r2, $r6, $r8;

        r0 := @this: org.springframework.aop.interceptor.PerformanceMonitorInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r5 := @parameter1: org.apache.commons.logging.Log;

        $r2 = virtualinvoke r0.<org.springframework.aop.interceptor.PerformanceMonitorInterceptor: java.lang.String createInvocationTraceName(org.aopalliance.intercept.MethodInvocation)>(r1);

        $r3 = new org.springframework.util.StopWatch;

        specialinvoke $r3.<org.springframework.util.StopWatch: void <init>(java.lang.String)>($r2);

        virtualinvoke $r3.<org.springframework.util.StopWatch: void start(java.lang.String)>($r2);

     label1:
        $r4 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label2:
        virtualinvoke $r3.<org.springframework.util.StopWatch: void stop()>();

        $r6 = virtualinvoke $r3.<org.springframework.util.StopWatch: java.lang.String shortSummary()>();

        interfaceinvoke r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r6);

        return $r4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r3.<org.springframework.util.StopWatch: void stop()>();

        $r8 = virtualinvoke $r3.<org.springframework.util.StopWatch: java.lang.String shortSummary()>();

        interfaceinvoke r5.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
