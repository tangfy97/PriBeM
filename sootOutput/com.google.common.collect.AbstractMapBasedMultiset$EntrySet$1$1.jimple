class com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1 extends com.google.common.collect.Multisets$AbstractEntry
{
    final java.util.Map$Entry val$mapEntry;
    final com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1 this$2;

    void <init>(com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1, java.util.Map$Entry)
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1 r0;
        java.util.Map$Entry r2;
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1 r1;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1;

        r1 := @parameter0: com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1;

        r2 := @parameter1: java.util.Map$Entry;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1: com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1 this$2> = r1;

        r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1: java.util.Map$Entry val$mapEntry> = r2;

        specialinvoke r0.<com.google.common.collect.Multisets$AbstractEntry: void <init>()>();

        return;
    }

    public java.lang.Object getElement()
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1 r0;
        java.util.Map$Entry $r1;
        java.lang.Object $r2;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1: java.util.Map$Entry val$mapEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r2;
    }

    public int getCount()
    {
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet $r5;
        java.util.Map$Entry $r1;
        com.google.common.collect.AbstractMapBasedMultiset $r6;
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1 $r4;
        java.util.concurrent.atomic.AtomicInteger $r3, r10;
        java.util.Map $r7;
        com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1 r0;
        int $i0, i1;
        java.lang.Object $r2, $r8, $r9;

        r0 := @this: com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1;

        $r1 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1: java.util.Map$Entry val$mapEntry>;

        $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.util.concurrent.atomic.AtomicInteger) $r2;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = $i0;

        if $i0 != 0 goto label1;

        $r4 = r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1: com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1 this$2>;

        $r5 = $r4.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1: com.google.common.collect.AbstractMapBasedMultiset$EntrySet this$1>;

        $r6 = $r5.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet: com.google.common.collect.AbstractMapBasedMultiset this$0>;

        $r7 = staticinvoke <com.google.common.collect.AbstractMapBasedMultiset: java.util.Map access$100(com.google.common.collect.AbstractMapBasedMultiset)>($r6);

        $r8 = virtualinvoke r0.<com.google.common.collect.AbstractMapBasedMultiset$EntrySet$1$1: java.lang.Object getElement()>();

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r10 = (java.util.concurrent.atomic.AtomicInteger) $r9;

        if r10 == null goto label1;

        i1 = virtualinvoke r10.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label1:
        return i1;
    }
}
