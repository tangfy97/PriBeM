public abstract class com.hp.hpl.jena.mem.GraphTripleStoreBase extends java.lang.Object implements com.hp.hpl.jena.graph.impl.TripleStore
{
    protected final com.hp.hpl.jena.graph.Graph parent;
    protected com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects;
    protected com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates;
    protected com.hp.hpl.jena.mem.NodeToTriplesMapBase objects;
    private static final com.hp.hpl.jena.util.iterator.Map1 expectNode;

    protected void <init>(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.mem.NodeToTriplesMapBase, com.hp.hpl.jena.mem.NodeToTriplesMapBase, com.hp.hpl.jena.mem.NodeToTriplesMapBase)
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.graph.Graph r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter1: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r4 := @parameter2: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        r3 := @parameter3: com.hp.hpl.jena.mem.NodeToTriplesMapBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.graph.Graph parent> = r1;

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects> = r2;

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects> = r3;

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates> = r4;

        return;
    }

    public void close()
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects> = null;

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates> = null;

        r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects> = null;

        return;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean add(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        virtualinvoke $r3.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean add(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        virtualinvoke $r4.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean add(com.hp.hpl.jena.graph.Triple)>(r1);

     label1:
        return;
    }

    public void delete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean remove(com.hp.hpl.jena.graph.Triple)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        virtualinvoke $r3.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean remove(com.hp.hpl.jena.graph.Triple)>(r1);

        $r4 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        virtualinvoke $r4.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean remove(com.hp.hpl.jena.graph.Triple)>(r1);

     label1:
        return;
    }

    public void clear()
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        $r1 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        virtualinvoke $r1.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: void clear()>();

        $r2 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        virtualinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: void clear()>();

        $r3 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        virtualinvoke $r3.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: void clear()>();

        return;
    }

    public int size()
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        int $i0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r1;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        $r1 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        $r1 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean isEmpty()>();

        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listSubjects()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.util.Iterator $r2;
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r1;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        $r1 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: java.util.Iterator domain()>();

        $r3 = specialinvoke r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.util.iterator.ExtendedIterator expectOnlyNodes(java.util.Iterator)>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listPredicates()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.util.Iterator $r2;
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r1;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        $r1 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: java.util.Iterator domain()>();

        $r3 = specialinvoke r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.util.iterator.ExtendedIterator expectOnlyNodes(java.util.Iterator)>($r2);

        return $r3;
    }

    private com.hp.hpl.jena.util.iterator.ExtendedIterator expectOnlyNodes(java.util.Iterator)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.util.Iterator r0;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r1;
        com.hp.hpl.jena.mem.GraphTripleStoreBase r4;
        com.hp.hpl.jena.util.iterator.Map1 $r2;

        r4 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>(r0);

        $r2 = <com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.util.iterator.Map1 expectNode>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator mapWith(com.hp.hpl.jena.util.iterator.Map1)>($r2);

        return $r3;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listObjects()
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase$2 $r0;
        java.util.Iterator $r3;
        com.hp.hpl.jena.mem.GraphTripleStoreBase r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r2;

        r1 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        $r0 = new com.hp.hpl.jena.mem.GraphTripleStoreBase$2;

        $r2 = r1.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: java.util.Iterator domain()>();

        specialinvoke $r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase$2: void <init>(com.hp.hpl.jena.mem.GraphTripleStoreBase,java.util.Iterator)>(r1, $r3);

        return $r0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean containsBySameValueAs(com.hp.hpl.jena.graph.Triple)>(r1);

        return $z0;
    }

    public boolean containsByEquality(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase r0;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: boolean contains(com.hp.hpl.jena.graph.Triple)>(r1);

        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.TripleMatch r0;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.graph.Triple $r1;
        com.hp.hpl.jena.mem.GraphTripleStoreBase r6;
        com.hp.hpl.jena.graph.Graph $r8, $r15, $r22, $r29;
        com.hp.hpl.jena.mem.StoreTripleIterator $r5, $r13, $r20, $r27;
        com.hp.hpl.jena.mem.NodeToTriplesMapBase $r7, $r10, $r11, $r12, $r14, $r17, $r18, $r19, $r21, $r24, $r25, $r26, $r28, $r31, $r32, $r33;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r9, $r16, $r23, $r30;

        r6 := @this: com.hp.hpl.jena.mem.GraphTripleStoreBase;

        r0 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Triple asTriple()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r4 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z0 == 0 goto label1;

        $r27 = new com.hp.hpl.jena.mem.StoreTripleIterator;

        $r29 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.graph.Graph parent>;

        $r28 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r30 = virtualinvoke $r28.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r2, $r3);

        $r33 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r32 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        $r31 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        specialinvoke $r27.<com.hp.hpl.jena.mem.StoreTripleIterator: void <init>(com.hp.hpl.jena.graph.Graph,java.util.Iterator,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase)>($r29, $r30, $r33, $r32, $r31);

        return $r27;

     label1:
        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z1 == 0 goto label2;

        $r20 = new com.hp.hpl.jena.mem.StoreTripleIterator;

        $r22 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.graph.Graph parent>;

        $r21 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        $r23 = virtualinvoke $r21.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r4, $r2);

        $r26 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        $r25 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r24 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        specialinvoke $r20.<com.hp.hpl.jena.mem.StoreTripleIterator: void <init>(com.hp.hpl.jena.graph.Graph,java.util.Iterator,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase)>($r22, $r23, $r26, $r25, $r24);

        return $r20;

     label2:
        $z2 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isConcrete()>();

        if $z2 == 0 goto label3;

        $r13 = new com.hp.hpl.jena.mem.StoreTripleIterator;

        $r15 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.graph.Graph parent>;

        $r14 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        $r16 = virtualinvoke $r14.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.util.iterator.ExtendedIterator iterator(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4);

        $r19 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        $r18 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r17 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        specialinvoke $r13.<com.hp.hpl.jena.mem.StoreTripleIterator: void <init>(com.hp.hpl.jena.graph.Graph,java.util.Iterator,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase)>($r15, $r16, $r19, $r18, $r17);

        return $r13;

     label3:
        $r5 = new com.hp.hpl.jena.mem.StoreTripleIterator;

        $r8 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.graph.Graph parent>;

        $r7 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r9 = virtualinvoke $r7.<com.hp.hpl.jena.mem.NodeToTriplesMapBase: com.hp.hpl.jena.util.iterator.ExtendedIterator iterateAll()>();

        $r12 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase subjects>;

        $r11 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase predicates>;

        $r10 = r6.<com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.mem.NodeToTriplesMapBase objects>;

        specialinvoke $r5.<com.hp.hpl.jena.mem.StoreTripleIterator: void <init>(com.hp.hpl.jena.graph.Graph,java.util.Iterator,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase,com.hp.hpl.jena.mem.NodeToTriplesMapBase)>($r8, $r9, $r12, $r11, $r10);

        return $r5;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.mem.GraphTripleStoreBase$1 $r0;

        $r0 = new com.hp.hpl.jena.mem.GraphTripleStoreBase$1;

        specialinvoke $r0.<com.hp.hpl.jena.mem.GraphTripleStoreBase$1: void <init>()>();

        <com.hp.hpl.jena.mem.GraphTripleStoreBase: com.hp.hpl.jena.util.iterator.Map1 expectNode> = $r0;

        return;
    }
}
