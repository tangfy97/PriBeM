public class org.springframework.beans.factory.support.PropertiesBeanDefinitionReader extends org.springframework.beans.factory.support.AbstractBeanDefinitionReader
{
    public static final java.lang.String TRUE_VALUE;
    public static final java.lang.String SEPARATOR;
    public static final java.lang.String CLASS_KEY;
    public static final java.lang.String PARENT_KEY;
    public static final java.lang.String SCOPE_KEY;
    public static final java.lang.String SINGLETON_KEY;
    public static final java.lang.String ABSTRACT_KEY;
    public static final java.lang.String LAZY_INIT_KEY;
    public static final java.lang.String REF_SUFFIX;
    public static final java.lang.String REF_PREFIX;
    public static final java.lang.String CONSTRUCTOR_ARG_PREFIX;
    private java.lang.String defaultParentBean;
    private org.springframework.util.PropertiesPersister propertiesPersister;

    public void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        org.springframework.util.DefaultPropertiesPersister $r2;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinitionReader: void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry)>(r1);

        $r2 = new org.springframework.util.DefaultPropertiesPersister;

        specialinvoke $r2.<org.springframework.util.DefaultPropertiesPersister: void <init>()>();

        r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.util.PropertiesPersister propertiesPersister> = $r2;

        return;
    }

    public void setDefaultParentBean(java.lang.String)
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String defaultParentBean> = r1;

        return;
    }

    public java.lang.String getDefaultParentBean()
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String defaultParentBean>;

        return $r1;
    }

    public void setPropertiesPersister(org.springframework.util.PropertiesPersister)
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        org.springframework.util.PropertiesPersister r1, $r2;
        org.springframework.util.DefaultPropertiesPersister $r3;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: org.springframework.util.PropertiesPersister;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.util.DefaultPropertiesPersister;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.util.DefaultPropertiesPersister: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.util.PropertiesPersister propertiesPersister> = $r2;

        return;
    }

    public org.springframework.util.PropertiesPersister getPropertiesPersister()
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        org.springframework.util.PropertiesPersister $r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        $r1 = r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.util.PropertiesPersister propertiesPersister>;

        return $r1;
    }

    public int loadBeanDefinitions(org.springframework.core.io.Resource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        org.springframework.core.io.support.EncodedResource $r1;
        int $i0;
        org.springframework.core.io.Resource r2;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r2 := @parameter0: org.springframework.core.io.Resource;

        $r1 = new org.springframework.core.io.support.EncodedResource;

        specialinvoke $r1.<org.springframework.core.io.support.EncodedResource: void <init>(org.springframework.core.io.Resource)>(r2);

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource,java.lang.String)>($r1, null);

        return $i0;
    }

    public int loadBeanDefinitions(org.springframework.core.io.Resource, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        org.springframework.core.io.support.EncodedResource $r1;
        int $i0;
        java.lang.String r3;
        org.springframework.core.io.Resource r2;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r2 := @parameter0: org.springframework.core.io.Resource;

        r3 := @parameter1: java.lang.String;

        $r1 = new org.springframework.core.io.support.EncodedResource;

        specialinvoke $r1.<org.springframework.core.io.support.EncodedResource: void <init>(org.springframework.core.io.Resource)>(r2);

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource,java.lang.String)>($r1, r3);

        return $i0;
    }

    public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        int $i0;
        org.springframework.core.io.support.EncodedResource r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: org.springframework.core.io.support.EncodedResource;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource,java.lang.String)>(r1, null);

        return $i0;
    }

    public int loadBeanDefinitions(org.springframework.core.io.support.EncodedResource, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        java.lang.Throwable $r19;
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r5;
        org.springframework.core.io.support.EncodedResource r1;
        int $i0;
        java.lang.String $r4, r7, $r9, $r12, $r18;
        org.springframework.core.io.Resource $r2, $r8, $r16;
        java.util.Properties $r0;
        java.io.IOException $r13;
        org.springframework.beans.factory.BeanDefinitionStoreException $r14;
        java.io.InputStreamReader $r11;
        org.springframework.util.PropertiesPersister $r6, $r10;
        java.lang.StringBuilder $r15, $r17;
        java.io.InputStream $r3;

        r5 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: org.springframework.core.io.support.EncodedResource;

        r7 := @parameter1: java.lang.String;

        $r0 = new java.util.Properties;

        specialinvoke $r0.<java.util.Properties: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $r3 = interfaceinvoke $r2.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

     label2:
        $r4 = virtualinvoke r1.<org.springframework.core.io.support.EncodedResource: java.lang.String getEncoding()>();

        if $r4 == null goto label3;

        $r10 = virtualinvoke r5.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.util.PropertiesPersister getPropertiesPersister()>();

        $r11 = new java.io.InputStreamReader;

        $r12 = virtualinvoke r1.<org.springframework.core.io.support.EncodedResource: java.lang.String getEncoding()>();

        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r3, $r12);

        interfaceinvoke $r10.<org.springframework.util.PropertiesPersister: void load(java.util.Properties,java.io.Reader)>($r0, $r11);

        goto label5;

     label3:
        $r6 = virtualinvoke r5.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.util.PropertiesPersister getPropertiesPersister()>();

        interfaceinvoke $r6.<org.springframework.util.PropertiesPersister: void load(java.util.Properties,java.io.InputStream)>($r0, $r3);

        goto label5;

     label4:
        $r19 := @caughtexception;

        virtualinvoke $r3.<java.io.InputStream: void close()>();

        throw $r19;

     label5:
        virtualinvoke $r3.<java.io.InputStream: void close()>();

        $r8 = virtualinvoke r1.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $r9 = interfaceinvoke $r8.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        $i0 = virtualinvoke r5.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int registerBeanDefinitions(java.util.Map,java.lang.String,java.lang.String)>($r0, r7, $r9);

     label6:
        return $i0;

     label7:
        $r13 := @caughtexception;

        $r14 = new org.springframework.beans.factory.BeanDefinitionStoreException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not parse properties from ");

        $r16 = virtualinvoke r1.<org.springframework.core.io.support.EncodedResource: org.springframework.core.io.Resource getResource()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.springframework.beans.factory.BeanDefinitionStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r13);

        throw $r14;

        catch java.lang.Throwable from label2 to label4 with label4;
        catch java.io.IOException from label1 to label6 with label7;
    }

    public int registerBeanDefinitions(java.util.ResourceBundle) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        int $i0;
        java.util.ResourceBundle r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: java.util.ResourceBundle;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int registerBeanDefinitions(java.util.ResourceBundle,java.lang.String)>(r1, null);

        return $i0;
    }

    public int registerBeanDefinitions(java.util.ResourceBundle, java.lang.String) throws org.springframework.beans.factory.BeanDefinitionStoreException
    {
        java.util.Enumeration $r2;
        java.util.HashMap $r0;
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r6;
        java.util.ResourceBundle r1;
        int $i0;
        java.lang.Object $r3, $r5;
        java.lang.String r4, r7;
        boolean $z0;

        r6 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: java.util.ResourceBundle;

        r7 := @parameter1: java.lang.String;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<java.util.ResourceBundle: java.util.Enumeration getKeys()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r5);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int registerBeanDefinitions(java.util.Map,java.lang.String)>($r0, r7);

        return $i0;
    }

    public int registerBeanDefinitions(java.util.Map) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        int $i0;
        java.util.Map r1;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: java.util.Map;

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int registerBeanDefinitions(java.util.Map,java.lang.String)>(r1, null);

        return $i0;
    }

    public int registerBeanDefinitions(java.util.Map, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r0;
        java.util.Map r1;
        int $i0;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String r2, $r5;

        r0 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Map ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke r0.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: int registerBeanDefinitions(java.util.Map,java.lang.String,java.lang.String)>(r1, r2, $r5);

        return $i0;
    }

    public int registerBeanDefinitions(java.util.Map, java.lang.String, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r15;
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r1;
        java.lang.StringBuilder $r10, $r11, $r18, $r23, $r24, $r28, $r29, $r32, $r34, $r35, $r36;
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r6;
        int $i0, $i1, i2, i3, $i5, $i7;
        java.lang.String r4, $r5, $r12, $r13, $r17, $r19, r20, $r25, $r30, r31;
        java.util.Iterator $r2;
        java.lang.IllegalArgumentException $r33;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r7, $r9, $r14, $r22;

        r6 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r0 := @parameter0: java.util.Map;

        r31 := @parameter1: java.lang.String;

        r20 := @parameter2: java.lang.String;

        if r31 != null goto label1;

        r31 = "";

     label1:
        i2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r3 instanceof java.lang.String;

        if $z0 != 0 goto label3;

        $r33 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal key [");

        $r28 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: only Strings allowed");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r33;

     label3:
        r4 = (java.lang.String) $r3;

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r31);

        if $z1 == 0 goto label8;

        $i0 = virtualinvoke r31.<java.lang.String: int length()>();

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("[");

        $i5 = (int) -1;

        if $i1 == $i5 goto label4;

        i3 = virtualinvoke $r5.<java.lang.String: int lastIndexOf(java.lang.String,int)>(".", $i1);

        goto label5;

     label4:
        i3 = virtualinvoke $r5.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

     label5:
        $i7 = (int) -1;

        if i3 == $i7 goto label7;

        $r13 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r14 = r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label6;

        $r22 = r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found bean name \'");

        $r23 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label6:
        $r15 = virtualinvoke r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        $z4 = interfaceinvoke $r15.<org.springframework.beans.factory.support.BeanDefinitionRegistry: boolean containsBeanDefinition(java.lang.String)>($r13);

        if $z4 != 0 goto label8;

        $r35 = new java.lang.StringBuilder;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r31);

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: void registerBeanDefinition(java.lang.String,java.util.Map,java.lang.String,java.lang.String)>($r13, r0, $r19, r20);

        i2 = i2 + 1;

        goto label8;

     label7:
        $r7 = r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label8;

        $r9 = r6.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid bean name and property [");

        $r10 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label8:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label2;

        return i2;
    }

    protected void registerBeanDefinition(java.lang.String, java.util.Map, java.lang.String, java.lang.String) throws org.springframework.beans.BeansException
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition $r75;
        java.util.Map r2;
        java.lang.LinkageError $r64;
        java.util.Set $r3;
        org.springframework.beans.factory.CannotLoadBeanClassException $r65, $r68;
        java.lang.StringBuilder $r9, $r12, $r58, $r60, $r61, $r62;
        java.lang.ClassLoader $r74;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r0;
        java.lang.String $r7, $r8, r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r25, $r27, $r28, $r30, $r32, $r33, $r36, $r38, $r39, $r40, $r42, $r43, $r44, $r46, $r48, $r49, $r50, $r52, $r54, r56, $r57, $r63, r66, r69, r70, r71, $r73;
        java.util.Map$Entry r72;
        org.springframework.beans.MutablePropertyValues $r1;
        java.lang.ClassNotFoundException $r67;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r76;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, $z15;
        org.springframework.beans.factory.config.RuntimeBeanReference $r29, $r34;
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Iterator $r4;
        java.lang.Object $r5, $r6, $r23, $r26, $r31, $r35, $r37, $r41, $r45, $r47, $r51, $r53;
        org.apache.commons.logging.Log $r55, $r59;

        r22 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r56 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        r10 := @parameter2: java.lang.String;

        r66 := @parameter3: java.lang.String;

        r69 = null;

        r70 = null;

        r71 = "singleton";

        z13 = 0;

        z14 = 0;

        $r0 = new org.springframework.beans.factory.config.ConstructorArgumentValues;

        specialinvoke $r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: void <init>()>();

        $r1 = new org.springframework.beans.MutablePropertyValues;

        specialinvoke $r1.<org.springframework.beans.MutablePropertyValues: void <init>()>();

        $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label14;

     label01:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r72 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r7);

        $r9 = new java.lang.StringBuilder;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>($r13);

        if $z0 == 0 goto label14;

        $i0 = virtualinvoke r10.<java.lang.String: int length()>();

        $r14 = ".";

        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r15 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>($i2);

        $r16 = "(class)";

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label02;

        $r53 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r54 = (java.lang.String) $r53;

        r69 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r54);

        goto label14;

     label02:
        $r17 = "(parent)";

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label03;

        $r51 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r52 = (java.lang.String) $r51;

        r70 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r52);

        goto label14;

     label03:
        $r18 = "(abstract)";

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label04;

        $r47 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r48 = (java.lang.String) $r47;

        $r49 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r48);

        $r50 = "true";

        z13 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49);

        goto label14;

     label04:
        $r19 = "(scope)";

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z4 == 0 goto label05;

        $r45 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r46 = (java.lang.String) $r45;

        r71 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r46);

        goto label14;

     label05:
        $r20 = "(singleton)";

        $z5 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z5 == 0 goto label09;

        $r41 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = (java.lang.String) $r41;

        $r43 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r42);

        if $r43 == null goto label06;

        $r44 = "true";

        $z10 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z10 == 0 goto label07;

     label06:
        $r73 = "singleton";

        goto label08;

     label07:
        $r73 = "prototype";

     label08:
        r71 = $r73;

        goto label14;

     label09:
        $r21 = "(lazy-init)";

        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z6 == 0 goto label10;

        $r37 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r38 = (java.lang.String) $r37;

        $r39 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r38);

        $r40 = "true";

        z14 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        goto label14;

     label10:
        $z7 = virtualinvoke $r15.<java.lang.String: boolean startsWith(java.lang.String)>("$");

        if $z7 == 0 goto label12;

        $z9 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>("(ref)");

        if $z9 == 0 goto label11;

        $i7 = virtualinvoke $r15.<java.lang.String: int length()>();

        $r32 = "(ref)";

        $i8 = virtualinvoke $r32.<java.lang.String: int length()>();

        $i9 = $i7 - $i8;

        $r33 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(1, $i9);

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r33);

        $r34 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        $r35 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = virtualinvoke $r35.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r34.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r36);

        virtualinvoke $r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>($i10, $r34);

        goto label14;

     label11:
        $r30 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int)>(1);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r30);

        $r31 = specialinvoke r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.Object readValue(java.util.Map$Entry)>(r72);

        virtualinvoke $r0.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addIndexedArgumentValue(int,java.lang.Object)>($i6, $r31);

        goto label14;

     label12:
        $z8 = virtualinvoke $r15.<java.lang.String: boolean endsWith(java.lang.String)>("(ref)");

        if $z8 == 0 goto label13;

        $i3 = virtualinvoke $r15.<java.lang.String: int length()>();

        $r24 = "(ref)";

        $i4 = virtualinvoke $r24.<java.lang.String: int length()>();

        $i5 = $i3 - $i4;

        $r25 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        $r26 = interfaceinvoke r72.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (java.lang.String) $r26;

        $r28 = staticinvoke <org.springframework.util.StringUtils: java.lang.String trimWhitespace(java.lang.String)>($r27);

        $r29 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        specialinvoke $r29.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r28);

        virtualinvoke $r1.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>($r25, $r29);

        goto label14;

     label13:
        $r23 = specialinvoke r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.Object readValue(java.util.Map$Entry)>(r72);

        virtualinvoke $r1.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>($r15, $r23);

     label14:
        $z15 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z15 != 0 goto label01;

        $r55 = r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z11 = interfaceinvoke $r55.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z11 == 0 goto label15;

        $r59 = r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>(java.lang.String)>("Registering bean definition for bean name \'");

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r56);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r59.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r63);

     label15:
        if r70 != null goto label16;

        if r69 != null goto label16;

        $r57 = r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String defaultParentBean>;

        $z12 = virtualinvoke r56.<java.lang.String: boolean equals(java.lang.Object)>($r57);

        if $z12 != 0 goto label16;

        r70 = r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String defaultParentBean>;

     label16:
        $r74 = virtualinvoke r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.ClassLoader getBeanClassLoader()>();

        $r75 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: org.springframework.beans.factory.support.AbstractBeanDefinition createBeanDefinition(java.lang.String,java.lang.String,java.lang.ClassLoader)>(r70, r69, $r74);

        virtualinvoke $r75.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setScope(java.lang.String)>(r71);

        virtualinvoke $r75.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAbstract(boolean)>(z13);

        virtualinvoke $r75.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setLazyInit(boolean)>(z14);

        virtualinvoke $r75.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>($r0);

        virtualinvoke $r75.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setPropertyValues(org.springframework.beans.MutablePropertyValues)>($r1);

        $r76 = virtualinvoke r22.<org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry getRegistry()>();

        interfaceinvoke $r76.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r56, $r75);

     label17:
        goto label20;

     label18:
        $r67 := @caughtexception;

        $r68 = new org.springframework.beans.factory.CannotLoadBeanClassException;

        specialinvoke $r68.<org.springframework.beans.factory.CannotLoadBeanClassException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassNotFoundException)>(r66, r56, r69, $r67);

        throw $r68;

     label19:
        $r64 := @caughtexception;

        $r65 = new org.springframework.beans.factory.CannotLoadBeanClassException;

        specialinvoke $r65.<org.springframework.beans.factory.CannotLoadBeanClassException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.LinkageError)>(r66, r56, r69, $r64);

        throw $r65;

     label20:
        return;

        catch java.lang.ClassNotFoundException from label16 to label17 with label18;
        catch java.lang.LinkageError from label16 to label17 with label19;
    }

    private java.lang.Object readValue(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        org.springframework.beans.factory.config.RuntimeBeanReference $r4;
        org.springframework.beans.factory.support.PropertiesBeanDefinitionReader r5;
        java.lang.Object $r1, r6;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2;

        r5 := @this: org.springframework.beans.factory.support.PropertiesBeanDefinitionReader;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = $r1;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        r2 = (java.lang.String) $r1;

        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z2 == 0 goto label1;

        r6 = $r3;

        goto label2;

     label1:
        $r4 = new org.springframework.beans.factory.config.RuntimeBeanReference;

        specialinvoke $r4.<org.springframework.beans.factory.config.RuntimeBeanReference: void <init>(java.lang.String)>($r3);

        r6 = $r4;

     label2:
        return r6;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String CONSTRUCTOR_ARG_PREFIX> = "$";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String REF_PREFIX> = "*";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String REF_SUFFIX> = "(ref)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String LAZY_INIT_KEY> = "(lazy-init)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String ABSTRACT_KEY> = "(abstract)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String SINGLETON_KEY> = "(singleton)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String SCOPE_KEY> = "(scope)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String PARENT_KEY> = "(parent)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String CLASS_KEY> = "(class)";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String SEPARATOR> = ".";

        <org.springframework.beans.factory.support.PropertiesBeanDefinitionReader: java.lang.String TRUE_VALUE> = "true";

        return;
    }
}
