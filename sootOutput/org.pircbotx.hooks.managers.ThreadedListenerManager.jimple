public class org.pircbotx.hooks.managers.ThreadedListenerManager extends java.lang.Object implements org.pircbotx.hooks.managers.ListenerManager
{
    protected java.util.concurrent.ExecutorService pool;
    protected java.util.Set listeners;
    protected java.util.concurrent.atomic.AtomicLong currentId;

    public void <init>()
    {
        java.util.HashSet $r1;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.concurrent.ThreadPoolExecutor r6;
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r2;
        org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory $r4;
        java.util.concurrent.ExecutorService $r5;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r1);

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set listeners> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.atomic.AtomicLong currentId> = $r3;

        $r4 = new org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory;

        specialinvoke $r4.<org.pircbotx.hooks.managers.ThreadedListenerManager$ListenerThreadFactory: void <init>(java.lang.String)>("listenerThread");

        $r5 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>($r4);

        r6 = (java.util.concurrent.ThreadPoolExecutor) $r5;

        virtualinvoke r6.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1);

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.ExecutorService pool> = r6;

        return;
    }

    public void <init>(java.util.concurrent.ExecutorService)
    {
        java.util.HashSet $r1;
        java.util.concurrent.atomic.AtomicLong $r3;
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r2;
        java.util.concurrent.ExecutorService r4;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        r4 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r1);

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set listeners> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.atomic.AtomicLong currentId> = $r3;

        r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.ExecutorService pool> = r4;

        return;
    }

    public boolean addListener(org.pircbotx.hooks.Listener)
    {
        org.pircbotx.hooks.Listener r2;
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        r2 := @parameter0: org.pircbotx.hooks.Listener;

        $r1 = virtualinvoke r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set getListenersReal()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean removeListener(org.pircbotx.hooks.Listener)
    {
        org.pircbotx.hooks.Listener r2;
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        r2 := @parameter0: org.pircbotx.hooks.Listener;

        $r1 = virtualinvoke r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set getListenersReal()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        return $z0;
    }

    public java.util.Set getListeners()
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r1, $r2;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        $r1 = virtualinvoke r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set getListenersReal()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    protected java.util.Set getListenersReal()
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r1;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        $r1 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set listeners>;

        return $r1;
    }

    public boolean listenerExists(org.pircbotx.hooks.Listener)
    {
        org.pircbotx.hooks.Listener r2;
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        r2 := @parameter0: org.pircbotx.hooks.Listener;

        $r1 = virtualinvoke r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set getListeners()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public void dispatchEvent(org.pircbotx.hooks.Event)
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r3;
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.Set $r1, $r2;
        org.pircbotx.hooks.Listener r5;
        java.lang.Object $r4;
        org.pircbotx.hooks.Event r6;
        java.util.concurrent.ExecutorService $r7;
        boolean $z0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        r6 := @parameter0: org.pircbotx.hooks.Event;

        $r1 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set listeners>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.Set getListenersReal()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.pircbotx.hooks.Listener) $r4;

        $r7 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.ExecutorService pool>;

        staticinvoke <org.pircbotx.hooks.managers.ThreadedListenerManager: void submitEvent(java.util.concurrent.ExecutorService,org.pircbotx.hooks.Listener,org.pircbotx.hooks.Event)>($r7, r5, r6);

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected static void submitEvent(java.util.concurrent.ExecutorService, org.pircbotx.hooks.Listener, org.pircbotx.hooks.Event)
    {
        org.pircbotx.hooks.Listener r2;
        org.pircbotx.hooks.managers.ThreadedListenerManager$1 $r1;
        org.pircbotx.hooks.Event r3;
        java.util.concurrent.ExecutorService r0;

        r0 := @parameter0: java.util.concurrent.ExecutorService;

        r2 := @parameter1: org.pircbotx.hooks.Listener;

        r3 := @parameter2: org.pircbotx.hooks.Event;

        $r1 = new org.pircbotx.hooks.managers.ThreadedListenerManager$1;

        specialinvoke $r1.<org.pircbotx.hooks.managers.ThreadedListenerManager$1: void <init>(org.pircbotx.hooks.Listener,org.pircbotx.hooks.Event)>(r2, r3);

        interfaceinvoke r0.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r1);

        return;
    }

    public void setCurrentId(long)
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long l0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        l0 := @parameter0: long;

        $r1 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.atomic.AtomicLong currentId>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(l0);

        return;
    }

    public long getCurrentId()
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        $r1 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.atomic.AtomicLong currentId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        return $l0;
    }

    public long incrementCurrentId()
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        $r1 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.atomic.AtomicLong currentId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        return $l0;
    }

    public java.util.concurrent.ExecutorService shutdown()
    {
        org.pircbotx.hooks.managers.ThreadedListenerManager r0;
        java.util.concurrent.ExecutorService $r1, $r2;

        r0 := @this: org.pircbotx.hooks.managers.ThreadedListenerManager;

        $r1 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.ExecutorService pool>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: void shutdown()>();

        $r2 = r0.<org.pircbotx.hooks.managers.ThreadedListenerManager: java.util.concurrent.ExecutorService pool>;

        return $r2;
    }
}
