public class org.apache.solr.client.solrj.impl.BinaryResponseParser extends org.apache.solr.client.solrj.ResponseParser
{

    public void <init>()
    {
        org.apache.solr.client.solrj.impl.BinaryResponseParser r0;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryResponseParser;

        specialinvoke r0.<org.apache.solr.client.solrj.ResponseParser: void <init>()>();

        return;
    }

    public java.lang.String getWriterType()
    {
        org.apache.solr.client.solrj.impl.BinaryResponseParser r0;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryResponseParser;

        return "javabin";
    }

    public org.apache.solr.common.util.NamedList processResponse(java.io.InputStream, java.lang.String)
    {
        java.io.IOException $r4;
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.util.NamedList $r3;
        org.apache.solr.common.SolrException $r5;
        org.apache.solr.client.solrj.impl.BinaryResponseParser r7;
        java.lang.Object $r2;
        java.lang.String r8;
        org.apache.solr.common.util.JavaBinCodec $r0;
        java.io.InputStream r1;

        r7 := @this: org.apache.solr.client.solrj.impl.BinaryResponseParser;

        r1 := @parameter0: java.io.InputStream;

        r8 := @parameter1: java.lang.String;

     label1:
        $r0 = new org.apache.solr.common.util.JavaBinCodec;

        specialinvoke $r0.<org.apache.solr.common.util.JavaBinCodec: void <init>()>();

        $r2 = virtualinvoke $r0.<org.apache.solr.common.util.JavaBinCodec: java.lang.Object unmarshal(java.io.InputStream)>(r1);

        $r3 = (org.apache.solr.common.util.NamedList) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVER_ERROR>;

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, "parsing error", $r4);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String getVersion()
    {
        org.apache.solr.client.solrj.impl.BinaryResponseParser r0;

        r0 := @this: org.apache.solr.client.solrj.impl.BinaryResponseParser;

        return "2";
    }

    public org.apache.solr.common.util.NamedList processResponse(java.io.Reader)
    {
        org.apache.solr.client.solrj.impl.BinaryResponseParser r1;
        java.lang.RuntimeException $r0;
        java.io.Reader r2;

        r1 := @this: org.apache.solr.client.solrj.impl.BinaryResponseParser;

        r2 := @parameter0: java.io.Reader;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot handle character stream");

        throw $r0;
    }
}
