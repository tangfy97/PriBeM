public class org.jivesoftware.util.Base64$InputStream extends java.io.FilterInputStream
{
    private boolean encode;
    private int position;
    private byte[] buffer;
    private int bufferLength;
    private int numSigBytes;
    private int lineLength;
    private boolean breakLines;
    private int options;
    private byte[] alphabet;
    private byte[] decodabet;

    public void <init>(java.io.InputStream)
    {
        org.jivesoftware.util.Base64$InputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.jivesoftware.util.Base64$InputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.jivesoftware.util.Base64$InputStream: void <init>(java.io.InputStream,int)>(r1, 0);

        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        byte[] $r2, $r3, $r4;
        org.jivesoftware.util.Base64$InputStream r0;
        byte $b4;
        int i0, $i1, $i2, $i3, $i6;
        java.io.InputStream r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jivesoftware.util.Base64$InputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        $i1 = i0 & 8;

        if $i1 == 8 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.jivesoftware.util.Base64$InputStream: boolean breakLines> = $z1;

        $i2 = i0 & 1;

        if $i2 != 1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        r0.<org.jivesoftware.util.Base64$InputStream: boolean encode> = $z2;

        $z0 = r0.<org.jivesoftware.util.Base64$InputStream: boolean encode>;

        if $z0 == 0 goto label5;

        $b4 = 4;

        goto label6;

     label5:
        $b4 = 3;

     label6:
        r0.<org.jivesoftware.util.Base64$InputStream: int bufferLength> = $b4;

        $i3 = r0.<org.jivesoftware.util.Base64$InputStream: int bufferLength>;

        $r2 = newarray (byte)[$i3];

        r0.<org.jivesoftware.util.Base64$InputStream: byte[] buffer> = $r2;

        $i6 = (int) -1;

        r0.<org.jivesoftware.util.Base64$InputStream: int position> = $i6;

        r0.<org.jivesoftware.util.Base64$InputStream: int lineLength> = 0;

        r0.<org.jivesoftware.util.Base64$InputStream: int options> = i0;

        $r3 = staticinvoke <org.jivesoftware.util.Base64: byte[] access$000(int)>(i0);

        r0.<org.jivesoftware.util.Base64$InputStream: byte[] alphabet> = $r3;

        $r4 = staticinvoke <org.jivesoftware.util.Base64: byte[] access$100(int)>(i0);

        r0.<org.jivesoftware.util.Base64$InputStream: byte[] decodabet> = $r4;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r3, $r5, $r6, r9, r10, $r11;
        byte $b8, $b10, $b13, $b22;
        boolean $z0, $z1, $z2;
        short $s3, $s36;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i11, $i12, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i26, $i27, $i29, $i31, $i33, $i35, $i37;
        java.io.IOException $r8, $r12, $r13;
        org.jivesoftware.util.Base64$InputStream r0;
        java.io.InputStream $r4, $r7;

        r0 := @this: org.jivesoftware.util.Base64$InputStream;

        $i0 = r0.<org.jivesoftware.util.Base64$InputStream: int position>;

        if $i0 >= 0 goto label17;

        $z2 = r0.<org.jivesoftware.util.Base64$InputStream: boolean encode>;

        if $z2 == 0 goto label09;

        r9 = newarray (byte)[3];

        i14 = 0;

        i15 = 0;

     label01:
        if i15 >= 3 goto label06;

     label02:
        $r7 = r0.<org.jivesoftware.util.Base64$InputStream: java.io.InputStream in>;

        $i12 = virtualinvoke $r7.<java.io.InputStream: int read()>();

        if $i12 < 0 goto label03;

        $b13 = (byte) $i12;

        r9[i15] = $b13;

        i14 = i14 + 1;

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

        if i15 != 0 goto label05;

        throw $r8;

     label05:
        i15 = i15 + 1;

        goto label01;

     label06:
        if i14 <= 0 goto label07;

        $r6 = r0.<org.jivesoftware.util.Base64$InputStream: byte[] buffer>;

        $i11 = r0.<org.jivesoftware.util.Base64$InputStream: int options>;

        staticinvoke <org.jivesoftware.util.Base64: byte[] access$200(byte[],int,int,byte[],int,int)>(r9, 0, i14, $r6, 0, $i11);

        r0.<org.jivesoftware.util.Base64$InputStream: int position> = 0;

        r0.<org.jivesoftware.util.Base64$InputStream: int numSigBytes> = 4;

        goto label08;

     label07:
        $i26 = (int) -1;

        return $i26;

     label08:
        goto label17;

     label09:
        r10 = newarray (byte)[4];

        i16 = 0;

     label10:
        if i16 >= 4 goto label14;

     label11:
        $r4 = r0.<org.jivesoftware.util.Base64$InputStream: java.io.InputStream in>;

        $i7 = virtualinvoke $r4.<java.io.InputStream: int read()>();

        if $i7 < 0 goto label12;

        $r5 = r0.<org.jivesoftware.util.Base64$InputStream: byte[] decodabet>;

        $i9 = $i7 & 127;

        $b10 = $r5[$i9];

        $i27 = (int) $b10;

        $i29 = (int) -5;

        if $i27 <= $i29 goto label11;

     label12:
        if $i7 >= 0 goto label13;

        goto label14;

     label13:
        $b8 = (byte) $i7;

        r10[i16] = $b8;

        i16 = i16 + 1;

        goto label10;

     label14:
        if i16 != 4 goto label15;

        $r3 = r0.<org.jivesoftware.util.Base64$InputStream: byte[] buffer>;

        $i5 = r0.<org.jivesoftware.util.Base64$InputStream: int options>;

        $i6 = staticinvoke <org.jivesoftware.util.Base64: int access$300(byte[],int,byte[],int,int)>(r10, 0, $r3, 0, $i5);

        r0.<org.jivesoftware.util.Base64$InputStream: int numSigBytes> = $i6;

        r0.<org.jivesoftware.util.Base64$InputStream: int position> = 0;

        goto label17;

     label15:
        if i16 != 0 goto label16;

        $i31 = (int) -1;

        return $i31;

     label16:
        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Improperly padded Base64 input.");

        throw $r12;

     label17:
        $i17 = r0.<org.jivesoftware.util.Base64$InputStream: int position>;

        if $i17 < 0 goto label21;

        $i2 = r0.<org.jivesoftware.util.Base64$InputStream: int position>;

        $i1 = r0.<org.jivesoftware.util.Base64$InputStream: int numSigBytes>;

        if $i2 < $i1 goto label18;

        $i33 = (int) -1;

        return $i33;

     label18:
        $z0 = r0.<org.jivesoftware.util.Base64$InputStream: boolean encode>;

        if $z0 == 0 goto label19;

        $z1 = r0.<org.jivesoftware.util.Base64$InputStream: boolean breakLines>;

        if $z1 == 0 goto label19;

        $i4 = r0.<org.jivesoftware.util.Base64$InputStream: int lineLength>;

        if $i4 < 76 goto label19;

        r0.<org.jivesoftware.util.Base64$InputStream: int lineLength> = 0;

        return 10;

     label19:
        $i18 = r0.<org.jivesoftware.util.Base64$InputStream: int lineLength>;

        $i19 = $i18 + 1;

        r0.<org.jivesoftware.util.Base64$InputStream: int lineLength> = $i19;

        $r11 = r0.<org.jivesoftware.util.Base64$InputStream: byte[] buffer>;

        $i20 = r0.<org.jivesoftware.util.Base64$InputStream: int position>;

        $i21 = $i20 + 1;

        r0.<org.jivesoftware.util.Base64$InputStream: int position> = $i21;

        $b22 = $r11[$i20];

        $i23 = r0.<org.jivesoftware.util.Base64$InputStream: int position>;

        $i24 = r0.<org.jivesoftware.util.Base64$InputStream: int bufferLength>;

        if $i23 < $i24 goto label20;

        $i35 = (int) -1;

        r0.<org.jivesoftware.util.Base64$InputStream: int position> = $i35;

     label20:
        $s36 = (short) $b22;

        $s3 = $s36 & 255;

        $i37 = (int) $s3;

        return $i37;

     label21:
        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Error in Base64 code reading stream.");

        throw $r13;

        catch java.io.IOException from label02 to label03 with label04;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.jivesoftware.util.Base64$InputStream r0;
        byte $b3;
        int i0, $i1, i2, $i4, i5, $i7;

        r0 := @this: org.jivesoftware.util.Base64$InputStream;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        $i1 = virtualinvoke r0.<org.jivesoftware.util.Base64$InputStream: int read()>();

        if $i1 < 0 goto label2;

        $i4 = i2 + i5;

        $b3 = (byte) $i1;

        r1[$i4] = $b3;

        goto label3;

     label2:
        if i5 != 0 goto label4;

        $i7 = (int) -1;

        return $i7;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return i5;
    }
}
