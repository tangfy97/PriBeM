abstract class com.mycila.inject.internal.guava.collect.Multimaps$AsMap extends com.mycila.inject.internal.guava.collect.Maps$ImprovedAbstractMap
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$ImprovedAbstractMap: void <init>()>();

        return;
    }

    abstract com.mycila.inject.internal.guava.collect.Multimap multimap();

    public abstract int size();

    abstract java.util.Iterator entryIterator();

    protected java.util.Set createEntrySet()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r1;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap$EntrySet $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        $r0 = new com.mycila.inject.internal.guava.collect.Multimaps$AsMap$EntrySet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap$EntrySet: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$AsMap)>(r1);

        return $r0;
    }

    void removeValuesForKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection removeAll(java.lang.Object)>(r2);

        return;
    }

    public java.util.Collection get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;
        java.util.Collection $r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimap $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection get(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.util.Collection remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;
        java.util.Collection $r3;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimap $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection removeAll(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.util.Set keySet()
    {
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Set keySet()>();

        return $r2;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: boolean isEmpty()>();

        return $z0;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: void clear()>();

        return;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;
        java.util.Collection $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: java.util.Collection remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.Multimaps$AsMap r0;
        java.util.Collection $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$AsMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$AsMap: java.util.Collection get(java.lang.Object)>(r1);

        return $r2;
    }
}
