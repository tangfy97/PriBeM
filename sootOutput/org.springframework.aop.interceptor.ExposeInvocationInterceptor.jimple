public class org.springframework.aop.interceptor.ExposeInvocationInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.core.Ordered, java.io.Serializable
{
    public static final org.springframework.aop.interceptor.ExposeInvocationInterceptor INSTANCE;
    public static final org.springframework.aop.Advisor ADVISOR;
    private static final java.lang.ThreadLocal invocation;

    static void <clinit>()
    {
        org.springframework.aop.interceptor.ExposeInvocationInterceptor $r0, $r2;
        org.springframework.aop.interceptor.ExposeInvocationInterceptor$1 $r1;
        org.springframework.core.NamedThreadLocal $r3;

        $r0 = new org.springframework.aop.interceptor.ExposeInvocationInterceptor;

        specialinvoke $r0.<org.springframework.aop.interceptor.ExposeInvocationInterceptor: void <init>()>();

        <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.springframework.aop.interceptor.ExposeInvocationInterceptor INSTANCE> = $r0;

        $r1 = new org.springframework.aop.interceptor.ExposeInvocationInterceptor$1;

        $r2 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.springframework.aop.interceptor.ExposeInvocationInterceptor INSTANCE>;

        specialinvoke $r1.<org.springframework.aop.interceptor.ExposeInvocationInterceptor$1: void <init>(org.aopalliance.aop.Advice)>($r2);

        <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.springframework.aop.Advisor ADVISOR> = $r1;

        $r3 = new org.springframework.core.NamedThreadLocal;

        specialinvoke $r3.<org.springframework.core.NamedThreadLocal: void <init>(java.lang.String)>("Current AOP method invocation");

        <org.springframework.aop.interceptor.ExposeInvocationInterceptor: java.lang.ThreadLocal invocation> = $r3;

        return;
    }

    public static org.aopalliance.intercept.MethodInvocation currentInvocation() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3;
        java.lang.ThreadLocal $r0;
        org.aopalliance.intercept.MethodInvocation r2;
        java.lang.Object $r1;

        $r0 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: java.lang.ThreadLocal invocation>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.aopalliance.intercept.MethodInvocation) $r1;

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No MethodInvocation found: Check that an AOP invocation is in progress, and that the ExposeInvocationInterceptor is upfront in the interceptor chain. Specifically, note that advices with order HIGHEST_PRECEDENCE will execute before ExposeInvocationInterceptor!");

        throw $r3;

     label1:
        return r2;
    }

    private void <init>()
    {
        org.springframework.aop.interceptor.ExposeInvocationInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.ExposeInvocationInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r7;
        org.springframework.aop.interceptor.ExposeInvocationInterceptor r9;
        java.lang.ThreadLocal $r0, $r4, $r6, $r8;
        org.aopalliance.intercept.MethodInvocation r2, r3;
        java.lang.Object $r1, $r5;

        r9 := @this: org.springframework.aop.interceptor.ExposeInvocationInterceptor;

        r3 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r0 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: java.lang.ThreadLocal invocation>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.aopalliance.intercept.MethodInvocation) $r1;

        $r4 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: java.lang.ThreadLocal invocation>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>(r3);

     label1:
        $r5 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

     label2:
        $r6 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: java.lang.ThreadLocal invocation>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        return $r5;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: java.lang.ThreadLocal invocation>;

        virtualinvoke $r8.<java.lang.ThreadLocal: void set(java.lang.Object)>(r2);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getOrder()
    {
        org.springframework.aop.interceptor.ExposeInvocationInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.ExposeInvocationInterceptor;

        return -2147483647;
    }

    private java.lang.Object readResolve()
    {
        org.springframework.aop.interceptor.ExposeInvocationInterceptor $r0, r1;

        r1 := @this: org.springframework.aop.interceptor.ExposeInvocationInterceptor;

        $r0 = <org.springframework.aop.interceptor.ExposeInvocationInterceptor: org.springframework.aop.interceptor.ExposeInvocationInterceptor INSTANCE>;

        return $r0;
    }
}
