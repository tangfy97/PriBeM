final class minsolver.fol2sat.MinFormulaFlattener extends kodkod.ast.visitor.AbstractVoidVisitor
{
    private java.util.Map conjuncts;
    private final java.util.Map visited;
    private final java.util.Set shared;
    private boolean negated;
    private final boolean breakupQuantifiers;

    public static kodkod.util.nodes.AnnotatedNode flatten(kodkod.util.nodes.AnnotatedNode, boolean)
    {
        java.util.ArrayList $r5;
        minsolver.fol2sat.MinFormulaFlattener $r0;
        java.util.Map $r6, $r7, $r9, $r19;
        int $i0;
        kodkod.util.nodes.AnnotatedNode r1, $r20;
        boolean z0, $z1;
        java.util.Map$Entry r13;
        java.util.Iterator $r11;
        kodkod.ast.Formula $r4, $r18;
        java.util.Set $r2, $r8, $r10;
        kodkod.ast.Node $r3, $r15, $r16;
        java.lang.Object $r12, $r14, $r17;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        z0 := @parameter1: boolean;

        $r0 = new minsolver.fol2sat.MinFormulaFlattener;

        $r2 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: java.util.Set sharedNodes()>();

        specialinvoke $r0.<minsolver.fol2sat.MinFormulaFlattener: void <init>(java.util.Set,boolean)>($r2, z0);

        $r3 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r4 = (kodkod.ast.Formula) $r3;

        virtualinvoke $r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>($r0);

        $r5 = new java.util.ArrayList;

        $r6 = $r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = $r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r9 = $r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        $r14 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (kodkod.ast.Node) $r14;

        $r16 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node sourceOf(kodkod.ast.Node)>($r15);

        $r17 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r17 != $r16 goto label2;

        interfaceinvoke $r11.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r16);

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r18 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r5);

        $r19 = $r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r20 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node,java.util.Map)>($r18, $r19);

        return $r20;
    }

    private void <init>(java.util.Set, boolean)
    {
        java.util.LinkedHashMap $r1;
        java.util.IdentityHashMap $r3;
        minsolver.fol2sat.MinFormulaFlattener r0;
        java.util.Set r2;
        boolean z0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r2 := @parameter0: java.util.Set;

        z0 := @parameter1: boolean;

        specialinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = $r1;

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Set shared> = r2;

        $r3 = new java.util.IdentityHashMap;

        specialinvoke $r3.<java.util.IdentityHashMap: void <init>()>();

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map visited> = $r3;

        r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated> = 0;

        r0.<minsolver.fol2sat.MinFormulaFlattener: boolean breakupQuantifiers> = z0;

        return;
    }

    final kodkod.util.nodes.AnnotatedNode apply(kodkod.util.nodes.AnnotatedNode)
    {
        java.util.ArrayList $r4;
        minsolver.fol2sat.MinFormulaFlattener r2;
        java.util.Map $r5, $r6, $r8, $r18;
        int $i0;
        kodkod.util.nodes.AnnotatedNode r0, $r19;
        boolean $z0;
        java.util.Map$Entry r12;
        java.util.Iterator $r10;
        kodkod.ast.Formula $r3, $r17;
        java.util.Set $r7, $r9;
        kodkod.ast.Node $r1, $r14, $r15;
        java.lang.Object $r11, $r13, $r16;

        r2 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r0 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        $r1 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r3 = (kodkod.ast.Formula) $r1;

        virtualinvoke $r3.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r2);

        $r4 = new java.util.ArrayList;

        $r5 = r2.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r6 = r2.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $r8 = r2.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (kodkod.ast.Node) $r13;

        $r15 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node sourceOf(kodkod.ast.Node)>($r14);

        $r16 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r16 != $r15 goto label2;

        interfaceinvoke $r10.<java.util.Iterator: void remove()>();

        goto label3;

     label2:
        interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r15);

     label3:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r17 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r4);

        $r18 = r2.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r19 = staticinvoke <kodkod.util.nodes.AnnotatedNode: kodkod.util.nodes.AnnotatedNode annotate(kodkod.ast.Node,java.util.Map)>($r17, $r18);

        return $r19;
    }

    protected boolean visited(kodkod.ast.Node)
    {
        java.util.Set $r2;
        kodkod.ast.Node r1;
        minsolver.fol2sat.MinFormulaFlattener r0;
        java.util.Map $r3, $r4, $r6, $r9;
        java.lang.Boolean $r5, r8;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Set shared>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        $r3 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map visited>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r6 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map visited>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = (java.lang.Boolean) $r7;

        if r8 == null goto label1;

        $z3 = virtualinvoke r8.<java.lang.Boolean: boolean booleanValue()>();

        $z4 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z3 != $z4 goto label2;

     label1:
        return 1;

     label2:
        $r9 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map visited>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        return 0;

     label3:
        $r4 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map visited>;

        $z2 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return 0;

     label4:
        return 0;
    }

    public final void visit(kodkod.ast.NotFormula)
    {
        java.util.LinkedHashMap $r3;
        minsolver.fol2sat.MinFormulaFlattener r0;
        kodkod.ast.NotFormula r1;
        java.util.Map r2, $r5, $r6, $r7;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        kodkod.ast.Formula $r4, $r8;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $z0 = virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r2 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = $r3;

        $z1 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z1 == 0 goto label2;

        $z4 = 0;

        goto label3;

     label2:
        $z4 = 1;

     label3:
        r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated> = $z4;

        $r4 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $z2 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z2 == 0 goto label4;

        $z5 = 0;

        goto label5;

     label4:
        $z5 = 1;

     label5:
        r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated> = $z5;

        $r5 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 <= 1 goto label6;

        $r7 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        interfaceinvoke r2.<java.util.Map: void putAll(java.util.Map)>($r7);

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = r2;

        goto label9;

     label6:
        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = r2;

        $r6 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $z3 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z3 == 0 goto label7;

        $r8 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        goto label8;

     label7:
        $r8 = r1;

     label8:
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r1);

     label9:
        return;
    }

    private final void addConjunct(kodkod.ast.Formula)
    {
        minsolver.fol2sat.MinFormulaFlattener r0;
        kodkod.ast.Formula r1, $r3;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.Formula;

        $r2 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $z0 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<kodkod.ast.Formula: kodkod.ast.Formula not()>();

        goto label2;

     label1:
        $r3 = r1;

     label2:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public final void visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        minsolver.fol2sat.MinFormulaFlattener r0;
        kodkod.ast.operator.FormulaOperator $r2, $r3, $r6, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        kodkod.ast.Formula $r4, $r5, $r7, $r8;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $z0 = virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r3 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF>;

        if $r2 == $r3 goto label03;

        $z1 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z1 == 0 goto label02;

        $r11 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r2 == $r11 goto label03;

     label02:
        $z2 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z2 != 0 goto label04;

        $r9 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        if $r2 == $r9 goto label03;

        $r10 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        if $r2 != $r10 goto label04;

     label03:
        specialinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void addConjunct(kodkod.ast.Formula)>(r1);

        goto label10;

     label04:
        $z3 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z3 == 0 goto label09;

        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        if $r2 != $r6 goto label09;

        $z4 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z4 == 0 goto label05;

        $z6 = 0;

        goto label06;

     label05:
        $z6 = 1;

     label06:
        r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated> = $z6;

        $r7 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke $r7.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $z5 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z5 == 0 goto label07;

        $z7 = 0;

        goto label08;

     label07:
        $z7 = 1;

     label08:
        r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated> = $z7;

        $r8 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke $r8.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        goto label10;

     label09:
        $r4 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke $r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r5 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke $r5.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label10:
        return;
    }

    public final void visit(kodkod.ast.NaryFormula)
    {
        java.util.Iterator $r3;
        kodkod.ast.Formula r5;
        minsolver.fol2sat.MinFormulaFlattener r0;
        kodkod.ast.operator.FormulaOperator $r2, $r6, $r7;
        java.lang.Object $r4;
        kodkod.ast.NaryFormula r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $z0 = virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $z1 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z1 == 0 goto label2;

        $r7 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r2 == $r7 goto label3;

     label2:
        $z2 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z2 != 0 goto label4;

        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        if $r2 != $r6 goto label4;

     label3:
        specialinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void addConjunct(kodkod.ast.Formula)>(r1);

        goto label7;

     label4:
        $r3 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Formula) $r4;

        virtualinvoke r5.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label6:
        $z3 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label5;

     label7:
        return;
    }

    public final void visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        java.util.LinkedHashMap $r4;
        minsolver.fol2sat.MinFormulaFlattener r0;
        java.util.Map $r6, $r8, $r19;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map$Entry r12;
        java.util.Iterator $r10;
        kodkod.ast.Formula $r5, $r14, $r15;
        java.util.Set $r9;
        kodkod.ast.Decls $r7;
        kodkod.ast.Node $r17;
        java.lang.Object $r11, $r13, $r16;
        kodkod.ast.operator.Quantifier $r2, $r3, $r18;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $z0 = virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean breakupQuantifiers>;

        if $z1 == 0 goto label7;

        $r2 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.operator.Quantifier quantifier()>();

        $z2 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z2 != 0 goto label2;

        $r18 = <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier ALL>;

        if $r2 == $r18 goto label3;

     label2:
        $z3 = r0.<minsolver.fol2sat.MinFormulaFlattener: boolean negated>;

        if $z3 == 0 goto label7;

        $r3 = <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier SOME>;

        if $r2 != $r3 goto label7;

     label3:
        $r19 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = $r4;

        $r5 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r5.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r6 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        if $i0 <= 1 goto label6;

        $r7 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r8 = r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (kodkod.ast.Formula) $r13;

        $r15 = virtualinvoke $r14.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r7);

        $r16 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (kodkod.ast.Node) $r16;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r17);

     label5:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label4;

        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = $r19;

        return;

     label6:
        r0.<minsolver.fol2sat.MinFormulaFlattener: java.util.Map conjuncts> = $r19;

     label7:
        specialinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void addConjunct(kodkod.ast.Formula)>(r1);

        return;
    }

    final void visitFormula(kodkod.ast.Formula)
    {
        minsolver.fol2sat.MinFormulaFlattener r0;
        kodkod.ast.Formula r1;
        boolean $z0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.Formula;

        $z0 = virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void addConjunct(kodkod.ast.Formula)>(r1);

        return;
    }

    public final void visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.ComparisonFormula r1;
        minsolver.fol2sat.MinFormulaFlattener r0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void visitFormula(kodkod.ast.Formula)>(r1);

        return;
    }

    public final void visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntComparisonFormula r1;
        minsolver.fol2sat.MinFormulaFlattener r0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void visitFormula(kodkod.ast.Formula)>(r1);

        return;
    }

    public final void visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        minsolver.fol2sat.MinFormulaFlattener r0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void visitFormula(kodkod.ast.Formula)>(r1);

        return;
    }

    public final void visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.ConstantFormula r1;
        minsolver.fol2sat.MinFormulaFlattener r0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void visitFormula(kodkod.ast.Formula)>(r1);

        return;
    }

    public final void visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.RelationPredicate r1;
        minsolver.fol2sat.MinFormulaFlattener r0;

        r0 := @this: minsolver.fol2sat.MinFormulaFlattener;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        virtualinvoke r0.<minsolver.fol2sat.MinFormulaFlattener: void visitFormula(kodkod.ast.Formula)>(r1);

        return;
    }
}
