public class org.apache.batik.util.SoftDoublyIndexedTable extends java.lang.Object
{
    protected static final int INITIAL_CAPACITY;
    protected org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table;
    protected int count;
    protected java.lang.ref.ReferenceQueue referenceQueue;

    public void <init>()
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] $r2;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.ref.ReferenceQueue referenceQueue> = $r1;

        $r2 = newarray (org.apache.batik.util.SoftDoublyIndexedTable$Entry)[11];

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table> = $r2;

        return;
    }

    public void <init>(int)
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        int i0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] $r2;
        java.lang.ref.ReferenceQueue $r1;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.ref.ReferenceQueue referenceQueue> = $r1;

        $r2 = newarray (org.apache.batik.util.SoftDoublyIndexedTable$Entry)[i0];

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table> = $r2;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.batik.util.SoftDoublyIndexedTable r0;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        $i0 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: int count>;

        return $i0;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] $r3, $r4;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry r6;
        int $i0, i1, $i2, i3, $i4;
        java.lang.Object r1, r2, $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.batik.util.SoftDoublyIndexedTable: int hashCode(java.lang.Object,java.lang.Object)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i2 = lengthof $r3;

        i3 = i1 % $i2;

        $r4 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        r6 = $r4[i3];

        goto label3;

     label1:
        $i4 = r6.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: int hash>;

        if $i4 != i1 goto label2;

        $z0 = virtualinvoke r6.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r6.<java.lang.ref.SoftReference: java.lang.Object get()>();

        return $r5;

     label2:
        r6 = r6.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

     label3:
        if r6 != null goto label1;

        return null;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] $r3, $r4, $r5, $r8, $r10, $r11, $r18;
        boolean $z0, $z1;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry $r6, $r9, $r13, $r14, $r16, $r17, r19, r20, r21;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.Object r1, r2, r7, $r12, $r15;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Object;

        virtualinvoke r0.<org.apache.batik.util.SoftDoublyIndexedTable: void removeClearedEntries()>();

        $i0 = virtualinvoke r0.<org.apache.batik.util.SoftDoublyIndexedTable: int hashCode(java.lang.Object,java.lang.Object)>(r1, r2);

        i1 = $i0 & 2147483647;

        $r3 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i2 = lengthof $r3;

        i11 = i1 % $i2;

        $r4 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        r19 = $r4[i11];

        if r19 == null goto label5;

        $i8 = r19.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: int hash>;

        if $i8 != i1 goto label1;

        $z1 = virtualinvoke r19.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z1 == 0 goto label1;

        $r15 = virtualinvoke r19.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r18 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $r16 = new org.apache.batik.util.SoftDoublyIndexedTable$Entry;

        $r17 = r19.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        specialinvoke $r16.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: void <init>(org.apache.batik.util.SoftDoublyIndexedTable,int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.SoftDoublyIndexedTable$Entry)>(r0, i1, r1, r2, r7, $r17);

        $r18[i11] = $r16;

        return $r15;

     label1:
        r20 = r19;

        r21 = r19.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        goto label4;

     label2:
        $i9 = r21.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: int hash>;

        if $i9 != i1 goto label3;

        $z0 = virtualinvoke r21.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: boolean match(java.lang.Object,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label3;

        $r12 = virtualinvoke r21.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r13 = new org.apache.batik.util.SoftDoublyIndexedTable$Entry;

        $r14 = r21.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        specialinvoke $r13.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: void <init>(org.apache.batik.util.SoftDoublyIndexedTable,int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.SoftDoublyIndexedTable$Entry)>(r0, i1, r1, r2, r7, $r14);

        r20.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next> = $r13;

        return $r12;

     label3:
        r20 = r21;

        r21 = r21.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

     label4:
        if r21 != null goto label2;

     label5:
        $r5 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i10 = lengthof $r5;

        $i3 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: int count>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: int count> = $i4;

        $i5 = $i10 >> 2;

        $i6 = $i10 - $i5;

        if $i3 < $i6 goto label6;

        virtualinvoke r0.<org.apache.batik.util.SoftDoublyIndexedTable: void rehash()>();

        $r11 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i7 = lengthof $r11;

        i11 = i1 % $i7;

     label6:
        $r10 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $r6 = new org.apache.batik.util.SoftDoublyIndexedTable$Entry;

        $r8 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $r9 = $r8[i11];

        specialinvoke $r6.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: void <init>(org.apache.batik.util.SoftDoublyIndexedTable,int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.batik.util.SoftDoublyIndexedTable$Entry)>(r0, i1, r1, r2, r7, $r9);

        $r10[i11] = $r6;

        return null;
    }

    public void clear()
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] $r1;
        java.lang.ref.ReferenceQueue $r2;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        $r1 = newarray (org.apache.batik.util.SoftDoublyIndexedTable$Entry)[11];

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table> = $r1;

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: int count> = 0;

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.ref.ReferenceQueue referenceQueue> = $r2;

        return;
    }

    protected void rehash()
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] r1, $r2, $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry r3, $r6, r8;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        r1 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        $i2 = $i1 + 1;

        $r2 = newarray (org.apache.batik.util.SoftDoublyIndexedTable$Entry)[$i2];

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table> = $r2;

        $i3 = lengthof r1;

        i7 = $i3 - 1;

        goto label4;

     label1:
        r8 = r1[i7];

        goto label3;

     label2:
        r3 = r8;

        r8 = r8.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        $i5 = r3.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: int hash>;

        $r4 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i4 = lengthof $r4;

        i6 = $i5 % $i4;

        $r5 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $r6 = $r5[i6];

        r3.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next> = $r6;

        $r7 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $r7[i6] = r3;

     label3:
        if r8 != null goto label2;

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label4:
        if i7 >= 0 goto label1;

        return;
    }

    protected int hashCode(java.lang.Object, java.lang.Object)
    {
        org.apache.batik.util.SoftDoublyIndexedTable r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r0, r1;

        r2 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        $i1 = $i2;

        if r1 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

     label4:
        $i0 = $i1 ^ $i3;

        return $i0;
    }

    protected void removeClearedEntries()
    {
        org.apache.batik.util.SoftDoublyIndexedTable r0;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry[] $r1, $r2, $r6;
        java.lang.ref.ReferenceQueue $r8;
        int $i0, $i1, i2, $i3, $i4;
        java.lang.ref.Reference $r9;
        org.apache.batik.util.SoftDoublyIndexedTable$Entry r3, $r4, $r5, r7, $r10;

        r0 := @this: org.apache.batik.util.SoftDoublyIndexedTable;

        goto label6;

     label1:
        $i1 = $r10.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: int hash>;

        $r1 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $i0 = lengthof $r1;

        i2 = $i1 % $i0;

        $r2 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        r7 = $r2[i2];

        if r7 != $r10 goto label4;

        $r6 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: org.apache.batik.util.SoftDoublyIndexedTable$Entry[] table>;

        $r5 = $r10.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        $r6[i2] = $r5;

        goto label5;

     label2:
        r3 = r7.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        if r3 != $r10 goto label3;

        $r4 = $r10.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next>;

        r7.<org.apache.batik.util.SoftDoublyIndexedTable$Entry: org.apache.batik.util.SoftDoublyIndexedTable$Entry next> = $r4;

        goto label5;

     label3:
        r7 = r3;

     label4:
        if r7 != null goto label2;

     label5:
        $i3 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: int count>;

        $i4 = $i3 - 1;

        r0.<org.apache.batik.util.SoftDoublyIndexedTable: int count> = $i4;

     label6:
        $r8 = r0.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.ref.ReferenceQueue referenceQueue>;

        $r9 = virtualinvoke $r8.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        $r10 = (org.apache.batik.util.SoftDoublyIndexedTable$Entry) $r9;

        if $r10 != null goto label1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.batik.util.SoftDoublyIndexedTable: int INITIAL_CAPACITY> = 11;

        return;
    }
}
