public abstract class org.apache.xerces.impl.dv.xs.AbstractDateTimeDV extends org.apache.xerces.impl.dv.xs.TypeValidator
{
    private static final boolean DEBUG;
    protected static final int YEAR;
    protected static final int MONTH;
    protected static final int DAY;
    protected static final javax.xml.datatype.DatatypeFactory datatypeFactory;

    public void <init>()
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        specialinvoke r0.<org.apache.xerces.impl.dv.xs.TypeValidator: void <init>()>();

        return;
    }

    public short getAllowedFacets()
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        return 2552;
    }

    public boolean isIdentical(java.lang.Object, java.lang.Object)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2, r3;
        int $i0, $i1, $i2, $i3;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r4;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r4 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) r0;

        r3 = (org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) r1;

        $i1 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        $i0 = r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        if $i1 != $i0 goto label3;

        $i3 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        $i2 = r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        if $i3 != $i2 goto label3;

        $z2 = virtualinvoke r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: boolean equals(java.lang.Object)>(r3);

        return $z2;

     label3:
        return 0;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        short $s0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData $r3, $r4;
        int $i1;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) r1;

        $r3 = (org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) r2;

        $s0 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: short compareDates(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,boolean)>($r4, $r3, 1);

        $i1 = (int) $s0;

        return $i1;
    }

    protected short compareDates(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData, boolean)
    {
        short $s4, $s5, $s6, $s7, $s8;
        int $i0, $i1, $i2, $i3, $i9, $i11, $i13, $i15, $i16, $i18;
        boolean z0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0, r1, $r4;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r3;

        r3 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        r1 := @parameter1: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        z0 := @parameter2: boolean;

        $i1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        $i0 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i1 != $i0 goto label1;

        $s8 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: short compareOrder(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r0, r1);

        return $s8;

     label1:
        $r4 = new org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        specialinvoke $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: void <init>(java.lang.String,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV)>(null, r3);

        $i2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i2 != 90 goto label4;

        specialinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void cloneDate(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r1, $r4);

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = 14;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = 0;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = 43;

        virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r4);

        $s6 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: short compareOrder(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r0, $r4);

        $i9 = (int) $s6;

        $i11 = (int) -1;

        if $i9 != $i11 goto label2;

        return $s6;

     label2:
        specialinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void cloneDate(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r1, $r4);

        $i13 = (int) -14;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = $i13;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = 0;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = 45;

        virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r4);

        $s7 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: short compareOrder(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r0, $r4);

        if $s7 != 1 goto label3;

        return $s7;

     label3:
        return 2;

     label4:
        $i3 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i3 != 90 goto label7;

        specialinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void cloneDate(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r0, $r4);

        $i15 = (int) -14;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = $i15;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = 0;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = 45;

        virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r4);

        $s4 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: short compareOrder(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r4, r1);

        $i16 = (int) $s4;

        $i18 = (int) -1;

        if $i16 != $i18 goto label5;

        return $s4;

     label5:
        specialinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void cloneDate(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r0, $r4);

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = 14;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = 0;

        $r4.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = 43;

        virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r4);

        $s5 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: short compareOrder(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>($r4, r1);

        if $s5 != 1 goto label6;

        return $s5;

     label6:
        return 2;

     label7:
        return 2;
    }

    protected short compareOrder(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        byte $b14, $b15;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r2;
        short $s29, $s31, $s33, $s35, $s37, $s40, $s43;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i38, $i41;
        double $d0, $d1, $d2, $d3;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0, r1;

        r2 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        r1 := @parameter1: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $i0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int position>;

        if $i0 >= 1 goto label02;

        $i25 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i24 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        if $i25 >= $i24 goto label01;

        $s29 = (short) -1;

        return $s29;

     label01:
        $i27 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i26 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        if $i27 <= $i26 goto label02;

        return 1;

     label02:
        $i1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int position>;

        if $i1 >= 2 goto label04;

        $i21 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i20 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        if $i21 >= $i20 goto label03;

        $s31 = (short) -1;

        return $s31;

     label03:
        $i23 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i22 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        if $i23 <= $i22 goto label04;

        return 1;

     label04:
        $i3 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i2 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        if $i3 >= $i2 goto label05;

        $s33 = (short) -1;

        return $s33;

     label05:
        $i5 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i4 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        if $i5 <= $i4 goto label06;

        return 1;

     label06:
        $i7 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        $i6 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        if $i7 >= $i6 goto label07;

        $s35 = (short) -1;

        return $s35;

     label07:
        $i9 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        $i8 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        if $i9 <= $i8 goto label08;

        return 1;

     label08:
        $i11 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        $i10 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        if $i11 >= $i10 goto label09;

        $s37 = (short) -1;

        return $s37;

     label09:
        $i13 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        $i12 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        if $i13 <= $i12 goto label10;

        return 1;

     label10:
        $d1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $d0 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $b14 = $d1 cmpg $d0;

        $i38 = (int) $b14;

        if $i38 >= 0 goto label11;

        $s40 = (short) -1;

        return $s40;

     label11:
        $d3 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $d2 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $b15 = $d3 cmpl $d2;

        $i41 = (int) $b15;

        if $i41 <= 0 goto label12;

        return 1;

     label12:
        $i17 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        $i16 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i17 >= $i16 goto label13;

        $s43 = (short) -1;

        return $s43;

     label13:
        $i19 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        $i18 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        if $i19 <= $i18 goto label14;

        return 1;

     label14:
        return 0;
    }

    protected void getTime(java.lang.String, int, int, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) throws java.lang.RuntimeException
    {
        int $i0, $i2, i4, $i5, i6, i7, i8, i9, i10, $i11, $i12, $i13;
        java.lang.String r2;
        double $d0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        char $c1, $c3;
        java.lang.RuntimeException $r5, $r6;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r2 := @parameter0: java.lang.String;

        i6 := @parameter1: int;

        i4 := @parameter2: int;

        r0 := @parameter3: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        i7 = i6 + 2;

        $i0 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>(r2, i6, i7);

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour> = $i0;

        i8 = i7 + 1;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i7);

        $i12 = (int) $c1;

        if $i12 == 58 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r5;

     label1:
        i9 = i8 + 2;

        $i2 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>(r2, i8, i9);

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute> = $i2;

        i10 = i9 + 1;

        $c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i9);

        $i13 = (int) $c3;

        if $i13 == 58 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r6;

     label2:
        $i5 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int findUTCSign(java.lang.String,int,int)>(r2, i8, i4);

        if $i5 >= 0 goto label3;

        $i11 = i4;

        goto label4;

     label3:
        $i11 = $i5;

     label4:
        $d0 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: double parseSecond(java.lang.String,int,int)>(r2, i10, $i11);

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second> = $d0;

        if $i5 <= 0 goto label5;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void getTimeZone(java.lang.String,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,int,int)>(r2, r0, $i5, i4);

     label5:
        return;
    }

    protected int getDate(java.lang.String, int, int, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) throws java.lang.RuntimeException
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        char $c2;
        java.lang.RuntimeException $r4;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        int i0, $i1, i3, $i4, i5, i6, $i7;
        java.lang.String r1;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $i1 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int getYearMonth(java.lang.String,int,int,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)>(r1, i5, i0, r2);

        i6 = $i1 + 1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        $i7 = (int) $c2;

        if $i7 == 45 goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("CCYY-MM must be followed by \'-\' sign");

        throw $r4;

     label1:
        i3 = i6 + 2;

        $i4 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>(r1, i6, i3);

        r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = $i4;

        return i3;
    }

    protected int getYearMonth(java.lang.String, int, int, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) throws java.lang.RuntimeException
    {
        int i1, $i2, i3, $i4, $i6, i8, i9, i10, $i11, $i13, $i14, $i15;
        java.lang.String r0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        char $c0, $c5, $c7;
        java.lang.RuntimeException $r7, $r8, $r9, $r10;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c0;

        if $i11 != 45 goto label1;

        i8 = i8 + 1;

     label1:
        $i2 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int indexOf(java.lang.String,int,int,char)>(r0, i8, i1, 45);

        $i13 = (int) -1;

        if $i2 != $i13 goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Year separator is missing or misplaced");

        throw $r7;

     label2:
        i3 = $i2 - i8;

        if i3 >= 4 goto label3;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Year must have \'CCYY\' format");

        throw $r8;

     label3:
        if i3 <= 4 goto label4;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i8);

        $i14 = (int) $c7;

        if $i14 != 48 goto label4;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Leading zeros are required if the year value would otherwise have fewer than four digits; otherwise they are forbidden");

        throw $r9;

     label4:
        $i4 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseIntYear(java.lang.String,int)>(r0, $i2);

        r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $i4;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i15 = (int) $c5;

        if $i15 == 45 goto label5;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("CCYY must be followed by \'-\' sign");

        throw $r10;

     label5:
        i9 = $i2 + 1;

        i10 = i9 + 2;

        $i6 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>(r0, i9, i10);

        r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = $i6;

        return i10;
    }

    protected void parseTimeZone(java.lang.String, int, int, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData) throws java.lang.RuntimeException
    {
        int i0, i1;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        java.lang.String r1;
        java.lang.RuntimeException $r3;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        if i0 >= i1 goto label2;

        $z0 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: boolean isNextCharUTCSign(java.lang.String,int,int)>(r1, i0, i1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in month parsing");

        throw $r3;

     label1:
        virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void getTimeZone(java.lang.String,org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData,int,int)>(r1, r2, i0, i1);

     label2:
        return;
    }

    protected void getTimeZone(java.lang.String, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData, int, int) throws java.lang.RuntimeException
    {
        byte $b20, $b21;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r3;
        int i2, $i3, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i18, i19, $i22, $i23, $i24, $i25;
        java.lang.String r1;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        char $c0, $c1, $c4, $c7;
        java.lang.RuntimeException $r7, $r8, $r9, $r10;

        r3 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        i15 := @parameter2: int;

        i2 := @parameter3: int;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i22 = (int) $c0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = $i22;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i23 = (int) $c1;

        if $i23 != 90 goto label2;

        i16 = i15 + 1;

        if i2 <= i16 goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r7;

     label1:
        return;

     label2:
        $i3 = i2 - 6;

        if i15 > $i3 goto label8;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $i24 = (int) $c4;

        if $i24 != 45 goto label3;

        $b21 = -1;

        $b20 = -1;

        goto label4;

     label3:
        $b21 = 1;

        $b20 = 1;

     label4:
        i18 = i15 + 1;

        $i14 = i18 + 2;

        $i5 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>(r1, i18, $i14);

        $i6 = $b21 * $i5;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = $i6;

        i19 = $i14 + 1;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i14);

        $i25 = (int) $c7;

        if $i25 == 58 goto label5;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r8;

     label5:
        $i8 = i19 + 2;

        $i9 = virtualinvoke r3.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>(r1, i19, $i8);

        $i10 = $b20 * $i9;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = $i10;

        $i11 = i19 + 2;

        if $i11 == i2 goto label6;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r9;

     label6:
        $i12 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        if $i12 != 0 goto label7;

        $i13 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        if $i13 == 0 goto label9;

     label7:
        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: boolean normalized> = 0;

        goto label9;

     label8:
        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in parsing time zone");

        throw $r10;

     label9:
        return;
    }

    protected int indexOf(java.lang.String, int, int, char)
    {
        char $c2, c3;
        int i0, i1, i4, $i5, $i6, $i8;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        java.lang.String r0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c3 := @parameter3: char;

        i4 = i0;

        goto label3;

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i5 = (int) $c2;

        $i6 = (int) c3;

        if $i5 != $i6 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 < i1 goto label1;

        $i8 = (int) -1;

        return $i8;
    }

    protected void validateDateTime(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        byte $b11, $b18, $b19;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i38, $i40;
        double $d0, $d1, $d2;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        java.lang.RuntimeException $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;

        r2 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $i0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        if $i0 != 0 goto label01;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("The year \"0000\" is an illegal year value");

        throw $r11;

     label01:
        $i1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        if $i1 < 1 goto label02;

        $i2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        if $i2 <= 12 goto label03;

     label02:
        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("The month must have values 1 to 12");

        throw $r12;

     label03:
        $i5 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i4 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i3 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i6 = virtualinvoke r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int maxDayInMonthFor(int,int)>($i4, $i3);

        if $i5 > $i6 goto label04;

        $i7 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        if $i7 >= 1 goto label05;

     label04:
        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("The day must have values 1 to 31");

        throw $r13;

     label05:
        $i8 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        if $i8 > 23 goto label06;

        $i31 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        if $i31 >= 0 goto label08;

     label06:
        $i9 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        if $i9 != 24 goto label07;

        $i10 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        if $i10 != 0 goto label07;

        $d0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $b11 = $d0 cmpl 0.0;

        if $b11 != 0 goto label07;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour> = 0;

        $i12 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i13 = $i12 + 1;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = $i13;

        $i15 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i14 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i16 = virtualinvoke r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int maxDayInMonthFor(int,int)>($i15, $i14);

        if $i13 <= $i16 goto label08;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = 1;

        $i27 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i28 = $i27 + 1;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = $i28;

        if $i28 <= 12 goto label08;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = 1;

        $i29 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i30 = $i29 + 1;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $i30;

        if $i30 != 0 goto label08;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = 1;

        goto label08;

     label07:
        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("Hour must have values 0-23, unless 24:00:00");

        throw $r14;

     label08:
        $i32 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        if $i32 > 59 goto label09;

        $i17 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        if $i17 >= 0 goto label10;

     label09:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("Minute must have values 0-59");

        throw $r15;

     label10:
        $d1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $b18 = $d1 cmpl 60.0;

        $i33 = (int) $b18;

        if $i33 >= 0 goto label11;

        $d2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        $b19 = $d2 cmpg 0.0;

        $i34 = (int) $b19;

        if $i34 >= 0 goto label12;

     label11:
        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Second must have values 0-59");

        throw $r16;

     label12:
        $i20 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        if $i20 > 14 goto label13;

        $i21 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        $i36 = (int) -14;

        if $i21 >= $i36 goto label14;

     label13:
        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("Time zone should have range -14:00 to +14:00");

        throw $r17;

     label14:
        $i22 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        if $i22 == 14 goto label15;

        $i26 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        $i38 = (int) -14;

        if $i26 != $i38 goto label16;

     label15:
        $i23 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        if $i23 == 0 goto label16;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Time zone should have range -14:00 to +14:00");

        throw $r18;

     label16:
        $i24 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        if $i24 > 59 goto label17;

        $i25 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        $i40 = (int) -59;

        if $i25 >= $i40 goto label18;

     label17:
        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("Minute must have values 0-59");

        throw $r19;

     label18:
        return;
    }

    protected int findUTCSign(java.lang.String, int, int)
    {
        char $c2;
        int i0, i1, i3, $i4, $i5, $i6, $i8;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        java.lang.String r0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = i0;

        goto label4;

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 == 90 goto label2;

        $i5 = (int) $c2;

        if $i5 == 43 goto label2;

        $i6 = (int) $c2;

        if $i6 != 45 goto label3;

     label2:
        return i3;

     label3:
        i3 = i3 + 1;

     label4:
        if i3 < i1 goto label1;

        $i8 = (int) -1;

        return $i8;
    }

    protected final boolean isNextCharUTCSign(java.lang.String, int, int)
    {
        char $c2;
        int i0, i1, $i3, $i4, $i5;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 >= i1 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $i3 = (int) $c2;

        if $i3 == 90 goto label1;

        $i4 = (int) $c2;

        if $i4 == 43 goto label1;

        $i5 = (int) $c2;

        if $i5 != 45 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        return 0;
    }

    protected int parseInt(java.lang.String, int, int) throws java.lang.NumberFormatException
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17;
        int i0, $i2, $i3, i4, $i5, i6, i7, i8;
        java.lang.String r0, $r6, $r12, $r18;
        char $c1;
        java.lang.NumberFormatException $r1, $r7, $r13;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r19;

        r19 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i6 = 0;

        i7 = i0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i2 = staticinvoke <org.apache.xerces.impl.dv.xs.TypeValidator: int getDigit(char)>($c1);

        if $i2 >= 0 goto label2;

        $r13 = new java.lang.NumberFormatException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label2:
        if i6 >= -214748364 goto label3;

        $r7 = new java.lang.NumberFormatException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label3:
        i8 = i6 * 10;

        $i3 = -2147483647 + $i2;

        if i8 >= $i3 goto label4;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label4:
        i6 = i8 - $i2;

        i7 = i7 + 1;

        if i7 < i4 goto label1;

        $i5 = neg i6;

        return $i5;
    }

    protected int parseIntYear(java.lang.String, int)
    {
        boolean z0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r25;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11, $r15, $r16, $r17, $r21, $r22, $r23, $r26, $r28, $r30, $r32;
        int i1, $i2, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, $i14;
        java.lang.String r0, $r6, $r12, $r18, $r24;
        char $c0, $c3;
        java.lang.NumberFormatException $r27, $r29, $r31, $r33;

        r25 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i8 = 0;

        z0 = 0;

        i9 = 0;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i14 = (int) $c0;

        if $i14 != 45 goto label1;

        z0 = 1;

        i10 = -2147483648;

        i13 = -2147483648;

        i12 = -2147483648;

        i9 = 1;

        goto label2;

     label1:
        i10 = -2147483647;

        i13 = -2147483647;

        i12 = -2147483647;

     label2:
        $i7 = i12 / 10;

        goto label7;

     label3:
        $i2 = i9;

        i9 = i9 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i4 = staticinvoke <org.apache.xerces.impl.dv.xs.TypeValidator: int getDigit(char)>($c3);

        if $i4 >= 0 goto label4;

        $r27 = new java.lang.NumberFormatException;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r18);

        throw $r27;

     label4:
        if i8 >= $i7 goto label5;

        $r29 = new java.lang.NumberFormatException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r12);

        throw $r29;

     label5:
        i11 = i8 * 10;

        $i5 = i13 + $i4;

        if i11 >= $i5 goto label6;

        $r31 = new java.lang.NumberFormatException;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r31;

     label6:
        i8 = i11 - $i4;

     label7:
        if i9 < i1 goto label3;

        if z0 == 0 goto label9;

        if i9 <= 1 goto label8;

        return i8;

     label8:
        $r33 = new java.lang.NumberFormatException;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r24);

        throw $r33;

     label9:
        $i6 = neg i8;

        return $i6;
    }

    protected void normalize(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        byte b37, $b38;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, $i33, $i34, $i35, $i36, $i40, $i42;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $i2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        $i0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        $i40 = (int) -1;

        $i1 = $i40 * $i0;

        i31 = $i2 + $i1;

        $i3 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int fQuotient(int,int)>(i31, 60);

        $i4 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int mod(int,int,int)>(i31, 60, $i3);

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute> = $i4;

        $i7 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        $i5 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        $i42 = (int) -1;

        $i6 = $i42 * $i5;

        $i8 = $i7 + $i6;

        i32 = $i8 + $i3;

        $i9 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int fQuotient(int,int)>(i32, 24);

        $i10 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int mod(int,int,int)>(i32, 24, $i9);

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour> = $i10;

        $i11 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i12 = $i11 + $i9;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = $i12;

        goto label1;

     label1:
        $i33 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i34 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i35 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int maxDayInMonthFor(int,int)>($i33, $i34);

        $i36 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        if $i36 >= 1 goto label2;

        $i27 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i26 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i24 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i25 = $i24 - 1;

        $i28 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int maxDayInMonthFor(int,int)>($i26, $i25);

        $i29 = $i27 + $i28;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = $i29;

        b37 = -1;

        goto label3;

     label2:
        $i13 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        if $i13 <= $i35 goto label7;

        $i14 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        $i15 = $i14 - $i35;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = $i15;

        b37 = 1;

     label3:
        $i16 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        $i30 = $i16 + b37;

        $i17 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int modulo(int,int,int)>($i30, 1, 13);

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = $i17;

        $i18 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        $i19 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int fQuotient(int,int,int)>($i30, 1, 13);

        $i20 = $i18 + $i19;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $i20;

        $i21 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        if $i21 != 0 goto label1;

        $i22 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        if $i22 < 0 goto label4;

        $i23 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        if $i23 >= 0 goto label5;

     label4:
        $b38 = 1;

        goto label6;

     label5:
        $b38 = -1;

     label6:
        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $b38;

        goto label1;

     label7:
        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = 90;

        return;
    }

    protected void saveUnnormalized(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        double $d0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $i0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormYear> = $i0;

        $i1 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormMonth> = $i1;

        $i2 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormDay> = $i2;

        $i3 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormHour> = $i3;

        $i4 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int unNormMinute> = $i4;

        $d0 = r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double unNormSecond> = $d0;

        return;
    }

    protected void resetDateObj(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second> = 0.0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = 0;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = 0;

        return;
    }

    protected int maxDayInMonthFor(int, int)
    {
        int i0, i1;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 == 4 goto label1;

        if i0 == 6 goto label1;

        if i0 == 9 goto label1;

        if i0 != 11 goto label2;

     label1:
        return 30;

     label2:
        if i0 != 2 goto label4;

        $z0 = specialinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: boolean isLeapYear(int)>(i1);

        if $z0 == 0 goto label3;

        return 29;

     label3:
        return 28;

     label4:
        return 31;
    }

    private boolean isLeapYear(int)
    {
        int i0, $i1, $i2, $i3;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        i0 := @parameter0: int;

        $i1 = i0 % 4;

        if $i1 != 0 goto label2;

        $i2 = i0 % 100;

        if $i2 != 0 goto label1;

        $i3 = i0 % 400;

        if $i3 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected int mod(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i1 * i2;

        $i4 = i0 - $i3;

        return $i4;
    }

    protected int fQuotient(int, int)
    {
        int i0, i1, $i2;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        float $f0, $f1, $f2;
        double $d0, $d1;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        $f2 = $f1 / $f0;

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i2 = (int) $d1;

        return $i2;
    }

    protected int modulo(int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i3 := @parameter2: int;

        i2 = i0 - i1;

        i4 = i3 - i1;

        $i5 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int fQuotient(int,int)>(i2, i4);

        $i6 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int mod(int,int,int)>(i2, i4, $i5);

        $i7 = $i6 + i1;

        return $i7;
    }

    protected int fQuotient(int, int, int)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = i0 - i1;

        $i3 = i2 - i1;

        $i5 = virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int fQuotient(int,int)>($i4, $i3);

        return $i5;
    }

    protected java.lang.String dateToString(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        char $c6;
        java.lang.StringBuffer $r4;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.String $r3;
        double $d0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r2 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(25);

        $i0 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i0, 4);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i1 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i1, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $i2 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i2, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);

        $i3 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i3, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $i4 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i4, 2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $d0 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,double)>($r4, $d0);

        $i5 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        $c6 = (char) $i5;

        $i7 = (int) $c6;

        virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append(java.lang.StringBuffer,int,int)>($r4, $i7, 0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    protected final void append(java.lang.StringBuffer, int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i2;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        char $c1;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.StringBuffer;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i2 != -2147483648 goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        return;

     label1:
        if i2 >= 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i2 = neg i2;

     label2:
        if i0 != 4 goto label6;

        if i2 >= 10 goto label3;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("000");

        goto label5;

     label3:
        if i2 >= 100 goto label4;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("00");

        goto label5;

     label4:
        if i2 >= 1000 goto label5;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label5:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        goto label9;

     label6:
        if i0 != 2 goto label8;

        if i2 >= 10 goto label7;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label7:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        goto label9;

     label8:
        if i2 == 0 goto label9;

        $c1 = (char) i2;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label9:
        return;
    }

    protected final void append(java.lang.StringBuffer, double)
    {
        byte $b0, $b1;
        java.lang.StringBuffer r1;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        int $i2, $i3;
        double d0;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: java.lang.StringBuffer;

        d0 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        d0 = neg d0;

     label1:
        $b1 = d0 cmpg 10.0;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

     label2:
        virtualinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append2(java.lang.StringBuffer,double)>(r1, d0);

        return;
    }

    protected final void append2(java.lang.StringBuffer, double)
    {
        byte $b1;
        java.lang.StringBuffer r1;
        int i0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        double d0, $d1;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: java.lang.StringBuffer;

        d0 := @parameter1: double;

        i0 = (int) d0;

        $d1 = (double) i0;

        $b1 = d0 cmpl $d1;

        if $b1 != 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append3(java.lang.StringBuffer,double)>(r1, d0);

     label2:
        return;
    }

    private void append3(java.lang.StringBuffer, double)
    {
        byte $b1;
        java.lang.StringBuffer r2;
        int $i0, $i2, $i3, $i4, $i6, $i7, $i8, i11, i12, i13, i14, i15, i16, $i18, $i19, $i20, $i22, $i23, $i24, $i26;
        java.lang.String $r0;
        double d0;
        char $c5, $c9, $c10;
        java.lang.Exception $r3, $r4;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r2 := @parameter0: java.lang.StringBuffer;

        d0 := @parameter1: double;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(69);

        $i18 = (int) -1;

        if $i0 != $i18 goto label01;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        return;

     label01:
        $b1 = d0 cmpg 1.0;

        $i19 = (int) $b1;

        if $i19 >= 0 goto label15;

     label02:
        $i6 = $i0 + 2;

        $i7 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i8 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>($r0, $i6, $i7);

     label03:
        goto label05;

     label04:
        $r4 := @caughtexception;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        return;

     label05:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0.");

        i11 = 1;

        goto label07;

     label06:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        i11 = i11 + 1;

     label07:
        if i11 < $i8 goto label06;

        i12 = $i0 - 1;

        goto label10;

     label08:
        $c9 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i12);

        $i20 = (int) $c9;

        if $i20 == 48 goto label09;

        goto label11;

     label09:
        $i22 = (int) -1;

        i12 = i12 + $i22;

     label10:
        if i12 > 0 goto label08;

     label11:
        i13 = 0;

        goto label14;

     label12:
        $c10 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i13);

        $i23 = (int) $c10;

        if $i23 == 46 goto label13;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

     label13:
        i13 = i13 + 1;

     label14:
        if i13 <= i12 goto label12;

        goto label25;

     label15:
        $i2 = $i0 + 1;

        $i3 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i4 = virtualinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int parseInt(java.lang.String,int,int)>($r0, $i2, $i3);

     label16:
        goto label18;

     label17:
        $r3 := @caughtexception;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        return;

     label18:
        i14 = $i4 + 2;

        i15 = 0;

        goto label22;

     label19:
        $c5 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i15);

        $i24 = (int) $c5;

        if $i24 == 46 goto label21;

        if i15 != i14 goto label20;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label20:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c5);

     label21:
        i15 = i15 + 1;

     label22:
        if i15 < $i0 goto label19;

        i16 = i14 - $i0;

        goto label24;

     label23:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        $i26 = (int) -1;

        i16 = i16 + $i26;

     label24:
        if i16 > 0 goto label23;

     label25:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label15 to label16 with label17;
    }

    protected double parseSecond(java.lang.String, int, int) throws java.lang.NumberFormatException
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r20;
        java.lang.StringBuffer $r3, $r4, $r5, $r9, $r10, $r11, $r16, $r17, $r18, $r21, $r23, $r25;
        int i0, i1, $i3, $i4, $i5, i6, i7, $i9, $i10, $i11, $i12, $i14;
        java.lang.String r0, $r6, $r12, $r13, $r19;
        double $d0;
        char $c2;
        java.lang.NumberFormatException $r22, $r24, $r26;

        r20 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i9 = (int) -1;

        i6 = $i9;

        i7 = i0;

        goto label5;

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        $i10 = (int) $c2;

        if $i10 != 46 goto label2;

        i6 = i7;

        goto label4;

     label2:
        $i11 = (int) $c2;

        if $i11 > 57 goto label3;

        $i12 = (int) $c2;

        if $i12 >= 48 goto label4;

     label3:
        $r22 = new java.lang.NumberFormatException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r22;

     label4:
        i7 = i7 + 1;

     label5:
        if i7 < i1 goto label1;

        $i14 = (int) -1;

        if i6 != $i14 goto label6;

        $i5 = i0 + 2;

        if $i5 == i1 goto label8;

        $r24 = new java.lang.NumberFormatException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r19);

        throw $r24;

     label6:
        $i3 = i0 + 2;

        if $i3 != i6 goto label7;

        $i4 = i6 + 1;

        if $i4 != i1 goto label8;

     label7:
        $r26 = new java.lang.NumberFormatException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has wrong format");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r12);

        throw $r26;

     label8:
        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r13);

        return $d0;
    }

    private void cloneDate(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData, org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r2;
        double $d0;

        r2 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        r0 := @parameter1: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $i0 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int year> = $i0;

        $i1 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int month> = $i1;

        $i2 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int day> = $i2;

        $i3 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int hour> = $i3;

        $i4 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int minute> = $i4;

        $d0 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double second> = $d0;

        $i5 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int utc> = $i5;

        $i6 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneHr> = $i6;

        $i7 = r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin>;

        r0.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: int timezoneMin> = $i7;

        return;
    }

    protected javax.xml.datatype.XMLGregorianCalendar getXMLGregorianCalendar(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r1;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        return null;
    }

    protected javax.xml.datatype.Duration getDuration(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r0;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r1;

        r0 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r1 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        return null;
    }

    protected final java.math.BigDecimal getFractionalSecondsAsBigDecimal(org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData)
    {
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData r2;
        java.math.BigDecimal $r6, $r8;
        java.lang.StringBuffer $r7;
        org.apache.xerces.impl.dv.xs.AbstractDateTimeDV r1;
        int $i0, $i1, $i3;
        java.lang.String $r3, $r4;
        double $d0;

        r1 := @this: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV;

        r2 := @parameter0: org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $d0 = r2.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV$DateTimeData: double unNormSecond>;

        specialinvoke r1.<org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: void append3(java.lang.StringBuffer,double)>($r7, $d0);

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i0);

        $r8 = new java.math.BigDecimal;

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.lang.String)>($r4);

        $r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(0L);

        $i1 = virtualinvoke $r8.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r6);

        if $i1 != 0 goto label2;

        return null;

     label2:
        return $r8;
    }

    static void <clinit>()
    {
        org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl $r0;

        <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int DAY> = 1;

        <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int MONTH> = 1;

        <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: int YEAR> = 2000;

        <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: boolean DEBUG> = 0;

        $r0 = new org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl;

        specialinvoke $r0.<org.apache.xerces.jaxp.datatype.DatatypeFactoryImpl: void <init>()>();

        <org.apache.xerces.impl.dv.xs.AbstractDateTimeDV: javax.xml.datatype.DatatypeFactory datatypeFactory> = $r0;

        return;
    }
}
