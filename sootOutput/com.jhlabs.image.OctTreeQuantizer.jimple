public class com.jhlabs.image.OctTreeQuantizer extends java.lang.Object implements com.jhlabs.image.Quantizer
{
    static final int MAX_LEVEL;
    private int nodes;
    private com.jhlabs.image.OctTreeQuantizer$OctTreeNode root;
    private int reduceColors;
    private int maximumColors;
    private int colors;
    private java.util.Vector[] colorList;

    public void <init>()
    {
        com.jhlabs.image.OctTreeQuantizer r0;
        java.util.Vector $r3;
        int i0;
        java.util.Vector[] $r1, $r4;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode $r2;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jhlabs.image.OctTreeQuantizer: int nodes> = 0;

        r0.<com.jhlabs.image.OctTreeQuantizer: int colors> = 0;

        virtualinvoke r0.<com.jhlabs.image.OctTreeQuantizer: void setup(int)>(256);

        $r1 = newarray (java.util.Vector)[6];

        r0.<com.jhlabs.image.OctTreeQuantizer: java.util.Vector[] colorList> = $r1;

        i0 = 0;

     label1:
        if i0 >= 6 goto label2;

        $r4 = r0.<com.jhlabs.image.OctTreeQuantizer: java.util.Vector[] colorList>;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r4[i0] = $r3;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = new com.jhlabs.image.OctTreeQuantizer$OctTreeNode;

        specialinvoke $r2.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: void <init>(com.jhlabs.image.OctTreeQuantizer)>(r0);

        r0.<com.jhlabs.image.OctTreeQuantizer: com.jhlabs.image.OctTreeQuantizer$OctTreeNode root> = $r2;

        return;
    }

    public void setup(int)
    {
        com.jhlabs.image.OctTreeQuantizer r0;
        int i0, $i1, $i2;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.OctTreeQuantizer: int maximumColors> = i0;

        $i1 = i0 * 2;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(512, $i1);

        r0.<com.jhlabs.image.OctTreeQuantizer: int reduceColors> = $i2;

        return;
    }

    public void addPixels(int[], int, int)
    {
        com.jhlabs.image.OctTreeQuantizer r0;
        int[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        r1 := @parameter0: int[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i7 = 0;

     label1:
        if i7 >= i0 goto label3;

        $i2 = i7 + i1;

        $i3 = r1[$i2];

        specialinvoke r0.<com.jhlabs.image.OctTreeQuantizer: void insertColor(int)>($i3);

        $i5 = r0.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i4 = r0.<com.jhlabs.image.OctTreeQuantizer: int reduceColors>;

        if $i5 <= $i4 goto label2;

        $i6 = r0.<com.jhlabs.image.OctTreeQuantizer: int reduceColors>;

        specialinvoke r0.<com.jhlabs.image.OctTreeQuantizer: void reduceTree(int)>($i6);

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        return;
    }

    public int getIndexForColor(int)
    {
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] $r2;
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        boolean $z0;
        java.io.PrintStream $r1;
        com.jhlabs.image.OctTreeQuantizer r0;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode $r3, r4;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        i0 := @parameter0: int;

        $i1 = i0 >> 16;

        i2 = $i1 & 255;

        $i3 = i0 >> 8;

        i4 = $i3 & 255;

        i5 = i0 & 255;

        r4 = r0.<com.jhlabs.image.OctTreeQuantizer: com.jhlabs.image.OctTreeQuantizer$OctTreeNode root>;

        i12 = 0;

     label1:
        if i12 > 5 goto label7;

        i6 = 128 >> i12;

        i13 = 0;

        $i7 = i2 & i6;

        if $i7 == 0 goto label2;

        i13 = 4;

     label2:
        $i8 = i4 & i6;

        if $i8 == 0 goto label3;

        i13 = i13 + 2;

     label3:
        $i9 = i5 & i6;

        if $i9 == 0 goto label4;

        i13 = i13 + 1;

     label4:
        $r2 = r4.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        $r3 = $r2[i13];

        if $r3 != null goto label5;

        $i11 = r4.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int index>;

        return $i11;

     label5:
        $z0 = $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label6;

        $i10 = $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int index>;

        return $i10;

     label6:
        r4 = $r3;

        i12 = i12 + 1;

        goto label1;

     label7:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("getIndexForColor failed");

        return 0;
    }

    private void insertColor(int)
    {
        java.util.Vector $r6;
        boolean $z0;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode $r3, $r7, r8;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] $r2, $r4;
        int i0, $i1, i2, $i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25;
        java.io.PrintStream $r1;
        com.jhlabs.image.OctTreeQuantizer r0;
        java.util.Vector[] $r5;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        i0 := @parameter0: int;

        $i1 = i0 >> 16;

        i2 = $i1 & 255;

        $i3 = i0 >> 8;

        i4 = $i3 & 255;

        i5 = i0 & 255;

        r8 = r0.<com.jhlabs.image.OctTreeQuantizer: com.jhlabs.image.OctTreeQuantizer$OctTreeNode root>;

        i24 = 0;

     label1:
        if i24 > 5 goto label9;

        i6 = 128 >> i24;

        i25 = 0;

        $i7 = i2 & i6;

        if $i7 == 0 goto label2;

        i25 = 4;

     label2:
        $i8 = i4 & i6;

        if $i8 == 0 goto label3;

        i25 = i25 + 2;

     label3:
        $i9 = i5 & i6;

        if $i9 == 0 goto label4;

        i25 = i25 + 1;

     label4:
        $r2 = r8.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        $r7 = $r2[i25];

        if $r7 != null goto label6;

        $i18 = r8.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int children>;

        $i19 = $i18 + 1;

        r8.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int children> = $i19;

        $r3 = new com.jhlabs.image.OctTreeQuantizer$OctTreeNode;

        specialinvoke $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: void <init>(com.jhlabs.image.OctTreeQuantizer)>(r0);

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode parent> = r8;

        $r4 = r8.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        $r4[i25] = $r3;

        r8.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf> = 0;

        $i20 = r0.<com.jhlabs.image.OctTreeQuantizer: int nodes>;

        $i21 = $i20 + 1;

        r0.<com.jhlabs.image.OctTreeQuantizer: int nodes> = $i21;

        $r5 = r0.<com.jhlabs.image.OctTreeQuantizer: java.util.Vector[] colorList>;

        $r6 = $r5[i24];

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        if i24 != 5 goto label5;

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf> = 1;

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count> = 1;

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed> = i2;

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen> = i4;

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue> = i5;

        $r3.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int level> = i24;

        $i22 = r0.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i23 = $i22 + 1;

        r0.<com.jhlabs.image.OctTreeQuantizer: int colors> = $i23;

        return;

     label5:
        r8 = $r3;

        goto label8;

     label6:
        $z0 = $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label7;

        $i10 = $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count>;

        $i11 = $i10 + 1;

        $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count> = $i11;

        $i12 = $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed>;

        $i13 = $i12 + i2;

        $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed> = $i13;

        $i14 = $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen>;

        $i15 = $i14 + i4;

        $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen> = $i15;

        $i16 = $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue>;

        $i17 = $i16 + i5;

        $r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue> = $i17;

        return;

     label7:
        r8 = $r7;

     label8:
        i24 = i24 + 1;

        goto label1;

     label9:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("insertColor failed");

        return;
    }

    private void reduceTree(int)
    {
        java.util.Vector r3, $r10;
        boolean $z0;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode r5, r7;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, $i30;
        java.io.PrintStream $r0, $r11;
        com.jhlabs.image.OctTreeQuantizer r1;
        java.util.Vector[] $r2, $r9;
        java.lang.Object $r4;

        r1 := @this: com.jhlabs.image.OctTreeQuantizer;

        i5 := @parameter0: int;

        i26 = 4;

     label1:
        if i26 < 0 goto label9;

        $r2 = r1.<com.jhlabs.image.OctTreeQuantizer: java.util.Vector[] colorList>;

        r3 = $r2[i26];

        if r3 == null goto label8;

        $i0 = virtualinvoke r3.<java.util.Vector: int size()>();

        if $i0 <= 0 goto label8;

        i27 = 0;

     label2:
        $i1 = virtualinvoke r3.<java.util.Vector: int size()>();

        if i27 >= $i1 goto label8;

        $r4 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i27);

        r5 = (com.jhlabs.image.OctTreeQuantizer$OctTreeNode) $r4;

        $i2 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int children>;

        if $i2 <= 0 goto label7;

        i28 = 0;

     label3:
        if i28 >= 8 goto label6;

        $r6 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        r7 = $r6[i28];

        if r7 == null goto label5;

        $z0 = r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf>;

        if $z0 != 0 goto label4;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("not a leaf!");

     label4:
        $i8 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count>;

        $i7 = r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count>;

        $i9 = $i8 + $i7;

        r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count> = $i9;

        $i11 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed>;

        $i10 = r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed>;

        $i12 = $i11 + $i10;

        r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed> = $i12;

        $i14 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen>;

        $i13 = r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen>;

        $i15 = $i14 + $i13;

        r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen> = $i15;

        $i17 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue>;

        $i16 = r7.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue>;

        $i18 = $i17 + $i16;

        r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue> = $i18;

        $r8 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        $r8[i28] = null;

        $i19 = r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int children>;

        $i20 = $i19 - 1;

        r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int children> = $i20;

        $i21 = r1.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i22 = $i21 - 1;

        r1.<com.jhlabs.image.OctTreeQuantizer: int colors> = $i22;

        $i23 = r1.<com.jhlabs.image.OctTreeQuantizer: int nodes>;

        $i24 = $i23 - 1;

        r1.<com.jhlabs.image.OctTreeQuantizer: int nodes> = $i24;

        $r9 = r1.<com.jhlabs.image.OctTreeQuantizer: java.util.Vector[] colorList>;

        $i25 = i26 + 1;

        $r10 = $r9[$i25];

        virtualinvoke $r10.<java.util.Vector: boolean removeElement(java.lang.Object)>(r7);

     label5:
        i28 = i28 + 1;

        goto label3;

     label6:
        r5.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf> = 1;

        $i3 = r1.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i4 = $i3 + 1;

        r1.<com.jhlabs.image.OctTreeQuantizer: int colors> = $i4;

        $i6 = r1.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        if $i6 > i5 goto label7;

        return;

     label7:
        i27 = i27 + 1;

        goto label2;

     label8:
        $i30 = (int) -1;

        i26 = i26 + $i30;

        goto label1;

     label9:
        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Unable to reduce the OctTree");

        return;
    }

    public int[] buildColorTable()
    {
        com.jhlabs.image.OctTreeQuantizer r0;
        int[] r1;
        int $i0;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode $r2;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        $i0 = r0.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        r1 = newarray (int)[$i0];

        $r2 = r0.<com.jhlabs.image.OctTreeQuantizer: com.jhlabs.image.OctTreeQuantizer$OctTreeNode root>;

        specialinvoke r0.<com.jhlabs.image.OctTreeQuantizer: int buildColorTable(com.jhlabs.image.OctTreeQuantizer$OctTreeNode,int[],int)>($r2, r1, 0);

        return r1;
    }

    public void buildColorTable(int[], int[])
    {
        com.jhlabs.image.OctTreeQuantizer r1;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode $r3;
        int[] r0, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;

        r1 := @this: com.jhlabs.image.OctTreeQuantizer;

        r0 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 = lengthof r0;

        $i1 = lengthof r2;

        r1.<com.jhlabs.image.OctTreeQuantizer: int maximumColors> = $i1;

        i9 = 0;

     label1:
        if i9 >= i0 goto label3;

        $i5 = r0[i9];

        specialinvoke r1.<com.jhlabs.image.OctTreeQuantizer: void insertColor(int)>($i5);

        $i7 = r1.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i6 = r1.<com.jhlabs.image.OctTreeQuantizer: int reduceColors>;

        if $i7 <= $i6 goto label2;

        $i8 = r1.<com.jhlabs.image.OctTreeQuantizer: int reduceColors>;

        specialinvoke r1.<com.jhlabs.image.OctTreeQuantizer: void reduceTree(int)>($i8);

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        $i3 = r1.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i2 = r1.<com.jhlabs.image.OctTreeQuantizer: int maximumColors>;

        if $i3 <= $i2 goto label4;

        $i4 = r1.<com.jhlabs.image.OctTreeQuantizer: int maximumColors>;

        specialinvoke r1.<com.jhlabs.image.OctTreeQuantizer: void reduceTree(int)>($i4);

     label4:
        $r3 = r1.<com.jhlabs.image.OctTreeQuantizer: com.jhlabs.image.OctTreeQuantizer$OctTreeNode root>;

        specialinvoke r1.<com.jhlabs.image.OctTreeQuantizer: int buildColorTable(com.jhlabs.image.OctTreeQuantizer$OctTreeNode,int[],int)>($r3, r2, 0);

        return;
    }

    private int buildColorTable(com.jhlabs.image.OctTreeQuantizer$OctTreeNode, int[], int)
    {
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] $r2, $r4;
        int[] r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17;
        boolean $z0;
        com.jhlabs.image.OctTreeQuantizer r0;
        com.jhlabs.image.OctTreeQuantizer$OctTreeNode r1, $r3, $r6;

        r0 := @this: com.jhlabs.image.OctTreeQuantizer;

        r1 := @parameter0: com.jhlabs.image.OctTreeQuantizer$OctTreeNode;

        r5 := @parameter1: int[];

        i15 := @parameter2: int;

        $i1 = r0.<com.jhlabs.image.OctTreeQuantizer: int colors>;

        $i0 = r0.<com.jhlabs.image.OctTreeQuantizer: int maximumColors>;

        if $i1 <= $i0 goto label1;

        $i14 = r0.<com.jhlabs.image.OctTreeQuantizer: int maximumColors>;

        specialinvoke r0.<com.jhlabs.image.OctTreeQuantizer: void reduceTree(int)>($i14);

     label1:
        $z0 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label2;

        i16 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int count>;

        $i2 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalRed>;

        $i3 = $i2 / i16;

        $i4 = $i3 << 16;

        $i8 = -16777216 | $i4;

        $i5 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalGreen>;

        $i6 = $i5 / i16;

        $i7 = $i6 << 8;

        $i11 = $i8 | $i7;

        $i9 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int totalBlue>;

        $i10 = $i9 / i16;

        $i12 = $i11 | $i10;

        r5[i15] = $i12;

        $i13 = i15;

        i15 = i15 + 1;

        r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int index> = $i13;

        goto label5;

     label2:
        i17 = 0;

     label3:
        if i17 >= 8 goto label5;

        $r2 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        $r3 = $r2[i17];

        if $r3 == null goto label4;

        r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: int index> = i15;

        $r4 = r1.<com.jhlabs.image.OctTreeQuantizer$OctTreeNode: com.jhlabs.image.OctTreeQuantizer$OctTreeNode[] leaf>;

        $r6 = $r4[i17];

        i15 = specialinvoke r0.<com.jhlabs.image.OctTreeQuantizer: int buildColorTable(com.jhlabs.image.OctTreeQuantizer$OctTreeNode,int[],int)>($r6, r5, i15);

     label4:
        i17 = i17 + 1;

        goto label3;

     label5:
        return i15;
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.OctTreeQuantizer: int MAX_LEVEL> = 5;

        return;
    }
}
