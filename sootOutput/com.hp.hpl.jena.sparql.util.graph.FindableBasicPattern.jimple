class com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern extends java.lang.Object implements com.hp.hpl.jena.sparql.util.graph.Findable
{
    private com.hp.hpl.jena.sparql.core.BasicPattern triples;

    void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples> = r1;

        return;
    }

    public java.util.Iterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern r4;
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2, $r10, $r11, $r12, r13, r14, r15;
        java.util.ArrayList $r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r6, $r7;
        com.hp.hpl.jena.sparql.core.BasicPattern $r5;
        com.hp.hpl.jena.graph.Triple r9;
        java.lang.Object $r8;

        r4 := @this: com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern;

        r13 := @parameter0: com.hp.hpl.jena.graph.Node;

        r14 := @parameter1: com.hp.hpl.jena.graph.Node;

        r15 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r13 != $r0 goto label1;

        r13 = null;

     label1:
        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r14 != $r1 goto label2;

        r14 = null;

     label2:
        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r15 != $r2 goto label3;

        r15 = null;

     label3:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r4.<com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Triple) $r8;

        if r13 == null goto label5;

        $r12 = virtualinvoke r9.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z2 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r13);

        if $z2 != 0 goto label5;

        goto label4;

     label5:
        if r14 == null goto label6;

        $r11 = virtualinvoke r9.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r14);

        if $z1 != 0 goto label6;

        goto label4;

     label6:
        if r15 == null goto label7;

        $r10 = virtualinvoke r9.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r15);

        if $z0 != 0 goto label7;

        goto label4;

     label7:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label4;

     label8:
        $r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        return $r7;
    }

    public boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern r3;
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2, $r8, $r9, $r10, r11, r12, r13;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.core.BasicPattern $r4;
        com.hp.hpl.jena.graph.Triple r7;
        java.lang.Object $r6;

        r3 := @this: com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern;

        r11 := @parameter0: com.hp.hpl.jena.graph.Node;

        r12 := @parameter1: com.hp.hpl.jena.graph.Node;

        r13 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r11 != $r0 goto label1;

        r11 = null;

     label1:
        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r12 != $r1 goto label2;

        r12 = null;

     label2:
        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r13 != $r2 goto label3;

        r13 = null;

     label3:
        $r4 = r3.<com.hp.hpl.jena.sparql.util.graph.FindableBasicPattern: com.hp.hpl.jena.sparql.core.BasicPattern triples>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        if r11 == null goto label5;

        $r10 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z2 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r11);

        if $z2 != 0 goto label5;

        goto label4;

     label5:
        if r12 == null goto label6;

        $r9 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r12);

        if $z1 != 0 goto label6;

        goto label4;

     label6:
        if r13 == null goto label7;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r13);

        if $z0 != 0 goto label7;

        goto label4;

     label7:
        return 1;

     label8:
        return 0;
    }
}
