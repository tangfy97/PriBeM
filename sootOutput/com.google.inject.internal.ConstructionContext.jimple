final class com.google.inject.internal.ConstructionContext extends java.lang.Object
{
    java.lang.Object currentReference;
    boolean constructing;
    java.util.List invocationHandlers;

    void <init>()
    {
        com.google.inject.internal.ConstructionContext r0;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object getCurrentReference()
    {
        com.google.inject.internal.ConstructionContext r0;
        java.lang.Object $r1;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        $r1 = r0.<com.google.inject.internal.ConstructionContext: java.lang.Object currentReference>;

        return $r1;
    }

    public void removeCurrentReference()
    {
        com.google.inject.internal.ConstructionContext r0;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        r0.<com.google.inject.internal.ConstructionContext: java.lang.Object currentReference> = null;

        return;
    }

    public void setCurrentReference(java.lang.Object)
    {
        com.google.inject.internal.ConstructionContext r0;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        r1 := @parameter0: java.lang.Object;

        r0.<com.google.inject.internal.ConstructionContext: java.lang.Object currentReference> = r1;

        return;
    }

    public boolean isConstructing()
    {
        com.google.inject.internal.ConstructionContext r0;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        $z0 = r0.<com.google.inject.internal.ConstructionContext: boolean constructing>;

        return $z0;
    }

    public void startConstruction()
    {
        com.google.inject.internal.ConstructionContext r0;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        r0.<com.google.inject.internal.ConstructionContext: boolean constructing> = 1;

        return;
    }

    public void finishConstruction()
    {
        com.google.inject.internal.ConstructionContext r0;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        r0.<com.google.inject.internal.ConstructionContext: boolean constructing> = 0;

        r0.<com.google.inject.internal.ConstructionContext: java.util.List invocationHandlers> = null;

        return;
    }

    public java.lang.Object createProxy(com.google.inject.internal.Errors, java.lang.Class) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.DelegatingInvocationHandler $r3;
        java.lang.Class[] $r6;
        java.util.ArrayList $r9;
        com.google.inject.internal.Errors r10, $r11;
        java.util.List $r2, $r4;
        com.google.inject.internal.ErrorsException $r12;
        com.google.inject.internal.ConstructionContext r1;
        java.lang.Class r0;
        java.lang.Object $r7, $r8;
        java.lang.ClassLoader $r5;
        boolean $z0;

        r1 := @this: com.google.inject.internal.ConstructionContext;

        r10 := @parameter0: com.google.inject.internal.Errors;

        r0 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r11 = virtualinvoke r10.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotSatisfyCircularDependency(java.lang.Class)>(r0);

        $r12 = virtualinvoke $r11.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r12;

     label1:
        $r2 = r1.<com.google.inject.internal.ConstructionContext: java.util.List invocationHandlers>;

        if $r2 != null goto label2;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r1.<com.google.inject.internal.ConstructionContext: java.util.List invocationHandlers> = $r9;

     label2:
        $r3 = new com.google.inject.internal.DelegatingInvocationHandler;

        specialinvoke $r3.<com.google.inject.internal.DelegatingInvocationHandler: void <init>()>();

        $r4 = r1.<com.google.inject.internal.ConstructionContext: java.util.List invocationHandlers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r5 = staticinvoke <com.google.inject.internal.BytecodeGen: java.lang.ClassLoader getClassLoader(java.lang.Class)>(r0);

        $r6 = newarray (java.lang.Class)[2];

        $r6[0] = r0;

        $r6[1] = class "Lcom/google/inject/internal/CircularDependencyProxy;";

        $r7 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r5, $r6, $r3);

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r7);

        return $r8;
    }

    public void setProxyDelegates(java.lang.Object)
    {
        java.util.Iterator $r3;
        com.google.inject.internal.DelegatingInvocationHandler r5;
        java.util.List $r1, $r2;
        com.google.inject.internal.ConstructionContext r0;
        java.lang.Object $r4, r6;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructionContext;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<com.google.inject.internal.ConstructionContext: java.util.List invocationHandlers>;

        if $r1 == null goto label2;

        $r2 = r0.<com.google.inject.internal.ConstructionContext: java.util.List invocationHandlers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.google.inject.internal.DelegatingInvocationHandler) $r4;

        virtualinvoke r5.<com.google.inject.internal.DelegatingInvocationHandler: void setDelegate(java.lang.Object)>(r6);

        goto label1;

     label2:
        return;
    }
}
