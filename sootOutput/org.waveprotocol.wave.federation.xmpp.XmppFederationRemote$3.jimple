class org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3 extends java.lang.Object implements org.waveprotocol.wave.federation.xmpp.PacketCallback
{
    final org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener val$listener;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3 r0;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r2 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener val$listener> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r1;
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener $r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3 r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3;

        r1 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener val$listener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1);

        return;
    }

    public void run(org.xmpp.packet.Packet)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener $r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3 r0;
        org.xmpp.packet.Packet r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote $r3;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3;

        r1 := @parameter0: org.xmpp.packet.Packet;

        $r3 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0>;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener val$listener>;

        staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void access$200(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.xmpp.packet.Packet,org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)>($r3, r1, $r2);

        return;
    }
}
