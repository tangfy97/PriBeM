public final class org.apache.xerces.util.StAXInputSource extends org.apache.xerces.xni.parser.XMLInputSource
{
    private final javax.xml.stream.XMLStreamReader fStreamReader;
    private final javax.xml.stream.XMLEventReader fEventReader;
    private final boolean fConsumeRemainingContent;

    public void <init>(javax.xml.stream.XMLStreamReader)
    {
        org.apache.xerces.util.StAXInputSource r0;
        javax.xml.stream.XMLStreamReader r1;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        specialinvoke r0.<org.apache.xerces.util.StAXInputSource: void <init>(javax.xml.stream.XMLStreamReader,boolean)>(r1, 0);

        return;
    }

    public void <init>(javax.xml.stream.XMLStreamReader, boolean)
    {
        org.apache.xerces.util.StAXInputSource r0;
        javax.xml.stream.XMLStreamReader r1;
        javax.xml.stream.Location $r2;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;
        boolean z0;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        z0 := @parameter1: boolean;

        $r2 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        specialinvoke r0.<org.apache.xerces.xni.parser.XMLInputSource: void <init>(java.lang.String,java.lang.String,java.lang.String)>(null, $r3, null);

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLStreamReader parameter cannot be null.");

        throw $r4;

     label1:
        r0.<org.apache.xerces.util.StAXInputSource: javax.xml.stream.XMLStreamReader fStreamReader> = r1;

        r0.<org.apache.xerces.util.StAXInputSource: javax.xml.stream.XMLEventReader fEventReader> = null;

        r0.<org.apache.xerces.util.StAXInputSource: boolean fConsumeRemainingContent> = z0;

        return;
    }

    public void <init>(javax.xml.stream.XMLEventReader)
    {
        javax.xml.stream.XMLEventReader r1;
        org.apache.xerces.util.StAXInputSource r0;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        specialinvoke r0.<org.apache.xerces.util.StAXInputSource: void <init>(javax.xml.stream.XMLEventReader,boolean)>(r1, 0);

        return;
    }

    public void <init>(javax.xml.stream.XMLEventReader, boolean)
    {
        javax.xml.stream.XMLEventReader r1;
        org.apache.xerces.util.StAXInputSource r0;
        java.lang.String $r2;
        java.lang.IllegalArgumentException $r3;
        boolean z0;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        r1 := @parameter0: javax.xml.stream.XMLEventReader;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <org.apache.xerces.util.StAXInputSource: java.lang.String getEventReaderSystemId(javax.xml.stream.XMLEventReader)>(r1);

        specialinvoke r0.<org.apache.xerces.xni.parser.XMLInputSource: void <init>(java.lang.String,java.lang.String,java.lang.String)>(null, $r2, null);

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XMLEventReader parameter cannot be null.");

        throw $r3;

     label1:
        r0.<org.apache.xerces.util.StAXInputSource: javax.xml.stream.XMLStreamReader fStreamReader> = null;

        r0.<org.apache.xerces.util.StAXInputSource: javax.xml.stream.XMLEventReader fEventReader> = r1;

        r0.<org.apache.xerces.util.StAXInputSource: boolean fConsumeRemainingContent> = z0;

        return;
    }

    public javax.xml.stream.XMLStreamReader getXMLStreamReader()
    {
        org.apache.xerces.util.StAXInputSource r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        $r1 = r0.<org.apache.xerces.util.StAXInputSource: javax.xml.stream.XMLStreamReader fStreamReader>;

        return $r1;
    }

    public javax.xml.stream.XMLEventReader getXMLEventReader()
    {
        javax.xml.stream.XMLEventReader $r1;
        org.apache.xerces.util.StAXInputSource r0;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        $r1 = r0.<org.apache.xerces.util.StAXInputSource: javax.xml.stream.XMLEventReader fEventReader>;

        return $r1;
    }

    public boolean shouldConsumeRemainingContent()
    {
        org.apache.xerces.util.StAXInputSource r0;
        boolean $z0;

        r0 := @this: org.apache.xerces.util.StAXInputSource;

        $z0 = r0.<org.apache.xerces.util.StAXInputSource: boolean fConsumeRemainingContent>;

        return $z0;
    }

    public void setSystemId(java.lang.String)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.xerces.util.StAXInputSource r1;
        java.lang.String r2;

        r1 := @this: org.apache.xerces.util.StAXInputSource;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot set the system ID on a StAXInputSource");

        throw $r0;
    }

    private static java.lang.String getEventReaderSystemId(javax.xml.stream.XMLEventReader)
    {
        javax.xml.stream.XMLEventReader r0;
        javax.xml.stream.events.XMLEvent $r1;
        javax.xml.stream.Location $r2;
        javax.xml.stream.XMLStreamException $r4;
        java.lang.String $r3;

        r0 := @parameter0: javax.xml.stream.XMLEventReader;

     label1:
        if r0 == null goto label2;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLEventReader: javax.xml.stream.events.XMLEvent peek()>();

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.XMLEvent: javax.xml.stream.Location getLocation()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        return $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return null;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }
}
