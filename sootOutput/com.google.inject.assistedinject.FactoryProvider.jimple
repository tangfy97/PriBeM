public class com.google.inject.assistedinject.FactoryProvider extends java.lang.Object implements com.google.inject.Provider, com.google.inject.spi.HasDependencies
{
    private com.google.inject.Injector injector;
    private final com.google.inject.TypeLiteral factoryType;
    private final java.util.Map factoryMethodToConstructor;

    public static com.google.inject.Provider newFactory(java.lang.Class, java.lang.Class)
    {
        com.google.inject.Provider $r4;
        java.lang.Class r0, r2;
        com.google.inject.TypeLiteral $r1, $r3;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r0);

        $r3 = staticinvoke <com.google.inject.TypeLiteral: com.google.inject.TypeLiteral get(java.lang.Class)>(r2);

        $r4 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.Provider newFactory(com.google.inject.TypeLiteral,com.google.inject.TypeLiteral)>($r1, $r3);

        return $r4;
    }

    public static com.google.inject.Provider newFactory(com.google.inject.TypeLiteral, com.google.inject.TypeLiteral)
    {
        com.google.inject.Key $r5, $r7, $r13;
        java.lang.'annotation'.Annotation[] $r12;
        com.google.inject.assistedinject.FactoryProvider $r14;
        java.lang.reflect.Method[] $r9;
        com.google.inject.assistedinject.BindingCollector $r3;
        com.google.inject.internal.ErrorsException $r15;
        java.util.Map $r2;
        int i0, i1;
        com.google.inject.assistedinject.FactoryProvider2 $r6;
        java.lang.reflect.Method r10;
        boolean $z0, $z1;
        com.google.inject.ConfigurationException $r16;
        com.google.inject.internal.Errors $r4, $r17;
        java.util.List $r18;
        java.lang.Class $r8;
        com.google.inject.TypeLiteral r0, r1, $r11;

        r0 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: com.google.inject.TypeLiteral;

        $r2 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: java.util.Map createMethodMapping(com.google.inject.TypeLiteral,com.google.inject.TypeLiteral)>(r0, r1);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r14 = new com.google.inject.assistedinject.FactoryProvider;

        specialinvoke $r14.<com.google.inject.assistedinject.FactoryProvider: void <init>(com.google.inject.TypeLiteral,java.util.Map)>(r0, $r2);

        return $r14;

     label1:
        $r3 = new com.google.inject.assistedinject.BindingCollector;

        specialinvoke $r3.<com.google.inject.assistedinject.BindingCollector: void <init>()>();

        $r4 = new com.google.inject.internal.Errors;

        specialinvoke $r4.<com.google.inject.internal.Errors: void <init>()>();

        $r5 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral)>(r1);

        if r1 == null goto label7;

     label2:
        $r8 = virtualinvoke r0.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r9;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r10 = $r9[i1];

        $r11 = virtualinvoke r0.<com.google.inject.TypeLiteral: com.google.inject.TypeLiteral getReturnType(java.lang.reflect.Method)>(r10);

        $r12 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        $r13 = staticinvoke <com.google.inject.internal.Annotations: com.google.inject.Key getKey(com.google.inject.TypeLiteral,java.lang.reflect.Member,java.lang.'annotation'.Annotation[],com.google.inject.internal.Errors)>($r11, r10, $r12, $r4);

        $z1 = virtualinvoke $r5.<com.google.inject.Key: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label4;

        virtualinvoke $r3.<com.google.inject.assistedinject.BindingCollector: com.google.inject.assistedinject.BindingCollector addBinding(com.google.inject.Key,com.google.inject.TypeLiteral)>($r13, r1);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        $r16 = new com.google.inject.ConfigurationException;

        $r17 = virtualinvoke $r15.<com.google.inject.internal.ErrorsException: com.google.inject.internal.Errors getErrors()>();

        $r18 = virtualinvoke $r17.<com.google.inject.internal.Errors: java.util.List getMessages()>();

        specialinvoke $r16.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r18);

        throw $r16;

     label7:
        $r6 = new com.google.inject.assistedinject.FactoryProvider2;

        $r7 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(com.google.inject.TypeLiteral)>(r0);

        specialinvoke $r6.<com.google.inject.assistedinject.FactoryProvider2: void <init>(com.google.inject.Key,com.google.inject.assistedinject.BindingCollector)>($r7, $r3);

        return $r6;

        catch com.google.inject.internal.ErrorsException from label2 to label5 with label6;
    }

    private void <init>(com.google.inject.TypeLiteral, java.util.Map)
    {
        com.google.inject.assistedinject.FactoryProvider r0;
        com.google.inject.TypeLiteral r1;
        java.util.Map r2;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider;

        r1 := @parameter0: com.google.inject.TypeLiteral;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.assistedinject.FactoryProvider: com.google.inject.TypeLiteral factoryType> = r1;

        r0.<com.google.inject.assistedinject.FactoryProvider: java.util.Map factoryMethodToConstructor> = r2;

        specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider: void checkDeclaredExceptionsMatch()>();

        return;
    }

    void setInjectorAndCheckUnboundParametersAreInjectable(com.google.inject.Injector)
    {
        java.lang.Object[] $r11;
        com.google.inject.assistedinject.FactoryProvider r0;
        java.util.Map $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4, $r8;
        java.util.Collection $r3;
        com.google.inject.ConfigurationException $r12;
        com.google.inject.assistedinject.Parameter r10;
        com.google.inject.assistedinject.AssistedConstructor r6;
        com.google.inject.Injector r1;
        java.util.List $r7;
        java.lang.Object $r5, $r9;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider;

        r1 := @parameter0: com.google.inject.Injector;

        r0.<com.google.inject.assistedinject.FactoryProvider: com.google.inject.Injector injector> = r1;

        $r2 = r0.<com.google.inject.assistedinject.FactoryProvider: java.util.Map factoryMethodToConstructor>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.google.inject.assistedinject.AssistedConstructor) $r5;

        $r7 = virtualinvoke r6.<com.google.inject.assistedinject.AssistedConstructor: java.util.List getAllParameters()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.google.inject.assistedinject.Parameter) $r9;

        $z2 = virtualinvoke r10.<com.google.inject.assistedinject.Parameter: boolean isProvidedByFactory()>();

        if $z2 != 0 goto label3;

        $z3 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider: boolean paramCanBeInjected(com.google.inject.assistedinject.Parameter,com.google.inject.Injector)>(r10, r1);

        if $z3 != 0 goto label3;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r10;

        $r11[1] = r6;

        $r12 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.ConfigurationException newConfigurationException(java.lang.String,java.lang.Object[])>("Parameter of type \'%s\' is not injectable or annotated with @Assisted for Constructor \'%s\'", $r11);

        throw $r12;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    private void checkDeclaredExceptionsMatch()
    {
        java.lang.Object[] $r15;
        com.google.inject.assistedinject.FactoryProvider r0;
        java.util.Map $r1;
        java.lang.reflect.Method $r13;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r5;
        java.util.Iterator $r3, $r9;
        java.util.Set $r2, $r8;
        java.lang.Class[] $r14;
        com.google.inject.ConfigurationException $r18;
        com.google.inject.assistedinject.AssistedConstructor $r7;
        java.lang.Object $r4, $r6, $r10, $r12, $r16, $r17;
        java.lang.Class r11;

        r0 := @this: com.google.inject.assistedinject.FactoryProvider;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider: java.util.Map factoryMethodToConstructor>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (com.google.inject.assistedinject.AssistedConstructor) $r6;

        $r8 = virtualinvoke $r7.<com.google.inject.assistedinject.AssistedConstructor: java.util.Set getDeclaredExceptions()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Class) $r10;

        $r12 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.reflect.Method) $r12;

        $r14 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $z2 = specialinvoke r0.<com.google.inject.assistedinject.FactoryProvider: boolean isConstructorExceptionCompatibleWithFactoryExeception(java.lang.Class,java.lang.Class[])>(r11, $r14);

        if $z2 != 0 goto label3;

        $r15 = newarray (java.lang.Object)[2];

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15[0] = $r16;

        $r17 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15[1] = $r17;

        $r18 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.ConfigurationException newConfigurationException(java.lang.String,java.lang.Object[])>("Constructor %s declares an exception, but no compatible exception is thrown by the factory method %s", $r15);

        throw $r18;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    private boolean isConstructorExceptionCompatibleWithFactoryExeception(java.lang.Class, java.lang.Class[])
    {
        int i0, i1;
        java.lang.Class[] r0;
        java.lang.Class r1, r2;
        com.google.inject.assistedinject.FactoryProvider r3;
        boolean $z0;

        r3 := @this: com.google.inject.assistedinject.FactoryProvider;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean paramCanBeInjected(com.google.inject.assistedinject.Parameter, com.google.inject.Injector)
    {
        com.google.inject.Injector r1;
        com.google.inject.assistedinject.Parameter r0;
        com.google.inject.assistedinject.FactoryProvider r2;
        boolean $z0;

        r2 := @this: com.google.inject.assistedinject.FactoryProvider;

        r0 := @parameter0: com.google.inject.assistedinject.Parameter;

        r1 := @parameter1: com.google.inject.Injector;

        $z0 = virtualinvoke r0.<com.google.inject.assistedinject.Parameter: boolean isBound(com.google.inject.Injector)>(r1);

        return $z0;
    }

    private static java.util.Map createMethodMapping(com.google.inject.TypeLiteral, com.google.inject.TypeLiteral)
    {
        java.lang.Integer $r40, $r41;
        java.lang.StringBuilder $r35, $r36, $r37;
        com.google.inject.TypeLiteral r1, r4, r49;
        java.lang.Object[] $r22, $r24, $r29, $r39;
        java.lang.reflect.Constructor r47;
        java.util.ArrayList $r0, $r13;
        java.lang.String $r38;
        java.lang.'annotation'.Annotation[][] $r17;
        java.lang.RuntimeException $r34;
        com.google.inject.assistedinject.AssistedConstructor $r45, r48, r50;
        com.google.inject.assistedinject.ParameterListKey $r16, $r32, $r33;
        java.lang.reflect.Method[] $r6;
        java.lang.reflect.Method r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Collection $r25;
        com.google.inject.ConfigurationException $r23, $r26, $r30, $r42;
        java.util.List $r14, $r46;
        java.lang.reflect.Type $r28;
        java.lang.'annotation'.Annotation r20, $r44;
        java.util.HashMap $r7, $r9;
        java.lang.'annotation'.Annotation[] r19;
        com.google.inject.internal.util.$ImmutableMap $r43;
        java.lang.reflect.Constructor[] $r3;
        int $i0, $i1, i2, i3, $i4, $i5, i6, i7, i8, i9, i10, i11;
        java.util.Iterator $r8, $r15;
        java.lang.Class $r2, $r5, $r11, $r12, $r21;
        java.lang.Object $r18, $r27, $r31;

        r4 := @parameter0: com.google.inject.TypeLiteral;

        r1 := @parameter1: com.google.inject.TypeLiteral;

        $r0 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r2 = virtualinvoke r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i6 = lengthof $r3;

        i7 = 0;

     label01:
        if i7 >= i6 goto label03;

        r47 = $r3[i7];

        $r44 = virtualinvoke r47.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/google/inject/assistedinject/AssistedInject;");

        if $r44 == null goto label02;

        $r45 = new com.google.inject.assistedinject.AssistedConstructor;

        $r46 = virtualinvoke r1.<com.google.inject.TypeLiteral: java.util.List getParameterTypes(java.lang.reflect.Member)>(r47);

        specialinvoke $r45.<com.google.inject.assistedinject.AssistedConstructor: void <init>(java.lang.reflect.Constructor,java.util.List)>(r47, $r46);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r45);

     label02:
        i7 = i7 + 1;

        goto label01;

     label03:
        $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        $r43 = staticinvoke <com.google.inject.internal.util.$ImmutableMap: com.google.inject.internal.util.$ImmutableMap of()>();

        return $r43;

     label04:
        $r5 = virtualinvoke r4.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $i1 = lengthof $r6;

        if $i0 == $i1 goto label05;

        $r39 = newarray (java.lang.Object)[4];

        $r39[0] = r1;

        $i4 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r39[1] = $r40;

        $r39[2] = r4;

        $i5 = lengthof $r6;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r39[3] = $r41;

        $r42 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.ConfigurationException newConfigurationException(java.lang.String,java.lang.Object[])>("Constructor mismatch: %s has %s @AssistedInject constructors, factory %s has %s creation methods", $r39);

        throw $r42;

     label05:
        $r7 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.HashMap newHashMap()>();

        $r8 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r31 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r48 = (com.google.inject.assistedinject.AssistedConstructor) $r31;

        $r32 = virtualinvoke r48.<com.google.inject.assistedinject.AssistedConstructor: com.google.inject.assistedinject.ParameterListKey getAssistedParameters()>();

        $z5 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r32);

        if $z5 == 0 goto label07;

        $r34 = new java.lang.RuntimeException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate constructor, ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String)>($r38);

        throw $r34;

     label07:
        $r33 = virtualinvoke r48.<com.google.inject.assistedinject.AssistedConstructor: com.google.inject.assistedinject.ParameterListKey getAssistedParameters()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, r48);

        goto label06;

     label08:
        $r9 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.HashMap newHashMap()>();

        i8 = lengthof $r6;

        i9 = 0;

     label09:
        if i9 >= i8 goto label19;

        r10 = $r6[i9];

        $r11 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r12 = virtualinvoke r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z2 != 0 goto label10;

        $r29 = newarray (java.lang.Object)[2];

        $r29[0] = r10;

        $r29[1] = r1;

        $r30 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.ConfigurationException newConfigurationException(java.lang.String,java.lang.Object[])>("Return type of method %s is not assignable from %s", $r29);

        throw $r30;

     label10:
        $r13 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r14 = virtualinvoke r4.<com.google.inject.TypeLiteral: java.util.List getParameterTypes(java.lang.reflect.Member)>(r10);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r27 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r49 = (com.google.inject.TypeLiteral) $r27;

        $r28 = virtualinvoke r49.<com.google.inject.TypeLiteral: java.lang.reflect.Type getType()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label11;

     label12:
        $r16 = new com.google.inject.assistedinject.ParameterListKey;

        specialinvoke $r16.<com.google.inject.assistedinject.ParameterListKey: void <init>(java.util.List)>($r13);

        $z4 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z4 != 0 goto label13;

        $r24 = newarray (java.lang.Object)[3];

        $r24[0] = r1;

        $r24[1] = $r16;

        $r25 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r24[2] = $r25;

        $r26 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.ConfigurationException newConfigurationException(java.lang.String,java.lang.Object[])>("%s has no @AssistInject constructor that takes the @Assisted parameters %s in that order. @AssistInject constructors are %s", $r24);

        throw $r26;

     label13:
        virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r17 = virtualinvoke r10.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        i2 = lengthof $r17;

        i10 = 0;

     label14:
        if i10 >= i2 goto label18;

        r19 = $r17[i10];

        i3 = lengthof r19;

        i11 = 0;

     label15:
        if i11 >= i3 goto label17;

        r20 = r19[i11];

        $r21 = interfaceinvoke r20.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        if $r21 != class "Lcom/google/inject/assistedinject/Assisted;" goto label16;

        $r22 = newarray (java.lang.Object)[2];

        $r22[0] = r10;

        $r22[1] = r1;

        $r23 = staticinvoke <com.google.inject.assistedinject.FactoryProvider: com.google.inject.ConfigurationException newConfigurationException(java.lang.String,java.lang.Object[])>("Factory method %s has an @Assisted parameter, which is incompatible with the deprecated @AssistedInject annotation. Please replace @AssistedInject with @Inject on the %s constructor.", $r22);

        throw $r23;

     label16:
        i11 = i11 + 1;

        goto label15;

     label17:
        i10 = i10 + 1;

        goto label14;

     label18:
        $r18 = interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r16);

        r50 = (com.google.inject.assistedinject.AssistedConstructor) $r18;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r50);

        i9 = i9 + 1;

        goto label09;

     label19:
        return $r9;
    }

    public java.util.Set getDependencies()
    {
        com.google.inject.Key $r12;
        com.google.inject.assistedinject.FactoryProvider r1;
        java.util.ArrayList $r0;
        com.google.inject.internal.util.$ImmutableSet $r5;
        java.util.Map $r2;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4, $r9;
        java.util.Collection $r3;
        com.google.inject.spi.Dependency $r13;
        com.google.inject.assistedinject.Parameter r11;
        com.google.inject.assistedinject.AssistedConstructor r7;
        java.util.List $r8;
        java.lang.Object $r6, $r10;

        r1 := @this: com.google.inject.assistedinject.FactoryProvider;

        $r0 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        $r2 = r1.<com.google.inject.assistedinject.FactoryProvider: java.util.Map factoryMethodToConstructor>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.inject.assistedinject.AssistedConstructor) $r6;

        $r8 = virtualinvoke r7.<com.google.inject.assistedinject.AssistedConstructor: java.util.List getAllParameters()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.google.inject.assistedinject.Parameter) $r10;

        $z2 = virtualinvoke r11.<com.google.inject.assistedinject.Parameter: boolean isProvidedByFactory()>();

        if $z2 != 0 goto label3;

        $r12 = virtualinvoke r11.<com.google.inject.assistedinject.Parameter: com.google.inject.Key getPrimaryBindingKey()>();

        $r13 = staticinvoke <com.google.inject.spi.Dependency: com.google.inject.spi.Dependency get(com.google.inject.Key)>($r12);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $r5 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable)>($r0);

        return $r5;
    }

    public java.lang.Object get()
    {
        java.lang.Class[] $r5;
        com.google.inject.assistedinject.FactoryProvider r1;
        com.google.inject.assistedinject.FactoryProvider$1 $r0;
        java.lang.Class $r3;
        java.lang.Object $r6, $r7;
        java.lang.ClassLoader $r4;
        com.google.inject.TypeLiteral $r2;

        r1 := @this: com.google.inject.assistedinject.FactoryProvider;

        $r0 = new com.google.inject.assistedinject.FactoryProvider$1;

        specialinvoke $r0.<com.google.inject.assistedinject.FactoryProvider$1: void <init>(com.google.inject.assistedinject.FactoryProvider)>(r1);

        $r2 = r1.<com.google.inject.assistedinject.FactoryProvider: com.google.inject.TypeLiteral factoryType>;

        $r3 = virtualinvoke $r2.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $r4 = staticinvoke <com.google.inject.internal.BytecodeGen: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r3);

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = $r3;

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r4, $r5, $r0);

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

        return $r7;
    }

    private static transient com.google.inject.ConfigurationException newConfigurationException(java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3;
        com.google.inject.internal.util.$ImmutableSet $r5;
        com.google.inject.spi.Message $r1;
        com.google.inject.ConfigurationException $r0;
        java.lang.String r2, $r4;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        $r0 = new com.google.inject.ConfigurationException;

        $r1 = new com.google.inject.spi.Message;

        $r4 = staticinvoke <com.google.inject.internal.Errors: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        specialinvoke $r1.<com.google.inject.spi.Message: void <init>(java.lang.String)>($r4);

        $r5 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of(java.lang.Object)>($r1);

        specialinvoke $r0.<com.google.inject.ConfigurationException: void <init>(java.lang.Iterable)>($r5);

        return $r0;
    }

    static java.util.Map access$000(com.google.inject.assistedinject.FactoryProvider)
    {
        com.google.inject.assistedinject.FactoryProvider r0;
        java.util.Map $r1;

        r0 := @parameter0: com.google.inject.assistedinject.FactoryProvider;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider: java.util.Map factoryMethodToConstructor>;

        return $r1;
    }

    static com.google.inject.Injector access$100(com.google.inject.assistedinject.FactoryProvider)
    {
        com.google.inject.Injector $r1;
        com.google.inject.assistedinject.FactoryProvider r0;

        r0 := @parameter0: com.google.inject.assistedinject.FactoryProvider;

        $r1 = r0.<com.google.inject.assistedinject.FactoryProvider: com.google.inject.Injector injector>;

        return $r1;
    }
}
