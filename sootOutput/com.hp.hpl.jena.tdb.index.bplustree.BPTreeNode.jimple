public final class com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode extends com.hp.hpl.jena.tdb.index.bplustree.BPTreePage
{
    private static final short READ;
    private static final short WRITE;
    private static org.slf4j.Logger log;
    private com.hp.hpl.jena.tdb.base.block.Block block;
    private int id;
    private short blockState;
    int parent;
    int count;
    boolean isLeaf;
    private com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records;
    com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs;

    void setRecordBuffer(com.hp.hpl.jena.tdb.base.buffer.RecordBuffer)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records> = r1;

        return;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode create(int, boolean)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r2;
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode create(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,int,boolean)>($r1, i0, z0);

        return $r2;
    }

    private static com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode create(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, int, boolean)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r2;
        int i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r1;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode createNode(int)>(i0);

        $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = z0;

        return $r2;
    }

    void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree, com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        java.lang.Long $r3;
        com.hp.hpl.jena.tdb.base.block.Block r2;
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void <init>(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree)>(r1);

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: short blockState> = 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.block.Block block> = r2;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $i0 = virtualinvoke $r3.<java.lang.Long: int intValue()>();

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id> = $i0;

        return;
    }

    public void reset(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.block.Block block> = r1;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void formatBPTreeNode(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode,com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,com.hp.hpl.jena.tdb.base.block.Block,boolean,int,int)>(r0, $r2, r1, $z0, $i1, $i0);

        return;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int, short)
    {
        org.slf4j.Logger $r3;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r7, $r8;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        short s2;
        int i0, $i1, $i3, $i4;
        java.lang.StringBuilder $r4, $r5, $r9;
        java.lang.String $r6;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        s2 := @parameter1: short;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i0);

        if s2 != 1 goto label1;

        $r8 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage getMgrRead(int)>($i1);

        return $r8;

     label1:
        $i3 = (int) s2;

        if $i3 != 2 goto label2;

        $r7 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage getMgrWrite(int)>($i1);

        return $r7;

     label2:
        $r3 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        $i4 = (int) s2;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String)>($r6);

        return null;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreePage getMgrRead(int)
    {
        com.hp.hpl.jena.tdb.base.page.Page $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r3;
        int i0, $i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1, $r4;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2;
        boolean $z0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r5;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.page.Page getRead(int)>(i0);

        $r7 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreePage) $r6;

        return $r7;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getRead(int,int)>(i0, $i1);

        return $r3;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreePage getMgrWrite(int)
    {
        com.hp.hpl.jena.tdb.base.page.Page $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r3;
        int i0, $i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1, $r4;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2;
        boolean $z0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r5;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.page.Page getWrite(int)>(i0);

        $r7 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreePage) $r6;

        return $r7;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode getWrite(int,int)>(i0, $i1);

        return $r3;
    }

    public static com.hp.hpl.jena.tdb.base.record.Record search(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeException $r3;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r2;
        int $i0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        if $i0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search not starting from the root: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record internalSearch(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        return $r2;
    }

    public static com.hp.hpl.jena.tdb.base.record.Record insert(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, com.hp.hpl.jena.tdb.base.record.Record)
    {
        java.lang.Object[] $r2, $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeException $r5;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r9;
        java.lang.String $r4, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.slf4j.Logger $r3, $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r7 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("** insert(%s) / start", $r6);

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r8);

        $z4 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree>;

        if $z4 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dump()>();

     label1:
        $z5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z5 != 0 goto label2;

        $r5 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeException;

        specialinvoke $r5.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeException: void <init>(java.lang.String)>("Insert begins but this is not the root");

        throw $r5;

     label2:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isFull()>();

        if $z1 == 0 goto label3;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void splitRoot(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode)>(r0);

        $z3 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree>;

        if $z3 == 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dump()>();

     label3:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record internalInsert(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

        $z6 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z6 == 0 goto label4;

        $r3 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("** insert(%s) / finish", $r2);

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r4);

        $z2 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree>;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dump()>();

     label4:
        return $r9;
    }

    public static com.hp.hpl.jena.tdb.base.record.Record delete(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, com.hp.hpl.jena.tdb.base.record.Record)
    {
        java.lang.Object[] $r3, $r7, $r9;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeException $r8;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r2, $r12;
        int $i0, $i1;
        java.lang.String $r5, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.slf4j.Logger $r4, $r10;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r10 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("** delete(%s) / start", $r9);

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r11);

        $z6 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree>;

        if $z6 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dump()>();

     label1:
        $z7 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z7 != 0 goto label2;

        $r8 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeException;

        specialinvoke $r8.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeException: void <init>(java.lang.String)>("Delete begins but this is not the root");

        throw $r8;

     label2:
        $z1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z1 == 0 goto label4;

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i1 != 0 goto label4;

        $r6 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(0, 2);

        $z4 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z4 == 0 goto label3;

        $z5 = $r6 instanceof com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords;

        if $z5 != 0 goto label3;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Zero size leaf root but not pointing a records block", $r7);

     label3:
        $r12 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record internalDelete(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $r12;

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record internalDelete(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $z2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z2 != 0 goto label5;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i0 != 0 goto label5;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void reduceRoot()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

     label5:
        $z8 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z8 == 0 goto label6;

        $r4 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("** delete(%s) / finish", $r3);

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r5);

        $z3 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean DumpTree>;

        if $z3 == 0 goto label6;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dump()>();

     label6:
        return $r2;
    }

    static int recordsPageId(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r1, $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r5;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r3, r4;
        com.hp.hpl.jena.tdb.base.record.Record r0;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2;

        r4 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r0 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

     label1:
        $z0 = virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf()>();

        if $z0 != 0 goto label5;

        if r0 != null goto label2;

        $r5 = specialinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(0, 1);

        goto label3;

     label2:
        $r5 = specialinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage findHere(com.hp.hpl.jena.tdb.base.record.Record)>(r0);

     label3:
        $r3 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode) $r5;

        $z2 = virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z2 != 0 goto label4;

        virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void release()>();

     label4:
        r4 = $r3;

        goto label1;

     label5:
        if r0 != null goto label6;

        $r2 = virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer getPtrBuffer()>();

        i2 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int getLow()>();

        goto label7;

     label6:
        $i0 = virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int findSlot(com.hp.hpl.jena.tdb.base.record.Record)>(r0);

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int convert(int)>($i0);

        $r1 = virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer getPtrBuffer()>();

        i2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>($i1);

     label7:
        $z1 = virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z1 != 0 goto label8;

        virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void release()>();

     label8:
        return i2;
    }

    protected com.hp.hpl.jena.tdb.base.record.Record maxRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.record.Record $r2;
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i0, 1);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record maxRecord()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $r2;
    }

    protected com.hp.hpl.jena.tdb.base.record.Record minRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r1;
        com.hp.hpl.jena.tdb.base.record.Record $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(0, 1);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record minRecord()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $r2;
    }

    final com.hp.hpl.jena.tdb.base.record.Record getLowRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        com.hp.hpl.jena.tdb.base.record.Record $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getLow()>();

        return $r2;
    }

    final com.hp.hpl.jena.tdb.base.record.Record getHighRecord()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        com.hp.hpl.jena.tdb.base.record.Record $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getHigh()>();

        return $r2;
    }

    final int getMaxSize()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int getOrder()>();

        return $i0;
    }

    final int getCount()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        return $i0;
    }

    final void setCount(int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = i0;

        return;
    }

    public com.hp.hpl.jena.tdb.base.block.Block getBackingBlock()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.block.Block $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.block.Block block>;

        return $r1;
    }

    com.hp.hpl.jena.tdb.base.buffer.RecordBuffer getRecordBuffer()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        return $r1;
    }

    com.hp.hpl.jena.tdb.base.buffer.PtrBuffer getPtrBuffer()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        return $r1;
    }

    void setIsLeaf(boolean)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = z0;

        return;
    }

    boolean isLeaf()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        return $z0;
    }

    public final int getId()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        return $i0;
    }

    final void write()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void write(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    final void promote()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void promote(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    final void release()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void release(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    final void free()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void free(com.hp.hpl.jena.tdb.base.page.Page)>(r0);

        return;
    }

    final com.hp.hpl.jena.tdb.base.record.Record internalSearch(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r3;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage findHere(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record internalSearch(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $r3;
    }

    private final com.hp.hpl.jena.tdb.index.bplustree.BPTreePage findHere(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int findSlot(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int convert(int)>($i0);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i1, 1);

        return $r2;
    }

    final com.hp.hpl.jena.tdb.base.record.Record internalInsert(com.hp.hpl.jena.tdb.base.record.Record)
    {
        java.lang.Object[] $r5, $r8, $r13;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r2, r16;
        java.lang.Integer $r10, $r11;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r4, $r17;
        int $i0, $i1, $i2, i3;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3;
        java.lang.String $r7, $r12, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.slf4j.Logger $r6, $r9, $r14;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r14 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = r1;

        $r13[1] = r0;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("internalInsert: %s [%s]", $r13);

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int findSlot(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z1 == 0 goto label2;

        $r9 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8[0] = $r10;

        $i2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int convert(int)>($i0);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r8[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("internalInsert: idx=%d=>%d", $r8);

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label2:
        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int convert(int)>($i0);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i1, 1);

        r16 = $r2;

        $z2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z2 == 0 goto label3;

        $r6 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("internalInsert: next: %s", $r5);

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r7);

     label3:
        $z3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean isFull()>();

        if $z3 == 0 goto label5;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void split(int,com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>($i1, $r2);

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i1);

        $z4 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r1, $r4);

        if $z4 == 0 goto label4;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        i3 = $i1 + 1;

        r16 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(i3, 1);

     label4:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

     label5:
        $r17 = virtualinvoke r16.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record internalInsert(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        virtualinvoke r16.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $r17;
    }

    private static int convert(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <org.apache.jena.atlas.lib.Alg: int decodeIndex(int)>(i0);

        return $i1;
    }

    private void split(int, com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)
    {
        byte[] $r25;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r4, $r35, $r36;
        java.lang.Integer $r38, $r39, $r43, $r44, $r45;
        com.hp.hpl.jena.tdb.base.record.Record $r5, $r7, $r52, $r53, r54;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r15, $r16, $r18, $r20, $r21, $r47, $r49, $r50;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r24;
        java.lang.Object[] $r6, $r26, $r29, $r32, $r37, $r40, $r41;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3;
        java.lang.String $r12, $r17, $r22, $r28, $r31, $r34, $r46, $r51;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r23;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.slf4j.Logger $r9, $r14, $r19, $r27, $r30, $r33, $r42, $r48;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r42 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r41 = newarray (java.lang.Object)[3];

        $i9 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r41[0] = $r43;

        $i10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r41[1] = $r44;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r41[2] = $r45;

        $r46 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("split >> y.id=%d  this.id=%d idx=%d", $r41);

        interfaceinvoke $r42.<org.slf4j.Logger: void debug(java.lang.String)>($r46);

        $r48 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split --   ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r48.<org.slf4j.Logger: void debug(java.lang.String)>($r51);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        $z1 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z1 == 0 goto label3;

        $z5 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean isFull()>();

        if $z5 != 0 goto label2;

        $r40 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node is not full", $r40);

     label2:
        $r35 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i5 = virtualinvoke $r35.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i0);

        $i6 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        if $i5 == $i6 goto label3;

        $r36 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i7 = virtualinvoke $r36.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i0);

        $i8 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r37 = newarray (java.lang.Object)[2];

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r37[0] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r37[1] = $r39;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node to be split isn\'t in right place [%d/%d]", $r37);

     label3:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void promote()>();

        virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void promote()>();

        $r52 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record getSplitKey()>();

        $r53 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record keyRecord(com.hp.hpl.jena.tdb.base.record.Record)>($r52);

        r54 = $r53;

        if $z0 == 0 goto label4;

        $r33 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = $r53;

        $r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Split key: %s", $r32);

        interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String)>($r34);

     label4:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage split()>();

        if $z0 == 0 goto label5;

        $r27 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = r1;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Split: %s", $r26);

        interfaceinvoke $r27.<org.slf4j.Logger: void debug(java.lang.String)>($r28);

        $r30 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = $r2;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Split: %s", $r29);

        interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String)>($r31);

     label5:
        $z2 = virtualinvoke $r53.<com.hp.hpl.jena.tdb.base.record.Record: boolean hasSeparateValue()>();

        if $z2 == 0 goto label6;

        $r23 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $r24 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: com.hp.hpl.jena.tdb.base.record.RecordFactory getKeyFactory()>();

        $r25 = virtualinvoke $r53.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        r54 = virtualinvoke $r24.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record create(byte[])>($r25);

     label6:
        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, r54);

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i1 = i0 + 1;

        $i2 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void add(int,int)>($i1, $i2);

        $i3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i4 = $i3 + 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i4;

        if $z0 == 0 goto label7;

        $r9 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split <<   ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

        $r14 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split <<   ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

        $r19 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split <<   ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

     label7:
        virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        $z3 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingTree>;

        if $z3 == 0 goto label9;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record maxRecord()>();

        $z4 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyNE(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r54, $r5);

        if $z4 == 0 goto label8;

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r54;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record maxRecord()>();

        $r6[1] = $r7;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Split key %d but max subtree %s", $r6);

     label8:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

     label9:
        return;
    }

    final com.hp.hpl.jena.tdb.base.record.Record getSplitKey()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        i0 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int SplitIndex>;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i0);

        return $r3;
    }

    final com.hp.hpl.jena.tdb.index.bplustree.BPTreePage split()
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r8, $r9, $r11, $r12;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r1, $r7, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        i0 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int SplitIndex>;

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode create(int,boolean)>($i1, $z0);

        $i2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i5 = i0 + 1;

        $r3 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i3 = i0 + 1;

        $i4 = $i2 - $i3;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>($i5, $r3, 0, $i4);

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i6 = $i2 - i0;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void clear(int,int)>(i0, $i6);

        $r6 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void setSize(int)>(i0);

        $r9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i10 = i0 + 1;

        $r8 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i8 = $r7.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        $i7 = i0 + 1;

        $i9 = $i8 - $i7;

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>($i10, $r8, 0, $i9);

        $r11 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i14 = i0 + 1;

        $r10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i12 = $r10.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        $i11 = i0 + 1;

        $i13 = $i12 - $i11;

        virtualinvoke $r11.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void clear(int,int)>($i14, $i13);

        $r12 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i15 = i0 + 1;

        virtualinvoke $r12.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void setSize(int)>($i15);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void setCount(int)>(i0);

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        $z1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = $z1;

        $i16 = i0 + 1;

        $i17 = $i2 - $i16;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void setCount(int)>($i17);

        specialinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        return $r2;
    }

    private static void splitRoot(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode)
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r6, $r7, $r11, $r12, $r14, $r15, $r16;
        java.lang.Integer $r44, $r52;
        com.hp.hpl.jena.tdb.base.record.Record $r55;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree r1;
        java.lang.StringBuilder $r17, $r19, $r20, $r22, $r24, $r25, $r27, $r29, $r30, $r32, $r34, $r35, $r37, $r39, $r40, $r46, $r48, $r49;
        java.lang.Object[] $r42, $r51;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r4, $r5, $r8, $r9, $r13, $r54;
        java.lang.String $r21, $r26, $r31, $r36, $r41, $r45, $r50;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r10, $r53;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.slf4j.Logger $r18, $r23, $r28, $r33, $r38, $r43, $r47;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r2, $r3;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label1;

        $i16 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        if $i16 == 0 goto label1;

        $r51 = newarray (java.lang.Object)[1];

        $i17 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r51[0] = $r52;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Not root: %d (root is id zero)", $r51);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void promote()>();

        $r53 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i18 = $r53.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int SplitIndex>;

        $r54 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r55 = virtualinvoke $r54.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i18);

        $z7 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z7 == 0 goto label2;

        $r43 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r42 = newarray (java.lang.Object)[2];

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r42[0] = $r44;

        $r42[1] = $r55;

        $r45 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("** Split root %d (%s)", $r42);

        interfaceinvoke $r43.<org.slf4j.Logger: void debug(java.lang.String)>($r45);

        $r47 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitRoot >>   ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r47.<org.slf4j.Logger: void debug(java.lang.String)>($r50);

     label2:
        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $z1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode create(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,int,boolean)>(r1, $i0, $z1);

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $z2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        $r3 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode create(com.hp.hpl.jena.tdb.index.bplustree.BPlusTree,int,boolean)>(r1, $i1, $z2);

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r4 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>(0, $r4, 0, $i18);

        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r6 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i2 = $i18 + 1;

        virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>(0, $r6, 0, $i2);

        $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i18;

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i3 = $i18 + 1;

        $r9 = $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i4 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        $i5 = $i18 + 1;

        $i6 = $i4 - $i5;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>($i3, $r9, 0, $i6);

        $r12 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i10 = $i18 + 1;

        $r11 = $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i8 = $r10.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

        $i7 = $i18 + 1;

        $i9 = $i8 - $i7;

        virtualinvoke $r12.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>($i10, $r11, 0, $i9);

        $i11 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        $i12 = $i18 + 1;

        $i13 = $i11 - $i12;

        $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i13;

        $z3 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z3 == 0 goto label3;

        $r33 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitRoot -- left:   ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String)>($r36);

        $r38 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitRoot -- right:  ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String)>($r41);

     label3:
        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void formatForRoot(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode,boolean)>(r0, 0);

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = 1;

        $r13 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r13.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>(0, $r55);

        $r14 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r14.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void setSize(int)>(2);

        $r15 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i14 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        virtualinvoke $r15.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void set(int,int)>(0, $i14);

        $r16 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i15 = $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        virtualinvoke $r16.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void set(int,int)>(1, $i15);

        $z4 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z4 == 0 goto label4;

        $r18 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitRoot <<   ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String)>($r21);

        $r23 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitRoot <<   ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String)>($r26);

        $r28 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("splitRoot <<   ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void debug(java.lang.String)>($r31);

     label4:
        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void release()>();

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void release()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        $z5 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingTree>;

        if $z5 == 0 goto label5;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNodeDeep()>();

        goto label6;

     label5:
        $z6 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z6 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        specialinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

     label6:
        return;
    }

    final com.hp.hpl.jena.tdb.base.record.Record internalDelete(com.hp.hpl.jena.tdb.base.record.Record)
    {
        java.lang.Object[] $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r2, $r6, r10;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r4, $r5, $r11;
        int $i0, $i1, i2;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r8;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r8 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r1;

        $r7[1] = r0;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("internalDelete(%s) : %s", $r7);

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label1:
        $i0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int findSlot(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        i2 = $i0;

        $i1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int convert(int)>($i0);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i1, 1);

        r10 = $r2;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean isMinSize()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void promote()>();

        $r6 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage rebalance(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,int)>($r2, $i1);

        r10 = $r6;

        i2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int findSlot(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $z2 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z2 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void checkNode()>();

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

     label3:
        $r11 = virtualinvoke r10.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record internalDelete(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        if i2 < 0 goto label4;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void promote()>();

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r4 = virtualinvoke r10.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record maxRecord()>();

        $r5 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record keyRecord(com.hp.hpl.jena.tdb.base.record.Record)>($r4);

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void set(int,com.hp.hpl.jena.tdb.base.record.Record)>(i2, $r5);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

     label4:
        virtualinvoke r10.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $r11;
    }

    private void reduceRoot()
    {
        java.lang.Object[] $r7, $r10, $r13, $r14;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r5, $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r3, $r4;
        java.lang.String $r9, $r12, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.slf4j.Logger $r8, $r11, $r15;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r15 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r0;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("reduceRoot >> %s", $r14);

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r16);

     label1:
        $z1 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z1 == 0 goto label3;

        $z6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z6 == 0 goto label2;

        $i4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i4 == 0 goto label3;

     label2:
        $r13 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Not an empty root", $r13);

     label3:
        $z7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z7 == 0 goto label5;

        $z5 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z5 == 0 goto label4;

        $r11 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r10 = newarray (java.lang.Object)[0];

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("reduceRoot << leaf root", $r10);

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label4:
        return;

     label5:
        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(0, 2);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>($r1);

        $z2 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void formatForRoot(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode,boolean)>(r0, $z2);

        $r4 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i0 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>(0, $r3, 0, $i0);

        $r6 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i1 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i2 = $i1 + 1;

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void copy(int,com.hp.hpl.jena.tdb.base.buffer.BufferBase,int,int)>(0, $r5, 0, $i2);

        $z3 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf> = $z3;

        $i3 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i3;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void free()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

        $z4 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z4 == 0 goto label6;

        $r8 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r0;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("reduceRoot << %s", $r7);

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label6:
        return;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreePage rebalance(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, int)
    {
        java.lang.Integer $r5, $r6, $r7, $r12, $r13, $r14, $r31, $r32;
        java.lang.StringBuilder $r17, $r19, $r20, $r23, $r25, $r26;
        java.lang.Object[] $r2, $r3, $r9, $r10, $r16, $r29, $r34, $r37;
        java.lang.String $r8, $r15, $r21, $r27, $r33, $r36, $r39;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r1, r40, r41, $r42, $r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        org.slf4j.Logger $r4, $r11, $r18, $r22, $r24, $r28, $r30, $r35, $r38;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        i0 := @parameter1: int;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label01;

        $r30 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r29 = newarray (java.lang.Object)[2];

        $i14 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r29[0] = $r31;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r29[1] = $r32;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("rebalance(id=%d, idx=%d)", $r29);

        interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String)>($r33);

        $r35 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r34 = newarray (java.lang.Object)[1];

        $r34[0] = r0;

        $r36 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(">> this: %s", $r34);

        interfaceinvoke $r35.<org.slf4j.Logger: void debug(java.lang.String)>($r36);

        $r38 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r37 = newarray (java.lang.Object)[1];

        $r37[0] = r1;

        $r39 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(">> node: %s", $r37);

        interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String)>($r39);

     label01:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void promote()>();

        virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void promote()>();

        r40 = null;

        if i0 <= 0 goto label02;

        $i13 = i0 - 1;

        r40 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i13, 2);

     label02:
        if r40 == null goto label06;

        $z10 = virtualinvoke r40.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean isMinSize()>();

        if $z10 != 0 goto label06;

        $z11 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z11 == 0 goto label03;

        $r28 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        interfaceinvoke $r28.<org.slf4j.Logger: void debug(java.lang.String)>("rebalance/shiftRight");

     label03:
        $i12 = i0 - 1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void shiftRight(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,int)>(r40, r1, $i12);

        $z12 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z12 == 0 goto label04;

        $r24 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< rebalance: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

     label04:
        $z13 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z13 == 0 goto label05;

        virtualinvoke r40.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void checkNode()>();

        virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void checkNode()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

     label05:
        virtualinvoke r40.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return r1;

     label06:
        r41 = null;

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if i0 >= $i1 goto label07;

        $i11 = i0 + 1;

        r41 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i11, 2);

     label07:
        if r41 == null goto label12;

        $z6 = virtualinvoke r41.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean isMinSize()>();

        if $z6 != 0 goto label12;

        $z7 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z7 == 0 goto label08;

        $r22 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        interfaceinvoke $r22.<org.slf4j.Logger: void debug(java.lang.String)>("rebalance/shiftLeft");

     label08:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void shiftLeft(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,int)>(r1, r41, i0);

        $z8 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z8 == 0 goto label09;

        $r18 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< rebalance: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String)>($r21);

     label09:
        $z9 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z9 == 0 goto label10;

        virtualinvoke r41.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void checkNode()>();

        virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void checkNode()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

     label10:
        if r40 == null goto label11;

        virtualinvoke r40.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

     label11:
        virtualinvoke r41.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return r1;

     label12:
        $z1 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z1 == 0 goto label13;

        if r40 != null goto label13;

        if r41 != null goto label13;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("No siblings", $r16);

     label13:
        if r40 == null goto label17;

        $z4 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z4 == 0 goto label14;

        $r11 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r10 = newarray (java.lang.Object)[3];

        $i8 = virtualinvoke r40.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r10[0] = $r12;

        $i9 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r10[1] = $r13;

        $i10 = i0 - 1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r10[2] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("rebalance/merge/left: left=%d n=%d [%d]", $r10);

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label14:
        $z5 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z5 == 0 goto label15;

        $i6 = virtualinvoke r40.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $i7 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        if $i6 != $i7 goto label15;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r40;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Left and n the same: %s", $r9);

     label15:
        $i15 = i0 - 1;

        $r42 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,int)>(r40, r1, $i15);

        if r41 == null goto label16;

        virtualinvoke r41.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

     label16:
        return $r42;

     label17:
        $z2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z2 == 0 goto label18;

        $r4 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[3];

        $i4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[0] = $r5;

        $i5 = virtualinvoke r41.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("rebalance/merge/right: n=%d right=%d [%d]", $r3);

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r8);

     label18:
        $z3 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z3 == 0 goto label19;

        $i2 = virtualinvoke r41.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $i3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        if $i2 != $i3 goto label19;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r41;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("N and right the same: %s", $r2);

     label19:
        $r43 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,int)>(r1, r41, i0);

        return $r43;
    }

    private com.hp.hpl.jena.tdb.index.bplustree.BPTreePage merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r3, r4, $r5;
        java.lang.Integer $r17, $r18, $r20, $r21, $r30;
        com.hp.hpl.jena.tdb.base.record.Record $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r13, $r14, $r23, $r25, $r26, $r32, $r34, $r35, $r37, $r39, $r40;
        java.lang.Object[] $r16, $r19, $r22, $r28;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1;
        java.lang.String $r10, $r15, $r27, $r31, $r36, $r41;
        org.slf4j.Logger $r7, $r12, $r24, $r29, $r33, $r38;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r3 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r4 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        i0 := @parameter2: int;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r29 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r28 = newarray (java.lang.Object)[2];

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r28[0] = $r30;

        $r28[1] = r0;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(">> merge(@%d): %s", $r28);

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r31);

        $r33 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> left:  ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String)>($r36);

        $r38 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> right: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void debug(java.lang.String)>($r41);

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i0);

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.base.record.Record)>(r4, $r2);

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z1 == 0 goto label2;

        $r24 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- merge: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

     label2:
        virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void free()>();

        if $r5 != r4 goto label3;

        $r22 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Returned page is not the left", $r22);

     label3:
        $z2 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z2 == 0 goto label5;

        $z3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z3 == 0 goto label4;

        $i3 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getCount()>();

        $i4 = $i3 + 1;

        $i5 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getMaxSize()>();

        if $i4 == $i5 goto label5;

        $i6 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getCount()>();

        $i7 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getMaxSize()>();

        if $i6 == $i7 goto label5;

        $r19 = newarray (java.lang.Object)[2];

        $i8 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getCount()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r19[0] = $r20;

        $i9 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getMaxSize()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r19[1] = $r21;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Inconsistent data node size: %d/%d", $r19);

        goto label5;

     label4:
        $z4 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean isFull()>();

        if $z4 != 0 goto label5;

        $r16 = newarray (java.lang.Object)[2];

        $i1 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getCount()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r16[0] = $r17;

        $i2 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getMaxSize()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r16[1] = $r18;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Inconsistent node size: %d/%d", $r16);

     label5:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void shuffleDown(int)>(i0);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void write()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNodeDeep()>();

        $z5 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z5 == 0 goto label6;

        $r7 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< merge: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r10);

        $r12 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< left:  ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label6:
        return r3;
    }

    com.hp.hpl.jena.tdb.index.bplustree.BPTreePage merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r3, $r4;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r2 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>(r2);

        $r4 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode,com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode)>(r0, r1, $r3);

        return $r4;
    }

    private static com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode merge(com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode, com.hp.hpl.jena.tdb.base.record.Record, com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode)
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r6, $r7, $r9;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, r3;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2, $r4, $r5, $r8;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        r3 := @parameter2: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $r5 = r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r5.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void copyToTop(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r4);

        $r7 = r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r6 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void copyToTop(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r6);

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i0 = r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i2 = $i1 + $i0;

        $i3 = $i2 + 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i3;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        $r8 = r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void clear()>();

        $r9 = r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void clear()>();

        return r0;
    }

    private void shiftRight(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r3, r4;
        com.hp.hpl.jena.tdb.base.record.Record $r2, $r5, $r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r15, $r16, $r18, $r20, $r21, $r23, $r25, $r26, $r28, $r30, $r31, $r33, $r35, $r36;
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r7;
        java.lang.String $r12, $r17, $r22, $r27, $r32, $r37;
        org.slf4j.Logger $r9, $r14, $r19, $r24, $r29, $r34;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r3 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r4 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        i0 := @parameter2: int;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r24 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> shiftRight: this:  ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

        $r29 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> shiftRight: left:  ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r32);

        $r34 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> shiftRight: right: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void debug(java.lang.String)>($r37);

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i0);

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record shiftRight(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.base.record.Record)>(r4, $r2);

        $r6 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record keyRecord(com.hp.hpl.jena.tdb.base.record.Record)>($r5);

        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void set(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, $r6);

        virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z1 == 0 goto label2;

        $r9 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< shiftRight: this:  ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

        $r14 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< shiftRight: left:  ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

        $r19 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< shiftRight: right: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

     label2:
        return;
    }

    private void shiftLeft(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r3, r4;
        com.hp.hpl.jena.tdb.base.record.Record $r2, $r5, $r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r15, $r16, $r18, $r20, $r21, $r23, $r25, $r26, $r28, $r30, $r31, $r33, $r35, $r36;
        int i0;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r7;
        java.lang.String $r12, $r17, $r22, $r27, $r32, $r37;
        org.slf4j.Logger $r9, $r14, $r19, $r24, $r29, $r34;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r3 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r4 := @parameter1: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        i0 := @parameter2: int;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r24 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> shiftLeft: this:  ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

        $r29 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> shiftLeft: left:  ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r32);

        $r34 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> shiftLeft: right: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void debug(java.lang.String)>($r37);

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i0);

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record shiftLeft(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage,com.hp.hpl.jena.tdb.base.record.Record)>(r4, $r2);

        $r6 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.record.Record keyRecord(com.hp.hpl.jena.tdb.base.record.Record)>($r5);

        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void set(int,com.hp.hpl.jena.tdb.base.record.Record)>(i0, $r6);

        virtualinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        virtualinvoke r4.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void write()>();

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z1 == 0 goto label2;

        $r9 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< shiftLeft: this:  ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

        $r14 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< shiftLeft: left:  ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

        $r19 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<< shiftLeft: right: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

     label2:
        return;
    }

    com.hp.hpl.jena.tdb.base.record.Record shiftRight(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.base.record.Record)
    {
        java.lang.Object[] $r4, $r5;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r10, $r11;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r1;
        com.hp.hpl.jena.tdb.base.record.Record r3, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r6, $r8, $r9;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r3 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>(r1);

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label2;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i0 != 0 goto label1;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node is empty - can\'t shift a slot out", $r5);

     label1:
        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isFull()>();

        if $z1 == 0 goto label2;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Destination node is full", $r4);

     label2:
        $r6 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getHigh()>();

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void removeTop()>();

        $r9 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(int,com.hp.hpl.jena.tdb.base.record.Record)>(0, r3);

        $r10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r11 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r10.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void shiftRight(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r11);

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i2 = $i1 - 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i2;

        $i3 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i4 = $i3 + 1;

        $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i4;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        specialinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        return $r7;
    }

    com.hp.hpl.jena.tdb.base.record.Record shiftLeft(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage, com.hp.hpl.jena.tdb.base.record.Record)
    {
        java.lang.Object[] $r4, $r5;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r10, $r11;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r1;
        com.hp.hpl.jena.tdb.base.record.Record r3, $r7;
        int $i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r6, $r8, $r9;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

        r3 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)>(r1);

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label2;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i0 != 0 goto label1;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node is empty - can\'t shift a slot out", $r5);

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isFull()>();

        if $z1 == 0 goto label2;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Destination node is full", $r4);

     label2:
        $r6 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record getLow()>();

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void add(com.hp.hpl.jena.tdb.base.record.Record)>(r3);

        $r9 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void shiftDown(int)>(0);

        $r10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $r11 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r10.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void shiftLeft(com.hp.hpl.jena.tdb.base.buffer.BufferBase)>($r11);

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i2 = $i1 + 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i2;

        $i3 = $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i4 = $i3 - 1;

        $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i4;

        return $r7;
    }

    private void shuffleDown(int)
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r2, $r9;
        java.lang.Integer $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r5, $r6, $r11, $r13, $r14, $r23, $r25, $r26;
        java.lang.Object[] $r16, $r17;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r8;
        java.lang.String $r7, $r15, $r22, $r27;
        org.slf4j.Logger $r4, $r10, $r12, $r18, $r24;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z0 == 0 goto label1;

        $r18 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r17 = newarray (java.lang.Object)[3];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17[0] = $r19;

        $i7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r17[1] = $r20;

        $i8 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r17[2] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("ShuffleDown: i=%d count=%d MaxRec=%d", $r17);

        interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

        $r24 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shuffleDown >> ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r27);

     label1:
        $z1 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z1 == 0 goto label2;

        $i6 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if i0 < $i6 goto label2;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("shuffleDown out of bounds", $r16);

     label2:
        $i9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i10 = $i9 - 1;

        if i0 != $i10 goto label4;

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void removeTop()>();

        $r9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void removeTop()>();

        $i4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i5 = $i4 - 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i5;

        $z3 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z3 == 0 goto label3;

        $r10 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>("shuffleDown << Clear top");

        $r12 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shuffleDown << ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label3:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        return;

     label4:
        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: void shiftDown(int)>(i0);

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i1 = i0 + 1;

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: void shiftDown(int)>($i1);

        $i2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i3 = $i2 - 1;

        r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count> = $i3;

        $z2 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean logging()>();

        if $z2 == 0 goto label5;

        $r4 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shuffleDown << ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>($r7);

     label5:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void internalCheckNode()>();

        return;
    }

    private final com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode cast(com.hp.hpl.jena.tdb.index.bplustree.BPTreePage)
    {
        java.lang.Object[] $r8;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage r0;
        java.lang.ClassCastException $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode $r1, r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r3 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r0 := @parameter0: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage;

     label1:
        $r1 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode) r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong type: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>($r7, $r8);

        return null;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    final int findSlot(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r2;
        int $i0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int find(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        return $i0;
    }

    final boolean isRoot()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private com.hp.hpl.jena.tdb.base.record.Record keyRecord(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        com.hp.hpl.jena.tdb.base.record.Record r3, $r4;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r3 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.base.record.RecordFactory getRecordFactory()>();

        $r4 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record createKeyOnly(com.hp.hpl.jena.tdb.base.record.Record)>(r3);

        return $r4;
    }

    private final int maxRecords()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i0 = $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxRec>;

        return $i0;
    }

    final boolean isFull()
    {
        java.lang.Object[] $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label1;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i1 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        if $i0 <= $i1 goto label1;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("isFull: Moby block: %s", $r1);

     label1:
        $i2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i3 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        if $i2 < $i3 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    final boolean hasAnyKeys()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer getPtrBuffer()>();

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int getLow()>();

        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>($i1, 1);

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: boolean hasAnyKeys()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        return $z1;
    }

    final boolean isMinSize()
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int getMinRec()>();

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label1;

        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i1 >= $i0 goto label1;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("isMinSize: Dwarf block: %s", $r2);

     label1:
        $i2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i2 > $i0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r2;
        java.lang.Integer $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i9;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r10;
        java.lang.String $r5, $r7, $r8, $r9, $r11, r15;
        boolean $z0, $z1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r6;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r1;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $z0 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label1;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAF: ");

        goto label2;

     label1:
        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NODE: ");

     label2:
        r15 = "??";

        $i0 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        if $i0 < 0 goto label3;

        $i5 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5);

        goto label4;

     label3:
        $i1 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        $i9 = (int) -2;

        if $i1 != $i9 goto label4;

        r15 = "root";

     label4:
        $z1 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z1 == 0 goto label5;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/leaf");

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r2 = newarray (java.lang.Object)[3];

        $i2 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r3;

        $r2[1] = r15;

        $i3 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d [%s] (size %d) -- ", $r2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i6 = 0;

     label6:
        $i7 = specialinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        if i6 >= $i7 goto label7;

        $r9 = specialinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: java.lang.String childStr(int)>(i6);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r10 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r11 = specialinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: java.lang.String recstr(com.hp.hpl.jena.tdb.base.buffer.RecordBuffer,int)>($r10, i6);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        i6 = i6 + 1;

        goto label6;

     label7:
        $r6 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i4 = $r6.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int HighPtr>;

        $r7 = specialinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: java.lang.String childStr(int)>($i4);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private final java.lang.String recstr(com.hp.hpl.jena.tdb.base.buffer.RecordBuffer, int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r3;
        com.hp.hpl.jena.tdb.base.record.Record $r1;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer r0;
        int i0;
        java.lang.String $r2;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: boolean isClear(int)>(i0);

        if $z0 == 0 goto label1;

        return "----";

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record _get(int)>(i0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.record.Record: java.lang.String toString()>();

        return $r2;
    }

    public void dump()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        org.apache.jena.atlas.io.IndentedWriter $r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r1 = <org.apache.jena.atlas.io.IndentedWriter: org.apache.jena.atlas.io.IndentedWriter stdout>;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dump(org.apache.jena.atlas.io.IndentedWriter)>($r1);

        return;
    }

    public void dump(org.apache.jena.atlas.io.IndentedWriter)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void output(org.apache.jena.atlas.io.IndentedWriter)>(r1);

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void ensureStartOfLine()>();

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public java.lang.String dumpToString()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r1;
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        java.lang.String $r2;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void output(org.apache.jena.atlas.io.IndentedWriter)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String asString()>();

        return $r2;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r1;
        int $i0, $i1, i2;
        java.lang.String $r2;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r3;
        org.apache.jena.atlas.io.IndentedWriter r0;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r2);

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void incIndent()>();

        i2 = 0;

     label1:
        $i0 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i1 = $i0 + 1;

        if i2 >= $i1 goto label2;

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void println()>();

        $r3 = specialinvoke r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(i2, 1);

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void output(org.apache.jena.atlas.io.IndentedWriter)>(r0);

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void decIndent()>();

        return;
    }

    private java.lang.String childStr(int)
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        int i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int size()>();

        if i0 < $i1 goto label1;

        return "*";

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i2 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        return $r3;
    }

    private final void internalCheckNode()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingNode>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNode(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(null, null);

     label1:
        return;
    }

    private final void internalCheckNodeDeep()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $z0 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingTree>;

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNodeDeep()>();

        return;
    }

    final void checkNode()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNode(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(null, null);

        return;
    }

    final void checkNodeDeep()
    {
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;
        java.lang.Object[] $r1;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        $i2 = (int) -2;

        if $i0 == $i2 goto label1;

        $r1 = newarray (java.lang.Object)[0];

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Root parent is wrong", $r1);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNodeDeep(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(null, null);

        return;
    }

    private final void checkNode(com.hp.hpl.jena.tdb.base.record.Record, com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r4, $r8, $r9, $r14, $r17, $r55, $r59;
        java.lang.Integer $r6, $r7, $r23, $r24, $r25, $r27, $r28, $r30, $r31, $r34, $r35, $r38, $r46, $r47, $r49, $r50, $r57, $r58, $r60, $r62, $r63, $r65;
        com.hp.hpl.jena.tdb.base.record.Record r2, r36, $r40, $r42, $r44, r66;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r10, $r15, $r20;
        com.hp.hpl.jena.tdb.base.page.Page $r12, $r18;
        java.lang.Object[] $r5, $r22, $r26, $r29, $r33, $r37, $r45, $r48, $r51, $r52, $r54, $r56, $r61;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r1, $r32, $r39, $r41, $r43, $r64, $r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams $r3, $r53;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r11, $r16, $r21;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords r13, r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, $i34, i35, i36, $i37, $i38, i39;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r2 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        r36 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i1 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        if $i0 == $i1 goto label01;

        $r61 = newarray (java.lang.Object)[4];

        $i30 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i30);

        $r61[0] = $r62;

        $i31 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i31);

        $r61[1] = $r63;

        $r64 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i32 = virtualinvoke $r64.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: int size()>();

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i32);

        $r61[2] = $r65;

        $r61[3] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Inconsistent: id=%d, count=%d, records.size()=%d : %s", $r61);

     label01:
        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z0 != 0 goto label02;

        $i23 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i24 = $i23 + 1;

        $r55 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i25 = virtualinvoke $r55.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int size()>();

        if $i24 == $i25 goto label02;

        $r56 = newarray (java.lang.Object)[4];

        $i26 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i26);

        $r56[0] = $r57;

        $i27 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i28 = $i27 + 1;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i28);

        $r56[1] = $r58;

        $r59 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i29 = virtualinvoke $r59.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int size()>();

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i29);

        $r56[2] = $r60;

        $r56[3] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Inconsistent: id=%d, count+1=%d, ptrs.size()=%d ; %s", $r56);

     label02:
        $z8 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z8 != 0 goto label03;

        $i22 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $r53 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        $i21 = $r53.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MinRec>;

        if $i22 >= $i21 goto label03;

        $r54 = newarray (java.lang.Object)[1];

        $r54[0] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Runt node: %s", $r54);

     label03:
        $z9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isRoot()>();

        if $z9 != 0 goto label04;

        $i19 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i20 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        if $i19 <= $i20 goto label04;

        $r52 = newarray (java.lang.Object)[1];

        $r52[0] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Over full node: %s", $r52);

     label04:
        $z10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z10 != 0 goto label05;

        $i18 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int parent>;

        $i17 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        if $i18 != $i17 goto label05;

        $r51 = newarray (java.lang.Object)[1];

        $r51[0] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Parent same as id: %s", $r51);

     label05:
        r66 = r2;

        i33 = 0;

     label06:
        $i34 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if i33 >= $i34 goto label09;

        $r39 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r40 = virtualinvoke $r39.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i33);

        if $r40 != null goto label07;

        $r48 = newarray (java.lang.Object)[3];

        $i16 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r48[0] = $r49;

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i33);

        $r48[1] = $r50;

        $r48[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d : Invalid record @%d :: %s", $r48);

     label07:
        if r66 == null goto label08;

        $r41 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r42 = virtualinvoke $r41.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i33);

        $z7 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r66, $r42);

        if $z7 == 0 goto label08;

        $r43 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r44 = virtualinvoke $r43.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i33);

        $r45 = newarray (java.lang.Object)[5];

        $i15 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r45[0] = $r46;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i33);

        $r45[1] = $r47;

        $r45[2] = r66;

        $r45[3] = $r44;

        $r45[4] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Not sorted (%d) (%s, %s) :: %s ", $r45);

     label08:
        $r67 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        r66 = virtualinvoke $r67.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i33);

        i33 = i33 + 1;

        goto label06;

     label09:
        if r66 == null goto label10;

        if r36 == null goto label10;

        $z6 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r66, r36);

        if $z6 == 0 goto label10;

        $r37 = newarray (java.lang.Object)[3];

        $i14 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r37[0] = $r38;

        $r37[1] = r36;

        $r37[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d - Record is too high (max=%s):: %s", $r37);

     label10:
        $z11 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut>;

        if $z11 == 0 goto label13;

        i35 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

     label11:
        $i12 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int maxRecords()>();

        if i35 >= $i12 goto label13;

        $r32 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $z5 = virtualinvoke $r32.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: boolean isClear(int)>(i35);

        if $z5 != 0 goto label12;

        $r33 = newarray (java.lang.Object)[3];

        $i13 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r33[0] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i35);

        $r33[1] = $r35;

        $r33[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d - not clear (idx=%d) :: %s", $r33);

     label12:
        i35 = i35 + 1;

        goto label11;

     label13:
        i36 = 0;

     label14:
        $i37 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i38 = $i37 + 1;

        if i36 >= $i38 goto label20;

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i3 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i36);

        if $i3 >= 0 goto label15;

        $r29 = newarray (java.lang.Object)[3];

        $i11 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r29[0] = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i36);

        $r29[1] = $r31;

        $r29[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Invalid child pointer @%d :: %s", $r29);

     label15:
        $z3 = <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean CheckingTree>;

        if $z3 == 0 goto label19;

        $z4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z4 == 0 goto label19;

        $r9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i4 = virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i36);

        $r10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.page.Page getRead(int)>($i4);

        r13 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords) $r12;

        $i5 = virtualinvoke r13.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getId()>();

        $r14 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i6 = virtualinvoke $r14.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i36);

        if $i5 == $i6 goto label16;

        $r26 = newarray (java.lang.Object)[3];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r26[0] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i36);

        $r26[1] = $r28;

        $r26[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Records: Block @%d has a different id: %d :: %s", $r26);

     label16:
        $i7 = virtualinvoke r13.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getLink()>();

        $i8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if i36 == $i8 goto label18;

        $r15 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r16 = virtualinvoke $r15.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r17 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i9 = virtualinvoke $r17.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i36);

        $r18 = virtualinvoke $r16.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.page.Page getRead(int)>($i9);

        r19 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords) $r18;

        $i10 = virtualinvoke r19.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: int getLink()>();

        if $i7 == $i10 goto label17;

        $r22 = newarray (java.lang.Object)[4];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r22[0] = $r23;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r22[1] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i36);

        $r22[2] = $r25;

        $r22[3] = r13;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Records: Link not to next block @%d/@%d has a different id: %d :: %s", $r22);

     label17:
        $r20 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r21 = virtualinvoke $r20.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        virtualinvoke $r21.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: void release(com.hp.hpl.jena.tdb.base.page.Page)>(r19);

     label18:
        virtualinvoke r13.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecords: void release()>();

     label19:
        i36 = i36 + 1;

        goto label14;

     label20:
        $z1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: boolean NullOut>;

        if $z1 == 0 goto label23;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams params>;

        i39 = $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: int MaxPtr>;

     label21:
        if i36 >= i39 goto label23;

        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: boolean isClear(int)>(i36);

        if $z2 != 0 goto label22;

        $r5 = newarray (java.lang.Object)[3];

        $i2 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i36);

        $r5[1] = $r7;

        $r5[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Unexpected pointer @%d :: %s", $r5);

     label22:
        i36 = i36 + 1;

        goto label21;

     label23:
        return;
    }

    private void checkNodeDeep(com.hp.hpl.jena.tdb.base.record.Record, com.hp.hpl.jena.tdb.base.record.Record)
    {
        byte[] $r24, $r25;
        com.hp.hpl.jena.tdb.base.buffer.PtrBuffer $r6, $r17;
        java.lang.Integer $r12, $r13, $r19, $r20, $r29, $r31, $r33, $r35, $r37, $r38, $r40, $r42, $r44, $r46, $r47, $r49, $r50;
        com.hp.hpl.jena.tdb.base.record.Record r1, r2, $r21, $r23, $r26, $r27, r51, r52;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r4, $r14;
        java.lang.Object[] $r11, $r18, $r28, $r30, $r32, $r34, $r36, $r39, $r41, $r43, $r45, $r48;
        com.hp.hpl.jena.tdb.base.buffer.RecordBuffer $r7, $r8, $r9, $r10, $r22;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreePage $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r15;
        com.hp.hpl.jena.tdb.base.block.BlockMgr $r16;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r5;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r0, $r53;

        r0 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.record.Record;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNode(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r1, r2);

        $i0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if $i0 != 0 goto label01;

        $i24 = 0;

        goto label02;

     label01:
        $i1 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i24 = $i1 + 1;

     label02:
        i2 = $i24;

        i25 = 0;

     label03:
        if i25 >= i2 goto label21;

        r51 = r1;

        $r3 = specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPTreePage get(int,short)>(i25, 1);

        $i3 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if i25 == $i3 goto label13;

        $r21 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record getHighRecord()>();

        $r22 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $r23 = virtualinvoke $r22.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i25);

        if $r21 != null goto label04;

        $r48 = newarray (java.lang.Object)[2];

        $i22 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i22);

        $r48[0] = $r49;

        $i23 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23);

        $r48[1] = $r50;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Can\'t get high record from %d", $r48);

     label04:
        $r24 = virtualinvoke $r21.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        if $r24 != null goto label05;

        $r45 = newarray (java.lang.Object)[2];

        $i20 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i20);

        $r45[0] = $r46;

        $i21 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: int getId()>();

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        $r45[1] = $r47;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Can\'t get high record is missing it\'s key from %d", $r45);

     label05:
        if $r23 != null goto label06;

        $r43 = newarray (java.lang.Object)[1];

        $i19 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19);

        $r43[0] = $r44;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: record is null", $r43);

     label06:
        $r25 = virtualinvoke $r23.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        if $r25 != null goto label07;

        $r41 = newarray (java.lang.Object)[1];

        $i18 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        $r41[0] = $r42;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Record key is null", $r41);

     label07:
        $z3 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>($r21, $r23);

        if $z3 == 0 goto label08;

        $r39 = newarray (java.lang.Object)[3];

        $i17 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        $r39[0] = $r40;

        $r39[1] = $r21;

        $r39[2] = $r23;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Child key %s is greater than this key %s", $r39);

     label08:
        $r26 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record maxRecord()>();

        $r27 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: com.hp.hpl.jena.tdb.base.record.Record minRecord()>();

        $z4 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyNE(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>($r23, $r26);

        if $z4 == 0 goto label09;

        $r36 = newarray (java.lang.Object)[4];

        $i16 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        $r36[0] = $r37;

        $r36[1] = $r23;

        $r36[2] = $r26;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        $r36[3] = $r38;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Key %s is not the max [%s] of the sub-tree idx=%d", $r36);

     label09:
        if r1 == null goto label10;

        $z8 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r1, $r27);

        if $z8 == 0 goto label10;

        $r34 = newarray (java.lang.Object)[3];

        $i15 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        $r34[0] = $r35;

        $r34[1] = r1;

        $r34[2] = $r27;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Minimun for this node should be %s but it\'s %s", $r34);

     label10:
        if r2 == null goto label11;

        $z7 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyLT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r2, $r26);

        if $z7 == 0 goto label11;

        $r32 = newarray (java.lang.Object)[3];

        $i14 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r32[0] = $r33;

        $r32[1] = r2;

        $r32[2] = $r26;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Maximum for this node should be %s but it\'s %s", $r32);

     label11:
        if r1 == null goto label12;

        $z6 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyGT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r1, $r23);

        if $z6 == 0 goto label12;

        $r30 = newarray (java.lang.Object)[3];

        $i13 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r30[0] = $r31;

        $r30[1] = $r23;

        $r30[2] = r1;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Key too small: %s - min should be %s", $r30);

     label12:
        if r2 == null goto label13;

        $z5 = staticinvoke <com.hp.hpl.jena.tdb.base.record.Record: boolean keyLT(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r2, $r23);

        if $z5 == 0 goto label13;

        $r28 = newarray (java.lang.Object)[3];

        $i12 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r28[0] = $r29;

        $r28[1] = $r23;

        $r28[2] = r2;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Key too large: %s - max should be %s", $r28);

     label13:
        $z9 = $r3 instanceof com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        if $z9 != 0 goto label14;

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void checkNodeDeep()>();

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

        goto label20;

     label14:
        $z0 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: boolean isLeaf>;

        if $z0 == 0 goto label15;

        $r14 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        $r16 = virtualinvoke $r15.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: com.hp.hpl.jena.tdb.base.block.BlockMgr getBlockMgr()>();

        $r17 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i10 = virtualinvoke $r17.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i25);

        $z2 = interfaceinvoke $r16.<com.hp.hpl.jena.tdb.base.block.BlockMgr: boolean valid(int)>($i10);

        if $z2 != 0 goto label16;

        $r18 = newarray (java.lang.Object)[3];

        $i11 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        $r18[1] = $r20;

        $r18[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Dangling ptr (records) in block @%d :: %s", $r18);

        goto label16;

     label15:
        $r4 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        $r6 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.PtrBuffer ptrs>;

        $i4 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.base.buffer.PtrBuffer: int get(int)>(i25);

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: boolean valid(int)>($i4);

        if $z1 != 0 goto label16;

        $r11 = newarray (java.lang.Object)[3];

        $i9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int id>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        $r11[1] = $r13;

        $r11[2] = r0;

        specialinvoke r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void error(java.lang.String,java.lang.Object[])>("Node: %d: Dangling ptr in block @%d :: %s", $r11);

     label16:
        if i25 != 0 goto label17;

        $r10 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        r52 = virtualinvoke $r10.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(0);

        goto label19;

     label17:
        $i5 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        if i25 != $i5 goto label18;

        $r9 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: int count>;

        $i8 = $i7 - 1;

        r51 = virtualinvoke $r9.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i8);

        r52 = null;

        goto label19;

     label18:
        $r7 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        $i6 = i25 - 1;

        r51 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>($i6);

        $r8 = r0.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.base.buffer.RecordBuffer records>;

        r52 = virtualinvoke $r8.<com.hp.hpl.jena.tdb.base.buffer.RecordBuffer: com.hp.hpl.jena.tdb.base.record.Record get(int)>(i25);

     label19:
        $r53 = (com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode) $r3;

        specialinvoke $r53.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void checkNodeDeep(com.hp.hpl.jena.tdb.base.record.Record,com.hp.hpl.jena.tdb.base.record.Record)>(r51, r52);

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreePage: void release()>();

     label20:
        i25 = i25 + 1;

        goto label03;

     label21:
        return;
    }

    private static boolean logging()
    {
        org.slf4j.Logger $r0;
        boolean $z0;

        $r0 = <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log>;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.index.bplustree.BPlusTreeParams: boolean logging(org.slf4j.Logger)>($r0);

        return $z0;
    }

    private transient void warning(java.lang.String, java.lang.Object[])
    {
        java.io.PrintStream $r3, $r7;
        java.lang.Object[] r0;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r8;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r1, $r6, r9;

        r8 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r9 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r9, r0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void flush()>();

        return;
    }

    private transient void error(java.lang.String, java.lang.Object[])
    {
        java.io.PrintStream $r2, $r3, $r4;
        java.lang.Object[] r0;
        java.lang.Exception $r7;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r5;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeException $r6;
        java.lang.String $r1, r8;

        r5 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        r8 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object[];

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r8, r0);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void flush()>();

     label1:
        specialinvoke r5.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: void dumpBlocks()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $r6 = new com.hp.hpl.jena.tdb.index.bplustree.BPTreeException;

        specialinvoke $r6.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeException: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void dumpBlocks()
    {
        java.io.PrintStream $r0, $r4, $r7, $r8;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode r1;
        com.hp.hpl.jena.tdb.index.bplustree.BPlusTree $r2, $r5;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr $r3;
        com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr $r6;

        r1 := @this: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("---Nodes");

        $r2 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr getNodeManager()>();

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNodeMgr: void dump()>();

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("---Records");

        $r5 = r1.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: com.hp.hpl.jena.tdb.index.bplustree.BPlusTree bpTree>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.tdb.index.bplustree.BPlusTree: com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr getRecordsMgr()>();

        virtualinvoke $r6.<com.hp.hpl.jena.tdb.index.bplustree.BPTreeRecordsMgr: void dump()>();

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("---");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void flush()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: short WRITE> = 2;

        <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: short READ> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/index/bplustree/BPTreeNode;");

        <com.hp.hpl.jena.tdb.index.bplustree.BPTreeNode: org.slf4j.Logger log> = $r0;

        return;
    }
}
