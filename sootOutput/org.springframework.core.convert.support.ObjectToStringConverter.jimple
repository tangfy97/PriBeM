final class org.springframework.core.convert.support.ObjectToStringConverter extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{

    void <init>()
    {
        org.springframework.core.convert.support.ObjectToStringConverter r0;

        r0 := @this: org.springframework.core.convert.support.ObjectToStringConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        java.util.Set $r1;
        org.springframework.core.convert.support.ObjectToStringConverter r2;

        r2 := @this: org.springframework.core.convert.support.ObjectToStringConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Object;", class "Ljava/lang/String;");

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r1;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ObjectToStringConverter r7;
        org.springframework.core.convert.TypeDescriptor r0, r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6;

        r7 := @this: org.springframework.core.convert.support.ObjectToStringConverter;

        r0 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r8 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = virtualinvoke r0.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getObjectType()>();

        $r2 = class "Ljava/lang/CharSequence;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 != 0 goto label1;

        $r3 = class "Ljava/lang/Number;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z1 != 0 goto label1;

        $r4 = class "Ljava/lang/Boolean;";

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label1;

        $r5 = class "Ljava/lang/Character;";

        $z3 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z3 != 0 goto label1;

        $r6 = class "Ljava/io/StringWriter;";

        $z4 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke $r1.<java.lang.Class: boolean isEnum()>();

        if $z5 != 0 goto label1;

        $z6 = staticinvoke <org.springframework.core.convert.support.ObjectToObjectConverter: boolean hasValueOfMethodOrConstructor(java.lang.Class,java.lang.Class)>($r1, class "Ljava/lang/String;");

        if $z6 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ObjectToStringConverter r1;
        org.springframework.core.convert.TypeDescriptor r2, r3;
        java.lang.Object r0;
        java.lang.String $r4;

        r1 := @this: org.springframework.core.convert.support.ObjectToStringConverter;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r3 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        if r0 == null goto label1;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }
}
