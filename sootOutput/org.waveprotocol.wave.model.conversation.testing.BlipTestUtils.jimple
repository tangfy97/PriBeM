public final class org.waveprotocol.wave.model.conversation.testing.BlipTestUtils extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.model.conversation.testing.BlipTestUtils r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.BlipTestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getInitialBlipBodyPosition()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r3;
        org.waveprotocol.wave.model.document.indexed.IndexedDocProvider $r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema $r2;
        int $i0;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r1;

        $r0 = <org.waveprotocol.wave.model.document.util.DocProviders: org.waveprotocol.wave.model.document.indexed.IndexedDocProvider POJO>;

        $r1 = staticinvoke <org.waveprotocol.wave.model.conversation.TitleHelper: org.waveprotocol.wave.model.document.operation.DocInitialization emptyDocumentWithTitle()>();

        $r2 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema NO_SCHEMA_CONSTRAINTS>;

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.indexed.IndexedDocProvider: org.waveprotocol.wave.model.document.indexed.IndexedDocument build(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>($r1, $r2);

        $i0 = staticinvoke <org.waveprotocol.wave.model.conversation.testing.BlipTestUtils: int getBodyPosition(org.waveprotocol.wave.model.document.ReadableWDocument)>($r3);

        return $i0;
    }

    public static int getBodyPosition(org.waveprotocol.wave.model.conversation.ConversationBlip)
    {
        int $i0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r0;
        org.waveprotocol.wave.model.document.Document $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        $i0 = staticinvoke <org.waveprotocol.wave.model.conversation.testing.BlipTestUtils: int getBodyPosition(org.waveprotocol.wave.model.document.ReadableWDocument)>($r1);

        return $i0;
    }

    public static int getBodyPosition(org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument r0;
        java.lang.Object $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String)>(r0, "body");

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>($r1);

        return $i0;
    }

    public static org.waveprotocol.wave.model.document.util.XmlStringBuilder prependHead(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r1, $r2, $r4, $r5;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $r1 = <org.waveprotocol.wave.model.conversation.Blips: org.waveprotocol.wave.model.document.util.XmlStringBuilder INITIAL_HEAD>;

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createFromXmlString(java.lang.String)>(r3);

        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r4);

        return $r5;
    }

    public static transient java.lang.String debugBlipWrap(java.lang.String[])
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r0, $r1, $r2, $r5, $r6;
        java.lang.String[] r3;
        java.lang.String $r4, $r7;

        r3 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $r1 = <org.waveprotocol.wave.model.conversation.Blips: org.waveprotocol.wave.model.document.util.XmlStringBuilder INITIAL_HEAD>;

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.String debugContainerWrap(java.lang.String[])>(r3);

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createFromXmlString(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder append(org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        return $r7;
    }
}
