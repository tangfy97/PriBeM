public abstract class com.mycila.inject.internal.guava.collect.ForwardingCollection extends com.mycila.inject.internal.guava.collect.ForwardingObject implements java.util.Collection
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingObject: void <init>()>();

        return;
    }

    protected abstract java.util.Collection delegate();

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public boolean removeAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1, r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean removeAll(java.util.Collection)>(r2);

        return $z0;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean remove(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1, r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean containsAll(java.util.Collection)>(r2);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1, r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean addAll(java.util.Collection)>(r2);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1, r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean retainAll(java.util.Collection)>(r2);

        return $z0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

        return;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r2, $r3;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        $r3 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r2);

        return $r3;
    }

    protected boolean standardContains(java.lang.Object)
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean contains(java.util.Iterator,java.lang.Object)>($r1, r2);

        return $z0;
    }

    protected boolean standardContainsAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r3;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r3 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.ForwardingCollection: boolean contains(java.lang.Object)>($r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    protected boolean standardAddAll(java.util.Collection)
    {
        java.util.Iterator $r2;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>(r0, $r2);

        return $z0;
    }

    protected boolean standardRemove(java.lang.Object)
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.lang.Object $r2, r3;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r3 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, r3);

        if $z1 == 0 goto label1;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return 1;

     label2:
        return 0;
    }

    protected boolean standardRemoveAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean removeAll(java.util.Iterator,java.util.Collection)>($r1, r2);

        return $z0;
    }

    protected boolean standardRetainAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: boolean retainAll(java.util.Iterator,java.util.Collection)>($r1, r2);

        return $z0;
    }

    protected void standardClear()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    protected boolean standardIsEmpty()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected java.lang.String standardToString()
    {
        java.lang.String $r1;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.lang.String toStringImpl(java.util.Collection)>(r0);

        return $r1;
    }

    protected java.lang.Object[] standardToArray()
    {
        java.lang.Object[] r1, $r2;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        int $i0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r2;
    }

    protected java.lang.Object[] standardToArray(java.lang.Object[])
    {
        java.lang.Object[] r1, $r2;
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ObjectArrays: java.lang.Object[] toArrayImpl(java.util.Collection,java.lang.Object[])>(r0, r1);

        return $r2;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.collect.ForwardingCollection r0;
        java.util.Collection $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingCollection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingCollection: java.util.Collection delegate()>();

        return $r1;
    }
}
