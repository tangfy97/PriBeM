public class ucar.nc2.stream.NcStreamWriter extends java.lang.Object
{
    private static long maxChunk;
    private static int sizeToCache;
    private ucar.nc2.NetcdfFile ncfile;
    private ucar.nc2.stream.NcStreamProto$Header header;
    private boolean show;

    public void <init>(ucar.nc2.NetcdfFile, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.stream.NcStreamProto$Header$Builder $r4;
        ucar.nc2.Group $r2;
        ucar.nc2.stream.NcStreamProto$Group$Builder $r3;
        int $i0;
        ucar.nc2.stream.NcStreamWriter r0;
        ucar.nc2.NetcdfFile r1;
        java.lang.String r5, $r6, $r7, $r9, $r10, $r11;
        ucar.nc2.stream.NcStreamProto$Header $r8;

        r0 := @this: ucar.nc2.stream.NcStreamWriter;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.stream.NcStreamWriter: boolean show> = 0;

        r0.<ucar.nc2.stream.NcStreamWriter: ucar.nc2.NetcdfFile ncfile> = r1;

        $r2 = virtualinvoke r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group getRootGroup()>();

        $i0 = <ucar.nc2.stream.NcStreamWriter: int sizeToCache>;

        $r3 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Group$Builder encodeGroup(ucar.nc2.Group,int)>($r2, $i0);

        $r4 = staticinvoke <ucar.nc2.stream.NcStreamProto$Header: ucar.nc2.stream.NcStreamProto$Header$Builder newBuilder()>();

        if r5 != null goto label1;

        $r11 = virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        goto label2;

     label1:
        $r11 = r5;

     label2:
        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$Header$Builder: ucar.nc2.stream.NcStreamProto$Header$Builder setLocation(java.lang.String)>($r11);

        $r6 = virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.String getTitle()>();

        if $r6 == null goto label3;

        $r10 = virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.String getTitle()>();

        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$Header$Builder: ucar.nc2.stream.NcStreamProto$Header$Builder setTitle(java.lang.String)>($r10);

     label3:
        $r7 = virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.String getId()>();

        if $r7 == null goto label4;

        $r9 = virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.String getId()>();

        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$Header$Builder: ucar.nc2.stream.NcStreamProto$Header$Builder setId(java.lang.String)>($r9);

     label4:
        virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$Header$Builder: ucar.nc2.stream.NcStreamProto$Header$Builder setRoot(ucar.nc2.stream.NcStreamProto$Group$Builder)>($r3);

        $r8 = virtualinvoke $r4.<ucar.nc2.stream.NcStreamProto$Header$Builder: ucar.nc2.stream.NcStreamProto$Header build()>();

        r0.<ucar.nc2.stream.NcStreamWriter: ucar.nc2.stream.NcStreamProto$Header header> = $r8;

        return;
    }

    public long sendStart(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r2;
        int $i0;
        ucar.nc2.stream.NcStreamWriter r0;
        java.nio.channels.WritableByteChannel r1;
        long $l1;

        r0 := @this: ucar.nc2.stream.NcStreamWriter;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_START>;

        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r2);

        $l1 = (long) $i0;

        return $l1;
    }

    public long sendEnd(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r2;
        int $i0;
        ucar.nc2.stream.NcStreamWriter r0;
        java.nio.channels.WritableByteChannel r1;
        long $l1;

        r0 := @this: ucar.nc2.stream.NcStreamWriter;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_END>;

        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r2);

        $l1 = (long) $i0;

        return $l1;
    }

    public long sendHeader(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r2, $r4;
        long $l1, $l4, $l6, $l8, l9, l10;
        int $i0, $i2, $i3, $i5, $i7;
        java.lang.String $r9, $r14;
        boolean $z0, $z1;
        java.io.PrintStream $r6, $r11;
        ucar.nc2.stream.NcStreamWriter r0;
        java.nio.channels.WritableByteChannel r1;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r12, $r13;
        ucar.nc2.stream.NcStreamProto$Header $r3;

        r0 := @this: ucar.nc2.stream.NcStreamWriter;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_HEADER>;

        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r2);

        $l1 = (long) $i0;

        l9 = 0L + $l1;

        $r3 = r0.<ucar.nc2.stream.NcStreamWriter: ucar.nc2.stream.NcStreamProto$Header header>;

        $r4 = virtualinvoke $r3.<ucar.nc2.stream.NcStreamProto$Header: byte[] toByteArray()>();

        $i2 = lengthof $r4;

        $i3 = staticinvoke <ucar.nc2.stream.NcStream: int writeVInt(java.nio.channels.WritableByteChannel,int)>(r1, $i2);

        $l4 = (long) $i3;

        l10 = l9 + $l4;

        $z0 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z0 == 0 goto label1;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Write Header len=");

        $i7 = lengthof $r4;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label1:
        $i5 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r4);

        $l6 = (long) $i5;

        $l8 = l10 + $l6;

        $z1 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z1 == 0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" header size=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        return $l8;
    }

    public long sendData(ucar.nc2.Variable, ucar.ma2.Section, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] $r2, $r6, $r22, $r27;
        ucar.ma2.StructureDataIterator $r21;
        java.lang.Integer $r14, $r25;
        java.io.DataOutputStream $r33;
        java.lang.Long $r15, $r26;
        java.lang.Object[] $r11, $r23, $r30;
        ucar.ma2.Section r4;
        long $l1, $l4, $l6, $l7, $l8, $l10, $l12, $l14, $l16, $l17, $l18, $l19, $l20, l21, l23, l24, l25, $l28, $l29;
        ucar.nc2.Structure r20;
        ucar.nc2.stream.NcStreamProto$Data $r5;
        java.lang.String $r13, $r32;
        java.nio.channels.WritableByteChannel r1;
        ucar.ma2.StructureData $r28;
        ucar.ma2.ArrayStructureBB $r29;
        boolean $z0, $z1, $z2, $z3;
        ucar.ma2.DataType $r7, $r8, $r9, $r10, $r16, $r17;
        ucar.nc2.stream.NcStreamWriter r0;
        int $i0, $i2, $i3, $i5, $i9, $i11, $i13, $i15, i22, $i26, $i27, $i31;
        ucar.nc2.Variable r3;
        java.io.PrintStream $r12, $r24, $r31;
        java.io.OutputStream $r19;

        r0 := @this: ucar.nc2.stream.NcStreamWriter;

        r3 := @parameter0: ucar.nc2.Variable;

        r4 := @parameter1: ucar.ma2.Section;

        r1 := @parameter2: java.nio.channels.WritableByteChannel;

        $z0 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z0 == 0 goto label1;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = newarray (java.lang.Object)[2];

        $r32 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String getName()>();

        $r30[0] = $r32;

        $r30[1] = r4;

        virtualinvoke $r31.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" %s section=%s%n", $r30);

     label1:
        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_DATA>;

        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r2);

        $l1 = (long) $i0;

        $l18 = 0L + $l1;

        $r5 = staticinvoke <ucar.nc2.stream.NcStream: ucar.nc2.stream.NcStreamProto$Data encodeDataProto(ucar.nc2.Variable,ucar.ma2.Section)>(r3, r4);

        $r6 = virtualinvoke $r5.<ucar.nc2.stream.NcStreamProto$Data: byte[] toByteArray()>();

        $i2 = lengthof $r6;

        $i3 = staticinvoke <ucar.nc2.stream.NcStream: int writeVInt(java.nio.channels.WritableByteChannel,int)>(r1, $i2);

        $l4 = (long) $i3;

        $l19 = $l18 + $l4;

        $i5 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r6);

        $l6 = (long) $i5;

        $l20 = $l19 + $l6;

        l21 = $l20;

        $r7 = virtualinvoke r3.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r7 != $r8 goto label5;

        i22 = 0;

        $r33 = new java.io.DataOutputStream;

        $r19 = staticinvoke <java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)>(r1);

        specialinvoke $r33.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r19);

        r20 = (ucar.nc2.Structure) r3;

        $i31 = (int) -1;

        $r21 = virtualinvoke r20.<ucar.nc2.Structure: ucar.ma2.StructureDataIterator getStructureIterator(int)>($i31);

     label2:
        $z1 = interfaceinvoke $r21.<ucar.ma2.StructureDataIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r27 = <ucar.nc2.stream.NcStream: byte[] MAGIC_VDATA>;

        $i15 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r27);

        $l16 = (long) $i15;

        l23 = l21 + $l16;

        $r28 = interfaceinvoke $r21.<ucar.ma2.StructureDataIterator: ucar.ma2.StructureData next()>();

        $r29 = staticinvoke <ucar.nc2.iosp.IospHelper: ucar.ma2.ArrayStructureBB copyToArrayBB(ucar.ma2.StructureData)>($r28);

        $l17 = staticinvoke <ucar.nc2.stream.NcStream: long encodeArrayStructure(ucar.ma2.ArrayStructure,java.io.OutputStream)>($r29, $r33);

        l21 = l23 + $l17;

        i22 = i22 + 1;

        goto label2;

     label3:
        $r22 = <ucar.nc2.stream.NcStream: byte[] MAGIC_VEND>;

        $i13 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r22);

        $l14 = (long) $i13;

        l24 = l21 + $l14;

        $z2 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z2 == 0 goto label4;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = newarray (java.lang.Object)[2];

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i22);

        $r23[0] = $r25;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l24);

        $r23[1] = $r26;

        virtualinvoke $r24.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" NcStreamWriter sent %d sdata bytes = %d%n", $r23);

     label4:
        return l24;

     label5:
        $l7 = virtualinvoke r4.<ucar.ma2.Section: long computeSize()>();

        l25 = $l7;

        $r9 = virtualinvoke r3.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r10 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r9 == $r10 goto label6;

        $r16 = virtualinvoke r3.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r17 = <ucar.ma2.DataType: ucar.ma2.DataType OPAQUE>;

        if $r16 == $r17 goto label6;

        $i11 = virtualinvoke r3.<ucar.nc2.Variable: int getElementSize()>();

        $l12 = (long) $i11;

        l25 = $l7 * $l12;

     label6:
        $i26 = (int) l25;

        $i27 = staticinvoke <ucar.nc2.stream.NcStream: int writeVInt(java.nio.channels.WritableByteChannel,int)>(r1, $i26);

        $l28 = (long) $i27;

        $l29 = $l20 + $l28;

        $z3 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z3 == 0 goto label7;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = newarray (java.lang.Object)[3];

        $r13 = virtualinvoke r3.<ucar.nc2.Variable: java.lang.String getName()>();

        $r11[0] = $r13;

        $i9 = lengthof $r6;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r11[1] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l25);

        $r11[2] = $r15;

        virtualinvoke $r12.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("  %s proto=%d data=%d%n", $r11);

     label7:
        $l8 = virtualinvoke r3.<ucar.nc2.Variable: long readToByteChannel(ucar.ma2.Section,java.nio.channels.WritableByteChannel)>(r4, r1);

        $l10 = $l29 + $l8;

        return $l10;
    }

    private int writeBytes(java.nio.channels.WritableByteChannel, byte[]) throws java.io.IOException
    {
        byte[] r1;
        int $i0;
        java.nio.channels.WritableByteChannel r0;
        ucar.nc2.stream.NcStreamWriter r3;
        java.nio.ByteBuffer $r2;

        r3 := @this: ucar.nc2.stream.NcStreamWriter;

        r0 := @parameter0: java.nio.channels.WritableByteChannel;

        r1 := @parameter1: byte[];

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $i0 = interfaceinvoke r0.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r2);

        return $i0;
    }

    public long streamAll(java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        byte[] $r2;
        byte $b6, $b8;
        java.lang.Long $r8, $r15, $r16, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r4;
        ucar.nc2.stream.NcStreamWriter r0;
        ucar.nc2.NetcdfFile $r3;
        java.lang.Object[] $r6, $r12, $r18;
        ucar.ma2.Section $r11;
        long $l1, $l2, $l4, l5, $l7, $l9, $l10, $l11, l12, l13;
        int $i0, $i3, $i14;
        ucar.nc2.Variable r10;
        java.lang.String $r14;
        java.io.PrintStream $r7, $r13, $r17, $r19;
        java.util.Iterator $r5;
        java.nio.channels.WritableByteChannel r1;
        java.lang.Object $r9;

        r0 := @this: ucar.nc2.stream.NcStreamWriter;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        $r2 = <ucar.nc2.stream.NcStream: byte[] MAGIC_START>;

        $i0 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: int writeBytes(java.nio.channels.WritableByteChannel,byte[])>(r1, $r2);

        l12 = (long) $i0;

        $l1 = virtualinvoke r0.<ucar.nc2.stream.NcStreamWriter: long sendHeader(java.nio.channels.WritableByteChannel)>(r1);

        l13 = l12 + $l1;

        $z0 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z0 == 0 goto label1;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13);

        $r18[0] = $r20;

        virtualinvoke $r19.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" data starts at= %d%n", $r18);

     label1:
        $r3 = r0.<ucar.nc2.stream.NcStreamWriter: ucar.nc2.NetcdfFile ncfile>;

        $r4 = virtualinvoke $r3.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (ucar.nc2.Variable) $r9;

        $l2 = virtualinvoke r10.<ucar.nc2.Variable: long getSize()>();

        $i3 = virtualinvoke r10.<ucar.nc2.Variable: int getElementSize()>();

        $l4 = (long) $i3;

        l5 = $l2 * $l4;

        $b6 = l5 cmp 1L;

        if $b6 != 0 goto label3;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("HEY");

     label3:
        $z2 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z2 == 0 goto label4;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = newarray (java.lang.Object)[3];

        $r14 = virtualinvoke r10.<ucar.nc2.Variable: java.lang.String getName()>();

        $r12[0] = $r14;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        $r12[1] = $r15;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13);

        $r12[2] = $r16;

        virtualinvoke $r13.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>(" var %s len=%d starts at= %d%n", $r12);

     label4:
        $l7 = <ucar.nc2.stream.NcStreamWriter: long maxChunk>;

        $b8 = l5 cmp $l7;

        $i14 = (int) $b8;

        if $i14 > 0 goto label5;

        $r11 = virtualinvoke r10.<ucar.nc2.Variable: ucar.ma2.Section getShapeAsSection()>();

        $l11 = virtualinvoke r0.<ucar.nc2.stream.NcStreamWriter: long sendData(ucar.nc2.Variable,ucar.ma2.Section,java.nio.channels.WritableByteChannel)>(r10, $r11, r1);

        l13 = l13 + $l11;

        goto label6;

     label5:
        $l9 = <ucar.nc2.stream.NcStreamWriter: long maxChunk>;

        $l10 = specialinvoke r0.<ucar.nc2.stream.NcStreamWriter: long copyChunks(java.nio.channels.WritableByteChannel,ucar.nc2.Variable,long)>(r1, r10, $l9);

        l13 = l13 + $l10;

     label6:
        goto label2;

     label7:
        $z1 = r0.<ucar.nc2.stream.NcStreamWriter: boolean show>;

        if $z1 == 0 goto label8;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13);

        $r6[0] = $r8;

        virtualinvoke $r7.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("total size= %d%n", $r6);

     label8:
        return l13;
    }

    private long copyChunks(java.nio.channels.WritableByteChannel, ucar.nc2.Variable, long) throws java.io.IOException
    {
        ucar.ma2.Section $r12;
        long l0, $l2, l3, $l5, $l6, $l8, $l10, l13;
        byte $b7;
        int[] $r2, $r3, $r4;
        int $i1, $i4, $i9, $i11, $i12, $i14;
        ucar.nc2.Variable r0;
        java.lang.String $r10;
        java.io.IOException $r13;
        ucar.ma2.InvalidRangeException $r8;
        ucar.nc2.FileWriter$ChunkingIndex $r11;
        ucar.nc2.stream.NcStreamWriter r5;
        java.nio.channels.WritableByteChannel r7;

        r5 := @this: ucar.nc2.stream.NcStreamWriter;

        r7 := @parameter0: java.nio.channels.WritableByteChannel;

        r0 := @parameter1: ucar.nc2.Variable;

        l0 := @parameter2: long;

        $i1 = virtualinvoke r0.<ucar.nc2.Variable: int getElementSize()>();

        $l2 = (long) $i1;

        l3 = l0 / $l2;

        $r11 = new ucar.nc2.FileWriter$ChunkingIndex;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        specialinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: void <init>(int[])>($r2);

        l13 = 0L;

     label1:
        $i4 = virtualinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: int currentElement()>();

        $l5 = (long) $i4;

        $l6 = virtualinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: long getSize()>();

        $b7 = $l5 cmp $l6;

        $i14 = (int) $b7;

        if $i14 >= 0 goto label5;

     label2:
        $r3 = virtualinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: int[] getCurrentCounter()>();

        $r4 = virtualinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: int[] computeChunkShape(long)>(l3);

        $r12 = new ucar.ma2.Section;

        specialinvoke $r12.<ucar.ma2.Section: void <init>(int[],int[])>($r3, $r4);

        $l8 = virtualinvoke r5.<ucar.nc2.stream.NcStreamWriter: long sendData(ucar.nc2.Variable,ucar.ma2.Section,java.nio.channels.WritableByteChannel)>(r0, $r12, r7);

        l13 = l13 + $l8;

        $i9 = virtualinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: int currentElement()>();

        $l10 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r4);

        $i11 = (int) $l10;

        $i12 = $i9 + $i11;

        virtualinvoke $r11.<ucar.nc2.FileWriter$ChunkingIndex: void setCurrentCounter(int)>($i12);

     label3:
        goto label1;

     label4:
        $r8 := @caughtexception;

        virtualinvoke $r8.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

        $r13 = new java.io.IOException;

        $r10 = virtualinvoke $r8.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r13;

     label5:
        return l13;

        catch ucar.ma2.InvalidRangeException from label2 to label3 with label4;
    }

    static void <clinit>()
    {
        <ucar.nc2.stream.NcStreamWriter: long maxChunk> = 1000000L;

        <ucar.nc2.stream.NcStreamWriter: int sizeToCache> = 100;

        return;
    }
}
