public abstract class org.springframework.util.ReflectionUtils extends java.lang.Object
{
    public static org.springframework.util.ReflectionUtils$FieldFilter COPYABLE_FIELDS;
    public static org.springframework.util.ReflectionUtils$MethodFilter NON_BRIDGED_METHODS;
    public static org.springframework.util.ReflectionUtils$MethodFilter USER_DECLARED_METHODS;

    static void <clinit>()
    {
        org.springframework.util.ReflectionUtils$3 $r2;
        org.springframework.util.ReflectionUtils$2 $r1;
        org.springframework.util.ReflectionUtils$1 $r0;

        $r0 = new org.springframework.util.ReflectionUtils$1;

        specialinvoke $r0.<org.springframework.util.ReflectionUtils$1: void <init>()>();

        <org.springframework.util.ReflectionUtils: org.springframework.util.ReflectionUtils$FieldFilter COPYABLE_FIELDS> = $r0;

        $r1 = new org.springframework.util.ReflectionUtils$2;

        specialinvoke $r1.<org.springframework.util.ReflectionUtils$2: void <init>()>();

        <org.springframework.util.ReflectionUtils: org.springframework.util.ReflectionUtils$MethodFilter NON_BRIDGED_METHODS> = $r1;

        $r2 = new org.springframework.util.ReflectionUtils$3;

        specialinvoke $r2.<org.springframework.util.ReflectionUtils$3: void <init>()>();

        <org.springframework.util.ReflectionUtils: org.springframework.util.ReflectionUtils$MethodFilter USER_DECLARED_METHODS> = $r2;

        return;
    }

    public void <init>()
    {
        org.springframework.util.ReflectionUtils r0;

        r0 := @this: org.springframework.util.ReflectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Field findField(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String,java.lang.Class)>(r0, r1, null);

        return $r2;
    }

    public static java.lang.reflect.Field findField(java.lang.Class, java.lang.String, java.lang.Class)
    {
        java.lang.reflect.Field r4;
        java.lang.reflect.Field[] $r3;
        int i0, i1;
        java.lang.Class r0, $r2, r5, $r6, r8;
        java.lang.String r1, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        if r1 != null goto label01;

        if r5 != null goto label01;

        $z3 = 0;

        goto label02;

     label01:
        $z3 = 1;

     label02:
        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z3, "Either name or type of the field must be specified");

        r8 = r0;

        goto label09;

     label03:
        $r3 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r3;

        i1 = 0;

        goto label08;

     label04:
        r4 = $r3[i1];

        if r1 == null goto label05;

        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label07;

     label05:
        if r5 == null goto label06;

        $r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label07;

     label06:
        return r4;

     label07:
        i1 = i1 + 1;

     label08:
        if i1 < i0 goto label04;

        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

     label09:
        $r2 = class "Ljava/lang/Object;";

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z0 != 0 goto label10;

        if r8 != null goto label03;

     label10:
        return null;
    }

    public static void setField(java.lang.reflect.Field, java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r4;
        java.lang.IllegalAccessException $r3;
        java.lang.reflect.Field r0;
        java.lang.Object r1, r2;
        java.lang.StringBuilder $r5, $r8, $r9, $r11;
        java.lang.Class $r6;
        java.lang.String $r7, $r10, $r12;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

     label1:
        virtualinvoke r0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>($r3);

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected reflection exception - ");

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r3.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public static java.lang.Object getField(java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.IllegalStateException $r4;
        java.lang.IllegalAccessException $r3;
        java.lang.reflect.Field r0;
        java.lang.Object r1, $r2;
        java.lang.StringBuilder $r5, $r8, $r9, $r11;
        java.lang.Class $r6;
        java.lang.String $r7, $r10, $r12;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Object;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>($r3);

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected reflection exception - ");

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r3.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r4;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String)
    {
        java.lang.Class[] $r2;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Class)[0];

        $r3 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, $r2);

        return $r3;
    }

    public static transient java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] r5, $r6;
        java.lang.reflect.Method[] r2, $r8;
        int $i0, i1;
        java.lang.Class r0, r7;
        java.lang.String r1, $r4;
        java.lang.reflect.Method r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Method name must not be null");

        r7 = r0;

        goto label8;

     label1:
        $z0 = virtualinvoke r7.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        goto label3;

     label2:
        $r8 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label3:
        r2 = $r8;

        $i0 = lengthof $r8;

        i1 = 0;

        goto label7;

     label4:
        r3 = r2[i1];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label6;

        if r5 == null goto label5;

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(r5, $r6);

        if $z2 == 0 goto label6;

     label5:
        return r3;

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < $i0 goto label4;

        r7 = virtualinvoke r7.<java.lang.Class: java.lang.Class getSuperclass()>();

     label8:
        if r7 != null goto label1;

        return null;
    }

    public static java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.Object[] $r2;
        java.lang.Object r1, $r3;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>(r0, r1, $r2);

        return $r3;
    }

    public static transient java.lang.Object invokeMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object[])
    {
        java.lang.IllegalStateException $r5;
        java.lang.Object[] r2;
        java.lang.Object r1, $r3;
        java.lang.reflect.Method r0;
        java.lang.Exception $r4;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>($r4);

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should never get here");

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.Object invokeJdbcMethod(java.lang.reflect.Method, java.lang.Object) throws java.sql.SQLException
    {
        java.lang.Object[] $r2;
        java.lang.Object r1, $r3;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.Object invokeJdbcMethod(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>(r0, r1, $r2);

        return $r3;
    }

    public static transient java.lang.Object invokeJdbcMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]) throws java.sql.SQLException
    {
        java.lang.Throwable $r5, $r7;
        java.lang.IllegalStateException $r6;
        java.lang.IllegalAccessException $r9;
        java.lang.Object[] r2;
        java.lang.reflect.InvocationTargetException $r4;
        java.sql.SQLException $r8;
        java.lang.Object r1, $r3;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r9 := @caughtexception;

        staticinvoke <org.springframework.util.ReflectionUtils: void handleReflectionException(java.lang.Exception)>($r9);

        goto label6;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r5 instanceof java.sql.SQLException;

        if $z0 == 0 goto label5;

        $r7 = virtualinvoke $r4.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r8 = (java.sql.SQLException) $r7;

        throw $r8;

     label5:
        staticinvoke <org.springframework.util.ReflectionUtils: void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r4);

     label6:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should never get here");

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
    }

    public static void handleReflectionException(java.lang.Exception)
    {
        java.lang.IllegalStateException $r3, $r8;
        java.lang.String $r5, $r7, $r10, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.lang.RuntimeException $r1;
        java.lang.Exception r0;
        java.lang.reflect.InvocationTargetException $r2;
        java.lang.StringBuilder $r4, $r6, $r9, $r11;

        r0 := @parameter0: java.lang.Exception;

        $z0 = r0 instanceof java.lang.NoSuchMethodException;

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Method not found: ");

        $r10 = virtualinvoke r0.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $z1 = r0 instanceof java.lang.IllegalAccessException;

        if $z1 == 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access method: ");

        $r5 = virtualinvoke r0.<java.lang.Exception: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $z2 = r0 instanceof java.lang.reflect.InvocationTargetException;

        if $z2 == 0 goto label3;

        $r2 = (java.lang.reflect.InvocationTargetException) r0;

        staticinvoke <org.springframework.util.ReflectionUtils: void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)>($r2);

     label3:
        $z3 = r0 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label4;

        $r1 = (java.lang.RuntimeException) r0;

        throw $r1;

     label4:
        staticinvoke <org.springframework.util.ReflectionUtils: void handleUnexpectedException(java.lang.Throwable)>(r0);

        return;
    }

    public static void handleInvocationTargetException(java.lang.reflect.InvocationTargetException)
    {
        java.lang.Throwable $r1;
        java.lang.reflect.InvocationTargetException r0;

        r0 := @parameter0: java.lang.reflect.InvocationTargetException;

        $r1 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        staticinvoke <org.springframework.util.ReflectionUtils: void rethrowRuntimeException(java.lang.Throwable)>($r1);

        return;
    }

    public static void rethrowRuntimeException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.Error $r1;
        java.lang.RuntimeException $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.RuntimeException) r0;

        throw $r2;

     label1:
        $z1 = r0 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r1 = (java.lang.Error) r0;

        throw $r1;

     label2:
        staticinvoke <org.springframework.util.ReflectionUtils: void handleUnexpectedException(java.lang.Throwable)>(r0);

        return;
    }

    public static void rethrowException(java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable r0;
        java.lang.Error $r1;
        java.lang.Exception $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.Exception;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Exception) r0;

        throw $r2;

     label1:
        $z1 = r0 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r1 = (java.lang.Error) r0;

        throw $r1;

     label2:
        staticinvoke <org.springframework.util.ReflectionUtils: void handleUnexpectedException(java.lang.Throwable)>(r0);

        return;
    }

    private static void handleUnexpectedException(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        java.lang.IllegalStateException $r0;

        r1 := @parameter0: java.lang.Throwable;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception thrown", r1);

        throw $r0;
    }

    public static boolean declaresException(java.lang.reflect.Method, java.lang.Class)
    {
        int i0, i1;
        java.lang.Class[] $r1;
        java.lang.Class r2, r3;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Method must not be null");

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label3;

     label1:
        r2 = $r1[i1];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return 0;
    }

    public static boolean isPublicStaticFinal(java.lang.reflect.Field)
    {
        int $i0;
        java.lang.reflect.Field r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isEqualsMethod(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.Class[] $r2;
        java.lang.Class $r3;
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("equals");

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 1 goto label3;

        $r3 = $r2[0];

        if $r3 != class "Ljava/lang/Object;" goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isHashCodeMethod(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.Class[] $r2;
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isToStringMethod(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.Class[] $r2;
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("toString");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void makeAccessible(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        int $i0, $i1, $i2;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 == 0 goto label1;

        $i2 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i2);

        if $z2 == 0 goto label2;

     label1:
        $z3 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        if $z3 != 0 goto label2;

        virtualinvoke r0.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        return;
    }

    public static void makeAccessible(java.lang.reflect.Method)
    {
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label2:
        return;
    }

    public static void makeAccessible(java.lang.reflect.Constructor)
    {
        int $i0, $i1;
        java.lang.Class $r1;
        java.lang.reflect.Constructor r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $i0 = virtualinvoke r0.<java.lang.reflect.Constructor: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 != 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.reflect.Constructor: boolean isAccessible()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label2:
        return;
    }

    public static void doWithMethods(java.lang.Class, org.springframework.util.ReflectionUtils$MethodCallback) throws java.lang.IllegalArgumentException
    {
        org.springframework.util.ReflectionUtils$MethodCallback r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.springframework.util.ReflectionUtils$MethodCallback;

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithMethods(java.lang.Class,org.springframework.util.ReflectionUtils$MethodCallback,org.springframework.util.ReflectionUtils$MethodFilter)>(r0, r1, null);

        return;
    }

    public static void doWithMethods(java.lang.Class, org.springframework.util.ReflectionUtils$MethodCallback, org.springframework.util.ReflectionUtils$MethodFilter) throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalStateException $r8;
        java.lang.reflect.Method[] $r1;
        org.springframework.util.ReflectionUtils$MethodCallback r3;
        int i0, i1, i2, i3;
        java.lang.String $r10, $r14;
        java.lang.reflect.Method r15;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r7;
        java.lang.Class[] $r5;
        org.springframework.util.ReflectionUtils$MethodFilter r2;
        java.lang.Class r0, $r4, $r6, r16;
        java.lang.StringBuilder $r9, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.util.ReflectionUtils$MethodCallback;

        r2 := @parameter2: org.springframework.util.ReflectionUtils$MethodFilter;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label06;

     label01:
        r15 = $r1[i1];

        if r2 == null goto label02;

        $z0 = interfaceinvoke r2.<org.springframework.util.ReflectionUtils$MethodFilter: boolean matches(java.lang.reflect.Method)>(r15);

        if $z0 != 0 goto label02;

        goto label05;

     label02:
        interfaceinvoke r3.<org.springframework.util.ReflectionUtils$MethodCallback: void doWith(java.lang.reflect.Method)>(r15);

     label03:
        goto label05;

     label04:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Shouldn\'t be illegal to access method \'");

        $r10 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label05:
        i1 = i1 + 1;

     label06:
        if i1 < i0 goto label01;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 == null goto label07;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithMethods(java.lang.Class,org.springframework.util.ReflectionUtils$MethodCallback,org.springframework.util.ReflectionUtils$MethodFilter)>($r6, r3, r2);

        goto label10;

     label07:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label10;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = lengthof $r5;

        i3 = 0;

        goto label09;

     label08:
        r16 = $r5[i3];

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithMethods(java.lang.Class,org.springframework.util.ReflectionUtils$MethodCallback,org.springframework.util.ReflectionUtils$MethodFilter)>(r16, r3, r2);

        i3 = i3 + 1;

     label09:
        if i3 < i2 goto label08;

     label10:
        return;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
    }

    public static java.lang.reflect.Method[] getAllDeclaredMethods(java.lang.Class) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r4;
        org.springframework.util.ReflectionUtils$4 $r2;
        int $i0;
        java.lang.Class r1;
        java.lang.reflect.Method[] $r3, $r5;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(32);

        $r2 = new org.springframework.util.ReflectionUtils$4;

        specialinvoke $r2.<org.springframework.util.ReflectionUtils$4: void <init>(java.util.List)>($r0);

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithMethods(java.lang.Class,org.springframework.util.ReflectionUtils$MethodCallback)>(r1, $r2);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r3 = newarray (java.lang.reflect.Method)[$i0];

        $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.reflect.Method[]) $r4;

        return $r5;
    }

    public static void doWithFields(java.lang.Class, org.springframework.util.ReflectionUtils$FieldCallback) throws java.lang.IllegalArgumentException
    {
        java.lang.Class r0;
        org.springframework.util.ReflectionUtils$FieldCallback r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.springframework.util.ReflectionUtils$FieldCallback;

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithFields(java.lang.Class,org.springframework.util.ReflectionUtils$FieldCallback,org.springframework.util.ReflectionUtils$FieldFilter)>(r0, r1, null);

        return;
    }

    public static void doWithFields(java.lang.Class, org.springframework.util.ReflectionUtils$FieldCallback, org.springframework.util.ReflectionUtils$FieldFilter) throws java.lang.IllegalArgumentException
    {
        org.springframework.util.ReflectionUtils$FieldFilter r3;
        java.lang.IllegalStateException $r7;
        org.springframework.util.ReflectionUtils$FieldCallback r4;
        int $i0, i1;
        java.lang.String $r9, $r13;
        boolean $z0;
        java.lang.IllegalAccessException $r6;
        java.lang.reflect.Field r2;
        java.lang.reflect.Field[] $r1;
        java.lang.Class r0, $r5, r14;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: org.springframework.util.ReflectionUtils$FieldCallback;

        r3 := @parameter2: org.springframework.util.ReflectionUtils$FieldFilter;

        r14 = r0;

     label1:
        $r1 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = lengthof $r1;

        i1 = 0;

        goto label7;

     label2:
        r2 = $r1[i1];

        if r3 == null goto label3;

        $z0 = interfaceinvoke r3.<org.springframework.util.ReflectionUtils$FieldFilter: boolean matches(java.lang.reflect.Field)>(r2);

        if $z0 != 0 goto label3;

        goto label6;

     label3:
        interfaceinvoke r4.<org.springframework.util.ReflectionUtils$FieldCallback: void doWith(java.lang.reflect.Field)>(r2);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Shouldn\'t be illegal to access field \'");

        $r9 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < $i0 goto label2;

        $r5 = virtualinvoke r14.<java.lang.Class: java.lang.Class getSuperclass()>();

        r14 = $r5;

        if $r5 == null goto label8;

        if $r5 != class "Ljava/lang/Object;" goto label1;

     label8:
        return;

        catch java.lang.IllegalAccessException from label3 to label4 with label5;
    }

    public static void shallowCopyFieldState(java.lang.Object, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        org.springframework.util.ReflectionUtils$FieldFilter $r6;
        org.springframework.util.ReflectionUtils$5 $r5;
        java.lang.String $r10, $r14, $r17;
        boolean $z0;
        java.lang.IllegalArgumentException $r7, $r18, $r19;
        java.lang.Object r0, r1;
        java.lang.Class $r2, $r3, $r4, $r9, $r13;
        java.lang.StringBuilder $r8, $r11, $r12, $r15, $r16;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source for field copy cannot be null");

        throw $r19;

     label1:
        if r1 != null goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Destination for field copy cannot be null");

        throw $r18;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destination class [");

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must be same or subclass as source class [");

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r7;

     label3:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = new org.springframework.util.ReflectionUtils$5;

        specialinvoke $r5.<org.springframework.util.ReflectionUtils$5: void <init>(java.lang.Object,java.lang.Object)>(r0, r1);

        $r6 = <org.springframework.util.ReflectionUtils: org.springframework.util.ReflectionUtils$FieldFilter COPYABLE_FIELDS>;

        staticinvoke <org.springframework.util.ReflectionUtils: void doWithFields(java.lang.Class,org.springframework.util.ReflectionUtils$FieldCallback,org.springframework.util.ReflectionUtils$FieldFilter)>($r4, $r5, $r6);

        return;
    }
}
