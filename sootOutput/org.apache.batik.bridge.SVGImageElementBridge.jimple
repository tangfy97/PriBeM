public class org.apache.batik.bridge.SVGImageElementBridge extends org.apache.batik.bridge.AbstractGraphicsNodeBridge
{
    protected org.w3c.dom.svg.SVGDocument imgDocument;
    protected org.w3c.dom.events.EventListener listener;
    protected org.apache.batik.bridge.BridgeContext subCtx;
    protected boolean hitCheckChildren;
    static org.apache.batik.bridge.SVGBrokenLinkProvider brokenLinkProvider;

    public void <init>()
    {
        org.apache.batik.bridge.SVGImageElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void <init>()>();

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener> = null;

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx> = null;

        r0.<org.apache.batik.bridge.SVGImageElementBridge: boolean hitCheckChildren> = 0;

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGImageElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        return "image";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.bridge.SVGImageElementBridge $r0, r1;

        r1 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        $r0 = new org.apache.batik.bridge.SVGImageElementBridge;

        specialinvoke $r0.<org.apache.batik.bridge.SVGImageElementBridge: void <init>()>();

        return $r0;
    }

    public org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        java.lang.Object[] $r11;
        org.apache.batik.gvt.GraphicsNode $r3, $r5;
        org.apache.batik.bridge.BridgeException $r10;
        org.apache.batik.bridge.BridgeContext r1;
        java.awt.RenderingHints $r6, $r7;
        org.w3c.dom.svg.SVGImageElement r12;
        org.apache.batik.bridge.SVGImageElementBridge r0;
        org.w3c.dom.Element r2;
        org.w3c.dom.svg.SVGAnimatedString $r8;
        org.apache.batik.gvt.ImageNode r4;
        java.lang.String $r9;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r3 = specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r2);

        r4 = (org.apache.batik.gvt.ImageNode) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void associateSVGContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, r2, r4);

        r0.<org.apache.batik.bridge.SVGImageElementBridge: boolean hitCheckChildren> = 0;

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode buildImageGraphicsNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r2);

        if $r5 != null goto label2;

        r12 = (org.w3c.dom.svg.SVGImageElement) r2;

        $r8 = interfaceinvoke r12.<org.w3c.dom.svg.SVGURIReference: org.w3c.dom.svg.SVGAnimatedString getHref()>();

        $r9 = interfaceinvoke $r8.<org.w3c.dom.svg.SVGAnimatedString: java.lang.String getAnimVal()>();

        $r10 = new org.apache.batik.bridge.BridgeException;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = $r9;

        specialinvoke $r10.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r1, r2, "uri.image.invalid", $r11);

        throw $r10;

     label2:
        virtualinvoke r4.<org.apache.batik.gvt.ImageNode: void setImage(org.apache.batik.gvt.GraphicsNode)>($r5);

        $z0 = r0.<org.apache.batik.bridge.SVGImageElementBridge: boolean hitCheckChildren>;

        virtualinvoke r4.<org.apache.batik.gvt.ImageNode: void setHitCheckChildren(boolean)>($z0);

        $r6 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertImageRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r2, null);

        $r7 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r2, $r6);

        if $r7 == null goto label3;

        virtualinvoke r4.<org.apache.batik.gvt.AbstractGraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r7);

     label3:
        return r4;
    }

    protected org.apache.batik.gvt.GraphicsNode buildImageGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        java.lang.Object[] $r11, $r13;
        org.apache.batik.bridge.SVGImageElementBridge r6;
        org.w3c.dom.svg.SVGAnimatedString $r2;
        int $i0, $i1, $i3;
        java.lang.String $r3, $r4;
        org.apache.batik.gvt.GraphicsNode $r8;
        org.apache.batik.bridge.BridgeException $r15, $r16;
        org.apache.batik.bridge.BridgeContext r7;
        org.w3c.dom.svg.SVGImageElement r1;
        org.w3c.dom.Element r0;
        org.apache.batik.util.ParsedURL r14, $r17, $r18;

        r6 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r7 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r1 = (org.w3c.dom.svg.SVGImageElement) r0;

        $r2 = interfaceinvoke r1.<org.w3c.dom.svg.SVGURIReference: org.w3c.dom.svg.SVGAnimatedString getHref()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGAnimatedString: java.lang.String getAnimVal()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r15 = new org.apache.batik.bridge.BridgeException;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = "xlink:href";

        specialinvoke $r15.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r7, r0, "attribute.missing", $r13);

        throw $r15;

     label1:
        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(35);

        $i3 = (int) -1;

        if $i1 == $i3 goto label2;

        $r16 = new org.apache.batik.bridge.BridgeException;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = "xlink:href";

        $r11[1] = $r3;

        specialinvoke $r16.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r7, r0, "attribute.malformed", $r11);

        throw $r16;

     label2:
        $r4 = staticinvoke <org.apache.batik.dom.AbstractNode: java.lang.String getBaseURI(org.w3c.dom.Node)>(r0);

        if $r4 != null goto label3;

        $r17 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r17.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r3);

        r14 = $r17;

        goto label4;

     label3:
        $r18 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r18.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String,java.lang.String)>($r4, $r3);

        r14 = $r18;

     label4:
        $r8 = virtualinvoke r6.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createImageGraphicsNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.util.ParsedURL)>(r7, r0, r14);

        return $r8;
    }

    protected org.apache.batik.gvt.GraphicsNode createImageGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.util.ParsedURL)
    {
        java.awt.geom.Rectangle2D $r2;
        byte $b0, $b1;
        org.w3c.dom.Document $r4, $r12, $r18;
        org.apache.batik.bridge.InterruptedBridgeException $r37, $r39;
        org.apache.batik.gvt.GraphicsNode $r21, $r22, $r23, $r26, $r32, $r35, $r47, $r52;
        org.apache.batik.bridge.BridgeException $r41, $r43, $r54, $r57, $r59;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry $r9;
        java.lang.Exception $r36, $r56;
        org.apache.batik.bridge.UserAgent $r6;
        org.apache.batik.util.ParsedURL r7, $r27, r62;
        java.lang.Throwable $r28;
        java.lang.Object[] $r42, $r55, $r60;
        org.w3c.dom.svg.SVGDocument $r19, $r20, $r24, $r25, r61;
        java.io.InterruptedIOException $r38;
        java.lang.String $r5, $r11, $r17, $r30, $r31, $r45, $r46, $r50, $r51;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt $r10;
        java.io.IOException $r29, $r33, $r44, $r48, $r49;
        org.apache.batik.bridge.DocumentLoader $r8;
        org.apache.batik.bridge.SVGImageElementBridge r14;
        java.lang.SecurityException $r40, $r53, $r58;
        boolean $z0;
        org.apache.batik.ext.awt.image.renderable.Filter $r13, $r16, $r34;
        org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream $r15, r63;
        double $d0, $d1;
        org.apache.batik.gvt.ShapeNode $r3;
        org.w3c.dom.Element r1;

        r14 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r7 := @parameter2: org.apache.batik.util.ParsedURL;

        $r2 = staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: java.awt.geom.Rectangle2D getImageBounds(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r1);

        $d0 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label01;

        $d1 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label02;

     label01:
        $r3 = new org.apache.batik.gvt.ShapeNode;

        specialinvoke $r3.<org.apache.batik.gvt.ShapeNode: void <init>()>();

        virtualinvoke $r3.<org.apache.batik.gvt.ShapeNode: void setShape(java.awt.Shape)>($r2);

        return $r3;

     label02:
        $r4 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r61 = (org.w3c.dom.svg.SVGDocument) $r4;

        $r5 = interfaceinvoke r61.<org.w3c.dom.svg.SVGDocument: java.lang.String getURL()>();

        r62 = null;

        if $r5 == null goto label03;

        $r27 = new org.apache.batik.util.ParsedURL;

        specialinvoke $r27.<org.apache.batik.util.ParsedURL: void <init>(java.lang.String)>($r5);

        r62 = $r27;

     label03:
        $r6 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

     label04:
        interfaceinvoke $r6.<org.apache.batik.bridge.UserAgent: void checkLoadExternalResource(org.apache.batik.util.ParsedURL,org.apache.batik.util.ParsedURL)>(r7, r62);

     label05:
        goto label07;

     label06:
        $r58 := @caughtexception;

        $r59 = new org.apache.batik.bridge.BridgeException;

        $r60 = newarray (java.lang.Object)[1];

        $r60[0] = r7;

        specialinvoke $r59.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r0, r1, $r58, "uri.unsecure", $r60);

        throw $r59;

     label07:
        $r8 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.DocumentLoader getDocumentLoader()>();

        $r9 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry getRegistry()>();

        $r10 = staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.ext.awt.color.ICCColorSpaceExt extractColorSpace(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r1, r0);

     label08:
        $r11 = virtualinvoke r7.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r12 = virtualinvoke $r8.<org.apache.batik.bridge.DocumentLoader: org.w3c.dom.Document checkCache(java.lang.String)>($r11);

        if $r12 == null goto label09;

        $r24 = (org.w3c.dom.svg.SVGDocument) $r12;

        r14.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument> = $r24;

        $r25 = r14.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r26 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createSVGImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.svg.SVGDocument)>(r0, r1, $r25);

        return $r26;

     label09:
        goto label12;

     label10:
        $r57 := @caughtexception;

        throw $r57;

     label11:
        $r56 := @caughtexception;

     label12:
        $r13 = virtualinvoke $r9.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter checkCache(org.apache.batik.util.ParsedURL,org.apache.batik.ext.awt.color.ICCColorSpaceExt)>(r7, $r10);

        if $r13 == null goto label13;

        $r23 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createRasterImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.util.ParsedURL)>(r0, r1, $r13, r7);

        return $r23;

     label13:
        $r15 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream openStream(org.w3c.dom.Element,org.apache.batik.util.ParsedURL)>(r1, r7);

        r63 = $r15;

     label14:
        goto label17;

     label15:
        $r53 := @caughtexception;

        $r54 = new org.apache.batik.bridge.BridgeException;

        $r55 = newarray (java.lang.Object)[1];

        $r55[0] = r7;

        specialinvoke $r54.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r0, r1, $r53, "uri.unsecure", $r55);

        throw $r54;

     label16:
        $r49 := @caughtexception;

        $r50 = virtualinvoke r7.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r51 = virtualinvoke $r49.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r52 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createBrokenImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.String)>(r0, r1, $r50, $r51);

        return $r52;

     label17:
        $r16 = virtualinvoke $r9.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter readURL(java.io.InputStream,org.apache.batik.util.ParsedURL,org.apache.batik.ext.awt.color.ICCColorSpaceExt,boolean,boolean)>($r15, r7, $r10, 0, 0);

        if $r16 == null goto label18;

        $r22 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createRasterImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.util.ParsedURL)>(r0, r1, $r16, r7);

        return $r22;

     label18:
        virtualinvoke $r15.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void retry()>();

     label19:
        goto label24;

     label20:
        $r48 := @caughtexception;

        virtualinvoke $r15.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void release()>();

     label21:
        r63 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream openStream(org.w3c.dom.Element,org.apache.batik.util.ParsedURL)>(r1, r7);

     label22:
        goto label24;

     label23:
        $r44 := @caughtexception;

        $r45 = virtualinvoke r7.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r46 = virtualinvoke $r44.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r47 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createBrokenImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.String)>(r0, r1, $r45, $r46);

        return $r47;

     label24:
        $r17 = virtualinvoke r7.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r18 = virtualinvoke $r8.<org.apache.batik.bridge.DocumentLoader: org.w3c.dom.Document loadDocument(java.lang.String,java.io.InputStream)>($r17, r63);

        $r19 = (org.w3c.dom.svg.SVGDocument) $r18;

        r14.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument> = $r19;

        $r20 = r14.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r21 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createSVGImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.svg.SVGDocument)>(r0, r1, $r20);

        return $r21;

     label25:
        $r43 := @caughtexception;

        throw $r43;

     label26:
        $r40 := @caughtexception;

        $r41 = new org.apache.batik.bridge.BridgeException;

        $r42 = newarray (java.lang.Object)[1];

        $r42[0] = r7;

        specialinvoke $r41.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r0, r1, $r40, "uri.unsecure", $r42);

        throw $r41;

     label27:
        $r38 := @caughtexception;

        $z0 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted()>();

        if $z0 == 0 goto label30;

        $r39 = new org.apache.batik.bridge.InterruptedBridgeException;

        specialinvoke $r39.<org.apache.batik.bridge.InterruptedBridgeException: void <init>()>();

        throw $r39;

     label28:
        $r37 := @caughtexception;

        throw $r37;

     label29:
        $r36 := @caughtexception;

     label30:
        virtualinvoke r63.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void retry()>();

     label31:
        goto label36;

     label32:
        $r33 := @caughtexception;

        virtualinvoke r63.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void release()>();

     label33:
        r63 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream openStream(org.w3c.dom.Element,org.apache.batik.util.ParsedURL)>(r1, r7);

     label34:
        goto label36;

     label35:
        $r29 := @caughtexception;

        $r30 = virtualinvoke r7.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r32 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createBrokenImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.String)>(r0, r1, $r30, $r31);

        return $r32;

     label36:
        $r34 = virtualinvoke $r9.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.renderable.Filter readURL(java.io.InputStream,org.apache.batik.util.ParsedURL,org.apache.batik.ext.awt.color.ICCColorSpaceExt,boolean,boolean)>(r63, r7, $r10, 1, 1);

        if $r34 == null goto label38;

        $r35 = virtualinvoke r14.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createRasterImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.ext.awt.image.renderable.Filter,org.apache.batik.util.ParsedURL)>(r0, r1, $r34, r7);

        goto label43;

     label37:
        return $r35;

     label38:
        goto label44;

     label39:
        goto label42;

     label40:
        $r28 := @caughtexception;

        goto label45;

     label41:
        throw $r28;

     label42:
        return null;

     label43:
        virtualinvoke r63.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void release()>();

        goto label37;

     label44:
        virtualinvoke r63.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void release()>();

        goto label39;

     label45:
        virtualinvoke r63.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void release()>();

        goto label41;

        catch java.lang.SecurityException from label04 to label05 with label06;
        catch org.apache.batik.bridge.BridgeException from label08 to label09 with label10;
        catch java.lang.Exception from label08 to label09 with label11;
        catch java.lang.SecurityException from label13 to label14 with label15;
        catch java.io.IOException from label13 to label14 with label16;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label23;
        catch org.apache.batik.bridge.BridgeException from label24 to label25 with label25;
        catch java.lang.SecurityException from label24 to label25 with label26;
        catch java.io.InterruptedIOException from label24 to label25 with label27;
        catch org.apache.batik.bridge.InterruptedBridgeException from label24 to label25 with label28;
        catch java.lang.Exception from label24 to label25 with label29;
        catch java.io.IOException from label30 to label31 with label32;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label40 with label40;
    }

    protected org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream openStream(org.w3c.dom.Element, org.apache.batik.util.ParsedURL) throws java.io.IOException
    {
        java.util.Iterator $r5;
        java.lang.String[] $r3;
        org.apache.batik.ext.awt.image.spi.ImageTagRegistry $r1;
        java.util.ArrayList $r0;
        org.apache.batik.bridge.SVGImageElementBridge r8;
        java.util.List $r2;
        org.w3c.dom.Element r9;
        org.apache.batik.util.ParsedURL r4;
        org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream $r7;
        java.io.InputStream $r6;

        r8 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r9 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: org.apache.batik.util.ParsedURL;

        $r0 = new java.util.ArrayList;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: org.apache.batik.ext.awt.image.spi.ImageTagRegistry getRegistry()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.spi.ImageTagRegistry: java.util.List getRegisteredMimeTypes()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = <org.apache.batik.util.MimeTypeConstants: java.lang.String[] MIME_TYPES_SVG>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        $r6 = virtualinvoke r4.<org.apache.batik.util.ParsedURL: java.io.InputStream openStream(java.util.Iterator)>($r5);

        $r7 = new org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream;

        specialinvoke $r7.<org.apache.batik.bridge.SVGImageElementBridge$ProtectedStream: void <init>(java.io.InputStream)>($r6);

        return $r7;
    }

    protected org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()
    {
        org.apache.batik.gvt.ImageNode $r0;
        org.apache.batik.bridge.SVGImageElementBridge r1;

        r1 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        $r0 = new org.apache.batik.gvt.ImageNode;

        specialinvoke $r0.<org.apache.batik.gvt.ImageNode: void <init>()>();

        return $r0;
    }

    public boolean isComposite()
    {
        org.apache.batik.bridge.SVGImageElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        return 0;
    }

    protected void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.bridge.SVGImageElementBridge r3;
        org.w3c.dom.Element r1;
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.dom.svg.SVGOMElement $r4;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r2 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void bind(org.w3c.dom.Node,org.apache.batik.gvt.GraphicsNode)>(r1, r2);

        $z1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z1 == 0 goto label2;

        r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e> = r1;

        r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node> = r2;

        r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx> = r0;

        $r4 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        virtualinvoke $r4.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>(r3);

     label2:
        return;
    }

    public void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)
    {
        org.apache.batik.dom.svg.LiveAttributeException $r11;
        org.apache.batik.bridge.SVGImageElementBridge r3;
        byte $b1;
        int $i2;
        org.w3c.dom.svg.SVGAnimatedLength $r6, $r8;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.batik.dom.svg.AnimatedLiveAttributeValue r0;
        org.apache.batik.gvt.GraphicsNode $r5, $r7;
        org.apache.batik.bridge.BridgeException $r15;
        char $c0;
        org.apache.batik.bridge.BridgeContext $r13;
        org.w3c.dom.svg.SVGImageElement $r9;
        org.w3c.dom.Element $r4;
        org.apache.batik.gvt.ImageNode $r10;
        float $f0;
        org.apache.batik.dom.svg.AbstractSVGAnimatedLength r14;

        r3 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r0 := @parameter0: org.apache.batik.dom.svg.AnimatedLiveAttributeValue;

     label01:
        $r1 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getNamespaceURI()>();

        $r2 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getLocalName()>();

        if $r1 != null goto label11;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("x");

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("y");

        if $z3 == 0 goto label03;

     label02:
        virtualinvoke r3.<org.apache.batik.bridge.SVGImageElementBridge: void updateImageBounds()>();

        return;

     label03:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("width");

        if $z4 != 0 goto label04;

        $z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("height");

        if $z6 == 0 goto label10;

     label04:
        $r4 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r9 = (org.w3c.dom.svg.SVGImageElement) $r4;

        $r5 = r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r10 = (org.apache.batik.gvt.ImageNode) $r5;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c0;

        if $i2 != 119 goto label05;

        $r8 = interfaceinvoke $r9.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedLength getWidth()>();

        r14 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r8;

        goto label06;

     label05:
        $r6 = interfaceinvoke $r9.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedLength getHeight()>();

        r14 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r6;

     label06:
        $f0 = virtualinvoke r14.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $b1 = $f0 cmpl 0.0F;

        if $b1 == 0 goto label07;

        $r7 = virtualinvoke $r10.<org.apache.batik.gvt.ImageNode: org.apache.batik.gvt.GraphicsNode getImage()>();

        $z5 = $r7 instanceof org.apache.batik.gvt.ShapeNode;

        if $z5 == 0 goto label08;

     label07:
        virtualinvoke r3.<org.apache.batik.bridge.SVGImageElementBridge: void rebuildImageNode()>();

        goto label09;

     label08:
        virtualinvoke r3.<org.apache.batik.bridge.SVGImageElementBridge: void updateImageBounds()>();

     label09:
        return;

     label10:
        $z7 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("preserveAspectRatio");

        if $z7 == 0 goto label12;

        virtualinvoke r3.<org.apache.batik.bridge.SVGImageElementBridge: void updateImageBounds()>();

        return;

     label11:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/1999/xlink");

        if $z0 == 0 goto label12;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("href");

        if $z1 == 0 goto label12;

        virtualinvoke r3.<org.apache.batik.bridge.SVGImageElementBridge: void rebuildImageNode()>();

        return;

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

        $r15 = new org.apache.batik.bridge.BridgeException;

        $r13 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        specialinvoke $r15.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>($r13, $r11);

        throw $r15;

     label14:
        specialinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)>(r0);

        return;

        catch org.apache.batik.dom.svg.LiveAttributeException from label01 to label12 with label13;
    }

    protected void updateImageBounds()
    {
        org.w3c.dom.svg.SVGDocument $r7, $r10;
        java.awt.geom.Rectangle2D $r3, $r16;
        float[] r17;
        org.apache.batik.bridge.SVGImageElementBridge r0;
        java.lang.String $r12;
        boolean $z0;
        org.w3c.dom.svg.SVGSVGElement $r11;
        double $d0, $d1;
        org.apache.batik.gvt.GraphicsNode $r4, $r6;
        org.apache.batik.bridge.BridgeContext $r2, $r9, $r13;
        org.w3c.dom.Element $r1, $r8, $r14;
        org.apache.batik.gvt.ImageNode $r5;
        float $f0, $f1;
        org.apache.batik.gvt.RasterImageNode $r15;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r3 = staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: java.awt.geom.Rectangle2D getImageBounds(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r2, $r1);

        $r4 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r5 = (org.apache.batik.gvt.ImageNode) $r4;

        $r6 = virtualinvoke $r5.<org.apache.batik.gvt.ImageNode: org.apache.batik.gvt.GraphicsNode getImage()>();

        r17 = null;

        $z0 = $r6 instanceof org.apache.batik.gvt.RasterImageNode;

        if $z0 == 0 goto label1;

        $r15 = (org.apache.batik.gvt.RasterImageNode) $r6;

        $r16 = virtualinvoke $r15.<org.apache.batik.gvt.RasterImageNode: java.awt.geom.Rectangle2D getImageBounds()>();

        r17 = newarray (float)[4];

        r17[0] = 0.0F;

        r17[1] = 0.0F;

        $d0 = virtualinvoke $r16.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d0;

        r17[2] = $f0;

        $d1 = virtualinvoke $r16.<java.awt.geom.RectangularShape: double getHeight()>();

        $f1 = (float) $d1;

        r17[3] = $f1;

        goto label2;

     label1:
        $r7 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        if $r7 == null goto label2;

        $r10 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r12 = interfaceinvoke $r11.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "viewBox");

        $r14 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r13 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        r17 = staticinvoke <org.apache.batik.bridge.ViewBox: float[] parseViewBoxAttribute(org.w3c.dom.Element,java.lang.String,org.apache.batik.bridge.BridgeContext)>($r14, $r12, $r13);

     label2:
        if $r6 == null goto label3;

        $r9 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r8 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: void initializeViewport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,float[],java.awt.geom.Rectangle2D)>($r9, $r8, $r6, r17, $r3);

     label3:
        return;
    }

    protected void rebuildImageNode()
    {
        java.lang.Object[] $r11;
        org.w3c.dom.svg.SVGDocument $r1, $r14, $r18, $r30;
        org.apache.batik.bridge.SVGImageElementBridge r0;
        org.w3c.dom.svg.SVGAnimatedString $r8;
        java.lang.String $r9;
        org.w3c.dom.svg.SVGSVGElement $r15, $r19;
        org.apache.batik.gvt.GraphicsNode $r4, $r5;
        org.apache.batik.bridge.BridgeException $r10;
        org.apache.batik.bridge.BridgeContext $r3, $r13;
        org.w3c.dom.svg.SVGImageElement r7;
        org.apache.batik.dom.events.NodeEventTarget r29;
        org.w3c.dom.Element $r2, $r6, $r12;
        org.w3c.dom.events.EventListener $r17, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        org.apache.batik.gvt.ImageNode $r16;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        if $r1 == null goto label1;

        $r17 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        if $r17 == null goto label1;

        $r18 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r19 = interfaceinvoke $r18.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        r29 = (org.apache.batik.dom.events.NodeEventTarget) $r19;

        $r20 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "click", $r20, 0);

        $r21 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "keydown", $r21, 0);

        $r22 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "keypress", $r22, 0);

        $r23 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "keyup", $r23, 0);

        $r24 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mousedown", $r24, 0);

        $r25 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mousemove", $r25, 0);

        $r26 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseout", $r26, 0);

        $r27 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseover", $r27, 0);

        $r28 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r29.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseup", $r28, 0);

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener> = null;

     label1:
        $r30 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        if $r30 == null goto label2;

        $r14 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r15 = interfaceinvoke $r14.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node)>($r15);

     label2:
        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument> = null;

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx> = null;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode buildImageGraphicsNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r3, $r2);

        $r5 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r16 = (org.apache.batik.gvt.ImageNode) $r5;

        virtualinvoke $r16.<org.apache.batik.gvt.ImageNode: void setImage(org.apache.batik.gvt.GraphicsNode)>($r4);

        if $r4 != null goto label3;

        $r6 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        r7 = (org.w3c.dom.svg.SVGImageElement) $r6;

        $r8 = interfaceinvoke r7.<org.w3c.dom.svg.SVGURIReference: org.w3c.dom.svg.SVGAnimatedString getHref()>();

        $r9 = interfaceinvoke $r8.<org.w3c.dom.svg.SVGAnimatedString: java.lang.String getAnimVal()>();

        $r10 = new org.apache.batik.bridge.BridgeException;

        $r13 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r12 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = $r9;

        specialinvoke $r10.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>($r13, $r12, "uri.image.invalid", $r11);

        throw $r10;

     label3:
        return;
    }

    protected void handleCSSPropertyChanged(int)
    {
        org.apache.batik.bridge.SVGImageElementBridge r0;
        org.w3c.dom.Element $r1, $r3;
        org.apache.batik.gvt.GraphicsNode $r5;
        int i0;
        java.awt.RenderingHints $r2, $r4;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 6: goto label1;
            case 30: goto label1;
            default: goto label2;
        };

     label1:
        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertImageRendering(org.w3c.dom.Element,java.awt.RenderingHints)>($r1, null);

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element,java.awt.RenderingHints)>($r3, $r2);

        if $r4 == null goto label3;

        $r5 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        interfaceinvoke $r5.<org.apache.batik.gvt.GraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r4);

        goto label3;

     label2:
        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleCSSPropertyChanged(int)>(i0);

     label3:
        return;
    }

    protected org.apache.batik.gvt.GraphicsNode createRasterImageNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.ext.awt.image.renderable.Filter, org.apache.batik.util.ParsedURL)
    {
        org.w3c.dom.svg.SVGDocument $r11;
        java.awt.geom.Rectangle2D $r2, $r6;
        float[] r15;
        org.apache.batik.bridge.SVGImageElementBridge r12;
        byte $b0, $b1;
        java.lang.String $r10, r14;
        double $d0, $d1, $d2, $d3;
        boolean $z0, $z1;
        org.apache.batik.gvt.GraphicsNode $r13;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.gvt.ShapeNode $r3;
        org.apache.batik.ext.awt.image.renderable.Filter r4;
        org.apache.batik.bridge.UserAgent $r8;
        org.w3c.dom.Element r1;
        org.apache.batik.util.ParsedURL r9;
        float $f0, $f1;
        java.lang.Object $r7;
        org.apache.batik.gvt.RasterImageNode $r5;

        r12 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r4 := @parameter2: org.apache.batik.ext.awt.image.renderable.Filter;

        r9 := @parameter3: org.apache.batik.util.ParsedURL;

        $r2 = staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: java.awt.geom.Rectangle2D getImageBounds(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r1);

        $d0 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $d1 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label2;

     label1:
        $r3 = new org.apache.batik.gvt.ShapeNode;

        specialinvoke $r3.<org.apache.batik.gvt.ShapeNode: void <init>()>();

        virtualinvoke $r3.<org.apache.batik.gvt.ShapeNode: void setShape(java.awt.Shape)>($r2);

        return $r3;

     label2:
        $z0 = staticinvoke <org.apache.batik.ext.awt.image.spi.BrokenLinkProvider: boolean hasBrokenLinkProperty(org.apache.batik.ext.awt.image.renderable.Filter)>(r4);

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r4.<java.awt.image.renderable.RenderableImage: java.lang.Object getProperty(java.lang.String)>("org.apache.batik.BrokenLinkImage");

        r14 = "unknown";

        $z1 = $r7 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        r14 = (java.lang.String) $r7;

     label3:
        $r8 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r10 = virtualinvoke r9.<org.apache.batik.util.ParsedURL: java.lang.String toString()>();

        $r11 = interfaceinvoke $r8.<org.apache.batik.bridge.UserAgent: org.w3c.dom.svg.SVGDocument getBrokenLinkDocument(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r1, $r10, r14);

        $r13 = virtualinvoke r12.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createSVGImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.svg.SVGDocument)>(r0, r1, $r11);

        return $r13;

     label4:
        $r5 = new org.apache.batik.gvt.RasterImageNode;

        specialinvoke $r5.<org.apache.batik.gvt.RasterImageNode: void <init>()>();

        virtualinvoke $r5.<org.apache.batik.gvt.RasterImageNode: void setImage(org.apache.batik.ext.awt.image.renderable.Filter)>(r4);

        $r6 = interfaceinvoke r4.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        r15 = newarray (float)[4];

        r15[0] = 0.0F;

        r15[1] = 0.0F;

        $d2 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d2;

        r15[2] = $f0;

        $d3 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getHeight()>();

        $f1 = (float) $d3;

        r15[3] = $f1;

        staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: void initializeViewport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,float[],java.awt.geom.Rectangle2D)>(r0, r1, $r5, r15, $r2);

        return $r5;
    }

    protected org.apache.batik.gvt.GraphicsNode createSVGImageNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.svg.SVGDocument)
    {
        java.awt.geom.Rectangle2D $r9, $r12;
        org.apache.batik.gvt.CanvasGraphicsNode $r48;
        org.apache.batik.gvt.CompositeGraphicsNode $r7;
        org.apache.batik.bridge.SVGImageElementBridge r3;
        byte $b0, $b1;
        org.w3c.dom.svg.SVGSVGElement $r13;
        boolean $z0, $z1;
        org.apache.batik.gvt.GraphicsNode $r17;
        org.apache.batik.bridge.GVTBuilder $r15;
        org.apache.batik.bridge.BridgeContext r4, $r6, $r14, $r16, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r47;
        org.apache.batik.bridge.SVGImageElementBridge$ForwardEventListener $r18;
        java.awt.geom.AffineTransform $r49;
        java.util.List $r11, $r50;
        org.w3c.dom.svg.SVGDocument r0;
        float[] $r52;
        org.apache.batik.css.engine.CSSEngine $r2;
        java.lang.String $r51;
        double $d0, $d1;
        org.apache.batik.gvt.ShapeNode $r10;
        org.apache.batik.dom.svg.SVGOMDocument $r1, $r5;
        org.apache.batik.dom.events.NodeEventTarget r19;
        org.w3c.dom.Element r8;
        org.w3c.dom.events.EventListener $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r44, $r45;

        r3 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r8 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: org.w3c.dom.svg.SVGDocument;

        $r1 = (org.apache.batik.dom.svg.SVGOMDocument) r0;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractStylableDocument: org.apache.batik.css.engine.CSSEngine getCSSEngine()>();

        $r5 = (org.apache.batik.dom.svg.SVGOMDocument) r0;

        $r6 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.BridgeContext createSubBridgeContext(org.apache.batik.dom.svg.SVGOMDocument)>($r5);

        r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx> = $r6;

        $r7 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r7.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        $r9 = staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: java.awt.geom.Rectangle2D getImageBounds(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, r8);

        $d0 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $d1 = virtualinvoke $r9.<java.awt.geom.RectangularShape: double getHeight()>();

        $b1 = $d1 cmpl 0.0;

        if $b1 != 0 goto label2;

     label1:
        $r10 = new org.apache.batik.gvt.ShapeNode;

        specialinvoke $r10.<org.apache.batik.gvt.ShapeNode: void <init>()>();

        virtualinvoke $r10.<org.apache.batik.gvt.ShapeNode: void setShape(java.awt.Shape)>($r9);

        $r11 = virtualinvoke $r7.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

        return $r7;

     label2:
        $r12 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.geom.Rectangle2D convertEnableBackground(org.w3c.dom.Element)>(r8);

        if $r12 == null goto label3;

        virtualinvoke $r7.<org.apache.batik.gvt.CompositeGraphicsNode: void setBackgroundEnable(java.awt.geom.Rectangle2D)>($r12);

     label3:
        $r13 = interfaceinvoke r0.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        $r14 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r15 = virtualinvoke $r14.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        $r16 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r17 = virtualinvoke $r15.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r16, $r13);

        $r48 = (org.apache.batik.gvt.CanvasGraphicsNode) $r17;

        if $r2 != null goto label4;

        $z0 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z0 == 0 goto label4;

        $r47 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        virtualinvoke $r47.<org.apache.batik.bridge.BridgeContext: void addUIEventListeners(org.w3c.dom.Document)>(r0);

     label4:
        virtualinvoke $r48.<org.apache.batik.gvt.AbstractGraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>(null);

        $r49 = new java.awt.geom.AffineTransform;

        specialinvoke $r49.<java.awt.geom.AffineTransform: void <init>()>();

        virtualinvoke $r48.<org.apache.batik.gvt.CanvasGraphicsNode: void setViewingTransform(java.awt.geom.AffineTransform)>($r49);

        $r50 = virtualinvoke $r7.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r48);

        $r51 = interfaceinvoke $r13.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "viewBox");

        $r52 = staticinvoke <org.apache.batik.bridge.ViewBox: float[] parseViewBoxAttribute(org.w3c.dom.Element,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r8, $r51, r4);

        staticinvoke <org.apache.batik.bridge.SVGImageElementBridge: void initializeViewport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,float[],java.awt.geom.Rectangle2D)>(r4, r8, $r7, $r52, $r9);

        $z1 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z1 == 0 goto label5;

        $r18 = new org.apache.batik.bridge.SVGImageElementBridge$ForwardEventListener;

        specialinvoke $r18.<org.apache.batik.bridge.SVGImageElementBridge$ForwardEventListener: void <init>(org.w3c.dom.Element,org.w3c.dom.Element)>($r13, r8);

        r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener> = $r18;

        r19 = (org.apache.batik.dom.events.NodeEventTarget) $r13;

        $r20 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "click", $r20, 0, null);

        $r22 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r21 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r22.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "click", $r21, 0);

        $r23 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "keydown", $r23, 0, null);

        $r25 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r24 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r25.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "keydown", $r24, 0);

        $r26 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "keypress", $r26, 0, null);

        $r28 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r27 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r28.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "keypress", $r27, 0);

        $r29 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "keyup", $r29, 0, null);

        $r31 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r30 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r31.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "keyup", $r30, 0);

        $r32 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mousedown", $r32, 0, null);

        $r34 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r33 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r34.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "mousedown", $r33, 0);

        $r35 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mousemove", $r35, 0, null);

        $r37 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r36 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r37.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "mousemove", $r36, 0);

        $r38 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseout", $r38, 0, null);

        $r40 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r39 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r40.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "mouseout", $r39, 0);

        $r41 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseover", $r41, 0, null);

        $r43 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r42 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r43.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "mouseover", $r42, 0);

        $r44 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r19.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "mouseup", $r44, 0, null);

        $r46 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx>;

        $r45 = r3.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        virtualinvoke $r46.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r19, "http://www.w3.org/2001/xml-events", "mouseup", $r45, 0);

     label5:
        return $r7;
    }

    public void dispose()
    {
        org.w3c.dom.svg.SVGDocument $r1, $r2, $r5, $r17;
        org.apache.batik.bridge.SVGImageElementBridge r0;
        org.w3c.dom.svg.SVGSVGElement $r3, $r6;
        org.apache.batik.dom.events.NodeEventTarget r16;
        org.w3c.dom.events.EventListener $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        $r1 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        if $r4 == null goto label1;

        $r5 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        r16 = (org.apache.batik.dom.events.NodeEventTarget) $r6;

        $r7 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "click", $r7, 0);

        $r8 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "keydown", $r8, 0);

        $r9 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "keypress", $r9, 0);

        $r10 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "keyup", $r10, 0);

        $r11 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mousedown", $r11, 0);

        $r12 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mousemove", $r12, 0);

        $r13 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseout", $r13, 0);

        $r14 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseover", $r14, 0);

        $r15 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener>;

        interfaceinvoke r16.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "mouseup", $r15, 0);

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.events.EventListener listener> = null;

     label1:
        $r17 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        if $r17 == null goto label2;

        $r2 = r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGDocument: org.w3c.dom.svg.SVGSVGElement getRootElement()>();

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node)>($r3);

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.w3c.dom.svg.SVGDocument imgDocument> = null;

        r0.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.BridgeContext subCtx> = null;

     label2:
        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void dispose()>();

        return;
    }

    protected static void initializeViewport(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, float[], java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D r0;
        java.awt.geom.Rectangle2D$Float $r14, $r15, r20;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit $r12;
        java.awt.geom.NoninvertibleTransformException $r18;
        boolean $z0;
        java.awt.Shape $r11;
        org.apache.batik.gvt.GraphicsNode r8;
        org.apache.batik.bridge.BridgeException $r17;
        org.apache.batik.bridge.BridgeContext r5;
        java.awt.geom.AffineTransform $r6, $r7, $r9;
        org.apache.batik.ext.awt.image.renderable.Filter $r10;
        org.w3c.dom.svg.SVGImageElement r19;
        org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio r3;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;
        org.apache.batik.dom.svg.LiveAttributeException $r16;
        org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio $r2;
        float[] r4, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.w3c.dom.Element r1;

        r5 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r8 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r4 := @parameter3: float[];

        r0 := @parameter4: java.awt.geom.Rectangle2D;

        $d0 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getX()>();

        f0 = (float) $d0;

        $d1 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getY()>();

        f1 = (float) $d1;

        $d2 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getWidth()>();

        f2 = (float) $d2;

        $d3 = virtualinvoke r0.<java.awt.geom.RectangularShape: double getHeight()>();

        f3 = (float) $d3;

     label1:
        r19 = (org.w3c.dom.svg.SVGImageElement) r1;

        $r2 = interfaceinvoke r19.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio getPreserveAspectRatio()>();

        r3 = (org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio) $r2;

        virtualinvoke r3.<org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio: void check()>();

        $r6 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,float[],float,float,org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio,org.apache.batik.bridge.BridgeContext)>(r1, r4, f2, f3, r3, r5);

        $d5 = (double) f0;

        $d4 = (double) f1;

        $r7 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d5, $d4);

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r7);

        interfaceinvoke r8.<org.apache.batik.gvt.GraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r6);

        r20 = null;

        $z0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertOverflow(org.w3c.dom.Element)>(r1);

        if $z0 == 0 goto label3;

        $r13 = staticinvoke <org.apache.batik.bridge.CSSUtilities: float[] convertClip(org.w3c.dom.Element)>(r1);

        if $r13 != null goto label2;

        $r15 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r15.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(f0, f1, f2, f3);

        r20 = $r15;

        goto label3;

     label2:
        $r14 = new java.awt.geom.Rectangle2D$Float;

        $f4 = $r13[3];

        $f15 = f0 + $f4;

        $f5 = $r13[0];

        $f14 = f1 + $f5;

        $f6 = $r13[1];

        $f8 = f2 - $f6;

        $f7 = $r13[3];

        $f13 = $f8 - $f7;

        $f9 = $r13[2];

        $f11 = f3 - $f9;

        $f10 = $r13[0];

        $f12 = $f11 - $f10;

        specialinvoke $r14.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f15, $f14, $f13, $f12);

        r20 = $r14;

     label3:
        if r20 == null goto label7;

     label4:
        $r9 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

        $r10 = interfaceinvoke r8.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r11 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r20);

        $r12 = new org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        specialinvoke $r12.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.Shape)>($r10, $r11);

        interfaceinvoke r8.<org.apache.batik.gvt.GraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r12);

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;

     label7:
        goto label9;

     label8:
        $r16 := @caughtexception;

        $r17 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r17.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r5, $r16);

        throw $r17;

     label9:
        return;

        catch java.awt.geom.NoninvertibleTransformException from label4 to label5 with label6;
        catch org.apache.batik.dom.svg.LiveAttributeException from label1 to label7 with label8;
    }

    protected static org.apache.batik.ext.awt.color.ICCColorSpaceExt extractColorSpace(org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.color.ICC_Profile $r10;
        org.apache.batik.bridge.SVGColorProfileElementBridge r8;
        org.apache.batik.bridge.BridgeContext r6;
        org.apache.batik.css.engine.value.Value $r1;
        org.apache.batik.bridge.Bridge $r7;
        org.w3c.dom.Element r0;
        java.lang.String $r2, $r3, $r4, $r5;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt $r9, r11;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 8);

        $r2 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        r11 = null;

        $r3 = "srgb";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r9 = new org.apache.batik.ext.awt.color.ICCColorSpaceExt;

        $r10 = staticinvoke <java.awt.color.ICC_Profile: java.awt.color.ICC_Profile getInstance(int)>(1000);

        specialinvoke $r9.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: void <init>(java.awt.color.ICC_Profile,int)>($r10, 4);

        r11 = $r9;

        goto label2;

     label1:
        $r4 = "auto";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z1 != 0 goto label2;

        $r5 = "";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z2 != 0 goto label2;

        $r7 = virtualinvoke r6.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "color-profile");

        r8 = (org.apache.batik.bridge.SVGColorProfileElementBridge) $r7;

        if r8 == null goto label2;

        r11 = virtualinvoke r8.<org.apache.batik.bridge.SVGColorProfileElementBridge: org.apache.batik.ext.awt.color.ICCColorSpaceExt createICCColorSpaceExt(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String)>(r6, r0, $r2);

     label2:
        return r11;
    }

    protected static java.awt.geom.Rectangle2D getImageBounds(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.dom.svg.LiveAttributeException $r10;
        java.awt.geom.Rectangle2D$Float $r9;
        org.w3c.dom.svg.SVGAnimatedLength $r1, $r3, $r5, $r7;
        org.apache.batik.bridge.BridgeException $r11;
        org.apache.batik.bridge.BridgeContext r12;
        org.w3c.dom.svg.SVGImageElement r13;
        org.w3c.dom.Element r0;
        float $f0, $f1, $f2, $f3;
        org.apache.batik.dom.svg.AbstractSVGAnimatedLength r2, r4, r6, r8;

        r12 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

     label1:
        r13 = (org.w3c.dom.svg.SVGImageElement) r0;

        $r1 = interfaceinvoke r13.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedLength getX()>();

        r2 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r1;

        $f0 = virtualinvoke r2.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r3 = interfaceinvoke r13.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedLength getY()>();

        r4 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r3;

        $f1 = virtualinvoke r4.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r5 = interfaceinvoke r13.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedLength getWidth()>();

        r6 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r5;

        $f2 = virtualinvoke r6.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r7 = interfaceinvoke r13.<org.w3c.dom.svg.SVGImageElement: org.w3c.dom.svg.SVGAnimatedLength getHeight()>();

        r8 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r7;

        $f3 = virtualinvoke r8.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        $r9 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r9.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        return $r9;

     label2:
        $r10 := @caughtexception;

        $r11 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r11.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r12, $r10);

        throw $r11;

        catch org.apache.batik.dom.svg.LiveAttributeException from label1 to label2 with label2;
    }

    org.apache.batik.gvt.GraphicsNode createBrokenImageNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r4;
        org.w3c.dom.svg.SVGDocument $r7;
        org.apache.batik.gvt.GraphicsNode $r9;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.SVGImageElementBridge r8;
        org.apache.batik.bridge.UserAgent $r1;
        org.w3c.dom.Element r2;
        java.lang.String r3, r5, $r6;

        r8 := @this: org.apache.batik.bridge.SVGImageElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r6 = staticinvoke <org.apache.batik.bridge.Messages: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>("uri.image.error", $r4);

        $r7 = interfaceinvoke $r1.<org.apache.batik.bridge.UserAgent: org.w3c.dom.svg.SVGDocument getBrokenLinkDocument(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r2, r3, $r6);

        $r9 = virtualinvoke r8.<org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.gvt.GraphicsNode createSVGImageNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.svg.SVGDocument)>(r0, r2, $r7);

        return $r9;
    }

    static void <clinit>()
    {
        org.apache.batik.bridge.SVGBrokenLinkProvider $r0, $r1;

        $r0 = new org.apache.batik.bridge.SVGBrokenLinkProvider;

        specialinvoke $r0.<org.apache.batik.bridge.SVGBrokenLinkProvider: void <init>()>();

        <org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.SVGBrokenLinkProvider brokenLinkProvider> = $r0;

        $r1 = <org.apache.batik.bridge.SVGImageElementBridge: org.apache.batik.bridge.SVGBrokenLinkProvider brokenLinkProvider>;

        staticinvoke <org.apache.batik.ext.awt.image.spi.ImageTagRegistry: void setBrokenLinkProvider(org.apache.batik.ext.awt.image.spi.BrokenLinkProvider)>($r1);

        return;
    }
}
