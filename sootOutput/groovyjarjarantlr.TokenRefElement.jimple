class groovyjarjarantlr.TokenRefElement extends groovyjarjarantlr.GrammarAtom
{

    public void <init>(groovyjarjarantlr.Grammar, groovyjarjarantlr.Token, boolean, int)
    {
        groovyjarjarantlr.Grammar r1, $r3, $r14;
        groovyjarjarantlr.Tool $r9;
        java.lang.StringBuffer $r8, $r10, $r12;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r4, $r7, $r11, $r13, $r15;
        groovyjarjarantlr.TokenManager $r5;
        groovyjarjarantlr.Token r2;
        boolean z0;
        groovyjarjarantlr.TokenSymbol $r6;
        groovyjarjarantlr.TokenRefElement r0;

        r0 := @this: groovyjarjarantlr.TokenRefElement;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        r2 := @parameter1: groovyjarjarantlr.Token;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<groovyjarjarantlr.GrammarAtom: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,int)>(r1, r2, i0);

        r0.<groovyjarjarantlr.TokenRefElement: boolean not> = z0;

        $r3 = r0.<groovyjarjarantlr.TokenRefElement: groovyjarjarantlr.Grammar grammar>;

        $r5 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r4 = r0.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        $r6 = interfaceinvoke $r5.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>($r4);

        if $r6 != null goto label1;

        $r9 = r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Undefined token symbol: ");

        $r11 = r0.<groovyjarjarantlr.TokenRefElement: java.lang.String atomText>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = r0.<groovyjarjarantlr.TokenRefElement: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i3 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i4 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r13, $r15, $i3, $i4);

        goto label2;

     label1:
        $i1 = virtualinvoke $r6.<groovyjarjarantlr.TokenSymbol: int getTokenType()>();

        r0.<groovyjarjarantlr.TokenRefElement: int tokenType> = $i1;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.TokenSymbol: java.lang.String getASTNodeType()>();

        virtualinvoke r0.<groovyjarjarantlr.TokenRefElement: void setASTNodeType(java.lang.String)>($r7);

     label2:
        $i2 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        r0.<groovyjarjarantlr.TokenRefElement: int line> = $i2;

        return;
    }

    public void generate()
    {
        groovyjarjarantlr.TokenRefElement r0;
        groovyjarjarantlr.Grammar $r1;
        groovyjarjarantlr.CodeGenerator $r2;

        r0 := @this: groovyjarjarantlr.TokenRefElement;

        $r1 = r0.<groovyjarjarantlr.TokenRefElement: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r2.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.TokenRefElement)>(r0);

        return;
    }

    public groovyjarjarantlr.Lookahead look(int)
    {
        groovyjarjarantlr.Lookahead $r3;
        int i0;
        groovyjarjarantlr.LLkGrammarAnalyzer $r2;
        groovyjarjarantlr.TokenRefElement r0;
        groovyjarjarantlr.Grammar $r1;

        r0 := @this: groovyjarjarantlr.TokenRefElement;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.TokenRefElement: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.GrammarAtom)>(i0, r0);

        return $r3;
    }
}
