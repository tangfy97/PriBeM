public class org.waveprotocol.wave.concurrencycontrol.common.DeltaPair extends java.lang.Object
{
    private final java.util.List client;
    private final java.util.List server;

    public void <init>(java.lang.Iterable, java.lang.Iterable)
    {
        org.waveprotocol.wave.concurrencycontrol.common.DeltaPair r0;
        java.lang.Iterable r1, r3;
        java.util.ArrayList $r2, $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        r1 := @parameter0: java.lang.Iterable;

        r3 := @parameter1: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>(r1);

        r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List client> = $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>(r3);

        r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List server> = $r4;

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.common.DeltaPair transform() throws org.waveprotocol.wave.model.operation.TransformException
    {
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r23, $r24;
        java.util.List $r1, $r2, $r4, $r5, $r17, $r21;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r9, r27, r29, r30, r31;
        org.waveprotocol.wave.concurrencycontrol.common.DeltaPair r0, $r7, $r19;
        long $l0;
        java.util.ArrayList $r3, $r10, $r16, r28;
        org.waveprotocol.wave.model.version.HashedVersion $r25;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp $r26;
        java.util.Iterator $r6, $r11, $r18;
        org.waveprotocol.wave.model.operation.OperationPair $r13;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] $r20;
        java.lang.Object $r8, $r12, $r14, $r15, $r22;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List client>;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List server>;

        $z0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: boolean areSame(java.util.List,java.util.List)>($r2, $r1);

        if $z0 == 0 goto label3;

        $r16 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r17 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List server>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r22 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r22;

        $r23 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $l0 = virtualinvoke $r23.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $r24 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r25 = virtualinvoke $r24.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r26 = virtualinvoke r27.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.VersionUpdateOp createVersionUpdateOp(long,org.waveprotocol.wave.model.version.HashedVersion)>($l0, $r25);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r26);

        goto label1;

     label2:
        $r19 = new org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        $r20 = newarray (org.waveprotocol.wave.model.operation.wave.WaveletOperation)[0];

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        specialinvoke $r19.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: void <init>(java.lang.Iterable,java.lang.Iterable)>($r21, $r16);

        return $r19;

     label3:
        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List client>;

        r28 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList(java.lang.Iterable)>($r4);

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List server>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r8;

        r29 = r9;

        $r10 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.ArrayList newArrayList()>();

        $r11 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r12;

        $r13 = staticinvoke <org.waveprotocol.wave.model.operation.wave.Transform: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.operation.wave.WaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r30, r29);

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        r31 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r14;

        $r15 = virtualinvoke $r13.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        r29 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r15;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r31);

        goto label5;

     label6:
        r28 = $r10;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r29);

        goto label4;

     label7:
        $r7 = new org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        specialinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: void <init>(java.lang.Iterable,java.lang.Iterable)>(r28, $r3);

        return $r7;
    }

    public java.util.List getClient()
    {
        org.waveprotocol.wave.concurrencycontrol.common.DeltaPair r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List client>;

        return $r1;
    }

    public java.util.List getServer()
    {
        org.waveprotocol.wave.concurrencycontrol.common.DeltaPair r0;
        java.util.List $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.common.DeltaPair;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: java.util.List server>;

        return $r1;
    }

    public static boolean areSame(java.util.List, java.util.List)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r3, $r5;
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r4;

        $z0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.common.DeltaPair: boolean matchOperations(org.waveprotocol.wave.model.operation.wave.WaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r3, $r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private static boolean matchOperations(org.waveprotocol.wave.model.operation.wave.WaveletOperation, org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0, r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r2, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r3 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
