class com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 extends com.mycila.inject.internal.guava.collect.ForwardingIterator
{
    private com.mycila.inject.internal.guava.collect.Multiset$Entry last;
    final java.util.Iterator val$readOnlyIterator;
    final com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0;

    void <init>(com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset, java.util.Iterator)
    {
        java.util.Iterator r2;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset;

        r2 := @parameter1: java.util.Iterator;

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0> = r1;

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: java.util.Iterator val$readOnlyIterator> = r2;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingIterator: void <init>()>();

        return;
    }

    protected java.util.Iterator delegate()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: java.util.Iterator val$readOnlyIterator>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.Multiset$Entry next()
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 r0;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r2, $r3;
        java.lang.Object $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingIterator: java.lang.Object next()>();

        $r2 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r1;

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.Multiset$Entry last> = $r2;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.Multiset$Entry last>;

        return $r3;
    }

    public void remove()
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 r0;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r1, $r2;
        java.lang.Object $r4;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.Multiset$Entry last>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z0);

        $r3 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset this$0>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.Multiset$Entry last>;

        $r4 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset: int setCount(java.lang.Object,int)>($r4, 0);

        r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.Multiset$Entry last> = null;

        return;
    }

    public volatile java.lang.Object next()
    {
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 r0;
        com.mycila.inject.internal.guava.collect.Multiset$Entry $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: com.mycila.inject.internal.guava.collect.Multiset$Entry next()>();

        return $r1;
    }

    protected volatile java.lang.Object delegate()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ConcurrentHashMultiset$3: java.util.Iterator delegate()>();

        return $r1;
    }
}
