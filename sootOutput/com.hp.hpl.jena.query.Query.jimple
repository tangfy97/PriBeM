public class com.hp.hpl.jena.query.Query extends com.hp.hpl.jena.sparql.core.Prologue implements java.lang.Cloneable, org.apache.jena.atlas.io.Printable
{
    public static final int QueryTypeUnknown;
    public static final int QueryTypeSelect;
    public static final int QueryTypeConstruct;
    public static final int QueryTypeDescribe;
    public static final int QueryTypeAsk;
    int queryType;
    private java.util.List graphURIs;
    private java.util.List namedGraphURIs;
    private com.hp.hpl.jena.sparql.syntax.Element queryPattern;
    private com.hp.hpl.jena.query.Syntax syntax;
    public static final long NOLIMIT;
    private long resultLimit;
    private long resultOffset;
    private java.util.List orderBy;
    public static final int ORDER_ASCENDING;
    public static final int ORDER_DESCENDING;
    public static final int ORDER_DEFAULT;
    public static final int ORDER_UNKNOW;
    protected com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock;
    protected boolean strictQuery;
    protected boolean queryResultStar;
    protected boolean distinct;
    protected boolean reduced;
    protected com.hp.hpl.jena.sparql.syntax.Template constructTemplate;
    protected java.util.List resultNodes;
    private com.hp.hpl.jena.sparql.core.VarAlloc varAlloc;
    protected com.hp.hpl.jena.sparql.core.VarExprList projectVars;
    protected com.hp.hpl.jena.sparql.core.VarExprList groupVars;
    protected java.util.List havingExprs;
    private java.util.List aggregators;
    private java.util.Map aggregatorsMap;
    private java.util.Map aggregatorsAllocated;
    private boolean resultVarsSet;
    private int hashcode;

    public void <init>()
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.Syntax $r3, $r12;
        java.util.HashMap $r21, $r22;
        java.util.ArrayList $r13, $r14, $r15, $r19, $r20;
        com.hp.hpl.jena.sparql.core.VarAlloc $r16;
        int $i1, $i3;
        com.hp.hpl.jena.sparql.core.VarExprList $r17, $r18;

        r0 := @this: com.hp.hpl.jena.query.Query;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.Prologue: void <init>()>();

        $i1 = (int) -123;

        r0.<com.hp.hpl.jena.query.Query: int queryType> = $i1;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List graphURIs> = $r13;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs> = $r14;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element queryPattern> = null;

        $r3 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL>;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax syntax> = $r3;

        r0.<com.hp.hpl.jena.query.Query: long resultLimit> = -9223372036854775808L;

        r0.<com.hp.hpl.jena.query.Query: long resultOffset> = -9223372036854775808L;

        r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy> = null;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock> = null;

        r0.<com.hp.hpl.jena.query.Query: boolean strictQuery> = 1;

        r0.<com.hp.hpl.jena.query.Query: boolean queryResultStar> = 0;

        r0.<com.hp.hpl.jena.query.Query: boolean distinct> = 0;

        r0.<com.hp.hpl.jena.query.Query: boolean reduced> = 0;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Template constructTemplate> = null;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List resultNodes> = $r15;

        $r16 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r16.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>(".");

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc> = $r16;

        $r17 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r17.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars> = $r17;

        $r18 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r18.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList groupVars> = $r18;

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List havingExprs> = $r19;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List aggregators> = $r20;

        $r21 = new java.util.HashMap;

        specialinvoke $r21.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.Map aggregatorsMap> = $r21;

        $r22 = new java.util.HashMap;

        specialinvoke $r22.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.Map aggregatorsAllocated> = $r22;

        r0.<com.hp.hpl.jena.query.Query: boolean resultVarsSet> = 0;

        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.query.Query: int hashcode> = $i3;

        $r12 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL>;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax syntax> = $r12;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.Prologue)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.Prologue r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Prologue;

        specialinvoke r0.<com.hp.hpl.jena.query.Query: void <init>()>();

        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void usePrologueFrom(com.hp.hpl.jena.sparql.core.Prologue)>(r1);

        return;
    }

    private com.hp.hpl.jena.sparql.core.Var allocInternVar()
    {
        com.hp.hpl.jena.sparql.core.VarAlloc $r1;
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.Var $r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        return $r2;
    }

    public void setQuerySelectType()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r0.<com.hp.hpl.jena.query.Query: int queryType> = 111;

        return;
    }

    public void setQueryConstructType()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r0.<com.hp.hpl.jena.query.Query: int queryType> = 222;

        r0.<com.hp.hpl.jena.query.Query: boolean queryResultStar> = 1;

        return;
    }

    public void setQueryDescribeType()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r0.<com.hp.hpl.jena.query.Query: int queryType> = 333;

        return;
    }

    public void setQueryAskType()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r0.<com.hp.hpl.jena.query.Query: int queryType> = 444;

        return;
    }

    public int getQueryType()
    {
        int $i0;
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int queryType>;

        return $i0;
    }

    public boolean isSelectType()
    {
        int $i0;
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int queryType>;

        if $i0 != 111 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isConstructType()
    {
        int $i0;
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int queryType>;

        if $i0 != 222 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDescribeType()
    {
        int $i0;
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int queryType>;

        if $i0 != 333 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAskType()
    {
        int $i0;
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int queryType>;

        if $i0 != 444 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUnknownType()
    {
        com.hp.hpl.jena.query.Query r0;
        int $i0, $i2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int queryType>;

        $i2 = (int) -123;

        if $i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.sparql.core.Prologue getPrologue()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        return r0;
    }

    public void setStrict(boolean)
    {
        com.hp.hpl.jena.query.Query r0;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.query.Query: boolean strictQuery> = z0;

        $z1 = r0.<com.hp.hpl.jena.query.Query: boolean strictQuery>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.query.Query: void initStrict()>();

        goto label2;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.query.Query: void initLax()>();

     label2:
        return;
    }

    public boolean isStrict()
    {
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = r0.<com.hp.hpl.jena.query.Query: boolean strictQuery>;

        return $z0;
    }

    private void initStrict()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        return;
    }

    private void initLax()
    {
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        return;
    }

    public void setDistinct(boolean)
    {
        com.hp.hpl.jena.query.Query r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.query.Query: boolean distinct> = z0;

        return;
    }

    public boolean isDistinct()
    {
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = r0.<com.hp.hpl.jena.query.Query: boolean distinct>;

        return $z0;
    }

    public void setReduced(boolean)
    {
        com.hp.hpl.jena.query.Query r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.query.Query: boolean reduced> = z0;

        return;
    }

    public boolean isReduced()
    {
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = r0.<com.hp.hpl.jena.query.Query: boolean reduced>;

        return $z0;
    }

    public com.hp.hpl.jena.query.Syntax getSyntax()
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.Syntax $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax syntax>;

        return $r1;
    }

    public void setSyntax(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.Syntax r1, $r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax syntax> = r1;

        $r2 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL>;

        if r1 == $r2 goto label1;

        r0.<com.hp.hpl.jena.query.Query: boolean strictQuery> = 0;

     label1:
        return;
    }

    public long getLimit()
    {
        com.hp.hpl.jena.query.Query r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $l0 = r0.<com.hp.hpl.jena.query.Query: long resultLimit>;

        return $l0;
    }

    public void setLimit(long)
    {
        com.hp.hpl.jena.query.Query r0;
        long l0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        l0 := @parameter0: long;

        r0.<com.hp.hpl.jena.query.Query: long resultLimit> = l0;

        return;
    }

    public boolean hasLimit()
    {
        com.hp.hpl.jena.query.Query r0;
        byte $b1;
        long $l0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $l0 = r0.<com.hp.hpl.jena.query.Query: long resultLimit>;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getOffset()
    {
        com.hp.hpl.jena.query.Query r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $l0 = r0.<com.hp.hpl.jena.query.Query: long resultOffset>;

        return $l0;
    }

    public void setOffset(long)
    {
        com.hp.hpl.jena.query.Query r0;
        long l0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        l0 := @parameter0: long;

        r0.<com.hp.hpl.jena.query.Query: long resultOffset> = l0;

        return;
    }

    public boolean hasOffset()
    {
        com.hp.hpl.jena.query.Query r0;
        byte $b1;
        long $l0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $l0 = r0.<com.hp.hpl.jena.query.Query: long resultOffset>;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasOrderBy()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isOrdered()
    {
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasOrderBy()>();

        return $z0;
    }

    public void addOrderBy(com.hp.hpl.jena.query.SortCondition)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1, $r3;
        com.hp.hpl.jena.query.SortCondition r2;
        java.util.ArrayList $r4;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r2 := @parameter0: com.hp.hpl.jena.query.SortCondition;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy> = $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void addOrderBy(com.hp.hpl.jena.sparql.expr.Expr, int)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.query.SortCondition $r0;
        int i0;

        r2 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        i0 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.query.SortCondition;

        specialinvoke $r0.<com.hp.hpl.jena.query.SortCondition: void <init>(com.hp.hpl.jena.sparql.expr.Expr,int)>(r1, i0);

        virtualinvoke r2.<com.hp.hpl.jena.query.Query: void addOrderBy(com.hp.hpl.jena.query.SortCondition)>($r0);

        return;
    }

    public void addOrderBy(com.hp.hpl.jena.graph.Node, int)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.query.SortCondition $r1;
        com.hp.hpl.jena.query.QueryException $r3;
        com.hp.hpl.jena.graph.Node r0;
        int i0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.jena.query.QueryException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a variable: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = new com.hp.hpl.jena.query.SortCondition;

        specialinvoke $r1.<com.hp.hpl.jena.query.SortCondition: void <init>(com.hp.hpl.jena.graph.Node,int)>(r0, i0);

        virtualinvoke r2.<com.hp.hpl.jena.query.Query: void addOrderBy(com.hp.hpl.jena.query.SortCondition)>($r1);

        return;
    }

    public void addOrderBy(java.lang.String, int)
    {
        com.hp.hpl.jena.query.Query r3;
        com.hp.hpl.jena.query.SortCondition $r1;
        int i0;
        java.lang.String $r0, r4;
        com.hp.hpl.jena.sparql.expr.ExprVar $r2;

        r3 := @this: com.hp.hpl.jena.query.Query;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.lang.String canonical(java.lang.String)>(r4);

        $r1 = new com.hp.hpl.jena.query.SortCondition;

        $r2 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(java.lang.String)>($r0);

        specialinvoke $r1.<com.hp.hpl.jena.query.SortCondition: void <init>(com.hp.hpl.jena.sparql.expr.Expr,int)>($r2, i0);

        virtualinvoke r3.<com.hp.hpl.jena.query.Query: void addOrderBy(com.hp.hpl.jena.query.SortCondition)>($r1);

        return;
    }

    public java.util.List getOrderBy()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List orderBy>;

        return $r1;
    }

    public boolean isQueryResultStar()
    {
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = r0.<com.hp.hpl.jena.query.Query: boolean queryResultStar>;

        return $z0;
    }

    public void setQueryResultStar(boolean)
    {
        com.hp.hpl.jena.query.Query r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.query.Query: boolean queryResultStar> = z0;

        return;
    }

    public void setQueryPattern(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.Element r1;
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element queryPattern> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()
    {
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element queryPattern>;

        return $r1;
    }

    public void addGraphURI(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1, $r3;
        java.lang.String r2;
        java.util.ArrayList $r4;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List graphURIs>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List graphURIs> = $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.query.Query: java.util.List graphURIs>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void addNamedGraphURI(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.QueryException $r5;
        java.util.ArrayList $r10;
        java.util.List $r1, $r3, $r4;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r2, $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs>;

        if $r1 != null goto label1;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs> = $r10;

     label1:
        $r3 = r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r5 = new com.hp.hpl.jena.query.QueryException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URI already in named graph set: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r4 = r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public java.util.List getGraphURIs()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List graphURIs>;

        return $r1;
    }

    public boolean usesGraphURI(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.Query: java.util.List graphURIs>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.List getNamedGraphURIs()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs>;

        return $r1;
    }

    public boolean usesNamedGraphURI(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.query.Query: java.util.List namedGraphURIs>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean hasDatasetDescription()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getGraphURIs()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getGraphURIs()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i1 <= 0 goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getNamedGraphURIs()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getNamedGraphURIs()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public com.hp.hpl.jena.sparql.core.DatasetDescription getDatasetDescription()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.core.DatasetDescription $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasDatasetDescription()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.core.DatasetDescription;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetDescription: void <init>()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getGraphURIs()>();

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetDescription: void addAllDefaultGraphURIs(java.util.Collection)>($r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getNamedGraphURIs()>();

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetDescription: void addAllNamedGraphURIs(java.util.Collection)>($r3);

        return $r1;
    }

    public java.util.List getResultVars()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varNames(java.util.Collection)>($r2);

        return $r3;
    }

    public java.util.List getProjectVars()
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;
        java.util.List $r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.core.VarExprList getProject()
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        return $r1;
    }

    public void addProjectVars(java.util.Collection)
    {
        com.hp.hpl.jena.query.Query r2;
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.hp.hpl.jena.query.QueryException $r4;
        com.hp.hpl.jena.sparql.core.Var $r9;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8, $r10;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z0 = $r3 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r10 = (java.lang.String) $r3;

        virtualinvoke r2.<com.hp.hpl.jena.query.Query: void addResultVar(java.lang.String)>($r10);

        goto label1;

     label2:
        $z1 = $r3 instanceof com.hp.hpl.jena.sparql.core.Var;

        if $z1 == 0 goto label3;

        $r9 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        virtualinvoke r2.<com.hp.hpl.jena.query.Query: void addResultVar(com.hp.hpl.jena.graph.Node)>($r9);

        goto label1;

     label3:
        $r4 = new com.hp.hpl.jena.query.QueryException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a variable or variable name: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        r2.<com.hp.hpl.jena.query.Query: boolean resultVarsSet> = 1;

        return;
    }

    public void addResultVar(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r1;
        java.lang.String $r0, r2;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.lang.String canonical(java.lang.String)>(r2);

        specialinvoke r1.<com.hp.hpl.jena.query.Query: void _addResultVar(java.lang.String)>($r0);

        return;
    }

    public void addResultVar(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.query.QueryException $r3;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r2, $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.jena.query.QueryException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a variable: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        specialinvoke r1.<com.hp.hpl.jena.query.Query: void _addResultVar(java.lang.String)>($r2);

        return;
    }

    public void addResultVar(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.query.QueryException $r4;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.Var r9;
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        if r0 != null goto label1;

        r9 = specialinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.Var allocInternVar()>();

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label2;

        $r4 = new com.hp.hpl.jena.query.QueryException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a variable: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        r9 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

     label3:
        $r3 = r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        staticinvoke <com.hp.hpl.jena.query.Query: void _addVarExpr(com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>($r3, r9, r2);

        return;
    }

    public void addResultVar(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.expr.Expr r3;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;
        com.hp.hpl.jena.sparql.core.Var $r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r3 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.Var allocInternVar()>();

        staticinvoke <com.hp.hpl.jena.query.Query: void _addVarExpr(com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>($r1, $r2, r3);

        return;
    }

    public void addResultVar(java.lang.String, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        java.lang.String $r0, r4;
        com.hp.hpl.jena.sparql.core.Var r5;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        if r4 != null goto label1;

        r5 = specialinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.Var allocInternVar()>();

        goto label2;

     label1:
        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.lang.String canonical(java.lang.String)>(r4);

        r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r0);

     label2:
        $r3 = r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        staticinvoke <com.hp.hpl.jena.query.Query: void _addVarExpr(com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>($r3, r5, r2);

        return;
    }

    private void _addResultVar(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.core.Var $r1;

        r2 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r0);

        $r3 = r2.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList projectVars>;

        staticinvoke <com.hp.hpl.jena.query.Query: void _addVar(com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.core.Var)>($r3, $r1);

        r2.<com.hp.hpl.jena.query.Query: boolean resultVarsSet> = 1;

        return;
    }

    private static void _addVar(com.hp.hpl.jena.sparql.core.VarExprList, com.hp.hpl.jena.sparql.core.Var)
    {
        com.hp.hpl.jena.query.QueryBuildException $r3;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $r2 == null goto label1;

        $r3 = new com.hp.hpl.jena.query.QueryBuildException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate variable (had an expression) in result projection \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var)>(r1);

        return;
    }

    private static void _addVarExpr(com.hp.hpl.jena.sparql.core.VarExprList, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.QueryBuildException $r3;
        com.hp.hpl.jena.sparql.core.Var r1;
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.core.VarExprList r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.VarExprList;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: boolean contains(com.hp.hpl.jena.sparql.core.Var)>(r1);

        if $z0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.query.QueryBuildException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate variable in result projection \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2);

        return;
    }

    public boolean hasGroupBy()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r2;
        int $i0;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList groupVars>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.VarExprList: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getAggregators()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean hasHaving()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List havingExprs>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.query.Query: java.util.List havingExprs>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.sparql.core.VarExprList getGroupBy()
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList groupVars>;

        return $r1;
    }

    public java.util.List getHavingExprs()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List havingExprs>;

        return $r1;
    }

    public void addGroupBy(java.lang.String)
    {
        com.hp.hpl.jena.query.Query r1;
        java.lang.String $r0, r3;
        com.hp.hpl.jena.sparql.core.Var $r2;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r3 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.lang.String canonical(java.lang.String)>(r3);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>($r0);

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void addGroupBy(com.hp.hpl.jena.graph.Node)>($r2);

        return;
    }

    public void addGroupBy(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r2;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.core.Var $r3;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList groupVars>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r1);

        staticinvoke <com.hp.hpl.jena.query.Query: void _addVar(com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.core.Var)>($r2, $r3);

        return;
    }

    public void addGroupBy(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void addGroupBy(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(null, r1);

        return;
    }

    public void addGroupBy(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        com.hp.hpl.jena.sparql.core.VarExprList $r2;
        com.hp.hpl.jena.sparql.core.Var $r3, r4;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r4 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        if r4 != null goto label1;

        r4 = specialinvoke r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.Var allocInternVar()>();

     label1:
        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: boolean isVariable()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.Var: boolean isAllocVar()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.core.Var asVar()>();

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void addGroupBy(com.hp.hpl.jena.graph.Node)>($r3);

        return;

     label2:
        $r2 = r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList groupVars>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r4, r0);

        return;
    }

    public void addHavingCondition(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r2 = r0.<com.hp.hpl.jena.query.Query: java.util.List havingExprs>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean hasAggregators()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List aggregators>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List getAggregators()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List aggregators>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.expr.Expr allocAggregate(com.hp.hpl.jena.sparql.expr.aggregate.Aggregator)
    {
        com.hp.hpl.jena.query.Query r2;
        com.hp.hpl.jena.sparql.expr.ExprAggregator $r6, r18;
        java.util.Map $r3, $r7, $r8, $r10;
        com.hp.hpl.jena.sparql.expr.aggregate.Aggregator r0, $r12;
        java.lang.String $r1, $r16;
        boolean $z0;
        com.hp.hpl.jena.sparql.core.Var $r5, r17;
        java.util.List $r9;
        java.lang.Object $r4, $r11;
        java.lang.StringBuilder $r13, $r14, $r15;

        r2 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.aggregate.Aggregator;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.Aggregator: java.lang.String key()>();

        $r3 = r2.<com.hp.hpl.jena.query.Query: java.util.Map aggregatorsAllocated>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r17 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        if r17 == null goto label2;

        $r10 = r2.<com.hp.hpl.jena.query.Query: java.util.Map aggregatorsMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (com.hp.hpl.jena.sparql.expr.ExprAggregator) $r11;

        $r12 = virtualinvoke r18.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.aggregate.Aggregator getAggregator()>();

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.aggregate.Aggregator: boolean equals(java.lang.Object)>($r12);

        if $z0 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal inconsistency: Aggregator: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/query/Query;", $r16);

     label1:
        return r18;

     label2:
        $r5 = specialinvoke r2.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.Var allocInternVar()>();

        $r6 = new com.hp.hpl.jena.sparql.expr.ExprAggregator;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprAggregator: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.aggregate.Aggregator)>($r5, r0);

        $r7 = r2.<com.hp.hpl.jena.query.Query: java.util.Map aggregatorsAllocated>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        $r8 = r2.<com.hp.hpl.jena.query.Query: java.util.Map aggregatorsMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r9 = r2.<com.hp.hpl.jena.query.Query: java.util.List aggregators>;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r6);

        return $r6;
    }

    public boolean hasValues()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableData $r1;
        com.hp.hpl.jena.query.Query r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List getValuesVariables()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableData $r1, $r2;
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r3;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.table.TableData: java.util.List getVars()>();

     label2:
        return $r3;
    }

    public java.util.List getValuesData()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableData $r1, $r2;
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r3;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.algebra.table.TableData: java.util.List getRows()>();

     label2:
        return $r3;
    }

    public void setValuesDataBlock(java.util.List, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableData $r3;
        java.util.List r0, r1;
        com.hp.hpl.jena.query.Query r2;

        r2 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        staticinvoke <com.hp.hpl.jena.query.Query: void checkDataBlock(java.util.List,java.util.List)>(r0, r1);

        $r3 = new com.hp.hpl.jena.sparql.algebra.table.TableData;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.algebra.table.TableData: void <init>(java.util.List,java.util.List)>(r0, r1);

        r2.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.algebra.table.TableData valuesDataBlock> = $r3;

        return;
    }

    private static void checkDataBlock(java.util.List, java.util.List)
    {
        com.hp.hpl.jena.query.QueryBuildException $r8;
        java.lang.String $r14;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2, $r5;
        com.hp.hpl.jena.sparql.core.Var r7;
        java.util.List r0, r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r4;
        java.lang.Object $r3, $r6;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r3;

        $r5 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.core.Var) $r6;

        $z2 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>(r7);

        if $z2 != 0 goto label3;

        $r8 = new com.hp.hpl.jena.query.QueryBuildException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.query.QueryBuildException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    public com.hp.hpl.jena.sparql.syntax.Template getConstructTemplate()
    {
        com.hp.hpl.jena.sparql.syntax.Template $r1;
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Template constructTemplate>;

        return $r1;
    }

    public void setConstructTemplate(com.hp.hpl.jena.sparql.syntax.Template)
    {
        com.hp.hpl.jena.sparql.syntax.Template r1;
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.Template;

        r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Template constructTemplate> = r1;

        return;
    }

    public void addDescribeNode(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.query.QueryException $r4, $r9;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r8, $r12, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r2, $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r13;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void addResultVar(com.hp.hpl.jena.graph.Node)>(r0);

        return;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 != 0 goto label2;

        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z3 == 0 goto label4;

     label2:
        $r2 = r1.<com.hp.hpl.jena.query.Query: java.util.List resultNodes>;

        $z2 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z2 != 0 goto label3;

        $r3 = r1.<com.hp.hpl.jena.query.Query: java.util.List resultNodes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

     label3:
        return;

     label4:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z4 == 0 goto label5;

        $r9 = new com.hp.hpl.jena.query.QueryException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result node is a literal: ");

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label5:
        $r4 = new com.hp.hpl.jena.query.QueryException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result node not recognized: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public java.util.List getResultURIs()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = r0.<com.hp.hpl.jena.query.Query: java.util.List resultNodes>;

        return $r1;
    }

    public void setResultVars()
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.sparql.syntax.Element $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = r0.<com.hp.hpl.jena.query.Query: boolean resultVarsSet>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.hp.hpl.jena.query.Query: boolean resultVarsSet> = 1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        if $r1 != null goto label3;

        $z6 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isDescribeType()>();

        if $z6 != 0 goto label2;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, "setResultVars(): no query pattern");

     label2:
        return;

     label3:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isSelectType()>();

        if $z1 == 0 goto label5;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isQueryResultStar()>();

        if $z5 == 0 goto label4;

        specialinvoke r0.<com.hp.hpl.jena.query.Query: void findAndAddNamedVars()>();

     label4:
        return;

     label5:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isConstructType()>();

        if $z2 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.jena.query.Query: void findAndAddNamedVars()>();

        return;

     label6:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isDescribeType()>();

        if $z3 == 0 goto label8;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean isQueryResultStar()>();

        if $z4 == 0 goto label7;

        specialinvoke r0.<com.hp.hpl.jena.query.Query: void findAndAddNamedVars()>();

     label7:
        return;

     label8:
        return;
    }

    private void findAndAddNamedVars()
    {
        com.hp.hpl.jena.query.Query r0;
        java.util.Iterator r8;
        com.hp.hpl.jena.sparql.core.Var r4;
        java.util.List $r5, $r7;
        com.hp.hpl.jena.sparql.syntax.Element $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.core.VarExprList $r6;
        java.util.LinkedHashSet $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasGroupBy()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.core.VarExprList groupVars>;

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r1 = new java.util.LinkedHashSet;

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.syntax.Element getQueryPattern()>();

        staticinvoke <com.hp.hpl.jena.sparql.syntax.PatternVars: java.util.Collection vars(java.util.Collection,com.hp.hpl.jena.sparql.syntax.Element)>($r1, $r2);

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: boolean hasValues()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.util.List getValuesVariables()>();

        virtualinvoke $r1.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r5);

     label2:
        r8 = virtualinvoke $r1.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r3 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        $z2 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.Var: boolean isNamedVar()>();

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void addResultVar(com.hp.hpl.jena.graph.Node)>(r4);

     label4:
        goto label3;

     label5:
        return;
    }

    public void visit(com.hp.hpl.jena.query.QueryVisitor)
    {
        com.hp.hpl.jena.query.QueryVisitor r0;
        com.hp.hpl.jena.query.Query r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: com.hp.hpl.jena.query.QueryVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void startVisit(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitResultForm(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitPrologue(com.hp.hpl.jena.sparql.core.Prologue)>(r1);

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean isSelectType()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitSelectResultForm(com.hp.hpl.jena.query.Query)>(r1);

     label1:
        $z1 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean isConstructType()>();

        if $z1 == 0 goto label2;

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitConstructResultForm(com.hp.hpl.jena.query.Query)>(r1);

     label2:
        $z2 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean isDescribeType()>();

        if $z2 == 0 goto label3;

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitDescribeResultForm(com.hp.hpl.jena.query.Query)>(r1);

     label3:
        $z3 = virtualinvoke r1.<com.hp.hpl.jena.query.Query: boolean isAskType()>();

        if $z3 == 0 goto label4;

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitAskResultForm(com.hp.hpl.jena.query.Query)>(r1);

     label4:
        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitDatasetDecl(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitQueryPattern(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitGroupBy(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitHaving(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitOrderBy(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitOffset(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitLimit(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void visitValues(com.hp.hpl.jena.query.Query)>(r1);

        interfaceinvoke r0.<com.hp.hpl.jena.query.QueryVisitor: void finishVisit(com.hp.hpl.jena.query.Query)>(r1);

        return;
    }

    public java.lang.Object clone()
    {
        com.hp.hpl.jena.query.Query r0, $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Query cloneQuery()>();

        return $r1;
    }

    public com.hp.hpl.jena.query.Query cloneQuery()
    {
        com.hp.hpl.jena.query.Query r0, $r3;
        com.hp.hpl.jena.query.Syntax $r2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.lang.String toString()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $r3 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>($r1, $r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.query.Query r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.lang.String serialize()>();

        return $r1;
    }

    public java.lang.String toString(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.Syntax r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.query.Query: java.lang.String serialize(com.hp.hpl.jena.query.Syntax)>(r1);

        return $r2;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.query.Query r0;
        int $i0, $i1, $i2, $i3, $i5, $i7;

        r0 := @this: com.hp.hpl.jena.query.Query;

        $i0 = r0.<com.hp.hpl.jena.query.Query: int hashcode>;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.core.QueryHashCode: int calc(com.hp.hpl.jena.query.Query)>(r0);

        r0.<com.hp.hpl.jena.query.Query: int hashcode> = $i1;

        $i2 = r0.<com.hp.hpl.jena.query.Query: int hashcode>;

        $i7 = (int) -1;

        if $i2 != $i7 goto label1;

        r0.<com.hp.hpl.jena.query.Query: int hashcode> = -1073741824;

     label1:
        $i3 = r0.<com.hp.hpl.jena.query.Query: int hashcode>;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.query.Query r1, $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.query.Query;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        if r1 != r0 goto label2;

        return 1;

     label2:
        $r2 = (com.hp.hpl.jena.query.Query) r0;

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.QueryCompare: boolean equals(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Query)>(r1, $r2);

        return $z1;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter)
    {
        com.hp.hpl.jena.query.Query r0;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        virtualinvoke r0.<com.hp.hpl.jena.query.Query: void serialize(org.apache.jena.atlas.io.IndentedWriter)>(r1);

        return;
    }

    public java.lang.String serialize()
    {
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        com.hp.hpl.jena.query.Query r1;
        java.lang.String $r2;

        r1 := @this: com.hp.hpl.jena.query.Query;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void serialize(org.apache.jena.atlas.io.IndentedLineBuffer)>($r0);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String serialize(com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Query r1;
        com.hp.hpl.jena.query.Syntax r2;
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        java.lang.String $r3;

        r1 := @this: com.hp.hpl.jena.query.Query;

        r2 := @parameter0: com.hp.hpl.jena.query.Syntax;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.query.Query: void serialize(org.apache.jena.atlas.io.IndentedLineBuffer,com.hp.hpl.jena.query.Syntax)>($r0, r2);

        $r3 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r3;
    }

    public void serialize(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.query.Query r0;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: java.io.OutputStream;

        staticinvoke <com.hp.hpl.jena.sparql.serializer.Serializer: void serialize(com.hp.hpl.jena.query.Query,java.io.OutputStream)>(r0, r1);

        return;
    }

    public void serialize(java.io.OutputStream, com.hp.hpl.jena.query.Syntax)
    {
        java.io.OutputStream r1;
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.Syntax r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.hp.hpl.jena.query.Syntax;

        staticinvoke <com.hp.hpl.jena.sparql.serializer.Serializer: void serialize(com.hp.hpl.jena.query.Query,java.io.OutputStream,com.hp.hpl.jena.query.Syntax)>(r0, r1, r2);

        return;
    }

    public void serialize(org.apache.jena.atlas.io.IndentedLineBuffer)
    {
        com.hp.hpl.jena.query.Query r0;
        org.apache.jena.atlas.io.IndentedLineBuffer r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedLineBuffer;

        staticinvoke <com.hp.hpl.jena.sparql.serializer.Serializer: void serialize(com.hp.hpl.jena.query.Query,org.apache.jena.atlas.io.IndentedLineBuffer)>(r0, r1);

        return;
    }

    public void serialize(org.apache.jena.atlas.io.IndentedLineBuffer, com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Query r0;
        org.apache.jena.atlas.io.IndentedLineBuffer r1;
        com.hp.hpl.jena.query.Syntax r2;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedLineBuffer;

        r2 := @parameter1: com.hp.hpl.jena.query.Syntax;

        staticinvoke <com.hp.hpl.jena.sparql.serializer.Serializer: void serialize(com.hp.hpl.jena.query.Query,org.apache.jena.atlas.io.IndentedLineBuffer,com.hp.hpl.jena.query.Syntax)>(r0, r1, r2);

        return;
    }

    public void serialize(org.apache.jena.atlas.io.IndentedWriter)
    {
        com.hp.hpl.jena.query.Query r0;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        staticinvoke <com.hp.hpl.jena.sparql.serializer.Serializer: void serialize(com.hp.hpl.jena.query.Query,org.apache.jena.atlas.io.IndentedWriter)>(r0, r1);

        return;
    }

    public void serialize(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.query.Syntax)
    {
        com.hp.hpl.jena.query.Query r0;
        com.hp.hpl.jena.query.Syntax r2;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r0 := @this: com.hp.hpl.jena.query.Query;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r2 := @parameter1: com.hp.hpl.jena.query.Syntax;

        staticinvoke <com.hp.hpl.jena.sparql.serializer.Serializer: void serialize(com.hp.hpl.jena.query.Query,org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.query.Syntax)>(r0, r1, r2);

        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.query.Query: int ORDER_UNKNOW> = -3;

        <com.hp.hpl.jena.query.Query: int ORDER_DEFAULT> = -2;

        <com.hp.hpl.jena.query.Query: int ORDER_DESCENDING> = -1;

        <com.hp.hpl.jena.query.Query: int ORDER_ASCENDING> = 1;

        <com.hp.hpl.jena.query.Query: long NOLIMIT> = -9223372036854775808L;

        <com.hp.hpl.jena.query.Query: int QueryTypeAsk> = 444;

        <com.hp.hpl.jena.query.Query: int QueryTypeDescribe> = 333;

        <com.hp.hpl.jena.query.Query: int QueryTypeConstruct> = 222;

        <com.hp.hpl.jena.query.Query: int QueryTypeSelect> = 111;

        <com.hp.hpl.jena.query.Query: int QueryTypeUnknown> = -123;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void init()>();

        return;
    }
}
