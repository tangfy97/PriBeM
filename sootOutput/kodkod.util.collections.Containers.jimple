public final class kodkod.util.collections.Containers extends java.lang.Object
{
    private static java.util.Comparator identityComparator;
    private static java.util.Comparator hashComparator;

    private void <init>()
    {
        kodkod.util.collections.Containers r0;

        r0 := @this: kodkod.util.collections.Containers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final transient java.util.Iterator iterate(java.lang.Object[])
    {
        int $i0;
        kodkod.util.collections.Containers$AscendingArrayIterator $r0;
        java.lang.Object[] r1;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new kodkod.util.collections.Containers$AscendingArrayIterator;

        $i0 = lengthof r1;

        specialinvoke $r0.<kodkod.util.collections.Containers$AscendingArrayIterator: void <init>(int,int,java.lang.Object[])>(0, $i0, r1);

        return $r0;
    }

    public static final transient java.util.Iterator iterate(int, int, java.lang.Object[])
    {
        java.lang.Object[] r2;
        java.util.Iterator $r0;
        int i0, i1;
        kodkod.util.collections.Containers$DescendingArrayIterator $r1;
        kodkod.util.collections.Containers$AscendingArrayIterator $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: java.lang.Object[];

        if i0 >= i1 goto label1;

        $r3 = new kodkod.util.collections.Containers$AscendingArrayIterator;

        specialinvoke $r3.<kodkod.util.collections.Containers$AscendingArrayIterator: void <init>(int,int,java.lang.Object[])>(i0, i1, r2);

        return $r3;

     label1:
        if i0 <= i1 goto label2;

        $r1 = new kodkod.util.collections.Containers$DescendingArrayIterator;

        specialinvoke $r1.<kodkod.util.collections.Containers$DescendingArrayIterator: void <init>(int,int,java.lang.Object[])>(i0, i1, r2);

        return $r1;

     label2:
        $r0 = staticinvoke <kodkod.util.collections.Containers: java.util.Iterator emptyIterator()>();

        return $r0;
    }

    public static final java.util.Iterator emptyIterator()
    {
        java.util.Set $r0;
        java.util.Iterator $r1;

        $r0 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

        return $r1;
    }

    public static final java.lang.Object[] copy(java.lang.Object[], int, java.lang.Object[], int, int)
    {
        java.lang.Object[] r0, r1;
        int i0, i1, i2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, i1, i2);

        return r1;
    }

    public static final java.lang.Object[] copy(java.lang.Object[], java.lang.Object[])
    {
        int $i0;
        java.lang.Object[] r0, r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i0);

        return r1;
    }

    public static final java.util.Comparator identityComparator()
    {
        kodkod.util.collections.Containers$1 $r2;
        java.util.Comparator $r0, $r1;

        $r0 = <kodkod.util.collections.Containers: java.util.Comparator identityComparator>;

        if $r0 != null goto label1;

        $r2 = new kodkod.util.collections.Containers$1;

        specialinvoke $r2.<kodkod.util.collections.Containers$1: void <init>()>();

        <kodkod.util.collections.Containers: java.util.Comparator identityComparator> = $r2;

     label1:
        $r1 = <kodkod.util.collections.Containers: java.util.Comparator identityComparator>;

        return $r1;
    }

    static final int hash(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

     label2:
        return $i0;
    }

    static final boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public static final java.util.Comparator hashComparator()
    {
        kodkod.util.collections.Containers$2 $r2;
        java.util.Comparator $r0, $r1;

        $r0 = <kodkod.util.collections.Containers: java.util.Comparator hashComparator>;

        if $r0 != null goto label1;

        $r2 = new kodkod.util.collections.Containers$2;

        specialinvoke $r2.<kodkod.util.collections.Containers$2: void <init>()>();

        <kodkod.util.collections.Containers: java.util.Comparator hashComparator> = $r2;

     label1:
        $r1 = <kodkod.util.collections.Containers: java.util.Comparator hashComparator>;

        return $r1;
    }

    public static final java.lang.Object[] identitySort(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Comparator $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <kodkod.util.collections.Containers: java.util.Comparator identityComparator()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return r0;
    }

    public static final java.lang.Object[] hashSort(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Comparator $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <kodkod.util.collections.Containers: java.util.Comparator hashComparator()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r0, $r1);

        return r0;
    }

    public static final int identityBinarySearch(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i17;
        java.lang.Object r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        i12 = 0;

        $i0 = lengthof r0;

        i13 = $i0 - 1;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        goto label13;

     label01:
        $i2 = i12 + i13;

        i3 = $i2 >>> 1;

        $r2 = r0[i3];

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r2);

        if $i4 >= $i1 goto label02;

        i12 = i3 + 1;

        goto label13;

     label02:
        if $i4 <= $i1 goto label03;

        i13 = i3 - 1;

        goto label13;

     label03:
        $r3 = r0[i3];

        if $r3 != r1 goto label04;

        return i3;

     label04:
        i14 = i3 + 1;

        goto label07;

     label05:
        $r7 = r0[i14];

        if $r7 != r1 goto label06;

        return i14;

     label06:
        i14 = i14 + 1;

     label07:
        $i5 = lengthof r0;

        if i14 >= $i5 goto label08;

        $r6 = r0[i14];

        $i9 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r6);

        if $i9 == $i1 goto label05;

     label08:
        i15 = i3 - 1;

        goto label11;

     label09:
        $r5 = r0[i15];

        if $r5 != r1 goto label10;

        return i15;

     label10:
        $i17 = (int) -1;

        i15 = i15 + $i17;

     label11:
        if i15 < 0 goto label12;

        $r4 = r0[i15];

        $i8 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r4);

        if $i8 == $i1 goto label09;

     label12:
        $i6 = i3 + 1;

        $i7 = neg $i6;

        return $i7;

     label13:
        if i12 <= i13 goto label01;

        $i10 = i12 + 1;

        $i11 = neg $i10;

        return $i11;
    }

    public static final int hashBinarySearch(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, $i17;
        boolean $z0, $z1, $z2;
        java.lang.Object r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        i12 = 0;

        $i0 = lengthof r0;

        i13 = $i0 - 1;

        $i1 = staticinvoke <kodkod.util.collections.Containers: int hash(java.lang.Object)>(r1);

        goto label13;

     label01:
        $i2 = i12 + i13;

        i3 = $i2 >>> 1;

        $r2 = r0[i3];

        $i4 = staticinvoke <kodkod.util.collections.Containers: int hash(java.lang.Object)>($r2);

        if $i4 >= $i1 goto label02;

        i12 = i3 + 1;

        goto label13;

     label02:
        if $i4 <= $i1 goto label03;

        i13 = i3 - 1;

        goto label13;

     label03:
        $r3 = r0[i3];

        $z0 = staticinvoke <kodkod.util.collections.Containers: boolean eq(java.lang.Object,java.lang.Object)>($r3, r1);

        if $z0 == 0 goto label04;

        return i3;

     label04:
        i14 = i3 + 1;

        goto label07;

     label05:
        $r7 = r0[i14];

        $z2 = staticinvoke <kodkod.util.collections.Containers: boolean eq(java.lang.Object,java.lang.Object)>($r7, r1);

        if $z2 == 0 goto label06;

        return i14;

     label06:
        i14 = i14 + 1;

     label07:
        $i5 = lengthof r0;

        if i14 >= $i5 goto label08;

        $r6 = r0[i14];

        $i9 = staticinvoke <kodkod.util.collections.Containers: int hash(java.lang.Object)>($r6);

        if $i9 == $i1 goto label05;

     label08:
        i15 = i3 - 1;

        goto label11;

     label09:
        $r5 = r0[i15];

        $z1 = staticinvoke <kodkod.util.collections.Containers: boolean eq(java.lang.Object,java.lang.Object)>($r5, r1);

        if $z1 == 0 goto label10;

        return i15;

     label10:
        $i17 = (int) -1;

        i15 = i15 + $i17;

     label11:
        if i15 < 0 goto label12;

        $r4 = r0[i15];

        $i8 = staticinvoke <kodkod.util.collections.Containers: int hash(java.lang.Object)>($r4);

        if $i8 == $i1 goto label09;

     label12:
        $i6 = i3 + 1;

        $i7 = neg $i6;

        return $i7;

     label13:
        if i12 <= i13 goto label01;

        $i10 = i12 + 1;

        $i11 = neg $i10;

        return $i11;
    }

    public static final java.util.Set asIdentitySet(java.lang.Object[])
    {
        java.lang.Object[] r1;
        kodkod.util.collections.Containers$3 $r0;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new kodkod.util.collections.Containers$3;

        specialinvoke $r0.<kodkod.util.collections.Containers$3: void <init>(java.lang.Object[])>(r1);

        return $r0;
    }

    public static final java.util.Set asHashSet(java.lang.Object[])
    {
        java.lang.Object[] r1;
        kodkod.util.collections.Containers$4 $r0;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new kodkod.util.collections.Containers$4;

        specialinvoke $r0.<kodkod.util.collections.Containers$4: void <init>(java.lang.Object[])>(r1);

        return $r0;
    }
}
