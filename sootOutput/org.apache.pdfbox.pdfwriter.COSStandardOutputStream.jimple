public class org.apache.pdfbox.pdfwriter.COSStandardOutputStream extends java.io.FilterOutputStream
{
    public static final byte[] CRLF;
    public static final byte[] LF;
    public static final byte[] EOL;
    private long pos;
    private boolean onNewLine;
    private java.nio.channels.FileChannel fileChannel;
    private java.io.FileDescriptor fileDescriptor;
    private long mark;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        java.io.FileOutputStream $r2, $r4;
        long $l0;
        java.io.IOException $r7;
        java.io.FileDescriptor $r5;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        java.nio.channels.FileChannel $r3, $r6;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos> = 0L;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = 0;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel> = null;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.FileDescriptor fileDescriptor> = null;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long mark> = -1L;

        $z0 = r1 instanceof java.io.FileOutputStream;

        if $z0 == 0 goto label4;

     label1:
        $r2 = (java.io.FileOutputStream) r1;

        $r3 = virtualinvoke $r2.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel> = $r3;

        $r4 = (java.io.FileOutputStream) r1;

        $r5 = virtualinvoke $r4.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.FileDescriptor fileDescriptor> = $r5;

        $r6 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel>;

        $l0 = virtualinvoke $r6.<java.nio.channels.FileChannel: long position()>();

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos> = $l0;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public long getPos()
    {
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        long $l0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $l0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos>;

        return $l0;
    }

    public void setPos(long) throws java.io.IOException
    {
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        long l0;
        java.nio.channels.FileChannel $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void checkPos()>();

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos> = l0;

        $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel>;

        virtualinvoke $r2.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>(l0);

     label1:
        return;
    }

    public boolean isOnNewLine()
    {
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $z0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine>;

        return $z0;
    }

    public void setOnNewLine(boolean)
    {
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        long $l2, $l3, $l4;
        int i0, i1;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void checkPos()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0);

        $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos>;

        $l2 = (long) i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos> = $l4;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        int i0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        long $l1, $l2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void checkPos()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0);

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos>;

        $l2 = $l1 + 1L;

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long pos> = $l2;

        return;
    }

    public void writeCRLF() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] CRLF>;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1);

        return;
    }

    public void writeEOL() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean isOnNewLine()>();

        if $z0 != 0 goto label1;

        $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] EOL>;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1);

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(1);

     label1:
        return;
    }

    public void writeLF() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] LF>;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1);

        return;
    }

    public void mark() throws java.io.IOException
    {
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        long $l0;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void checkPos()>();

        $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long mark> = $l0;

        return;
    }

    public void reset() throws java.io.IOException
    {
        byte $b1;
        int $i3;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        long $l0, $l2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $l0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long mark>;

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        return;

     label1:
        $l2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long mark>;

        virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setPos(long)>($l2);

        return;
    }

    private void checkPos() throws java.io.IOException
    {
        byte $b2;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        long $l0, $l1;
        java.io.IOException $r3;
        java.nio.channels.FileChannel $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.nio.channels.FileChannel fileChannel>;

        $l0 = virtualinvoke $r2.<java.nio.channels.FileChannel: long position()>();

        $l1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("OutputStream has an invalid position");

        throw $r3;

     label1:
        return;
    }

    public byte[] getFileInBytes(int[]) throws java.io.IOException
    {
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r0;
        int[] r1;

        r0 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        r1 := @parameter0: int[];

        return null;
    }

    public java.io.InputStream getFilterInputStream(int[])
    {
        int[] r4;
        java.io.FileDescriptor $r3;
        org.apache.pdfbox.pdfwriter.COSFilterInputStream $r0;
        org.apache.pdfbox.pdfwriter.COSStandardOutputStream r2;
        java.io.FileInputStream $r1;

        r2 := @this: org.apache.pdfbox.pdfwriter.COSStandardOutputStream;

        r4 := @parameter0: int[];

        $r0 = new org.apache.pdfbox.pdfwriter.COSFilterInputStream;

        $r1 = new java.io.FileInputStream;

        $r3 = r2.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.FileDescriptor fileDescriptor>;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r3);

        specialinvoke $r0.<org.apache.pdfbox.pdfwriter.COSFilterInputStream: void <init>(java.io.InputStream,int[])>($r1, r4);

        return $r0;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2;

        $r0 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("\r\n");

        <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] CRLF> = $r0;

        $r1 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("\n");

        <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] LF> = $r1;

        $r2 = staticinvoke <org.apache.pdfbox.util.StringUtil: byte[] getBytes(java.lang.String)>("\n");

        <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] EOL> = $r2;

        return;
    }
}
