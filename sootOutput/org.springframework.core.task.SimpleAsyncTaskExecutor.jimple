public class org.springframework.core.task.SimpleAsyncTaskExecutor extends org.springframework.util.CustomizableThreadCreator implements org.springframework.core.task.AsyncTaskExecutor, java.io.Serializable
{
    public static final int UNBOUNDED_CONCURRENCY;
    public static final int NO_CONCURRENCY;
    private final org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle;
    private java.util.concurrent.ThreadFactory threadFactory;

    public void <init>()
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        specialinvoke r0.<org.springframework.util.CustomizableThreadCreator: void <init>()>();

        $r1 = new org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter;

        specialinvoke $r1.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: void <init>(org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter)>(null);

        r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r2;
        java.lang.String r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.util.CustomizableThreadCreator: void <init>(java.lang.String)>(r1);

        $r2 = new org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter;

        specialinvoke $r2.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: void <init>(org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter)>(null);

        r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle> = $r2;

        return;
    }

    public void <init>(java.util.concurrent.ThreadFactory)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r1;
        java.util.concurrent.ThreadFactory r2;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r2 := @parameter0: java.util.concurrent.ThreadFactory;

        specialinvoke r0.<org.springframework.util.CustomizableThreadCreator: void <init>()>();

        $r1 = new org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter;

        specialinvoke $r1.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: void <init>(org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter)>(null);

        r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle> = $r1;

        r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: java.util.concurrent.ThreadFactory threadFactory> = r2;

        return;
    }

    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        java.util.concurrent.ThreadFactory r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: java.util.concurrent.ThreadFactory threadFactory> = r1;

        return;
    }

    public final java.util.concurrent.ThreadFactory getThreadFactory()
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        java.util.concurrent.ThreadFactory $r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        $r1 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: java.util.concurrent.ThreadFactory threadFactory>;

        return $r1;
    }

    public void setConcurrencyLimit(int)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        int i0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle>;

        virtualinvoke $r1.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: void setConcurrencyLimit(int)>(i0);

        return;
    }

    public final int getConcurrencyLimit()
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        int $i0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        $r1 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle>;

        $i0 = virtualinvoke $r1.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: int getConcurrencyLimit()>();

        return $i0;
    }

    public final boolean isThrottleActive()
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r1;
        boolean $z0;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        $r1 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle>;

        $z0 = virtualinvoke $r1.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: boolean isThrottleActive()>();

        return $z0;
    }

    public void execute(java.lang.Runnable)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        java.lang.Runnable r1;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        virtualinvoke r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: void execute(java.lang.Runnable,long)>(r1, 9223372036854775807L);

        return;
    }

    public void execute(java.lang.Runnable, long)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable $r4;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r2;
        long l0;
        java.lang.Runnable r0;
        byte $b1;
        org.springframework.core.task.SimpleAsyncTaskExecutor r1;
        int $i2;
        boolean $z0;

        r1 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r0 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Runnable must not be null");

        $z0 = virtualinvoke r1.<org.springframework.core.task.SimpleAsyncTaskExecutor: boolean isThrottleActive()>();

        if $z0 == 0 goto label1;

        $b1 = l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label1;

        $r2 = r1.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle>;

        virtualinvoke $r2.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter: void beforeAccess()>();

        $r4 = new org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable;

        specialinvoke $r4.<org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottlingRunnable: void <init>(org.springframework.core.task.SimpleAsyncTaskExecutor,java.lang.Runnable)>(r1, r0);

        virtualinvoke r1.<org.springframework.core.task.SimpleAsyncTaskExecutor: void doExecute(java.lang.Runnable)>($r4);

        goto label2;

     label1:
        virtualinvoke r1.<org.springframework.core.task.SimpleAsyncTaskExecutor: void doExecute(java.lang.Runnable)>(r0);

     label2:
        return;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r2;
        java.util.concurrent.FutureTask $r0;
        java.lang.Runnable r1;

        r2 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, null);

        virtualinvoke r2.<org.springframework.core.task.SimpleAsyncTaskExecutor: void execute(java.lang.Runnable,long)>($r0, 9223372036854775807L);

        return $r0;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r2;
        java.util.concurrent.FutureTask $r0;
        java.util.concurrent.Callable r1;

        r2 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r0 = new java.util.concurrent.FutureTask;

        specialinvoke $r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        virtualinvoke r2.<org.springframework.core.task.SimpleAsyncTaskExecutor: void execute(java.lang.Runnable,long)>($r0, 9223372036854775807L);

        return $r0;
    }

    protected void doExecute(java.lang.Runnable)
    {
        java.lang.Thread $r4;
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        java.util.concurrent.ThreadFactory $r1, $r3;
        java.lang.Runnable r2;

        r0 := @this: org.springframework.core.task.SimpleAsyncTaskExecutor;

        r2 := @parameter0: java.lang.Runnable;

        $r1 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: java.util.concurrent.ThreadFactory threadFactory>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: java.util.concurrent.ThreadFactory threadFactory>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r2);

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: java.lang.Thread createThread(java.lang.Runnable)>(r2);

     label2:
        virtualinvoke $r4.<java.lang.Thread: void start()>();

        return;
    }

    static org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter access$0(org.springframework.core.task.SimpleAsyncTaskExecutor)
    {
        org.springframework.core.task.SimpleAsyncTaskExecutor r0;
        org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter $r1;

        r0 := @parameter0: org.springframework.core.task.SimpleAsyncTaskExecutor;

        $r1 = r0.<org.springframework.core.task.SimpleAsyncTaskExecutor: org.springframework.core.task.SimpleAsyncTaskExecutor$ConcurrencyThrottleAdapter concurrencyThrottle>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.core.task.SimpleAsyncTaskExecutor: int NO_CONCURRENCY> = 0;

        <org.springframework.core.task.SimpleAsyncTaskExecutor: int UNBOUNDED_CONCURRENCY> = -1;

        return;
    }
}
