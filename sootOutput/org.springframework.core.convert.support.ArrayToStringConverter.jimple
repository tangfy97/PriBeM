final class org.springframework.core.convert.support.ArrayToStringConverter extends java.lang.Object implements org.springframework.core.convert.converter.ConditionalGenericConverter
{
    private final org.springframework.core.convert.support.CollectionToStringConverter helperConverter;

    public void <init>(org.springframework.core.convert.ConversionService)
    {
        org.springframework.core.convert.support.ArrayToStringConverter r0;
        org.springframework.core.convert.ConversionService r2;
        org.springframework.core.convert.support.CollectionToStringConverter $r1;

        r0 := @this: org.springframework.core.convert.support.ArrayToStringConverter;

        r2 := @parameter0: org.springframework.core.convert.ConversionService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.core.convert.support.CollectionToStringConverter;

        specialinvoke $r1.<org.springframework.core.convert.support.CollectionToStringConverter: void <init>(org.springframework.core.convert.ConversionService)>(r2);

        r0.<org.springframework.core.convert.support.ArrayToStringConverter: org.springframework.core.convert.support.CollectionToStringConverter helperConverter> = $r1;

        return;
    }

    public java.util.Set getConvertibleTypes()
    {
        org.springframework.core.convert.converter.GenericConverter$ConvertiblePair $r0;
        java.util.Set $r1;
        org.springframework.core.convert.support.ArrayToStringConverter r2;

        r2 := @this: org.springframework.core.convert.support.ArrayToStringConverter;

        $r0 = new org.springframework.core.convert.converter.GenericConverter$ConvertiblePair;

        specialinvoke $r0.<org.springframework.core.convert.converter.GenericConverter$ConvertiblePair: void <init>(java.lang.Class,java.lang.Class)>(class "[Ljava/lang/Object;", class "Ljava/lang/String;");

        $r1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r0);

        return $r1;
    }

    public boolean matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        org.springframework.core.convert.support.ArrayToStringConverter r0;
        org.springframework.core.convert.TypeDescriptor r1, r2;
        org.springframework.core.convert.support.CollectionToStringConverter $r3;
        boolean $z0;

        r0 := @this: org.springframework.core.convert.support.ArrayToStringConverter;

        r1 := @parameter0: org.springframework.core.convert.TypeDescriptor;

        r2 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r3 = r0.<org.springframework.core.convert.support.ArrayToStringConverter: org.springframework.core.convert.support.CollectionToStringConverter helperConverter>;

        $z0 = virtualinvoke $r3.<org.springframework.core.convert.support.CollectionToStringConverter: boolean matches(org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r1, r2);

        return $z0;
    }

    public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)
    {
        java.lang.Object[] $r3;
        java.util.List $r4;
        org.springframework.core.convert.support.ArrayToStringConverter r0;
        org.springframework.core.convert.TypeDescriptor r5, r6;
        java.lang.Object r1, $r7;
        org.springframework.core.convert.support.CollectionToStringConverter $r2;

        r0 := @this: org.springframework.core.convert.support.ArrayToStringConverter;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        r6 := @parameter2: org.springframework.core.convert.TypeDescriptor;

        $r2 = r0.<org.springframework.core.convert.support.ArrayToStringConverter: org.springframework.core.convert.support.CollectionToStringConverter helperConverter>;

        $r3 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $r7 = virtualinvoke $r2.<org.springframework.core.convert.support.CollectionToStringConverter: java.lang.Object convert(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r4, r5, r6);

        return $r7;
    }
}
