public abstract class com.mycila.inject.internal.guava.cache.ForwardingCache extends com.mycila.inject.internal.guava.collect.ForwardingObject implements com.mycila.inject.internal.guava.cache.Cache
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingObject: void <init>()>();

        return;
    }

    protected abstract com.mycila.inject.internal.guava.cache.Cache delegate();

    public java.lang.Object get(java.lang.Object) throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        java.lang.Object r2, $r3;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        $r3 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: java.lang.Object get(java.lang.Object)>(r2);

        return $r3;
    }

    public java.lang.Object getUnchecked(java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        java.lang.Object r2, $r3;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        $r3 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: java.lang.Object getUnchecked(java.lang.Object)>(r2);

        return $r3;
    }

    public java.lang.Object apply(java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        java.lang.Object r2, $r3;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        $r3 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: java.lang.Object apply(java.lang.Object)>(r2);

        return $r3;
    }

    public void invalidate(java.lang.Object)
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: void invalidate(java.lang.Object)>(r2);

        return;
    }

    public void invalidateAll()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: void invalidateAll()>();

        return;
    }

    public long size()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        long $l0;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        $l0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: long size()>();

        return $l0;
    }

    public com.mycila.inject.internal.guava.cache.CacheStats stats()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        com.mycila.inject.internal.guava.cache.CacheStats $r2;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: com.mycila.inject.internal.guava.cache.CacheStats stats()>();

        return $r2;
    }

    public java.util.concurrent.ConcurrentMap asMap()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        com.mycila.inject.internal.guava.cache.Cache $r1;
        java.util.concurrent.ConcurrentMap $r2;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: java.util.concurrent.ConcurrentMap asMap()>();

        return $r2;
    }

    public void cleanUp()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.cache.Cache: void cleanUp()>();

        return;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.cache.ForwardingCache r0;
        com.mycila.inject.internal.guava.cache.Cache $r1;

        r0 := @this: com.mycila.inject.internal.guava.cache.ForwardingCache;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.ForwardingCache: com.mycila.inject.internal.guava.cache.Cache delegate()>();

        return $r1;
    }
}
