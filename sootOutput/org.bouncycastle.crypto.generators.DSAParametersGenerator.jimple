public class org.bouncycastle.crypto.generators.DSAParametersGenerator extends java.lang.Object
{
    private int L;
    private int N;
    private int certainty;
    private java.security.SecureRandom random;
    private static final java.math.BigInteger ZERO;
    private static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;

    public void <init>()
    {
        org.bouncycastle.crypto.generators.DSAParametersGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(int, int, java.security.SecureRandom)
    {
        java.security.SecureRandom r1;
        org.bouncycastle.crypto.generators.DSAParametersGenerator r0;
        int i0, $i1, i2;

        r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        r1 := @parameter2: java.security.SecureRandom;

        $i1 = staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: int getDefaultN(int)>(i0);

        specialinvoke r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: void init(int,int,int,java.security.SecureRandom)>(i0, $i1, i2, r1);

        return;
    }

    private void init(int, int, int, java.security.SecureRandom)
    {
        java.security.SecureRandom r1;
        org.bouncycastle.crypto.generators.DSAParametersGenerator r0;
        int i0, i1, i2;

        r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.security.SecureRandom;

        r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L> = i0;

        r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int N> = i1;

        r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty> = i2;

        r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random> = r1;

        return;
    }

    public org.bouncycastle.crypto.params.DSAParameters generateParameters()
    {
        int $i0;
        org.bouncycastle.crypto.params.DSAParameters $r1;
        org.bouncycastle.crypto.generators.DSAParametersGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        $i0 = r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        if $i0 <= 1024 goto label1;

        $r1 = specialinvoke r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: org.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_3()>();

        goto label2;

     label1:
        $r1 = specialinvoke r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: org.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_2()>();

     label2:
        return $r1;
    }

    private org.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_2()
    {
        byte[] r0, r1, r2, r3, r6, $r8;
        java.security.SecureRandom $r15, $r19;
        byte $b5, $b6, $b7, $b8, $b9, $b10, $b22, $b23, $b24, $b34, $b35, $b36, $b37;
        java.math.BigInteger $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        org.bouncycastle.crypto.generators.DSAParametersGenerator r5;
        org.bouncycastle.crypto.params.DSAValidationParameters $r18;
        org.bouncycastle.crypto.digests.SHA1Digest $r4;
        org.bouncycastle.crypto.params.DSAParameters $r17;
        boolean $z0, $z1;
        int $i0, $i1, i2, $i3, $i4, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i38, i39, $i40, i41, i42;

        r5 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        r0 = newarray (byte)[20];

        r1 = newarray (byte)[20];

        r2 = newarray (byte)[20];

        r3 = newarray (byte)[20];

        $r4 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r4.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        $i0 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i1 = $i0 - 1;

        i2 = $i1 / 160;

        $i3 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i4 = $i3 / 8;

        r6 = newarray (byte)[$i4];

     label01:
        $r19 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        virtualinvoke $r19.<java.security.SecureRandom: void nextBytes(byte[])>(r0);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void hash(org.bouncycastle.crypto.Digest,byte[],byte[])>($r4, r0, r1);

        $i38 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i38);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>(r2);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void hash(org.bouncycastle.crypto.Digest,byte[],byte[])>($r4, r2, r2);

        i39 = 0;

     label02:
        $i40 = lengthof r3;

        if i39 == $i40 goto label03;

        $b35 = r1[i39];

        $b34 = r2[i39];

        $b36 = $b35 ^ $b34;

        $b37 = (byte) $b36;

        r3[i39] = $b37;

        i39 = i39 + 1;

        goto label02;

     label03:
        $b5 = r3[0];

        $b6 = $b5 | -128;

        $b7 = (byte) $b6;

        r3[0] = $b7;

        $b8 = r3[19];

        $b9 = $b8 | 1;

        $b10 = (byte) $b9;

        r3[19] = $b10;

        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        $i11 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z0 = virtualinvoke $r7.<java.math.BigInteger: boolean isProbablePrime(int)>($i11);

        if $z0 != 0 goto label04;

        goto label01;

     label04:
        $r8 = staticinvoke <org.bouncycastle.util.Arrays: byte[] clone(byte[])>(r0);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r8);

        i41 = 0;

     label05:
        if i41 >= 4096 goto label10;

        i42 = 0;

     label06:
        if i42 >= i2 goto label07;

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r8);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void hash(org.bouncycastle.crypto.Digest,byte[],byte[])>($r4, $r8, r1);

        $i31 = lengthof r6;

        $i29 = i42 + 1;

        $i28 = lengthof r1;

        $i30 = $i29 * $i28;

        $i33 = $i31 - $i30;

        $i32 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r6, $i33, $i32);

        i42 = i42 + 1;

        goto label06;

     label07:
        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r8);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void hash(org.bouncycastle.crypto.Digest,byte[],byte[])>($r4, $r8, r1);

        $i16 = lengthof r1;

        $i14 = lengthof r6;

        $i12 = lengthof r1;

        $i13 = i2 * $i12;

        $i15 = $i14 - $i13;

        $i21 = $i16 - $i15;

        $i19 = lengthof r6;

        $i17 = lengthof r1;

        $i18 = i2 * $i17;

        $i20 = $i19 - $i18;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i21, r6, 0, $i20);

        $b22 = r6[0];

        $b23 = $b22 | -128;

        $b24 = (byte) $b23;

        r6[0] = $b24;

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(int,byte[])>(1, r6);

        $r10 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r10);

        $r12 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r13 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        $r14 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r13);

        $i25 = virtualinvoke $r14.<java.math.BigInteger: int bitLength()>();

        $i26 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        if $i25 == $i26 goto label08;

        goto label09;

     label08:
        $i27 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z1 = virtualinvoke $r14.<java.math.BigInteger: boolean isProbablePrime(int)>($i27);

        if $z1 == 0 goto label09;

        $r15 = r5.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        $r16 = staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r14, $r7, $r15);

        $r17 = new org.bouncycastle.crypto.params.DSAParameters;

        $r18 = new org.bouncycastle.crypto.params.DSAValidationParameters;

        specialinvoke $r18.<org.bouncycastle.crypto.params.DSAValidationParameters: void <init>(byte[],int)>(r0, i41);

        specialinvoke $r17.<org.bouncycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.params.DSAValidationParameters)>($r14, $r7, $r16, $r18);

        return $r17;

     label09:
        i41 = i41 + 1;

        goto label05;

     label10:
        goto label01;
    }

    private static java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.security.SecureRandom r7;
        int $i0;
        java.math.BigInteger r0, $r1, $r2, r3, $r4, $r5, $r6, $r8, $r9, $r10;

        r0 := @parameter0: java.math.BigInteger;

        r3 := @parameter1: java.math.BigInteger;

        r7 := @parameter2: java.security.SecureRandom;

        $r1 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r3);

        $r5 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $r6 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r5);

     label1:
        $r8 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $r9 = staticinvoke <org.bouncycastle.util.BigIntegers: java.math.BigInteger createRandomInRange(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r8, $r6, r7);

        $r10 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r4, r0);

        $i0 = virtualinvoke $r10.<java.math.BigInteger: int bitLength()>();

        if $i0 <= 1 goto label2;

        return $r10;

     label2:
        goto label1;
    }

    private org.bouncycastle.crypto.params.DSAParameters generateParameters_FIPS186_3()
    {
        byte[] r2, r3, $r4;
        java.security.SecureRandom $r13, $r21;
        java.math.BigInteger $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, r34, r35;
        org.bouncycastle.crypto.generators.DSAParametersGenerator r1;
        org.bouncycastle.crypto.digests.SHA256Digest $r0;
        org.bouncycastle.crypto.params.DSAValidationParameters $r16;
        org.bouncycastle.crypto.params.DSAParameters $r15;
        boolean $z0, $z1;
        int $i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, $i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25;

        r1 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        $r0 = new org.bouncycastle.crypto.digests.SHA256Digest;

        specialinvoke $r0.<org.bouncycastle.crypto.digests.SHA256Digest: void <init>()>();

        $i0 = interfaceinvoke $r0.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        i1 = $i0 * 8;

        i2 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int N>;

        $i3 = i2 / 8;

        r2 = newarray (byte)[$i3];

        $i4 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i5 = $i4 - 1;

        i6 = $i5 / i1;

        $i7 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i8 = $i7 - 1;

        i9 = $i8 % i1;

        $i10 = interfaceinvoke $r0.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i10];

     label1:
        $r21 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        virtualinvoke $r21.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void hash(org.bouncycastle.crypto.Digest,byte[],byte[])>($r0, r2, r3);

        $r22 = new java.math.BigInteger;

        specialinvoke $r22.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        $r23 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $i18 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int N>;

        $i19 = $i18 - 1;

        $r24 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i19);

        $r25 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r24);

        $r26 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $i20 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int N>;

        $i21 = $i20 - 1;

        $r27 = virtualinvoke $r26.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i21);

        $r28 = virtualinvoke $r27.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r25);

        $r29 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r30 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r29);

        $r31 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $r32 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r31);

        $r33 = virtualinvoke $r30.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r32);

        $i22 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z1 = virtualinvoke $r33.<java.math.BigInteger: boolean isProbablePrime(int)>($i22);

        if $z1 != 0 goto label2;

        goto label1;

     label2:
        $r4 = staticinvoke <org.bouncycastle.util.Arrays: byte[] clone(byte[])>(r2);

        $i11 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        i12 = 4 * $i11;

        i23 = 0;

     label3:
        if i23 >= i12 goto label9;

        r34 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ZERO>;

        i24 = 0;

        i25 = 0;

     label4:
        if i24 > i6 goto label6;

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void inc(byte[])>($r4);

        staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: void hash(org.bouncycastle.crypto.Digest,byte[],byte[])>($r0, $r4, r3);

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(int,byte[])>(1, r3);

        r35 = $r17;

        if i24 != i6 goto label5;

        $r19 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i9);

        r35 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r20);

     label5:
        $r18 = virtualinvoke r35.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i25);

        r34 = virtualinvoke r34.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r18);

        i24 = i24 + 1;

        i25 = i25 + i1;

        goto label4;

     label6:
        $r5 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $i13 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        $i14 = $i13 - 1;

        $r6 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i14);

        $r7 = virtualinvoke r34.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r6);

        $r8 = virtualinvoke $r33.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r9 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $r10 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10);

        $r12 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $i15 = virtualinvoke $r12.<java.math.BigInteger: int bitLength()>();

        $i16 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int L>;

        if $i15 == $i16 goto label7;

        goto label8;

     label7:
        $i17 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z0 = virtualinvoke $r12.<java.math.BigInteger: boolean isProbablePrime(int)>($i17);

        if $z0 == 0 goto label8;

        $r13 = r1.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        $r14 = staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>($r12, $r33, $r13);

        $r15 = new org.bouncycastle.crypto.params.DSAParameters;

        $r16 = new org.bouncycastle.crypto.params.DSAValidationParameters;

        specialinvoke $r16.<org.bouncycastle.crypto.params.DSAValidationParameters: void <init>(byte[],int)>(r2, i23);

        specialinvoke $r15.<org.bouncycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.params.DSAValidationParameters)>($r12, $r33, $r14, $r16);

        return $r15;

     label8:
        i23 = i23 + 1;

        goto label3;

     label9:
        goto label1;
    }

    private static java.math.BigInteger calculateGenerator_FIPS186_3_Unverifiable(java.math.BigInteger, java.math.BigInteger, java.security.SecureRandom)
    {
        java.security.SecureRandom r2;
        java.math.BigInteger r0, r1, $r3;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        r2 := @parameter2: java.security.SecureRandom;

        $r3 = staticinvoke <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger calculateGenerator_FIPS186_2(java.math.BigInteger,java.math.BigInteger,java.security.SecureRandom)>(r0, r1, r2);

        return $r3;
    }

    private static void hash(org.bouncycastle.crypto.Digest, byte[], byte[])
    {
        byte[] r1, r2;
        int $i0;
        org.bouncycastle.crypto.Digest r0;

        r0 := @parameter0: org.bouncycastle.crypto.Digest;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $i0 = lengthof r1;

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r1, 0, $i0);

        interfaceinvoke r0.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r2, 0);

        return;
    }

    private static int getDefaultN(int)
    {
        int i0;
        short $s1;

        i0 := @parameter0: int;

        if i0 <= 1024 goto label1;

        $s1 = 256;

        goto label2;

     label1:
        $s1 = 160;

     label2:
        return $s1;
    }

    private static void inc(byte[])
    {
        byte[] r0;
        byte $b1, b4;
        int $i0, $i2, $i3, i5, $i6, $i8;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        i5 = $i0 - 1;

     label1:
        if i5 < 0 goto label3;

        $b1 = r0[i5];

        $i6 = (int) $b1;

        $i2 = $i6 + 1;

        $i3 = $i2 & 255;

        b4 = (byte) $i3;

        r0[i5] = b4;

        if b4 == 0 goto label2;

        goto label3;

     label2:
        $i8 = (int) -1;

        i5 = i5 + $i8;

        goto label1;

     label3:
        return;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1, $r2;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ZERO> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO> = $r2;

        return;
    }
}
