public class com.hp.hpl.jena.util.FileManager extends java.lang.Object
{
    public static final java.lang.String PATH_DELIMITER;
    public static final java.lang.String filePathSeparator;
    private static org.slf4j.Logger log;
    static com.hp.hpl.jena.util.FileManager fmInstance;
    static boolean logAllLookups;
    protected java.util.List fmHandlers;
    protected com.hp.hpl.jena.util.LocationMapper fmMapper;
    boolean cacheModelLoads;
    java.util.Map modelCache;

    public static com.hp.hpl.jena.util.FileManager get()
    {
        com.hp.hpl.jena.util.FileManager $r0, $r1, $r2;

        $r0 = <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager fmInstance>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager makeGlobal()>();

        <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager fmInstance> = $r2;

     label1:
        $r1 = <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager fmInstance>;

        return $r1;
    }

    public static void setGlobalFileManager(com.hp.hpl.jena.util.FileManager)
    {
        com.hp.hpl.jena.util.FileManager r0;

        r0 := @parameter0: com.hp.hpl.jena.util.FileManager;

        <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager fmInstance> = r0;

        return;
    }

    public void <init>()
    {
        com.hp.hpl.jena.util.FileManager r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers> = $r1;

        r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = null;

        r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads> = 0;

        r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache> = null;

        return;
    }

    public void <init>(com.hp.hpl.jena.util.FileManager)
    {
        com.hp.hpl.jena.util.LocationMapper $r5, $r6, $r7;
        java.util.ArrayList $r1;
        java.util.List $r3, $r4;
        com.hp.hpl.jena.util.FileManager r0, r2;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: com.hp.hpl.jena.util.FileManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers> = $r1;

        r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = null;

        r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads> = 0;

        r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache> = null;

        $r4 = r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        $r3 = r2.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = null;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        if $r5 == null goto label1;

        $r6 = new com.hp.hpl.jena.util.LocationMapper;

        $r7 = virtualinvoke r2.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        specialinvoke $r6.<com.hp.hpl.jena.util.LocationMapper: void <init>(com.hp.hpl.jena.util.LocationMapper)>($r7);

        r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = $r6;

     label1:
        r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads> = 0;

        r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache> = null;

        return;
    }

    public com.hp.hpl.jena.util.FileManager clone()
    {
        com.hp.hpl.jena.util.FileManager r0, $r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $r1 = staticinvoke <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager clone(com.hp.hpl.jena.util.FileManager)>(r0);

        return $r1;
    }

    private static com.hp.hpl.jena.util.FileManager clone(com.hp.hpl.jena.util.FileManager)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.util.LocationMapper $r4, $r5, $r6;
        com.hp.hpl.jena.util.FileManager $r0, r1;

        r1 := @parameter0: com.hp.hpl.jena.util.FileManager;

        $r0 = new com.hp.hpl.jena.util.FileManager;

        specialinvoke $r0.<com.hp.hpl.jena.util.FileManager: void <init>()>();

        $r3 = $r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        $r2 = r1.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = null;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        if $r4 == null goto label1;

        $r5 = new com.hp.hpl.jena.util.LocationMapper;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper getLocationMapper()>();

        specialinvoke $r5.<com.hp.hpl.jena.util.LocationMapper: void <init>(com.hp.hpl.jena.util.LocationMapper)>($r6);

        $r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = $r5;

     label1:
        $r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads> = 0;

        $r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache> = null;

        return $r0;
    }

    public static com.hp.hpl.jena.util.FileManager makeGlobal()
    {
        com.hp.hpl.jena.util.FileManager $r0;
        com.hp.hpl.jena.util.LocationMapper $r1;

        $r0 = new com.hp.hpl.jena.util.FileManager;

        $r1 = staticinvoke <com.hp.hpl.jena.util.LocationMapper: com.hp.hpl.jena.util.LocationMapper get()>();

        specialinvoke $r0.<com.hp.hpl.jena.util.FileManager: void <init>(com.hp.hpl.jena.util.LocationMapper)>($r1);

        staticinvoke <com.hp.hpl.jena.util.FileManager: void setStdLocators(com.hp.hpl.jena.util.FileManager)>($r0);

        return $r0;
    }

    public static void setStdLocators(com.hp.hpl.jena.util.FileManager)
    {
        java.util.List $r1;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;

        r0 := @parameter0: com.hp.hpl.jena.util.FileManager;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void addLocatorFile()>();

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void addLocatorURL()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void addLocatorClassLoader(java.lang.ClassLoader)>($r3);

        return;
    }

    public void <init>(com.hp.hpl.jena.util.LocationMapper)
    {
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.util.LocationMapper r2;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: com.hp.hpl.jena.util.LocationMapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers> = $r1;

        r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = null;

        r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads> = 0;

        r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache> = null;

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void setLocationMapper(com.hp.hpl.jena.util.LocationMapper)>(r2);

        return;
    }

    public void setMapper(com.hp.hpl.jena.util.LocationMapper)
    {
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.util.LocationMapper r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: com.hp.hpl.jena.util.LocationMapper;

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void setLocationMapper(com.hp.hpl.jena.util.LocationMapper)>(r1);

        return;
    }

    public void setLocationMapper(com.hp.hpl.jena.util.LocationMapper)
    {
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.util.LocationMapper r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: com.hp.hpl.jena.util.LocationMapper;

        r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper> = r1;

        return;
    }

    public com.hp.hpl.jena.util.LocationMapper getLocationMapper()
    {
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.util.LocationMapper $r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper>;

        return $r1;
    }

    public java.util.Iterator locators()
    {
        com.hp.hpl.jena.util.FileManager r0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public void addLocator(com.hp.hpl.jena.util.Locator)
    {
        org.slf4j.Logger $r1;
        com.hp.hpl.jena.util.Locator r3;
        java.util.List $r8;
        com.hp.hpl.jena.util.FileManager r7;
        java.lang.StringBuilder $r0, $r2, $r5;
        java.lang.String $r4, $r6;

        r7 := @this: com.hp.hpl.jena.util.FileManager;

        r3 := @parameter0: com.hp.hpl.jena.util.Locator;

        $r1 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Add location: ");

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.util.Locator: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>($r6);

        $r8 = r7.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void addLocatorFile()
    {
        com.hp.hpl.jena.util.FileManager r0;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void addLocatorFile(java.lang.String)>(null);

        return;
    }

    public void addLocatorFile(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r2;
        java.lang.String r1;
        com.hp.hpl.jena.util.LocatorFile $r0;

        r2 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.util.LocatorFile;

        specialinvoke $r0.<com.hp.hpl.jena.util.LocatorFile: void <init>(java.lang.String)>(r1);

        virtualinvoke r2.<com.hp.hpl.jena.util.FileManager: void addLocator(com.hp.hpl.jena.util.Locator)>($r0);

        return;
    }

    public void addLocatorClassLoader(java.lang.ClassLoader)
    {
        com.hp.hpl.jena.util.FileManager r2;
        java.lang.ClassLoader r1;
        com.hp.hpl.jena.util.LocatorClassLoader $r0;

        r2 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.ClassLoader;

        $r0 = new com.hp.hpl.jena.util.LocatorClassLoader;

        specialinvoke $r0.<com.hp.hpl.jena.util.LocatorClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        virtualinvoke r2.<com.hp.hpl.jena.util.FileManager: void addLocator(com.hp.hpl.jena.util.Locator)>($r0);

        return;
    }

    public void addLocatorURL()
    {
        com.hp.hpl.jena.util.FileManager r1;
        com.hp.hpl.jena.util.LocatorURL $r0;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        $r0 = new com.hp.hpl.jena.util.LocatorURL;

        specialinvoke $r0.<com.hp.hpl.jena.util.LocatorURL: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: void addLocator(com.hp.hpl.jena.util.Locator)>($r0);

        return;
    }

    public void addLocatorZip(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r2;
        java.lang.String r1;
        com.hp.hpl.jena.util.LocatorZip $r0;

        r2 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.util.LocatorZip;

        specialinvoke $r0.<com.hp.hpl.jena.util.LocatorZip: void <init>(java.lang.String)>(r1);

        virtualinvoke r2.<com.hp.hpl.jena.util.FileManager: void addLocator(com.hp.hpl.jena.util.Locator)>($r0);

        return;
    }

    public void remove(com.hp.hpl.jena.util.Locator)
    {
        com.hp.hpl.jena.util.FileManager r0;
        java.util.List $r2;
        com.hp.hpl.jena.util.Locator r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: com.hp.hpl.jena.util.Locator;

        $r2 = r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void resetCache()
    {
        com.hp.hpl.jena.util.FileManager r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label1:
        return;
    }

    public void setModelCaching(boolean)
    {
        java.util.Map $r1;
        com.hp.hpl.jena.util.FileManager r0;
        java.util.HashMap $r2;
        boolean z0, $z1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads> = z0;

        $z1 = r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads>;

        if $z1 == 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        if $r1 != null goto label1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache> = $r2;

     label1:
        return;
    }

    public boolean getCachingModels()
    {
        com.hp.hpl.jena.util.FileManager r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        return $z0;
    }

    public boolean isCachingModels()
    {
        com.hp.hpl.jena.util.FileManager r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $z0 = r0.<com.hp.hpl.jena.util.FileManager: boolean cacheModelLoads>;

        return $z0;
    }

    public com.hp.hpl.jena.rdf.model.Model getFromCache(java.lang.String)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.rdf.model.Model $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.rdf.model.Model) $r3;

        return $r4;
    }

    public boolean hasCachedModel(java.lang.String)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z1;
    }

    public void addCacheModel(java.lang.String, com.hp.hpl.jena.rdf.model.Model)
    {
        java.util.Map $r3;
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return;
    }

    public void removeCacheModel(java.lang.String)
    {
        java.util.Map $r2;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.util.FileManager: java.util.Map modelCache>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String)
    {
        org.slf4j.Logger $r0, $r5;
        com.hp.hpl.jena.util.FileManager r1;
        com.hp.hpl.jena.rdf.model.Model $r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.lang.String r2, $r9;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loadModel(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label1:
        $r3 = specialinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModelWorker(java.lang.String,java.lang.String,java.lang.String)>(r2, null, null);

        return $r3;
    }

    public com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String, java.lang.String)
    {
        org.slf4j.Logger $r0, $r6;
        com.hp.hpl.jena.util.FileManager r1;
        com.hp.hpl.jena.rdf.model.Model $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11;
        java.lang.String r2, r3, $r12;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loadModel(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label1:
        $r4 = specialinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModelWorker(java.lang.String,java.lang.String,java.lang.String)>(r2, null, r3);

        return $r4;
    }

    public com.hp.hpl.jena.rdf.model.Model loadModel(java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r1;
        java.lang.String r2, r3, r4, $r15;
        boolean $z0;
        org.slf4j.Logger $r0, $r7;
        com.hp.hpl.jena.rdf.model.Model $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loadModel(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label1:
        $r5 = specialinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model loadModelWorker(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4);

        return $r5;
    }

    private com.hp.hpl.jena.rdf.model.Model loadModelWorker(java.lang.String, java.lang.String, java.lang.String)
    {
        org.slf4j.Logger $r5, $r8;
        com.hp.hpl.jena.util.FileManager r0;
        com.hp.hpl.jena.rdf.model.Model $r2, $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.String r1, r3, r4, $r11;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean hasCachedModel(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r5 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label1;

        $r8 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Model cache hit: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r11);

     label1:
        $r6 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model getFromCache(java.lang.String)>(r1);

        return $r6;

     label2:
        $r2 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModelWorker(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String,java.lang.String)>($r2, r1, r3, r4);

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: boolean isCachingModels()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: void addCacheModel(java.lang.String,com.hp.hpl.jena.rdf.model.Model)>(r1, $r2);

     label3:
        return $r2;
    }

    public com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model, java.lang.String)
    {
        org.slf4j.Logger $r0, $r6;
        com.hp.hpl.jena.util.FileManager r1;
        com.hp.hpl.jena.rdf.model.Model r2, $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String r3, $r10;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readModel(model,");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r10);

     label1:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String)>(r2, r3, null);

        return $r4;
    }

    public com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String)
    {
        org.slf4j.Logger $r0, $r7;
        com.hp.hpl.jena.util.FileManager r1;
        com.hp.hpl.jena.rdf.model.Model r2, $r5;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r12;
        java.lang.String r3, r4, $r13;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readModel(model,");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

     label1:
        $r5 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModelWorker(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, null, r4);

        return $r5;
    }

    public com.hp.hpl.jena.rdf.model.Model readModel(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r1;
        java.lang.String r3, r4, r5, $r16;
        boolean $z0;
        org.slf4j.Logger $r0, $r8;
        com.hp.hpl.jena.rdf.model.Model r2, $r6;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r8 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readModel(model,");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r16);

     label1:
        $r6 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.rdf.model.Model readModelWorker(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4, r5);

        return $r6;
    }

    protected com.hp.hpl.jena.rdf.model.Model readModelWorker(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String, java.lang.String)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.shared.NotFoundException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r22, $r24, $r25, $r28, $r30, $r31, $r32, $r33;
        com.hp.hpl.jena.util.TypedStream $r4;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r1, $r2, $r5, $r14, $r20, $r21, $r26, $r27, $r34, r36, r37;
        org.slf4j.Logger $r3, $r9, $r16, $r23, $r29, $r38;
        java.io.IOException $r35;
        com.hp.hpl.jena.rdf.model.Model r6;
        java.io.InputStream $r7, $r8;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r6 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

        r36 := @parameter2: java.lang.String;

        r37 := @parameter3: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: java.lang.String mapURI(java.lang.String)>(r1);

        $r3 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label01;

        $r29 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Map: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r34);

     label01:
        if r37 != null goto label02;

        if r36 != null goto label02;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z3 == 0 goto label02;

        $r27 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String)>($r2);

        interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.lang.String,java.lang.String)>($r2, $r27);

        return r6;

     label02:
        if r37 != null goto label05;

        $r21 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String guessLang(java.lang.String)>($r2);

        r37 = $r21;

        if $r21 == null goto label03;

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 == 0 goto label04;

     label03:
        r37 = "RDF/XML";

     label04:
        $r38 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z5 = interfaceinvoke $r38.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z5 == 0 goto label05;

        $r23 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Syntax guess: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String)>($r26);

     label05:
        if r36 != null goto label06;

        r36 = staticinvoke <com.hp.hpl.jena.util.FileManager: java.lang.String chooseBaseURI(java.lang.String)>(r1);

     label06:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.TypedStream openNoMapOrNull(java.lang.String)>($r2);

        if $r4 != null goto label08;

        $r9 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label07;

        $r16 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to locate \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String)>($r20);

     label07:
        $r10 = new com.hp.hpl.jena.shared.NotFoundException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not found: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.shared.NotFoundException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label08:
        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.util.TypedStream: java.lang.String getMimeType()>();

        if $r5 == null goto label09;

     label09:
        $r7 = virtualinvoke $r4.<com.hp.hpl.jena.util.TypedStream: java.io.InputStream getInput()>();

        interfaceinvoke r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>($r7, r36, r37);

     label10:
        $r8 = virtualinvoke $r4.<com.hp.hpl.jena.util.TypedStream: java.io.InputStream getInput()>();

        virtualinvoke $r8.<java.io.InputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r35 := @caughtexception;

     label13:
        return r6;

        catch java.io.IOException from label10 to label11 with label12;
    }

    private static java.lang.String chooseBaseURI(java.lang.String)
    {
        int $i0;
        java.lang.String $r0, $r4, $r8, $r9, $r10, $r14, $r16, r18;
        boolean $z0, $z1, $z2;
        java.io.File $r11;
        java.lang.Exception $r17;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r7, $r12, $r13, $r15;

        r18 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.lang.String getScheme(java.lang.String)>(r18);

        if $r0 == null goto label5;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>("file:///");

        if $z2 != 0 goto label4;

     label1:
        $r9 = "file:";

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $r10 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int)>($i0);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r10);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:///");

        $r14 = virtualinvoke $r11.<java.io.File: java.lang.String getCanonicalPath()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r18 = $r16;

        r18 = virtualinvoke $r16.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

     label4:
        return r18;

     label5:
        $z0 = virtualinvoke r18.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file://");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file:");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.io.InputStream open(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r1;
        java.lang.String r2, $r3, $r9, $r15;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r0, $r4, $r6, $r11;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r12, $r13, $r14;
        java.io.InputStream $r16;

        r1 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: java.lang.String;

        $r0 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r11 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("open(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>($r15);

     label1:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: java.lang.String mapURI(java.lang.String)>(r2);

        $r4 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label2;

        $r6 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("open: mapped to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label2:
        $r16 = virtualinvoke r1.<com.hp.hpl.jena.util.FileManager: java.io.InputStream openNoMap(java.lang.String)>($r3);

        return $r16;
    }

    public java.lang.String remap(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r1, $r2;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: java.lang.String mapURI(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String mapURI(java.lang.String)
    {
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r2, $r4, $r12, $r18, r19;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r5, $r7, $r13, $r15;
        com.hp.hpl.jena.util.LocationMapper $r1, $r3;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r14, $r16, $r17;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper>;

        if $r1 != null goto label1;

        return r2;

     label1:
        $r3 = r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.LocationMapper fmMapper>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.util.LocationMapper: java.lang.String altMapping(java.lang.String,java.lang.String)>(r2, null);

        r19 = $r4;

        if $r4 != null goto label3;

        $z1 = <com.hp.hpl.jena.util.FileManager: boolean logAllLookups>;

        if $z1 == 0 goto label2;

        $r13 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label2;

        $r15 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not mapped: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r18);

     label2:
        r19 = r2;

        goto label4;

     label3:
        $r5 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r7 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mapped: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label4:
        return r19;
    }

    public java.lang.String readWholeFileAsUTF8(java.io.InputStream)
    {
        java.io.StringWriter $r2;
        java.io.IOException $r5;
        com.hp.hpl.jena.shared.WrappedIOException $r6;
        int $i0;
        com.hp.hpl.jena.util.FileManager r7;
        char[] r3;
        java.io.BufferedReader $r1;
        java.lang.String $r4;
        java.io.InputStream r0;

        r7 := @this: com.hp.hpl.jena.util.FileManager;

        r0 := @parameter0: java.io.InputStream;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.util.FileUtils: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r0);

        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>(int)>(1024);

        r3 = newarray (char)[1024];

     label2:
        $i0 = virtualinvoke $r1.<java.io.Reader: int read(char[])>(r3);

        if $i0 > 0 goto label3;

        goto label4;

     label3:
        virtualinvoke $r2.<java.io.StringWriter: void write(char[],int,int)>(r3, 0, $i0);

        goto label2;

     label4:
        virtualinvoke $r1.<java.io.Reader: void close()>();

        virtualinvoke $r2.<java.io.StringWriter: void close()>();

        $r4 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

     label5:
        return $r4;

     label6:
        $r5 := @caughtexception;

        $r6 = new com.hp.hpl.jena.shared.WrappedIOException;

        specialinvoke $r6.<com.hp.hpl.jena.shared.WrappedIOException: void <init>(java.io.IOException)>($r5);

        throw $r6;

        catch java.io.IOException from label1 to label5 with label6;
    }

    public java.lang.String readWholeFileAsUTF8(java.lang.String)
    {
        com.hp.hpl.jena.shared.NotFoundException $r4;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r1, $r3, $r8;
        java.io.InputStream $r2;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: java.io.InputStream open(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r4 = new com.hp.hpl.jena.shared.NotFoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.shared.NotFoundException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: java.lang.String readWholeFileAsUTF8(java.io.InputStream)>($r2);

        return $r3;
    }

    public java.io.InputStream openNoMap(java.lang.String)
    {
        com.hp.hpl.jena.util.TypedStream $r2;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r1;
        java.io.InputStream $r3;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.TypedStream openNoMapOrNull(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.util.TypedStream: java.io.InputStream getInput()>();

        return $r3;
    }

    public com.hp.hpl.jena.util.TypedStream openNoMapOrNull(java.lang.String)
    {
        com.hp.hpl.jena.util.TypedStream $r6;
        com.hp.hpl.jena.util.FileManager r0;
        java.lang.String r5, $r13, $r16;
        boolean $z0, $z1;
        org.slf4j.Logger $r7, $r9;
        java.util.Iterator $r2;
        com.hp.hpl.jena.util.Locator r4;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14, $r15;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.util.FileManager: java.util.List fmHandlers>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.util.Locator) $r3;

        $r6 = interfaceinvoke r4.<com.hp.hpl.jena.util.Locator: com.hp.hpl.jena.util.TypedStream open(java.lang.String)>(r5);

        if $r6 == null goto label3;

        $r7 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r9 = <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r13 = interfaceinvoke r4.<com.hp.hpl.jena.util.Locator: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r16);

     label2:
        return $r6;

     label3:
        goto label1;

     label4:
        return null;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.hp.hpl.jena.util.FileManager r0, $r1;

        r0 := @this: com.hp.hpl.jena.util.FileManager;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        org.slf4j.Logger $r1;

        <com.hp.hpl.jena.util.FileManager: java.lang.String PATH_DELIMITER> = ";";

        $r0 = <java.io.File: java.lang.String separator>;

        <com.hp.hpl.jena.util.FileManager: java.lang.String filePathSeparator> = $r0;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/util/FileManager;");

        <com.hp.hpl.jena.util.FileManager: org.slf4j.Logger log> = $r1;

        <com.hp.hpl.jena.util.FileManager: com.hp.hpl.jena.util.FileManager fmInstance> = null;

        <com.hp.hpl.jena.util.FileManager: boolean logAllLookups> = 1;

        return;
    }
}
