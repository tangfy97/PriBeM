class org.waveprotocol.wave.client.editor.EditorImpl$1 extends java.lang.Object implements org.waveprotocol.wave.client.editor.EditorImpl$MiniBundle
{
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.extract.TypingExtractor getTypingExtractor()
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.TypingExtractor typing>;

        return $r2;
    }

    public boolean inEditMode()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isEditing()>();

        return $z0;
    }

    public org.waveprotocol.wave.client.editor.sugg.SuggestionsManager getSuggestionsManager()
    {
        org.waveprotocol.wave.client.editor.sugg.SuggestionsManager $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.sugg.SuggestionsManager suggestionsManager>;

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper getPassiveSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper access$000(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.util.CopyOnWriteSet getElementsWithDisplayModes()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.util.CopyOnWriteSet access$100(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.extract.RepairListener getRepairListener()
    {
        org.waveprotocol.wave.client.editor.extract.RepairListener $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.RepairListener access$200(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.client.editor.EditorContext getEditorContext()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        return $r1;
    }

    public boolean flush(java.lang.Runnable)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$300(org.waveprotocol.wave.client.editor.EditorImpl,java.lang.Runnable)>($r2, r1);

        return $z0;
    }

    public void onIncomingOp(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        org.waveprotocol.wave.model.document.operation.DocOp r1;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$1: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: void access$400(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.operation.DocOp)>($r2, r1);

        return;
    }
}
