public class ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset extends ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset implements ucar.nc2.dt.TypedDatasetFactoryIF
{
    private java.lang.String timeDimName;
    private java.lang.String timeVarName;
    private java.lang.String latVarName;
    private java.lang.String lonVarName;
    private java.lang.String elevVarName;

    public static boolean isValidFile(ucar.nc2.NetcdfFile)
    {
        java.util.StringTokenizer $r7;
        java.lang.String $r2, $r4, $r6, $r8, $r9;
        ucar.nc2.constants.FeatureType $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.nc2.Attribute $r1, $r5, r10;
        ucar.nc2.NetcdfFile r0;

        r0 := @parameter0: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("cdm_data_type");

        r10 = $r1;

        if $r1 != null goto label01;

        r10 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("cdm_datatype");

     label01:
        if r10 != null goto label02;

        return 0;

     label02:
        $z0 = virtualinvoke r10.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 != 0 goto label03;

        return 0;

     label03:
        $r2 = virtualinvoke r10.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        if $r2 != null goto label04;

        return 0;

     label04:
        $r3 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        $r4 = virtualinvoke $r3.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z1 != 0 goto label05;

        return 0;

     label05:
        $r5 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("Conventions");

        if $r5 != null goto label06;

        return 0;

     label06:
        $z2 = virtualinvoke $r5.<ucar.nc2.Attribute: boolean isString()>();

        if $z2 != 0 goto label07;

        return 0;

     label07:
        $r6 = virtualinvoke $r5.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $r7 = new java.util.StringTokenizer;

        specialinvoke $r7.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r6, ",");

     label08:
        $z3 = virtualinvoke $r7.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label10;

        $r8 = virtualinvoke $r7.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Unidata Observation Dataset v1.0");

        if $z4 == 0 goto label09;

        return 1;

     label09:
        goto label08;

     label10:
        return 0;
    }

    public boolean isMine(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dataset.NetcdfDataset r0;
        boolean $z0;
        ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset r1;

        r1 := @this: ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset;

        r0 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        $z0 = staticinvoke <ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: boolean isValidFile(ucar.nc2.NetcdfFile)>(r0);

        return $z0;
    }

    public ucar.nc2.dt.TypedDataset open(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.util.CancelTask, java.lang.StringBuilder) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r3;
        ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset $r0, r2;
        java.lang.StringBuilder r4;
        ucar.nc2.dataset.NetcdfDataset r1;

        r2 := @this: ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r3 := @parameter1: ucar.nc2.util.CancelTask;

        r4 := @parameter2: java.lang.StringBuilder;

        $r0 = new ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset;

        specialinvoke $r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        return $r0;
    }

    public ucar.nc2.constants.FeatureType getScientificDataType()
    {
        ucar.nc2.constants.FeatureType $r0;
        ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset r1;

        r1 := @this: ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset;

        $r0 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        return $r0;
    }

    public void <init>()
    {
        ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset;

        specialinvoke r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: void <init>()>();

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset) throws java.io.IOException
    {
        java.lang.IllegalStateException $r41, $r42, $r43, $r44;
        ucar.nc2.constants.AxisType $r2, $r4, $r6, $r8;
        ucar.nc2.Group $r26, $r29, $r32, $r35, $r38;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config $r25;
        ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset r0;
        ucar.nc2.Variable $r3, $r5, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r19, $r21, $r23, $r31, $r34, $r37, $r40;
        java.lang.String $r16, $r18, $r20, $r22, $r24, $r27, $r30, $r33, $r36, $r39;
        ucar.nc2.Dimension $r15, $r28;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        $r2 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        $r3 = staticinvoke <ucar.nc2.dt.point.UnidataObsDatasetHelper: ucar.nc2.Variable getCoordinate(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r1, $r2);

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable latVar> = $r3;

        $r4 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        $r5 = staticinvoke <ucar.nc2.dt.point.UnidataObsDatasetHelper: ucar.nc2.Variable getCoordinate(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r1, $r4);

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable lonVar> = $r5;

        $r6 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r7 = staticinvoke <ucar.nc2.dt.point.UnidataObsDatasetHelper: ucar.nc2.Variable getCoordinate(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r1, $r6);

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable timeVar> = $r7;

        $r8 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Height>;

        $r9 = staticinvoke <ucar.nc2.dt.point.UnidataObsDatasetHelper: ucar.nc2.Variable getCoordinate(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>(r1, $r8);

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable elevVar> = $r9;

        $r10 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        if $r10 != null goto label1;

        $r44 = new java.lang.IllegalStateException;

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing latitude variable");

        throw $r44;

     label1:
        $r11 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        if $r11 != null goto label2;

        $r43 = new java.lang.IllegalStateException;

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing longitude coordinate variable");

        throw $r43;

     label2:
        $r12 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        if $r12 != null goto label3;

        $r42 = new java.lang.IllegalStateException;

        specialinvoke $r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing time coordinate variable");

        throw $r42;

     label3:
        $r13 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        if $r13 != null goto label4;

        $r41 = new java.lang.IllegalStateException;

        specialinvoke $r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing height coordinate variable");

        throw $r41;

     label4:
        $r14 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r15 = virtualinvoke $r14.<ucar.nc2.Variable: ucar.nc2.Dimension getDimension(int)>(0);

        $r16 = virtualinvoke $r15.<ucar.nc2.Dimension: java.lang.String getName()>();

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String timeDimName> = $r16;

        $r17 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r18 = virtualinvoke $r17.<ucar.nc2.Variable: java.lang.String getName()>();

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String timeVarName> = $r18;

        $r19 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $r20 = virtualinvoke $r19.<ucar.nc2.Variable: java.lang.String getName()>();

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String latVarName> = $r20;

        $r21 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $r22 = virtualinvoke $r21.<ucar.nc2.Variable: java.lang.String getName()>();

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String lonVarName> = $r22;

        $r23 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r24 = virtualinvoke $r23.<ucar.nc2.Variable: java.lang.String getName()>();

        r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String elevVarName> = $r24;

        $r25 = new ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config;

        $r26 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r27 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String timeDimName>;

        $r28 = virtualinvoke $r26.<ucar.nc2.Group: ucar.nc2.Dimension findDimension(java.lang.String)>($r27);

        $r29 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r30 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String timeVarName>;

        $r31 = virtualinvoke $r29.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r30);

        $r32 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r33 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String latVarName>;

        $r34 = virtualinvoke $r32.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r33);

        $r35 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r36 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String lonVarName>;

        $r37 = virtualinvoke $r35.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r36);

        $r38 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r39 = r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: java.lang.String elevVarName>;

        $r40 = virtualinvoke $r38.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r39);

        specialinvoke $r25.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: void <init>(java.lang.String,ucar.nc2.Dimension,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable)>("1Hz data", $r28, $r31, $r34, $r37, $r40);

        virtualinvoke r0.<ucar.nc2.dt.trajectory.UnidataTrajectoryObsDataset: void setTrajectoryInfo(ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config)>($r25);

        return;
    }
}
