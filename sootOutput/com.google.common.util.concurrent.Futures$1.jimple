final class com.google.common.util.concurrent.Futures$1 extends java.lang.Object implements com.google.common.util.concurrent.UninterruptibleFuture
{
    final java.util.concurrent.Future val$future;

    void <init>(java.util.concurrent.Future)
    {
        java.util.concurrent.Future r1;
        com.google.common.util.concurrent.Futures$1 r0;

        r0 := @this: com.google.common.util.concurrent.Futures$1;

        r1 := @parameter0: java.util.concurrent.Future;

        r0.<com.google.common.util.concurrent.Futures$1: java.util.concurrent.Future val$future> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean cancel(boolean)
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.Futures$1 r0;
        boolean z0, $z1;

        r0 := @this: com.google.common.util.concurrent.Futures$1;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.google.common.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $z1 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean cancel(boolean)>(z0);

        return $z1;
    }

    public boolean isCancelled()
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.Futures$1 r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Futures$1;

        $r1 = r0.<com.google.common.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isCancelled()>();

        return $z0;
    }

    public boolean isDone()
    {
        java.util.concurrent.Future $r1;
        com.google.common.util.concurrent.Futures$1 r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Futures$1;

        $r1 = r0.<com.google.common.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.Future: boolean isDone()>();

        return $z0;
    }

    public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.util.concurrent.TimeoutException, java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r6;
        long $l0, l1, $l2, l3, $l4, $l5;
        java.util.concurrent.Future $r2;
        java.lang.Thread $r5, $r7;
        boolean z0, z1, z2;
        com.google.common.util.concurrent.Futures$1 r1;
        java.util.concurrent.TimeUnit r0, $r3;
        java.lang.InterruptedException $r8;
        java.lang.Object $r4;

        r1 := @this: com.google.common.util.concurrent.Futures$1;

        l1 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        z0 = 0;

        z2 = 0;

        z1 = 0;

     label1:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(l1);

        l3 = $l0 + $l2;

     label2:
        $r2 = r1.<com.google.common.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        $l5 = l3 - $l4;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r4 = interfaceinvoke $r2.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>($l5, $r3);

     label3:
        if z2 == 0 goto label4;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label4:
        return $r4;

     label5:
        $r8 := @caughtexception;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label2;

     label6:
        $r6 := @caughtexception;

     label7:
        if z1 == 0 goto label8;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label8:
        throw $r6;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public java.lang.Object get() throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r4;
        com.google.common.util.concurrent.Futures$1 r0;
        java.util.concurrent.Future $r1;
        java.lang.InterruptedException $r6;
        java.lang.Thread $r3, $r5;
        java.lang.Object $r2;
        boolean z0, z1, z2;

        r0 := @this: com.google.common.util.concurrent.Futures$1;

        z0 = 0;

        z2 = 0;

        z1 = 0;

     label1:
        $r1 = r0.<com.google.common.util.concurrent.Futures$1: java.util.concurrent.Future val$future>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if z2 == 0 goto label3;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label3:
        return $r2;

     label4:
        $r6 := @caughtexception;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label1;

     label5:
        $r4 := @caughtexception;

     label6:
        if z1 == 0 goto label7;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label7:
        throw $r4;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }
}
