public class org.bouncycastle.crypto.engines.ElGamalEngine extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private org.bouncycastle.crypto.params.ElGamalKeyParameters key;
    private java.security.SecureRandom random;
    private boolean forEncryption;
    private int bitSize;
    private static final java.math.BigInteger ZERO;
    private static final java.math.BigInteger ONE;
    private static final java.math.BigInteger TWO;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.ElGamalEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.ElGamalEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        java.security.SecureRandom $r3, $r13;
        org.bouncycastle.crypto.params.ElGamalKeyParameters $r2, $r4, $r7, $r9, $r12;
        org.bouncycastle.crypto.engines.ElGamalEngine r1;
        org.bouncycastle.crypto.params.ParametersWithRandom r14;
        int $i0;
        java.math.BigInteger $r6;
        org.bouncycastle.crypto.CipherParameters r0, $r11;
        boolean $z0, z1, $z2, $z3;
        java.lang.IllegalArgumentException $r8, $r10;
        org.bouncycastle.crypto.params.ElGamalParameters $r5;

        r1 := @this: org.bouncycastle.crypto.engines.ElGamalEngine;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r14 = (org.bouncycastle.crypto.params.ParametersWithRandom) r0;

        $r11 = virtualinvoke r14.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r12 = (org.bouncycastle.crypto.params.ElGamalKeyParameters) $r11;

        r1.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key> = $r12;

        $r13 = virtualinvoke r14.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r1.<org.bouncycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random> = $r13;

        goto label2;

     label1:
        $r2 = (org.bouncycastle.crypto.params.ElGamalKeyParameters) r0;

        r1.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key> = $r2;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r1.<org.bouncycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random> = $r3;

     label2:
        r1.<org.bouncycastle.crypto.engines.ElGamalEngine: boolean forEncryption> = z1;

        $r4 = r1.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.ElGamalKeyParameters: org.bouncycastle.crypto.params.ElGamalParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.ElGamalParameters: java.math.BigInteger getP()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        r1.<org.bouncycastle.crypto.engines.ElGamalEngine: int bitSize> = $i0;

        if z1 == 0 goto label3;

        $r9 = r1.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        $z3 = $r9 instanceof org.bouncycastle.crypto.params.ElGamalPublicKeyParameters;

        if $z3 != 0 goto label4;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ElGamalPublicKeyParameters are required for encryption.");

        throw $r10;

     label3:
        $r7 = r1.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        $z2 = $r7 instanceof org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters;

        if $z2 != 0 goto label4;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ElGamalPrivateKeyParameters are required for decryption.");

        throw $r8;

     label4:
        return;
    }

    public int getInputBlockSize()
    {
        org.bouncycastle.crypto.engines.ElGamalEngine r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.ElGamalEngine;

        $z0 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i4 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i5 = $i4 - 1;

        $i6 = $i5 / 8;

        return $i6;

     label1:
        $i0 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        $i3 = 2 * $i2;

        return $i3;
    }

    public int getOutputBlockSize()
    {
        org.bouncycastle.crypto.engines.ElGamalEngine r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.engines.ElGamalEngine;

        $z0 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i3 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i4 = $i3 + 7;

        $i5 = $i4 / 8;

        $i6 = 2 * $i5;

        return $i6;

     label1:
        $i0 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i1 = $i0 - 1;

        $i2 = $i1 / 8;

        return $i2;
    }

    public byte[] processBlock(byte[], int, int)
    {
        byte[] r6, $r24, $r25, r26, $r28, $r39, r42, r43, r45;
        java.security.SecureRandom $r10, $r13;
        org.bouncycastle.crypto.engines.ElGamalEngine r0;
        org.bouncycastle.crypto.DataLengthException $r27, $r40;
        java.math.BigInteger $r4, $r7, $r9, $r11, $r12, $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r23, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r38, r47;
        org.bouncycastle.crypto.params.ElGamalPublicKeyParameters r46;
        org.bouncycastle.crypto.params.ElGamalKeyParameters $r1, $r2, $r5, $r8, $r16, $r31;
        org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters r44;
        org.bouncycastle.crypto.params.ElGamalParameters $r3, $r17;
        java.lang.IllegalStateException $r41;
        boolean $z0, $z1, $z2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45;

        r0 := @this: org.bouncycastle.crypto.engines.ElGamalEngine;

        r6 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        if $r1 != null goto label01;

        $r41 = new java.lang.IllegalStateException;

        specialinvoke $r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ElGamal engine not initialised");

        throw $r41;

     label01:
        $z0 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: boolean forEncryption>;

        if $z0 == 0 goto label02;

        $i42 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int bitSize>;

        $i43 = $i42 - 1;

        $i44 = $i43 + 7;

        $i45 = $i44 / 8;

        goto label03;

     label02:
        $i45 = virtualinvoke r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int getInputBlockSize()>();

     label03:
        if i0 <= $i45 goto label04;

        $r40 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r40.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ElGamal cipher.\n");

        throw $r40;

     label04:
        $r2 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ElGamalKeyParameters: org.bouncycastle.crypto.params.ElGamalParameters getParameters()>();

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.ElGamalParameters: java.math.BigInteger getP()>();

        $r5 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        $z1 = $r5 instanceof org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters;

        if $z1 == 0 goto label05;

        $i36 = i0 / 2;

        r42 = newarray (byte)[$i36];

        $i37 = i0 / 2;

        r43 = newarray (byte)[$i37];

        $i38 = lengthof r42;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i1, r42, 0, $i38);

        $i39 = lengthof r42;

        $i41 = i1 + $i39;

        $i40 = lengthof r43;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i41, r43, 0, $i40);

        $r29 = new java.math.BigInteger;

        specialinvoke $r29.<java.math.BigInteger: void <init>(int,byte[])>(1, r42);

        $r30 = new java.math.BigInteger;

        specialinvoke $r30.<java.math.BigInteger: void <init>(int,byte[])>(1, r43);

        $r31 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        r44 = (org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters) $r31;

        $r32 = <org.bouncycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ONE>;

        $r33 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r32);

        $r34 = virtualinvoke r44.<org.bouncycastle.crypto.params.ElGamalPrivateKeyParameters: java.math.BigInteger getX()>();

        $r35 = virtualinvoke $r33.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r34);

        $r36 = virtualinvoke $r29.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r35, $r4);

        $r37 = virtualinvoke $r36.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r30);

        $r38 = virtualinvoke $r37.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $r39 = staticinvoke <org.bouncycastle.util.BigIntegers: byte[] asUnsignedByteArray(java.math.BigInteger)>($r38);

        return $r39;

     label05:
        if i1 != 0 goto label06;

        $i35 = lengthof r6;

        if i0 == $i35 goto label07;

     label06:
        $r28 = newarray (byte)[i0];

        r45 = $r28;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, i1, $r28, 0, i0);

        goto label08;

     label07:
        r45 = r6;

     label08:
        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, r45);

        $i2 = virtualinvoke $r7.<java.math.BigInteger: int bitLength()>();

        $i3 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        if $i2 < $i3 goto label09;

        $r27 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r27.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for ElGamal cipher.\n");

        throw $r27;

     label09:
        $r8 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        r46 = (org.bouncycastle.crypto.params.ElGamalPublicKeyParameters) $r8;

        $i4 = virtualinvoke $r4.<java.math.BigInteger: int bitLength()>();

        $r9 = new java.math.BigInteger;

        $r10 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random>;

        specialinvoke $r9.<java.math.BigInteger: void <init>(int,java.util.Random)>($i4, $r10);

        r47 = $r9;

     label10:
        $r11 = <org.bouncycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ZERO>;

        $z2 = virtualinvoke r47.<java.math.BigInteger: boolean equals(java.lang.Object)>($r11);

        if $z2 != 0 goto label11;

        $r14 = <org.bouncycastle.crypto.engines.ElGamalEngine: java.math.BigInteger TWO>;

        $r15 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r14);

        $i5 = virtualinvoke r47.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r15);

        if $i5 <= 0 goto label12;

     label11:
        $r12 = new java.math.BigInteger;

        $r13 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: java.security.SecureRandom random>;

        specialinvoke $r12.<java.math.BigInteger: void <init>(int,java.util.Random)>($i4, $r13);

        r47 = $r12;

        goto label10;

     label12:
        $r16 = r0.<org.bouncycastle.crypto.engines.ElGamalEngine: org.bouncycastle.crypto.params.ElGamalKeyParameters key>;

        $r17 = virtualinvoke $r16.<org.bouncycastle.crypto.params.ElGamalKeyParameters: org.bouncycastle.crypto.params.ElGamalParameters getParameters()>();

        $r18 = virtualinvoke $r17.<org.bouncycastle.crypto.params.ElGamalParameters: java.math.BigInteger getG()>();

        $r19 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r47, $r4);

        $r20 = virtualinvoke r46.<org.bouncycastle.crypto.params.ElGamalPublicKeyParameters: java.math.BigInteger getY()>();

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>(r47, $r4);

        $r22 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r21);

        $r23 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r4);

        $r24 = virtualinvoke $r19.<java.math.BigInteger: byte[] toByteArray()>();

        $r25 = virtualinvoke $r23.<java.math.BigInteger: byte[] toByteArray()>();

        $i6 = virtualinvoke r0.<org.bouncycastle.crypto.engines.ElGamalEngine: int getOutputBlockSize()>();

        r26 = newarray (byte)[$i6];

        $i9 = lengthof $r24;

        $i7 = lengthof r26;

        $i8 = $i7 / 2;

        if $i9 <= $i8 goto label13;

        $i28 = lengthof r26;

        $i31 = $i28 / 2;

        $i29 = lengthof $r24;

        $i30 = $i29 - 1;

        $i34 = $i31 - $i30;

        $i32 = lengthof $r24;

        $i33 = $i32 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, 1, r26, $i34, $i33);

        goto label14;

     label13:
        $i10 = lengthof r26;

        $i12 = $i10 / 2;

        $i11 = lengthof $r24;

        $i14 = $i12 - $i11;

        $i13 = lengthof $r24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, 0, r26, $i14, $i13);

     label14:
        $i17 = lengthof $r25;

        $i15 = lengthof r26;

        $i16 = $i15 / 2;

        if $i17 <= $i16 goto label15;

        $i24 = lengthof r26;

        $i22 = lengthof $r25;

        $i23 = $i22 - 1;

        $i27 = $i24 - $i23;

        $i25 = lengthof $r25;

        $i26 = $i25 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 1, r26, $i27, $i26);

        goto label16;

     label15:
        $i19 = lengthof r26;

        $i18 = lengthof $r25;

        $i21 = $i19 - $i18;

        $i20 = lengthof $r25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, r26, $i21, $i20);

     label16:
        return r26;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0, $r1, $r2;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.bouncycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ZERO> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.engines.ElGamalEngine: java.math.BigInteger ONE> = $r1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.engines.ElGamalEngine: java.math.BigInteger TWO> = $r2;

        return;
    }
}
