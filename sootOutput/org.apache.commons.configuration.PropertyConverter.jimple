public final class org.apache.commons.configuration.PropertyConverter extends java.lang.Object
{
    static final char LIST_ESC_CHAR;
    static final java.lang.String LIST_ESCAPE;
    private static final java.lang.String HEX_PREFIX;
    private static final int HEX_RADIX;
    private static final float JAVA_VERSION_1_5;
    private static final java.lang.Class[] CONSTR_ARGS;
    private static final java.lang.String INTERNET_ADDRESS_CLASSNAME;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Double;
    static java.lang.Class class$java$math$BigInteger;
    static java.lang.Class class$java$math$BigDecimal;
    static java.lang.Class class$java$util$Date;
    static java.lang.Class class$java$util$Calendar;
    static java.lang.Class class$java$net$URL;
    static java.lang.Class class$java$util$Locale;
    static java.lang.Class class$java$awt$Color;
    static java.lang.Class class$java$net$InetAddress;
    static java.lang.Class class$java$lang$Class;

    private void <init>()
    {
        org.apache.commons.configuration.PropertyConverter r0;

        r0 := @this: org.apache.commons.configuration.PropertyConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Object 'to'(java.lang.Class, java.lang.Object, java.lang.Object[]) throws org.apache.commons.configuration.ConversionException
    {
        java.awt.Color $r50;
        java.lang.Float $r19;
        java.lang.Integer $r7;
        java.net.InetAddress $r48;
        java.math.BigDecimal $r39;
        java.lang.Long $r10;
        java.math.BigInteger $r40;
        java.lang.Object[] r54;
        java.lang.Double $r22;
        java.util.Calendar $r57;
        java.lang.StringBuffer $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r36, $r37;
        java.lang.String $r35, $r38, $r46, $r56, $r59;
        java.net.URL $r53;
        java.util.Date $r60;
        java.lang.Short $r16;
        java.util.Locale $r52;
        java.lang.Byte $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        org.apache.commons.configuration.ConversionException $r26;
        java.lang.Boolean $r3;
        java.lang.Class $r0, r1, $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r25, $r31, $r41, $r42, $r43, $r44, $r45, $r47, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76;
        java.lang.Object r2, $r49, $r51, $r55, $r58;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        r54 := @parameter2: java.lang.Object[];

        $r0 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Boolean>;

        if $r0 != null goto label01;

        $r61 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Boolean> = $r61;

        goto label02;

     label01:
        $r61 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Boolean>;

     label02:
        $z0 = virtualinvoke $r61.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label03;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label04;

     label03:
        $r3 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Boolean toBoolean(java.lang.Object)>(r2);

        return $r3;

     label04:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Number>;

        if $r5 != null goto label05;

        $r62 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Number> = $r62;

        goto label06;

     label05:
        $r62 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Number>;

     label06:
        $z2 = virtualinvoke $r62.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 != 0 goto label07;

        $z17 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z17 == 0 goto label37;

     label07:
        $r6 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Integer>;

        if $r6 != null goto label08;

        $r63 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Integer> = $r63;

        goto label09;

     label08:
        $r63 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Integer>;

     label09:
        $z3 = virtualinvoke $r63.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label10;

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        $z4 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label11;

     label10:
        $r7 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Integer toInteger(java.lang.Object)>(r2);

        return $r7;

     label11:
        $r9 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Long>;

        if $r9 != null goto label12;

        $r64 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Long> = $r64;

        goto label13;

     label12:
        $r64 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Long>;

     label13:
        $z5 = virtualinvoke $r64.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z5 != 0 goto label14;

        $r11 = <java.lang.Long: java.lang.Class TYPE>;

        $z6 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label15;

     label14:
        $r10 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Long toLong(java.lang.Object)>(r2);

        return $r10;

     label15:
        $r12 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Byte>;

        if $r12 != null goto label16;

        $r65 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Byte> = $r65;

        goto label17;

     label16:
        $r65 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Byte>;

     label17:
        $z7 = virtualinvoke $r65.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z7 != 0 goto label18;

        $r14 = <java.lang.Byte: java.lang.Class TYPE>;

        $z8 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label19;

     label18:
        $r13 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Byte toByte(java.lang.Object)>(r2);

        return $r13;

     label19:
        $r15 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Short>;

        if $r15 != null goto label20;

        $r66 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Short> = $r66;

        goto label21;

     label20:
        $r66 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Short>;

     label21:
        $z9 = virtualinvoke $r66.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z9 != 0 goto label22;

        $r17 = <java.lang.Short: java.lang.Class TYPE>;

        $z10 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z10 == 0 goto label23;

     label22:
        $r16 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Short toShort(java.lang.Object)>(r2);

        return $r16;

     label23:
        $r18 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Float>;

        if $r18 != null goto label24;

        $r67 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Float> = $r67;

        goto label25;

     label24:
        $r67 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Float>;

     label25:
        $z11 = virtualinvoke $r67.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z11 != 0 goto label26;

        $r20 = <java.lang.Float: java.lang.Class TYPE>;

        $z12 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z12 == 0 goto label27;

     label26:
        $r19 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Float toFloat(java.lang.Object)>(r2);

        return $r19;

     label27:
        $r21 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Double>;

        if $r21 != null goto label28;

        $r68 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Double> = $r68;

        goto label29;

     label28:
        $r68 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Double>;

     label29:
        $z13 = virtualinvoke $r68.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z13 != 0 goto label30;

        $r23 = <java.lang.Double: java.lang.Class TYPE>;

        $z14 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z14 == 0 goto label31;

     label30:
        $r22 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Double toDouble(java.lang.Object)>(r2);

        return $r22;

     label31:
        $r24 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigInteger>;

        if $r24 != null goto label32;

        $r69 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.math.BigInteger");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigInteger> = $r69;

        goto label33;

     label32:
        $r69 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigInteger>;

     label33:
        $z15 = virtualinvoke $r69.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z15 == 0 goto label34;

        $r40 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.math.BigInteger toBigInteger(java.lang.Object)>(r2);

        return $r40;

     label34:
        $r25 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigDecimal>;

        if $r25 != null goto label35;

        $r70 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.math.BigDecimal");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigDecimal> = $r70;

        goto label36;

     label35:
        $r70 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigDecimal>;

     label36:
        $z16 = virtualinvoke $r70.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z16 == 0 goto label57;

        $r39 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.math.BigDecimal toBigDecimal(java.lang.Object)>(r2);

        return $r39;

     label37:
        $r41 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Date>;

        if $r41 != null goto label38;

        $r71 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.util.Date");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Date> = $r71;

        goto label39;

     label38:
        $r71 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Date>;

     label39:
        $z18 = virtualinvoke $r71.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z18 == 0 goto label40;

        $r58 = r54[0];

        $r59 = (java.lang.String) $r58;

        $r60 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Date toDate(java.lang.Object,java.lang.String)>(r2, $r59);

        return $r60;

     label40:
        $r42 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Calendar>;

        if $r42 != null goto label41;

        $r72 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.util.Calendar");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Calendar> = $r72;

        goto label42;

     label41:
        $r72 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Calendar>;

     label42:
        $z19 = virtualinvoke $r72.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z19 == 0 goto label43;

        $r55 = r54[0];

        $r56 = (java.lang.String) $r55;

        $r57 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Calendar toCalendar(java.lang.Object,java.lang.String)>(r2, $r56);

        return $r57;

     label43:
        $r43 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$net$URL>;

        if $r43 != null goto label44;

        $r73 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.net.URL");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$net$URL> = $r73;

        goto label45;

     label44:
        $r73 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$net$URL>;

     label45:
        $z20 = virtualinvoke $r73.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z20 == 0 goto label46;

        $r53 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.net.URL toURL(java.lang.Object)>(r2);

        return $r53;

     label46:
        $r44 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Locale>;

        if $r44 != null goto label47;

        $r74 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.util.Locale");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Locale> = $r74;

        goto label48;

     label47:
        $r74 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$util$Locale>;

     label48:
        $z21 = virtualinvoke $r74.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z21 == 0 goto label49;

        $r52 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Locale toLocale(java.lang.Object)>(r2);

        return $r52;

     label49:
        $z22 = staticinvoke <org.apache.commons.configuration.PropertyConverter: boolean isEnum(java.lang.Class)>(r1);

        if $z22 == 0 goto label50;

        $r51 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Object toEnum(java.lang.Object,java.lang.Class)>(r2, r1);

        return $r51;

     label50:
        $r45 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$awt$Color>;

        if $r45 != null goto label51;

        $r75 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$awt$Color> = $r75;

        goto label52;

     label51:
        $r75 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$awt$Color>;

     label52:
        $z23 = virtualinvoke $r75.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z23 == 0 goto label53;

        $r50 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.awt.Color toColor(java.lang.Object)>(r2);

        return $r50;

     label53:
        $r46 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z24 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>("javax.mail.internet.InternetAddress");

        if $z24 == 0 goto label54;

        $r49 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Object toInternetAddress(java.lang.Object)>(r2);

        return $r49;

     label54:
        $r47 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$net$InetAddress>;

        if $r47 != null goto label55;

        $r76 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.net.InetAddress");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$net$InetAddress> = $r76;

        goto label56;

     label55:
        $r76 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$net$InetAddress>;

     label56:
        $z25 = virtualinvoke $r76.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z25 == 0 goto label57;

        $r48 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.net.InetAddress toInetAddress(java.lang.Object)>(r2);

        return $r48;

     label57:
        $r26 = new org.apache.commons.configuration.ConversionException;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (");

        $r31 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a ");

        $r35 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" object");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r38);

        throw $r26;
    }

    public static java.lang.Boolean toBoolean(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        org.apache.commons.configuration.ConversionException $r1, $r9;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r10, $r11, $r12, $r13;
        java.lang.Boolean $r8, $r15;
        java.lang.String $r6, $r7, $r14;
        boolean $z0, $z1;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r15 = (java.lang.Boolean) r0;

        return $r15;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r7 = (java.lang.String) r0;

        $r8 = staticinvoke <org.apache.commons.lang.BooleanUtils: java.lang.Boolean toBooleanObject(java.lang.String)>($r7);

        if $r8 != null goto label2;

        $r9 = new org.apache.commons.configuration.ConversionException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Boolean object");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label2:
        return $r8;

     label3:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Boolean object");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static java.lang.Byte toByte(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        byte $b0;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        java.lang.Byte $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Byte>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Byte> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Byte>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.lang.Byte;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.Byte) $r2;

        return $r4;

     label3:
        $r3 = new java.lang.Byte;

        $b0 = virtualinvoke $r2.<java.lang.Number: byte byteValue()>();

        specialinvoke $r3.<java.lang.Byte: void <init>(byte)>($b0);

        return $r3;
    }

    public static java.lang.Short toShort(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        short $s0;
        java.lang.Short $r3, $r4;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Short>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Short> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Short>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.lang.Short;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.Short) $r2;

        return $r4;

     label3:
        $r3 = new java.lang.Short;

        $s0 = virtualinvoke $r2.<java.lang.Number: short shortValue()>();

        specialinvoke $r3.<java.lang.Short: void <init>(short)>($s0);

        return $r3;
    }

    public static java.lang.Integer toInteger(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.lang.Integer $r3, $r4;
        int $i0;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Integer>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Integer> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Integer>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.lang.Integer;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.Integer) $r2;

        return $r4;

     label3:
        $r3 = new java.lang.Integer;

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        return $r3;
    }

    public static java.lang.Long toLong(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        long $l0;
        java.lang.Long $r3, $r4;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Long>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Long> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Long>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.lang.Long;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.Long) $r2;

        return $r4;

     label3:
        $r3 = new java.lang.Long;

        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        specialinvoke $r3.<java.lang.Long: void <init>(long)>($l0);

        return $r3;
    }

    public static java.lang.Float toFloat(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.lang.Float $r3, $r4;
        float $f0;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Float>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Float> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Float>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.Float) $r2;

        return $r4;

     label3:
        $r3 = new java.lang.Float;

        $f0 = virtualinvoke $r2.<java.lang.Number: float floatValue()>();

        specialinvoke $r3.<java.lang.Float: void <init>(float)>($f0);

        return $r3;
    }

    public static java.lang.Double toDouble(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.lang.Double $r3, $r4;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        boolean $z0;
        double $d0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Double>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Double> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Double>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.lang.Double;

        if $z0 == 0 goto label3;

        $r4 = (java.lang.Double) $r2;

        return $r4;

     label3:
        $r3 = new java.lang.Double;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        specialinvoke $r3.<java.lang.Double: void <init>(double)>($d0);

        return $r3;
    }

    public static java.math.BigInteger toBigInteger(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        long $l0;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.math.BigInteger $r3, $r4;
        java.lang.Number $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigInteger>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.math.BigInteger");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigInteger> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigInteger>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.math.BigInteger;

        if $z0 == 0 goto label3;

        $r4 = (java.math.BigInteger) $r2;

        return $r4;

     label3:
        $l0 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r3;
    }

    public static java.math.BigDecimal toBigDecimal(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.math.BigDecimal $r3, $r4;
        java.lang.Object r0;
        java.lang.Class $r1, $r5;
        java.lang.Number $r2;
        boolean $z0;
        double $d0;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigDecimal>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.math.BigDecimal");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigDecimal> = $r5;

        goto label2;

     label1:
        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$math$BigDecimal>;

     label2:
        $r2 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Number toNumber(java.lang.Object,java.lang.Class)>(r0, $r5);

        $z0 = $r2 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label3;

        $r4 = (java.math.BigDecimal) $r2;

        return $r4;

     label3:
        $r3 = new java.math.BigDecimal;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        specialinvoke $r3.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r3;
    }

    static java.lang.Number toNumber(java.lang.Object, java.lang.Class) throws org.apache.commons.configuration.ConversionException
    {
        java.math.BigInteger $r8;
        boolean $z0, $z1;
        java.lang.Exception $r12;
        java.lang.reflect.InvocationTargetException $r21;
        java.lang.Throwable $r30;
        java.lang.Object[] $r5;
        java.lang.reflect.Constructor $r4;
        org.apache.commons.configuration.ConversionException $r13, $r22, $r32;
        java.lang.StringBuffer $r14, $r15, $r16, $r17, $r19, $r23, $r24, $r25, $r26, $r28, $r33, $r34, $r35, $r36, $r38, $r39;
        int $i0;
        java.lang.String $r1, $r9, $r10, $r18, $r20, $r27, $r29, $r37, $r40;
        java.lang.Number $r7, $r11;
        java.lang.Class[] $r3;
        java.lang.NumberFormatException $r31;
        java.lang.Object r0, $r6;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r11 = (java.lang.Number) r0;

        return $r11;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z1 == 0 goto label5;

     label2:
        $r8 = new java.math.BigInteger;

        $r9 = "0x";

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $r10 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        specialinvoke $r8.<java.math.BigInteger: void <init>(java.lang.String,int)>($r10, 16);

     label3:
        return $r8;

     label4:
        $r31 := @caughtexception;

        $r32 = new org.apache.commons.configuration.ConversionException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not convert ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r37 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("! Invalid hex number.");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r40, $r31);

        throw $r32;

     label5:
        $r3 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class[] CONSTR_ARGS>;

        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r7 = (java.lang.Number) $r6;

     label6:
        return $r7;

     label7:
        $r21 := @caughtexception;

        $r22 = new org.apache.commons.configuration.ConversionException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not convert ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r27 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        $r30 = virtualinvoke $r21.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r22.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r30);

        throw $r22;

     label8:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.configuration.ConversionException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Conversion error when trying to convert ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r18 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r12);

        throw $r13;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
        catch java.lang.Exception from label5 to label6 with label8;
    }

    public static java.net.URL toURL(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.net.URL $r7, $r9;
        org.apache.commons.configuration.ConversionException $r1, $r11;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r12, $r13, $r14, $r15;
        java.lang.String $r6, $r8, $r16;
        boolean $z0, $z1;
        java.net.MalformedURLException $r10;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.net.URL;

        if $z0 == 0 goto label1;

        $r9 = (java.net.URL) r0;

        return $r9;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label5;

     label2:
        $r7 = new java.net.URL;

        $r8 = (java.lang.String) r0;

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r8);

     label3:
        return $r7;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.apache.commons.configuration.ConversionException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to an URL");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

     label5:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to an URL");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;

        catch java.net.MalformedURLException from label2 to label3 with label4;
    }

    public static java.util.Locale toLocale(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.util.Locale $r18, $r24;
        boolean $z0, $z1;
        java.util.List $r8;
        org.apache.commons.configuration.ConversionException $r1, $r9;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r7, $r14, $r16, $r19, $r20, $r22, $r23;
        java.lang.Object r0, $r15, $r17, $r21, $r25, $r26;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Locale;

        if $z0 == 0 goto label1;

        $r24 = (java.util.Locale) r0;

        return $r24;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label8;

        $r7 = (java.lang.String) r0;

        $r8 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.List split(java.lang.String,char)>($r7, 95);

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i0 < 1 goto label7;

        $r15 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (java.lang.String) $r15;

        $i1 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i1 == 2 goto label2;

        $r21 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (java.lang.String) $r21;

        $i2 = virtualinvoke $r22.<java.lang.String: int length()>();

        if $i2 != 0 goto label7;

     label2:
        $r17 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (java.lang.String) $r17;

        if $i0 < 2 goto label3;

        $r25 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(1);

        goto label4;

     label3:
        $r25 = "";

     label4:
        $r20 = (java.lang.String) $r25;

        if $i0 < 3 goto label5;

        $r26 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(2);

        goto label6;

     label5:
        $r26 = "";

     label6:
        $r19 = (java.lang.String) $r26;

        $r18 = new java.util.Locale;

        specialinvoke $r18.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r23, $r20, $r19);

        return $r18;

     label7:
        $r9 = new org.apache.commons.configuration.ConversionException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Locale");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label8:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Locale");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static java.util.List split(java.lang.String, char, boolean)
    {
        java.util.ArrayList $r10, $r11;
        java.lang.StringBuffer r7, $r12, $r13;
        int $i0, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r0, $r3, $r4, r8, r9;
        boolean z0, z1, z2, z3;
        char $c1, c2;

        r0 := @parameter0: java.lang.String;

        c2 := @parameter1: char;

        z0 := @parameter2: boolean;

        if r0 != null goto label01;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        return $r10;

     label01:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        r7 = $r12;

        i3 = 0;

        z1 = 0;

        z3 = 0;

        z2 = 0;

     label02:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label09;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if z3 == 0 goto label04;

        $i4 = (int) $c1;

        $i5 = (int) c2;

        if $i4 == $i5 goto label03;

        $i6 = (int) $c1;

        if $i6 == 92 goto label03;

        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label03:
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        z1 = 0;

        z3 = 0;

        z2 = 0;

        goto label08;

     label04:
        $i7 = (int) $c1;

        $i8 = (int) c2;

        if $i7 != $i8 goto label06;

        $r4 = virtualinvoke r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r8 = $r4;

        if z0 == 0 goto label05;

        r8 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

     label05:
        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r8);

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        r7 = $r13;

        goto label08;

     label06:
        $i9 = (int) $c1;

        if $i9 != 92 goto label07;

        z1 = 1;

        z3 = 1;

        z2 = 1;

        goto label08;

     label07:
        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label08:
        i3 = i3 + 1;

        goto label02;

     label09:
        if z2 == 0 goto label10;

        virtualinvoke r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label10:
        $r3 = virtualinvoke r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r9 = $r3;

        if z0 == 0 goto label11;

        r9 = virtualinvoke $r3.<java.lang.String: java.lang.String trim()>();

     label11:
        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r9);

        return $r11;
    }

    public static java.util.List split(java.lang.String, char)
    {
        char c0;
        java.util.List $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r1 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.List split(java.lang.String,char,boolean)>(r0, c0, 1);

        return $r1;
    }

    public static java.lang.String escapeDelimiters(java.lang.String, char)
    {
        java.lang.StringBuffer $r1, $r4, $r6, $r10, $r12, $r13;
        java.lang.String r0, $r2, $r3, $r5, $r7, $r8, $r9, $r11, $r14, $r15;
        char c0;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r2 = <org.apache.commons.configuration.PropertyConverter: java.lang.String LIST_ESCAPE>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = <org.apache.commons.configuration.PropertyConverter: java.lang.String LIST_ESCAPE>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = <org.apache.commons.configuration.PropertyConverter: java.lang.String LIST_ESCAPE>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(r0, $r2, $r7);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = <org.apache.commons.configuration.PropertyConverter: java.lang.String LIST_ESCAPE>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r8, $r9, $r14);

        return $r15;
    }

    public static java.awt.Color toColor(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.awt.Color $r11, $r12, $r21;
        int[] r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r22;
        org.apache.commons.configuration.ConversionException $r1, $r15, $r23;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r16, $r17, $r18, $r19, $r24, $r25, $r26, $r27;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, i15;
        java.lang.String $r6, $r7, $r8, $r9, $r13, $r14, $r20, $r28, r29;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.awt.Color;

        if $z0 == 0 goto label01;

        $r21 = (java.awt.Color) r0;

        return $r21;

     label01:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label10;

        $r7 = (java.lang.String) r0;

        $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>($r7);

        if $z2 != 0 goto label10;

        $r8 = (java.lang.String) r0;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        r29 = $r9;

        r10 = newarray (int)[3];

        $i0 = lengthof r10;

        i1 = $i0 * 2;

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i2 >= i1 goto label02;

        $r15 = new org.apache.commons.configuration.ConversionException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Color");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label02:
        $z3 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z3 == 0 goto label03;

        r29 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int)>(1);

     label03:
        i13 = 0;

     label04:
        $i14 = lengthof r10;

        if i13 >= $i14 goto label05;

        $i11 = 2 * i13;

        $i9 = 2 * i13;

        $i10 = $i9 + 2;

        $r14 = virtualinvoke r29.<java.lang.String: java.lang.String substring(int,int)>($i11, $i10);

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r14, 16);

        r10[i13] = $i12;

        i13 = i13 + 1;

        goto label04;

     label05:
        $i3 = virtualinvoke r29.<java.lang.String: int length()>();

        $i4 = i1 + 2;

        if $i3 < $i4 goto label06;

        $i8 = i1 + 2;

        $r13 = virtualinvoke r29.<java.lang.String: java.lang.String substring(int,int)>(i1, $i8);

        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r13, 16);

        goto label07;

     label06:
        $r11 = <java.awt.Color: java.awt.Color black>;

        i15 = virtualinvoke $r11.<java.awt.Color: int getAlpha()>();

     label07:
        $r12 = new java.awt.Color;

        $i7 = r10[0];

        $i6 = r10[1];

        $i5 = r10[2];

        specialinvoke $r12.<java.awt.Color: void <init>(int,int,int,int)>($i7, $i6, $i5, i15);

     label08:
        return $r12;

     label09:
        $r22 := @caughtexception;

        $r23 = new org.apache.commons.configuration.ConversionException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Color");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r22);

        throw $r23;

     label10:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Color");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;

        catch java.lang.Exception from label03 to label08 with label09;
    }

    static java.net.InetAddress toInetAddress(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.net.InetAddress $r8, $r9;
        org.apache.commons.configuration.ConversionException $r1, $r11;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r12, $r13, $r14, $r15;
        java.lang.String $r6, $r7, $r16;
        boolean $z0, $z1;
        java.net.UnknownHostException $r10;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.net.InetAddress;

        if $z0 == 0 goto label1;

        $r9 = (java.net.InetAddress) r0;

        return $r9;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label5;

     label2:
        $r7 = (java.lang.String) r0;

        $r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r7);

     label3:
        return $r8;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.apache.commons.configuration.ConversionException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a InetAddress");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

     label5:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a InetAddress");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;

        catch java.net.UnknownHostException from label2 to label3 with label4;
    }

    static java.lang.Object toInternetAddress(java.lang.Object) throws org.apache.commons.configuration.ConversionException
    {
        java.lang.Object[] $r13;
        java.lang.reflect.Constructor $r12;
        org.apache.commons.configuration.ConversionException $r3, $r16;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r17, $r18, $r19, $r20;
        java.lang.String $r2, $r8, $r21;
        boolean $z0, $z1;
        java.lang.Class[] $r10;
        java.lang.Exception $r15;
        java.lang.Object r0, $r14;
        java.lang.Class $r1, $r9, $r11, $r22;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("javax.mail.internet.InternetAddress");

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label7;

     label2:
        $r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.mail.internet.InternetAddress");

        $r10 = newarray (java.lang.Class)[1];

        $r11 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String>;

        if $r11 != null goto label3;

        $r22 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String> = $r22;

        goto label4;

     label3:
        $r22 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String>;

     label4:
        $r10[0] = $r22;

        $r12 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r10);

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r0;

        $r14 = virtualinvoke $r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r13);

     label5:
        return $r14;

     label6:
        $r15 := @caughtexception;

        $r16 = new org.apache.commons.configuration.ConversionException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a InternetAddress");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r16;

     label7:
        $r3 = new org.apache.commons.configuration.ConversionException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a InternetAddress");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r8);

        throw $r3;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    static boolean isEnum(java.lang.Class)
    {
        java.lang.Object[] $r4;
        java.lang.Class[] $r1;
        java.lang.RuntimeException $r8;
        java.lang.Exception $r7;
        java.lang.Boolean $r6;
        java.lang.Class $r0, r3, $r10;
        java.lang.Object $r5;
        java.lang.String $r9;
        java.lang.reflect.Method $r2;
        boolean $z0, $z1;

        r3 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.commons.lang.SystemUtils: boolean isJavaVersionAtLeast(float)>(1.5F);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r0 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Class>;

        if $r0 != null goto label2;

        $r10 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Class> = $r10;

        goto label3;

     label2:
        $r10 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$Class>;

     label3:
        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isEnum", $r1);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r4);

        $r6 = (java.lang.Boolean) $r5;

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

     label4:
        return $z1;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    static java.lang.Object toEnum(java.lang.Object, java.lang.Class) throws org.apache.commons.configuration.ConversionException
    {
        java.lang.reflect.Method $r12, $r19;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r22, $r31;
        java.lang.Object[] $r13, $r20;
        org.apache.commons.configuration.ConversionException $r3, $r23, $r32;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r9, $r24, $r25, $r26, $r27, $r29, $r33, $r34, $r35, $r36, $r38;
        int $i0;
        java.lang.String $r8, $r10, $r28, $r30, $r37, $r39;
        java.lang.Number $r15;
        java.lang.Class[] $r11, $r17;
        java.lang.Object r0, $r14, $r16, $r21;
        java.lang.Class $r1, r2, $r18, $r40;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label01;

        return r0;

     label01:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label07;

     label02:
        $r17 = newarray (java.lang.Class)[1];

        $r18 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String>;

        if $r18 != null goto label03;

        $r40 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String> = $r40;

        goto label04;

     label03:
        $r40 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String>;

     label04:
        $r17[0] = $r40;

        $r19 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r17);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r0;

        $r21 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r20);

     label05:
        return $r21;

     label06:
        $r31 := @caughtexception;

        $r32 = new org.apache.commons.configuration.ConversionException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a ");

        $r37 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r39);

        throw $r32;

     label07:
        $z2 = r0 instanceof java.lang.Number;

        if $z2 == 0 goto label11;

     label08:
        $r11 = newarray (java.lang.Class)[0];

        $r12 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("values", $r11);

        $r13 = newarray (java.lang.Object)[0];

        $r14 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

        $r15 = (java.lang.Number) r0;

        $i0 = virtualinvoke $r15.<java.lang.Number: int intValue()>();

        $r16 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r14, $i0);

     label09:
        return $r16;

     label10:
        $r22 := @caughtexception;

        $r23 = new org.apache.commons.configuration.ConversionException;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a ");

        $r28 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r30);

        throw $r23;

     label11:
        $r3 = new org.apache.commons.configuration.ConversionException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a ");

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r10);

        throw $r3;

        catch java.lang.Exception from label02 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public static java.util.Date toDate(java.lang.Object, java.lang.String) throws org.apache.commons.configuration.ConversionException
    {
        java.util.Date $r10, $r12, $r13;
        java.text.SimpleDateFormat $r7;
        org.apache.commons.configuration.ConversionException $r1, $r15;
        java.util.Calendar $r11;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r16, $r17, $r18, $r19;
        java.lang.String $r6, r8, $r9, $r20;
        java.text.ParseException $r14;
        boolean $z0, $z1, $z2;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r13 = (java.util.Date) r0;

        return $r13;

     label1:
        $z1 = r0 instanceof java.util.Calendar;

        if $z1 == 0 goto label2;

        $r11 = (java.util.Calendar) r0;

        $r12 = virtualinvoke $r11.<java.util.Calendar: java.util.Date getTime()>();

        return $r12;

     label2:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label6;

     label3:
        $r7 = new java.text.SimpleDateFormat;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r8);

        $r9 = (java.lang.String) r0;

        $r10 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r9);

     label4:
        return $r10;

     label5:
        $r14 := @caughtexception;

        $r15 = new org.apache.commons.configuration.ConversionException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Date");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label6:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Date");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;

        catch java.text.ParseException from label3 to label4 with label5;
    }

    public static java.util.Calendar toCalendar(java.lang.Object, java.lang.String) throws org.apache.commons.configuration.ConversionException
    {
        java.util.Date $r11, $r13;
        java.text.SimpleDateFormat $r8;
        org.apache.commons.configuration.ConversionException $r1, $r16;
        java.util.Calendar $r7, $r12, $r14;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r17, $r18, $r19, $r20;
        java.lang.String $r6, r9, $r10, $r21;
        java.text.ParseException $r15;
        boolean $z0, $z1, $z2;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        r9 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.util.Calendar;

        if $z0 == 0 goto label1;

        $r14 = (java.util.Calendar) r0;

        return $r14;

     label1:
        $z1 = r0 instanceof java.util.Date;

        if $z1 == 0 goto label2;

        $r12 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r13 = (java.util.Date) r0;

        virtualinvoke $r12.<java.util.Calendar: void setTime(java.util.Date)>($r13);

        return $r12;

     label2:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label6;

     label3:
        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r8 = new java.text.SimpleDateFormat;

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String)>(r9);

        $r10 = (java.lang.String) r0;

        $r11 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r10);

        virtualinvoke $r7.<java.util.Calendar: void setTime(java.util.Date)>($r11);

     label4:
        return $r7;

     label5:
        $r15 := @caughtexception;

        $r16 = new org.apache.commons.configuration.ConversionException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Calendar");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r16;

     label6:
        $r1 = new org.apache.commons.configuration.ConversionException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" can\'t be converted to a Calendar");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.commons.configuration.ConversionException: void <init>(java.lang.String)>($r6);

        throw $r1;

        catch java.text.ParseException from label3 to label4 with label5;
    }

    public static java.util.Iterator toIterator(java.lang.Object, char)
    {
        org.apache.commons.collections.ResettableIterator $r6, $r15;
        int $i1, $i2;
        java.lang.String $r12, r16;
        org.apache.commons.collections.iterators.SingletonIterator $r18, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r5, $r7, $r9, $r10, $r14, r17;
        java.util.Collection $r8;
        char c0;
        java.util.List $r13;
        java.lang.Object r0, $r4;
        java.lang.Class $r1;
        org.apache.commons.collections.iterators.IteratorChain $r19;

        r0 := @parameter0: java.lang.Object;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        $r15 = staticinvoke <org.apache.commons.collections.IteratorUtils: org.apache.commons.collections.ResettableIterator emptyIterator()>();

        return $r15;

     label1:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label3;

        r16 = (java.lang.String) r0;

        $i2 = (int) c0;

        $i1 = virtualinvoke r16.<java.lang.String: int indexOf(int)>($i2);

        if $i1 <= 0 goto label2;

        $r12 = (java.lang.String) r0;

        $r13 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.List split(java.lang.String,char)>($r12, c0);

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        return $r14;

     label2:
        $r18 = new org.apache.commons.collections.iterators.SingletonIterator;

        specialinvoke $r18.<org.apache.commons.collections.iterators.SingletonIterator: void <init>(java.lang.Object)>(r0);

        return $r18;

     label3:
        $z1 = r0 instanceof java.util.Collection;

        if $z1 == 0 goto label4;

        $r8 = (java.util.Collection) r0;

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        $r10 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Iterator toIterator(java.lang.Object,char)>($r9, c0);

        return $r10;

     label4:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label5;

        $r6 = staticinvoke <org.apache.commons.collections.IteratorUtils: org.apache.commons.collections.ResettableIterator arrayIterator(java.lang.Object)>(r0);

        $r7 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Iterator toIterator(java.lang.Object,char)>($r6, c0);

        return $r7;

     label5:
        $z3 = r0 instanceof java.util.Iterator;

        if $z3 == 0 goto label8;

        r17 = (java.util.Iterator) r0;

        $r19 = new org.apache.commons.collections.iterators.IteratorChain;

        specialinvoke $r19.<org.apache.commons.collections.iterators.IteratorChain: void <init>()>();

     label6:
        $z4 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r4 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r5 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.util.Iterator toIterator(java.lang.Object,char)>($r4, c0);

        virtualinvoke $r19.<org.apache.commons.collections.iterators.IteratorChain: void addIterator(java.util.Iterator)>($r5);

        goto label6;

     label7:
        return $r19;

     label8:
        $r20 = new org.apache.commons.collections.iterators.SingletonIterator;

        specialinvoke $r20.<org.apache.commons.collections.iterators.SingletonIterator: void <init>(java.lang.Object)>(r0);

        return $r20;
    }

    public static java.lang.Object interpolate(java.lang.Object, org.apache.commons.configuration.AbstractConfiguration)
    {
        org.apache.commons.configuration.AbstractConfiguration r1;
        org.apache.commons.lang.text.StrSubstitutor $r2;
        java.lang.Object r0;
        java.lang.String $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.commons.configuration.AbstractConfiguration;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.AbstractConfiguration: org.apache.commons.lang.text.StrSubstitutor getSubstitutor()>();

        $r3 = (java.lang.String) r0;

        $r4 = virtualinvoke $r2.<org.apache.commons.lang.text.StrSubstitutor: java.lang.String replace(java.lang.String)>($r3);

        return $r4;

     label1:
        return r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r0;

        <org.apache.commons.configuration.PropertyConverter: java.lang.String INTERNET_ADDRESS_CLASSNAME> = "javax.mail.internet.InternetAddress";

        <org.apache.commons.configuration.PropertyConverter: float JAVA_VERSION_1_5> = 1.5F;

        <org.apache.commons.configuration.PropertyConverter: int HEX_RADIX> = 16;

        <org.apache.commons.configuration.PropertyConverter: java.lang.String HEX_PREFIX> = "0x";

        <org.apache.commons.configuration.PropertyConverter: char LIST_ESC_CHAR> = 92;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(92);

        <org.apache.commons.configuration.PropertyConverter: java.lang.String LIST_ESCAPE> = $r0;

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String>;

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String> = $r3;

        goto label2;

     label1:
        $r3 = <org.apache.commons.configuration.PropertyConverter: java.lang.Class class$java$lang$String>;

     label2:
        $r1[0] = $r3;

        <org.apache.commons.configuration.PropertyConverter: java.lang.Class[] CONSTR_ARGS> = $r1;

        return;
    }
}
