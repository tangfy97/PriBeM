public class org.waveprotocol.wave.client.editor.extract.ImeExtractor extends java.lang.Object
{
    private final com.google.gwt.dom.client.SpanElement imeContainer;
    private final com.google.gwt.dom.client.SpanElement imeInput;
    private org.waveprotocol.wave.model.document.util.Point$El inContainer;
    private org.waveprotocol.wave.client.editor.content.ContentElement wrapper;
    private static final java.lang.String WRAPPER_TAGNAME;

    public static void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)
    {
        org.waveprotocol.wave.client.editor.extract.ImeExtractor$1 $r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.ElementHandlerRegistry;

        $r1 = new org.waveprotocol.wave.client.editor.extract.ImeExtractor$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.extract.ImeExtractor$1: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.ElementHandlerRegistry: void registerRenderer(java.lang.String,org.waveprotocol.wave.client.editor.content.Renderer)>("l:ime", $r1);

        return;
    }

    public void <init>()
    {
        com.google.gwt.dom.client.Style $r7, $r13, $r16;
        boolean $z0;
        com.google.gwt.dom.client.Element $r24, $r25, $r26, $r27, $r28, $r29;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r0;
        com.google.gwt.dom.client.Style$Display $r8, $r14;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r3, $r18;
        com.google.gwt.dom.client.SpanElement $r2, $r4, $r5, $r6, $r9, $r11, $r12, $r15, $r17, $r19, $r20, $r21, $r22, $r23;
        com.google.gwt.dom.client.Document $r1, $r10;
        com.google.gwt.dom.client.Node $r30;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.SpanElement createSpanElement()>();

        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer> = $r2;

        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper> = null;

        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r3 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip DEEP>;

        $r24 = (com.google.gwt.dom.client.Element) $r4;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setTransparency(com.google.gwt.dom.client.Element,org.waveprotocol.wave.model.document.util.FilteredView$Skip)>($r24, $r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r25 = (com.google.gwt.dom.client.Element) $r5;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setMayContainSelectionEvenWhenDeep(com.google.gwt.dom.client.Element,boolean)>($r25, 1);

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean SUPPORTS_CARET_IN_EMPTY_SPAN>;

        if $z0 == 0 goto label1;

        $r23 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput> = $r23;

        goto label2;

     label1:
        $r6 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r7 = virtualinvoke $r6.<com.google.gwt.dom.client.SpanElement: com.google.gwt.dom.client.Style getStyle()>();

        $r8 = <com.google.gwt.dom.client.Style$Display: com.google.gwt.dom.client.Style$Display INLINE_BLOCK>;

        virtualinvoke $r7.<com.google.gwt.dom.client.Style: void setDisplay(com.google.gwt.dom.client.Style$Display)>($r8);

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r26 = (com.google.gwt.dom.client.Element) $r9;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.dom.client.Element setContentEditable(com.google.gwt.dom.client.Element,boolean,boolean)>($r26, 0, 0);

        $r10 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r11 = virtualinvoke $r10.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.SpanElement createSpanElement()>();

        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput> = $r11;

        $r12 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r13 = virtualinvoke $r12.<com.google.gwt.dom.client.SpanElement: com.google.gwt.dom.client.Style getStyle()>();

        $r14 = <com.google.gwt.dom.client.Style$Display: com.google.gwt.dom.client.Style$Display INLINE_BLOCK>;

        virtualinvoke $r13.<com.google.gwt.dom.client.Style: void setDisplay(com.google.gwt.dom.client.Style$Display)>($r14);

        $r15 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r16 = virtualinvoke $r15.<com.google.gwt.dom.client.SpanElement: com.google.gwt.dom.client.Style getStyle()>();

        virtualinvoke $r16.<com.google.gwt.dom.client.Style: void setProperty(java.lang.String,java.lang.String)>("outline", "0");

        $r17 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r27 = (com.google.gwt.dom.client.Element) $r17;

        staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: com.google.gwt.dom.client.Element setContentEditable(com.google.gwt.dom.client.Element,boolean,boolean)>($r27, 1, 0);

        $r19 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r18 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip DEEP>;

        $r28 = (com.google.gwt.dom.client.Element) $r19;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setTransparency(com.google.gwt.dom.client.Element,org.waveprotocol.wave.model.document.util.FilteredView$Skip)>($r28, $r18);

        $r20 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r29 = (com.google.gwt.dom.client.Element) $r20;

        staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: void setMayContainSelectionEvenWhenDeep(com.google.gwt.dom.client.Element,boolean)>($r29, 1);

        $r22 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r21 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r30 = (com.google.gwt.dom.client.Node) $r21;

        virtualinvoke $r22.<com.google.gwt.dom.client.SpanElement: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r30);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: void clearContainer()>();

        return;
    }

    public java.lang.String getContent()
    {
        com.google.gwt.dom.client.SpanElement $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: boolean isActive()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r2 = virtualinvoke $r1.<com.google.gwt.dom.client.SpanElement: java.lang.String getInnerText()>();

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public void activate(org.waveprotocol.wave.model.document.util.DocumentContext, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r9, r11;
        org.waveprotocol.wave.model.document.util.DocumentContext r1;
        java.util.Map $r13;
        org.waveprotocol.wave.client.editor.content.ContentElement $r15, $r16, r20;
        org.waveprotocol.wave.model.document.raw.TextNodeOrganiser $r6;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r0;
        org.waveprotocol.wave.model.document.util.Point r3, $r4;
        org.waveprotocol.wave.model.document.util.LocalDocument $r2, $r5, $r12;
        com.google.gwt.dom.client.SpanElement $r18;
        org.waveprotocol.wave.model.document.util.Point$El $r7, $r19;
        com.google.gwt.dom.client.Element $r17;
        java.lang.Object $r8, $r10, $r14;
        com.google.gwt.dom.client.Node $r21;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        r3 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: void clearWrapper(org.waveprotocol.wave.model.document.util.LocalDocument)>($r2);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point transparentSlice(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.DocumentContext)>(r3, r1);

        $r5 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r6 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point$El ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.raw.TextNodeOrganiser)>($r4, $r5, $r6);

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r8;

        r20 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement asElement()>();

        $r10 = virtualinvoke $r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r11 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r10;

        if r11 == null goto label1;

        r20 = virtualinvoke r11.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

     label1:
        $r12 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        $r13 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r14 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentCreate(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>("l:ime", $r13, r20, r11);

        $r15 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r14;

        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper> = $r15;

        $r16 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getContainerNodelet()>();

        $r18 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeContainer>;

        $r21 = (com.google.gwt.dom.client.Node) $r18;

        virtualinvoke $r17.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r21);

        $r19 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.model.document.util.Point$El inContainer>;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r19);

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point deactivate(org.waveprotocol.wave.model.document.util.LocalDocument)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument r0;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2, $r4;
        java.lang.Object $r3, $r5;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r1;
        org.waveprotocol.wave.model.document.util.Point$El $r6;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.LocalDocument;

        $r2 = r1.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>($r2);

        $r4 = r1.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getNextSibling(java.lang.Object)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, $r5);

        specialinvoke r1.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: void clearWrapper(org.waveprotocol.wave.model.document.util.LocalDocument)>(r0);

        return $r6;
    }

    public boolean isActive()
    {
        org.waveprotocol.wave.client.editor.content.ContentElement $r1;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void clearWrapper(org.waveprotocol.wave.model.document.util.LocalDocument)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument r4;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, $r2, $r3, $r5;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.LocalDocument;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        if $r1 == null goto label1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        if $r3 == null goto label1;

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper>;

        interfaceinvoke r4.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentDeepRemove(java.lang.Object)>($r5);

     label1:
        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.client.editor.content.ContentElement wrapper> = null;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: void clearContainer()>();

        return;
    }

    private void clearContainer()
    {
        com.google.gwt.dom.client.SpanElement $r1, $r2, $r3, $r6;
        org.waveprotocol.wave.model.document.util.Point$El $r5;
        org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper $r7;
        com.google.gwt.dom.client.Element $r8;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor r0;
        com.google.gwt.dom.client.Node $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.ImeExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        virtualinvoke $r1.<com.google.gwt.dom.client.SpanElement: void setInnerHTML(java.lang.String)>("");

        $z0 = <org.waveprotocol.wave.client.common.util.QuirksConstants: boolean SUPPORTS_CARET_IN_EMPTY_SPAN>;

        if $z0 != 0 goto label1;

        $r7 = <org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper: org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper INSTANCE>;

        $r6 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r8 = (com.google.gwt.dom.client.Element) $r6;

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.paragraph.ParagraphHelper: void onEmpty(com.google.gwt.dom.client.Element)>($r8);

     label1:
        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: com.google.gwt.dom.client.SpanElement imeInput>;

        $r4 = virtualinvoke $r2.<com.google.gwt.dom.client.SpanElement: com.google.gwt.dom.client.Node getFirstChild()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r3, $r4);

        r0.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.model.document.util.Point$El inContainer> = $r5;

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.client.editor.extract.ImeExtractor: java.lang.String WRAPPER_TAGNAME> = "l:ime";

        return;
    }
}
