public class com.jhlabs.vecmath.Vector3f extends com.jhlabs.vecmath.Tuple3f
{

    public void <init>()
    {
        com.jhlabs.vecmath.Vector3f r0;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        specialinvoke r0.<com.jhlabs.vecmath.Vector3f: void <init>(float,float,float)>(0.0F, 0.0F, 0.0F);

        return;
    }

    public void <init>(float[])
    {
        float $f0, $f1, $f2;
        float[] r1;
        com.jhlabs.vecmath.Vector3f r0;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        r1 := @parameter0: float[];

        specialinvoke r0.<com.jhlabs.vecmath.Tuple3f: void <init>()>();

        $f0 = r1[0];

        r0.<com.jhlabs.vecmath.Tuple3f: float x> = $f0;

        $f1 = r1[1];

        r0.<com.jhlabs.vecmath.Tuple3f: float y> = $f1;

        $f2 = r1[2];

        r0.<com.jhlabs.vecmath.Tuple3f: float z> = $f2;

        return;
    }

    public void <init>(float, float, float)
    {
        float f0, f1, f2;
        com.jhlabs.vecmath.Vector3f r0;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        specialinvoke r0.<com.jhlabs.vecmath.Tuple3f: void <init>()>();

        r0.<com.jhlabs.vecmath.Tuple3f: float x> = f0;

        r0.<com.jhlabs.vecmath.Tuple3f: float y> = f1;

        r0.<com.jhlabs.vecmath.Tuple3f: float z> = f2;

        return;
    }

    public void <init>(com.jhlabs.vecmath.Vector3f)
    {
        float $f0, $f1, $f2;
        com.jhlabs.vecmath.Vector3f r0, r1;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        r1 := @parameter0: com.jhlabs.vecmath.Vector3f;

        specialinvoke r0.<com.jhlabs.vecmath.Tuple3f: void <init>()>();

        $f0 = r1.<com.jhlabs.vecmath.Tuple3f: float x>;

        r0.<com.jhlabs.vecmath.Tuple3f: float x> = $f0;

        $f1 = r1.<com.jhlabs.vecmath.Tuple3f: float y>;

        r0.<com.jhlabs.vecmath.Tuple3f: float y> = $f1;

        $f2 = r1.<com.jhlabs.vecmath.Tuple3f: float z>;

        r0.<com.jhlabs.vecmath.Tuple3f: float z> = $f2;

        return;
    }

    public void <init>(com.jhlabs.vecmath.Tuple3f)
    {
        com.jhlabs.vecmath.Tuple3f r1;
        float $f0, $f1, $f2;
        com.jhlabs.vecmath.Vector3f r0;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        r1 := @parameter0: com.jhlabs.vecmath.Tuple3f;

        specialinvoke r0.<com.jhlabs.vecmath.Tuple3f: void <init>()>();

        $f0 = r1.<com.jhlabs.vecmath.Tuple3f: float x>;

        r0.<com.jhlabs.vecmath.Tuple3f: float x> = $f0;

        $f1 = r1.<com.jhlabs.vecmath.Tuple3f: float y>;

        r0.<com.jhlabs.vecmath.Tuple3f: float y> = $f1;

        $f2 = r1.<com.jhlabs.vecmath.Tuple3f: float z>;

        r0.<com.jhlabs.vecmath.Tuple3f: float z> = $f2;

        return;
    }

    public float angle(com.jhlabs.vecmath.Vector3f)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.jhlabs.vecmath.Vector3f r0, r1;
        double $d0, $d1;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        r1 := @parameter0: com.jhlabs.vecmath.Vector3f;

        $f0 = virtualinvoke r0.<com.jhlabs.vecmath.Vector3f: float dot(com.jhlabs.vecmath.Vector3f)>(r1);

        $f1 = virtualinvoke r0.<com.jhlabs.vecmath.Vector3f: float length()>();

        $f2 = virtualinvoke r1.<com.jhlabs.vecmath.Vector3f: float length()>();

        $f3 = $f1 * $f2;

        $f4 = $f0 / $f3;

        $d0 = (double) $f4;

        $d1 = staticinvoke <java.lang.Math: double acos(double)>($d0);

        $f5 = (float) $d1;

        return $f5;
    }

    public float dot(com.jhlabs.vecmath.Vector3f)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        com.jhlabs.vecmath.Vector3f r0, r1;

        r1 := @this: com.jhlabs.vecmath.Vector3f;

        r0 := @parameter0: com.jhlabs.vecmath.Vector3f;

        $f1 = r0.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f0 = r1.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f2 = r1.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f4 = $f3 * $f2;

        $f9 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f6 = r1.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f8 = $f7 * $f6;

        $f10 = $f9 + $f8;

        return $f10;
    }

    public void cross(com.jhlabs.vecmath.Vector3f, com.jhlabs.vecmath.Vector3f)
    {
        com.jhlabs.vecmath.Vector3f r0, r1, r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        r1 := @parameter0: com.jhlabs.vecmath.Vector3f;

        r2 := @parameter1: com.jhlabs.vecmath.Vector3f;

        $f1 = r1.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f0 = r2.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f5 = $f1 * $f0;

        $f3 = r1.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f2 = r2.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f4 = $f3 * $f2;

        $f6 = $f5 - $f4;

        r0.<com.jhlabs.vecmath.Tuple3f: float x> = $f6;

        $f8 = r1.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f7 = r2.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f12 = $f8 * $f7;

        $f10 = r1.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f9 = r2.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f11 = $f10 * $f9;

        $f13 = $f12 - $f11;

        r0.<com.jhlabs.vecmath.Tuple3f: float y> = $f13;

        $f15 = r1.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f14 = r2.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f19 = $f15 * $f14;

        $f17 = r1.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f16 = r2.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f18 = $f17 * $f16;

        $f20 = $f19 - $f18;

        r0.<com.jhlabs.vecmath.Tuple3f: float z> = $f20;

        return;
    }

    public float length()
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        com.jhlabs.vecmath.Vector3f r0;
        double $d0, $d1;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        $f1 = r0.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f0 = r0.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f2 = r0.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f4 = $f3 * $f2;

        $f9 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f6 = r0.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f8 = $f7 * $f6;

        $f10 = $f9 + $f8;

        $d0 = (double) $f10;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f11 = (float) $d1;

        return $f11;
    }

    public void normalize()
    {
        com.jhlabs.vecmath.Vector3f r0;
        double $d0, $d1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, $f13, $f14, $f15, $f16, $f17, $f18;

        r0 := @this: com.jhlabs.vecmath.Vector3f;

        $f1 = r0.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f0 = r0.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f2 = r0.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f4 = $f3 * $f2;

        $f9 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f6 = r0.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f8 = $f7 * $f6;

        $f10 = $f9 + $f8;

        $d0 = (double) $f10;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f11 = (float) $d1;

        f12 = 1.0F / $f11;

        $f13 = r0.<com.jhlabs.vecmath.Tuple3f: float x>;

        $f14 = $f13 * f12;

        r0.<com.jhlabs.vecmath.Tuple3f: float x> = $f14;

        $f15 = r0.<com.jhlabs.vecmath.Tuple3f: float y>;

        $f16 = $f15 * f12;

        r0.<com.jhlabs.vecmath.Tuple3f: float y> = $f16;

        $f17 = r0.<com.jhlabs.vecmath.Tuple3f: float z>;

        $f18 = $f17 * f12;

        r0.<com.jhlabs.vecmath.Tuple3f: float z> = $f18;

        return;
    }
}
