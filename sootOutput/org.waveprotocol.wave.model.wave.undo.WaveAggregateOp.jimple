class org.waveprotocol.wave.model.wave.undo.WaveAggregateOp extends java.lang.Object
{
    private final java.util.List opPairs;
    static final boolean $assertionsDisabled;

    static org.waveprotocol.wave.model.wave.undo.WaveAggregateOp createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r4;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r5;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "op must be non-null");

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "context must be non-null");

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: org.waveprotocol.wave.model.wave.undo.AggregateOperation createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        $r5 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.ParticipantId)>($r4, $r3);

        return $r5;
    }

    static org.waveprotocol.wave.model.wave.undo.WaveAggregateOp compose(java.util.List)
    {
        java.util.List r1, $r2, $r3;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List flatten(java.util.List)>(r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List composeDocumentOps(java.util.List)>($r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void <init>(java.util.List)>($r3);

        return $r0;
    }

    static org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.wave.undo.WaveAggregateOp, org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r11, $r12;
        java.util.Iterator $r6;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r2, r4, $r8, $r9;
        org.waveprotocol.wave.model.operation.OperationPair $r7;
        java.util.ArrayList $r0, $r1;
        java.util.List $r3, $r5;
        java.lang.Object $r10;
        boolean $z0;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        $r3 = r2.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r5 = r4.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) $r10;

        $r12 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair transformAndUpdate(java.util.List,org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair)>($r1, r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r7 = new org.waveprotocol.wave.model.operation.OperationPair;

        $r8 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        specialinvoke $r8.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void <init>(java.util.List)>($r1);

        $r9 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        specialinvoke $r9.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void <init>(java.util.List)>($r0);

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>($r8, $r9);

        return $r7;
    }

    private static void maybeCollectOps(java.util.List, org.waveprotocol.wave.model.wave.ParticipantId, java.util.List)
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        java.lang.AssertionError $r5;
        java.util.List r0, r1;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r3;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r1 := @parameter2: java.util.List;

        if r0 == null goto label2;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $z0 = <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r4 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: org.waveprotocol.wave.model.wave.undo.AggregateOperation compose(java.lang.Iterable)>(r0);

        specialinvoke $r2.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.ParticipantId)>($r3, r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label2:
        return;
    }

    private static java.util.List composeDocumentOps(java.util.List)
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r4;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r5, r8;
        java.util.ArrayList $r0, $r7, r9;
        java.util.List r1;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r6;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r8 = null;

        r9 = null;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) $r3;

        $r5 = r4.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator>;

        $z1 = virtualinvoke $r5.<org.waveprotocol.wave.model.wave.ParticipantId: boolean equals(java.lang.Object)>(r8);

        if $z1 != 0 goto label2;

        staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void maybeCollectOps(java.util.List,org.waveprotocol.wave.model.wave.ParticipantId,java.util.List)>(r9, r8, $r0);

        r9 = null;

        r8 = r4.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator>;

     label2:
        if r9 != null goto label3;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r9 = $r7;

     label3:
        $r6 = r4.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.undo.AggregateOperation op>;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label4:
        staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void maybeCollectOps(java.util.List,org.waveprotocol.wave.model.wave.ParticipantId,java.util.List)>(r9, r8, $r0);

        return $r0;
    }

    private static java.util.List flatten(java.util.List)
    {
        java.util.List r1, $r5;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r4;
        java.lang.Object $r3;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) $r3;

        $r5 = r4.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    private static org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair transformAndUpdate(java.util.List, org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r4, r8;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.operation.OperationPair $r5;
        java.util.ArrayList $r0;
        java.util.List r1;
        java.lang.Object $r3, $r6, $r7;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        r8 := @parameter1: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        interfaceinvoke r1.<java.util.List: void clear()>();

        $r2 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair,org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair)>(r4, r8);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        r8 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) $r7;

        goto label1;

     label2:
        return r8;
    }

    private static org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair, org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) throws org.waveprotocol.wave.model.operation.TransformException
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r0, r1, $r6, $r10;
        org.waveprotocol.wave.model.wave.ParticipantId $r8, $r12;
        org.waveprotocol.wave.model.operation.OperationPair $r4, $r5;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r2, $r3, $r9, $r13;
        java.lang.Object $r7, $r11;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        $r3 = r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.undo.AggregateOperation op>;

        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.undo.AggregateOperation op>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.wave.undo.AggregateOperation: org.waveprotocol.wave.model.operation.OperationPair transform(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.undo.AggregateOperation)>($r3, $r2);

        $r5 = new org.waveprotocol.wave.model.operation.OperationPair;

        $r6 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        $r7 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object clientOp()>();

        $r9 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation) $r7;

        $r8 = r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator>;

        specialinvoke $r6.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.ParticipantId)>($r9, $r8);

        $r10 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        $r11 = virtualinvoke $r4.<org.waveprotocol.wave.model.operation.OperationPair: java.lang.Object serverOp()>();

        $r13 = (org.waveprotocol.wave.model.wave.undo.AggregateOperation) $r11;

        $r12 = r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator>;

        specialinvoke $r10.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.ParticipantId)>($r13, $r12);

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.OperationPair: void <init>(java.lang.Object,java.lang.Object)>($r6, $r10);

        return $r5;
    }

    void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.List $r4;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair $r1;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r0;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.undo.AggregateOperation;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.ParticipantId)>(r2, r3);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1);

        r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs> = $r4;

        return;
    }

    private void <init>(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "pairs must be non-null");

        r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs> = r1;

        return;
    }

    public java.util.List toWaveletOperations()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List toWaveletOperationsWithVersions(long,org.waveprotocol.wave.model.version.HashedVersion)>(0L, null);

        return $r1;
    }

    public java.util.List toWaveletOperationsWithVersions(long, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r14;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r5;
        long l3;
        org.waveprotocol.wave.model.wave.ParticipantId $r10;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.operation.core.CoreWaveletOperation $r13;
        int $i0, $i1, $i2, $i4, $i5, i6, i7, $i8;
        org.waveprotocol.wave.model.version.HashedVersion r9;
        boolean z0, $z1, $z2;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r11;
        java.util.List $r2, $r3, $r6, $r8;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r7;
        java.lang.Object $r4, $r12;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        l3 := @parameter0: long;

        r9 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i6 >= $i0 goto label8;

        $r3 = r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i6);

        r5 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) $r4;

        $r6 = r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        if i6 != $i2 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

        $r7 = r5.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.undo.AggregateOperation op>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: java.util.List toCoreWaveletOperations()>();

        i7 = 0;

     label4:
        $i8 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i7 >= $i8 goto label7;

        if z0 == 0 goto label5;

        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        if i7 != $i5 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        $r10 = r5.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator>;

        $r11 = specialinvoke r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext contextForCreator(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion,boolean)>($r10, l3, r9, $z2);

        $r12 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i7);

        $r13 = (org.waveprotocol.wave.model.operation.core.CoreWaveletOperation) $r12;

        $r14 = specialinvoke r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.operation.wave.WaveletOperation coreWaveletOpsToWaveletOps(org.waveprotocol.wave.model.operation.core.CoreWaveletOperation,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r13, $r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14);

        i7 = i7 + 1;

        goto label4;

     label7:
        i6 = i6 + 1;

        goto label1;

     label8:
        return $r0;
    }

    org.waveprotocol.wave.model.wave.undo.WaveAggregateOp invert()
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair r6, $r7;
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r1, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId $r10;
        java.util.ArrayList $r0;
        java.util.List $r2;
        org.waveprotocol.wave.model.wave.undo.AggregateOperation $r8, $r9;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List opPairs>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair) $r5;

        $r7 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair;

        $r8 = r6.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.undo.AggregateOperation op>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.wave.undo.AggregateOperation: org.waveprotocol.wave.model.wave.undo.AggregateOperation invert()>();

        $r10 = r6.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: org.waveprotocol.wave.model.wave.ParticipantId creator>;

        specialinvoke $r7.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp$OpCreatorPair: void <init>(org.waveprotocol.wave.model.wave.undo.AggregateOperation,org.waveprotocol.wave.model.wave.ParticipantId)>($r9, $r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        staticinvoke <java.util.Collections: void reverse(java.util.List)>($r0);

        $r4 = new org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        specialinvoke $r4.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: void <init>(java.util.List)>($r0);

        return $r4;
    }

    private org.waveprotocol.wave.model.operation.wave.WaveletOperation coreWaveletOpsToWaveletOps(org.waveprotocol.wave.model.operation.core.CoreWaveletOperation, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r12;
        org.waveprotocol.wave.model.document.operation.DocOp $r3;
        org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant $r10;
        org.waveprotocol.wave.model.wave.ParticipantId $r8, $r11;
        org.waveprotocol.wave.model.operation.core.CoreAddParticipant $r7;
        org.waveprotocol.wave.model.operation.core.CoreWaveletOperation r0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r13;
        java.lang.RuntimeException $r1;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r6;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation $r5;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r9;
        org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation r14;

        r13 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.core.CoreWaveletOperation;

        r6 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant;

        if $z0 == 0 goto label1;

        $r10 = (org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant) r0;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.model.operation.core.CoreRemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r12 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r6, $r11);

        return $r12;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreAddParticipant;

        if $z1 == 0 goto label2;

        $r7 = (org.waveprotocol.wave.model.operation.core.CoreAddParticipant) r0;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.core.CoreAddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        $r9 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        specialinvoke $r9.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r6, $r8);

        return $r9;

     label2:
        $z2 = r0 instanceof org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation;

        if $z2 == 0 goto label3;

        r14 = (org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation) r0;

        $r2 = virtualinvoke r14.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: java.lang.String getDocumentId()>();

        $r3 = virtualinvoke r14.<org.waveprotocol.wave.model.operation.core.CoreWaveletDocumentOperation: org.waveprotocol.wave.model.document.operation.DocOp getOperation()>();

        $r4 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r5 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        specialinvoke $r5.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>(r6, $r3);

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r2, $r5);

        return $r4;

     label3:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("unhandled operation type");

        throw $r1;
    }

    private org.waveprotocol.wave.model.operation.wave.WaveletOperationContext contextForCreator(org.waveprotocol.wave.model.wave.ParticipantId, long, org.waveprotocol.wave.model.version.HashedVersion, boolean)
    {
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r4;
        long $l0, $l1, l2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r0, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.version.HashedVersion r3;
        boolean z0;

        r4 := @this: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        l2 := @parameter1: long;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r2 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>(r1, $l1, l2, r3);

        return $r2;

     label1:
        $r0 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long)>(r1, $l0, 0L);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/wave/undo/WaveAggregateOp;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: boolean $assertionsDisabled> = $z1;

        return;
    }
}
