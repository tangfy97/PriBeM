class ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream extends java.io.InputStream
{
    java.util.List chunks;
    int chunkNo;
    byte[] buffer;
    int segPos;
    int segSize;
    final ucar.nc2.iosp.hdf4.H4iosp this$0;

    void <init>(ucar.nc2.iosp.hdf4.H4iosp, ucar.nc2.iosp.hdf4.H4header$Vinfo)
    {
        ucar.nc2.iosp.hdf4.H4header$Vinfo r2;
        java.util.List $r3;
        ucar.nc2.iosp.hdf4.H4iosp r1;
        ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream r0;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream;

        r1 := @parameter0: ucar.nc2.iosp.hdf4.H4iosp;

        r2 := @parameter1: ucar.nc2.iosp.hdf4.H4header$Vinfo;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: ucar.nc2.iosp.hdf4.H4iosp this$0> = r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        $r3 = r2.<ucar.nc2.iosp.hdf4.H4header$Vinfo: java.util.List chunks>;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: java.util.List chunks> = $r3;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int chunkNo> = 0;

        return;
    }

    private void readChunk() throws java.io.IOException
    {
        byte[] $r5, $r10, $r11, r14, $r30;
        java.lang.IllegalStateException $r35;
        ucar.unidata.io.RandomAccessFile $r7, $r9, $r16, $r18;
        ucar.nc2.iosp.hdf4.H4header$DataChunk r3;
        java.io.ByteArrayInputStream $r31;
        ucar.nc2.iosp.hdf4.H4header$TagData r4, $r13;
        java.util.List $r1;
        ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream r0;
        java.lang.StringBuilder $r22, $r24, $r34;
        java.io.ByteArrayOutputStream $r33;
        ucar.nc2.iosp.hdf4.H4iosp $r6, $r8, $r15, $r17;
        java.util.zip.InflaterInputStream $r32;
        long $l7, $l11;
        ucar.nc2.iosp.hdf4.H4header$SpecialComp $r12, $r19, $r23, $r29;
        short $s4, $s13, $s14;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i12, $i15, $i16, $i17, $i18;
        java.lang.String $r25;
        java.lang.Object $r2;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream;

        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: java.util.List chunks>;

        $i0 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int chunkNo>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        r3 = (ucar.nc2.iosp.hdf4.H4header$DataChunk) $r2;

        r4 = r3.<ucar.nc2.iosp.hdf4.H4header$DataChunk: ucar.nc2.iosp.hdf4.H4header$TagData data>;

        $i1 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int chunkNo>;

        $i2 = $i1 + 1;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int chunkNo> = $i2;

        $s4 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: short ext_type>;

        $i3 = <ucar.nc2.iosp.hdf4.TagEnum: int SPECIAL_COMP>;

        $i16 = (int) $s4;

        if $i16 != $i3 goto label3;

        $r12 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $r13 = virtualinvoke $r12.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: ucar.nc2.iosp.hdf4.H4header$TagData getDataTag()>();

        $i9 = $r13.<ucar.nc2.iosp.hdf4.H4header$TagData: int length>;

        r14 = newarray (byte)[$i9];

        $r15 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r16 = staticinvoke <ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile access$200(ucar.nc2.iosp.hdf4.H4iosp)>($r15);

        $i10 = $r13.<ucar.nc2.iosp.hdf4.H4header$TagData: int offset>;

        $l11 = (long) $i10;

        virtualinvoke $r16.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l11);

        $r17 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r18 = staticinvoke <ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile access$300(ucar.nc2.iosp.hdf4.H4iosp)>($r17);

        virtualinvoke $r18.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r14);

        $r19 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $s13 = $r19.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: short compress_type>;

        $i12 = <ucar.nc2.iosp.hdf4.TagEnum: int COMP_CODE_DEFLATE>;

        $i17 = (int) $s13;

        if $i17 != $i12 goto label1;

        $r32 = new java.util.zip.InflaterInputStream;

        $r31 = new java.io.ByteArrayInputStream;

        specialinvoke $r31.<java.io.ByteArrayInputStream: void <init>(byte[])>(r14);

        specialinvoke $r32.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r31);

        $r33 = new java.io.ByteArrayOutputStream;

        $r29 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $i15 = $r29.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: int uncomp_length>;

        specialinvoke $r33.<java.io.ByteArrayOutputStream: void <init>(int)>($i15);

        staticinvoke <ucar.nc2.util.IO: long copy(java.io.InputStream,java.io.OutputStream)>($r32, $r33);

        $r30 = virtualinvoke $r33.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: byte[] buffer> = $r30;

        goto label2;

     label1:
        $r35 = new java.lang.IllegalStateException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown compression type =");

        $r23 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: ucar.nc2.iosp.hdf4.H4header$SpecialComp compress>;

        $s14 = $r23.<ucar.nc2.iosp.hdf4.H4header$SpecialComp: short compress_type>;

        $i18 = (int) $s14;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r35;

     label2:
        goto label4;

     label3:
        $i5 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: int length>;

        $r5 = newarray (byte)[$i5];

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: byte[] buffer> = $r5;

        $r6 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r7 = staticinvoke <ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile access$400(ucar.nc2.iosp.hdf4.H4iosp)>($r6);

        $i6 = r4.<ucar.nc2.iosp.hdf4.H4header$TagData: int offset>;

        $l7 = (long) $i6;

        virtualinvoke $r7.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l7);

        $r8 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: ucar.nc2.iosp.hdf4.H4iosp this$0>;

        $r9 = staticinvoke <ucar.nc2.iosp.hdf4.H4iosp: ucar.unidata.io.RandomAccessFile access$500(ucar.nc2.iosp.hdf4.H4iosp)>($r8);

        $r10 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: byte[] buffer>;

        virtualinvoke $r9.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>($r10);

     label4:
        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segPos> = 0;

        $r11 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: byte[] buffer>;

        $i8 = lengthof $r11;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segSize> = $i8;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1;
        short $s6, $s7;
        byte $b3;
        ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream r0;
        int $i0, $i1, $i2, $i4, $i5, $i8;

        r0 := @this: ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream;

        $i1 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segPos>;

        $i0 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segSize>;

        if $i1 != $i0 goto label1;

        specialinvoke r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: void readChunk()>();

     label1:
        $r1 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: byte[] buffer>;

        $i2 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segPos>;

        $b3 = $r1[$i2];

        $s7 = (short) $b3;

        $s6 = $s7 & 255;

        $i4 = r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segPos>;

        $i5 = $i4 + 1;

        r0.<ucar.nc2.iosp.hdf4.H4iosp$ChunkedInputStream: int segPos> = $i5;

        $i8 = (int) $s6;

        return $i8;
    }
}
