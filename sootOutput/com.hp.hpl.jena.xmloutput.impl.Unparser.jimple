class com.hp.hpl.jena.xmloutput.impl.Unparser extends java.lang.Object
{
    private static com.hp.hpl.jena.rdf.model.Property LI;
    private static com.hp.hpl.jena.rdf.model.Property DESCRIPTION;
    protected static org.slf4j.Logger logger;
    private java.lang.String xmlBase;
    private static final java.lang.String rdfns;
    private static final java.lang.Integer one;
    private java.lang.String localName;
    private java.util.Map objectTable;
    private com.hp.hpl.jena.rdf.model.Model model;
    private java.io.PrintWriter out;
    private java.util.Set doing;
    private java.util.Set doneSet;
    private java.util.Set haveReified;
    private com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes;
    private java.util.Set pleasingTypeSet;
    private final com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter;
    private boolean avoidExplicitReification;
    java.util.Map res2statement;
    java.util.Map statement2res;
    private static int RDF_HASH;
    private com.hp.hpl.jena.xmloutput.impl.Unparser$WType wdesc;
    private com.hp.hpl.jena.xmloutput.impl.Unparser$WType wtype;
    private java.util.Set idDone;
    int[] codeCoverage;
    private int indentLevel;
    private int currentColumn;
    private java.util.Set infinite;
    private java.util.Set openResIterators;

    void <init>(com.hp.hpl.jena.xmloutput.impl.Abbreviated, java.lang.String, com.hp.hpl.jena.rdf.model.Model, java.io.PrintWriter)
    {
        int[] $r8;
        com.hp.hpl.jena.rdf.model.StmtIterator $r15;
        com.hp.hpl.jena.rdf.model.Property $r21, $r25, $r27, $r29, $r38;
        java.util.Map $r41, $r42;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter r12;
        com.hp.hpl.jena.util.iterator.MapFilterIterator $r18;
        com.hp.hpl.jena.rdf.model.RDFNode $r31, $r32, $r34, $r44;
        com.hp.hpl.jena.rdf.model.ResIterator $r23;
        java.lang.Exception $r47;
        java.lang.Throwable $r46, $r48;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.HashMap $r14, $r16, $r17;
        java.util.HashSet $r1, $r2, $r3, $r4, $r7, $r9;
        java.lang.String r10, $r37;
        com.hp.hpl.jena.xmloutput.impl.Unparser$3 $r6;
        com.hp.hpl.jena.xmloutput.impl.Unparser$2 $r5;
        com.hp.hpl.jena.xmloutput.impl.Unparser$1 $r19;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated r11;
        com.hp.hpl.jena.rdf.model.Statement $r26, $r28, $r30, $r40, $r43;
        com.hp.hpl.jena.rdf.model.Resource $r20, r33, r35, $r45, r49;
        com.hp.hpl.jena.rdf.model.Model r13, $r22, $r36, $r39;
        java.lang.Object $r24;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r11 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Abbreviated;

        r10 := @parameter1: java.lang.String;

        r13 := @parameter2: com.hp.hpl.jena.rdf.model.Model;

        r12 := @parameter3: java.io.PrintWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doneSet> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set haveReified> = $r3;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes> = null;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set pleasingTypeSet> = $r4;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean avoidExplicitReification> = 1;

        $r5 = new com.hp.hpl.jena.xmloutput.impl.Unparser$2;

        specialinvoke $r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$2: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r0);

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wdesc> = $r5;

        $r6 = new com.hp.hpl.jena.xmloutput.impl.Unparser$3;

        specialinvoke $r6.<com.hp.hpl.jena.xmloutput.impl.Unparser$3: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r0);

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wtype> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set idDone> = $r7;

        $r8 = newarray (int)[8];

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int[] codeCoverage> = $r8;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int indentLevel> = 0;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn> = 0;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set openResIterators> = $r9;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void setLocalName(java.lang.String)>(r10);

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter> = r11;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.io.PrintWriter out> = r12;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model> = r13;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void addTypeNameSpaces()>();

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map objectTable> = $r14;

        $r15 = interfaceinvoke r13.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements()>();

     label01:
        $z0 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r43 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r44 = interfaceinvoke $r43.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z2 = $r44 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z2 == 0 goto label02;

        $r45 = (com.hp.hpl.jena.rdf.model.Resource) $r44;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void increaseObjectCount(com.hp.hpl.jena.rdf.model.Resource)>($r45);

     label02:
        goto label01;

     label03:
        interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        goto label06;

     label04:
        $r48 := @caughtexception;

     label05:
        interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        throw $r48;

     label06:
        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map res2statement> = $r16;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map statement2res> = $r17;

        $r18 = new com.hp.hpl.jena.util.iterator.MapFilterIterator;

        $r19 = new com.hp.hpl.jena.xmloutput.impl.Unparser$1;

        specialinvoke $r19.<com.hp.hpl.jena.xmloutput.impl.Unparser$1: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r0);

        $r22 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r21 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r20 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Statement>;

        $r23 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listResourcesWithProperty(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r21, $r20);

        specialinvoke $r18.<com.hp.hpl.jena.util.iterator.MapFilterIterator: void <init>(com.hp.hpl.jena.util.iterator.MapFilter,com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r19, $r23);

     label07:
        $z1 = interfaceinvoke $r18.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r24 = interfaceinvoke $r18.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r49 = (com.hp.hpl.jena.rdf.model.Resource) $r24;

     label08:
        $r25 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property subject>;

        $r26 = interfaceinvoke r49.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r25);

        $r27 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property predicate>;

        $r28 = interfaceinvoke r49.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r27);

        $r29 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property object>;

        $r30 = interfaceinvoke r49.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r29);

        $r31 = interfaceinvoke $r30.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r32 = interfaceinvoke $r26.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        r33 = (com.hp.hpl.jena.rdf.model.Resource) $r32;

        $r34 = interfaceinvoke $r28.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        r35 = (com.hp.hpl.jena.rdf.model.Resource) $r34;

        $r36 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r37 = interfaceinvoke r35.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r38 = interfaceinvoke $r36.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Property createProperty(java.lang.String)>($r37);

        $r39 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r40 = interfaceinvoke $r39.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement createStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r33, $r38, $r31);

        $r41 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map res2statement>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r49, $r40);

        $r42 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map statement2res>;

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, r49);

     label09:
        goto label11;

     label10:
        $r47 := @caughtexception;

     label11:
        goto label07;

     label12:
        interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        goto label15;

     label13:
        $r46 := @caughtexception;

     label14:
        interfaceinvoke $r15.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        throw $r46;

     label15:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void setLocalName(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        org.apache.jena.iri.IRIFactory $r2;
        java.lang.String r0, $r5;
        org.apache.jena.iri.IRI $r3, $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label2;

     label1:
        r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String localName> = "";

        goto label3;

     label2:
        $r2 = <com.hp.hpl.jena.xmloutput.impl.BaseXMLWriter: org.apache.jena.iri.IRIFactory factory>;

        $r3 = virtualinvoke $r2.<org.apache.jena.iri.IRIFactory: org.apache.jena.iri.IRI create(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<org.apache.jena.iri.IRI: org.apache.jena.iri.IRI create(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<org.apache.jena.iri.IRI: java.lang.String toString()>();

        r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String localName> = $r5;

     label3:
        return;
    }

    void write()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        virtualinvoke $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: void workOutNamespaces()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wRDF()>();

        return;
    }

    void setTopLevelTypes(com.hp.hpl.jena.rdf.model.Resource[])
    {
        java.util.HashSet $r2;
        java.util.List $r3;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource[] r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource[];

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes> = r1;

        $r2 = new java.util.HashSet;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set pleasingTypeSet> = $r2;

        return;
    }

    void setXMLBase(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String xmlBase> = r1;

        return;
    }

    private void wRDF()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1, $r4;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.String $r2, $r3, $r5, $r6, $r9, $r10, $r12;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String rdfEl(java.lang.String)>("RDF");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printNameSpaceDefn()>();

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String xmlBase>;

        if $r3 == null goto label1;

        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String xmlBase>;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void setLocalName(java.lang.String)>($r6);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xml:base=");

        $r9 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String xmlBase>;

        $r10 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String quote(java.lang.String)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r12);

     label1:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wObjStar()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String rdfEl(java.lang.String)>("RDF");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r5);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        return;
    }

    private void wObjStar()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Iterator $r1;
        java.lang.Object $r2;
        com.hp.hpl.jena.rdf.model.Resource r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Iterator listSubjects()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.rdf.model.Resource) $r2;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void increaseObjectCount(com.hp.hpl.jena.rdf.model.Resource)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wObj(com.hp.hpl.jena.rdf.model.Resource,boolean)>(r3, 1);

        goto label1;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void closeAllResIterators()>();

        return;
    }

    private boolean wPropertyElt(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode r4;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r1;
        com.hp.hpl.jena.rdf.model.Statement r3;
        com.hp.hpl.jena.rdf.model.Property r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r4 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltCompact(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltCollection(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltLiteral(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z2 != 0 goto label1;

        $z3 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltResource(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z3 != 0 goto label1;

        $z4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltDatatype(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z4 != 0 goto label1;

        $z5 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltValue(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }

    private boolean wPropertyEltCompact(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        java.util.Set $r6, $r7;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r4;
        com.hp.hpl.jena.rdf.model.Statement r3;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.Property r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r4 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r5 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r0 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $z1 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean allPropsAreAttr(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z1 != 0 goto label2;

        $r7 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        $z6 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z6 != 0 goto label2;

        return 0;

     label2:
        $z2 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean hasProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 != 0 goto label3;

        $z5 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z5 == 0 goto label3;

        return 0;

     label3:
        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r3);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdRefAttrOpt(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.Resource)>(r3, r1);

        $r6 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        $z3 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z3 != 0 goto label4;

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropAttrAll(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        goto label5;

     label4:
        $z4 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z4 == 0 goto label5;

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void error(java.lang.String)>("Genuine anon resource in cycle?");

     label5:
        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("/>");

        return 1;
    }

    private boolean wPropertyEltLiteral(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r5;
        com.hp.hpl.jena.rdf.model.Statement r4;
        com.hp.hpl.jena.rdf.model.Property r6;
        java.lang.String $r8;
        com.hp.hpl.jena.rdf.model.Literal $r3, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r5 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r4 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r2 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z0 = $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sParseTypeLiteralPropertyElt>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r2 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label2;

        $r3 = (com.hp.hpl.jena.rdf.model.Literal) r2;

        $z2 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Literal: boolean isWellFormedXML()>();

        if $z2 != 0 goto label3;

     label2:
        return 0;

     label3:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r4);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r4);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wParseLiteral()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        $r7 = (com.hp.hpl.jena.rdf.model.Literal) r2;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r8);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;
    }

    private boolean wPropertyEltDatatype(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r3;
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r5;
        com.hp.hpl.jena.rdf.model.Statement r4;
        com.hp.hpl.jena.rdf.model.Property r6;
        java.lang.String $r2, $r8, $r10, $r11;
        com.hp.hpl.jena.rdf.model.Literal $r1, $r7, $r9;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r5 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r4 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r0 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getDatatypeURI()>();

        if $r2 != null goto label2;

     label1:
        return 0;

     label2:
        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r4);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r4);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        $r7 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getDatatypeURI()>();

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wDatatype(java.lang.String)>($r8);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        $r9 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLexicalForm()>();

        $r11 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: java.lang.String substituteEntitiesInElementContent(java.lang.String)>($r10);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r11);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;
    }

    private boolean wPropertyEltResource(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r6;
        com.hp.hpl.jena.rdf.model.Statement $r4, r5;
        com.hp.hpl.jena.rdf.model.Resource r3;
        com.hp.hpl.jena.rdf.model.Property r7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r6 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r7 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r5 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r2 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z0 = $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sParseTypeResourcePropertyElt>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r2 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label2;

        return 0;

     label2:
        r3 = (com.hp.hpl.jena.rdf.model.Resource) r2;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r3);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement getType(com.hp.hpl.jena.rdf.model.Resource)>(r3);

        if $r4 == null goto label4;

        return 0;

     label4:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r5);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r6.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r7);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r5);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wParseResource()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropertyEltStar(com.hp.hpl.jena.rdf.model.Resource)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r6.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r7);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;
    }

    private boolean wPropertyEltValue(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode r4;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r1;
        com.hp.hpl.jena.rdf.model.Statement r3;
        com.hp.hpl.jena.rdf.model.Property r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r4 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltValueString(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyEltValueObj(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>(r1, r2, r3, r4);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean wPropertyEltValueString(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r5;
        com.hp.hpl.jena.rdf.model.Statement r2;
        com.hp.hpl.jena.rdf.model.Property r6;
        int $i0;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r4, $r9, $r11;
        com.hp.hpl.jena.rdf.model.Literal r3;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r5 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r0 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z0 == 0 goto label2;

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r2);

        r3 = (com.hp.hpl.jena.rdf.model.Literal) r0;

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r2);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" xml:lang=");

        $r9 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String q(java.lang.String)>($r4);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r11);

     label1:
        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wValueString(com.hp.hpl.jena.rdf.model.Literal)>(r3);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;

     label2:
        return 0;
    }

    private void wValueString(com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        java.lang.String $r1, $r3;
        com.hp.hpl.jena.rdf.model.Literal r0;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Literal;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        $r3 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: java.lang.String substituteEntitiesInElementContent(java.lang.String)>($r1);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r3);

        return;
    }

    private boolean wPropertyEltValueObj(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r5;
        com.hp.hpl.jena.rdf.model.Statement r4;
        com.hp.hpl.jena.rdf.model.Resource r3;
        com.hp.hpl.jena.rdf.model.Property r6;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r5 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r4 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r0 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 == 0 goto label1;

        $r2 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z1 = $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sResourcePropertyElt>;

        if $z1 != 0 goto label1;

        r3 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r4);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r4);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wObj(com.hp.hpl.jena.rdf.model.Resource,boolean)>(r3, 0);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r6);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;

     label1:
        return 0;
    }

    private boolean wPropertyEltCollection(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Statement[][] $r2;
        com.hp.hpl.jena.rdf.model.Property r5;
        int $i0, $i1, i2, i3;
        com.hp.hpl.jena.rdf.model.RDFNode r1, $r8;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r4;
        com.hp.hpl.jena.rdf.model.Statement r3, $r7, $r11, $r13;
        com.hp.hpl.jena.rdf.model.Resource $r9;
        com.hp.hpl.jena.rdf.model.Statement[] $r6, $r10, $r12;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r4 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r5 := @parameter1: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter2: com.hp.hpl.jena.rdf.model.Statement;

        r1 := @parameter3: com.hp.hpl.jena.rdf.model.RDFNode;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement[][] getRDFList(com.hp.hpl.jena.rdf.model.RDFNode)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r3);

        i2 = 0;

     label2:
        $i0 = lengthof $r2;

        if i2 >= $i0 goto label3;

        $r10 = $r2[i2];

        $r11 = $r10[0];

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>($r11);

        $r12 = $r2[i2];

        $r13 = $r12[1];

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>($r13);

        i2 = i2 + 1;

        goto label2;

     label3:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wParseCollection()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        i3 = 0;

     label4:
        $i1 = lengthof $r2;

        if i3 >= $i1 goto label5;

        $r6 = $r2[i3];

        $r7 = $r6[0];

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r9 = (com.hp.hpl.jena.rdf.model.Resource) $r8;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wObj(com.hp.hpl.jena.rdf.model.Resource,boolean)>($r9, 0);

        i3 = i3 + 1;

        goto label4;

     label5:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r4.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;
    }

    private void wPropAttrAll(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropAttrSome(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean hasProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void error(java.lang.String)>("Bad call to wPropAttrAll");

     label1:
        return;
    }

    private void wPropAttrSome(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Throwable $r8;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        com.hp.hpl.jena.rdf.model.Statement r5;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.util.HashSet $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r6;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.util.iterator.ExtendedIterator listProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label1:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

     label2:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.rdf.model.Statement) $r4;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean canBeAttribute(com.hp.hpl.jena.rdf.model.Statement,java.util.Set)>(r5, $r3);

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>(r5);

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropAttr(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>($r6, $r7);

     label3:
        goto label2;

     label4:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean wObj(com.hp.hpl.jena.rdf.model.Resource, boolean)
    {
        java.lang.Throwable $r9;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r2, $r4, $r6, $r7, $r8, $r10;
        com.hp.hpl.jena.rdf.model.Statement $r3;
        com.hp.hpl.jena.rdf.model.Resource r1, $r5;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        z1 := @parameter1: boolean;

     label01:
        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement getType(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $r3 == null goto label07;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        if z1 != 0 goto label03;

        $r7 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set pleasingTypeSet>;

        $z3 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z3 == 0 goto label03;

        $z4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z4 != 0 goto label03;

        $z5 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wTypedNodeNoProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label02:
        $r8 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return $z5;

     label03:
        $z6 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wTypedNode(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z6 != 0 goto label04;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wDescription(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 == 0 goto label05;

     label04:
        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return $z7;

     label07:
        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wDescription(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label08:
        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return $z0;

     label09:
        $r9 := @caughtexception;

     label10:
        $r10 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doing>;

        interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private boolean wDescription(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Property $r2;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType $r3;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wdesc>;

        $r2 = <com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Property DESCRIPTION>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wTypedNodeOrDescription(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>($r3, $r2, r1);

        return $z0;
    }

    private boolean wTypedNode(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType $r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement getType(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>($r2);

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wtype>;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wTypedNodeOrDescription(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>($r4, $r3, r1);

        return $z0;
    }

    private boolean wTypedNodeOrDescription(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Throwable $r9;
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        java.util.Vector $r12;
        com.hp.hpl.jena.rdf.model.Property $r8;
        int $i0, $i1, $i2, i3, $i5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r4;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r5;
        com.hp.hpl.jena.rdf.model.Statement r10;
        com.hp.hpl.jena.rdf.model.Resource r2, r6;
        java.util.List $r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        java.lang.Object $r7;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r5 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r6 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        $r12 = new java.util.Vector;

        specialinvoke $r12.<java.util.Vector: void <init>()>();

        $r3 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.util.iterator.ExtendedIterator listProperties(com.hp.hpl.jena.rdf.model.Resource)>(r2);

     label01:
        i3 = 0;

        $r4 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z0 = $r4.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sListExpand>;

        if $z0 != 0 goto label05;

     label02:
        $z3 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r7 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.rdf.model.Statement) $r7;

        $r8 = interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $i1 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Property: int getOrdinal()>();

        if $i1 == 0 goto label04;

        if $i1 <= i3 goto label03;

        virtualinvoke $r12.<java.util.Vector: void setSize(int)>($i1);

        i3 = $i1;

     label03:
        $i2 = $i1 - 1;

        virtualinvoke $r12.<java.util.Vector: java.lang.Object set(int,java.lang.Object)>($i2, r10);

     label04:
        goto label02;

     label05:
        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        goto label08;

     label06:
        $r9 := @caughtexception;

     label07:
        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r9;

     label08:
        $i0 = virtualinvoke $r12.<java.util.Vector: int indexOf(java.lang.Object)>(null);

        $i5 = (int) -1;

        if $i0 != $i5 goto label09;

        $r11 = $r12;

        goto label10;

     label09:
        $r11 = virtualinvoke $r12.<java.util.Vector: java.util.List subList(int,int)>(0, $i0);

     label10:
        $z1 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wTypedNodeOrDescriptionCompact(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,java.util.List)>(r5, r6, r2, $r11);

        if $z1 != 0 goto label11;

        $z2 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wTypedNodeOrDescriptionLong(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,java.util.List)>(r5, r6, r2, $r11);

        if $z2 == 0 goto label12;

     label11:
        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        return $z4;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private boolean wTypedNodeOrDescriptionCompact(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource, java.util.List)
    {
        java.util.List r0;
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r3;
        com.hp.hpl.jena.rdf.model.Resource r2, r4;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r3 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r2 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        r0 := @parameter3: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean allPropsAreAttr(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r4);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wIdAboutAttrOpt(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropAttrAll(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("/>");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        return 1;
    }

    private boolean wTypedNodeNoProperties(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType $r4;
        com.hp.hpl.jena.rdf.model.Statement $r2;
        com.hp.hpl.jena.rdf.model.Resource r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement getType(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $r2 != null goto label2;

        return 0;

     label2:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>($r2);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wtype>;

        virtualinvoke $r4.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>($r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wIdAboutAttrOpt(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("/>");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        return 1;
    }

    private boolean wTypedNodeOrDescriptionLong(com.hp.hpl.jena.xmloutput.impl.Unparser$WType, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Resource, java.util.List)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        java.util.Iterator $r1, $r6;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType r3;
        com.hp.hpl.jena.rdf.model.Statement $r8;
        com.hp.hpl.jena.rdf.model.Resource r4, r5;
        java.util.List r0;
        java.lang.Object $r7;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r3 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser$WType;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r5 := @parameter2: com.hp.hpl.jena.rdf.model.Resource;

        r0 := @parameter3: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.hp.hpl.jena.rdf.model.Statement) $r7;

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>($r8);

        goto label1;

     label2:
        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("<");

        virtualinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeStart(com.hp.hpl.jena.rdf.model.Resource)>(r4);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentPlus()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wIdAboutAttrOpt(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropAttrSome(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        $r6 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wLiEltStar(java.util.Iterator)>($r6);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropertyEltStar(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void indentMinus()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("</");

        virtualinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser$WType: void wTypeEnd(com.hp.hpl.jena.rdf.model.Resource)>(r4);

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(">");

        return 1;
    }

    private void wPropertyEltStar(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Throwable $r8;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType $r5;
        com.hp.hpl.jena.rdf.model.Statement r4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r6;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.util.iterator.ExtendedIterator listProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.rdf.model.Statement) $r3;

        $r5 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wtype>;

        $r6 = interfaceinvoke r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r7 = interfaceinvoke r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyElt(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>($r5, $r6, r4, $r7);

        goto label1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        goto label5;

     label3:
        $r8 := @caughtexception;

     label4:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r8;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void wLiEltStar(java.util.Iterator)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r3;
        java.util.Iterator r0;
        com.hp.hpl.jena.rdf.model.RDFNode $r6;
        com.hp.hpl.jena.xmloutput.impl.Unparser$WType $r4;
        com.hp.hpl.jena.rdf.model.Statement r2;
        com.hp.hpl.jena.rdf.model.Property $r5;
        java.lang.Object $r1;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.rdf.model.Statement) $r1;

        $r4 = r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Unparser$WType wdesc>;

        $r5 = <com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Property LI>;

        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        specialinvoke r3.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wPropertyElt(com.hp.hpl.jena.xmloutput.impl.Unparser$WType,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.RDFNode)>($r4, $r5, r2, $r6);

        goto label1;

     label2:
        return;
    }

    private boolean wIdAboutAttrOpt(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wIdAttrOpt(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wNodeIDAttr(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wAboutAttr(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private boolean wIdAttrOpt(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Set $r3, $r4;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z1 = $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sIdAttr>;

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $z3 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isLocalReference(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z3 == 0 goto label6;

        $z4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wantReification(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z4 == 0 goto label4;

        return 0;

     label4:
        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set idDone>;

        $z5 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z5 == 0 goto label5;

        return 0;

     label5:
        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set idDone>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("ID");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        $r5 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String getLocalName(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r6 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String quote(java.lang.String)>($r5);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r6);

        return 1;

     label6:
        return 0;
    }

    private boolean wAboutAttr(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("about");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wURIreference(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        return 1;
    }

    private void wURIreference(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1, $r3, $r4;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String relativize(java.lang.String)>(r1);

        $r4 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String quote(java.lang.String)>($r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r4);

        return;
    }

    private void wURIreference(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wURIreference(java.lang.String)>($r2);

        return;
    }

    private void wIdRefAttrOpt(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Statement r1;
        com.hp.hpl.jena.rdf.model.Resource r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)>(r1);

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wResourceNodeIDAttr(com.hp.hpl.jena.rdf.model.Resource)>(r2);

     label1:
        return;
    }

    private void wIdAttrReified(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Set $r6, $r9;
        com.hp.hpl.jena.rdf.model.Statement r1, $r10;
        com.hp.hpl.jena.rdf.model.Resource r5;
        java.util.Map $r3;
        com.hp.hpl.jena.rdf.model.Statement[] $r2;
        int $i0, i1;
        java.lang.Object $r4;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wantReification(com.hp.hpl.jena.rdf.model.Statement)>(r1);

        if $z0 == 0 goto label3;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement[] reification(com.hp.hpl.jena.rdf.model.Statement)>(r1);

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map statement2res>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set idDone>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r5);

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r10 = $r2[i1];

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void done(com.hp.hpl.jena.rdf.model.Statement)>($r10);

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("ID");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        $r7 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String getLocalName(com.hp.hpl.jena.rdf.model.Resource)>(r5);

        $r8 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String quote(java.lang.String)>($r7);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r8);

        $r9 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set haveReified>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label3:
        return;
    }

    private boolean wResourceNodeIDAttr(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wNodeIDAttr(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wResourceAttr(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private boolean wNodeIDAttr(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;
        java.lang.String $r3, $r4;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("nodeID");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        $r2 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String anonId(com.hp.hpl.jena.rdf.model.Resource)>(r0);

        $r4 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String q(java.lang.String)>($r3);

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r4);

        return 1;
    }

    private boolean wResourceAttr(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.rdf.model.Resource r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("resource");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wURIreference(com.hp.hpl.jena.rdf.model.Resource)>(r0);

        return 1;
    }

    private void wQNameAttr(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;
        java.lang.String $r3, $r4;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Property: java.lang.String getURI()>();

        $r4 = virtualinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String attributeTag(java.lang.String)>($r3);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r4);

        return;
    }

    private void printRdfAt(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String rdfAt(java.lang.String)>(r1);

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r3);

        return;
    }

    private void wPropAttr(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode r3;
        com.hp.hpl.jena.rdf.model.Property r1, $r2;
        com.hp.hpl.jena.rdf.model.Literal $r4;
        com.hp.hpl.jena.rdf.model.Resource $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.RDFNode;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

        $r2 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r5 = (com.hp.hpl.jena.rdf.model.Resource) r3;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wTypeAttr(com.hp.hpl.jena.rdf.model.Resource)>($r5);

        goto label2;

     label1:
        $r4 = (com.hp.hpl.jena.rdf.model.Literal) r3;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wPropAttrString(com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Literal)>(r1, $r4);

     label2:
        return;
    }

    private void wTypeAttr(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("type");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wURIreference(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        return;
    }

    private void wPropAttrString(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Literal)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.StringBuilder $r2, $r3, $r7;
        java.lang.String $r5, $r6, $r8;
        com.hp.hpl.jena.rdf.model.Literal r4;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Literal;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wQNameAttr(com.hp.hpl.jena.rdf.model.Property)>(r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r5 = interfaceinvoke r4.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        $r6 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String quote(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r8);

        return;
    }

    private void wParseCollection()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("parseType");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String q(java.lang.String)>("Collection");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r5);

        return;
    }

    private void wParseLiteral()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("parseType");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String q(java.lang.String)>("Literal");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r5);

        return;
    }

    private void wDatatype(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("datatype");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>("=");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void maybeNewline()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void wURIreference(java.lang.String)>(r1);

        return;
    }

    private void wParseResource()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(" ");

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void printRdfAt(java.lang.String)>("parseType");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r3 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String q(java.lang.String)>("Resource");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r5);

        return;
    }

    private void printNameSpaceDefn()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String xmlnsDecl()>();

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>($r2);

        return;
    }

    private static java.lang.String filler(int)
    {
        int i0;
        char[] r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        r0 = newarray (char)[i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r0, 32);

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    private void tab()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.String $r5, $r6;
        java.io.PrintWriter $r3, $r4, $r7;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1, $r2, $r8;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $i1 = $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: int tabSize>;

        $i0 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int indentLevel>;

        i10 = $i1 * $i0;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $i2 = $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: int width>;

        if i10 <= $i2 goto label1;

        $i8 = i10 - 4;

        $r8 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $i7 = $r8.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: int width>;

        $i9 = $i8 % $i7;

        i10 = 4 + $i9;

     label1:
        if i10 != 0 goto label2;

        $i6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn>;

        if $i6 == 0 goto label3;

     label2:
        $i3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn>;

        if i10 <= $i3 goto label4;

     label3:
        $i4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn>;

        $i5 = i10 - $i4;

        $r6 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String filler(int)>($i5);

        $r7 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.io.PrintWriter out>;

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        goto label5;

     label4:
        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.io.PrintWriter out>;

        virtualinvoke $r3.<java.io.PrintWriter: void println()>();

        $r4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.io.PrintWriter out>;

        $r5 = staticinvoke <com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String filler(int)>(i10);

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>($r5);

     label5:
        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn> = i10;

        return;
    }

    private void maybeNewline()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        int $i0, $i1;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $i1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn>;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $i0 = $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: int width>;

        if $i1 <= $i0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void tab()>();

     label1:
        return;
    }

    private java.lang.String quote(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String substitutedAttribute(java.lang.String)>(r1);

        return $r3;
    }

    private java.lang.String q(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1, $r3;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: java.lang.String attributeQuoted(java.lang.String)>(r1);

        return $r3;
    }

    private void print(java.lang.String)
    {
        java.io.PrintWriter $r2;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.io.PrintWriter out>;

        virtualinvoke $r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(10);

        $i8 = (int) -1;

        if $i0 != $i8 goto label1;

        $i4 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn>;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn> = $i6;

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 - $i0;

        $i3 = $i2 - 1;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int currentColumn> = $i3;

     label2:
        return;
    }

    private void indentPlus()
    {
        int $i0, $i1;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $i0 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int indentLevel>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int indentLevel> = $i1;

        return;
    }

    private void indentMinus()
    {
        int $i0, $i1;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $i0 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int indentLevel>;

        $i1 = $i0 - 1;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int indentLevel> = $i1;

        return;
    }

    private void error(java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r6;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r7;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;
        com.hp.hpl.jena.shared.BrokenException $r0;

        r6 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r3 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.shared.BrokenException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error in Unparser: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.shared.BrokenException: void <init>(java.lang.String)>($r5);

        $r7 = r6.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        virtualinvoke $r7.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: void fatalError(java.lang.Exception)>($r0);

        throw $r0;
    }

    private void addTypeNameSpaces()
    {
        java.lang.Throwable $r9;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r6;
        com.hp.hpl.jena.rdf.model.Resource $r5;
        com.hp.hpl.jena.rdf.model.NodeIterator $r3;
        com.hp.hpl.jena.rdf.model.Property $r1;
        com.hp.hpl.jena.rdf.model.Model $r2;
        int $i0, $i2;
        java.lang.String $r7, $r8;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.NodeIterator listObjectsOfProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.NodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.NodeIterator: com.hp.hpl.jena.rdf.model.RDFNode nextNode()>();

        $i0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: int isOKType(com.hp.hpl.jena.rdf.model.RDFNode)>($r4);

        $i2 = (int) -1;

        if $i0 == $i2 goto label2;

        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        virtualinvoke $r6.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: void addNameSpace(java.lang.String)>($r8);

     label2:
        goto label1;

     label3:
        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.NodeIterator: void close()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.NodeIterator: void close()>();

        throw $r9;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.lang.String getNameSpace(com.hp.hpl.jena.rdf.model.Resource)
    {
        org.slf4j.Logger $r3;
        com.hp.hpl.jena.xmloutput.impl.Unparser r5;
        com.hp.hpl.jena.rdf.model.Resource r0;
        int $i0;
        java.lang.String $r1, $r2;
        com.hp.hpl.jena.shared.BrokenException $r4;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 == 0 goto label1;

        $r3 = <com.hp.hpl.jena.xmloutput.impl.Unparser: org.slf4j.Logger logger>;

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String)>("Internal error - Unparser.getNameSpace; giving up");

        $r4 = new com.hp.hpl.jena.shared.BrokenException;

        specialinvoke $r4.<com.hp.hpl.jena.shared.BrokenException: void <init>(java.lang.String)>("Internal error: getNameSpace(bNode)");

        throw $r4;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $i0 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: int splitNamespace(java.lang.String)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r2;
    }

    private boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        java.util.Set $r6;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r5;
        java.lang.Integer r4;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map objectTable>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (java.lang.Integer) $r3;

        if r4 == null goto label2;

        $r5 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z1 = $r5.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sResourcePropertyElt>;

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        if $i0 > 1 goto label3;

        $r6 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set haveReified>;

        $z2 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z2 != 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private boolean isLocalReference(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.rdf.model.Resource r0;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r2, $r4, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 != 0 goto label1;

        $r2 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String getNameSpace(com.hp.hpl.jena.rdf.model.Resource)>(r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String localName>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

        $r8 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String getLocalName(com.hp.hpl.jena.rdf.model.Resource)>(r0);

        $z2 = staticinvoke <org.apache.xerces.util.XMLChar: boolean isValidNCName(java.lang.String)>($r8);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private java.lang.String getLocalName(com.hp.hpl.jena.rdf.model.Resource)
    {
        org.slf4j.Logger $r3;
        com.hp.hpl.jena.xmloutput.impl.Unparser r5;
        com.hp.hpl.jena.rdf.model.Resource r0;
        int $i0;
        java.lang.String $r1, $r2;
        com.hp.hpl.jena.shared.BrokenException $r4;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 == 0 goto label1;

        $r3 = <com.hp.hpl.jena.xmloutput.impl.Unparser: org.slf4j.Logger logger>;

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String)>("Internal error - giving up - Unparser.getLocalName");

        $r4 = new com.hp.hpl.jena.shared.BrokenException;

        specialinvoke $r4.<com.hp.hpl.jena.shared.BrokenException: void <init>(java.lang.String)>("Internal error: getLocalName(bNode)");

        throw $r4;

     label1:
        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $i0 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: int splitNamespace(java.lang.String)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;
    }

    private void increaseObjectCount(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.Integer $r4, r6, r7;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.util.Map $r2, $r5;
        int $i0, $i1;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map objectTable>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Integer) $r3;

        if r6 != null goto label1;

        r7 = <com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.Integer one>;

        goto label2;

     label1:
        $r4 = new java.lang.Integer;

        $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        r7 = $r4;

     label2:
        $r5 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map objectTable>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

        return;
    }

    private boolean wantReification(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.rdf.model.Statement r1;
        com.hp.hpl.jena.rdf.model.Resource $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map statement2res>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.rdf.model.Resource) $r3;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wantReification(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.Resource)>(r1, $r4);

        return $z0;
    }

    private boolean wantReification(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map res2statement>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (com.hp.hpl.jena.rdf.model.Statement) $r3;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wantReification(com.hp.hpl.jena.rdf.model.Statement,com.hp.hpl.jena.rdf.model.Resource)>($r4, r1);

        return $z0;
    }

    private boolean wantReification(com.hp.hpl.jena.rdf.model.Statement, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Set $r6;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r3;
        com.hp.hpl.jena.rdf.model.Statement r0, $r5, $r7;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.rdf.model.Statement[] $r4;
        com.hp.hpl.jena.rdf.model.Model $r8;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z0 != 0 goto label1;

        $r3 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z1 = $r3.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sReification>;

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z2 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isLocalReference(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $r4 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement[] reification(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        i1 = 0;

     label4:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label7;

        $r6 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doneSet>;

        $r5 = $r4[i1];

        $z3 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z3 != 0 goto label5;

        $r8 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r7 = $r4[i1];

        $z4 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Model: boolean contains(com.hp.hpl.jena.rdf.model.Statement)>($r7);

        if $z4 != 0 goto label6;

     label5:
        return 0;

     label6:
        i1 = i1 + 1;

        goto label4;

     label7:
        return 1;
    }

    private com.hp.hpl.jena.rdf.model.Statement[] reification(com.hp.hpl.jena.rdf.model.Statement)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        java.util.Map $r3;
        com.hp.hpl.jena.rdf.model.Property $r8, $r10, $r13, $r14, $r16;
        com.hp.hpl.jena.rdf.model.RDFNode $r17;
        com.hp.hpl.jena.rdf.model.Statement r0, $r9, $r12, $r15, $r18;
        com.hp.hpl.jena.rdf.model.Resource r5, $r7, $r11;
        com.hp.hpl.jena.rdf.model.Model $r1;
        com.hp.hpl.jena.rdf.model.Statement[] $r6;
        java.lang.Object $r4;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Model getModel()>();

        $r3 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map statement2res>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (com.hp.hpl.jena.rdf.model.Resource) $r4;

        $r6 = newarray (com.hp.hpl.jena.rdf.model.Statement)[4];

        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r7 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Statement>;

        $r9 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement createStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r5, $r8, $r7);

        $r6[0] = $r9;

        $r10 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property subject>;

        $r11 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r12 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement createStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r5, $r10, $r11);

        $r6[1] = $r12;

        $r13 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property predicate>;

        $r14 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r15 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement createStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r5, $r13, $r14);

        $r6[2] = $r15;

        $r16 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property object>;

        $r17 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r18 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Statement createStatement(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r5, $r16, $r17);

        $r6[3] = $r18;

        return $r6;
    }

    private boolean hasProperties(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser$4 $r5;
        java.lang.Throwable $r6;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.util.iterator.MapFilterIterator $r4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2, r7;
        java.util.Map $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.util.iterator.ExtendedIterator listProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        r7 = $r2;

        $z0 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean avoidExplicitReification>;

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z1 != 0 goto label1;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isLocalReference(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        if $z2 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map res2statement>;

        $z3 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z3 == 0 goto label1;

        $r4 = new com.hp.hpl.jena.util.iterator.MapFilterIterator;

        $r5 = new com.hp.hpl.jena.xmloutput.impl.Unparser$4;

        specialinvoke $r5.<com.hp.hpl.jena.xmloutput.impl.Unparser$4: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r0);

        specialinvoke $r4.<com.hp.hpl.jena.util.iterator.MapFilterIterator: void <init>(com.hp.hpl.jena.util.iterator.MapFilter,com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r5, $r2);

        r7 = $r4;

     label1:
        $z4 = interfaceinvoke r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

     label2:
        interfaceinvoke r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return $z4;

     label3:
        $r6 := @caughtexception;

     label4:
        interfaceinvoke r7.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.hp.hpl.jena.util.iterator.ExtendedIterator listProperties(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        com.hp.hpl.jena.util.iterator.MapFilterIterator $r0;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4;
        com.hp.hpl.jena.xmloutput.impl.Unparser$5 $r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r3 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new com.hp.hpl.jena.util.iterator.MapFilterIterator;

        $r1 = new com.hp.hpl.jena.xmloutput.impl.Unparser$5;

        specialinvoke $r1.<com.hp.hpl.jena.xmloutput.impl.Unparser$5: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r2);

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

        specialinvoke $r0.<com.hp.hpl.jena.util.iterator.MapFilterIterator: void <init>(com.hp.hpl.jena.util.iterator.MapFilter,com.hp.hpl.jena.util.iterator.ExtendedIterator)>($r1, $r4);

        return $r0;
    }

    private boolean canBeAttribute(com.hp.hpl.jena.rdf.model.Statement, java.util.Set)
    {
        com.hp.hpl.jena.rdf.model.Property $r1, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.rdf.model.RDFNode $r6, $r14;
        java.util.Set r4;
        com.hp.hpl.jena.rdf.model.Literal $r7;
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        int $i0, $i1, i5, $i6, $i7, $i9, $i10, $i12;
        java.lang.String $r8, $r9, $r11, $r12;
        char $c2, $c3, $c4;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r3, $r10;
        com.hp.hpl.jena.rdf.model.Statement r0;
        char[] $r13;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        r4 := @parameter1: java.util.Set;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r3 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z0 = $r3.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sPropertyAttr>;

        if $z0 != 0 goto label01;

        $z1 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z1 == 0 goto label02;

     label01:
        return 0;

     label02:
        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z2 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label03;

        $r14 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z7 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.RDFNode: boolean isURIResource()>();

        return $z7;

     label03:
        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z3 = $r6 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z3 == 0 goto label12;

        $r7 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Literal getLiteral()>();

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getDatatypeURI()>();

        if $r8 == null goto label04;

        return 0;

     label04:
        $r9 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getLanguage()>();

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 == 0 goto label12;

        $r10 = r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $r11 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String getNameSpace(com.hp.hpl.jena.rdf.model.Resource)>($r1);

        $z5 = virtualinvoke $r10.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean isDefaultNamespace(java.lang.String)>($r11);

        if $z5 == 0 goto label05;

        return 0;

     label05:
        $r12 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Literal: java.lang.String getString()>();

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i0 >= 40 goto label12;

        $r13 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        i5 = 0;

     label06:
        $i1 = lengthof $r13;

        if i5 >= $i1 goto label09;

        $c2 = $r13[i5];

        $i6 = (int) $c2;

        if $i6 <= 32 goto label07;

        $c3 = $r13[i5];

        $i7 = (int) $c3;

        $i9 = (int) 65535;

        if $i7 == $i9 goto label07;

        $c4 = $r13[i5];

        $i10 = (int) $c4;

        $i12 = (int) 65534;

        if $i10 != $i12 goto label08;

     label07:
        return 0;

     label08:
        i5 = i5 + 1;

        goto label06;

     label09:
        $z6 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wantReification(com.hp.hpl.jena.rdf.model.Statement)>(r0);

        if $z6 != 0 goto label10;

        $z8 = 1;

        goto label11;

     label10:
        $z8 = 0;

     label11:
        return $z8;

     label12:
        return 0;
    }

    private boolean allPropsAreAttr(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.lang.Throwable $r6;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Statement r5;
        com.hp.hpl.jena.rdf.model.Resource r1;
        java.util.HashSet $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.util.iterator.ExtendedIterator listProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.rdf.model.Statement) $r4;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean canBeAttribute(com.hp.hpl.jena.rdf.model.Statement,java.util.Set)>(r5, $r3);

        if $z1 != 0 goto label3;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return 0;

     label3:
        goto label1;

     label4:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        goto label7;

     label5:
        $r6 := @caughtexception;

     label6:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r6;

     label7:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void done(com.hp.hpl.jena.rdf.model.Statement)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Statement r1;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Statement;

        $r2 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doneSet>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private com.hp.hpl.jena.rdf.model.Statement[][] getRDFList(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode r2;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;
        com.hp.hpl.jena.rdf.model.Resource $r3;
        com.hp.hpl.jena.rdf.model.Statement[][] $r6;
        com.hp.hpl.jena.rdf.model.Property $r4, $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        $z0 = $r1.<com.hp.hpl.jena.xmloutput.impl.Abbreviated: boolean sParseTypeCollectionPropertyElt>;

        if $z0 == 0 goto label1;

        $r6 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

        goto label2;

     label1:
        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property first>;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property rest>;

        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource nil>;

        $r6 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement[][] getList(com.hp.hpl.jena.rdf.model.RDFNode,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.Resource)>(r2, null, $r5, $r4, $r3);

     label2:
        return $r6;
    }

    private com.hp.hpl.jena.rdf.model.Statement[][] getList(com.hp.hpl.jena.rdf.model.RDFNode, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Vector $r0;
        byte $b3, b4, b6, b7;
        com.hp.hpl.jena.rdf.model.StmtIterator $r6;
        com.hp.hpl.jena.rdf.model.Property $r9, $r12, r13, r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.hp.hpl.jena.rdf.model.RDFNode r2, $r10, r18;
        java.util.Set $r11;
        java.lang.Throwable $r16, $r17;
        com.hp.hpl.jena.xmloutput.impl.Unparser r5;
        com.hp.hpl.jena.rdf.model.Statement[][] r19, r21, r22, r23, r24, r25, r26, r28, r29, r30, r31;
        java.util.HashSet $r1;
        int $i0, $i1, $i2, i5;
        com.hp.hpl.jena.rdf.model.Statement $r7, $r8, $r27;
        com.hp.hpl.jena.rdf.model.Resource r3, r4, r20;
        com.hp.hpl.jena.rdf.model.Statement[] $r15;

        r5 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        r4 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r13 := @parameter2: com.hp.hpl.jena.rdf.model.Property;

        r14 := @parameter3: com.hp.hpl.jena.rdf.model.Property;

        r3 := @parameter4: com.hp.hpl.jena.rdf.model.Resource;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r18 = r2;

     label01:
        $z0 = virtualinvoke r18.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label36;

        if r4 != null goto label02;

        $b3 = 2;

        goto label03;

     label02:
        $b3 = 3;

     label03:
        $r15 = newarray (com.hp.hpl.jena.rdf.model.Statement)[$b3];

        $z1 = r18 instanceof com.hp.hpl.jena.rdf.model.Literal;

        if $z1 == 0 goto label05;

        r19 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label04:
        return r19;

     label05:
        r20 = (com.hp.hpl.jena.rdf.model.Resource) r18;

        $z2 = specialinvoke r5.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r20);

        if $z2 != 0 goto label07;

        r21 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label06:
        return r21;

     label07:
        $z3 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r18);

        if $z3 == 0 goto label09;

        r22 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label08:
        return r22;

     label09:
        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r18);

        $r6 = interfaceinvoke r20.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

     label10:
        $z4 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z4 == 0 goto label28;

        $r8 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r11 = r5.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doneSet>;

        $z5 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r8);

        if $z5 == 0 goto label13;

        r23 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label11:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label12:
        return r23;

     label13:
        $z6 = $r10 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z6 != 0 goto label16;

        r24 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label14:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label15:
        return r24;

     label16:
        $r12 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $z7 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z7 == 0 goto label19;

        b4 = 2;

        b7 = 2;

        b6 = 2;

        $z10 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z10 != 0 goto label24;

        r25 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label17:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label18:
        return r25;

     label19:
        $z8 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r13);

        if $z8 == 0 goto label20;

        b4 = 0;

        b7 = 0;

        b6 = 0;

        goto label24;

     label20:
        $z9 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r14);

        if $z9 == 0 goto label21;

        b4 = 1;

        b7 = 1;

        b6 = 1;

        r18 = $r10;

        goto label24;

     label21:
        r26 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label22:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label23:
        return r26;

     label24:
        $r27 = $r15[b6];

        if $r27 == null goto label27;

        r28 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label25:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

     label26:
        return r28;

     label27:
        $r15[b7] = $r8;

        goto label10;

     label28:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        goto label31;

     label29:
        $r17 := @caughtexception;

     label30:
        interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        throw $r17;

     label31:
        i5 = 0;

     label32:
        $i2 = lengthof $r15;

        if i5 >= $i2 goto label35;

        $r7 = $r15[i5];

        if $r7 != null goto label34;

        r29 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label33:
        return r29;

     label34:
        i5 = i5 + 1;

        goto label32;

     label35:
        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r15);

        goto label01;

     label36:
        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if $i0 != 0 goto label38;

        r30 = (com.hp.hpl.jena.rdf.model.Statement[][]) null;

     label37:
        return r30;

     label38:
        goto label41;

     label39:
        $r16 := @caughtexception;

     label40:
        throw $r16;

     label41:
        $i1 = virtualinvoke $r0.<java.util.Vector: int size()>();

        r31 = newarray (com.hp.hpl.jena.rdf.model.Statement[])[$i1];

        virtualinvoke $r0.<java.util.Vector: void copyInto(java.lang.Object[])>(r31);

        return r31;

        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label19 to label22 with label29;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
        catch java.lang.Throwable from label01 to label04 with label39;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch java.lang.Throwable from label07 to label08 with label39;
        catch java.lang.Throwable from label09 to label12 with label39;
        catch java.lang.Throwable from label13 to label15 with label39;
        catch java.lang.Throwable from label16 to label18 with label39;
        catch java.lang.Throwable from label19 to label23 with label39;
        catch java.lang.Throwable from label24 to label26 with label39;
        catch java.lang.Throwable from label27 to label33 with label39;
        catch java.lang.Throwable from label34 to label37 with label39;
        catch java.lang.Throwable from label39 to label40 with label39;
    }

    private com.hp.hpl.jena.rdf.model.Statement getType(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r2;
        com.hp.hpl.jena.rdf.model.Property $r1, $r4;
        int $i0, $i2;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.rdf.model.RDFNode $r3, $r7;
        com.hp.hpl.jena.shared.PropertyNotFoundException $r9;
        com.hp.hpl.jena.rdf.model.Statement $r5, $r6, r10;
        com.hp.hpl.jena.rdf.model.Resource r0, $r8;

        r2 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

     label1:
        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Statement;

        if $z0 == 0 goto label3;

        $r5 = (com.hp.hpl.jena.rdf.model.Statement) r0;

        $r4 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Statement getStatementProperty(com.hp.hpl.jena.rdf.model.Property)>($r4);

        r10 = $r6;

        if $r6 == null goto label2;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r8 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Statement>;

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

     label2:
        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void error(java.lang.String)>("Statement type problem");

        goto label4;

     label3:
        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        r10 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Statement getRequiredProperty(com.hp.hpl.jena.rdf.model.Property)>($r1);

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        $z2 = r0 instanceof com.hp.hpl.jena.rdf.model.Statement;

        if $z2 == 0 goto label6;

        specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: void error(java.lang.String)>("Statement type problem");

     label6:
        r10 = null;

     label7:
        if r10 == null goto label8;

        $r3 = interfaceinvoke r10.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $i0 = specialinvoke r2.<com.hp.hpl.jena.xmloutput.impl.Unparser: int isOKType(com.hp.hpl.jena.rdf.model.RDFNode)>($r3);

        $i2 = (int) -1;

        if $i0 != $i2 goto label9;

     label8:
        return null;

     label9:
        return r10;

        catch com.hp.hpl.jena.shared.PropertyNotFoundException from label1 to label4 with label5;
    }

    private int isOKType(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r4;
        com.hp.hpl.jena.rdf.model.RDFNode r0;
        com.hp.hpl.jena.rdf.model.Resource $r1, $r2;
        int $i0, $i1, $i3, $i5, $i7;
        java.lang.String $r3;
        boolean $z0, $z1;

        r4 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $z0 = r0 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z0 != 0 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r1 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $z1 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Resource: boolean isAnon()>();

        if $z1 == 0 goto label2;

        $i5 = (int) -1;

        return $i5;

     label2:
        $r2 = (com.hp.hpl.jena.rdf.model.Resource) r0;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $i0 = staticinvoke <com.hp.hpl.jena.rdf.model.impl.Util: int splitNamespace(java.lang.String)>($r3);

        if $i0 == 0 goto label3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != $i1 goto label4;

     label3:
        $i7 = (int) -1;

        return $i7;

     label4:
        return $i0;
    }

    private void findInfiniteCycles()
    {
        java.lang.Throwable $r10;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.RDFNode $r7;
        java.util.Set $r4, $r6;
        com.hp.hpl.jena.rdf.model.Statement $r5;
        com.hp.hpl.jena.rdf.model.Resource $r8, $r9;
        com.hp.hpl.jena.xmloutput.impl.Relation $r3;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Model $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements()>();

        $r3 = new com.hp.hpl.jena.xmloutput.impl.Relation;

        specialinvoke $r3.<com.hp.hpl.jena.xmloutput.impl.Relation: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doneSet>;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

        $r7 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z2 = $r7 instanceof com.hp.hpl.jena.rdf.model.Resource;

        if $z2 == 0 goto label2;

        $r8 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r9 = (com.hp.hpl.jena.rdf.model.Resource) $r7;

        virtualinvoke $r3.<com.hp.hpl.jena.xmloutput.impl.Relation: void set(java.lang.Object,java.lang.Object)>($r8, $r9);

     label2:
        goto label1;

     label3:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        goto label6;

     label4:
        $r10 := @caughtexception;

     label5:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        throw $r10;

     label6:
        virtualinvoke $r3.<com.hp.hpl.jena.xmloutput.impl.Relation: void transitiveClosure()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.xmloutput.impl.Relation: java.util.Set getDiagonal()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set infinite> = $r4;

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private java.util.Iterator allInfiniteLeft()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser$6 $r0;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r0 = new com.hp.hpl.jena.xmloutput.impl.Unparser$6;

        specialinvoke $r0.<com.hp.hpl.jena.xmloutput.impl.Unparser$6: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        return $r0;
    }

    private java.util.Iterator pleasingTypeIterator()
    {
        java.lang.Integer r20;
        java.util.Map $r18;
        com.hp.hpl.jena.rdf.model.Resource[] $r1, $r3, $r5, $r22;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r15;
        java.util.Set r17, $r23;
        com.hp.hpl.jena.rdf.model.ResIterator $r7;
        java.util.List $r10;
        com.hp.hpl.jena.util.iterator.NullIterator $r25;
        java.lang.Throwable $r26;
        com.hp.hpl.jena.util.iterator.Map1Iterator $r9;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.HashMap $r2;
        java.util.HashSet $r21;
        int $i0, $i1, $i2, i3;
        java.util.Set[] r4;
        java.util.Iterator $r11;
        com.hp.hpl.jena.xmloutput.impl.Unparser$7 $r8;
        com.hp.hpl.jena.rdf.model.Statement $r14;
        com.hp.hpl.jena.rdf.model.Resource $r13, $r24;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r12;
        com.hp.hpl.jena.rdf.model.Model $r6;
        java.lang.Object $r16, $r19;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes>;

        if $r1 != null goto label01;

        $r25 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r25;

     label01:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes>;

        $i0 = lengthof $r3;

        r4 = newarray (java.util.Set)[$i0];

        i3 = 0;

     label02:
        $r5 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes>;

        $i1 = lengthof $r5;

        if i3 >= $i1 goto label03;

        $r21 = new java.util.HashSet;

        specialinvoke $r21.<java.util.HashSet: void <init>()>();

        r4[i3] = $r21;

        $r22 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Resource[] pleasingTypes>;

        $r24 = $r22[i3];

        $r23 = r4[i3];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23);

        i3 = i3 + 1;

        goto label02;

     label03:
        $r6 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listSubjects()>();

     label04:
        $z1 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.ResIterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r13 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.ResIterator: com.hp.hpl.jena.rdf.model.Resource nextResource()>();

        $r14 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Statement getType(com.hp.hpl.jena.rdf.model.Resource)>($r13);

        if $r14 == null goto label06;

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r16 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        r17 = (java.util.Set) $r16;

        if r17 == null goto label06;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>($r13);

        if $z0 == 0 goto label05;

        $r18 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map objectTable>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r20 = (java.lang.Integer) $r19;

        if r20 == null goto label05;

        $i2 = virtualinvoke r20.<java.lang.Integer: int intValue()>();

        if $i2 != 1 goto label05;

        goto label04;

     label05:
        interfaceinvoke r17.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label06:
        goto label04;

     label07:
        interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.ResIterator: void close()>();

        goto label10;

     label08:
        $r26 := @caughtexception;

     label09:
        interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.ResIterator: void close()>();

        throw $r26;

     label10:
        $r8 = new com.hp.hpl.jena.xmloutput.impl.Unparser$7;

        specialinvoke $r8.<com.hp.hpl.jena.xmloutput.impl.Unparser$7: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r0);

        $r9 = new com.hp.hpl.jena.util.iterator.Map1Iterator;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r4);

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r9.<com.hp.hpl.jena.util.iterator.Map1Iterator: void <init>(com.hp.hpl.jena.util.iterator.Map1,java.util.Iterator)>($r8, $r11);

        $r12 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator createIteratorIterator(java.util.Iterator)>($r9);

        return $r12;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.util.Iterator listSubjects()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r1;
        com.hp.hpl.jena.util.iterator.FilterIterator $r11, $r14, $r19, $r28;
        java.util.Iterator[] $r23;
        java.lang.String $r2;
        java.util.Iterator $r5, $r13, $r16, $r17, $r21, $r26;
        com.hp.hpl.jena.xmloutput.impl.Unparser$8 $r6;
        com.hp.hpl.jena.xmloutput.impl.Unparser$9 $r8;
        com.hp.hpl.jena.rdf.model.ResIterator $r7, $r22;
        com.hp.hpl.jena.rdf.model.Resource $r4;
        com.hp.hpl.jena.util.iterator.SingletonIterator $r0;
        java.util.List $r25;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r9, $r27;
        com.hp.hpl.jena.rdf.model.Model $r3;
        com.hp.hpl.jena.xmloutput.impl.Unparser$16 $r29;
        com.hp.hpl.jena.xmloutput.impl.Unparser$15 $r24;
        com.hp.hpl.jena.xmloutput.impl.Unparser$14 $r20;
        com.hp.hpl.jena.xmloutput.impl.Unparser$13 $r18;
        com.hp.hpl.jena.xmloutput.impl.Unparser$12 $r15;
        com.hp.hpl.jena.xmloutput.impl.Unparser$11 $r12;
        com.hp.hpl.jena.xmloutput.impl.Unparser$10 $r10;

        r1 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r0 = new com.hp.hpl.jena.util.iterator.SingletonIterator;

        $r3 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String localName>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Resource createResource(java.lang.String)>($r2);

        specialinvoke $r0.<com.hp.hpl.jena.util.iterator.SingletonIterator: void <init>(java.lang.Object)>($r4);

        $r5 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Iterator pleasingTypeIterator()>();

        $r6 = new com.hp.hpl.jena.xmloutput.impl.Unparser$8;

        specialinvoke $r6.<com.hp.hpl.jena.xmloutput.impl.Unparser$8: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r7 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.ResIterator modelListSubjects()>();

        $r8 = new com.hp.hpl.jena.xmloutput.impl.Unparser$9;

        specialinvoke $r8.<com.hp.hpl.jena.xmloutput.impl.Unparser$9: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r9 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.ResIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r8);

        $r10 = new com.hp.hpl.jena.xmloutput.impl.Unparser$10;

        specialinvoke $r10.<com.hp.hpl.jena.xmloutput.impl.Unparser$10: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r11 = new com.hp.hpl.jena.util.iterator.FilterIterator;

        $r12 = new com.hp.hpl.jena.xmloutput.impl.Unparser$11;

        specialinvoke $r12.<com.hp.hpl.jena.xmloutput.impl.Unparser$11: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r13 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Iterator allInfiniteLeft()>();

        specialinvoke $r11.<com.hp.hpl.jena.util.iterator.FilterIterator: void <init>(com.hp.hpl.jena.util.iterator.Filter,java.util.Iterator)>($r12, $r13);

        $r14 = new com.hp.hpl.jena.util.iterator.FilterIterator;

        $r15 = new com.hp.hpl.jena.xmloutput.impl.Unparser$12;

        specialinvoke $r15.<com.hp.hpl.jena.xmloutput.impl.Unparser$12: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r16 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Iterator allInfiniteLeft()>();

        specialinvoke $r14.<com.hp.hpl.jena.util.iterator.FilterIterator: void <init>(com.hp.hpl.jena.util.iterator.Filter,java.util.Iterator)>($r15, $r16);

        $r17 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Iterator allInfiniteLeft()>();

        $r18 = new com.hp.hpl.jena.xmloutput.impl.Unparser$13;

        specialinvoke $r18.<com.hp.hpl.jena.xmloutput.impl.Unparser$13: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r19 = new com.hp.hpl.jena.util.iterator.FilterIterator;

        $r20 = new com.hp.hpl.jena.xmloutput.impl.Unparser$14;

        specialinvoke $r20.<com.hp.hpl.jena.xmloutput.impl.Unparser$14: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r21 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Iterator allInfiniteLeft()>();

        specialinvoke $r19.<com.hp.hpl.jena.util.iterator.FilterIterator: void <init>(com.hp.hpl.jena.util.iterator.Filter,java.util.Iterator)>($r20, $r21);

        $r22 = specialinvoke r1.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.ResIterator modelListSubjects()>();

        $r23 = newarray (java.util.Iterator)[12];

        $r23[0] = $r0;

        $r23[1] = $r5;

        $r23[2] = $r6;

        $r23[3] = $r9;

        $r23[4] = $r10;

        $r23[5] = $r11;

        $r23[6] = $r14;

        $r23[7] = $r17;

        $r23[8] = $r18;

        $r23[9] = $r19;

        $r24 = new com.hp.hpl.jena.xmloutput.impl.Unparser$15;

        specialinvoke $r24.<com.hp.hpl.jena.xmloutput.impl.Unparser$15: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        $r23[10] = $r24;

        $r23[11] = $r22;

        $r25 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r23);

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

        $r27 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator createIteratorIterator(java.util.Iterator)>($r26);

        $r28 = new com.hp.hpl.jena.util.iterator.FilterIterator;

        $r29 = new com.hp.hpl.jena.xmloutput.impl.Unparser$16;

        specialinvoke $r29.<com.hp.hpl.jena.xmloutput.impl.Unparser$16: void <init>(com.hp.hpl.jena.xmloutput.impl.Unparser)>(r1);

        specialinvoke $r28.<com.hp.hpl.jena.util.iterator.FilterIterator: void <init>(com.hp.hpl.jena.util.iterator.Filter,java.util.Iterator)>($r29, $r27);

        return $r28;
    }

    private synchronized void closeAllResIterators()
    {
        java.util.HashSet $r3;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Object $r4;
        com.hp.hpl.jena.rdf.model.ResIterator $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set openResIterators>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.rdf.model.ResIterator) $r4;

        interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.ResIterator: void close()>();

        goto label1;

     label2:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set openResIterators> = $r3;

        return;
    }

    private com.hp.hpl.jena.rdf.model.ResIterator modelListSubjects()
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Model $r1;
        java.util.Set $r3;
        com.hp.hpl.jena.rdf.model.ResIterator $r2;

        r0 := @this: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Model model>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.ResIterator listSubjects()>();

        $r3 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set openResIterators>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    static int access$100()
    {
        int $i0;

        $i0 = <com.hp.hpl.jena.xmloutput.impl.Unparser: int RDF_HASH>;

        return $i0;
    }

    static com.hp.hpl.jena.xmloutput.impl.Abbreviated access$200(com.hp.hpl.jena.xmloutput.impl.Unparser)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.xmloutput.impl.Abbreviated $r1;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.xmloutput.impl.Abbreviated prettyWriter>;

        return $r1;
    }

    static void access$300(com.hp.hpl.jena.xmloutput.impl.Unparser, java.lang.String)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.lang.String r1;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void print(java.lang.String)>(r1);

        return;
    }

    static java.lang.String access$400()
    {
        java.lang.String $r0;

        $r0 = <com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String rdfns>;

        return $r0;
    }

    static java.util.Set access$500(com.hp.hpl.jena.xmloutput.impl.Unparser)
    {
        java.util.Set $r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set doneSet>;

        return $r1;
    }

    static java.util.Set access$600(com.hp.hpl.jena.xmloutput.impl.Unparser)
    {
        java.util.Set $r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set infinite>;

        return $r1;
    }

    static java.util.Set access$702(com.hp.hpl.jena.xmloutput.impl.Unparser, java.util.Set)
    {
        java.util.Set r1;
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter1: java.util.Set;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Set pleasingTypeSet> = r1;

        return r1;
    }

    static java.util.Map access$800(com.hp.hpl.jena.xmloutput.impl.Unparser)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        java.util.Map $r1;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: java.util.Map objectTable>;

        return $r1;
    }

    static boolean access$900(com.hp.hpl.jena.xmloutput.impl.Unparser, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean wantReification(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        return $z0;
    }

    static void access$1000(com.hp.hpl.jena.xmloutput.impl.Unparser)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: void findInfiniteCycles()>();

        return;
    }

    static boolean access$1100(com.hp.hpl.jena.xmloutput.impl.Unparser, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean isGenuineAnon(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        return $z0;
    }

    static boolean access$1202(com.hp.hpl.jena.xmloutput.impl.Unparser, boolean)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        boolean z0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        z0 := @parameter1: boolean;

        r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean avoidExplicitReification> = z0;

        return z0;
    }

    static com.hp.hpl.jena.rdf.model.ResIterator access$1300(com.hp.hpl.jena.xmloutput.impl.Unparser)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.ResIterator $r1;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.ResIterator modelListSubjects()>();

        return $r1;
    }

    static boolean access$1400(com.hp.hpl.jena.xmloutput.impl.Unparser, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.xmloutput.impl.Unparser r0;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.xmloutput.impl.Unparser;

        r1 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.xmloutput.impl.Unparser: boolean hasProperties(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        return $z0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r4;
        com.hp.hpl.jena.rdf.model.impl.PropertyImpl $r0, $r2;
        java.lang.Integer $r7;
        com.hp.hpl.jena.rdf.model.Property $r5;
        int $i0;
        java.lang.String $r1, $r3, $r6, $r8;

        $r0 = new com.hp.hpl.jena.rdf.model.impl.PropertyImpl;

        $r1 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        specialinvoke $r0.<com.hp.hpl.jena.rdf.model.impl.PropertyImpl: void <init>(java.lang.String,java.lang.String)>($r1, "li");

        <com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Property LI> = $r0;

        $r2 = new com.hp.hpl.jena.rdf.model.impl.PropertyImpl;

        $r3 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        specialinvoke $r2.<com.hp.hpl.jena.rdf.model.impl.PropertyImpl: void <init>(java.lang.String,java.lang.String)>($r3, "Description");

        <com.hp.hpl.jena.xmloutput.impl.Unparser: com.hp.hpl.jena.rdf.model.Property DESCRIPTION> = $r2;

        $r4 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/xmloutput/impl/Unparser;");

        <com.hp.hpl.jena.xmloutput.impl.Unparser: org.slf4j.Logger logger> = $r4;

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Property: java.lang.String getNameSpace()>();

        <com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.String rdfns> = $r6;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(1);

        <com.hp.hpl.jena.xmloutput.impl.Unparser: java.lang.Integer one> = $r7;

        $r8 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        <com.hp.hpl.jena.xmloutput.impl.Unparser: int RDF_HASH> = $i0;

        return;
    }
}
