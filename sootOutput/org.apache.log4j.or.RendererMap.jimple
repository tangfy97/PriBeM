public class org.apache.log4j.or.RendererMap extends java.lang.Object
{
    java.util.Hashtable map;
    static org.apache.log4j.or.ObjectRenderer defaultRenderer;
    static java.lang.Class class$org$apache$log4j$or$ObjectRenderer;

    public void <init>()
    {
        org.apache.log4j.or.RendererMap r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.log4j.or.RendererMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.or.RendererMap: java.util.Hashtable map> = $r1;

        return;
    }

    public static void addRenderer(org.apache.log4j.spi.RendererSupport, java.lang.String, java.lang.String)
    {
        org.apache.log4j.or.ObjectRenderer $r18;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r6, $r7, $r13, $r14, $r15, $r16, $r20, $r21, $r22, $r23;
        java.lang.String r2, r5, $r8, $r17, $r24;
        org.apache.log4j.spi.RendererSupport r12;
        java.lang.Class $r9, $r11, $r25;
        java.lang.Object $r10;
        java.lang.ClassNotFoundException $r19;

        r12 := @parameter0: org.apache.log4j.spi.RendererSupport;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rendering class: [");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("], Rendered class: [");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r8);

        $r9 = <org.apache.log4j.or.RendererMap: java.lang.Class class$org$apache$log4j$or$ObjectRenderer>;

        if $r9 != null goto label1;

        $r25 = staticinvoke <org.apache.log4j.or.RendererMap: java.lang.Class class$(java.lang.String)>("org.apache.log4j.or.ObjectRenderer");

        <org.apache.log4j.or.RendererMap: java.lang.Class class$org$apache$log4j$or$ObjectRenderer> = $r25;

        goto label2;

     label1:
        $r25 = <org.apache.log4j.or.RendererMap: java.lang.Class class$org$apache$log4j$or$ObjectRenderer>;

     label2:
        $r10 = staticinvoke <org.apache.log4j.helpers.OptionConverter: java.lang.Object instantiateByClassName(java.lang.String,java.lang.Class,java.lang.Object)>(r2, $r25, null);

        $r18 = (org.apache.log4j.or.ObjectRenderer) $r10;

        if $r18 != null goto label3;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate renderer [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String)>($r17);

        return;

     label3:
        $r11 = staticinvoke <org.apache.log4j.helpers.Loader: java.lang.Class loadClass(java.lang.String)>(r5);

        interfaceinvoke r12.<org.apache.log4j.spi.RendererSupport: void setRenderer(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>($r11, $r18);

     label4:
        goto label6;

     label5:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find class [");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("].");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r24, $r19);

     label6:
        return;

        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    public java.lang.String findAndRender(java.lang.Object)
    {
        org.apache.log4j.or.ObjectRenderer $r3;
        java.lang.Object r0;
        java.lang.Class $r2;
        java.lang.String $r4;
        org.apache.log4j.or.RendererMap r1;

        r1 := @this: org.apache.log4j.or.RendererMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer get(java.lang.Class)>($r2);

        $r4 = interfaceinvoke $r3.<org.apache.log4j.or.ObjectRenderer: java.lang.String doRender(java.lang.Object)>(r0);

        return $r4;
    }

    public org.apache.log4j.or.ObjectRenderer get(java.lang.Object)
    {
        org.apache.log4j.or.ObjectRenderer $r3;
        java.lang.Object r0;
        java.lang.Class $r2;
        org.apache.log4j.or.RendererMap r1;

        r1 := @this: org.apache.log4j.or.RendererMap;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer get(java.lang.Class)>($r2);

        return $r3;
    }

    public org.apache.log4j.or.ObjectRenderer get(java.lang.Class)
    {
        org.apache.log4j.or.ObjectRenderer $r1, $r5, r7;
        org.apache.log4j.or.RendererMap r2;
        java.lang.Class r0, r6;
        java.lang.Object $r4;
        java.util.Hashtable $r3;

        r2 := @this: org.apache.log4j.or.RendererMap;

        r0 := @parameter0: java.lang.Class;

        r6 = r0;

     label1:
        if r6 == null goto label4;

        $r3 = r2.<org.apache.log4j.or.RendererMap: java.util.Hashtable map>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (org.apache.log4j.or.ObjectRenderer) $r4;

        if r7 == null goto label2;

        return r7;

     label2:
        $r5 = virtualinvoke r2.<org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer searchInterfaces(java.lang.Class)>(r6);

        if $r5 == null goto label3;

        return $r5;

     label3:
        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label4:
        $r1 = <org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer defaultRenderer>;

        return $r1;
    }

    org.apache.log4j.or.ObjectRenderer searchInterfaces(java.lang.Class)
    {
        java.lang.Class[] $r4;
        org.apache.log4j.or.ObjectRenderer $r6, r7;
        org.apache.log4j.or.RendererMap r0;
        int $i0, i1;
        java.lang.Class r1, $r5;
        java.lang.Object $r3;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.log4j.or.RendererMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.log4j.or.RendererMap: java.util.Hashtable map>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (org.apache.log4j.or.ObjectRenderer) $r3;

        if r7 == null goto label1;

        return r7;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r4;

        if i1 >= $i0 goto label4;

        $r5 = $r4[i1];

        $r6 = virtualinvoke r0.<org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer searchInterfaces(java.lang.Class)>($r5);

        if $r6 == null goto label3;

        return $r6;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public org.apache.log4j.or.ObjectRenderer getDefaultRenderer()
    {
        org.apache.log4j.or.ObjectRenderer $r0;
        org.apache.log4j.or.RendererMap r1;

        r1 := @this: org.apache.log4j.or.RendererMap;

        $r0 = <org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer defaultRenderer>;

        return $r0;
    }

    public void clear()
    {
        org.apache.log4j.or.RendererMap r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.log4j.or.RendererMap;

        $r1 = r0.<org.apache.log4j.or.RendererMap: java.util.Hashtable map>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void put(java.lang.Class, org.apache.log4j.or.ObjectRenderer)
    {
        org.apache.log4j.or.ObjectRenderer r2;
        java.lang.Class r1;
        org.apache.log4j.or.RendererMap r0;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.log4j.or.RendererMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.log4j.or.ObjectRenderer;

        $r3 = r0.<org.apache.log4j.or.RendererMap: java.util.Hashtable map>;

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.log4j.or.DefaultRenderer $r0;

        $r0 = new org.apache.log4j.or.DefaultRenderer;

        specialinvoke $r0.<org.apache.log4j.or.DefaultRenderer: void <init>()>();

        <org.apache.log4j.or.RendererMap: org.apache.log4j.or.ObjectRenderer defaultRenderer> = $r0;

        return;
    }
}
