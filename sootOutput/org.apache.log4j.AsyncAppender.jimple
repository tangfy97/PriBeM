public class org.apache.log4j.AsyncAppender extends org.apache.log4j.AppenderSkeleton implements org.apache.log4j.spi.AppenderAttachable
{
    public static final int DEFAULT_BUFFER_SIZE;
    private final java.util.List buffer;
    private final java.util.Map discardMap;
    private int bufferSize;
    org.apache.log4j.helpers.AppenderAttachableImpl aai;
    private final org.apache.log4j.helpers.AppenderAttachableImpl appenders;
    private final java.lang.Thread dispatcher;
    private boolean locationInfo;
    private boolean blocking;

    public void <init>()
    {
        java.util.HashMap $r2;
        java.util.ArrayList $r1;
        java.lang.StringBuffer $r11, $r13, $r16;
        java.lang.Thread $r5, $r10, $r12, $r14, $r18;
        java.util.Map $r8;
        java.lang.String $r15, $r17;
        org.apache.log4j.AsyncAppender r0;
        org.apache.log4j.AsyncAppender$Dispatcher $r6;
        java.util.List $r9;
        org.apache.log4j.helpers.AppenderAttachableImpl $r3, $r4, $r7;

        r0 := @this: org.apache.log4j.AsyncAppender;

        specialinvoke r0.<org.apache.log4j.AppenderSkeleton: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.log4j.AsyncAppender: java.util.List buffer> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.log4j.AsyncAppender: java.util.Map discardMap> = $r2;

        r0.<org.apache.log4j.AsyncAppender: int bufferSize> = 128;

        r0.<org.apache.log4j.AsyncAppender: boolean locationInfo> = 0;

        r0.<org.apache.log4j.AsyncAppender: boolean blocking> = 1;

        $r3 = new org.apache.log4j.helpers.AppenderAttachableImpl;

        specialinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: void <init>()>();

        r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders> = $r3;

        $r4 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl aai> = $r4;

        $r5 = new java.lang.Thread;

        $r6 = new org.apache.log4j.AsyncAppender$Dispatcher;

        $r9 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        $r8 = r0.<org.apache.log4j.AsyncAppender: java.util.Map discardMap>;

        $r7 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        specialinvoke $r6.<org.apache.log4j.AsyncAppender$Dispatcher: void <init>(org.apache.log4j.AsyncAppender,java.util.List,java.util.Map,org.apache.log4j.helpers.AppenderAttachableImpl)>(r0, $r9, $r8, $r7);

        specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher> = $r5;

        $r10 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        virtualinvoke $r10.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r12 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AsyncAppender-Dispatcher-");

        $r14 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        $r15 = virtualinvoke $r14.<java.lang.Thread: java.lang.String getName()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.Thread: void setName(java.lang.String)>($r17);

        $r18 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        virtualinvoke $r18.<java.lang.Thread: void start()>();

        return;
    }

    public void addAppender(org.apache.log4j.Appender)
    {
        java.lang.Throwable $r4;
        org.apache.log4j.Appender r2;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        r2 := @parameter0: org.apache.log4j.Appender;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: void addAppender(org.apache.log4j.Appender)>(r2);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void append(org.apache.log4j.spi.LoggingEvent)
    {
        java.lang.Throwable $r15, $r18;
        org.apache.log4j.AsyncAppender$DiscardSummary $r8, r22;
        java.lang.Thread $r1, $r3, $r10, $r11, $r17;
        java.util.Map $r6, $r9;
        int $i0, $i1, $i2;
        java.lang.String $r5;
        org.apache.log4j.AsyncAppender r0;
        boolean $z0, $z1, $z2, $z3, z4;
        org.apache.log4j.spi.LoggingEvent r2;
        java.util.List $r4, $r12, $r13, $r14, $r21;
        java.lang.InterruptedException $r16;
        java.lang.Object $r7;
        org.apache.log4j.helpers.AppenderAttachableImpl $r19, $r20;

        r0 := @this: org.apache.log4j.AsyncAppender;

        r2 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        $r1 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        if $r1 == null goto label01;

        $r3 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        $z0 = virtualinvoke $r3.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label01;

        $i0 = r0.<org.apache.log4j.AsyncAppender: int bufferSize>;

        if $i0 > 0 goto label07;

     label01:
        $r19 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r19;

     label02:
        $r20 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        virtualinvoke $r20.<org.apache.log4j.helpers.AppenderAttachableImpl: int appendLoopOnAppenders(org.apache.log4j.spi.LoggingEvent)>(r2);

        exitmonitor $r19;

     label03:
        goto label06;

     label04:
        $r18 := @caughtexception;

        exitmonitor $r19;

     label05:
        throw $r18;

     label06:
        return;

     label07:
        virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getNDC()>();

        virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getThreadName()>();

        virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: void getMDCCopy()>();

        $z1 = r0.<org.apache.log4j.AsyncAppender: boolean locationInfo>;

        if $z1 == 0 goto label08;

        virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: org.apache.log4j.spi.LocationInfo getLocationInformation()>();

     label08:
        virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getRenderedMessage()>();

        virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String[] getThrowableStrRep()>();

        $r4 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        entermonitor $r4;

     label09:
        $r21 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        $i1 = interfaceinvoke $r21.<java.util.List: int size()>();

        $i2 = r0.<org.apache.log4j.AsyncAppender: int bufferSize>;

        if $i1 >= $i2 goto label10;

        $r13 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r2);

        if $i1 != 0 goto label17;

        $r14 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        virtualinvoke $r14.<java.lang.Object: void notifyAll()>();

        goto label17;

     label10:
        z4 = 1;

        $z2 = r0.<org.apache.log4j.AsyncAppender: boolean blocking>;

        if $z2 == 0 goto label14;

        $z3 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z3 != 0 goto label14;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        if $r10 == $r11 goto label14;

     label11:
        $r12 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        virtualinvoke $r12.<java.lang.Object: void wait()>();

        z4 = 0;

     label12:
        goto label14;

     label13:
        $r16 := @caughtexception;

        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r17.<java.lang.Thread: void interrupt()>();

     label14:
        if z4 == 0 goto label16;

        $r5 = virtualinvoke r2.<org.apache.log4j.spi.LoggingEvent: java.lang.String getLoggerName()>();

        $r6 = r0.<org.apache.log4j.AsyncAppender: java.util.Map discardMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r22 = (org.apache.log4j.AsyncAppender$DiscardSummary) $r7;

        if r22 != null goto label15;

        $r8 = new org.apache.log4j.AsyncAppender$DiscardSummary;

        specialinvoke $r8.<org.apache.log4j.AsyncAppender$DiscardSummary: void <init>(org.apache.log4j.spi.LoggingEvent)>(r2);

        $r9 = r0.<org.apache.log4j.AsyncAppender: java.util.Map discardMap>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        goto label17;

     label15:
        virtualinvoke r22.<org.apache.log4j.AsyncAppender$DiscardSummary: void add(org.apache.log4j.spi.LoggingEvent)>(r2);

        goto label17;

     label16:
        goto label09;

     label17:
        exitmonitor $r4;

     label18:
        goto label21;

     label19:
        $r15 := @caughtexception;

        exitmonitor $r4;

     label20:
        throw $r15;

     label21:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.InterruptedException from label11 to label12 with label13;
        catch java.lang.Throwable from label09 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public void close()
    {
        java.lang.Throwable $r9, $r12;
        java.util.Enumeration $r6;
        java.util.List $r1, $r2;
        org.apache.log4j.Appender $r8;
        java.lang.InterruptedException $r10;
        java.lang.Thread $r3, $r11;
        org.apache.log4j.helpers.AppenderAttachableImpl $r4, $r5;
        java.lang.Object $r7;
        org.apache.log4j.AsyncAppender r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.AsyncAppender;

        $r1 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        entermonitor $r1;

     label01:
        r0.<org.apache.log4j.AppenderSkeleton: boolean closed> = 1;

        $r2 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label02:
        goto label05;

     label03:
        $r12 := @caughtexception;

        exitmonitor $r1;

     label04:
        throw $r12;

     label05:
        $r3 = r0.<org.apache.log4j.AsyncAppender: java.lang.Thread dispatcher>;

        virtualinvoke $r3.<java.lang.Thread: void join()>();

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>("Got an InterruptedException while waiting for the dispatcher to finish.", $r10);

     label08:
        $r4 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r4;

     label09:
        $r5 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        $r6 = virtualinvoke $r5.<org.apache.log4j.helpers.AppenderAttachableImpl: java.util.Enumeration getAllAppenders()>();

        if $r6 == null goto label12;

     label10:
        $z0 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label12;

        $r7 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z1 = $r7 instanceof org.apache.log4j.Appender;

        if $z1 == 0 goto label11;

        $r8 = (org.apache.log4j.Appender) $r7;

        interfaceinvoke $r8.<org.apache.log4j.Appender: void close()>();

     label11:
        goto label10;

     label12:
        exitmonitor $r4;

     label13:
        goto label16;

     label14:
        $r9 := @caughtexception;

        exitmonitor $r4;

     label15:
        throw $r9;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public java.util.Enumeration getAllAppenders()
    {
        java.lang.Throwable $r4;
        java.util.Enumeration $r3;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r2;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        $r3 = virtualinvoke $r2.<org.apache.log4j.helpers.AppenderAttachableImpl: java.util.Enumeration getAllAppenders()>();

        exitmonitor $r1;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.log4j.Appender getAppender(java.lang.String)
    {
        java.lang.Throwable $r5;
        org.apache.log4j.Appender $r4;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3;
        java.lang.String r2;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        $r4 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: org.apache.log4j.Appender getAppender(java.lang.String)>(r2);

        exitmonitor $r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean getLocationInfo()
    {
        org.apache.log4j.AsyncAppender r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        $z0 = r0.<org.apache.log4j.AsyncAppender: boolean locationInfo>;

        return $z0;
    }

    public boolean isAttached(org.apache.log4j.Appender)
    {
        java.lang.Throwable $r4;
        org.apache.log4j.Appender r2;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3;
        org.apache.log4j.AsyncAppender r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        r2 := @parameter0: org.apache.log4j.Appender;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        $z0 = virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: boolean isAttached(org.apache.log4j.Appender)>(r2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean requiresLayout()
    {
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        return 0;
    }

    public void removeAllAppenders()
    {
        java.lang.Throwable $r3;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r2;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        virtualinvoke $r2.<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAllAppenders()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeAppender(org.apache.log4j.Appender)
    {
        java.lang.Throwable $r4;
        org.apache.log4j.Appender r2;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        r2 := @parameter0: org.apache.log4j.Appender;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAppender(org.apache.log4j.Appender)>(r2);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeAppender(java.lang.String)
    {
        java.lang.Throwable $r4;
        org.apache.log4j.helpers.AppenderAttachableImpl $r1, $r3;
        java.lang.String r2;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.log4j.AsyncAppender: org.apache.log4j.helpers.AppenderAttachableImpl appenders>;

        virtualinvoke $r3.<org.apache.log4j.helpers.AppenderAttachableImpl: void removeAppender(java.lang.String)>(r2);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setLocationInfo(boolean)
    {
        org.apache.log4j.AsyncAppender r0;
        boolean z0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        z0 := @parameter0: boolean;

        r0.<org.apache.log4j.AsyncAppender: boolean locationInfo> = z0;

        return;
    }

    public void setBufferSize(int)
    {
        java.lang.Throwable $r4;
        java.util.List $r1, $r2;
        int i0, $i1;
        org.apache.log4j.AsyncAppender r0;
        java.lang.NegativeArraySizeException $r3;

        r0 := @this: org.apache.log4j.AsyncAppender;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.NegativeArraySizeException;

        specialinvoke $r3.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>("size");

        throw $r3;

     label1:
        $r1 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        entermonitor $r1;

     label2:
        if i0 >= 1 goto label3;

        $i1 = 1;

        goto label4;

     label3:
        $i1 = i0;

     label4:
        r0.<org.apache.log4j.AsyncAppender: int bufferSize> = $i1;

        $r2 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getBufferSize()
    {
        int $i0;
        org.apache.log4j.AsyncAppender r0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        $i0 = r0.<org.apache.log4j.AsyncAppender: int bufferSize>;

        return $i0;
    }

    public void setBlocking(boolean)
    {
        java.lang.Throwable $r3;
        java.util.List $r1, $r2;
        org.apache.log4j.AsyncAppender r0;
        boolean z0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        entermonitor $r1;

     label1:
        r0.<org.apache.log4j.AsyncAppender: boolean blocking> = z0;

        $r2 = r0.<org.apache.log4j.AsyncAppender: java.util.List buffer>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean getBlocking()
    {
        org.apache.log4j.AsyncAppender r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.AsyncAppender;

        $z0 = r0.<org.apache.log4j.AsyncAppender: boolean blocking>;

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.log4j.AsyncAppender: int DEFAULT_BUFFER_SIZE> = 128;

        return;
    }
}
