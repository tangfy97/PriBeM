public final class org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus extends com.google.protobuf.GeneratedMessage
{
    private static final org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus defaultInstance;
    public static final int STATUS_FIELD_NUMBER;
    private boolean hasStatus;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode status_;
    public static final int FAILUREREASON_FIELD_NUMBER;
    private boolean hasFailureReason;
    private java.lang.String failureReason_;
    private int memoizedSerializedSize;

    private void <init>()
    {
        int $i1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String failureReason_> = "";

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int memoizedSerializedSize> = $i1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: void initFields()>();

        return;
    }

    private void <init>(boolean)
    {
        int $i1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String failureReason_> = "";

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int memoizedSerializedSize> = $i1;

        return;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstance()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r0;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus defaultInstance>;

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r0, r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus defaultInstance>;

        return $r0;
    }

    public static final com.google.protobuf.Descriptors$Descriptor getDescriptor()
    {
        com.google.protobuf.Descriptors$Descriptor $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.Descriptors$Descriptor access$15400()>();

        return $r0;
    }

    protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r1;
        com.google.protobuf.GeneratedMessage$FieldAccessorTable $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.GeneratedMessage$FieldAccessorTable access$15500()>();

        return $r0;
    }

    public boolean hasStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasStatus>;

        return $z0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode status_>;

        return $r1;
    }

    public boolean hasFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasFailureReason>;

        return $z0;
    }

    public java.lang.String getFailureReason()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String failureReason_>;

        return $r1;
    }

    private void initFields()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode OK>;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode status_> = $r1;

        return;
    }

    public final boolean isInitialized()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasStatus>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException
    {
        com.google.protobuf.UnknownFieldSet $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        int $i0;
        java.lang.String $r3;
        com.google.protobuf.CodedOutputStream r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        r2 := @parameter0: com.google.protobuf.CodedOutputStream;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int getSerializedSize()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasStatus()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode getStatus()>();

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode: int getNumber()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeEnum(int,int)>(1, $i0);

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasFailureReason()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String getFailureReason()>();

        virtualinvoke r2.<com.google.protobuf.CodedOutputStream: void writeString(int,java.lang.String)>(2, $r3);

     label2:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        virtualinvoke $r1.<com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>(r2);

        return;
    }

    public int getSerializedSize()
    {
        com.google.protobuf.UnknownFieldSet $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        i5 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int memoizedSerializedSize>;

        $i8 = (int) -1;

        if i5 == $i8 goto label1;

        return i5;

     label1:
        i6 = 0;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasStatus()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode getStatus()>();

        $i3 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode: int getNumber()>();

        $i4 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeEnumSize(int,int)>(1, $i3);

        i6 = 0 + $i4;

     label2:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasFailureReason()>();

        if $z1 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String getFailureReason()>();

        $i1 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeStringSize(int,java.lang.String)>(2, $r2);

        i6 = i6 + $i1;

     label3:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        $i0 = virtualinvoke $r1.<com.google.protobuf.UnknownFieldSet: int getSerializedSize()>();

        $i2 = i6 + $i0;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int memoizedSerializedSize> = $i2;

        return $i2;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.ByteString;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r4;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: com.google.protobuf.ByteString;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: byte[];

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[])>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r4;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[],com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r4;
        com.google.protobuf.AbstractMessage$Builder $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseDelimitedFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: boolean mergeDelimitedFrom(java.io.InputStream)>(r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r0);

        return $r2;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r3;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: boolean mergeDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r0);

        return $r3;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r4;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r3;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus access$15600(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder access$15700()>();

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        return $r0;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>(r1);

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>(r0);

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getDefaultInstanceForType()>();

        return $r1;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$1 r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: void <init>()>();

        return;
    }

    static boolean access$15902(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasStatus> = z0;

        return z0;
    }

    static org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode access$16002(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus, org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode status_> = r1;

        return r1;
    }

    static boolean access$16102(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasFailureReason> = z0;

        return z0;
    }

    static java.lang.String access$16202(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus, java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        r1 := @parameter1: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String failureReason_> = r1;

        return r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r0, $r1;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int FAILUREREASON_FIELD_NUMBER> = 2;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int STATUS_FIELD_NUMBER> = 1;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: void <init>(boolean)>(1);

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus defaultInstance> = $r0;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: void internalForceInit()>();

        $r1 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus defaultInstance>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: void initFields()>();

        return;
    }
}
