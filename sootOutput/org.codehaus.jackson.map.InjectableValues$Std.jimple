public class org.codehaus.jackson.map.InjectableValues$Std extends org.codehaus.jackson.map.InjectableValues
{
    protected final java.util.Map _values;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.codehaus.jackson.map.InjectableValues$Std r0;

        r0 := @this: org.codehaus.jackson.map.InjectableValues$Std;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.codehaus.jackson.map.InjectableValues$Std: void <init>(java.util.Map)>($r1);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.codehaus.jackson.map.InjectableValues$Std r0;
        java.util.Map r1;

        r0 := @this: org.codehaus.jackson.map.InjectableValues$Std;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.codehaus.jackson.map.InjectableValues: void <init>()>();

        r0.<org.codehaus.jackson.map.InjectableValues$Std: java.util.Map _values> = r1;

        return;
    }

    public org.codehaus.jackson.map.InjectableValues$Std addValue(java.lang.String, java.lang.Object)
    {
        java.util.Map $r3;
        java.lang.Object r2;
        org.codehaus.jackson.map.InjectableValues$Std r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.InjectableValues$Std;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.codehaus.jackson.map.InjectableValues$Std: java.util.Map _values>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r0;
    }

    public org.codehaus.jackson.map.InjectableValues$Std addValue(java.lang.Class, java.lang.Object)
    {
        java.util.Map $r2;
        java.lang.Class r1;
        java.lang.Object r4;
        org.codehaus.jackson.map.InjectableValues$Std r0;
        java.lang.String $r3;

        r0 := @this: org.codehaus.jackson.map.InjectableValues$Std;

        r1 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.codehaus.jackson.map.InjectableValues$Std: java.util.Map _values>;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        return r0;
    }

    public java.lang.Object findInjectableValue(java.lang.Object, org.codehaus.jackson.map.DeserializationContext, org.codehaus.jackson.map.BeanProperty, java.lang.Object)
    {
        org.codehaus.jackson.map.InjectableValues$Std r1;
        org.codehaus.jackson.map.DeserializationContext r22;
        java.util.Map $r2, $r4;
        java.lang.String $r11, $r14, $r21, $r24, r25;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5, $r16;
        org.codehaus.jackson.map.BeanProperty r10;
        java.lang.Object r0, $r3, r23;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12, $r13, $r17, $r18, $r19, $r20;
        java.lang.Class $r15;

        r1 := @this: org.codehaus.jackson.map.InjectableValues$Std;

        r0 := @parameter0: java.lang.Object;

        r22 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        r10 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        r23 := @parameter3: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 != 0 goto label3;

        if r0 != null goto label1;

        $r24 = "[null]";

        goto label2;

     label1:
        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

     label2:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized inject value id type (");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), expecting String");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label3:
        r25 = (java.lang.String) r0;

        $r2 = r1.<org.codehaus.jackson.map.InjectableValues$Std: java.util.Map _values>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        if $r3 != null goto label4;

        $r4 = r1.<org.codehaus.jackson.map.InjectableValues$Std: java.util.Map _values>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r25);

        if $z1 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No injectable id with value \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found (for property \'");

        $r11 = interfaceinvoke r10.<org.codehaus.jackson.map.BeanProperty: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label4:
        return $r3;
    }
}
