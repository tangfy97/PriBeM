public class org.dom4j.tree.NamespaceStack extends java.lang.Object
{
    private org.dom4j.DocumentFactory documentFactory;
    private java.util.ArrayList namespaceStack;
    private java.util.ArrayList namespaceCacheList;
    private java.util.Map currentNamespaceCache;
    private java.util.Map rootNamespaceCache;
    private org.dom4j.Namespace defaultNamespace;

    public void <init>()
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.HashMap $r3;
        java.util.ArrayList $r1, $r2;
        org.dom4j.DocumentFactory $r4;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache> = $r3;

        $r4 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory> = $r4;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.HashMap $r3;
        java.util.ArrayList $r1, $r2;
        org.dom4j.DocumentFactory r4;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r4 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache> = $r3;

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory> = r4;

        return;
    }

    public void push(org.dom4j.Namespace)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace r1;
        int $i0;
        java.lang.String $r4;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: org.dom4j.Namespace;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = null;

        $r4 = virtualinvoke r1.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = r1;

     label2:
        return;
    }

    public org.dom4j.Namespace pop()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r2;
        int $i0, $i1;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace remove(int)>($i1);

        return $r2;
    }

    public int size()
    {
        int $i0;
        org.dom4j.tree.NamespaceStack r0;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public void clear()
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.Map $r3;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r3 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = null;

        return;
    }

    public org.dom4j.Namespace getNamespace(int)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r3;
        int i0;
        java.lang.Object $r2;
        java.util.ArrayList $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (org.dom4j.Namespace) $r2;

        return $r3;
    }

    public org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)
    {
        org.dom4j.Namespace r4;
        java.util.ArrayList $r1, $r2;
        org.dom4j.tree.NamespaceStack r0;
        int $i0, i1, $i3;
        java.lang.Object $r3;
        java.lang.String $r5, r6;
        boolean $z0;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r6 := @parameter0: java.lang.String;

        if r6 != null goto label1;

        r6 = "";

     label1:
        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r4 = (org.dom4j.Namespace) $r3;

        $r5 = virtualinvoke r4.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return r4;

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label2;

     label4:
        return null;
    }

    public java.lang.String getURI(java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r2;
        java.lang.String r1, $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<org.dom4j.Namespace: java.lang.String getURI()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean contains(org.dom4j.Namespace)
    {
        org.dom4j.Namespace r0, r5;
        org.dom4j.tree.NamespaceStack r2;
        int $i0;
        java.lang.String $r1, $r3, $r4;
        boolean $z0;

        r2 := @this: org.dom4j.tree.NamespaceStack;

        r0 := @parameter0: org.dom4j.Namespace;

        $r1 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r5 = virtualinvoke r2.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getDefaultNamespace()>();

        goto label3;

     label2:
        r5 = virtualinvoke r2.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace getNamespaceForPrefix(java.lang.String)>($r1);

     label3:
        if r5 != null goto label4;

        return 0;

     label4:
        if r5 != r0 goto label5;

        return 1;

     label5:
        $r3 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r4 = virtualinvoke r5.<org.dom4j.Namespace: java.lang.String getURI()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public org.dom4j.QName getQName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r7;
        org.dom4j.tree.NamespaceStack r1;
        int $i0, $i1, $i2, $i3;
        org.dom4j.QName $r8;
        java.lang.String $r0, $r2, r3, r4, r5, r6;

        r1 := @this: org.dom4j.tree.NamespaceStack;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        if r4 != null goto label1;

        r4 = r5;

        goto label2;

     label1:
        if r5 != null goto label2;

        r5 = r4;

     label2:
        if r3 != null goto label3;

        r3 = "";

     label3:
        r6 = "";

        $i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label4;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r2 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 != 0 goto label5;

        $i3 = $i0 + 1;

        r4 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i3);

        goto label5;

     label4:
        $r0 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label5;

        r4 = r5;

     label5:
        $r7 = virtualinvoke r1.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>(r6, r3);

        $r8 = virtualinvoke r1.<org.dom4j.tree.NamespaceStack: org.dom4j.QName pushQName(java.lang.String,java.lang.String,org.dom4j.Namespace,java.lang.String)>(r4, r5, $r7, r6);

        return $r8;
    }

    public org.dom4j.QName getAttributeQName(java.lang.String, java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        java.util.Map $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r4, $r5, r7, r8, r9, r10;
        org.dom4j.Namespace r11;
        java.lang.Object $r2;
        org.dom4j.QName $r6, $r12;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.lang.String;

        if r9 != null goto label1;

        r9 = r8;

     label1:
        $r1 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: java.util.Map getNamespaceCache()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r6 = (org.dom4j.QName) $r2;

        if $r6 == null goto label2;

        return $r6;

     label2:
        if r8 != null goto label3;

        r8 = r9;

     label3:
        if r7 != null goto label4;

        r7 = "";

     label4:
        r10 = "";

        $i0 = virtualinvoke r9.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label5;

        $r4 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        r10 = $r4;

        r11 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>($r4, r7);

        $r5 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 != 0 goto label6;

        $i3 = $i0 + 1;

        r8 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>($i3);

        goto label6;

     label5:
        r11 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        $r3 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label6;

        r8 = r9;

     label6:
        $r12 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.QName pushQName(java.lang.String,java.lang.String,org.dom4j.Namespace,java.lang.String)>(r8, r9, r11, r10);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r12);

        return $r12;
    }

    public void push(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r2;
        java.lang.String r1, r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        if r3 != null goto label1;

        r3 = "";

     label1:
        $r2 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>(r1, r3);

        virtualinvoke r0.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r2);

        return;
    }

    public org.dom4j.Namespace addNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r3;
        java.lang.String r1, r2;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r3);

        return $r3;
    }

    public org.dom4j.Namespace pop(java.lang.String)
    {
        java.util.ArrayList $r1, $r7;
        org.dom4j.tree.NamespaceStack r0;
        java.lang.StringBuffer $r4, $r5, $r13;
        int $i0, i1, $i3;
        java.lang.String $r6, $r10, r11;
        boolean $z0;
        java.io.PrintStream $r3;
        org.dom4j.Namespace r9, r12;
        java.lang.Object $r8;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r11 := @parameter0: java.lang.String;

        if r11 != null goto label1;

        r11 = "";

     label1:
        r12 = null;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r7 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r9 = (org.dom4j.Namespace) $r8;

        $r10 = virtualinvoke r9.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace remove(int)>(i1);

        r12 = r9;

        goto label4;

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label2;

     label4:
        if r12 != null goto label5;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: missing namespace prefix ignored: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label5:
        return r12;
    }

    public java.lang.String toString()
    {
        java.util.ArrayList $r5;
        org.dom4j.tree.NamespaceStack r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r7;
        java.lang.String $r2, $r6, $r8;

        r1 := @this: org.dom4j.tree.NamespaceStack;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Stack: ");

        $r5 = r1.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.String toString()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory>;

        return $r1;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory> = r1;

        return;
    }

    public org.dom4j.Namespace getDefaultNamespace()
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r1, $r2, $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace findDefaultNamespace()>();

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = $r3;

     label1:
        $r2 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace>;

        return $r2;
    }

    protected org.dom4j.QName pushQName(java.lang.String, java.lang.String, org.dom4j.Namespace, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r1;
        org.dom4j.Namespace r4;
        int $i0;
        org.dom4j.QName $r5;
        java.lang.String r0, r2, r3;

        r1 := @this: org.dom4j.tree.NamespaceStack;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.dom4j.Namespace;

        r0 := @parameter3: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r1.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = null;

     label2:
        $r5 = virtualinvoke r1.<org.dom4j.tree.NamespaceStack: org.dom4j.QName createQName(java.lang.String,java.lang.String,org.dom4j.Namespace)>(r2, r3, r4);

        return $r5;
    }

    protected org.dom4j.QName createQName(java.lang.String, java.lang.String, org.dom4j.Namespace)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace r2;
        org.dom4j.QName $r4;
        java.lang.String r1, r5;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: org.dom4j.Namespace;

        $r3 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory>;

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,org.dom4j.Namespace)>(r1, r2);

        return $r4;
    }

    protected org.dom4j.Namespace createNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace $r4;
        java.lang.String r1, r2;
        org.dom4j.DocumentFactory $r3;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.dom4j.tree.NamespaceStack: org.dom4j.DocumentFactory documentFactory>;

        $r4 = virtualinvoke $r3.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    protected org.dom4j.Namespace findDefaultNamespace()
    {
        org.dom4j.Namespace r4;
        java.util.ArrayList $r1, $r2;
        org.dom4j.tree.NamespaceStack r0;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r3;
        java.lang.String $r5, $r6;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label4;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (org.dom4j.Namespace) $r3;

        if r4 == null goto label3;

        $r5 = virtualinvoke r4.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r4.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        return r4;

     label3:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label4:
        return null;
    }

    protected org.dom4j.Namespace remove(int)
    {
        org.dom4j.tree.NamespaceStack r0;
        org.dom4j.Namespace r3;
        int i0;
        java.lang.Object $r2;
        java.util.ArrayList $r1, $r4;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        i0 := @parameter0: int;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        r3 = (org.dom4j.Namespace) $r2;

        $r4 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        virtualinvoke $r4.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        r0.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace defaultNamespace> = null;

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = null;

        return r3;
    }

    protected java.util.Map getNamespaceCache()
    {
        java.util.HashMap $r7;
        java.util.ArrayList $r2, $r3, $r9;
        org.dom4j.tree.NamespaceStack r0;
        java.util.Map $r1, $r5, $r6, $r8, $r10, $r11;
        int $i0, i1;
        java.lang.Object $r4;

        r0 := @this: org.dom4j.tree.NamespaceStack;

        $r1 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        if $r1 != null goto label2;

        $r2 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceStack>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

        if i1 >= 0 goto label1;

        $r10 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map rootNamespaceCache>;

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = $r10;

        goto label2;

     label1:
        $r3 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (java.util.Map) $r4;

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = $r5;

        $r6 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        if $r6 != null goto label2;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache> = $r7;

        $r9 = r0.<org.dom4j.tree.NamespaceStack: java.util.ArrayList namespaceCacheList>;

        $r8 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        virtualinvoke $r9.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i1, $r8);

     label2:
        $r11 = r0.<org.dom4j.tree.NamespaceStack: java.util.Map currentNamespaceCache>;

        return $r11;
    }
}
