class com.mycila.inject.internal.cglib.beans.BulkBeanEmitter extends com.mycila.inject.internal.cglib.core.ClassEmitter
{
    private static final com.mycila.inject.internal.cglib.core.Signature GET_PROPERTY_VALUES;
    private static final com.mycila.inject.internal.cglib.core.Signature SET_PROPERTY_VALUES;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_EXCEPTION;
    private static final com.mycila.inject.internal.asm.Type BULK_BEAN;
    private static final com.mycila.inject.internal.asm.Type BULK_BEAN_EXCEPTION;

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor, java.lang.String, java.lang.Class, java.lang.String[], java.lang.String[], java.lang.Class[])
    {
        java.lang.Class[] r7;
        com.mycila.inject.internal.asm.Type $r9;
        java.lang.String[] r2, r4;
        com.mycila.inject.internal.cglib.beans.BulkBeanEmitter r0;
        java.lang.reflect.Method[] r3, r5;
        int $i0, $i1;
        java.lang.Class r6;
        java.lang.String r8;
        com.mycila.inject.internal.asm.ClassVisitor r1;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BulkBeanEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r8 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Class;

        r2 := @parameter3: java.lang.String[];

        r4 := @parameter4: java.lang.String[];

        r7 := @parameter5: java.lang.Class[];

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        $i0 = lengthof r2;

        r3 = newarray (java.lang.reflect.Method)[$i0];

        $i1 = lengthof r4;

        r5 = newarray (java.lang.reflect.Method)[$i1];

        staticinvoke <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])>(r6, r2, r4, r7, r3, r5);

        $r9 = <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.asm.Type BULK_BEAN>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, r8, $r9, null, "<generated>");

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>(r0);

        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: void generateGet(java.lang.Class,java.lang.reflect.Method[])>(r6, r3);

        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: void generateSet(java.lang.Class,java.lang.reflect.Method[])>(r6, r5);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: void end_class()>();

        return;
    }

    private void generateGet(java.lang.Class, java.lang.reflect.Method[])
    {
        com.mycila.inject.internal.cglib.core.Signature $r1, $r10;
        com.mycila.inject.internal.asm.Type $r5, $r11;
        com.mycila.inject.internal.cglib.beans.BulkBeanEmitter r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        java.lang.reflect.Method[] r3;
        com.mycila.inject.internal.cglib.core.MethodInfo $r9;
        com.mycila.inject.internal.cglib.core.Local $r6;
        int $i0, $i1, i2;
        java.lang.Class r4;
        java.lang.reflect.Method $r7, $r8;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BulkBeanEmitter;

        r4 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.Method[];

        $r1 = <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.Signature GET_PROPERTY_VALUES>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        $i0 = lengthof r3;

        if $i0 < 0 goto label3;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r5);

        $r6 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r6);

        i2 = 0;

     label1:
        $i1 = lengthof r3;

        if i2 >= $i1 goto label3;

        $r7 = r3[i2];

        if $r7 == null goto label2;

        $r8 = r3[i2];

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r8);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r6);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r9);

        $r10 = virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r11 = virtualinvoke $r10.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void box(com.mycila.inject.internal.asm.Type)>($r11);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void generateSet(java.lang.Class, java.lang.reflect.Method[])
    {
        com.mycila.inject.internal.cglib.core.Block $r8;
        com.mycila.inject.internal.asm.Type $r4, $r7, $r9, $r10, $r12, $r18;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        java.lang.reflect.Method[] r3;
        com.mycila.inject.internal.cglib.core.MethodInfo $r15;
        com.mycila.inject.internal.cglib.core.Local $r5;
        int $i0, $i1, i2, i3, i4;
        com.mycila.inject.internal.asm.Type[] $r17;
        java.lang.reflect.Method $r13, $r14;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r11, $r16;
        com.mycila.inject.internal.cglib.beans.BulkBeanEmitter r0;
        java.lang.Class r6;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BulkBeanEmitter;

        r6 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.Method[];

        $r1 = <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.Signature SET_PROPERTY_VALUES>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        $i0 = lengthof r3;

        if $i0 <= 0 goto label5;

        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r5 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local(com.mycila.inject.internal.asm.Type)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r7 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r6);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r7);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        $r8 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Block begin_block()>();

        i3 = 0;

        i4 = 0;

     label1:
        $i1 = lengthof r3;

        if i4 >= $i1 goto label4;

        $r13 = r3[i4];

        if $r13 == null goto label3;

        $r14 = r3[i4];

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r14);

        i2 = i4 - i3;

        if i2 <= 0 goto label2;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void iinc(com.mycila.inject.internal.cglib.core.Local,int)>($r5, i2);

        i3 = i4;

     label2:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>(i4);

        $r16 = virtualinvoke $r15.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r17 = virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        $r18 = $r17[0];

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox(com.mycila.inject.internal.asm.Type)>($r18);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r15);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.Block: void end()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_THROWABLE>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void catch_exception(com.mycila.inject.internal.cglib.core.Block,com.mycila.inject.internal.asm.Type)>($r8, $r9);

        $r10 = <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.asm.Type BULK_BEAN_EXCEPTION>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r10);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup_x1()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r5);

        $r12 = <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.asm.Type BULK_BEAN_EXCEPTION>;

        $r11 = <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_EXCEPTION>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r12, $r11);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void athrow()>();

        goto label6;

     label5:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

     label6:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private static void validate(java.lang.Class, java.lang.String[], java.lang.String[], java.lang.Class[], java.lang.reflect.Method[], java.lang.reflect.Method[])
    {
        java.lang.NoSuchMethodException $r28;
        java.lang.reflect.Method[] r11, r17;
        java.lang.reflect.Method $r10, $r14;
        boolean $z0, $z1;
        java.lang.String[] r0, r3;
        java.lang.StringBuffer $r21, $r23, $r24, $r26, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        java.lang.String $r4, $r5, $r9, $r13, $r27;
        com.mycila.inject.internal.cglib.beans.BulkBeanException $r30, $r32, $r33, $r34, $r35;
        java.lang.Class[] r1, $r7;
        java.lang.Class r6, $r8, $r15, $r16, $r22, $r25;

        r6 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.String[];

        r0 := @parameter2: java.lang.String[];

        r1 := @parameter3: java.lang.Class[];

        r17 := @parameter4: java.lang.reflect.Method[];

        r11 := @parameter5: java.lang.reflect.Method[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label01;

        $i3 = lengthof r3;

        $i2 = lengthof r1;

        if $i3 == $i2 goto label02;

     label01:
        $r30 = new com.mycila.inject.internal.cglib.beans.BulkBeanException;

        $i9 = (int) -1;

        specialinvoke $r30.<com.mycila.inject.internal.cglib.beans.BulkBeanException: void <init>(java.lang.String,int)>("accessor array length must be equal type array length", $i9);

        throw $r30;

     label02:
        i7 = 0;

     label03:
        $i4 = lengthof r1;

        if i7 >= $i4 goto label09;

        $r4 = r3[i7];

        if $r4 == null goto label06;

        $r13 = r3[i7];

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r6, $r13, null);

        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r16 = r1[i7];

        if $r15 == $r16 goto label04;

        $r32 = new com.mycila.inject.internal.cglib.beans.BulkBeanException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Specified type ");

        $r22 = r1[i7];

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not match declared type ");

        $r25 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<com.mycila.inject.internal.cglib.beans.BulkBeanException: void <init>(java.lang.String,int)>($r27, i7);

        throw $r32;

     label04:
        $i6 = virtualinvoke $r14.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i6);

        if $z1 == 0 goto label05;

        $r33 = new com.mycila.inject.internal.cglib.beans.BulkBeanException;

        specialinvoke $r33.<com.mycila.inject.internal.cglib.beans.BulkBeanException: void <init>(java.lang.String,int)>("Property is private", i7);

        throw $r33;

     label05:
        r17[i7] = $r14;

     label06:
        $r5 = r0[i7];

        if $r5 == null goto label08;

        $r9 = r0[i7];

        $r7 = newarray (java.lang.Class)[1];

        $r8 = r1[i7];

        $r7[0] = $r8;

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r6, $r9, $r7);

        $i5 = virtualinvoke $r10.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i5);

        if $z0 == 0 goto label07;

        $r34 = new com.mycila.inject.internal.cglib.beans.BulkBeanException;

        specialinvoke $r34.<com.mycila.inject.internal.cglib.beans.BulkBeanException: void <init>(java.lang.String,int)>("Property is private", i7);

        throw $r34;

     label07:
        r11[i7] = $r10;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        goto label11;

     label10:
        $r28 := @caughtexception;

        $r35 = new com.mycila.inject.internal.cglib.beans.BulkBeanException;

        specialinvoke $r35.<com.mycila.inject.internal.cglib.beans.BulkBeanException: void <init>(java.lang.String,int)>("Cannot find specified property", i7);

        throw $r35;

     label11:
        return;

        catch java.lang.NoSuchMethodException from label02 to label09 with label10;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r0, $r1, $r2;
        com.mycila.inject.internal.asm.Type $r3, $r4;

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void getPropertyValues(Object, Object[])");

        <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.Signature GET_PROPERTY_VALUES> = $r0;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void setPropertyValues(Object, Object[])");

        <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.Signature SET_PROPERTY_VALUES> = $r1;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("Throwable, int");

        <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_EXCEPTION> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BulkBean");

        <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.asm.Type BULK_BEAN> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BulkBeanException");

        <com.mycila.inject.internal.cglib.beans.BulkBeanEmitter: com.mycila.inject.internal.asm.Type BULK_BEAN_EXCEPTION> = $r4;

        return;
    }
}
