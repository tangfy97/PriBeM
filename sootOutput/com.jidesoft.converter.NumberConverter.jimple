public abstract class com.jidesoft.converter.NumberConverter extends java.lang.Object implements com.jidesoft.converter.ObjectConverter
{
    private java.text.NumberFormat _numberFormat;
    private boolean _avoidNegativeZero;
    public static final com.jidesoft.converter.ConverterContext CONTEXT_FRACTION_NUMBER;
    private static boolean _groupingUsed;

    public void <init>()
    {
        com.jidesoft.converter.NumberConverter r0;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.text.NumberFormat)
    {
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat r1;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        r1 := @parameter0: java.text.NumberFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat _numberFormat> = r1;

        return;
    }

    private java.lang.String trimNegativeSign(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        java.lang.String r0, $r1;
        com.jidesoft.converter.NumberConverter r2;

        r2 := @this: com.jidesoft.converter.NumberConverter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(45);

        if $i0 == 0 goto label01;

        return r0;

     label01:
        i8 = 49;

     label02:
        if i8 > 57 goto label04;

        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(i8);

        if $i6 < 0 goto label03;

        return r0;

     label03:
        $i7 = i8 + 1;

        i8 = (char) $i7;

        goto label02;

     label04:
        i9 = 97;

     label05:
        if i9 > 102 goto label07;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(i9);

        if $i4 < 0 goto label06;

        return r0;

     label06:
        $i5 = i9 + 1;

        i9 = (char) $i5;

        goto label05;

     label07:
        i10 = 65;

     label08:
        if i10 > 70 goto label10;

        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(i10);

        if $i2 < 0 goto label09;

        return r0;

     label09:
        $i3 = i10 + 1;

        i10 = (char) $i3;

        goto label08;

     label10:
        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(48);

        if $i1 >= 0 goto label11;

        return r0;

     label11:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        return $r1;
    }

    public java.lang.String toString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.text.NumberFormat $r3, r12;
        byte $b0;
        java.lang.String $r4, $r9, r11, r13;
        java.lang.Number $r5;
        boolean $z0, $z1, $z2, $z3;
        double $d0;
        java.lang.IllegalArgumentException $r10;
        com.jidesoft.converter.ConverterContext r0;
        java.lang.Object r1, $r6, $r7, $r8;
        com.jidesoft.converter.NumberConverter r2;

        r2 := @this: com.jidesoft.converter.NumberConverter;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: com.jidesoft.converter.ConverterContext;

     label1:
        if r0 == null goto label2;

        $r6 = virtualinvoke r0.<com.jidesoft.converter.ConverterContext: java.lang.Object getUserObject()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r0.<com.jidesoft.converter.ConverterContext: java.lang.Object getUserObject()>();

        $z1 = $r7 instanceof java.text.NumberFormat;

        if $z1 != 0 goto label6;

     label2:
        $z3 = r1 instanceof java.lang.Number;

        if $z3 == 0 goto label4;

        $r5 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        $b0 = $d0 cmpl #NaN;

        if $b0 != 0 goto label4;

     label3:
        return "";

     label4:
        $r3 = virtualinvoke r2.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getNumberFormat()>();

        $r4 = virtualinvoke $r3.<java.text.NumberFormat: java.lang.String format(java.lang.Object)>(r1);

        r11 = $r4;

        $z0 = virtualinvoke r2.<com.jidesoft.converter.NumberConverter: boolean isAvoidNegativeZero()>();

        if $z0 == 0 goto label5;

        r11 = specialinvoke r2.<com.jidesoft.converter.NumberConverter: java.lang.String trimNegativeSign(java.lang.String)>($r4);

     label5:
        return r11;

     label6:
        $r8 = virtualinvoke r0.<com.jidesoft.converter.ConverterContext: java.lang.Object getUserObject()>();

        r12 = (java.text.NumberFormat) $r8;

        $r9 = virtualinvoke r12.<java.text.NumberFormat: java.lang.String format(java.lang.Object)>(r1);

        r13 = $r9;

        $z2 = virtualinvoke r2.<com.jidesoft.converter.NumberConverter: boolean isAvoidNegativeZero()>();

        if $z2 == 0 goto label7;

        r13 = specialinvoke r2.<com.jidesoft.converter.NumberConverter: java.lang.String trimNegativeSign(java.lang.String)>($r9);

     label7:
        return r13;

     label8:
        $r10 := @caughtexception;

        return "";

        catch java.lang.IllegalArgumentException from label1 to label3 with label8;
        catch java.lang.IllegalArgumentException from label4 to label5 with label8;
        catch java.lang.IllegalArgumentException from label6 to label7 with label8;
    }

    public boolean supportToString(java.lang.Object, com.jidesoft.converter.ConverterContext)
    {
        java.lang.Object r1;
        com.jidesoft.converter.NumberConverter r0;
        com.jidesoft.converter.ConverterContext r2;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.jidesoft.converter.ConverterContext;

        return 1;
    }

    public void setNumberFormat(java.text.NumberFormat)
    {
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat r1;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        r1 := @parameter0: java.text.NumberFormat;

        r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat _numberFormat> = r1;

        return;
    }

    protected java.text.NumberFormat getNumberFormat()
    {
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        $r1 = r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat _numberFormat>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.text.DecimalFormat: java.text.NumberFormat getInstance()>();

        r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat _numberFormat> = $r3;

        $r4 = r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat _numberFormat>;

        $z0 = staticinvoke <com.jidesoft.converter.NumberConverter: boolean isGroupingUsed()>();

        virtualinvoke $r4.<java.text.NumberFormat: void setGroupingUsed(boolean)>($z0);

     label1:
        $r2 = r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat _numberFormat>;

        return $r2;
    }

    protected java.text.NumberFormat getDefaultNumberFormat()
    {
        java.util.Locale $r0;
        com.jidesoft.converter.NumberConverter r2;
        java.text.NumberFormat $r1;
        boolean $z0;

        r2 := @this: com.jidesoft.converter.NumberConverter;

        $r0 = <java.util.Locale: java.util.Locale US>;

        $r1 = staticinvoke <java.text.DecimalFormat: java.text.NumberFormat getInstance(java.util.Locale)>($r0);

        $z0 = staticinvoke <com.jidesoft.converter.NumberConverter: boolean isGroupingUsed()>();

        virtualinvoke $r1.<java.text.NumberFormat: void setGroupingUsed(boolean)>($z0);

        return $r1;
    }

    protected java.lang.Number parseNumber(java.lang.String)
    {
        java.lang.String r2;
        java.text.ParseException $r3, $r4;
        java.lang.Number r6;
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat $r1, $r5;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        r2 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getNumberFormat()>();

        r6 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>(r2);

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = virtualinvoke r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getDefaultNumberFormat()>();

        r6 = virtualinvoke $r5.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>(r2);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        r6 = null;

     label7:
        return r6;

        catch java.text.ParseException from label1 to label2 with label3;
        catch java.text.ParseException from label4 to label5 with label6;
    }

    public static boolean isGroupingUsed()
    {
        boolean $z0;

        $z0 = <com.jidesoft.converter.NumberConverter: boolean _groupingUsed>;

        return $z0;
    }

    public static void setGroupingUsed(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.jidesoft.converter.NumberConverter: boolean _groupingUsed> = z0;

        return;
    }

    public void setFractionDigits(int, int)
    {
        int i0, i1;
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat $r1;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getNumberFormat()>();

        virtualinvoke $r1.<java.text.NumberFormat: void setMinimumFractionDigits(int)>(i0);

        virtualinvoke $r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(i1);

        return;
    }

    public void setCurrency(java.util.Currency)
    {
        java.util.Currency r2;
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat $r1;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        r2 := @parameter0: java.util.Currency;

        $r1 = virtualinvoke r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getNumberFormat()>();

        virtualinvoke $r1.<java.text.NumberFormat: void setCurrency(java.util.Currency)>(r2);

        return;
    }

    public void setIntegerDigits(int, int)
    {
        int i0, i1;
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat $r1;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getNumberFormat()>();

        virtualinvoke $r1.<java.text.NumberFormat: void setMinimumIntegerDigits(int)>(i0);

        virtualinvoke $r1.<java.text.NumberFormat: void setMaximumIntegerDigits(int)>(i1);

        return;
    }

    public void setRoundingMode(java.math.RoundingMode)
    {
        com.jidesoft.converter.NumberConverter r0;
        java.text.NumberFormat $r1;
        boolean $z0;
        java.math.RoundingMode r2;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        r2 := @parameter0: java.math.RoundingMode;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.jidesoft.converter.NumberConverter: java.text.NumberFormat getNumberFormat()>();

        virtualinvoke $r1.<java.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)>(r2);

     label1:
        return;
    }

    public boolean isAvoidNegativeZero()
    {
        com.jidesoft.converter.NumberConverter r0;
        boolean $z0;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        $z0 = r0.<com.jidesoft.converter.NumberConverter: boolean _avoidNegativeZero>;

        return $z0;
    }

    public void setAvoidNegativeZero(boolean)
    {
        com.jidesoft.converter.NumberConverter r0;
        boolean z0;

        r0 := @this: com.jidesoft.converter.NumberConverter;

        z0 := @parameter0: boolean;

        r0.<com.jidesoft.converter.NumberConverter: boolean _avoidNegativeZero> = z0;

        return;
    }

    static void <clinit>()
    {
        com.jidesoft.converter.ConverterContext $r0;

        $r0 = new com.jidesoft.converter.ConverterContext;

        specialinvoke $r0.<com.jidesoft.converter.ConverterContext: void <init>(java.lang.String)>("Fraction Number");

        <com.jidesoft.converter.NumberConverter: com.jidesoft.converter.ConverterContext CONTEXT_FRACTION_NUMBER> = $r0;

        <com.jidesoft.converter.NumberConverter: boolean _groupingUsed> = 1;

        return;
    }
}
