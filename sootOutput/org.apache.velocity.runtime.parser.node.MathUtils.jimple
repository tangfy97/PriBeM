public abstract class org.apache.velocity.runtime.parser.node.MathUtils extends java.lang.Object
{
    protected static final java.math.BigDecimal DECIMAL_ZERO;
    protected static final int BASE_LONG;
    protected static final int BASE_FLOAT;
    protected static final int BASE_DOUBLE;
    protected static final int BASE_BIGINTEGER;
    protected static final int BASE_BIGDECIMAL;
    protected static final java.util.Map ints;
    protected static final java.util.List typesBySize;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Short;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$math$BigInteger;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Double;

    public void <init>()
    {
        org.apache.velocity.runtime.parser.node.MathUtils r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigDecimal toBigDecimal(java.lang.Number)
    {
        java.math.BigDecimal $r1, $r2, $r4;
        java.math.BigInteger $r3;
        java.lang.Number r0;
        boolean $z0, $z1;
        double $d0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $r4 = (java.math.BigDecimal) r0;

        return $r4;

     label1:
        $z1 = r0 instanceof java.math.BigInteger;

        if $z1 == 0 goto label2;

        $r2 = new java.math.BigDecimal;

        $r3 = (java.math.BigInteger) r0;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r3);

        return $r2;

     label2:
        $r1 = new java.math.BigDecimal;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        specialinvoke $r1.<java.math.BigDecimal: void <init>(double)>($d0);

        return $r1;
    }

    public static java.math.BigInteger toBigInteger(java.lang.Number)
    {
        long $l0;
        java.math.BigInteger $r1, $r2;
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $z0 = r0 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        $r2 = (java.math.BigInteger) r0;

        return $r2;

     label1:
        $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r1;
    }

    public static boolean isZero(java.lang.Number)
    {
        java.math.BigDecimal $r1, $r2;
        byte $b1, $b2, $b3;
        int $i0, $i4;
        java.math.BigInteger $r3, $r4;
        java.lang.Number r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        double $d0, $d1;
        float $f0;

        r0 := @parameter0: java.lang.Number;

        $z0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: boolean isInteger(java.lang.Number)>(r0);

        if $z0 == 0 goto label06;

        $z3 = r0 instanceof java.math.BigInteger;

        if $z3 == 0 goto label03;

        $r4 = (java.math.BigInteger) r0;

        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i4 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i4 != 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        return $z4;

     label03:
        $d1 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $b3 = $d1 cmpl 0.0;

        if $b3 != 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        return $z5;

     label06:
        $z1 = r0 instanceof java.lang.Float;

        if $z1 == 0 goto label09;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $b2 = $f0 cmpl 0.0F;

        if $b2 != 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        return $z6;

     label09:
        $z2 = r0 instanceof java.lang.Double;

        if $z2 == 0 goto label12;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $b1 = $d0 cmpl 0.0;

        if $b1 != 0 goto label10;

        $z7 = 1;

        goto label11;

     label10:
        $z7 = 0;

     label11:
        return $z7;

     label12:
        $r1 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r2 = <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal DECIMAL_ZERO>;

        $i0 = virtualinvoke $r1.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r2);

        if $i0 != 0 goto label13;

        $z8 = 1;

        goto label14;

     label13:
        $z8 = 0;

     label14:
        return $z8;
    }

    public static boolean isInteger(java.lang.Number)
    {
        java.util.Map $r1;
        java.lang.Class $r2;
        java.lang.Number r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Number;

        $r1 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints>;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public static java.lang.Number wrapPrimitive(long, java.lang.Class)
    {
        java.lang.Integer $r26;
        byte $b1, $b2, $b4, $b5, $b8, $b9, $b11;
        java.lang.Long $r27;
        java.lang.Short $r25;
        java.math.BigInteger $r4;
        java.lang.Byte $r24;
        long l0;
        short $s7;
        int $i3, $i6, $i10, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.Class $r0, $r1, $r2, $r3, $r6, $r7, $r9, $r10, $r12, $r13, $r15, r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;

        l0 := @parameter0: long;

        r16 := @parameter1: java.lang.Class;

        $r15 = r16;

        $r0 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte>;

        if $r0 != null goto label01;

        $r17 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte> = $r17;

        goto label02;

     label01:
        $r17 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte>;

     label02:
        if $r15 != $r17 goto label07;

        $b8 = l0 cmp 127L;

        $i12 = (int) $b8;

        if $i12 > 0 goto label03;

        $b9 = l0 cmp -128L;

        $i13 = (int) $b9;

        if $i13 >= 0 goto label06;

     label03:
        $r13 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

        if $r13 != null goto label04;

        $r18 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short> = $r18;

        goto label05;

     label04:
        $r18 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

     label05:
        r16 = $r18;

        goto label07;

     label06:
        $r24 = new java.lang.Byte;

        $i10 = (int) l0;

        $b11 = (byte) $i10;

        specialinvoke $r24.<java.lang.Byte: void <init>(byte)>($b11);

        return $r24;

     label07:
        $r12 = r16;

        $r1 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

        if $r1 != null goto label08;

        $r19 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short> = $r19;

        goto label09;

     label08:
        $r19 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

     label09:
        if $r12 != $r19 goto label14;

        $b4 = l0 cmp 32767L;

        $i14 = (int) $b4;

        if $i14 > 0 goto label10;

        $b5 = l0 cmp -32768L;

        $i15 = (int) $b5;

        if $i15 >= 0 goto label13;

     label10:
        $r10 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

        if $r10 != null goto label11;

        $r20 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer> = $r20;

        goto label12;

     label11:
        $r20 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

     label12:
        r16 = $r20;

        goto label14;

     label13:
        $r25 = new java.lang.Short;

        $i6 = (int) l0;

        $s7 = (short) $i6;

        specialinvoke $r25.<java.lang.Short: void <init>(short)>($s7);

        return $r25;

     label14:
        $r9 = r16;

        $r2 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

        if $r2 != null goto label15;

        $r21 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer> = $r21;

        goto label16;

     label15:
        $r21 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

     label16:
        if $r9 != $r21 goto label21;

        $b1 = l0 cmp 2147483647L;

        $i16 = (int) $b1;

        if $i16 > 0 goto label17;

        $b2 = l0 cmp -2147483648L;

        $i17 = (int) $b2;

        if $i17 >= 0 goto label20;

     label17:
        $r7 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

        if $r7 != null goto label18;

        $r22 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long> = $r22;

        goto label19;

     label18:
        $r22 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

     label19:
        r16 = $r22;

        goto label21;

     label20:
        $r26 = new java.lang.Integer;

        $i3 = (int) l0;

        specialinvoke $r26.<java.lang.Integer: void <init>(int)>($i3);

        return $r26;

     label21:
        $r6 = r16;

        $r3 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

        if $r3 != null goto label22;

        $r23 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long> = $r23;

        goto label23;

     label22:
        $r23 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

     label23:
        if $r6 != $r23 goto label24;

        $r27 = new java.lang.Long;

        specialinvoke $r27.<java.lang.Long: void <init>(long)>(l0);

        return $r27;

     label24:
        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        return $r4;
    }

    private static java.lang.Number wrapPrimitive(long, java.lang.Number, java.lang.Number)
    {
        long l2;
        java.util.List $r1, $r4;
        int $i0, $i1;
        java.lang.Class $r2, $r5, $r6, $r8;
        java.lang.Number r0, r3, $r7, $r9;

        l2 := @parameter0: long;

        r0 := @parameter1: java.lang.Number;

        r3 := @parameter2: java.lang.Number;

        $r1 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int indexOf(java.lang.Object)>($r2);

        $r4 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = interfaceinvoke $r4.<java.util.List: int indexOf(java.lang.Object)>($r5);

        if $i0 <= $i1 goto label1;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Class)>(l2, $r8);

        return $r9;

     label1:
        $r6 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Class)>(l2, $r6);

        return $r7;
    }

    private static int findCalculationBase(java.lang.Number, java.lang.Number)
    {
        java.lang.Number r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $z0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: boolean isInteger(java.lang.Number)>(r0);

        $z1 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: boolean isInteger(java.lang.Number)>(r1);

        $z2 = r0 instanceof java.math.BigDecimal;

        if $z2 != 0 goto label2;

        $z3 = r1 instanceof java.math.BigDecimal;

        if $z3 != 0 goto label2;

        if $z0 == 0 goto label1;

        if $z1 != 0 goto label3;

     label1:
        $z4 = r0 instanceof java.math.BigInteger;

        if $z4 != 0 goto label2;

        $z5 = r1 instanceof java.math.BigInteger;

        if $z5 == 0 goto label3;

     label2:
        return 4;

     label3:
        if $z0 == 0 goto label6;

        if $z1 == 0 goto label6;

        $z8 = r0 instanceof java.math.BigInteger;

        if $z8 != 0 goto label4;

        $z9 = r1 instanceof java.math.BigInteger;

        if $z9 == 0 goto label5;

     label4:
        return 3;

     label5:
        return 0;

     label6:
        $z6 = r0 instanceof java.lang.Double;

        if $z6 != 0 goto label7;

        $z7 = r1 instanceof java.lang.Double;

        if $z7 == 0 goto label8;

     label7:
        return 2;

     label8:
        return 1;
    }

    public static java.lang.Number add(java.lang.Number, java.lang.Number)
    {
        java.lang.Float $r14;
        java.lang.Double $r15;
        long $l1, $l2, l3, $l4, $l6;
        java.math.BigDecimal $r11, $r12, $r13;
        byte $b5, $b7;
        int $i0, $i8, $i9;
        java.math.BigInteger $r2, $r3, $r4, $r8, $r9, $r10;
        java.lang.Number r0, r1, $r7;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: int findCalculationBase(java.lang.Number,java.lang.Number)>(r0, r1);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r3);

        return $r4;

     label2:
        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l2 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        l3 = $l1 + $l2;

        $l4 = l3 ^ $l1;

        $b5 = $l4 cmp 0L;

        $i8 = (int) $b5;

        if $i8 >= 0 goto label3;

        $l6 = l3 ^ $l2;

        $b7 = $l6 cmp 0L;

        $i9 = (int) $b7;

        if $i9 >= 0 goto label3;

        $r8 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r9 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        return $r10;

     label3:
        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Number,java.lang.Number)>(l3, r0, r1);

        return $r7;

     label4:
        $r14 = new java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $f2 = $f0 + $f1;

        specialinvoke $r14.<java.lang.Float: void <init>(float)>($f2);

        return $r14;

     label5:
        $r15 = new java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 + $d1;

        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d2);

        return $r15;

     label6:
        $r11 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r12 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r1);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r12);

        return $r13;
    }

    public static java.lang.Number subtract(java.lang.Number, java.lang.Number)
    {
        java.lang.Float $r14;
        java.lang.Double $r15;
        long $l1, $l2, l3, $l4, $l6, $l7;
        java.math.BigDecimal $r11, $r12, $r13;
        byte $b5, $b8;
        int $i0, $i9, $i10;
        java.math.BigInteger $r2, $r3, $r4, $r8, $r9, $r10;
        java.lang.Number r0, r1, $r7;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: int findCalculationBase(java.lang.Number,java.lang.Number)>(r0, r1);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        return $r4;

     label2:
        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l2 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        l3 = $l1 - $l2;

        $l4 = l3 ^ $l1;

        $b5 = $l4 cmp 0L;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label3;

        $l6 = $l2 ^ -1L;

        $l7 = l3 ^ $l6;

        $b8 = $l7 cmp 0L;

        $i10 = (int) $b8;

        if $i10 >= 0 goto label3;

        $r8 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r9 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r9);

        return $r10;

     label3:
        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Number,java.lang.Number)>(l3, r0, r1);

        return $r7;

     label4:
        $r14 = new java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $f2 = $f0 - $f1;

        specialinvoke $r14.<java.lang.Float: void <init>(float)>($f2);

        return $r14;

     label5:
        $r15 = new java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 - $d1;

        specialinvoke $r15.<java.lang.Double: void <init>(double)>($d2);

        return $r15;

     label6:
        $r11 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r12 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r1);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r12);

        return $r13;
    }

    public static java.lang.Number multiply(java.lang.Number, java.lang.Number)
    {
        java.lang.Float $r6;
        java.lang.Double $r5;
        long $l1, $l2, l3, $l5;
        java.math.BigDecimal $r11, $r12, $r13;
        byte $b4, $b6;
        int $i0;
        java.math.BigInteger $r2, $r3, $r4, $r8, $r9, $r10;
        java.lang.Number r0, r1, $r7;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: int findCalculationBase(java.lang.Number,java.lang.Number)>(r0, r1);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label1;
            default: goto label6;
        };

     label1:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        return $r4;

     label2:
        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l2 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        l3 = $l1 * $l2;

        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label3;

        $l5 = l3 / $l2;

        $b6 = $l5 cmp $l1;

        if $b6 == 0 goto label3;

        $r8 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r9 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        return $r10;

     label3:
        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Number,java.lang.Number)>(l3, r0, r1);

        return $r7;

     label4:
        $r6 = new java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $f2 = $f0 * $f1;

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f2);

        return $r6;

     label5:
        $r5 = new java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 * $d1;

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d2);

        return $r5;

     label6:
        $r11 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r12 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r1);

        $r13 = virtualinvoke $r11.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r12);

        return $r13;
    }

    public static java.lang.Number divide(java.lang.Number, java.lang.Number)
    {
        java.lang.Float $r6;
        java.lang.Double $r5;
        long $l1, $l2, $l3;
        java.math.BigDecimal $r8, $r9, $r10;
        int $i0;
        java.math.BigInteger $r2, $r3, $r4;
        java.lang.Number r0, r1, $r7;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: int findCalculationBase(java.lang.Number,java.lang.Number)>(r0, r1);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label1;
            default: goto label5;
        };

     label1:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r3);

        return $r4;

     label2:
        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l2 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l3 = $l1 / $l2;

        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Number,java.lang.Number)>($l3, r0, r1);

        return $r7;

     label3:
        $r6 = new java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $f2 = $f0 / $f1;

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f2);

        return $r6;

     label4:
        $r5 = new java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 / $d1;

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d2);

        return $r5;

     label5:
        $r8 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r9 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r1);

        $r10 = virtualinvoke $r8.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int)>($r9, 5);

        return $r10;
    }

    public static java.lang.Number modulo(java.lang.Number, java.lang.Number) throws java.lang.ArithmeticException
    {
        java.lang.Float $r6;
        java.lang.Double $r5;
        long $l1, $l2, $l3;
        int $i0;
        java.math.BigInteger $r2, $r3, $r4;
        java.lang.ArithmeticException $r8;
        java.lang.Number r0, r1, $r7;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: int findCalculationBase(java.lang.Number,java.lang.Number)>(r0, r1);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label1;
            default: goto label5;
        };

     label1:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $r4 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        return $r4;

     label2:
        $l1 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l2 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $l3 = $l1 % $l2;

        $r7 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Number wrapPrimitive(long,java.lang.Number,java.lang.Number)>($l3, r0, r1);

        return $r7;

     label3:
        $r6 = new java.lang.Float;

        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $f2 = $f0 % $f1;

        specialinvoke $r6.<java.lang.Float: void <init>(float)>($f2);

        return $r6;

     label4:
        $r5 = new java.lang.Double;

        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $d2 = $d0 % $d1;

        specialinvoke $r5.<java.lang.Double: void <init>(double)>($d2);

        return $r5;

     label5:
        $r8 = new java.lang.ArithmeticException;

        specialinvoke $r8.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Cannot calculate the modulo of BigDecimals.");

        throw $r8;
    }

    public static int compare(java.lang.Number, java.lang.Number)
    {
        long $l6, $l7;
        java.math.BigDecimal $r4, $r5;
        byte $b2, $b3, $b4, $b5, $b8, $b9;
        int $i0, $i1, $i10, $i11, $i13, $i14, $i15, $i17, $i18, $i19, $i21, $i22;
        java.math.BigInteger $r2, $r3;
        java.lang.Number r0, r1;
        double $d0, $d1;
        float $f0, $f1;

        r0 := @parameter0: java.lang.Number;

        r1 := @parameter1: java.lang.Number;

        $i0 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: int findCalculationBase(java.lang.Number,java.lang.Number)>(r0, r1);

        tableswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label05;
            case 2: goto label08;
            case 3: goto label01;
            default: goto label11;
        };

     label01:
        $r2 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r0);

        $r3 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigInteger toBigInteger(java.lang.Number)>(r1);

        $i1 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        return $i1;

     label02:
        $l6 = virtualinvoke r0.<java.lang.Number: long longValue()>();

        $l7 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $b8 = $l6 cmp $l7;

        $i11 = (int) $b8;

        if $i11 >= 0 goto label03;

        $i13 = (int) -1;

        return $i13;

     label03:
        $b9 = $l6 cmp $l7;

        $i14 = (int) $b9;

        if $i14 <= 0 goto label04;

        return 1;

     label04:
        return 0;

     label05:
        $f0 = virtualinvoke r0.<java.lang.Number: float floatValue()>();

        $f1 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $b4 = $f0 cmpg $f1;

        $i15 = (int) $b4;

        if $i15 >= 0 goto label06;

        $i17 = (int) -1;

        return $i17;

     label06:
        $b5 = $f0 cmpl $f1;

        $i18 = (int) $b5;

        if $i18 <= 0 goto label07;

        return 1;

     label07:
        return 0;

     label08:
        $d0 = virtualinvoke r0.<java.lang.Number: double doubleValue()>();

        $d1 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $b2 = $d0 cmpg $d1;

        $i19 = (int) $b2;

        if $i19 >= 0 goto label09;

        $i21 = (int) -1;

        return $i21;

     label09:
        $b3 = $d0 cmpl $d1;

        $i22 = (int) $b3;

        if $i22 <= 0 goto label10;

        return 1;

     label10:
        return 0;

     label11:
        $r4 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r0);

        $r5 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal toBigDecimal(java.lang.Number)>(r1);

        $i10 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r5);

        return $i10;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r0, $r5, $r8, $r11, $r14, $r17;
        java.util.Map $r4, $r7, $r10, $r13, $r16;
        java.math.BigInteger $r1;
        java.util.List $r20, $r22, $r24, $r26, $r28, $r30;
        java.util.HashMap $r2;
        java.util.ArrayList $r18;
        java.lang.Class $r3, $r6, $r9, $r12, $r15, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41;

        <org.apache.velocity.runtime.parser.node.MathUtils: int BASE_BIGDECIMAL> = 4;

        <org.apache.velocity.runtime.parser.node.MathUtils: int BASE_BIGINTEGER> = 3;

        <org.apache.velocity.runtime.parser.node.MathUtils: int BASE_DOUBLE> = 2;

        <org.apache.velocity.runtime.parser.node.MathUtils: int BASE_FLOAT> = 1;

        <org.apache.velocity.runtime.parser.node.MathUtils: int BASE_LONG> = 0;

        $r0 = new java.math.BigDecimal;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r1);

        <org.apache.velocity.runtime.parser.node.MathUtils: java.math.BigDecimal DECIMAL_ZERO> = $r0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints> = $r2;

        $r4 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints>;

        $r3 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte>;

        if $r3 != null goto label01;

        $r31 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte> = $r31;

        goto label02;

     label01:
        $r31 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte>;

     label02:
        $r5 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(127L);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r5);

        $r7 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints>;

        $r6 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

        if $r6 != null goto label03;

        $r32 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short> = $r32;

        goto label04;

     label03:
        $r32 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

     label04:
        $r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(32767L);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r8);

        $r10 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints>;

        $r9 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

        if $r9 != null goto label05;

        $r33 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer> = $r33;

        goto label06;

     label05:
        $r33 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

     label06:
        $r11 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2147483647L);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r11);

        $r13 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints>;

        $r12 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

        if $r12 != null goto label07;

        $r34 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long> = $r34;

        goto label08;

     label07:
        $r34 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

     label08:
        $r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(9223372036854775807L);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, $r14);

        $r16 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.Map ints>;

        $r15 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$math$BigInteger>;

        if $r15 != null goto label09;

        $r35 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.math.BigInteger");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$math$BigInteger> = $r35;

        goto label10;

     label09:
        $r35 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$math$BigInteger>;

     label10:
        $r17 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-1L);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r17);

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize> = $r18;

        $r20 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r19 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte>;

        if $r19 != null goto label11;

        $r36 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Byte");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte> = $r36;

        goto label12;

     label11:
        $r36 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Byte>;

     label12:
        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r36);

        $r22 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r21 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

        if $r21 != null goto label13;

        $r37 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Short");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short> = $r37;

        goto label14;

     label13:
        $r37 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Short>;

     label14:
        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r37);

        $r24 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r23 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

        if $r23 != null goto label15;

        $r38 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Integer");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer> = $r38;

        goto label16;

     label15:
        $r38 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Integer>;

     label16:
        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r38);

        $r26 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r25 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

        if $r25 != null goto label17;

        $r39 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Long");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long> = $r39;

        goto label18;

     label17:
        $r39 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Long>;

     label18:
        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r39);

        $r28 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r27 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Float>;

        if $r27 != null goto label19;

        $r40 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Float");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Float> = $r40;

        goto label20;

     label19:
        $r40 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Float>;

     label20:
        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r40);

        $r30 = <org.apache.velocity.runtime.parser.node.MathUtils: java.util.List typesBySize>;

        $r29 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Double>;

        if $r29 != null goto label21;

        $r41 = staticinvoke <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$(java.lang.String)>("java.lang.Double");

        <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Double> = $r41;

        goto label22;

     label21:
        $r41 = <org.apache.velocity.runtime.parser.node.MathUtils: java.lang.Class class$java$lang$Double>;

     label22:
        interfaceinvoke $r30.<java.util.List: boolean add(java.lang.Object)>($r41);

        return;
    }
}
