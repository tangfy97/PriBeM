public class org.waveprotocol.box.server.ServerMain extends java.lang.Object
{
    private static final java.lang.String PROPERTIES_FILE_KEY;
    private static final org.waveprotocol.wave.util.logging.Log LOG;

    public void <init>()
    {
        org.waveprotocol.box.server.ServerMain r0;

        r0 := @this: org.waveprotocol.box.server.ServerMain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.lang.Class[] $r0;
        com.google.inject.Module $r1;
        java.lang.String[] r2;

        r2 := @parameter0: java.lang.String[];

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Lorg/waveprotocol/box/server/CoreSettings;";

        $r1 = staticinvoke <org.waveprotocol.wave.util.settings.SettingsBinder: com.google.inject.Module bindSettings(java.lang.String,java.lang.Class[])>("wave.server.config", $r0);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void run(com.google.inject.Module)>($r1);

        return;
    }

    public static void run(com.google.inject.Module) throws org.waveprotocol.box.server.persistence.PersistenceException, org.apache.commons.configuration.ConfigurationException, org.waveprotocol.box.server.waveserver.WaveServerException
    {
        com.google.inject.Module r1, $r27, $r47, $r50;
        com.google.inject.Key $r4, $r8, $r12, $r16, $r20, $r24, $r37;
        java.lang.Integer $r10, $r14, $r18, $r22, $r26;
        org.waveprotocol.box.server.waveserver.WaveBus $r52;
        org.waveprotocol.wave.util.logging.Log $r40;
        boolean $z0, $z1;
        org.waveprotocol.box.server.robots.RobotApiModule $r56;
        com.google.inject.Module[] $r0, $r30, $r48;
        org.waveprotocol.box.server.persistence.PersistenceModule $r49;
        java.lang.StringBuilder $r43, $r44, $r57;
        java.lang.Throwable $r59;
        org.waveprotocol.box.server.ServerModule $r55;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Boolean $r6;
        java.lang.String $r39, $r45, $r53;
        java.lang.Class[] $r46;
        com.google.inject.Injector $r2, $r33, r54;
        org.waveprotocol.box.server.rpc.ServerRpcProvider $r51;
        com.google.inject.name.Named $r3, $r7, $r11, $r15, $r19, $r23, $r36;
        java.lang.Object $r5, $r9, $r13, $r17, $r21, $r25, $r28, $r29, $r34, $r35, $r38;
        org.waveprotocol.box.server.waveserver.WaveServerException $r58;

        r1 := @parameter0: com.google.inject.Module;

        $r0 = newarray (com.google.inject.Module)[1];

        $r0[0] = r1;

        $r2 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r0);

        r54 = $r2;

        $r3 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("enable_federation");

        $r4 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Boolean;", $r3);

        $r5 = interfaceinvoke $r2.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        $r7 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("listener_executor_thread_count");

        $r8 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Integer;", $r7);

        $r9 = interfaceinvoke $r2.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r8);

        $r10 = (java.lang.Integer) $r9;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $r11 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("wavelet_load_executor_thread_count");

        $r12 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Integer;", $r11);

        $r13 = interfaceinvoke $r2.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r12);

        $r14 = (java.lang.Integer) $r13;

        $i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $r15 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("delta_persist_executor_thread_count");

        $r16 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Integer;", $r15);

        $r17 = interfaceinvoke $r2.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r16);

        $r18 = (java.lang.Integer) $r17;

        $i2 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $r19 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("storage_continuation_executor_thread_count");

        $r20 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Integer;", $r19);

        $r21 = interfaceinvoke $r2.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r20);

        $r22 = (java.lang.Integer) $r21;

        $i3 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        $r23 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("lookup_executor_thread_count");

        $r24 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Integer;", $r23);

        $r25 = interfaceinvoke $r2.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r24);

        $r26 = (java.lang.Integer) $r25;

        $i4 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        if $z0 == 0 goto label1;

        $r46 = newarray (java.lang.Class)[1];

        $r46[0] = class "Lorg/waveprotocol/wave/federation/FederationSettings;";

        $r47 = staticinvoke <org.waveprotocol.wave.util.settings.SettingsBinder: com.google.inject.Module bindSettings(java.lang.String,java.lang.Class[])>("wave.server.config", $r46);

        $r48 = newarray (com.google.inject.Module)[1];

        $r48[0] = $r47;

        r54 = interfaceinvoke $r2.<com.google.inject.Injector: com.google.inject.Injector createChildInjector(com.google.inject.Module[])>($r48);

     label1:
        $r27 = staticinvoke <org.waveprotocol.box.server.ServerMain: com.google.inject.Module buildFederationModule(com.google.inject.Injector,boolean)>(r54, $z0);

        $r28 = interfaceinvoke r54.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/persistence/PersistenceModule;");

        $r49 = (org.waveprotocol.box.server.persistence.PersistenceModule) $r28;

        $r29 = interfaceinvoke r54.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/SearchModule;");

        $r50 = (com.google.inject.Module) $r29;

        $r30 = newarray (com.google.inject.Module)[5];

        $r55 = new org.waveprotocol.box.server.ServerModule;

        specialinvoke $r55.<org.waveprotocol.box.server.ServerModule: void <init>(boolean,int,int,int,int,int)>($z0, $i0, $i1, $i2, $i3, $i4);

        $r30[0] = $r55;

        $r56 = new org.waveprotocol.box.server.robots.RobotApiModule;

        specialinvoke $r56.<org.waveprotocol.box.server.robots.RobotApiModule: void <init>()>();

        $r30[1] = $r56;

        $r30[2] = $r27;

        $r30[3] = $r49;

        $r30[4] = $r50;

        $r33 = interfaceinvoke r54.<com.google.inject.Injector: com.google.inject.Injector createChildInjector(com.google.inject.Module[])>($r30);

        $r34 = interfaceinvoke $r33.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/ServerRpcProvider;");

        $r51 = (org.waveprotocol.box.server.rpc.ServerRpcProvider) $r34;

        $r35 = interfaceinvoke $r33.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveBus;");

        $r52 = (org.waveprotocol.box.server.waveserver.WaveBus) $r35;

        $r36 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("wave_server_domain");

        $r37 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/String;", $r36);

        $r38 = interfaceinvoke $r33.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r37);

        $r53 = (java.lang.String) $r38;

        $r39 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: java.lang.String makeDomainAddress(java.lang.String)>($r53);

        $z1 = staticinvoke <org.waveprotocol.wave.model.wave.ParticipantIdUtil: boolean isDomainAddress(java.lang.String)>($r39);

        if $z1 != 0 goto label2;

        $r58 = new org.waveprotocol.box.server.waveserver.WaveServerException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid wave domain: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<org.waveprotocol.box.server.waveserver.WaveServerException: void <init>(java.lang.String)>($r45);

        $r59 = (java.lang.Throwable) $r58;

        throw $r59;

     label2:
        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeServer(com.google.inject.Injector,java.lang.String)>($r33, $r53);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeServlets(com.google.inject.Injector,org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r33, $r51);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeRobotAgents(com.google.inject.Injector,org.waveprotocol.box.server.rpc.ServerRpcProvider)>($r33, $r51);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeRobots(com.google.inject.Injector,org.waveprotocol.box.server.waveserver.WaveBus)>($r33, $r52);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeFrontend(com.google.inject.Injector,org.waveprotocol.box.server.rpc.ServerRpcProvider,org.waveprotocol.box.server.waveserver.WaveBus)>($r33, $r51, $r52);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeFederation(com.google.inject.Injector)>($r33);

        staticinvoke <org.waveprotocol.box.server.ServerMain: void initializeSearch(com.google.inject.Injector,org.waveprotocol.box.server.waveserver.WaveBus)>($r33, $r52);

        $r40 = <org.waveprotocol.box.server.ServerMain: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r40.<org.waveprotocol.wave.util.logging.Log: void info(java.lang.String)>("Starting server");

        virtualinvoke $r51.<org.waveprotocol.box.server.rpc.ServerRpcProvider: void startWebSocketServer(com.google.inject.Injector)>($r33);

        return;
    }

    private static com.google.inject.Module buildFederationModule(com.google.inject.Injector, boolean) throws org.apache.commons.configuration.ConfigurationException
    {
        com.google.inject.Injector r0;
        com.google.inject.Module r3;
        java.lang.Object $r1, $r2;
        boolean z0;

        r0 := @parameter0: com.google.inject.Injector;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/wave/federation/xmpp/XmppFederationModule;");

        r3 = (com.google.inject.Module) $r2;

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/wave/federation/noop/NoOpFederationModule;");

        r3 = (com.google.inject.Module) $r1;

     label2:
        return r3;
    }

    private static void initializeServer(com.google.inject.Injector, java.lang.String) throws org.waveprotocol.box.server.persistence.PersistenceException, org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider $r8;
        com.google.inject.Injector r0;
        org.waveprotocol.wave.crypto.CertPathStore r5;
        java.lang.Object $r1, $r4, $r6;
        org.waveprotocol.box.server.persistence.AccountStore r2;
        java.lang.String r3;
        org.waveprotocol.box.server.persistence.SignerInfoStore $r7;
        boolean $z0;

        r0 := @parameter0: com.google.inject.Injector;

        r3 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/persistence/AccountStore;");

        r2 = (org.waveprotocol.box.server.persistence.AccountStore) $r1;

        interfaceinvoke r2.<org.waveprotocol.box.server.persistence.AccountStore: void initializeAccountStore()>();

        staticinvoke <org.waveprotocol.box.server.authentication.AccountStoreHolder: void init(org.waveprotocol.box.server.persistence.AccountStore,java.lang.String)>(r2, r3);

        $r4 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/wave/crypto/CertPathStore;");

        r5 = (org.waveprotocol.wave.crypto.CertPathStore) $r4;

        $z0 = r5 instanceof org.waveprotocol.box.server.persistence.SignerInfoStore;

        if $z0 == 0 goto label1;

        $r7 = (org.waveprotocol.box.server.persistence.SignerInfoStore) r5;

        interfaceinvoke $r7.<org.waveprotocol.box.server.persistence.SignerInfoStore: void initializeSignerInfoStore()>();

     label1:
        $r6 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletProvider;");

        $r8 = (org.waveprotocol.box.server.waveserver.WaveletProvider) $r6;

        interfaceinvoke $r8.<org.waveprotocol.box.server.waveserver.WaveletProvider: void initialize()>();

        return;
    }

    private static void initializeServlets(com.google.inject.Injector, org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        com.google.inject.Key $r3, $r7, $r10;
        java.lang.Integer $r12;
        java.util.Map $r18;
        int $i0;
        java.lang.Boolean $r5;
        java.lang.String $r17, $r19;
        boolean $z0;
        com.google.inject.Injector r1;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;
        com.google.inject.name.Named $r2, $r6, $r9;
        java.lang.Object $r4, $r8, $r11;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        r1 := @parameter0: com.google.inject.Injector;

        r0 := @parameter1: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/gadget/gadgetlist", class "Lorg/waveprotocol/box/server/rpc/GadgetProviderServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/attachment/*", class "Lorg/waveprotocol/box/server/rpc/AttachmentServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/auth/signin", class "Lorg/waveprotocol/box/server/rpc/AuthenticationServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/auth/signout", class "Lorg/waveprotocol/box/server/rpc/SignOutServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/auth/register", class "Lorg/waveprotocol/box/server/rpc/UserRegistrationServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/fetch/*", class "Lorg/waveprotocol/box/server/rpc/FetchServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/search/*", class "Lorg/waveprotocol/box/server/rpc/SearchServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/notification/*", class "Lorg/waveprotocol/box/server/rpc/NotificationServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/robot/dataapi", class "Lorg/waveprotocol/box/server/robots/dataapi/DataApiServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/robot/dataapi/oauth/*", class "Lorg/waveprotocol/box/server/robots/dataapi/DataApiOAuthServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/robot/dataapi/rpc", class "Lorg/waveprotocol/box/server/robots/dataapi/DataApiServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/robot/register/*", class "Lorg/waveprotocol/box/server/robots/RobotRegistrationServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/robot/rpc", class "Lorg/waveprotocol/box/server/robots/active/ActiveApiServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/webclient/remote_logging", class "Lcom/google/gwt/logging/server/RemoteLoggingServiceImpl;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/profile/*", class "Lorg/waveprotocol/box/server/rpc/FetchProfilesServlet;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/waveref/*", class "Lorg/waveprotocol/box/server/rpc/WaveRefServlet;");

        $r2 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("enable_import");

        $r3 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Boolean;", $r2);

        $r4 = interfaceinvoke r1.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/import", class "Lorg/waveprotocol/box/server/waveserver/ImportServlet;");

     label1:
        $r6 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("gadget_server_hostname");

        $r7 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/String;", $r6);

        $r8 = interfaceinvoke r1.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r7);

        $r19 = (java.lang.String) $r8;

        $r9 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("gadget_server_port");

        $r10 = staticinvoke <com.google.inject.Key: com.google.inject.Key get(java.lang.Class,java.lang.'annotation'.Annotation)>(class "Ljava/lang/Integer;", $r9);

        $r11 = interfaceinvoke r1.<com.google.inject.Injector: java.lang.Object getInstance(com.google.inject.Key)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("HostHeader", $r17);

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class,java.util.Map)>("/gadgets/*", class "Lorg/waveprotocol/box/server/ServerMain$GadgetProxyServlet;", $r18);

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/", class "Lorg/waveprotocol/box/server/rpc/WaveClientServlet;");

        return;
    }

    private static void initializeRobots(com.google.inject.Injector, org.waveprotocol.box.server.waveserver.WaveBus)
    {
        com.google.inject.Injector r0;
        org.waveprotocol.box.server.waveserver.WaveBus r3;
        org.waveprotocol.box.server.robots.passive.RobotsGateway r2;
        java.lang.Object $r1;

        r0 := @parameter0: com.google.inject.Injector;

        r3 := @parameter1: org.waveprotocol.box.server.waveserver.WaveBus;

        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/robots/passive/RobotsGateway;");

        r2 = (org.waveprotocol.box.server.robots.passive.RobotsGateway) $r1;

        interfaceinvoke r3.<org.waveprotocol.box.server.waveserver.WaveBus: void subscribe(org.waveprotocol.box.server.waveserver.WaveBus$Subscriber)>(r2);

        return;
    }

    private static void initializeRobotAgents(com.google.inject.Injector, org.waveprotocol.box.server.rpc.ServerRpcProvider)
    {
        com.google.inject.Injector r1;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r0;

        r1 := @parameter0: com.google.inject.Injector;

        r0 := @parameter1: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/agent/passwd/user/*", class "Lorg/waveprotocol/box/server/robots/agent/passwd/PasswordRobot;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/agent/passwd/admin/*", class "Lorg/waveprotocol/box/server/robots/agent/passwd/PasswordAdminRobot;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/agent/welcome/*", class "Lorg/waveprotocol/box/server/robots/agent/welcome/WelcomeRobot;");

        virtualinvoke r0.<org.waveprotocol.box.server.rpc.ServerRpcProvider: org.eclipse.jetty.servlet.ServletHolder addServlet(java.lang.String,java.lang.Class)>("/agent/registration/admin/*", class "Lorg/waveprotocol/box/server/robots/agent/registration/RegistrationRobot;");

        return;
    }

    private static void initializeFrontend(com.google.inject.Injector, org.waveprotocol.box.server.rpc.ServerRpcProvider, org.waveprotocol.box.server.waveserver.WaveBus) throws org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.box.server.waveserver.WaveletProvider r4;
        org.waveprotocol.box.server.frontend.WaveletInfo $r5;
        org.waveprotocol.box.server.frontend.WaveClientRpcImpl $r8;
        com.google.inject.Injector r0;
        org.waveprotocol.box.server.waveserver.WaveBus r6;
        org.waveprotocol.wave.model.version.HashedVersionFactory r2;
        org.waveprotocol.box.server.rpc.ServerRpcProvider r9;
        com.google.protobuf.Service $r10;
        java.lang.Object $r1, $r3;
        org.waveprotocol.box.server.frontend.ClientFrontendImpl $r7;

        r0 := @parameter0: com.google.inject.Injector;

        r9 := @parameter1: org.waveprotocol.box.server.rpc.ServerRpcProvider;

        r6 := @parameter2: org.waveprotocol.box.server.waveserver.WaveBus;

        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/wave/model/version/HashedVersionFactory;");

        r2 = (org.waveprotocol.wave.model.version.HashedVersionFactory) $r1;

        $r3 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveletProvider;");

        r4 = (org.waveprotocol.box.server.waveserver.WaveletProvider) $r3;

        $r5 = staticinvoke <org.waveprotocol.box.server.frontend.WaveletInfo: org.waveprotocol.box.server.frontend.WaveletInfo create(org.waveprotocol.wave.model.version.HashedVersionFactory,org.waveprotocol.box.server.waveserver.WaveletProvider)>(r2, r4);

        $r7 = staticinvoke <org.waveprotocol.box.server.frontend.ClientFrontendImpl: org.waveprotocol.box.server.frontend.ClientFrontendImpl create(org.waveprotocol.box.server.waveserver.WaveletProvider,org.waveprotocol.box.server.waveserver.WaveBus,org.waveprotocol.box.server.frontend.WaveletInfo)>(r4, r6, $r5);

        $r8 = staticinvoke <org.waveprotocol.box.server.frontend.WaveClientRpcImpl: org.waveprotocol.box.server.frontend.WaveClientRpcImpl create(org.waveprotocol.box.server.frontend.ClientFrontend,boolean)>($r7, 0);

        $r10 = staticinvoke <org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveClientRpc: com.google.protobuf.Service newReflectiveService(org.waveprotocol.box.common.comms.WaveClientRpc$ProtocolWaveClientRpc$Interface)>($r8);

        virtualinvoke r9.<org.waveprotocol.box.server.rpc.ServerRpcProvider: void registerService(com.google.protobuf.Service)>($r10);

        return;
    }

    private static void initializeFederation(com.google.inject.Injector)
    {
        com.google.inject.Injector r0;
        java.lang.Object $r1;
        org.waveprotocol.wave.federation.FederationTransport r2;

        r0 := @parameter0: com.google.inject.Injector;

        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/wave/federation/FederationTransport;");

        r2 = (org.waveprotocol.wave.federation.FederationTransport) $r1;

        interfaceinvoke r2.<org.waveprotocol.wave.federation.FederationTransport: void startFederation()>();

        return;
    }

    private static void initializeSearch(com.google.inject.Injector, org.waveprotocol.box.server.waveserver.WaveBus) throws org.waveprotocol.box.server.waveserver.WaveletStateException, org.waveprotocol.box.server.waveserver.WaveServerException
    {
        org.waveprotocol.box.server.waveserver.WaveIndexer r7;
        com.google.inject.Injector r0;
        org.waveprotocol.box.server.waveserver.WaveBus r5;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher r2;
        org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener r4;
        java.lang.Object $r1, $r3, $r6;

        r0 := @parameter0: com.google.inject.Injector;

        r5 := @parameter1: org.waveprotocol.box.server.waveserver.WaveBus;

        $r1 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/PerUserWaveViewDistpatcher;");

        r2 = (org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher) $r1;

        $r3 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/PerUserWaveViewBus$Listener;");

        r4 = (org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener) $r3;

        virtualinvoke r2.<org.waveprotocol.box.server.waveserver.PerUserWaveViewDistpatcher: void addListener(org.waveprotocol.box.server.waveserver.PerUserWaveViewBus$Listener)>(r4);

        interfaceinvoke r5.<org.waveprotocol.box.server.waveserver.WaveBus: void subscribe(org.waveprotocol.box.server.waveserver.WaveBus$Subscriber)>(r2);

        $r6 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/waveprotocol/box/server/waveserver/WaveIndexer;");

        r7 = (org.waveprotocol.box.server.waveserver.WaveIndexer) $r6;

        interfaceinvoke r7.<org.waveprotocol.box.server.waveserver.WaveIndexer: void remakeIndex()>();

        return;
    }

    static org.waveprotocol.wave.util.logging.Log access$000()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        $r0 = <org.waveprotocol.box.server.ServerMain: org.waveprotocol.wave.util.logging.Log LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log $r0;

        <org.waveprotocol.box.server.ServerMain: java.lang.String PROPERTIES_FILE_KEY> = "wave.server.config";

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/ServerMain;");

        <org.waveprotocol.box.server.ServerMain: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        return;
    }
}
