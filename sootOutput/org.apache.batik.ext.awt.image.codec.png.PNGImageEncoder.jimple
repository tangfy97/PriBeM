public class org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder extends org.apache.batik.ext.awt.image.codec.util.ImageEncoderImpl
{
    private static final int PNG_COLOR_GRAY;
    private static final int PNG_COLOR_RGB;
    private static final int PNG_COLOR_PALETTE;
    private static final int PNG_COLOR_GRAY_ALPHA;
    private static final int PNG_COLOR_RGB_ALPHA;
    private static final byte[] magic;
    private org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param;
    private java.awt.image.RenderedImage image;
    private int width;
    private int height;
    private int bitDepth;
    private int bitShift;
    private int numBands;
    private int colorType;
    private int bpp;
    private boolean skipAlpha;
    private boolean compressGray;
    private boolean interlace;
    private byte[] redPalette;
    private byte[] greenPalette;
    private byte[] bluePalette;
    private byte[] alphaPalette;
    private java.io.DataOutputStream dataOutput;
    private byte[] prevRow;
    private byte[] currRow;
    private byte[][] filteredRows;
    private static final float[] srgbChroma;

    public void <init>(java.io.OutputStream, org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam)
    {
        java.io.OutputStream r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r2;
        java.io.DataOutputStream $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.util.ImageEncoderImpl: void <init>(java.io.OutputStream,org.apache.batik.ext.awt.image.codec.util.ImageEncodeParam)>(r1, r2);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean skipAlpha> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean compressGray> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] prevRow> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[][] filteredRows> = null;

        if r2 == null goto label1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = r2;

     label1:
        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput> = $r3;

        return;
    }

    private void writeMagic() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        java.io.DataOutputStream $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        $r1 = <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] magic>;

        virtualinvoke $r2.<java.io.FilterOutputStream: void write(byte[])>($r1);

        return;
    }

    private void writeIHDR() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r1;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r3;
        byte $b3, $b5, $b6;
        java.io.DataOutputStream $r2;
        int $i0, $i1, $i2, $i4, $i7, $i8;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r3 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("IHDR");

        $i0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int width>;

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeInt(int)>($i0);

        $i1 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int height>;

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeInt(int)>($i1);

        $i2 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        $b3 = (byte) $i2;

        $i7 = (int) $b3;

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i7);

        $i4 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType>;

        $b5 = (byte) $i4;

        $i8 = (int) $b5;

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i8);

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>(0);

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>(0);

        $z0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean interlace>;

        if $z0 == 0 goto label1;

        $b6 = 1;

        goto label2;

     label1:
        $b6 = 0;

     label2:
        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($b6);

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r2);

        virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        return;
    }

    private static int clamp(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        $i2 = i1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    private void encodePass(java.io.OutputStream, java.awt.image.Raster, int, int, int, int) throws java.io.IOException
    {
        byte[] $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r13, $r14, $r17, $r18, $r19;
        byte $b35, $b37, $b46, $b56, $b60;
        byte[][] $r5, $r15, $r16;
        java.awt.image.Raster r0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r12;
        int[] r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9, $i10, $i11, $i12, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $i61, $i62, $i63, $i64, $i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, $i84, $i85, $i86, $i87;
        java.io.OutputStream r8;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r1;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        r8 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.awt.image.Raster;

        i66 := @parameter2: int;

        i26 := @parameter3: int;

        i67 := @parameter4: int;

        i38 := @parameter5: int;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i4 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        i68 = i66 * $i4;

        $i5 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        i69 = i67 * $i5;

        $i6 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        i7 = 8 / $i6;

        $i8 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        i9 = $i2 * $i8;

        r2 = newarray (int)[i9];

        $i10 = i9 - i68;

        $i11 = $i10 + i69;

        $i12 = $i11 - 1;

        i13 = $i12 / i69;

        $i14 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        i70 = i13 * $i14;

        $i15 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i15 >= 8 goto label01;

        $i64 = i70 + i7;

        $i65 = $i64 - 1;

        i70 = $i65 / i7;

        goto label02;

     label01:
        $i16 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i16 != 16 goto label02;

        i70 = i70 * 2;

     label02:
        if i70 != 0 goto label03;

        return;

     label03:
        $i17 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp>;

        $i18 = i70 + $i17;

        $r3 = newarray (byte)[$i18];

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow> = $r3;

        $i19 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp>;

        $i20 = i70 + $i19;

        $r4 = newarray (byte)[$i20];

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] prevRow> = $r4;

        $i21 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp>;

        $i22 = i70 + $i21;

        $r5 = newmultiarray (byte)[5][$i22];

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[][] filteredRows> = $r5;

        $i23 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        $i24 = 1 << $i23;

        i25 = $i24 - 1;

        i71 = $i1 + i26;

        goto label23;

     label04:
        virtualinvoke r0.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i71, $i2, 1, r2);

        $z0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean compressGray>;

        if $z0 == 0 goto label07;

        $i61 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        i72 = 8 - $i61;

        i73 = 0;

        goto label06;

     label05:
        $i62 = r2[i73];

        $i63 = $i62 >> i72;

        r2[i73] = $i63;

        i73 = i73 + 1;

     label06:
        if i73 < $i2 goto label05;

     label07:
        i74 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp>;

        i75 = 0;

        i76 = 0;

        $i27 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        lookupswitch($i27)
        {
            case 1: goto label08;
            case 2: goto label08;
            case 4: goto label08;
            case 8: goto label12;
            case 16: goto label17;
            default: goto label22;
        };

     label08:
        i47 = i7 - 1;

        i77 = i68;

        goto label11;

     label09:
        $i49 = r2[i77];

        $i48 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitShift>;

        $i50 = $i49 >> $i48;

        $i51 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int clamp(int,int)>($i50, i25);

        $i52 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        $i53 = i76 << $i52;

        i76 = $i53 | $i51;

        $i54 = i75;

        i75 = i75 + 1;

        if $i54 != i47 goto label10;

        $r10 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        $i55 = i74;

        i74 = i74 + 1;

        $b56 = (byte) i76;

        $r10[$i55] = $b56;

        i76 = 0;

        i75 = 0;

     label10:
        i77 = i77 + i69;

     label11:
        if i77 < i9 goto label09;

        if i75 == 0 goto label22;

        $i58 = i7 - i75;

        $i57 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        $i59 = $i58 * $i57;

        i78 = i76 << $i59;

        $r11 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        $b60 = (byte) i78;

        $r11[i74] = $b60;

        goto label22;

     label12:
        i79 = i68;

        goto label16;

     label13:
        i80 = 0;

        goto label15;

     label14:
        $r9 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        $i40 = i74;

        i74 = i74 + 1;

        $i41 = i79 + i80;

        $i43 = r2[$i41];

        $i42 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitShift>;

        $i44 = $i43 >> $i42;

        $i45 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int clamp(int,int)>($i44, i25);

        $b46 = (byte) $i45;

        $r9[$i40] = $b46;

        i80 = i80 + 1;

     label15:
        $i39 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        if i80 < $i39 goto label14;

        i79 = i79 + i69;

     label16:
        if i79 < i9 goto label13;

        goto label22;

     label17:
        i81 = i68;

        goto label21;

     label18:
        i82 = 0;

        goto label20;

     label19:
        $i29 = i81 + i82;

        $i31 = r2[$i29];

        $i30 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitShift>;

        $i32 = $i31 >> $i30;

        $i33 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int clamp(int,int)>($i32, i25);

        $r6 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        i83 = i74 + 1;

        $i34 = $i33 >> 8;

        $b35 = (byte) $i34;

        $r6[i74] = $b35;

        $r7 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        i74 = i83 + 1;

        $i36 = $i33 & 255;

        $b37 = (byte) $i36;

        $r7[i83] = $b37;

        i82 = i82 + 1;

     label20:
        $i28 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        if i82 < $i28 goto label19;

        i81 = i81 + i69;

     label21:
        if i81 < i9 goto label18;

     label22:
        $r12 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r13 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        $r14 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] prevRow>;

        $r15 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[][] filteredRows>;

        $i84 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp>;

        $i85 = virtualinvoke $r12.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int filterRow(byte[],byte[],byte[][],int,int)>($r13, $r14, $r15, i70, $i84);

        virtualinvoke r8.<java.io.OutputStream: void write(int)>($i85);

        $r16 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[][] filteredRows>;

        $r17 = $r16[$i85];

        $i86 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp>;

        virtualinvoke r8.<java.io.OutputStream: void write(byte[],int,int)>($r17, $i86, i70);

        $r18 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow>;

        $r19 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] prevRow>;

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] currRow> = $r19;

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] prevRow> = $r18;

        i71 = i71 + i38;

     label23:
        $i87 = $i1 + $i3;

        if i71 < $i87 goto label04;

        return;
    }

    private void writeIDAT() throws java.io.IOException
    {
        java.awt.Rectangle $r5;
        java.util.zip.DeflaterOutputStream $r3;
        java.io.DataOutputStream $r2;
        int[] r12;
        org.apache.batik.ext.awt.image.codec.png.IDATOutputStream $r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, i8;
        java.awt.image.Raster $r11, r13;
        boolean $z0, $z1;
        java.awt.image.RenderedImage $r6, $r7, $r8, $r9, $r10;
        java.util.zip.Deflater $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r1;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r0 = new org.apache.batik.ext.awt.image.codec.png.IDATOutputStream;

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void <init>(java.io.OutputStream,int)>($r2, 8192);

        $r3 = new java.util.zip.DeflaterOutputStream;

        $r4 = new java.util.zip.Deflater;

        specialinvoke $r4.<java.util.zip.Deflater: void <init>(int)>(9);

        specialinvoke $r3.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>($r0, $r4);

        $r7 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $r5 = new java.awt.Rectangle;

        $r6 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $i0 = interfaceinvoke $r6.<java.awt.image.RenderedImage: int getMinX()>();

        $r8 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $i1 = interfaceinvoke $r8.<java.awt.image.RenderedImage: int getMinY()>();

        $r9 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $i2 = interfaceinvoke $r9.<java.awt.image.RenderedImage: int getWidth()>();

        $r10 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $i3 = interfaceinvoke $r10.<java.awt.image.RenderedImage: int getHeight()>();

        specialinvoke $r5.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r11 = interfaceinvoke $r7.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r5);

        r13 = $r11;

        $z0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean skipAlpha>;

        if $z0 == 0 goto label3;

        $i4 = virtualinvoke $r11.<java.awt.image.Raster: int getNumBands()>();

        i5 = $i4 - 1;

        r12 = newarray (int)[i5];

        i8 = 0;

        goto label2;

     label1:
        r12[i8] = i8;

        i8 = i8 + 1;

     label2:
        if i8 < i5 goto label1;

        $i6 = virtualinvoke $r11.<java.awt.image.Raster: int getWidth()>();

        $i7 = virtualinvoke $r11.<java.awt.image.Raster: int getHeight()>();

        r13 = virtualinvoke $r11.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>(0, 0, $i6, $i7, 0, 0, r12);

     label3:
        $z1 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean interlace>;

        if $z1 == 0 goto label4;

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 0, 0, 8, 8);

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 4, 0, 8, 8);

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 0, 4, 4, 8);

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 2, 0, 4, 4);

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 0, 2, 2, 4);

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 1, 0, 2, 2);

        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 0, 1, 1, 2);

        goto label5;

     label4:
        specialinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encodePass(java.io.OutputStream,java.awt.image.Raster,int,int,int,int)>($r3, r13, 0, 0, 1, 1);

     label5:
        virtualinvoke $r3.<java.util.zip.DeflaterOutputStream: void finish()>();

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.IDATOutputStream: void flush()>();

        return;
    }

    private void writeIEND() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r0;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r1;
        java.io.DataOutputStream $r2;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r0 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("IEND");

        $r2 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r2);

        virtualinvoke $r0.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        return;
    }

    private void writeCHRM() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3, $r5, $r6;
        float[] r7;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        java.io.DataOutputStream $r4;
        int $i0, i1;
        float $f0, $f1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isChromaticitySet()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z2 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSRGBIntentSet()>();

        if $z2 == 0 goto label6;

     label1:
        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("cHRM");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z1 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSRGBIntentSet()>();

        if $z1 != 0 goto label2;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        r7 = virtualinvoke $r5.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float[] getChromaticity()>();

        goto label3;

     label2:
        r7 = <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: float[] srgbChroma>;

     label3:
        i1 = 0;

        goto label5;

     label4:
        $f0 = r7[i1];

        $f1 = $f0 * 100000.0F;

        $i0 = (int) $f1;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeInt(int)>($i0);

        i1 = i1 + 1;

     label5:
        if i1 < 8 goto label4;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r4);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label6:
        return;
    }

    private void writeGAMA() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3, $r5, $r6;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        java.io.DataOutputStream $r4;
        int $i0;
        float $f0, f1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isGammaSet()>();

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z2 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSRGBIntentSet()>();

        if $z2 == 0 goto label4;

     label1:
        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("gAMA");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z1 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSRGBIntentSet()>();

        if $z1 != 0 goto label2;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        f1 = virtualinvoke $r5.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float getGamma()>();

        goto label3;

     label2:
        f1 = 0.45454544F;

     label3:
        $f0 = f1 * 100000.0F;

        $i0 = (int) $f0;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeInt(int)>($i0);

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r4);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label4:
        return;
    }

    private void writeICCP() throws java.io.IOException
    {
        byte[] $r4;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3;
        java.io.DataOutputStream $r5;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isICCProfileDataSet()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("iCCP");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] getICCProfileData()>();

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(byte[])>($r4);

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r5);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label1:
        return;
    }

    private void writeSBIT() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        java.io.DataOutputStream $r5;
        int[] $r4;
        int i0, $i1, i2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSignificantBitsSet()>();

        if $z0 == 0 goto label3;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("sBIT");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] getSignificantBits()>();

        i0 = lengthof $r4;

        i2 = 0;

        goto label2;

     label1:
        $i1 = $r4[i2];

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i1);

        i2 = i2 + 1;

     label2:
        if i2 < i0 goto label1;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r5);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label3:
        return;
    }

    private void writeSRGB() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3;
        java.io.DataOutputStream $r4;
        int $i0;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSRGBIntentSet()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("sRGB");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $i0 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int getSRGBIntent()>();

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(int)>($i0);

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r4);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label1:
        return;
    }

    private void writePLTE() throws java.io.IOException
    {
        byte[] $r1, $r3, $r4, $r5, $r6;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r8;
        byte $b1, $b2, $b3;
        java.io.DataOutputStream $r7;
        int $i0, i4, $i5, $i6, $i7;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette>;

        if $r1 != null goto label1;

        return;

     label1:
        $r8 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("PLTE");

        i4 = 0;

        goto label3;

     label2:
        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette>;

        $b1 = $r4[i4];

        $i5 = (int) $b1;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i5);

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette>;

        $b2 = $r5[i4];

        $i6 = (int) $b2;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i6);

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette>;

        $b3 = $r6[i4];

        $i7 = (int) $b3;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i7);

        i4 = i4 + 1;

     label3:
        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette>;

        $i0 = lengthof $r3;

        if i4 < $i0 goto label2;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r7);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        return;
    }

    private void writeBKGD() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r6;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette $r4;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        java.io.DataOutputStream $r10;
        int[] $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3, $r5, $r8;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r9;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isBackgroundSet()>();

        if $z0 == 0 goto label5;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("bKGD");

        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label4;
            case 6: goto label3;
            default: goto label4;
        };

     label1:
        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r9 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray) $r8;

        $i5 = virtualinvoke $r9.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: int getBackgroundGray()>();

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i5);

        goto label4;

     label2:
        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r4 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette) $r3;

        $i1 = virtualinvoke $r4.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: int getBackgroundPaletteIndex()>();

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i1);

        goto label4;

     label3:
        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r6 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: int[] getBackgroundRGB()>();

        $i2 = $r7[0];

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i2);

        $i3 = $r7[1];

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i3);

        $i4 = $r7[2];

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i4);

     label4:
        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r10);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label5:
        return;
    }

    private void writeHIST() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        java.io.DataOutputStream $r5;
        int[] $r4;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isPaletteHistogramSet()>();

        if $z0 == 0 goto label3;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("hIST");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] getPaletteHistogram()>();

        i2 = 0;

        goto label2;

     label1:
        $i1 = $r4[i2];

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i1);

        i2 = i2 + 1;

     label2:
        $i0 = lengthof $r4;

        if i2 < $i0 goto label1;

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r5);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label3:
        return;
    }

    private void writeTRNS() throws java.io.IOException
    {
        byte[] $r2, $r3, $r5, $r18;
        byte $b2, $b3, $b11;
        java.io.DataOutputStream $r6, $r19;
        int[] $r13;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r15;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r12;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette $r17;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r20, $r21;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, $i13, i14, i15, $i16, $i17, $i19, $i21, $i22;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r8, $r9, $r10, $r11, $r14, $r16;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isTransparencySet()>();

        if $z0 == 0 goto label06;

        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType>;

        if $i4 == 4 goto label06;

        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType>;

        if $i5 == 6 goto label06;

        $r20 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("tRNS");

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z1 = $r8 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette;

        if $z1 == 0 goto label03;

        $r16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r17 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette) $r16;

        $r18 = virtualinvoke $r17.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: byte[] getPaletteTransparency()>();

        i12 = 0;

        goto label02;

     label01:
        $b11 = $r18[i12];

        $i16 = (int) $b11;

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i16);

        i12 = i12 + 1;

     label02:
        $i10 = lengthof $r18;

        if i12 < $i10 goto label01;

        goto label05;

     label03:
        $r9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z2 = $r9 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        if $z2 == 0 goto label04;

        $r14 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r15 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray) $r14;

        $i9 = virtualinvoke $r15.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: int getTransparentGray()>();

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i9);

        goto label05;

     label04:
        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z3 = $r10 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        if $z3 == 0 goto label05;

        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r12 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB) $r11;

        $r13 = virtualinvoke $r12.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: int[] getTransparentRGB()>();

        $i6 = $r13[0];

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i6);

        $i7 = $r13[1];

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i7);

        $i8 = $r13[2];

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i8);

     label05:
        $r19 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r19);

        virtualinvoke $r20.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        goto label13;

     label06:
        $i13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType>;

        if $i13 != 3 goto label13;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette>;

        $i0 = lengthof $r2;

        $i1 = $i0 - 1;

        i14 = staticinvoke <java.lang.Math: int min(int,int)>(255, $i1);

        goto label09;

     label07:
        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette>;

        $b2 = $r3[i14];

        $i17 = (int) $b2;

        $i19 = (int) -1;

        if $i17 == $i19 goto label08;

        goto label10;

     label08:
        $i21 = (int) -1;

        i14 = i14 + $i21;

     label09:
        if i14 >= 0 goto label07;

     label10:
        if i14 < 0 goto label13;

        $r21 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("tRNS");

        i15 = 0;

        goto label12;

     label11:
        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette>;

        $b3 = $r5[i15];

        $i22 = (int) $b3;

        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i22);

        i15 = i15 + 1;

     label12:
        if i15 <= i14 goto label11;

        $r6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r6);

        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label13:
        return;
    }

    private void writePHYS() throws java.io.IOException
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r6;
        byte $b3;
        java.io.DataOutputStream $r5;
        int[] $r4;
        int $i0, $i1, $i2, $i4;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isPhysicalDimensionSet()>();

        if $z0 == 0 goto label1;

        $r6 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("pHYs");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] getPhysicalDimension()>();

        $i0 = $r4[0];

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeInt(int)>($i0);

        $i1 = $r4[1];

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeInt(int)>($i1);

        $i2 = $r4[2];

        $b3 = (byte) $i2;

        $i4 = (int) $b3;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i4);

        $r5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r5);

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label1:
        return;
    }

    private void writeSPLT() throws java.io.IOException
    {
        java.io.PrintStream $r3;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1;
        java.io.DataOutputStream $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isSuggestedPaletteSet()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("sPLT");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("sPLT not supported yet.");

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r4);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label1:
        return;
    }

    private void writeTIME() throws java.io.IOException
    {
        java.util.Date $r4;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r2;
        java.io.DataOutputStream $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r3;
        java.util.GregorianCalendar $r6;
        java.util.TimeZone $r5;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isModificationTimeSet()>();

        if $z0 == 0 goto label1;

        $r2 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("tIME");

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.Date getModificationTime()>();

        $r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r6 = new java.util.GregorianCalendar;

        specialinvoke $r6.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r5);

        virtualinvoke $r6.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        $i0 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(2);

        $i2 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(5);

        $i3 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(11);

        $i4 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(12);

        $i5 = virtualinvoke $r6.<java.util.Calendar: int get(int)>(13);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeShort(int)>($i0);

        $i6 = $i1 + 1;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i6);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i2);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i3);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i4);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeByte(int)>($i5);

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r7);

        virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

     label1:
        return;
    }

    private void writeTEXT() throws java.io.IOException
    {
        byte[] $r5, $r7;
        java.lang.String[] $r3;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r8;
        java.io.DataOutputStream $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r4, $r6;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isTextSet()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] getText()>();

        i7 = 0;

        goto label2;

     label1:
        $i2 = 2 * i7;

        $r4 = $r3[$i2];

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $i3 = 2 * i7;

        $i4 = $i3 + 1;

        $r6 = $r3[$i4];

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r8 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("tEXt");

        $i5 = lengthof $r5;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 79);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(byte[],int,int)>($r5, 0, $i6);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(int)>(0);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(byte[])>($r7);

        $r9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r9);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        i7 = i7 + 1;

     label2:
        $i0 = lengthof $r3;

        $i1 = $i0 / 2;

        if i7 < $i1 goto label1;

     label3:
        return;
    }

    private void writeZTXT() throws java.io.IOException
    {
        byte[] $r5, $r7;
        java.lang.String[] $r3;
        java.util.zip.DeflaterOutputStream $r9;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r8;
        java.io.DataOutputStream $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String $r4, $r6;
        boolean $z0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isCompressedTextSet()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] getCompressedText()>();

        i7 = 0;

        goto label2;

     label1:
        $i2 = 2 * i7;

        $r4 = $r3[$i2];

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $i3 = 2 * i7;

        $i4 = $i3 + 1;

        $r6 = $r3[$i4];

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r8 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>("zTXt");

        $i5 = lengthof $r5;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 79);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(byte[],int,int)>($r5, 0, $i6);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(int)>(0);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(int)>(0);

        $r9 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r9.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r9.<java.io.FilterOutputStream: void write(byte[])>($r7);

        virtualinvoke $r9.<java.util.zip.DeflaterOutputStream: void finish()>();

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r10);

        virtualinvoke $r8.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        i7 = i7 + 1;

     label2:
        $i0 = lengthof $r3;

        $i1 = $i0 / 2;

        if i7 < $i1 goto label1;

     label3:
        return;
    }

    private void writePrivateChunks() throws java.io.IOException
    {
        byte[] $r5;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r1, $r2, $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        org.apache.batik.ext.awt.image.codec.png.ChunkStream $r6;
        java.io.DataOutputStream $r7;
        int $i0, i1;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $i0 = virtualinvoke $r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int getNumPrivateChunks()>();

        i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String getPrivateChunkType(int)>(i1);

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $r5 = virtualinvoke $r4.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] getPrivateChunkData(int)>(i1);

        $r6 = new org.apache.batik.ext.awt.image.codec.png.ChunkStream;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void <init>(java.lang.String)>($r3);

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void write(byte[])>($r5);

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void writeToStream(java.io.DataOutputStream)>($r7);

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.ChunkStream: void close()>();

        i1 = i1 + 1;

     label2:
        if i1 < $i0 goto label1;

        return;
    }

    private org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray createGrayParam(byte[], byte[], byte[], byte[])
    {
        byte[] r2, r3, r4, r5;
        byte b6, $b8, $b9, b10;
        int $i0, $i1, $i2, i3, $i4, i5, $i7, i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r6;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        r2 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        r4 := @parameter2: byte[];

        r5 := @parameter3: byte[];

        $r6 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void <init>()>();

        i11 = 0;

        $i0 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        $i1 = 1 << $i0;

        $i2 = $i1 - 1;

        i3 = 255 / $i2;

        $i4 = r1.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        i5 = 1 << $i4;

        i12 = 0;

        goto label6;

     label1:
        b6 = r2[i12];

        $i7 = i12 * i3;

        $i13 = (int) b6;

        if $i13 != $i7 goto label2;

        $b8 = r3[i12];

        $i14 = (int) b6;

        $i15 = (int) $b8;

        if $i14 != $i15 goto label2;

        $b9 = r4[i12];

        $i16 = (int) b6;

        $i17 = (int) $b9;

        if $i16 == $i17 goto label3;

     label2:
        return null;

     label3:
        b10 = r5[i12];

        if b10 != 0 goto label4;

        virtualinvoke $r6.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void setTransparentGray(int)>(i12);

        i11 = i11 + 1;

        if i11 <= 1 goto label5;

        return null;

     label4:
        $i18 = (int) b10;

        $i20 = (int) -1;

        if $i18 == $i20 goto label5;

        return null;

     label5:
        i12 = i12 + 1;

     label6:
        if i12 < i5 goto label1;

        return $r6;
    }

    public void encode(java.awt.image.RenderedImage) throws java.io.IOException
    {
        byte[] $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r46;
        java.awt.image.SampleModel $r5;
        byte $b18, $b20, $b22, $b40, $b47, $b48;
        java.io.DataOutputStream $r54;
        java.awt.image.IndexColorModel r21;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r47, r52, $r61, $r62;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r7, $r10, $r11, $r13, $r15, $r16, $r18, $r30, $r31, $r32, $r33, $r35, $r51, $r53;
        java.lang.RuntimeException $r55, $r56, $r57, $r58, $r60;
        int[] $r6, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.awt.image.RenderedImage r1, $r2, $r3, $r4, $r8;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r63, $r64;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette r36, $r59;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, $i38, $i39, i41, i42, i43, i44, i45, $i46, $i50, $i52;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder r0;
        java.awt.image.ColorModel $r9;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        r1 := @parameter0: java.awt.image.RenderedImage;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image> = r1;

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $i0 = interfaceinvoke $r2.<java.awt.image.RenderedImage: int getWidth()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int width> = $i0;

        $r3 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $i1 = interfaceinvoke $r3.<java.awt.image.RenderedImage: int getHeight()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int height> = $i1;

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $r5 = interfaceinvoke $r4.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $r6 = virtualinvoke $r5.<java.awt.image.SampleModel: int[] getSampleSize()>();

        $i50 = (int) -1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = $i50;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitShift> = 0;

        $r7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z0 = $r7 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        if $z0 == 0 goto label02;

        $r51 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        r52 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray) $r51;

        $z7 = virtualinvoke r52.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: boolean isBitDepthSet()>();

        if $z7 == 0 goto label01;

        $i35 = virtualinvoke r52.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int getBitDepth()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = $i35;

     label01:
        $z8 = virtualinvoke r52.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: boolean isBitShiftSet()>();

        if $z8 == 0 goto label02;

        $i34 = virtualinvoke r52.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: int getBitShift()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitShift> = $i34;

     label02:
        $i36 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        $i52 = (int) -1;

        if $i36 != $i52 goto label09;

        $i23 = $r6[0];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = $i23;

        i37 = 1;

        goto label05;

     label03:
        $i26 = $r6[i37];

        $i25 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i26 == $i25 goto label04;

        $r55 = new java.lang.RuntimeException;

        specialinvoke $r55.<java.lang.RuntimeException: void <init>()>();

        throw $r55;

     label04:
        i37 = i37 + 1;

     label05:
        $i24 = lengthof $r6;

        if i37 < $i24 goto label03;

        $i27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i27 <= 2 goto label06;

        $i33 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i33 >= 4 goto label06;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = 4;

        goto label09;

     label06:
        $i28 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i28 <= 4 goto label07;

        $i32 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i32 >= 8 goto label07;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = 8;

        goto label09;

     label07:
        $i29 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i29 <= 8 goto label08;

        $i31 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i31 >= 16 goto label08;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = 16;

        goto label09;

     label08:
        $i30 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i30 <= 16 goto label09;

        $r56 = new java.lang.RuntimeException;

        specialinvoke $r56.<java.lang.RuntimeException: void <init>()>();

        throw $r56;

     label09:
        $i38 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands> = $i38;

        $i2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        $i39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i39 != 16 goto label10;

        $b40 = 2;

        goto label11;

     label10:
        $b40 = 1;

     label11:
        $i3 = $i2 * $b40;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp> = $i3;

        $r8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.awt.image.RenderedImage image>;

        $r9 = interfaceinvoke $r8.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z1 = $r9 instanceof java.awt.image.IndexColorModel;

        if $z1 == 0 goto label23;

        $i12 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i12 < 1 goto label12;

        $i13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i13 <= 8 goto label13;

     label12:
        $r57 = new java.lang.RuntimeException;

        specialinvoke $r57.<java.lang.RuntimeException: void <init>()>();

        throw $r57;

     label13:
        $i14 = virtualinvoke $r5.<java.awt.image.SampleModel: int getNumBands()>();

        if $i14 == 1 goto label14;

        $r58 = new java.lang.RuntimeException;

        specialinvoke $r58.<java.lang.RuntimeException: void <init>()>();

        throw $r58;

     label14:
        r21 = (java.awt.image.IndexColorModel) $r9;

        $i15 = virtualinvoke r21.<java.awt.image.IndexColorModel: int getMapSize()>();

        $r22 = newarray (byte)[$i15];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette> = $r22;

        $r23 = newarray (byte)[$i15];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette> = $r23;

        $r24 = newarray (byte)[$i15];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette> = $r24;

        $r25 = newarray (byte)[$i15];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette> = $r25;

        $r26 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette>;

        virtualinvoke r21.<java.awt.image.IndexColorModel: void getReds(byte[])>($r26);

        $r27 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette>;

        virtualinvoke r21.<java.awt.image.IndexColorModel: void getGreens(byte[])>($r27);

        $r28 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette>;

        virtualinvoke r21.<java.awt.image.IndexColorModel: void getBlues(byte[])>($r28);

        $r29 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette>;

        virtualinvoke r21.<java.awt.image.IndexColorModel: void getAlphas(byte[])>($r29);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp> = 1;

        $r30 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        if $r30 != null goto label15;

        $r46 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette>;

        $r45 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette>;

        $r44 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette>;

        $r43 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette>;

        $r47 = specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray createGrayParam(byte[],byte[],byte[],byte[])>($r46, $r45, $r44, $r43);

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = $r47;

     label15:
        $r31 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        if $r31 != null goto label16;

        $r59 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette;

        specialinvoke $r59.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = $r59;

     label16:
        $r32 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z4 = $r32 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette;

        if $z4 == 0 goto label20;

        $r35 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        r36 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette) $r35;

        $z6 = virtualinvoke r36.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: boolean isPaletteSet()>();

        if $z6 == 0 goto label19;

        $r37 = virtualinvoke r36.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: int[] getPalette()>();

        $i16 = lengthof $r37;

        i41 = $i16 / 3;

        i42 = 0;

        i43 = 0;

        goto label18;

     label17:
        $r38 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette>;

        i44 = i42 + 1;

        $i17 = $r37[i42];

        $b18 = (byte) $i17;

        $r38[i43] = $b18;

        $r39 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette>;

        i45 = i44 + 1;

        $i19 = $r37[i44];

        $b20 = (byte) $i19;

        $r39[i43] = $b20;

        $r40 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette>;

        i42 = i45 + 1;

        $i21 = $r37[i45];

        $b22 = (byte) $i21;

        $r40[i43] = $b22;

        $r41 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette>;

        $r41[i43] = -1;

        i43 = i43 + 1;

     label18:
        if i43 < i41 goto label17;

     label19:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 3;

        goto label22;

     label20:
        $r33 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z5 = $r33 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        if $z5 == 0 goto label21;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] alphaPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] bluePalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] greenPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] redPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 0;

        goto label22;

     label21:
        $r60 = new java.lang.RuntimeException;

        specialinvoke $r60.<java.lang.RuntimeException: void <init>()>();

        throw $r60;

     label22:
        goto label39;

     label23:
        $i4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        if $i4 != 1 goto label25;

        $r18 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        if $r18 != null goto label24;

        $r61 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        specialinvoke $r61.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = $r61;

     label24:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 0;

        goto label39;

     label25:
        $i5 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        if $i5 != 2 goto label32;

        $r15 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        if $r15 != null goto label26;

        $r62 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        specialinvoke $r62.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = $r62;

     label26:
        $r16 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z3 = virtualinvoke $r16.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isTransparencySet()>();

        if $z3 == 0 goto label30;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean skipAlpha> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands> = 1;

        $i10 = $r6[0];

        if $i10 != 8 goto label27;

        $i11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i11 >= 8 goto label27;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean compressGray> = 1;

     label27:
        $i46 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i46 != 16 goto label28;

        $b47 = 2;

        goto label29;

     label28:
        $b47 = 1;

     label29:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp> = $b47;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 0;

        goto label39;

     label30:
        $i9 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i9 >= 8 goto label31;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth> = 8;

     label31:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 4;

        goto label39;

     label32:
        $i6 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        if $i6 != 3 goto label34;

        $r13 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        if $r13 != null goto label33;

        $r63 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        specialinvoke $r63.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = $r63;

     label33:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 2;

        goto label39;

     label34:
        $i7 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands>;

        if $i7 != 4 goto label39;

        $r10 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        if $r10 != null goto label35;

        $r64 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        specialinvoke $r64.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param> = $r64;

     label35:
        $r11 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z2 = virtualinvoke $r11.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean isTransparencySet()>();

        if $z2 == 0 goto label38;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean skipAlpha> = 1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int numBands> = 3;

        $i8 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bitDepth>;

        if $i8 != 16 goto label36;

        $b48 = 6;

        goto label37;

     label36:
        $b48 = 3;

     label37:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int bpp> = $b48;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 2;

        goto label39;

     label38:
        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int colorType> = 6;

     label39:
        $r53 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam param>;

        $z9 = virtualinvoke $r53.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean getInterlacing()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: boolean interlace> = $z9;

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeMagic()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeIHDR()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeCHRM()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeGAMA()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeICCP()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeSBIT()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeSRGB()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writePLTE()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeHIST()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeTRNS()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeBKGD()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writePHYS()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeSPLT()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeTIME()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeTEXT()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeZTXT()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writePrivateChunks()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeIDAT()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void writeIEND()>();

        $r54 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: java.io.DataOutputStream dataOutput>;

        virtualinvoke $r54.<java.io.DataOutputStream: void flush()>();

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;
        float[] $r1;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int PNG_COLOR_RGB_ALPHA> = 6;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int PNG_COLOR_GRAY_ALPHA> = 4;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int PNG_COLOR_PALETTE> = 3;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int PNG_COLOR_RGB> = 2;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: int PNG_COLOR_GRAY> = 0;

        $r0 = newarray (byte)[8];

        $r0[0] = -119;

        $r0[1] = 80;

        $r0[2] = 78;

        $r0[3] = 71;

        $r0[4] = 13;

        $r0[5] = 10;

        $r0[6] = 26;

        $r0[7] = 10;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: byte[] magic> = $r0;

        $r1 = newarray (float)[8];

        $r1[0] = 0.3127F;

        $r1[1] = 0.329F;

        $r1[2] = 0.64F;

        $r1[3] = 0.33F;

        $r1[4] = 0.3F;

        $r1[5] = 0.6F;

        $r1[6] = 0.15F;

        $r1[7] = 0.06F;

        <org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: float[] srgbChroma> = $r1;

        return;
    }
}
