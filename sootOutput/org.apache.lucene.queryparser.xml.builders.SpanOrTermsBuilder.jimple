public class org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder extends org.apache.lucene.queryparser.xml.builders.SpanBuilderBase
{
    private final org.apache.lucene.analysis.Analyzer analyzer;

    public void <init>(org.apache.lucene.analysis.Analyzer)
    {
        org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        specialinvoke r0.<org.apache.lucene.queryparser.xml.builders.SpanBuilderBase: void <init>()>();

        r0.<org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder: org.apache.lucene.analysis.Analyzer analyzer> = r1;

        return;
    }

    public org.apache.lucene.search.spans.SpanQuery getSpanQuery(org.w3c.dom.Element) throws org.apache.lucene.queryparser.xml.ParserException
    {
        org.apache.lucene.search.spans.SpanTermQuery $r15;
        java.lang.Object[] $r13;
        org.apache.lucene.queryparser.xml.ParserException $r19;
        org.apache.lucene.index.Term $r16;
        org.apache.lucene.search.spans.SpanQuery[] $r12, $r14;
        java.util.ArrayList $r3;
        int $i0;
        java.lang.String $r1, $r2, $r23;
        org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute r9;
        org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder r4;
        boolean $z0;
        org.apache.lucene.analysis.TokenStream $r7;
        org.apache.lucene.util.BytesRef $r10, $r17;
        org.apache.lucene.analysis.Analyzer $r6;
        java.io.IOException $r18;
        org.w3c.dom.Element r0;
        java.io.StringReader $r5;
        float $f0;
        org.apache.lucene.search.spans.SpanOrQuery $r11;
        java.lang.StringBuilder $r20, $r21, $r22;
        org.apache.lucene.util.Attribute $r8;

        r4 := @this: org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getAttributeWithInheritanceOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "fieldName");

        $r2 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getNonBlankTextOrFail(org.w3c.dom.Element)>(r0);

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r6 = r4.<org.apache.lucene.queryparser.xml.builders.SpanOrTermsBuilder: org.apache.lucene.analysis.Analyzer analyzer>;

        $r5 = new java.io.StringReader;

        specialinvoke $r5.<java.io.StringReader: void <init>(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>($r1, $r5);

        $r8 = virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute;");

        r9 = (org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute) $r8;

        $r10 = interfaceinvoke r9.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: org.apache.lucene.util.BytesRef getBytesRef()>();

        virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: void reset()>();

     label2:
        $z0 = virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z0 == 0 goto label3;

        interfaceinvoke r9.<org.apache.lucene.analysis.tokenattributes.TermToBytesRefAttribute: int fillBytesRef()>();

        $r15 = new org.apache.lucene.search.spans.SpanTermQuery;

        $r16 = new org.apache.lucene.index.Term;

        $r17 = staticinvoke <org.apache.lucene.util.BytesRef: org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)>($r10);

        specialinvoke $r16.<org.apache.lucene.index.Term: void <init>(java.lang.String,org.apache.lucene.util.BytesRef)>($r1, $r17);

        specialinvoke $r15.<org.apache.lucene.search.spans.SpanTermQuery: void <init>(org.apache.lucene.index.Term)>($r16);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label2;

     label3:
        virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: void end()>();

        virtualinvoke $r7.<org.apache.lucene.analysis.TokenStream: void close()>();

        $r11 = new org.apache.lucene.search.spans.SpanOrQuery;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r12 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i0];

        $r13 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.apache.lucene.search.spans.SpanQuery[]) $r13;

        specialinvoke $r11.<org.apache.lucene.search.spans.SpanOrQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[])>($r14);

        $f0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: float getAttribute(org.w3c.dom.Element,java.lang.String,float)>(r0, "boost", 1.0F);

        virtualinvoke $r11.<org.apache.lucene.search.spans.SpanOrQuery: void setBoost(float)>($f0);

     label4:
        return $r11;

     label5:
        $r18 := @caughtexception;

        $r19 = new org.apache.lucene.queryparser.xml.ParserException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException parsing value:");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.lucene.queryparser.xml.ParserException: void <init>(java.lang.String)>($r23);

        throw $r19;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
