abstract class minsolver.fol2sat.MinFOL2BoolTranslator extends java.lang.Object implements kodkod.ast.visitor.ReturnVisitor
{
    private final minsolver.fol2sat.MinLeafInterpreter interpreter;
    private minsolver.fol2sat.MinEnvironment env;
    private final minsolver.fol2sat.MinFOL2BoolCache cache;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$Quantifier;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCompOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$Multiplicity;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$IntCompOperator;

    static final java.lang.Object translate(kodkod.util.nodes.AnnotatedNode, minsolver.fol2sat.MinLeafInterpreter)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator$1 $r2;
        java.lang.Object $r5;
        minsolver.fol2sat.MinFOL2BoolCache $r0;
        kodkod.util.nodes.AnnotatedNode r1;
        kodkod.ast.Node $r4;
        minsolver.fol2sat.MinLeafInterpreter r3;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r3 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        $r0 = new minsolver.fol2sat.MinFOL2BoolCache;

        specialinvoke $r0.<minsolver.fol2sat.MinFOL2BoolCache: void <init>(kodkod.util.nodes.AnnotatedNode)>(r1);

        $r2 = new minsolver.fol2sat.MinFOL2BoolTranslator$1;

        specialinvoke $r2.<minsolver.fol2sat.MinFOL2BoolTranslator$1: void <init>(minsolver.fol2sat.MinFOL2BoolCache,minsolver.fol2sat.MinLeafInterpreter)>($r0, r3);

        $r4 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Node: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r2);

        return $r5;
    }

    static final kodkod.engine.bool.BooleanAccumulator translate(kodkod.util.nodes.AnnotatedNode, minsolver.fol2sat.MinLeafInterpreter, minsolver.fol2sat.MinTranslationLogger)
    {
        kodkod.engine.bool.Operator$Nary $r5;
        kodkod.engine.bool.BooleanValue $r14;
        kodkod.engine.bool.BooleanAccumulator $r6;
        minsolver.fol2sat.MinFOL2BoolTranslator$2 $r2;
        minsolver.fol2sat.MinTranslationLogger r4;
        minsolver.fol2sat.MinLeafInterpreter r3;
        minsolver.fol2sat.MinFOL2BoolCache $r0;
        kodkod.util.nodes.AnnotatedNode r1;
        boolean $z0;
        java.util.Iterator $r10;
        kodkod.ast.Formula $r8, r12;
        java.util.Set $r9;
        kodkod.ast.Node $r7;
        java.lang.Object $r11, $r13;

        r1 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r3 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        r4 := @parameter2: minsolver.fol2sat.MinTranslationLogger;

        $r0 = new minsolver.fol2sat.MinFOL2BoolCache;

        specialinvoke $r0.<minsolver.fol2sat.MinFOL2BoolCache: void <init>(kodkod.util.nodes.AnnotatedNode)>(r1);

        $r2 = new minsolver.fol2sat.MinFOL2BoolTranslator$2;

        specialinvoke $r2.<minsolver.fol2sat.MinFOL2BoolTranslator$2: void <init>(minsolver.fol2sat.MinFOL2BoolCache,minsolver.fol2sat.MinLeafInterpreter,minsolver.fol2sat.MinTranslationLogger)>($r0, r3, r4);

        $r5 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r6 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r5);

        $r7 = virtualinvoke r1.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r8 = (kodkod.ast.Formula) $r7;

        $r9 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set conjuncts(kodkod.ast.Formula)>($r8);

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (kodkod.ast.Formula) $r11;

        $r13 = virtualinvoke r12.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r2);

        $r14 = (kodkod.engine.bool.BooleanValue) $r13;

        virtualinvoke $r6.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r14);

     label2:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        virtualinvoke r4.<minsolver.fol2sat.MinTranslationLogger: void close()>();

        return $r6;
    }

    static final kodkod.engine.bool.BooleanMatrix approximate(kodkod.util.nodes.AnnotatedNode, minsolver.fol2sat.MinLeafInterpreter, minsolver.fol2sat.MinEnvironment)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator$3 $r0;
        kodkod.ast.Expression $r6;
        minsolver.fol2sat.MinEnvironment r4;
        kodkod.ast.Node $r5;
        minsolver.fol2sat.MinLeafInterpreter r3;
        kodkod.engine.bool.BooleanMatrix $r8;
        java.lang.Object $r7;
        minsolver.fol2sat.MinFOL2BoolCache $r1;
        kodkod.util.nodes.AnnotatedNode r2;

        r2 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r3 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        r4 := @parameter2: minsolver.fol2sat.MinEnvironment;

        $r0 = new minsolver.fol2sat.MinFOL2BoolTranslator$3;

        $r1 = new minsolver.fol2sat.MinFOL2BoolCache;

        specialinvoke $r1.<minsolver.fol2sat.MinFOL2BoolCache: void <init>(kodkod.util.nodes.AnnotatedNode)>(r2);

        specialinvoke $r0.<minsolver.fol2sat.MinFOL2BoolTranslator$3: void <init>(minsolver.fol2sat.MinFOL2BoolCache,minsolver.fol2sat.MinLeafInterpreter,minsolver.fol2sat.MinEnvironment)>($r1, r3, r4);

        $r5 = virtualinvoke r2.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r6 = (kodkod.ast.Expression) $r5;

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>($r0);

        $r8 = (kodkod.engine.bool.BooleanMatrix) $r7;

        return $r8;
    }

    private void <init>(minsolver.fol2sat.MinFOL2BoolCache, minsolver.fol2sat.MinLeafInterpreter)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        minsolver.fol2sat.MinFOL2BoolCache r3;
        minsolver.fol2sat.MinEnvironment $r2;
        minsolver.fol2sat.MinLeafInterpreter r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r3 := @parameter0: minsolver.fol2sat.MinFOL2BoolCache;

        r1 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter> = r1;

        $r2 = staticinvoke <minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment empty()>();

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r2;

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinFOL2BoolCache cache> = r3;

        return;
    }

    private void <init>(minsolver.fol2sat.MinFOL2BoolCache, minsolver.fol2sat.MinLeafInterpreter, minsolver.fol2sat.MinEnvironment)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        minsolver.fol2sat.MinFOL2BoolCache r3;
        minsolver.fol2sat.MinEnvironment r2;
        minsolver.fol2sat.MinLeafInterpreter r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r3 := @parameter0: minsolver.fol2sat.MinFOL2BoolCache;

        r1 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        r2 := @parameter2: minsolver.fol2sat.MinEnvironment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter> = r1;

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = r2;

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinFOL2BoolCache cache> = r3;

        return;
    }

    final java.lang.Object lookup(kodkod.ast.Node)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.lang.Object $r4;
        minsolver.fol2sat.MinFOL2BoolCache $r3;
        minsolver.fol2sat.MinEnvironment $r2;
        kodkod.ast.Node r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Node;

        $r3 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinFOL2BoolCache cache>;

        $r2 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r4 = virtualinvoke $r3.<minsolver.fol2sat.MinFOL2BoolCache: java.lang.Object lookup(kodkod.ast.Node,minsolver.fol2sat.MinEnvironment)>(r1, $r2);

        return $r4;
    }

    final java.lang.Object cache(kodkod.ast.Node, java.lang.Object)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.lang.Object r2, $r5;
        minsolver.fol2sat.MinFOL2BoolCache $r4;
        minsolver.fol2sat.MinEnvironment $r3;
        kodkod.ast.Node r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Node;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinFOL2BoolCache cache>;

        $r3 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r5 = virtualinvoke $r4.<minsolver.fol2sat.MinFOL2BoolCache: java.lang.Object cache(kodkod.ast.Node,java.lang.Object,minsolver.fol2sat.MinEnvironment)>(r1, r2, $r3);

        return $r5;
    }

    kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula, kodkod.engine.bool.BooleanValue)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue r2, $r6;
        kodkod.ast.Formula r1;
        java.lang.Object $r5;
        minsolver.fol2sat.MinFOL2BoolCache $r4;
        minsolver.fol2sat.MinEnvironment $r3;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue;

        $r4 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinFOL2BoolCache cache>;

        $r3 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r5 = virtualinvoke $r4.<minsolver.fol2sat.MinFOL2BoolCache: java.lang.Object cache(kodkod.ast.Node,java.lang.Object,minsolver.fol2sat.MinEnvironment)>(r1, r2, $r3);

        $r6 = (kodkod.engine.bool.BooleanValue) $r5;

        return $r6;
    }

    public final java.util.List visit(kodkod.ast.Decls)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.util.Iterator $r4;
        kodkod.ast.Decl r6;
        kodkod.ast.Decls r1;
        java.util.ArrayList $r3;
        kodkod.engine.bool.BooleanMatrix $r7;
        java.util.List $r9, r10;
        int $i0;
        java.lang.Object $r2, $r5, $r8;
        boolean $z0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r10 = (java.util.List) $r2;

        if r10 == null goto label1;

        return r10;

     label1:
        $r3 = new java.util.ArrayList;

        $i0 = virtualinvoke r1.<kodkod.ast.Decls: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r4 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.ast.Decl) $r5;

        $r7 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)>(r6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r3);

        $r9 = (java.util.List) $r8;

        return $r9;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)
    {
        kodkod.ast.operator.Multiplicity $r4, $r5;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Decl r1;
        kodkod.ast.Expression $r6;
        kodkod.engine.bool.BooleanMatrix r3, $r8, $r10;
        minsolver.fol2sat.MinHigherOrderDeclException $r11;
        java.lang.Object $r2, $r7, $r9;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r5 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        if $r4 == $r5 goto label2;

        $r11 = new minsolver.fol2sat.MinHigherOrderDeclException;

        specialinvoke $r11.<minsolver.fol2sat.MinHigherOrderDeclException: void <init>(kodkod.ast.Decl)>(r1);

        throw $r11;

     label2:
        $r6 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (kodkod.engine.bool.BooleanMatrix) $r7;

        $r9 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r8);

        $r10 = (kodkod.engine.bool.BooleanMatrix) $r9;

        return $r10;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Variable)
    {
        kodkod.engine.bool.BooleanMatrix r4;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.lang.Object $r3;
        minsolver.fol2sat.MinEnvironment $r2;
        minsolver.fol2sat.MinUnboundLeafException $r5;
        kodkod.ast.Variable r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r3 = virtualinvoke $r2.<minsolver.fol2sat.MinEnvironment: java.lang.Object lookup(kodkod.ast.Variable)>(r1);

        r4 = (kodkod.engine.bool.BooleanMatrix) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = new minsolver.fol2sat.MinUnboundLeafException;

        specialinvoke $r5.<minsolver.fol2sat.MinUnboundLeafException: void <init>(java.lang.String,kodkod.ast.LeafExpression)>("Unbound variable", r1);

        throw $r5;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Relation)
    {
        kodkod.engine.bool.BooleanMatrix $r3;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Relation r1;
        minsolver.fol2sat.MinLeafInterpreter $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r3 = virtualinvoke $r2.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanMatrix interpret(kodkod.ast.Relation)>(r1);

        return $r3;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.ConstantExpression)
    {
        kodkod.engine.bool.BooleanMatrix $r3;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.ConstantExpression r1;
        minsolver.fol2sat.MinLeafInterpreter $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r3 = virtualinvoke $r2.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanMatrix interpret(kodkod.ast.ConstantExpression)>(r1);

        return $r3;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.BinaryExpression r1;
        int[] $r10;
        int $i0, $i1;
        java.lang.String $r14;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Expression $r3, $r6;
        java.lang.IllegalArgumentException $r11;
        kodkod.engine.bool.BooleanMatrix r5, r8, r15, r16, $r18;
        kodkod.ast.operator.ExprOperator $r9;
        java.lang.Object $r2, $r4, $r7, $r17;
        java.lang.StringBuilder $r12, $r13;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanMatrix) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.BooleanMatrix) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r10 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()>();

        $i0 = virtualinvoke $r9.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i1 = $r10[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label7;
            case 5: goto label4;
            case 6: goto label6;
            default: goto label8;
        };

     label2:
        r16 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label9;

     label3:
        r16 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix and(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label9;

     label4:
        r16 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix difference(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label9;

     label5:
        r16 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix override(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label9;

     label6:
        r16 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix dot(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label9;

     label7:
        r16 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix cross(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label9;

     label8:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label9:
        $r17 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r16);

        $r18 = (kodkod.engine.bool.BooleanMatrix) $r17;

        return $r18;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.NaryExpression)
    {
        int[] $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r15;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanMatrix[] r7;
        kodkod.ast.Expression $r4, $r8;
        java.lang.IllegalArgumentException $r12;
        kodkod.ast.operator.ExprOperator $r3;
        kodkod.engine.bool.BooleanMatrix r6, $r10, r16, r17, $r19;
        kodkod.ast.NaryExpression r1;
        java.lang.Object $r2, $r5, $r9, $r18;
        java.lang.StringBuilder $r13, $r14;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r16 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r16 == null goto label1;

        return r16;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r4 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(0);

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r6 = (kodkod.engine.bool.BooleanMatrix) $r5;

        $i0 = virtualinvoke r1.<kodkod.ast.NaryExpression: int size()>();

        $i1 = $i0 - 1;

        r7 = newarray (kodkod.engine.bool.BooleanMatrix)[$i1];

        i6 = 0;

        goto label3;

     label2:
        $i3 = i6 + 1;

        $r8 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>($i3);

        $r9 = virtualinvoke $r8.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r10 = (kodkod.engine.bool.BooleanMatrix) $r9;

        r7[i6] = $r10;

        i6 = i6 + 1;

     label3:
        $i2 = lengthof r7;

        if i6 < $i2 goto label2;

        $r11 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()>();

        $i4 = virtualinvoke $r3.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i5 = $r11[$i4];

        tableswitch($i5)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label8;
        };

     label4:
        r17 = virtualinvoke r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix[])>(r7);

        goto label9;

     label5:
        r17 = virtualinvoke r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix and(kodkod.engine.bool.BooleanMatrix[])>(r7);

        goto label9;

     label6:
        r17 = virtualinvoke r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix override(kodkod.engine.bool.BooleanMatrix[])>(r7);

        goto label9;

     label7:
        r17 = virtualinvoke r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix cross(kodkod.engine.bool.BooleanMatrix[])>(r7);

        goto label9;

     label8:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown associative operator: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label9:
        $r18 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r17);

        $r19 = (kodkod.engine.bool.BooleanMatrix) $r18;

        return $r19;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.UnaryExpression)
    {
        int[] $r7;
        int $i0, $i1;
        kodkod.ast.ConstantExpression $r10;
        java.lang.String $r15;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Expression $r3, $r9;
        java.lang.IllegalArgumentException $r12;
        kodkod.ast.UnaryExpression r1;
        kodkod.engine.bool.BooleanMatrix r5, $r8, $r11, r16, r17, $r19;
        kodkod.ast.operator.ExprOperator $r6;
        java.lang.Object $r2, $r4, $r18;
        java.lang.StringBuilder $r13, $r14;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r16 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r16 == null goto label1;

        return r16;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanMatrix) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r7 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()>();

        $i0 = virtualinvoke $r6.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 7: goto label2;
            case 8: goto label3;
            case 9: goto label4;
            default: goto label5;
        };

     label2:
        r17 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix transpose()>();

        goto label6;

     label3:
        r17 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix closure()>();

        goto label6;

     label4:
        $r8 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix closure()>();

        $r9 = <kodkod.ast.Expression: kodkod.ast.Expression IDEN>;

        $r10 = (kodkod.ast.ConstantExpression) $r9;

        $r11 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.ConstantExpression)>($r10);

        r17 = virtualinvoke $r8.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix)>($r11);

        goto label6;

     label5:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label6:
        $r18 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r17);

        $r19 = (kodkod.engine.bool.BooleanMatrix) $r18;

        return $r19;
    }

    private final void comprehension(kodkod.ast.Decls, kodkod.ast.Formula, int, kodkod.engine.bool.BooleanValue, int, kodkod.engine.bool.BooleanMatrix)
    {
        kodkod.engine.bool.BooleanConstant $r16, $r23;
        kodkod.engine.bool.BooleanValue r19, $r20, $r21, $r27, $r28;
        kodkod.engine.bool.Dimensions $r8;
        boolean $z0;
        kodkod.engine.bool.BooleanFactory $r2;
        kodkod.ast.Decl $r4;
        minsolver.fol2sat.MinEnvironment $r10, $r12, $r24, $r25;
        kodkod.ast.Variable $r11;
        minsolver.fol2sat.MinLeafInterpreter $r1, $r6;
        kodkod.util.ints.IndexedEntry r15;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, $i11, $i12, $i13;
        kodkod.instance.Universe $r7;
        double $d0, $d1, $d2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.util.Iterator $r13;
        kodkod.ast.Formula r17;
        kodkod.ast.Decls r3;
        kodkod.engine.bool.BooleanMatrix $r5, $r9, r22;
        java.lang.Object $r14, $r18, $r26;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r3 := @parameter0: kodkod.ast.Decls;

        r17 := @parameter1: kodkod.ast.Formula;

        i0 := @parameter2: int;

        r19 := @parameter3: kodkod.engine.bool.BooleanValue;

        i9 := @parameter4: int;

        r22 := @parameter5: kodkod.engine.bool.BooleanMatrix;

        $r1 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r2 = virtualinvoke $r1.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $i1 = virtualinvoke r3.<kodkod.ast.Decls: int size()>();

        if i0 != $i1 goto label1;

        $r26 = virtualinvoke r17.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r27 = (kodkod.engine.bool.BooleanValue) $r26;

        $r28 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r19, $r27);

        virtualinvoke r22.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>(i9, $r28);

        return;

     label1:
        $r4 = virtualinvoke r3.<kodkod.ast.Decls: kodkod.ast.Decl get(int)>(i0);

        $r5 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)>($r4);

        $r6 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r7 = virtualinvoke $r6.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe()>();

        $i2 = virtualinvoke $r7.<kodkod.instance.Universe: int size()>();

        $d0 = (double) $i2;

        $i3 = virtualinvoke r3.<kodkod.ast.Decls: int size()>();

        $i4 = $i3 - i0;

        $i5 = $i4 - 1;

        $d1 = (double) $i5;

        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>($d0, $d1);

        i6 = (int) $d2;

        $r8 = virtualinvoke $r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dimensions()>();

        $r9 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r8);

        $r10 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r11 = virtualinvoke $r4.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r12 = virtualinvoke $r10.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r11, $r9);

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r12;

        $r13 = virtualinvoke $r5.<kodkod.engine.bool.BooleanMatrix: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (kodkod.util.ints.IndexedEntry) $r14;

        $i7 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: int index()>();

        $r16 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        virtualinvoke $r9.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i7, $r16);

        $i8 = i0 + 1;

        $r18 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r20 = (kodkod.engine.bool.BooleanValue) $r18;

        $r21 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r20, r19);

        $i10 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: int index()>();

        $i11 = $i10 * i6;

        $i12 = i9 + $i11;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void comprehension(kodkod.ast.Decls,kodkod.ast.Formula,int,kodkod.engine.bool.BooleanValue,int,kodkod.engine.bool.BooleanMatrix)>(r3, r17, $i8, $r21, $i12, r22);

        $i13 = interfaceinvoke r15.<kodkod.util.ints.IndexedEntry: int index()>();

        $r23 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        virtualinvoke $r9.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i13, $r23);

     label3:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r24 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r25 = virtualinvoke $r24.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment parent()>();

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r25;

        return;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Comprehension)
    {
        kodkod.engine.bool.BooleanConstant $r12;
        minsolver.fol2sat.MinLeafInterpreter $r3, $r5;
        int $i0, $i1;
        kodkod.engine.bool.Dimensions $r8;
        kodkod.instance.Universe $r6;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanFactory $r4;
        kodkod.ast.Formula $r11;
        kodkod.ast.Decls $r7, $r10;
        kodkod.engine.bool.BooleanMatrix $r9, $r14, r15;
        java.lang.Object $r2, $r13;
        kodkod.ast.Comprehension r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r4 = virtualinvoke $r3.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r5 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r6 = virtualinvoke $r5.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe()>();

        $i0 = virtualinvoke $r6.<kodkod.instance.Universe: int size()>();

        $r7 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $i1 = virtualinvoke $r7.<kodkod.ast.Decls: int size()>();

        $r8 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, $i1);

        $r9 = virtualinvoke $r4.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r8);

        $r10 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r11 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r12 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void comprehension(kodkod.ast.Decls,kodkod.ast.Formula,int,kodkod.engine.bool.BooleanValue,int,kodkod.engine.bool.BooleanMatrix)>($r10, $r11, 0, $r12, 0, $r9);

        $r13 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r9);

        $r14 = (kodkod.engine.bool.BooleanMatrix) $r13;

        return $r14;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.IfExpression)
    {
        kodkod.engine.bool.BooleanValue r5;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Formula $r3;
        kodkod.ast.Expression $r6, $r9;
        kodkod.engine.bool.BooleanMatrix r8, r11, $r12, $r14, r15;
        java.lang.Object $r2, $r4, $r7, $r10, $r13;
        kodkod.ast.IfExpression r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.BooleanMatrix) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r11 = (kodkod.engine.bool.BooleanMatrix) $r10;

        $r12 = virtualinvoke r8.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix choice(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanMatrix)>(r5, r11);

        $r13 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r12);

        $r14 = (kodkod.engine.bool.BooleanMatrix) $r13;

        return $r14;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.engine.bool.Int[] r4;
        int $i0, $i1, i2;
        kodkod.ast.IntExpression $r5;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r7;
        kodkod.ast.Expression $r8;
        kodkod.engine.bool.BooleanMatrix r3, $r10, $r11, $r13;
        java.lang.Object $r2, $r6, $r9, $r12;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $i0 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        r4 = newarray (kodkod.engine.bool.Int)[$i0];

        i2 = 0;

        $i1 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        goto label3;

     label2:
        $r5 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression column(int)>(i2);

        $r6 = virtualinvoke $r5.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (kodkod.engine.bool.Int) $r6;

        r4[i2] = $r7;

        i2 = i2 + 1;

     label3:
        if i2 < $i1 goto label2;

        $r8 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        $r9 = virtualinvoke $r8.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r10 = (kodkod.engine.bool.BooleanMatrix) $r9;

        $r11 = virtualinvoke $r10.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix project(kodkod.engine.bool.Int[])>(r4);

        $r12 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r11);

        $r13 = (kodkod.engine.bool.BooleanMatrix) $r12;

        return $r13;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.ConstantFormula)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanConstant $r2;
        kodkod.engine.bool.BooleanValue $r3;
        kodkod.ast.ConstantFormula r1;
        boolean $z0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $z0 = virtualinvoke r1.<kodkod.ast.ConstantFormula: boolean booleanValue()>();

        $r2 = staticinvoke <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant constant(boolean)>($z0);

        $r3 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, $r2);

        return $r3;
    }

    private void all(kodkod.ast.Decls, kodkod.ast.Formula, int, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanConstant $r15, $r22;
        kodkod.engine.bool.BooleanValue $r18, $r19, r20, $r21, $r26, $r27;
        kodkod.engine.bool.Dimensions $r7;
        boolean $z0, $z1;
        kodkod.engine.bool.BooleanFactory $r3;
        kodkod.ast.Decl $r5;
        minsolver.fol2sat.MinEnvironment $r9, $r11, $r23, $r24;
        kodkod.ast.Variable $r10;
        kodkod.engine.bool.BooleanAccumulator r0;
        minsolver.fol2sat.MinLeafInterpreter $r2;
        kodkod.util.ints.IndexedEntry r14;
        int $i0, i1, $i2, $i3, $i4;
        minsolver.fol2sat.MinFOL2BoolTranslator r1;
        java.util.Iterator $r12;
        kodkod.ast.Formula r16;
        kodkod.ast.Decls r4;
        kodkod.engine.bool.BooleanMatrix $r6, $r8;
        java.lang.Object $r13, $r17, $r25;

        r1 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r4 := @parameter0: kodkod.ast.Decls;

        r16 := @parameter1: kodkod.ast.Formula;

        i1 := @parameter2: int;

        r20 := @parameter3: kodkod.engine.bool.BooleanValue;

        r0 := @parameter4: kodkod.engine.bool.BooleanAccumulator;

        $z0 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: boolean isShortCircuited()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r3 = virtualinvoke $r2.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $i0 = virtualinvoke r4.<kodkod.ast.Decls: int size()>();

        if $i0 != i1 goto label2;

        $r25 = virtualinvoke r16.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r1);

        $r26 = (kodkod.engine.bool.BooleanValue) $r25;

        $r27 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r20, $r26);

        virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r27);

        return;

     label2:
        $r5 = virtualinvoke r4.<kodkod.ast.Decls: kodkod.ast.Decl get(int)>(i1);

        $r6 = virtualinvoke r1.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)>($r5);

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dimensions()>();

        $r8 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r7);

        $r9 = r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r10 = virtualinvoke $r5.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r11 = virtualinvoke $r9.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r10, $r8);

        r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r11;

        $r12 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kodkod.util.ints.IndexedEntry) $r13;

        $i2 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: int index()>();

        $r15 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        virtualinvoke $r8.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i2, $r15);

        $i3 = i1 + 1;

        $r17 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r18 = (kodkod.engine.bool.BooleanValue) $r17;

        $r19 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r18);

        $r21 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r19, r20);

        specialinvoke r1.<minsolver.fol2sat.MinFOL2BoolTranslator: void all(kodkod.ast.Decls,kodkod.ast.Formula,int,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>(r4, r16, $i3, $r21, r0);

        $i4 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: int index()>();

        $r22 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        virtualinvoke $r8.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i4, $r22);

     label4:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r23 = r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r24 = virtualinvoke $r23.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment parent()>();

        r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r24;

        return;
    }

    private void some(kodkod.ast.Decls, kodkod.ast.Formula, int, kodkod.engine.bool.BooleanValue, kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanConstant $r15, $r21;
        kodkod.engine.bool.BooleanValue r18, $r19, $r20, $r25, $r26;
        kodkod.engine.bool.Dimensions $r7;
        boolean $z0, $z1;
        kodkod.engine.bool.BooleanFactory $r3;
        kodkod.ast.Decl $r5;
        minsolver.fol2sat.MinEnvironment $r9, $r11, $r22, $r23;
        kodkod.ast.Variable $r10;
        kodkod.engine.bool.BooleanAccumulator r0;
        minsolver.fol2sat.MinLeafInterpreter $r2;
        kodkod.util.ints.IndexedEntry r14;
        int $i0, i1, $i2, $i3, $i4;
        minsolver.fol2sat.MinFOL2BoolTranslator r1;
        java.util.Iterator $r12;
        kodkod.ast.Formula r16;
        kodkod.ast.Decls r4;
        kodkod.engine.bool.BooleanMatrix $r6, $r8;
        java.lang.Object $r13, $r17, $r24;

        r1 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r4 := @parameter0: kodkod.ast.Decls;

        r16 := @parameter1: kodkod.ast.Formula;

        i1 := @parameter2: int;

        r18 := @parameter3: kodkod.engine.bool.BooleanValue;

        r0 := @parameter4: kodkod.engine.bool.BooleanAccumulator;

        $z0 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: boolean isShortCircuited()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r3 = virtualinvoke $r2.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $i0 = virtualinvoke r4.<kodkod.ast.Decls: int size()>();

        if $i0 != i1 goto label2;

        $r24 = virtualinvoke r16.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r1);

        $r25 = (kodkod.engine.bool.BooleanValue) $r24;

        $r26 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r18, $r25);

        virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r26);

        return;

     label2:
        $r5 = virtualinvoke r4.<kodkod.ast.Decls: kodkod.ast.Decl get(int)>(i1);

        $r6 = virtualinvoke r1.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)>($r5);

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dimensions()>();

        $r8 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r7);

        $r9 = r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r10 = virtualinvoke $r5.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r11 = virtualinvoke $r9.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r10, $r8);

        r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r11;

        $r12 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kodkod.util.ints.IndexedEntry) $r13;

        $i2 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: int index()>();

        $r15 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        virtualinvoke $r8.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i2, $r15);

        $i3 = i1 + 1;

        $r17 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r19 = (kodkod.engine.bool.BooleanValue) $r17;

        $r20 = virtualinvoke $r3.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r19, r18);

        specialinvoke r1.<minsolver.fol2sat.MinFOL2BoolTranslator: void some(kodkod.ast.Decls,kodkod.ast.Formula,int,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>(r4, r16, $i3, $r20, r0);

        $i4 = interfaceinvoke r14.<kodkod.util.ints.IndexedEntry: int index()>();

        $r21 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        virtualinvoke $r8.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i4, $r21);

     label4:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r22 = r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r23 = virtualinvoke $r22.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment parent()>();

        r1.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r23;

        return;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.engine.bool.Operator$Nary $r5, $r13;
        kodkod.engine.bool.BooleanConstant $r9, $r17;
        kodkod.engine.bool.BooleanValue $r12, r24, r25;
        kodkod.ast.QuantifiedFormula r1;
        kodkod.engine.bool.BooleanAccumulator $r6, $r14;
        minsolver.fol2sat.MinLeafInterpreter $r10, $r18;
        int[] $r4;
        int $i0, $i1;
        java.lang.String $r23;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanFactory $r11, $r19;
        kodkod.ast.Formula $r8, $r16;
        kodkod.ast.Decls $r7, $r15;
        java.lang.IllegalArgumentException $r20;
        java.lang.Object $r2;
        java.lang.StringBuilder $r21, $r22;
        kodkod.ast.operator.Quantifier $r3;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r24 = (kodkod.engine.bool.BooleanValue) $r2;

        if r24 == null goto label1;

        return r24;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.operator.Quantifier quantifier()>();

        $r4 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$Quantifier()>();

        $i0 = virtualinvoke $r3.<kodkod.ast.operator.Quantifier: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r13 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        $r14 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r13);

        $r15 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r16 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r17 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void all(kodkod.ast.Decls,kodkod.ast.Formula,int,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>($r15, $r16, 0, $r17, $r14);

        $r18 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r19 = virtualinvoke $r18.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        r25 = virtualinvoke $r19.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r14);

        goto label5;

     label3:
        $r5 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        $r6 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>($r5);

        $r7 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r8 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r9 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void some(kodkod.ast.Decls,kodkod.ast.Formula,int,kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanAccumulator)>($r7, $r8, 0, $r9, $r6);

        $r10 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r11 = virtualinvoke $r10.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        r25 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r6);

        goto label5;

     label4:
        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown quantifier: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label5:
        $r12 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, r25);

        return $r12;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.NaryFormula)
    {
        kodkod.engine.bool.Operator$Nary r22;
        kodkod.engine.bool.BooleanValue r3, $r12, $r13, $r16, $r17;
        kodkod.engine.bool.BooleanConstant $r7;
        kodkod.engine.bool.BooleanAccumulator $r6;
        minsolver.fol2sat.MinLeafInterpreter $r14;
        int[] $r5;
        kodkod.ast.operator.FormulaOperator $r4;
        int $i0, $i1;
        kodkod.ast.NaryFormula r1;
        java.lang.String $r21;
        boolean $z0;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.util.Iterator $r8;
        kodkod.engine.bool.BooleanFactory $r15;
        kodkod.ast.Formula r10;
        java.lang.IllegalArgumentException $r18;
        java.lang.Object $r2, $r9, $r11;
        java.lang.StringBuilder $r19, $r20;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanValue) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r5 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()>();

        $i0 = virtualinvoke $r4.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        r22 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary AND>;

        goto label5;

     label3:
        r22 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Nary OR>;

        goto label5;

     label4:
        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown nary operator: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r18;

     label5:
        $r6 = staticinvoke <kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)>(r22);

        $r7 = virtualinvoke r22.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        $r8 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (kodkod.ast.Formula) $r9;

        $r11 = virtualinvoke r10.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r12 = (kodkod.engine.bool.BooleanValue) $r11;

        $r13 = virtualinvoke $r6.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>($r12);

        if $r13 != $r7 goto label7;

        goto label8;

     label7:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label6;

     label8:
        $r14 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r15 = virtualinvoke $r14.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r16 = virtualinvoke $r15.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue accumulate(kodkod.engine.bool.BooleanAccumulator)>($r6);

        $r17 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, $r16);

        return $r17;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.engine.bool.BooleanValue r5, r8, r17, r18, $r19;
        minsolver.fol2sat.MinLeafInterpreter $r10;
        int[] $r12;
        kodkod.ast.operator.FormulaOperator $r9;
        int $i0, $i1;
        java.lang.String $r16;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanFactory $r11;
        kodkod.ast.Formula $r3, $r6;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object $r2, $r4, $r7;
        java.lang.StringBuilder $r14, $r15;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r17 = (kodkod.engine.bool.BooleanValue) $r2;

        if r17 == null goto label1;

        return r17;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.BooleanValue) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r10 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r11 = virtualinvoke $r10.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r12 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()>();

        $i0 = virtualinvoke $r9.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        $i1 = $r12[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label4;
            default: goto label6;
        };

     label2:
        r18 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r5, r8);

        goto label7;

     label3:
        r18 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r5, r8);

        goto label7;

     label4:
        r18 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue implies(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r5, r8);

        goto label7;

     label5:
        r18 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue iff(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>(r5, r8);

        goto label7;

     label6:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label7:
        $r19 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, r18);

        return $r19;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.NotFormula)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue r3, $r8, $r9, $r10;
        kodkod.engine.bool.BooleanFactory $r5;
        kodkod.ast.Formula $r6;
        minsolver.fol2sat.MinLeafInterpreter $r4;
        kodkod.ast.NotFormula r1;
        java.lang.Object $r2, $r7;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanValue) $r2;

        if r3 != null goto label1;

        $r4 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r5 = virtualinvoke $r4.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r6 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (kodkod.engine.bool.BooleanValue) $r7;

        $r9 = virtualinvoke $r5.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue not(kodkod.engine.bool.BooleanValue)>($r8);

        $r10 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, $r9);

        goto label2;

     label1:
        $r10 = r3;

     label2:
        return $r10;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.engine.bool.BooleanValue $r11, r17, r18;
        int[] $r10;
        int $i0, $i1;
        kodkod.ast.ComparisonFormula r1;
        java.lang.String $r16;
        kodkod.ast.operator.ExprCompOperator $r9, $r14;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Expression $r3, $r6;
        java.lang.IllegalArgumentException $r12;
        kodkod.engine.bool.BooleanMatrix r5, r8;
        java.lang.Object $r2, $r4, $r7;
        java.lang.StringBuilder $r13, $r15;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r17 = (kodkod.engine.bool.BooleanValue) $r2;

        if r17 == null goto label1;

        return r17;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanMatrix) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.BooleanMatrix) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        $r10 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCompOperator()>();

        $i0 = virtualinvoke $r9.<kodkod.ast.operator.ExprCompOperator: int ordinal()>();

        $i1 = $r10[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        r18 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue subset(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label5;

     label3:
        r18 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue eq(kodkod.engine.bool.BooleanMatrix)>(r8);

        goto label5;

     label4:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r14 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label5:
        $r11 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, r18);

        return $r11;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        kodkod.ast.operator.Multiplicity $r6;
        kodkod.engine.bool.BooleanValue r12, r13, $r14;
        int[] $r7;
        int $i0, $i1;
        java.lang.String $r11;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Expression $r3;
        java.lang.IllegalArgumentException $r8;
        kodkod.engine.bool.BooleanMatrix r5;
        java.lang.Object $r2, $r4;
        java.lang.StringBuilder $r9, $r10;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.engine.bool.BooleanValue) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanMatrix) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r7 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$Multiplicity()>();

        $i0 = virtualinvoke $r6.<kodkod.ast.operator.Multiplicity: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label3;
            default: goto label6;
        };

     label2:
        r13 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue none()>();

        goto label7;

     label3:
        r13 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue some()>();

        goto label7;

     label4:
        r13 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue one()>();

        goto label7;

     label5:
        r13 = virtualinvoke r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue lone()>();

        goto label7;

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown multiplicity: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label7:
        $r14 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, r13);

        return $r14;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.RelationPredicate)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue r3, $r6, $r7;
        kodkod.ast.Formula $r4;
        java.lang.Object $r2, $r5;
        kodkod.ast.RelationPredicate r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanValue) $r2;

        if r3 == null goto label1;

        $r7 = r3;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Formula toConstraints()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (kodkod.engine.bool.BooleanValue) $r5;

        $r7 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, $r6);

     label2:
        return $r7;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.IntToExprCast)
    {
        kodkod.engine.bool.BooleanValue $r19, $r22, $r25, $r27, $r28;
        kodkod.util.ints.IntIterator $r23;
        int[] $r14;
        kodkod.engine.bool.Dimensions $r12;
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BooleanFactory $r7;
        java.util.List $r16;
        java.lang.StringBuilder $r32, $r37;
        minsolver.fol2sat.MinLeafInterpreter $r6, $r8, $r10, $r17, $r20, $r24;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i14, $i16;
        kodkod.ast.operator.IntCastOperator $r15, $r31;
        kodkod.instance.Universe $r11;
        java.lang.String $r33;
        kodkod.ast.IntExpression $r3;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r5, $r26;
        kodkod.util.ints.IntSet $r9;
        kodkod.ast.IntToExprCast r1;
        java.lang.IllegalArgumentException $r38;
        kodkod.engine.bool.BooleanMatrix $r13, r34, $r36;
        java.lang.Object $r2, $r4, $r18, $r21, $r35;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r34 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r34 == null goto label01;

        return r34;

     label01:
        $r3 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.Int) $r4;

        $r6 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r7 = virtualinvoke $r6.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r8 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r9 = virtualinvoke $r8.<minsolver.fol2sat.MinLeafInterpreter: kodkod.util.ints.IntSet ints()>();

        $r10 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r11 = virtualinvoke $r10.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe()>();

        $i0 = virtualinvoke $r11.<kodkod.instance.Universe: int size()>();

        $r12 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, 1);

        $r13 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r12);

        $r14 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator()>();

        $r15 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.operator.IntCastOperator op()>();

        $i1 = virtualinvoke $r15.<kodkod.ast.operator.IntCastOperator: int ordinal()>();

        $i2 = $r14[$i1];

        tableswitch($i2)
        {
            case 1: goto label02;
            case 2: goto label05;
            default: goto label09;
        };

     label02:
        $r23 = interfaceinvoke $r9.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label04;

     label03:
        $i9 = interfaceinvoke $r23.<kodkod.util.ints.IntIterator: int next()>();

        $r24 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $i10 = virtualinvoke $r24.<minsolver.fol2sat.MinLeafInterpreter: int interpret(int)>($i9);

        $r25 = virtualinvoke $r13.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue get(int)>($i10);

        $r26 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>($i9);

        $r27 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue eq(kodkod.engine.bool.Int)>($r26);

        $r28 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue or(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r25, $r27);

        virtualinvoke $r13.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i10, $r28);

     label04:
        $z2 = interfaceinvoke $r23.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label03;

        goto label10;

     label05:
        $r16 = virtualinvoke r5.<kodkod.engine.bool.Int: java.util.List twosComplementBits()>();

        $i3 = interfaceinvoke $r16.<java.util.List: int size()>();

        i11 = $i3 - 1;

        i12 = 0;

        goto label08;

     label06:
        i4 = 1 << i12;

        $z0 = interfaceinvoke $r9.<kodkod.util.ints.IntSet: boolean contains(int)>(i4);

        if $z0 == 0 goto label07;

        $r17 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $i5 = virtualinvoke $r17.<minsolver.fol2sat.MinLeafInterpreter: int interpret(int)>(i4);

        $r18 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i12);

        $r19 = (kodkod.engine.bool.BooleanValue) $r18;

        virtualinvoke $r13.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i5, $r19);

     label07:
        i12 = i12 + 1;

     label08:
        if i12 < i11 goto label06;

        $i14 = (int) -1;

        $i6 = $i14 << i11;

        $z1 = interfaceinvoke $r9.<kodkod.util.ints.IntSet: boolean contains(int)>($i6);

        if $z1 == 0 goto label10;

        $r20 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $i16 = (int) -1;

        $i7 = $i16 << i11;

        $i8 = virtualinvoke $r20.<minsolver.fol2sat.MinLeafInterpreter: int interpret(int)>($i7);

        $r21 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i11);

        $r22 = (kodkod.engine.bool.BooleanValue) $r21;

        virtualinvoke $r13.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i8, $r22);

        goto label10;

     label09:
        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown cast operator: ");

        $r31 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.operator.IntCastOperator op()>();

        $r32 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r38;

     label10:
        $r35 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r13);

        $r36 = (kodkod.engine.bool.BooleanMatrix) $r35;

        return $r36;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.IntConstant)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanFactory $r2;
        kodkod.engine.bool.Int $r4;
        kodkod.ast.IntConstant r3;
        int $i0;
        minsolver.fol2sat.MinLeafInterpreter $r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r3 := @parameter0: kodkod.ast.IntConstant;

        $r1 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r2 = virtualinvoke $r1.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $i0 = virtualinvoke r3.<kodkod.ast.IntConstant: int value()>();

        $r4 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>($i0);

        return $r4;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.IfIntExpression)
    {
        kodkod.engine.bool.BooleanValue r5;
        kodkod.ast.IfIntExpression r1;
        kodkod.ast.IntExpression $r6, $r9;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r8, r11, $r12, $r14, r15;
        kodkod.ast.Formula $r3;
        java.lang.Object $r2, $r4, $r7, $r10, $r13;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.engine.bool.Int) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.BooleanValue) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.Int) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r11 = (kodkod.engine.bool.Int) $r10;

        $r12 = virtualinvoke r8.<kodkod.engine.bool.Int: kodkod.engine.bool.Int choice(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.Int)>(r5, r11);

        $r13 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r12);

        $r14 = (kodkod.engine.bool.Int) $r13;

        return $r14;
    }

    private final kodkod.engine.bool.Int sum(kodkod.engine.bool.BooleanMatrix, kodkod.util.ints.IntIterator, int, int)
    {
        kodkod.engine.bool.BooleanValue $r9;
        kodkod.util.ints.IntIterator r2;
        minsolver.fol2sat.MinLeafInterpreter $r6, $r8, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r3, $r4, $r5, $r10, $r13;
        kodkod.engine.bool.BooleanFactory $r7, $r12;
        kodkod.engine.bool.BooleanMatrix r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.engine.bool.BooleanMatrix;

        r2 := @parameter1: kodkod.util.ints.IntIterator;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i0 <= i1 goto label1;

        $r11 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r12 = virtualinvoke $r11.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r13 = virtualinvoke $r12.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>(0);

        return $r13;

     label1:
        if i0 != i1 goto label2;

        $i4 = interfaceinvoke r2.<kodkod.util.ints.IntIterator: int next()>();

        $r6 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r7 = virtualinvoke $r6.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r8 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $i5 = virtualinvoke $r8.<minsolver.fol2sat.MinLeafInterpreter: int interpret(int)>($i4);

        $r9 = virtualinvoke r1.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanValue get(int)>($i5);

        $r10 = virtualinvoke $r7.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int,kodkod.engine.bool.BooleanValue)>($i4, $r9);

        return $r10;

     label2:
        $i2 = i0 + i1;

        i6 = $i2 / 2;

        $r3 = specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int sum(kodkod.engine.bool.BooleanMatrix,kodkod.util.ints.IntIterator,int,int)>(r1, r2, i0, i6);

        $i3 = i6 + 1;

        $r4 = specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int sum(kodkod.engine.bool.BooleanMatrix,kodkod.util.ints.IntIterator,int,int)>(r1, r2, $i3, i1);

        $r5 = virtualinvoke $r3.<kodkod.engine.bool.Int: kodkod.engine.bool.Int plus(kodkod.engine.bool.Int)>($r4);

        return $r5;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.operator.ExprCastOperator $r4, $r18;
        kodkod.util.ints.IntIterator $r10;
        minsolver.fol2sat.MinLeafInterpreter $r5;
        int[] $r3;
        kodkod.ast.ExprToIntCast r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r20;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r12, r21, r22;
        kodkod.util.ints.IntSet $r6;
        kodkod.ast.Expression $r7, $r13;
        java.lang.IllegalArgumentException $r16;
        kodkod.engine.bool.BooleanMatrix $r9, $r15;
        java.lang.Object $r2, $r8, $r11, $r14;
        java.lang.StringBuilder $r17, $r19;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r21 = (kodkod.engine.bool.Int) $r2;

        if r21 == null goto label1;

        return r21;

     label1:
        $r3 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator()>();

        $r4 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.operator.ExprCastOperator op()>();

        $i0 = virtualinvoke $r4.<kodkod.ast.operator.ExprCastOperator: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label2:
        $r13 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        $r14 = virtualinvoke $r13.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r15 = (kodkod.engine.bool.BooleanMatrix) $r14;

        r22 = virtualinvoke $r15.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Int cardinality()>();

        goto label5;

     label3:
        $r5 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r6 = virtualinvoke $r5.<minsolver.fol2sat.MinLeafInterpreter: kodkod.util.ints.IntSet ints()>();

        $r7 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (kodkod.engine.bool.BooleanMatrix) $r8;

        $r10 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        $i2 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: int size()>();

        $i3 = $i2 - 1;

        r22 = specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int sum(kodkod.engine.bool.BooleanMatrix,kodkod.util.ints.IntIterator,int,int)>($r9, $r10, 0, $i3);

        goto label5;

     label4:
        $r16 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown operator: ");

        $r18 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.operator.ExprCastOperator op()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label5:
        $r11 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r22);

        $r12 = (kodkod.engine.bool.Int) $r11;

        return $r12;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.BinaryIntExpression r1;
        int[] $r9;
        int $i0, $i1;
        java.lang.String $r15;
        kodkod.ast.IntExpression $r3, $r6;
        kodkod.ast.operator.IntOperator $r10, $r13;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r5, r8, r16, r17, $r19;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object $r2, $r4, $r7, $r18;
        java.lang.StringBuilder $r12, $r14;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r16 = (kodkod.engine.bool.Int) $r2;

        if r16 == null goto label01;

        return r16;

     label01:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.Int) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.Int) $r7;

        $r9 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator()>();

        $r10 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $i0 = virtualinvoke $r10.<kodkod.ast.operator.IntOperator: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label04;
            case 3: goto label03;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            default: goto label13;
        };

     label02:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int plus(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label03:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int minus(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label04:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int multiply(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label05:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int divide(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label06:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int modulo(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label07:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int and(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label08:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int or(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label09:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int xor(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label10:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int shl(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label11:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int shr(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label12:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int sha(kodkod.engine.bool.Int)>(r8);

        goto label14;

     label13:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r13 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label14:
        $r18 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r17);

        $r19 = (kodkod.engine.bool.Int) $r18;

        return $r19;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.engine.bool.Int[] r6;
        int[] $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r16;
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.IntExpression $r3, $r7;
        kodkod.ast.operator.IntOperator $r11, $r14;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r5, $r9, r17, r18, $r20;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object $r2, $r4, $r8, $r19;
        java.lang.StringBuilder $r13, $r15;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r17 = (kodkod.engine.bool.Int) $r2;

        if r17 == null goto label1;

        return r17;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(0);

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.Int) $r4;

        $i0 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: int size()>();

        $i1 = $i0 - 1;

        r6 = newarray (kodkod.engine.bool.Int)[$i1];

        i6 = 0;

        goto label3;

     label2:
        $i3 = i6 + 1;

        $r7 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>($i3);

        $r8 = virtualinvoke $r7.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (kodkod.engine.bool.Int) $r8;

        r6[i6] = $r9;

        i6 = i6 + 1;

     label3:
        $i2 = lengthof r6;

        if i6 < $i2 goto label2;

        $r10 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator()>();

        $r11 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $i4 = virtualinvoke $r11.<kodkod.ast.operator.IntOperator: int ordinal()>();

        $i5 = $r10[$i4];

        tableswitch($i5)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label8;
            case 4: goto label8;
            case 5: goto label8;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label4:
        r18 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int plus(kodkod.engine.bool.Int[])>(r6);

        goto label9;

     label5:
        r18 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int multiply(kodkod.engine.bool.Int[])>(r6);

        goto label9;

     label6:
        r18 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int and(kodkod.engine.bool.Int[])>(r6);

        goto label9;

     label7:
        r18 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int or(kodkod.engine.bool.Int[])>(r6);

        goto label9;

     label8:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown nary operator: ");

        $r14 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label9:
        $r19 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r18);

        $r20 = (kodkod.engine.bool.Int) $r19;

        return $r20;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.UnaryIntExpression)
    {
        int[] $r6;
        int $i0, $i1;
        java.lang.String $r12;
        kodkod.ast.UnaryIntExpression r1;
        kodkod.ast.IntExpression $r3;
        kodkod.ast.operator.IntOperator $r7, $r10;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r5, r13, r14, $r16;
        java.lang.IllegalArgumentException $r8;
        java.lang.Object $r2, $r4, $r15;
        java.lang.StringBuilder $r9, $r11;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r13 = (kodkod.engine.bool.Int) $r2;

        if r13 == null goto label1;

        return r13;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.Int) $r4;

        $r6 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator()>();

        $r7 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $i0 = virtualinvoke $r7.<kodkod.ast.operator.IntOperator: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 12: goto label2;
            case 13: goto label3;
            case 14: goto label4;
            case 15: goto label5;
            default: goto label6;
        };

     label2:
        r14 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int negate()>();

        goto label7;

     label3:
        r14 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int not()>();

        goto label7;

     label4:
        r14 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int abs()>();

        goto label7;

     label5:
        r14 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.Int sgn()>();

        goto label7;

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r10 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label7:
        $r15 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, r14);

        $r16 = (kodkod.engine.bool.Int) $r15;

        return $r16;
    }

    private final void sum(kodkod.ast.Decls, kodkod.ast.IntExpression, int, kodkod.engine.bool.BooleanValue, java.util.List)
    {
        kodkod.engine.bool.BooleanConstant $r14, $r21;
        kodkod.engine.bool.BooleanValue r17, $r18, $r19;
        kodkod.engine.bool.Dimensions $r6;
        boolean $z0;
        kodkod.engine.bool.BooleanFactory $r2;
        kodkod.ast.Decl $r4;
        minsolver.fol2sat.MinEnvironment $r8, $r10, $r22, $r23;
        kodkod.ast.Variable $r9;
        java.util.List r20;
        minsolver.fol2sat.MinLeafInterpreter $r1;
        kodkod.util.ints.IndexedEntry r13;
        int $i0, i1, $i2, $i3, $i4;
        kodkod.ast.IntExpression r15;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        java.util.Iterator $r11;
        kodkod.engine.bool.Int $r25, $r26, $r27;
        kodkod.ast.Decls r3;
        kodkod.engine.bool.BooleanMatrix $r5, $r7;
        java.lang.Object $r12, $r16, $r24;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r3 := @parameter0: kodkod.ast.Decls;

        r15 := @parameter1: kodkod.ast.IntExpression;

        i1 := @parameter2: int;

        r17 := @parameter3: kodkod.engine.bool.BooleanValue;

        r20 := @parameter4: java.util.List;

        $r1 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r2 = virtualinvoke $r1.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $i0 = virtualinvoke r3.<kodkod.ast.Decls: int size()>();

        if $i0 != i1 goto label1;

        $r24 = virtualinvoke r15.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r25 = (kodkod.engine.bool.Int) $r24;

        $r26 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>(0);

        $r27 = virtualinvoke $r25.<kodkod.engine.bool.Int: kodkod.engine.bool.Int choice(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.Int)>(r17, $r26);

        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>($r27);

        return;

     label1:
        $r4 = virtualinvoke r3.<kodkod.ast.Decls: kodkod.ast.Decl get(int)>(i1);

        $r5 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)>($r4);

        $r6 = virtualinvoke $r5.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.Dimensions dimensions()>();

        $r7 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r6);

        $r8 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r9 = virtualinvoke $r4.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r10 = virtualinvoke $r8.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment extend(kodkod.ast.Variable,java.lang.Object)>($r9, $r7);

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r10;

        $r11 = virtualinvoke $r5.<kodkod.engine.bool.BooleanMatrix: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (kodkod.util.ints.IndexedEntry) $r12;

        $i2 = interfaceinvoke r13.<kodkod.util.ints.IndexedEntry: int index()>();

        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        virtualinvoke $r7.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i2, $r14);

        $i3 = i1 + 1;

        $r16 = interfaceinvoke r13.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r18 = (kodkod.engine.bool.BooleanValue) $r16;

        $r19 = virtualinvoke $r2.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanValue and(kodkod.engine.bool.BooleanValue,kodkod.engine.bool.BooleanValue)>($r18, r17);

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void sum(kodkod.ast.Decls,kodkod.ast.IntExpression,int,kodkod.engine.bool.BooleanValue,java.util.List)>(r3, r15, $i3, $r19, r20);

        $i4 = interfaceinvoke r13.<kodkod.util.ints.IndexedEntry: int index()>();

        $r21 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant FALSE>;

        virtualinvoke $r7.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i4, $r21);

     label3:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r22 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        $r23 = virtualinvoke $r22.<minsolver.fol2sat.MinEnvironment: minsolver.fol2sat.MinEnvironment parent()>();

        r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env> = $r23;

        return;
    }

    public final kodkod.engine.bool.Int visit(kodkod.ast.SumExpression)
    {
        kodkod.engine.bool.BooleanConstant $r7;
        kodkod.ast.SumExpression r1;
        java.util.ArrayList $r4;
        minsolver.fol2sat.MinLeafInterpreter $r18;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0;
        kodkod.ast.IntExpression $r6;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r3, $r9, $r11, $r12, $r14, $r17, $r20;
        kodkod.engine.bool.BooleanFactory $r19;
        kodkod.ast.Decls $r5;
        java.lang.Object $r2, $r8, $r10, $r13, $r15, $r16;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.Int) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r6 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r7 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void sum(kodkod.ast.Decls,kodkod.ast.IntExpression,int,kodkod.engine.bool.BooleanValue,java.util.List)>($r5, $r6, 0, $r7, $r4);

        i6 = interfaceinvoke $r4.<java.util.List: int size()>();

        goto label6;

     label2:
        i0 = i6 - 1;

        i7 = 0;

        goto label4;

     label3:
        $i1 = i7 / 2;

        $r8 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i7);

        $r9 = (kodkod.engine.bool.Int) $r8;

        $i2 = i7 + 1;

        $r10 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        $r11 = (kodkod.engine.bool.Int) $r10;

        $r12 = virtualinvoke $r9.<kodkod.engine.bool.Int: kodkod.engine.bool.Int plus(kodkod.engine.bool.Int)>($r11);

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, $r12);

        i7 = i7 + 2;

     label4:
        if i7 < i0 goto label3;

        $i3 = i0 % 2;

        if $i3 != 0 goto label5;

        $i5 = i0 / 2;

        $r13 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r14 = (kodkod.engine.bool.Int) $r13;

        interfaceinvoke $r4.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i5, $r14);

     label5:
        $i4 = i6 / 2;

        i6 = i6 - $i4;

     label6:
        if i6 > 1 goto label2;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        $r18 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        $r19 = virtualinvoke $r18.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r20 = virtualinvoke $r19.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.Int integer(int)>(0);

        goto label8;

     label7:
        $r15 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (kodkod.engine.bool.Int) $r15;

     label8:
        $r16 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r20);

        $r17 = (kodkod.engine.bool.Int) $r16;

        return $r17;
    }

    public final kodkod.engine.bool.BooleanValue visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.operator.IntCompOperator $r10, $r13;
        kodkod.engine.bool.BooleanValue r16, r17, $r18;
        int[] $r9;
        int $i0, $i1;
        java.lang.String $r15;
        kodkod.ast.IntExpression $r3, $r6;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int r5, r8;
        java.lang.IllegalArgumentException $r11;
        kodkod.ast.IntComparisonFormula r1;
        java.lang.Object $r2, $r4, $r7;
        java.lang.StringBuilder $r12, $r14;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r16 = (kodkod.engine.bool.BooleanValue) $r2;

        if r16 == null goto label1;

        return r16;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.engine.bool.Int) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.engine.bool.Int) $r7;

        $r9 = staticinvoke <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCompOperator()>();

        $r10 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.operator.IntCompOperator op()>();

        $i0 = virtualinvoke $r10.<kodkod.ast.operator.IntCompOperator: int ordinal()>();

        $i1 = $r9[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label2:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue eq(kodkod.engine.bool.Int)>(r8);

        goto label8;

     label3:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue lt(kodkod.engine.bool.Int)>(r8);

        goto label8;

     label4:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue lte(kodkod.engine.bool.Int)>(r8);

        goto label8;

     label5:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue gt(kodkod.engine.bool.Int)>(r8);

        goto label8;

     label6:
        r17 = virtualinvoke r5.<kodkod.engine.bool.Int: kodkod.engine.bool.BooleanValue gte(kodkod.engine.bool.Int)>(r8);

        goto label8;

     label7:
        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r13 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.operator.IntCompOperator op()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label8:
        $r18 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue cache(kodkod.ast.Formula,kodkod.engine.bool.BooleanValue)>(r1, r17);

        return $r18;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntComparisonFormula r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.IntComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.SumExpression)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r2;
        kodkod.ast.SumExpression r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.SumExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryIntExpression)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.UnaryIntExpression r1;
        kodkod.engine.bool.Int $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.UnaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.NaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryIntExpression)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r2;
        kodkod.ast.BinaryIntExpression r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.BinaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.ExprToIntCast r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.ExprToIntCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfIntExpression)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.IfIntExpression r1;
        kodkod.engine.bool.Int $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.IfIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.Int $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IntConstant;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.Int visit(kodkod.ast.IntConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntToExprCast)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.IntToExprCast r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.IntToExprCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.RelationPredicate)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.RelationPredicate r1;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.RelationPredicate)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.MultiplicityFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.ComparisonFormula r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.ComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NotFormula)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;
        kodkod.ast.NotFormula r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.NotFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.BinaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.NaryFormula r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.NaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.QuantifiedFormula)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;
        kodkod.ast.QuantifiedFormula r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.QuantifiedFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.ConstantFormula r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.engine.bool.BooleanValue $r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanValue visit(kodkod.ast.ConstantFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.ProjectExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfExpression)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.IfExpression r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.IfExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Comprehension)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Comprehension r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Comprehension)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryExpression)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.UnaryExpression r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.UnaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryExpression)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        kodkod.ast.NaryExpression r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.NaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryExpression)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.BinaryExpression r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.BinaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.ConstantExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Relation)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Relation r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Relation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Variable)
    {
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        kodkod.ast.Variable r1;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Variable)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1;
        kodkod.engine.bool.BooleanMatrix $r2;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decls)
    {
        java.util.List $r2;
        kodkod.ast.Decls r1;
        minsolver.fol2sat.MinFOL2BoolTranslator r0;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: java.util.List visit(kodkod.ast.Decls)>(r1);

        return $r2;
    }

    void <init>(minsolver.fol2sat.MinFOL2BoolCache, minsolver.fol2sat.MinLeafInterpreter, minsolver.fol2sat.MinFOL2BoolTranslator)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0, r3;
        minsolver.fol2sat.MinFOL2BoolCache r1;
        minsolver.fol2sat.MinLeafInterpreter r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: minsolver.fol2sat.MinFOL2BoolCache;

        r2 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        r3 := @parameter2: minsolver.fol2sat.MinFOL2BoolTranslator;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void <init>(minsolver.fol2sat.MinFOL2BoolCache,minsolver.fol2sat.MinLeafInterpreter)>(r1, r2);

        return;
    }

    static minsolver.fol2sat.MinEnvironment access$29(minsolver.fol2sat.MinFOL2BoolTranslator)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        minsolver.fol2sat.MinEnvironment $r1;

        r0 := @parameter0: minsolver.fol2sat.MinFOL2BoolTranslator;

        $r1 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinEnvironment env>;

        return $r1;
    }

    void <init>(minsolver.fol2sat.MinFOL2BoolCache, minsolver.fol2sat.MinLeafInterpreter, minsolver.fol2sat.MinEnvironment, minsolver.fol2sat.MinFOL2BoolTranslator)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0, r4;
        minsolver.fol2sat.MinFOL2BoolCache r1;
        minsolver.fol2sat.MinEnvironment r3;
        minsolver.fol2sat.MinLeafInterpreter r2;

        r0 := @this: minsolver.fol2sat.MinFOL2BoolTranslator;

        r1 := @parameter0: minsolver.fol2sat.MinFOL2BoolCache;

        r2 := @parameter1: minsolver.fol2sat.MinLeafInterpreter;

        r3 := @parameter2: minsolver.fol2sat.MinEnvironment;

        r4 := @parameter3: minsolver.fol2sat.MinFOL2BoolTranslator;

        specialinvoke r0.<minsolver.fol2sat.MinFOL2BoolTranslator: void <init>(minsolver.fol2sat.MinFOL2BoolCache,minsolver.fol2sat.MinLeafInterpreter,minsolver.fol2sat.MinEnvironment)>(r1, r2, r3);

        return;
    }

    static minsolver.fol2sat.MinLeafInterpreter access$31(minsolver.fol2sat.MinFOL2BoolTranslator)
    {
        minsolver.fol2sat.MinFOL2BoolTranslator r0;
        minsolver.fol2sat.MinLeafInterpreter $r1;

        r0 := @parameter0: minsolver.fol2sat.MinFOL2BoolTranslator;

        $r1 = r0.<minsolver.fol2sat.MinFOL2BoolTranslator: minsolver.fol2sat.MinLeafInterpreter interpreter>;

        return $r1;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()
    {
        java.lang.NoSuchFieldError $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kodkod.ast.operator.ExprOperator[] $r1;
        kodkod.ast.operator.ExprOperator $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i1] = 8;

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i2] = 5;

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i3] = 2;

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i4] = 6;

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i5] = 3;

     label15:
        goto label17;

     label16:
        $r16 := @caughtexception;

     label17:
        $r8 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $i6 = virtualinvoke $r8.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i6] = 4;

     label18:
        goto label20;

     label19:
        $r15 := @caughtexception;

     label20:
        $r9 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $i7 = virtualinvoke $r9.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i7] = 9;

     label21:
        goto label23;

     label22:
        $r14 := @caughtexception;

     label23:
        $r10 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $i8 = virtualinvoke $r10.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i8] = 7;

     label24:
        goto label26;

     label25:
        $r13 := @caughtexception;

     label26:
        $r11 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $i9 = virtualinvoke $r11.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i9] = 1;

     label27:
        goto label29;

     label28:
        $r12 := @caughtexception;

     label29:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$Quantifier()
    {
        kodkod.ast.operator.Quantifier[] $r1;
        java.lang.NoSuchFieldError $r5, $r6;
        int[] $r0, r2;
        int $i0, $i1, $i2;
        kodkod.ast.operator.Quantifier $r3, $r4;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$Quantifier>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier ALL>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.Quantifier: int ordinal()>();

        r2[$i1] = 1;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r4 = <kodkod.ast.operator.Quantifier: kodkod.ast.operator.Quantifier SOME>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.Quantifier: int ordinal()>();

        r2[$i2] = 2;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$Quantifier> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator()
    {
        java.lang.NoSuchFieldError $r7, $r8, $r9, $r10;
        int[] $r0, r2;
        kodkod.ast.operator.FormulaOperator $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        kodkod.ast.operator.FormulaOperator[] $r1;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IFF>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i2] = 3;

     label06:
        goto label08;

     label07:
        $r9 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i3] = 4;

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.FormulaOperator: int ordinal()>();

        r2[$i4] = 2;

     label12:
        goto label14;

     label13:
        $r7 := @caughtexception;

     label14:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$FormulaOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCompOperator()
    {
        kodkod.ast.operator.ExprCompOperator[] $r1;
        java.lang.NoSuchFieldError $r5, $r6;
        int[] $r0, r2;
        int $i0, $i1, $i2;
        kodkod.ast.operator.ExprCompOperator $r3, $r4;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCompOperator>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator EQUALS>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprCompOperator: int ordinal()>();

        r2[$i1] = 2;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r4 = <kodkod.ast.operator.ExprCompOperator: kodkod.ast.operator.ExprCompOperator SUBSET>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprCompOperator: int ordinal()>();

        r2[$i2] = 1;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCompOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$Multiplicity()
    {
        kodkod.ast.operator.Multiplicity $r3, $r4, $r5, $r6, $r7;
        java.lang.NoSuchFieldError $r8, $r9, $r10, $r11, $r12;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        kodkod.ast.operator.Multiplicity[] $r1;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$Multiplicity>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity LONE>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.Multiplicity: int ordinal()>();

        r2[$i1] = 2;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity NO>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.Multiplicity: int ordinal()>();

        r2[$i2] = 1;

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.Multiplicity: int ordinal()>();

        r2[$i3] = 3;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SET>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.Multiplicity: int ordinal()>();

        r2[$i4] = 5;

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity SOME>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.Multiplicity: int ordinal()>();

        r2[$i5] = 4;

     label15:
        goto label17;

     label16:
        $r8 := @caughtexception;

     label17:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$Multiplicity> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator()
    {
        kodkod.ast.operator.IntCastOperator[] $r1;
        java.lang.NoSuchFieldError $r5, $r6;
        int[] $r0, r2;
        int $i0, $i1, $i2;
        kodkod.ast.operator.IntCastOperator $r3, $r4;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator BITSETCAST>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.IntCastOperator: int ordinal()>();

        r2[$i1] = 2;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r4 = <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator INTCAST>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.IntCastOperator: int ordinal()>();

        r2[$i2] = 1;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator()
    {
        kodkod.ast.operator.ExprCastOperator $r3, $r4;
        java.lang.NoSuchFieldError $r5, $r6;
        kodkod.ast.operator.ExprCastOperator[] $r1;
        int[] $r0, r2;
        int $i0, $i1, $i2;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator CARDINALITY>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprCastOperator: int ordinal()>();

        r2[$i1] = 1;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r4 = <kodkod.ast.operator.ExprCastOperator: kodkod.ast.operator.ExprCastOperator SUM>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprCastOperator: int ordinal()>();

        r2[$i2] = 2;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprCastOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator()
    {
        java.lang.NoSuchFieldError $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        int[] $r0, r2;
        kodkod.ast.operator.IntOperator $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        kodkod.ast.operator.IntOperator[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator ABS>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i1] = 14;

     label03:
        goto label05;

     label04:
        $r32 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator AND>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i2] = 6;

     label06:
        goto label08;

     label07:
        $r31 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator DIVIDE>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i3] = 4;

     label09:
        goto label11;

     label10:
        $r30 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MINUS>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i4] = 3;

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MODULO>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i5] = 5;

     label15:
        goto label17;

     label16:
        $r28 := @caughtexception;

     label17:
        $r8 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator MULTIPLY>;

        $i6 = virtualinvoke $r8.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i6] = 2;

     label18:
        goto label20;

     label19:
        $r27 := @caughtexception;

     label20:
        $r9 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NEG>;

        $i7 = virtualinvoke $r9.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i7] = 12;

     label21:
        goto label23;

     label22:
        $r26 := @caughtexception;

     label23:
        $r10 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator NOT>;

        $i8 = virtualinvoke $r10.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i8] = 13;

     label24:
        goto label26;

     label25:
        $r25 := @caughtexception;

     label26:
        $r11 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator OR>;

        $i9 = virtualinvoke $r11.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i9] = 7;

     label27:
        goto label29;

     label28:
        $r24 := @caughtexception;

     label29:
        $r12 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator PLUS>;

        $i10 = virtualinvoke $r12.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i10] = 1;

     label30:
        goto label32;

     label31:
        $r23 := @caughtexception;

     label32:
        $r13 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SGN>;

        $i11 = virtualinvoke $r13.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i11] = 15;

     label33:
        goto label35;

     label34:
        $r22 := @caughtexception;

     label35:
        $r14 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHA>;

        $i12 = virtualinvoke $r14.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i12] = 11;

     label36:
        goto label38;

     label37:
        $r21 := @caughtexception;

     label38:
        $r15 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHL>;

        $i13 = virtualinvoke $r15.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i13] = 9;

     label39:
        goto label41;

     label40:
        $r20 := @caughtexception;

     label41:
        $r16 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator SHR>;

        $i14 = virtualinvoke $r16.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i14] = 10;

     label42:
        goto label44;

     label43:
        $r19 := @caughtexception;

     label44:
        $r17 = <kodkod.ast.operator.IntOperator: kodkod.ast.operator.IntOperator XOR>;

        $i15 = virtualinvoke $r17.<kodkod.ast.operator.IntOperator: int ordinal()>();

        r2[$i15] = 8;

     label45:
        goto label47;

     label46:
        $r18 := @caughtexception;

     label47:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
        catch java.lang.NoSuchFieldError from label29 to label30 with label31;
        catch java.lang.NoSuchFieldError from label32 to label33 with label34;
        catch java.lang.NoSuchFieldError from label35 to label36 with label37;
        catch java.lang.NoSuchFieldError from label38 to label39 with label40;
        catch java.lang.NoSuchFieldError from label41 to label42 with label43;
        catch java.lang.NoSuchFieldError from label44 to label45 with label46;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$IntCompOperator()
    {
        kodkod.ast.operator.IntCompOperator $r3, $r4, $r5, $r6, $r7;
        java.lang.NoSuchFieldError $r8, $r9, $r10, $r11, $r12;
        kodkod.ast.operator.IntCompOperator[] $r1;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        $r0 = <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCompOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator EQ>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.IntCompOperator: int ordinal()>();

        r2[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator GT>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.IntCompOperator: int ordinal()>();

        r2[$i2] = 4;

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator GTE>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.IntCompOperator: int ordinal()>();

        r2[$i3] = 5;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator LT>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.IntCompOperator: int ordinal()>();

        r2[$i4] = 2;

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.IntCompOperator: kodkod.ast.operator.IntCompOperator LTE>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.IntCompOperator: int ordinal()>();

        r2[$i5] = 3;

     label15:
        goto label17;

     label16:
        $r8 := @caughtexception;

     label17:
        <minsolver.fol2sat.MinFOL2BoolTranslator: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCompOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
    }
}
