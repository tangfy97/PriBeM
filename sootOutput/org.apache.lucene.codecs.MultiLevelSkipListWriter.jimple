public abstract class org.apache.lucene.codecs.MultiLevelSkipListWriter extends java.lang.Object
{
    protected int numberOfSkipLevels;
    private int skipInterval;
    private int skipMultiplier;
    private org.apache.lucene.store.RAMOutputStream[] skipBuffer;
    static final boolean $assertionsDisabled;

    protected void <init>(int, int, int, int)
    {
        long $l4;
        int i0, i1, i2, $i3, $i5, $i6, i7, $i8;
        org.apache.lucene.codecs.MultiLevelSkipListWriter r0;

        r0 := @this: org.apache.lucene.codecs.MultiLevelSkipListWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i7 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int skipInterval> = i0;

        r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int skipMultiplier> = i1;

        if i2 > i0 goto label1;

        r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels> = 1;

        goto label2;

     label1:
        $i3 = i2 / i0;

        $l4 = (long) $i3;

        $i5 = staticinvoke <org.apache.lucene.util.MathUtil: int log(long,int)>($l4, i1);

        $i6 = 1 + $i5;

        r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels> = $i6;

     label2:
        $i8 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels>;

        if $i8 <= i7 goto label3;

        r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels> = i7;

     label3:
        return;
    }

    protected void <init>(int, int, int)
    {
        int i0, i1, i2;
        org.apache.lucene.codecs.MultiLevelSkipListWriter r0;

        r0 := @this: org.apache.lucene.codecs.MultiLevelSkipListWriter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: void <init>(int,int,int,int)>(i0, i0, i1, i2);

        return;
    }

    protected void init()
    {
        org.apache.lucene.store.RAMOutputStream[] $r1, $r3;
        org.apache.lucene.store.RAMOutputStream $r2;
        int $i0, $i1, i2;
        org.apache.lucene.codecs.MultiLevelSkipListWriter r0;

        r0 := @this: org.apache.lucene.codecs.MultiLevelSkipListWriter;

        $i0 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels>;

        $r1 = newarray (org.apache.lucene.store.RAMOutputStream)[$i0];

        r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer> = $r1;

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels>;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r2 = new org.apache.lucene.store.RAMOutputStream;

        specialinvoke $r2.<org.apache.lucene.store.RAMOutputStream: void <init>()>();

        $r3[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected void resetSkip()
    {
        org.apache.lucene.store.RAMOutputStream[] $r1, $r2, $r3;
        org.apache.lucene.store.RAMOutputStream $r4;
        int $i0, i1;
        org.apache.lucene.codecs.MultiLevelSkipListWriter r0;

        r0 := @this: org.apache.lucene.codecs.MultiLevelSkipListWriter;

        $r1 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: void init()>();

        goto label3;

     label1:
        i1 = 0;

     label2:
        $r2 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r4 = $r3[i1];

        virtualinvoke $r4.<org.apache.lucene.store.RAMOutputStream: void reset()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    protected abstract void writeSkipData(int, org.apache.lucene.store.IndexOutput) throws java.io.IOException;

    public void bufferSkip(int) throws java.io.IOException
    {
        org.apache.lucene.store.RAMOutputStream[] $r1, $r3, $r5;
        long $l1, l11;
        java.lang.AssertionError $r7;
        int $i0, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i10, i12;
        boolean $z0;
        org.apache.lucene.store.RAMOutputStream $r2, $r4, $r6;
        org.apache.lucene.codecs.MultiLevelSkipListWriter r0;

        r0 := @this: org.apache.lucene.codecs.MultiLevelSkipListWriter;

        i6 := @parameter0: int;

        $z0 = <org.apache.lucene.codecs.MultiLevelSkipListWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i4 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int skipInterval>;

        $i5 = i6 % $i4;

        if $i5 == 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        i7 = 1;

        $i0 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int skipInterval>;

        i8 = i6 / $i0;

     label2:
        $i9 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int skipMultiplier>;

        $i10 = i8 % $i9;

        if $i10 != 0 goto label3;

        $i2 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels>;

        if i7 >= $i2 goto label3;

        i7 = i7 + 1;

        $i3 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int skipMultiplier>;

        i8 = i8 / $i3;

        goto label2;

     label3:
        l11 = 0L;

        i12 = 0;

     label4:
        if i12 >= i7 goto label6;

        $r1 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r2 = $r1[i12];

        virtualinvoke r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: void writeSkipData(int,org.apache.lucene.store.IndexOutput)>(i12, $r2);

        $r3 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r4 = $r3[i12];

        $l1 = virtualinvoke $r4.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        if i12 == 0 goto label5;

        $r5 = r0.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r6 = $r5[i12];

        virtualinvoke $r6.<org.apache.lucene.store.RAMOutputStream: void writeVLong(long)>(l11);

     label5:
        l11 = $l1;

        i12 = i12 + 1;

        goto label4;

     label6:
        return;
    }

    public long writeSkip(org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        org.apache.lucene.store.RAMOutputStream[] $r2, $r3, $r4, $r6, $r8;
        long $l0, $l3;
        byte $b4;
        int $i1, $i2, i5, $i6, $i8;
        org.apache.lucene.store.IndexOutput r0;
        org.apache.lucene.store.RAMOutputStream $r5, $r7, $r9;
        org.apache.lucene.codecs.MultiLevelSkipListWriter r1;

        r1 := @this: org.apache.lucene.codecs.MultiLevelSkipListWriter;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        $l0 = virtualinvoke r0.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $r2 = r1.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        if $r2 == null goto label1;

        $r3 = r1.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $i1 = lengthof $r3;

        if $i1 != 0 goto label2;

     label1:
        return $l0;

     label2:
        $i2 = r1.<org.apache.lucene.codecs.MultiLevelSkipListWriter: int numberOfSkipLevels>;

        i5 = $i2 - 1;

     label3:
        if i5 <= 0 goto label5;

        $r6 = r1.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r7 = $r6[i5];

        $l3 = virtualinvoke $r7.<org.apache.lucene.store.RAMOutputStream: long getFilePointer()>();

        $b4 = $l3 cmp 0L;

        $i6 = (int) $b4;

        if $i6 <= 0 goto label4;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeVLong(long)>($l3);

        $r8 = r1.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r9 = $r8[i5];

        virtualinvoke $r9.<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)>(r0);

     label4:
        $i8 = (int) -1;

        i5 = i5 + $i8;

        goto label3;

     label5:
        $r4 = r1.<org.apache.lucene.codecs.MultiLevelSkipListWriter: org.apache.lucene.store.RAMOutputStream[] skipBuffer>;

        $r5 = $r4[0];

        virtualinvoke $r5.<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)>(r0);

        return $l0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/codecs/MultiLevelSkipListWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.MultiLevelSkipListWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
