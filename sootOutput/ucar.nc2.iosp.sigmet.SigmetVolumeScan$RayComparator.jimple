class ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator extends java.lang.Object implements java.util.Comparator
{
    final ucar.nc2.iosp.sigmet.SigmetVolumeScan this$0;

    void <init>(ucar.nc2.iosp.sigmet.SigmetVolumeScan)
    {
        ucar.nc2.iosp.sigmet.SigmetVolumeScan r1;
        ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator r0;

        r0 := @this: ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator;

        r1 := @parameter0: ucar.nc2.iosp.sigmet.SigmetVolumeScan;

        r0.<ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator: ucar.nc2.iosp.sigmet.SigmetVolumeScan this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(ucar.nc2.iosp.sigmet.Ray, ucar.nc2.iosp.sigmet.Ray)
    {
        ucar.nc2.iosp.sigmet.Ray r0, r1;
        short $s0, $s1, $s2, $s3, $s4, $s5;
        byte $b6, $b7, $b8;
        int $i9, $i10, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20;
        ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator r2;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r2 := @this: ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator;

        r0 := @parameter0: ucar.nc2.iosp.sigmet.Ray;

        r1 := @parameter1: ucar.nc2.iosp.sigmet.Ray;

        $s0 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.Ray: short getTime()>();

        $s1 = virtualinvoke r1.<ucar.nc2.iosp.sigmet.Ray: short getTime()>();

        $i9 = (int) $s0;

        $i10 = (int) $s1;

        if $i9 >= $i10 goto label1;

        $i12 = (int) -1;

        return $i12;

     label1:
        $s2 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.Ray: short getTime()>();

        $s3 = virtualinvoke r1.<ucar.nc2.iosp.sigmet.Ray: short getTime()>();

        $i13 = (int) $s2;

        $i14 = (int) $s3;

        if $i13 != $i14 goto label4;

        $f0 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.Ray: float getAz()>();

        $f1 = virtualinvoke r1.<ucar.nc2.iosp.sigmet.Ray: float getAz()>();

        $b6 = $f0 cmpg $f1;

        $i15 = (int) $b6;

        if $i15 >= 0 goto label2;

        $i17 = (int) -1;

        return $i17;

     label2:
        $f2 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.Ray: float getAz()>();

        $f3 = virtualinvoke r1.<ucar.nc2.iosp.sigmet.Ray: float getAz()>();

        $b7 = $f2 cmpl $f3;

        $i18 = (int) $b7;

        if $i18 <= 0 goto label3;

        return 1;

     label3:
        $f4 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.Ray: float getAz()>();

        $f5 = virtualinvoke r1.<ucar.nc2.iosp.sigmet.Ray: float getAz()>();

        $b8 = $f4 cmpl $f5;

        if $b8 != 0 goto label5;

        return 0;

     label4:
        $s4 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.Ray: short getTime()>();

        $s5 = virtualinvoke r1.<ucar.nc2.iosp.sigmet.Ray: short getTime()>();

        $i19 = (int) $s4;

        $i20 = (int) $s5;

        if $i19 <= $i20 goto label5;

        return 1;

     label5:
        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator r0;
        int $i0;
        java.lang.Object r1, r2;
        ucar.nc2.iosp.sigmet.Ray $r3, $r4;

        r0 := @this: ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (ucar.nc2.iosp.sigmet.Ray) r1;

        $r3 = (ucar.nc2.iosp.sigmet.Ray) r2;

        $i0 = virtualinvoke r0.<ucar.nc2.iosp.sigmet.SigmetVolumeScan$RayComparator: int compare(ucar.nc2.iosp.sigmet.Ray,ucar.nc2.iosp.sigmet.Ray)>($r4, $r3);

        return $i0;
    }
}
