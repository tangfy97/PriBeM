public final class org.apache.batik.ext.awt.image.CompositeRule extends java.lang.Object implements java.io.Serializable
{
    public static final int RULE_OVER;
    public static final int RULE_IN;
    public static final int RULE_OUT;
    public static final int RULE_ATOP;
    public static final int RULE_XOR;
    public static final int RULE_ARITHMETIC;
    public static final int RULE_MULTIPLY;
    public static final int RULE_SCREEN;
    public static final int RULE_DARKEN;
    public static final int RULE_LIGHTEN;
    public static final org.apache.batik.ext.awt.image.CompositeRule OVER;
    public static final org.apache.batik.ext.awt.image.CompositeRule IN;
    public static final org.apache.batik.ext.awt.image.CompositeRule OUT;
    public static final org.apache.batik.ext.awt.image.CompositeRule ATOP;
    public static final org.apache.batik.ext.awt.image.CompositeRule XOR;
    public static final org.apache.batik.ext.awt.image.CompositeRule MULTIPLY;
    public static final org.apache.batik.ext.awt.image.CompositeRule SCREEN;
    public static final org.apache.batik.ext.awt.image.CompositeRule DARKEN;
    public static final org.apache.batik.ext.awt.image.CompositeRule LIGHTEN;
    private int rule;
    private float k1;
    private float k2;
    private float k3;
    private float k4;

    public static org.apache.batik.ext.awt.image.CompositeRule ARITHMETIC(float, float, float, float)
    {
        org.apache.batik.ext.awt.image.CompositeRule $r0;
        float f0, f1, f2, f3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $r0 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(float,float,float,float)>(f0, f1, f2, f3);

        return $r0;
    }

    public int getRule()
    {
        int $i0;
        org.apache.batik.ext.awt.image.CompositeRule r0;

        r0 := @this: org.apache.batik.ext.awt.image.CompositeRule;

        $i0 = r0.<org.apache.batik.ext.awt.image.CompositeRule: int rule>;

        return $i0;
    }

    private void <init>(int)
    {
        int i0;
        org.apache.batik.ext.awt.image.CompositeRule r0;

        r0 := @this: org.apache.batik.ext.awt.image.CompositeRule;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.CompositeRule: int rule> = i0;

        return;
    }

    private void <init>(float, float, float, float)
    {
        org.apache.batik.ext.awt.image.CompositeRule r0;
        float f0, f1, f2, f3;

        r0 := @this: org.apache.batik.ext.awt.image.CompositeRule;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.CompositeRule: int rule> = 6;

        r0.<org.apache.batik.ext.awt.image.CompositeRule: float k1> = f0;

        r0.<org.apache.batik.ext.awt.image.CompositeRule: float k2> = f1;

        r0.<org.apache.batik.ext.awt.image.CompositeRule: float k3> = f2;

        r0.<org.apache.batik.ext.awt.image.CompositeRule: float k4> = f3;

        return;
    }

    public float[] getCoefficients()
    {
        org.apache.batik.ext.awt.image.CompositeRule r0;
        int $i0;
        float $f0, $f1, $f2, $f3;
        float[] $r1;

        r0 := @this: org.apache.batik.ext.awt.image.CompositeRule;

        $i0 = r0.<org.apache.batik.ext.awt.image.CompositeRule: int rule>;

        if $i0 == 6 goto label1;

        return null;

     label1:
        $r1 = newarray (float)[4];

        $f0 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k1>;

        $r1[0] = $f0;

        $f1 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k2>;

        $r1[1] = $f1;

        $f2 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k3>;

        $r1[2] = $f2;

        $f3 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k4>;

        $r1[3] = $f3;

        return $r1;
    }

    private java.lang.Object readResolve() throws java.io.ObjectStreamException
    {
        java.lang.Error $r10;
        org.apache.batik.ext.awt.image.CompositeRule r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0;

        r0 := @this: org.apache.batik.ext.awt.image.CompositeRule;

        $i0 = r0.<org.apache.batik.ext.awt.image.CompositeRule: int rule>;

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            default: goto label11;
        };

     label01:
        $r9 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OVER>;

        return $r9;

     label02:
        $r8 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule IN>;

        return $r8;

     label03:
        $r7 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OUT>;

        return $r7;

     label04:
        $r6 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule ATOP>;

        return $r6;

     label05:
        $r5 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule XOR>;

        return $r5;

     label06:
        return r0;

     label07:
        $r4 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule MULTIPLY>;

        return $r4;

     label08:
        $r3 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule SCREEN>;

        return $r3;

     label09:
        $r2 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule DARKEN>;

        return $r2;

     label10:
        $r1 = <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule LIGHTEN>;

        return $r1;

     label11:
        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String)>("Unknown Composite Rule type");

        throw $r10;
    }

    public java.lang.String toString()
    {
        java.lang.Error $r12;
        org.apache.batik.ext.awt.image.CompositeRule r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0;
        java.lang.String $r11;
        float $f0, $f1, $f2, $f3;

        r0 := @this: org.apache.batik.ext.awt.image.CompositeRule;

        $i0 = r0.<org.apache.batik.ext.awt.image.CompositeRule: int rule>;

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            default: goto label11;
        };

     label01:
        return "[CompositeRule: OVER]";

     label02:
        return "[CompositeRule: IN]";

     label03:
        return "[CompositeRule: OUT]";

     label04:
        return "[CompositeRule: ATOP]";

     label05:
        return "[CompositeRule: XOR]";

     label06:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[CompositeRule: ARITHMATIC k1:");

        $f0 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k1>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" k2: ");

        $f1 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k2>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" k3: ");

        $f2 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k3>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" k4: ");

        $f3 = r0.<org.apache.batik.ext.awt.image.CompositeRule: float k4>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label07:
        return "[CompositeRule: MULTIPLY]";

     label08:
        return "[CompositeRule: SCREEN]";

     label09:
        return "[CompositeRule: DARKEN]";

     label10:
        return "[CompositeRule: LIGHTEN]";

     label11:
        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String)>("Unknown Composite Rule type");

        throw $r12;
    }

    static void <clinit>()
    {
        org.apache.batik.ext.awt.image.CompositeRule $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_LIGHTEN> = 10;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_DARKEN> = 9;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_SCREEN> = 8;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_MULTIPLY> = 7;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_ARITHMETIC> = 6;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_XOR> = 5;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_ATOP> = 4;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_OUT> = 3;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_IN> = 2;

        <org.apache.batik.ext.awt.image.CompositeRule: int RULE_OVER> = 1;

        $r0 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r0.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(1);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OVER> = $r0;

        $r1 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r1.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(2);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule IN> = $r1;

        $r2 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(3);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule OUT> = $r2;

        $r3 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(4);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule ATOP> = $r3;

        $r4 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(5);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule XOR> = $r4;

        $r5 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r5.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(7);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule MULTIPLY> = $r5;

        $r6 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r6.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(8);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule SCREEN> = $r6;

        $r7 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r7.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(9);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule DARKEN> = $r7;

        $r8 = new org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke $r8.<org.apache.batik.ext.awt.image.CompositeRule: void <init>(int)>(10);

        <org.apache.batik.ext.awt.image.CompositeRule: org.apache.batik.ext.awt.image.CompositeRule LIGHTEN> = $r8;

        return;
    }
}
