public abstract class org.apache.xpath.axes.LocPathIterator extends org.apache.xpath.axes.PredicatedNodeTest implements java.lang.Cloneable, org.apache.xml.dtm.DTMIterator, java.io.Serializable, org.apache.xpath.axes.PathComponent
{
    protected boolean m_allowDetach;
    protected transient org.apache.xpath.axes.IteratorPool m_clones;
    protected transient org.apache.xml.dtm.DTM m_cdtm;
    transient int m_stackFrame;
    private boolean m_isTopLevel;
    public transient int m_lastFetched;
    protected transient int m_context;
    protected transient int m_currentContextNode;
    protected transient int m_pos;
    protected transient int m_length;
    private org.apache.xml.utils.PrefixResolver m_prefixResolver;
    protected transient org.apache.xpath.XPathContext m_execContext;

    protected void <init>()
    {
        org.apache.xpath.axes.IteratorPool $r2;
        int $i1, $i3, $i5, $i7, $i9;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void <init>()>();

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach> = 1;

        $r2 = new org.apache.xpath.axes.IteratorPool;

        specialinvoke $r2.<org.apache.xpath.axes.IteratorPool: void <init>(org.apache.xml.dtm.DTMIterator)>(r0);

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones> = $r2;

        $i1 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame> = $i1;

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_isTopLevel> = 0;

        $i3 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_context> = $i5;

        $i7 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = $i7;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = 0;

        $i9 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = $i9;

        return;
    }

    protected void <init>(org.apache.xml.utils.PrefixResolver)
    {
        org.apache.xpath.axes.IteratorPool $r3;
        org.apache.xpath.axes.LocPathIterator r0;
        int $i1, $i3, $i5, $i7, $i9;
        org.apache.xml.utils.PrefixResolver r2;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r2 := @parameter0: org.apache.xml.utils.PrefixResolver;

        specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void <init>()>();

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach> = 1;

        $r3 = new org.apache.xpath.axes.IteratorPool;

        specialinvoke $r3.<org.apache.xpath.axes.IteratorPool: void <init>(org.apache.xml.dtm.DTMIterator)>(r0);

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones> = $r3;

        $i1 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame> = $i1;

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_isTopLevel> = 0;

        $i3 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_context> = $i5;

        $i7 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = $i7;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = 0;

        $i9 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = $i9;

        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>(r0);

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver m_prefixResolver> = r2;

        return;
    }

    protected void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        int i0, i1;
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.compiler.Compiler r1;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, 1);

        return;
    }

    protected void <init>(org.apache.xpath.compiler.Compiler, int, int, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.IteratorPool $r3;
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.compiler.Compiler r2;
        int i0, i1, $i3, $i5, $i7, $i9, $i11;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r2 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void <init>()>();

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach> = 1;

        $r3 = new org.apache.xpath.axes.IteratorPool;

        specialinvoke $r3.<org.apache.xpath.axes.IteratorPool: void <init>(org.apache.xml.dtm.DTMIterator)>(r0);

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones> = $r3;

        $i3 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame> = $i3;

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_isTopLevel> = 0;

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i5;

        $i7 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_context> = $i7;

        $i9 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = $i9;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = 0;

        $i11 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = $i11;

        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>(r0);

        return;
    }

    public int getAnalysisBits()
    {
        int $i0, $i1;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getAxis()>();

        $i1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int getAnalysisBitFromAxes(int)>($i0);

        return $i1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.IteratorPool $r2;
        javax.xml.transform.TransformerException $r4;
        java.io.ObjectInputStream r0;
        java.lang.ClassNotFoundException $r3;
        org.apache.xpath.axes.LocPathIterator r1;

        r1 := @this: org.apache.xpath.axes.LocPathIterator;

        r0 := @parameter0: java.io.ObjectInputStream;

     label1:
        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new org.apache.xpath.axes.IteratorPool;

        specialinvoke $r2.<org.apache.xpath.axes.IteratorPool: void <init>(org.apache.xml.dtm.DTMIterator)>(r1);

        r1.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new javax.xml.transform.TransformerException;

        specialinvoke $r4.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void setEnvironment(java.lang.Object)
    {
        java.lang.Object r1;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    public org.apache.xml.dtm.DTM getDTM(int)
    {
        org.apache.xpath.XPathContext $r1;
        int i0;
        org.apache.xml.dtm.DTM $r2;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        return $r2;
    }

    public org.apache.xml.dtm.DTMManager getDTMManager()
    {
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.XPathContext $r1;
        org.apache.xml.dtm.DTMManager $r2;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        return $r2;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.IteratorPool $r2;
        org.apache.xpath.objects.XNodeSet $r0;
        org.apache.xpath.XPathContext r5;
        int $i0;
        org.apache.xml.dtm.DTMIterator $r3;
        org.apache.xpath.axes.LocPathIterator r1, $r4;

        r1 := @this: org.apache.xpath.axes.LocPathIterator;

        r5 := @parameter0: org.apache.xpath.XPathContext;

        $r0 = new org.apache.xpath.objects.XNodeSet;

        $r2 = r1.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.axes.IteratorPool: org.apache.xml.dtm.DTMIterator getInstance()>();

        $r4 = (org.apache.xpath.axes.LocPathIterator) $r3;

        specialinvoke $r0.<org.apache.xpath.objects.XNodeSet: void <init>(org.apache.xml.dtm.DTMIterator)>($r4);

        $i0 = virtualinvoke r5.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        virtualinvoke $r0.<org.apache.xpath.axes.NodeSequence: void setRoot(int,java.lang.Object)>($i0, r5);

        return $r0;
    }

    public void executeCharsToContentHandler(org.apache.xpath.XPathContext, org.xml.sax.ContentHandler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException
    {
        org.apache.xpath.axes.IteratorPool $r1;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xpath.axes.LocPathIterator r0, r3;
        org.apache.xpath.XPathContext r4;
        int $i0, $i1, $i3;
        org.apache.xml.dtm.DTM $r5;
        org.xml.sax.ContentHandler r6;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r4 := @parameter0: org.apache.xpath.XPathContext;

        r6 := @parameter1: org.xml.sax.ContentHandler;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.axes.IteratorPool: org.apache.xml.dtm.DTMIterator getInstance()>();

        r3 = (org.apache.xpath.axes.LocPathIterator) $r2;

        $i0 = virtualinvoke r4.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        virtualinvoke r3.<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)>($i0, r4);

        $i1 = virtualinvoke r3.<org.apache.xpath.axes.LocPathIterator: int nextNode()>();

        $r5 = virtualinvoke r3.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM getDTM(int)>($i1);

        virtualinvoke r3.<org.apache.xpath.axes.LocPathIterator: void detach()>();

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        interfaceinvoke $r5.<org.apache.xml.dtm.DTM: void dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)>($i1, r6, 0);

     label1:
        return;
    }

    public org.apache.xml.dtm.DTMIterator asIterator(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.IteratorPool $r2;
        org.apache.xpath.objects.XNodeSet $r0;
        org.apache.xpath.XPathContext r5;
        int i0;
        org.apache.xml.dtm.DTMIterator $r3;
        org.apache.xpath.axes.LocPathIterator r1, $r4;

        r1 := @this: org.apache.xpath.axes.LocPathIterator;

        r5 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        $r0 = new org.apache.xpath.objects.XNodeSet;

        $r2 = r1.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.axes.IteratorPool: org.apache.xml.dtm.DTMIterator getInstance()>();

        $r4 = (org.apache.xpath.axes.LocPathIterator) $r3;

        specialinvoke $r0.<org.apache.xpath.objects.XNodeSet: void <init>(org.apache.xml.dtm.DTMIterator)>($r4);

        virtualinvoke $r0.<org.apache.xpath.axes.NodeSequence: void setRoot(int,java.lang.Object)>(i0, r5);

        return $r0;
    }

    public boolean isNodesetExpr()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        return 1;
    }

    public int asNode(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.IteratorPool $r1;
        org.apache.xpath.XPathContext r3;
        int $i0, $i1;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r3 := @parameter0: org.apache.xpath.XPathContext;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.axes.IteratorPool: org.apache.xml.dtm.DTMIterator getInstance()>();

        $i0 = virtualinvoke r3.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: void setRoot(int,java.lang.Object)>($i0, r3);

        $i1 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: void detach()>();

        return $i1;
    }

    public boolean bool(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.XPathContext r1;
        int $i0, $i2;
        org.apache.xpath.axes.LocPathIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int asNode(org.apache.xpath.XPathContext)>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setIsTopLevel(boolean)
    {
        org.apache.xpath.axes.LocPathIterator r0;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        z0 := @parameter0: boolean;

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_isTopLevel> = z0;

        return;
    }

    public boolean getIsTopLevel()
    {
        org.apache.xpath.axes.LocPathIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_isTopLevel>;

        return $z0;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.VariableStack $r5;
        org.apache.xpath.XPathContext r2;
        int i0, $i1, $i3, $i5;
        org.apache.xml.dtm.DTM $r3;
        java.lang.Object r1;
        org.apache.xml.utils.PrefixResolver $r4, $r6;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_context> = i0;

        r2 = (org.apache.xpath.XPathContext) r1;

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext> = r2;

        $r3 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm> = $r3;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = i0;

        $r4 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver m_prefixResolver>;

        if null != $r4 goto label1;

        $r6 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.utils.PrefixResolver getNamespaceContext()>();

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver m_prefixResolver> = $r6;

     label1:
        $i3 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i3;

        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 0;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = 0;

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = $i5;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_isTopLevel>;

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        $i1 = virtualinvoke $r5.<org.apache.xpath.VariableStack: int getStackFrame()>();

        r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame> = $i1;

     label2:
        return;
    }

    protected void setNextPosition(int)
    {
        int i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "setNextPosition not supported in this iterator!");

        return;
    }

    public final int getCurrentPos()
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        return $i0;
    }

    public void setShouldCacheNodes(boolean)
    {
        org.apache.xpath.axes.LocPathIterator r0;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "setShouldCacheNodes not supported by this iterater!");

        return;
    }

    public boolean isMutable()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        return 0;
    }

    public void setCurrentPos(int)
    {
        int i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "setCurrentPos not supported by this iterator!");

        return;
    }

    public void incrementCurrentPos()
    {
        int $i0, $i1;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        $i1 = $i0 + 1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = $i1;

        return;
    }

    public int size()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "size() not supported by this iterator!");

        return 0;
    }

    public int item(int)
    {
        int i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "item(int index) not supported by this iterator!");

        return 0;
    }

    public void setItem(int, int)
    {
        int i0, i1;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "setItem not supported by this iterator!");

        return;
    }

    public int getLength()
    {
        java.lang.CloneNotSupportedException $r5;
        org.apache.xpath.XPathContext $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i12, $i14, $i16;
        boolean z0, $z2, $z3, $z4;
        org.apache.xpath.axes.SubContextList $r2;
        org.apache.xpath.axes.LocPathIterator r0, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext: org.apache.xpath.axes.SubContextList getSubContextList()>();

        if r0 != $r2 goto label01;

        $z4 = 1;

        $z3 = 1;

        goto label02;

     label01:
        $z4 = 0;

        $z3 = 0;

     label02:
        z0 = $z4;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getPredicateCount()>();

        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_length>;

        $i12 = (int) -1;

        if $i12 == $i1 goto label03;

        if $z3 == 0 goto label03;

        $i6 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        if $i6 >= 1 goto label03;

        $i7 = r0.<org.apache.xpath.axes.LocPathIterator: int m_length>;

        return $i7;

     label03:
        $z2 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z2 == 0 goto label04;

        $i5 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        return $i5;

     label04:
        $i2 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        if $i2 < 0 goto label05;

        $i8 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: int getProximityPosition()>();

        goto label06;

     label05:
        $i8 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

     label06:
        i9 = $i8;

     label07:
        $r3 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: java.lang.Object clone()>();

        $r4 = (org.apache.xpath.axes.LocPathIterator) $r3;

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        $i14 = (int) -1;

        return $i14;

     label10:
        if $i0 <= 0 goto label12;

        if z0 == 0 goto label12;

        $i4 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        $r4.<org.apache.xpath.axes.PredicatedNodeTest: int m_predCount> = $i4;

        goto label12;

     label11:
        i9 = i9 + 1;

     label12:
        $i10 = virtualinvoke $r4.<org.apache.xpath.axes.LocPathIterator: int nextNode()>();

        $i16 = (int) -1;

        if $i16 != $i10 goto label11;

        if z0 == 0 goto label13;

        $i3 = r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex>;

        if $i3 >= 1 goto label13;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = i9;

     label13:
        return i9;

        catch java.lang.CloneNotSupportedException from label07 to label08 with label09;
    }

    public boolean isFresh()
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int previousNode()
    {
        java.lang.RuntimeException $r0;
        java.lang.String $r1;
        org.apache.xpath.axes.LocPathIterator r2;

        r2 := @this: org.apache.xpath.axes.LocPathIterator;

        $r0 = new java.lang.RuntimeException;

        $r1 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_CANNOT_ITERATE", null);

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    public int getWhatToShow()
    {
        int $i1;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i1 = (int) -17;

        return $i1;
    }

    public org.apache.xml.dtm.DTMFilter getFilter()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        return null;
    }

    public int getRoot()
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        return $i0;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        return 1;
    }

    public void allowDetachToRelease(boolean)
    {
        org.apache.xpath.axes.LocPathIterator r0;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        z0 := @parameter0: boolean;

        r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach> = z0;

        return;
    }

    public void detach()
    {
        org.apache.xpath.axes.IteratorPool $r1;
        int $i1, $i3, $i5, $i7;
        org.apache.xpath.axes.LocPathIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext> = null;

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm> = null;

        $i1 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_length> = $i1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = 0;

        $i3 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_context> = $i5;

        $i7 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = $i7;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones>;

        virtualinvoke $r1.<org.apache.xpath.axes.IteratorPool: void freeInstance(org.apache.xml.dtm.DTMIterator)>(r0);

     label1:
        return;
    }

    public void reset()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "This iterator can not reset!");

        return;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.IteratorPool $r1;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xpath.axes.LocPathIterator r0, r3;
        org.apache.xpath.XPathContext $r4;
        org.apache.xml.dtm.DTM $r5;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.axes.IteratorPool m_clones>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.axes.IteratorPool: org.apache.xml.dtm.DTMIterator getInstanceOrThrow()>();

        r3 = (org.apache.xpath.axes.LocPathIterator) $r2;

        $r4 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        r3.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext> = $r4;

        $r5 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm>;

        r3.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTM m_cdtm> = $r5;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        r3.<org.apache.xpath.axes.LocPathIterator: int m_context> = $i0;

        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode>;

        r3.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = $i1;

        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        r3.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame> = $i2;

        return r3;
    }

    public abstract int nextNode();

    protected int returnNextNode(int)
    {
        int i0, $i1, $i2, $i4, $i6;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        $i4 = (int) -1;

        if $i4 == i0 goto label1;

        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        $i2 = $i1 + 1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = $i2;

     label1:
        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = i0;

        $i6 = (int) -1;

        if $i6 != i0 goto label2;

        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 1;

     label2:
        return i0;
    }

    public int getCurrentNode()
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        return $i0;
    }

    public void runTo(int)
    {
        org.apache.xpath.axes.LocPathIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i6, $i8, $i10;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z0 != 0 goto label1;

        if i0 < 0 goto label2;

        $i4 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getCurrentPos()>();

        if i0 > $i4 goto label2;

     label1:
        return;

     label2:
        $i6 = (int) -1;

        if $i6 != i0 goto label5;

        goto label3;

     label3:
        $i3 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int nextNode()>();

        $i8 = (int) -1;

        if $i8 != $i3 goto label3;

        goto label6;

     label4:
        $i2 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getCurrentPos()>();

        if $i2 < i0 goto label5;

        goto label6;

     label5:
        $i1 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int nextNode()>();

        $i10 = (int) -1;

        if $i10 != $i1 goto label4;

     label6:
        return;
    }

    public final boolean getFoundLast()
    {
        org.apache.xpath.axes.LocPathIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        return $z0;
    }

    public final org.apache.xpath.XPathContext getXPathContext()
    {
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.XPathContext $r1;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        return $r1;
    }

    public final int getContext()
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        return $i0;
    }

    public final int getCurrentContextNode()
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode>;

        return $i0;
    }

    public final void setCurrentContextNode(int)
    {
        int i0;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        i0 := @parameter0: int;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_currentContextNode> = i0;

        return;
    }

    public final org.apache.xml.utils.PrefixResolver getPrefixResolver()
    {
        org.apache.xpath.ExpressionNode $r3;
        org.apache.xml.utils.PrefixResolver $r1, $r2, $r4;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver m_prefixResolver>;

        if null != $r1 goto label1;

        $r3 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode getExpressionOwner()>();

        $r4 = (org.apache.xml.utils.PrefixResolver) $r3;

        r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver m_prefixResolver> = $r4;

     label1:
        $r2 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.utils.PrefixResolver m_prefixResolver>;

        return $r2;
    }

    public void callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor)
    {
        org.apache.xpath.XPathVisitor r0;
        org.apache.xpath.axes.LocPathIterator r2;
        org.apache.xpath.ExpressionOwner r1;
        boolean $z0;

        r2 := @this: org.apache.xpath.axes.LocPathIterator;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r0 := @parameter1: org.apache.xpath.XPathVisitor;

        $z0 = virtualinvoke r0.<org.apache.xpath.XPathVisitor: boolean visitLocationPath(org.apache.xpath.ExpressionOwner,org.apache.xpath.axes.LocPathIterator)>(r1, r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.XPathVisitor: boolean visitStep(org.apache.xpath.ExpressionOwner,org.apache.xpath.patterns.NodeTest)>(r1, r2);

        virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: void callPredicateVisitors(org.apache.xpath.XPathVisitor)>(r0);

     label1:
        return;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        return 1;
    }

    public int getAxis()
    {
        int $i1;
        org.apache.xpath.axes.LocPathIterator r0;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        $i1 = (int) -1;

        return $i1;
    }

    public int getLastPos(org.apache.xpath.XPathContext)
    {
        int $i0;
        org.apache.xpath.axes.LocPathIterator r0;
        org.apache.xpath.XPathContext r1;

        r0 := @this: org.apache.xpath.axes.LocPathIterator;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $i0 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int getLength()>();

        return $i0;
    }
}
