public class org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap extends java.lang.Object
{
    protected final org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock barrierLock;
    protected transient java.lang.Object lastWrite;
    public static final int DEFAULT_INITIAL_CAPACITY;
    private static final int MINIMUM_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    public static final float DEFAULT_LOAD_FACTOR;
    protected transient org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table;
    protected transient int count;
    protected int threshold;
    protected float loadFactor;
    private java.lang.ref.ReferenceQueue queue;
    private static final org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference DUMMY_REF;

    protected final void recordModification(java.lang.Object)
    {
        java.lang.Throwable $r3;
        java.lang.Object r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock $r1;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock barrierLock>;

        entermonitor $r1;

     label1:
        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.Object lastWrite> = r2;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected final org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] getTableForReading()
    {
        java.lang.Throwable $r3;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] $r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock $r1;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        $r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock barrierLock>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int p2capacity(int)
    {
        int i0, i1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        i0 := @parameter0: int;

        if i0 > 1073741824 goto label1;

        if i0 >= 0 goto label2;

     label1:
        i1 = 1073741824;

        goto label4;

     label2:
        i1 = 4;

     label3:
        if i1 >= i0 goto label4;

        i1 = i1 << 1;

        goto label3;

     label4:
        return i1;
    }

    private static int hash(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = $i0 << 7;

        $i3 = $i1 - $i0;

        $i2 = $i0 >>> 9;

        $i5 = $i3 + $i2;

        $i4 = $i0 >>> 17;

        $i6 = $i5 + $i4;

        return $i6;
    }

    protected boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r2;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(int, float)
    {
        java.lang.ref.ReferenceQueue $r12;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock $r9;
        byte $b0;
        java.lang.StringBuffer $r6, $r7, $r10;
        int i1, $i2, $i3, $i4;
        java.lang.String $r8;
        java.lang.IllegalArgumentException $r11;
        float f0, $f1, $f2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] $r2;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        i1 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r9 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock;

        specialinvoke $r9.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock: void <init>()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$BarrierLock barrierLock> = $r9;

        $b0 = f0 cmpg 0.0F;

        $i4 = (int) $b0;

        if $i4 > 0 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal Load factor: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>(f0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r11;

     label1:
        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: float loadFactor> = f0;

        $i2 = specialinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int p2capacity(int)>(i1);

        $r2 = newarray (org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)[$i2];

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table> = $r2;

        $f1 = (float) $i2;

        $f2 = $f1 * f0;

        $i3 = (int) $f2;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int threshold> = $i3;

        $r12 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r12.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue> = $r12;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    public void <init>()
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        specialinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void <init>(int,float)>(32, 0.75F);

        return;
    }

    public synchronized int size()
    {
        int $i0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        $i0 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        return $i0;
    }

    public synchronized boolean isEmpty()
    {
        int $i0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        $i0 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r10;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean $z0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry $r6, $r8, $r9, r12, r13;
        java.lang.Object r0, $r2, $r3;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] $r7, r11, $r14;

        r1 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int hash(java.lang.Object)>(r0);

        r11 = r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        $i1 = lengthof r11;

        $i2 = $i1 - 1;

        i10 = $i0 & $i2;

        r12 = r11[i10];

        r13 = r12;

     label01:
        if r13 != null goto label03;

        $r7 = virtualinvoke r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] getTableForReading()>();

        if r11 != $r7 goto label02;

        $r9 = r11[i10];

        if r12 != $r9 goto label02;

        return null;

     label02:
        r11 = $r7;

        $i7 = lengthof $r7;

        $i8 = $i7 - 1;

        $i9 = $i0 & $i8;

        i10 = $i9;

        $r8 = $r7[$i9];

        r12 = $r8;

        r13 = $r8;

        goto label01;

     label03:
        $r2 = virtualinvoke r13.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $r3 = virtualinvoke r13.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        $i3 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r13);

        if $i3 != $i0 goto label11;

        $z0 = virtualinvoke r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: boolean eq(java.lang.Object,java.lang.Object)>(r0, $r2);

        if $z0 == 0 goto label11;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r13);

        $r5 = <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference DUMMY_REF>;

        if $r4 == $r5 goto label04;

        return $r3;

     label04:
        entermonitor r1;

     label05:
        if $r2 != null goto label06;

        if $r3 != null goto label06;

        specialinvoke r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void expungeStaleEntries()>();

     label06:
        $r14 = r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        r11 = $r14;

        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        exitmonitor r1;

     label09:
        throw $r10;

     label10:
        $i4 = lengthof $r14;

        $i5 = $i4 - 1;

        $i6 = $i0 & $i5;

        i10 = $i6;

        $r6 = $r14[$i6];

        r12 = $r6;

        r13 = $r6;

        goto label12;

     label11:
        r13 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r13);

     label12:
        goto label01;

        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r14;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r8;
        java.lang.ref.ReferenceQueue $r11;
        java.lang.NullPointerException $r13;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r4, $r7, $r9, $r10, r15;
        java.lang.Object r0, r1, $r6, $r12, $r16;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r2;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r3, $r5;

        r2 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label01;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>()>();

        throw $r13;

     label01:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int hash(java.lang.Object)>(r1);

        r3 = r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        $i1 = lengthof r3;

        $i2 = $i1 - 1;

        i3 = $i0 & $i2;

        r4 = r3[i3];

        r15 = r4;

     label02:
        if r15 == null goto label04;

        $i7 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        if $i7 != $i0 goto label03;

        $r12 = virtualinvoke r15.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: boolean eq(java.lang.Object,java.lang.Object)>(r1, $r12);

        if $z0 == 0 goto label03;

        goto label04;

     label03:
        r15 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        goto label02;

     label04:
        entermonitor r2;

     label05:
        $r5 = r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        if r3 != $r5 goto label11;

        if r15 != null goto label09;

        $r9 = r3[i3];

        if r4 != $r9 goto label11;

        $r10 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r11 = r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.ref.ReferenceQueue)>($i0, r1, r0, r4, $r11);

        r3[i3] = $r10;

        $i4 = r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        $i5 = $i4 + 1;

        r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count> = $i5;

        $i6 = r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int threshold>;

        if $i5 < $i6 goto label06;

        virtualinvoke r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void rehash()>();

        goto label07;

     label06:
        virtualinvoke r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>($r10);

     label07:
        exitmonitor r2;

     label08:
        return null;

     label09:
        $r6 = virtualinvoke r15.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        $r7 = r3[i3];

        if r4 != $r7 goto label11;

        if $r6 == null goto label11;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        virtualinvoke r15.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>($r8);

        exitmonitor r2;

     label10:
        return $r6;

     label11:
        $r16 = virtualinvoke r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.Object sput(java.lang.Object,java.lang.Object,int)>(r1, r0, $i0);

        exitmonitor r2;

     label12:
        return $r16;

     label13:
        $r14 := @caughtexception;

        exitmonitor r2;

     label14:
        throw $r14;

        catch java.lang.Throwable from label05 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    protected java.lang.Object sput(java.lang.Object, java.lang.Object, int)
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r6;
        java.lang.ref.ReferenceQueue $r9;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r2, $r7, r10;
        java.lang.Object r3, $r4, $r5, r8;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r1;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r3 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        specialinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void expungeStaleEntries()>();

        r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        r2 = r1[i3];

        r10 = r2;

     label1:
        if r10 != null goto label4;

        $r7 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $r9 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r7.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.ref.ReferenceQueue)>(i0, r3, r8, r2, $r9);

        r1[i3] = $r7;

        $i5 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        $i6 = $i5 + 1;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count> = $i6;

        $i7 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int threshold>;

        if $i6 < $i7 goto label2;

        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void rehash()>();

        goto label3;

     label2:
        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>($r7);

     label3:
        return null;

     label4:
        $i4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r10);

        if $i4 != i0 goto label5;

        $r4 = virtualinvoke r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: boolean eq(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        $r6 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r10);

        virtualinvoke r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>($r6);

        return $r5;

     label5:
        r10 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r10);

        goto label1;
    }

    protected void rehash()
    {
        java.lang.ref.ReferenceQueue $r8;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, i9, i10, i11, i12;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r3, $r4, $r5, $r9, r10, r11, r12;
        float $f0, $f1, $f2;
        java.lang.Object $r6, $r7;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r1, r2;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        i0 = lengthof r1;

        if i0 < 1073741824 goto label1;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int threshold> = 2147483647;

        return;

     label1:
        i1 = i0 << 1;

        i2 = i1 - 1;

        $f1 = (float) i1;

        $f0 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: float loadFactor>;

        $f2 = $f1 * $f0;

        $i3 = (int) $f2;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int threshold> = $i3;

        r2 = newarray (org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)[i1];

        i9 = 0;

     label2:
        if i9 >= i0 goto label9;

        r3 = r1[i9];

        if r3 == null goto label8;

        $i4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r3);

        i5 = $i4 & i2;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r3);

        if $r4 != null goto label3;

        r2[i5] = r3;

        goto label8;

     label3:
        r10 = r3;

        i10 = i5;

        r11 = $r4;

     label4:
        if r11 == null goto label6;

        $i8 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r11);

        i11 = $i8 & i2;

        if i11 == i10 goto label5;

        i10 = i11;

        r10 = r11;

     label5:
        r11 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r11);

        goto label4;

     label6:
        r2[i10] = r10;

        r12 = r3;

     label7:
        if r12 == r10 goto label8;

        $i6 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r12);

        i12 = $i6 & i2;

        $r5 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $i7 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r12);

        $r6 = virtualinvoke r12.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $r7 = virtualinvoke r12.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        $r9 = r2[i12];

        $r8 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r5.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.ref.ReferenceQueue)>($i7, $r6, $r7, $r9, $r8);

        r2[i12] = $r5;

        r12 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r12);

        goto label7;

     label8:
        i9 = i9 + 1;

        goto label2;

     label9:
        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table> = r2;

        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>(r2);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.lang.Throwable $r13;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r9;
        java.lang.ref.ReferenceQueue $r10;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef $r8;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r3, $r6, $r7, $r11, r14, r15, r16;
        java.lang.Object r0, $r5, $r12, $r17;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r2, $r4;

        r1 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int hash(java.lang.Object)>(r0);

        r2 = r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        i3 = $i0 & $i2;

        r3 = r2[i3];

        r14 = r3;

     label01:
        if r14 == null goto label03;

        $i7 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r14);

        if $i7 != $i0 goto label02;

        $r12 = virtualinvoke r14.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: boolean eq(java.lang.Object,java.lang.Object)>(r0, $r12);

        if $z0 == 0 goto label02;

        goto label03;

     label02:
        r14 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r14);

        goto label01;

     label03:
        entermonitor r1;

     label04:
        $r4 = r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        if r2 != $r4 goto label10;

        if r14 != null goto label06;

        $r11 = r2[i3];

        if r3 != $r11 goto label10;

        exitmonitor r1;

     label05:
        return null;

     label06:
        $r5 = virtualinvoke r14.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        $r6 = r2[i3];

        if r3 != $r6 goto label10;

        if $r5 == null goto label10;

        virtualinvoke r14.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>(null);

        $i4 = r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        $i5 = $i4 - 1;

        r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count> = $i5;

        r15 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r14);

        r16 = r3;

     label07:
        if r16 == r14 goto label08;

        $r7 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $i6 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r16);

        $r8 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef access$300(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r16);

        $r9 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r16);

        $r10 = r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r7.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.ref.ReferenceQueue)>($i6, $r8, $r9, r15, $r10);

        r15 = $r7;

        r16 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r16);

        goto label07;

     label08:
        r2[i3] = r15;

        virtualinvoke r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>(r15);

        exitmonitor r1;

     label09:
        return $r5;

     label10:
        $r17 = virtualinvoke r1.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.Object sremove(java.lang.Object,int)>(r0, $i0);

        exitmonitor r1;

     label11:
        return $r17;

     label12:
        $r13 := @caughtexception;

        exitmonitor r1;

     label13:
        throw $r13;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected java.lang.Object sremove(java.lang.Object, int)
    {
        java.lang.ref.ReferenceQueue $r9;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r2, $r6, r10, r11, r12;
        java.lang.Object r3, $r4, $r5, $r7, $r8;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r1;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void expungeStaleEntries()>();

        r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        r2 = r1[i3];

        r10 = r2;

     label1:
        if r10 == null goto label5;

        $i4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r10);

        if $i4 != i0 goto label4;

        $r4 = virtualinvoke r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $z0 = virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: boolean eq(java.lang.Object,java.lang.Object)>(r3, $r4);

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        virtualinvoke r10.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>(null);

        $i5 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        $i6 = $i5 - 1;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count> = $i6;

        r11 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r10);

        r12 = r2;

     label2:
        if r12 == r10 goto label3;

        $r6 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $i7 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r12);

        $r7 = virtualinvoke r12.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getKey()>();

        $r8 = virtualinvoke r12.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object getValue()>();

        $r9 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r6.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry,java.lang.ref.ReferenceQueue)>($i7, $r7, $r8, r11, $r9);

        r11 = $r6;

        r12 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r12);

        goto label2;

     label3:
        r1[i3] = r11;

        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>(r11);

        return $r5;

     label4:
        r10 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r10);

        goto label1;

     label5:
        return null;
    }

    public synchronized void clear()
    {
        int $i0, i1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r1;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry r2;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label4;

        r2 = r1[i1];

     label2:
        if r2 == null goto label3;

        virtualinvoke r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>(null);

        r2 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r2);

        goto label2;

     label3:
        r1[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label4:
        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count> = 0;

        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>(r1);

        return;
    }

    private void expungeStaleEntries()
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r7, $r8;
        java.lang.ref.ReferenceQueue $r10;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef $r3, $r4, $r6, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry $r2, $r5, $r9, r13, r14, r15;
        java.lang.ref.Reference $r11;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap r0;
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] r1;

        r0 := @this: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap;

        r1 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry[] table>;

     label1:
        $r10 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: java.lang.ref.ReferenceQueue queue>;

        $r11 = virtualinvoke $r10.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        $r12 = (org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef) $r11;

        if $r12 == null goto label9;

        $r2 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$400(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef)>($r12);

        if $r2 != null goto label2;

        goto label1;

     label2:
        staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$402(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>($r12, null);

        $r3 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef access$300(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>($r2);

        if $r3 == $r12 goto label3;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>($r2);

        if $r8 == $r12 goto label3;

        goto label1;

     label3:
        $i0 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>($r2);

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        $i6 = $i0 & $i2;

        $r9 = r1[$i6];

        r13 = $r9;

     label4:
        if r13 == null goto label8;

        if r13 != $r2 goto label7;

        $r4 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef access$300(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>($r2);

        virtualinvoke $r4.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef: void clear()>();

        virtualinvoke $r2.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: java.lang.Object setValue(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference)>(null);

        $i3 = r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count>;

        $i4 = $i3 - 1;

        r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int count> = $i4;

        r14 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r13);

        r15 = $r9;

     label5:
        if r15 == r13 goto label6;

        $r5 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry;

        $i5 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: int access$000(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        $r6 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef access$300(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$100(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        specialinvoke $r5.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: void <init>(int,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$SoftRef,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference,org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>($i5, $r6, $r7, r14);

        r14 = $r5;

        r15 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r15);

        goto label5;

     label6:
        r1[$i6] = r14;

        virtualinvoke r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: void recordModification(java.lang.Object)>(r14);

        goto label8;

     label7:
        r13 = staticinvoke <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry access$200(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Entry)>(r13);

        goto label4;

     label8:
        goto label1;

     label9:
        return;
    }

    static org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference access$600()
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference $r0;

        $r0 = <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference DUMMY_REF>;

        return $r0;
    }

    static void <clinit>()
    {
        org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$DummyRef $r0;

        <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int MAXIMUM_CAPACITY> = 1073741824;

        <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int MINIMUM_CAPACITY> = 4;

        <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: int DEFAULT_INITIAL_CAPACITY> = 32;

        $r0 = new org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$DummyRef;

        specialinvoke $r0.<org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$DummyRef: void <init>(org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$1)>(null);

        <org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap: org.codehaus.groovy.runtime.metaclass.MemoryAwareConcurrentReadMap$Reference DUMMY_REF> = $r0;

        return;
    }
}
