public class org.apache.xml.dtm.ref.CustomStringPool extends org.apache.xml.dtm.ref.DTMStringPool
{
    final java.util.Hashtable m_stringToInt;
    public static final int NULL;

    public void <init>()
    {
        org.apache.xml.dtm.ref.CustomStringPool r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.xml.dtm.ref.CustomStringPool;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMStringPool: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.dtm.ref.CustomStringPool: java.util.Hashtable m_stringToInt> = $r1;

        return;
    }

    public void removeAllElements()
    {
        org.apache.xml.dtm.ref.CustomStringPool r0;
        java.util.Vector $r1;
        java.util.Hashtable $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.CustomStringPool;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();

        $r2 = r0.<org.apache.xml.dtm.ref.CustomStringPool: java.util.Hashtable m_stringToInt>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.CustomStringPool: java.util.Hashtable m_stringToInt>;

        virtualinvoke $r3.<java.util.Hashtable: void clear()>();

     label1:
        return;
    }

    public java.lang.String indexToString(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.CustomStringPool r0;
        java.util.Vector $r1;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xml.dtm.ref.CustomStringPool;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public int stringToIndex(java.lang.String)
    {
        java.lang.Integer r8, $r9;
        org.apache.xml.dtm.ref.CustomStringPool r1;
        java.util.Vector $r4, $r6;
        int $i0, $i1, $i3;
        java.lang.Object $r3;
        java.lang.String r0;
        java.util.Hashtable $r2, $r7;

        r1 := @this: org.apache.xml.dtm.ref.CustomStringPool;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r2 = r1.<org.apache.xml.dtm.ref.CustomStringPool: java.util.Hashtable m_stringToInt>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (java.lang.Integer) $r3;

        if r8 != null goto label2;

        $r4 = r1.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r0);

        $r9 = new java.lang.Integer;

        $r6 = r1.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i1);

        r8 = $r9;

        $r7 = r1.<org.apache.xml.dtm.ref.CustomStringPool: java.util.Hashtable m_stringToInt>;

        virtualinvoke $r7.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r9);

     label2:
        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.CustomStringPool: int NULL> = -1;

        return;
    }
}
