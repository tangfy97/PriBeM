public class com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain extends java.lang.Object implements com.hp.hpl.jena.sparql.sse.lang.ParseHandler
{
    private com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack listStack;
    private com.hp.hpl.jena.sparql.sse.Item currentItem;
    private int depth;
    private com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodeLabels;
    private com.hp.hpl.jena.sparql.core.VarAlloc varAlloc;
    private com.hp.hpl.jena.sparql.core.VarAlloc varAllocND;
    private com.hp.hpl.jena.sparql.core.VarAlloc varAllocIntern;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.core.VarAlloc $r3, $r4, $r5;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack $r1;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack listStack> = $r1;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.Item currentItem> = null;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth> = 0;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.sparql.util.LabelToNodeMap createBNodeMap()>();

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodeLabels> = $r2;

        $r3 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>("_");

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc> = $r3;

        $r4 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>("?");

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.core.VarAlloc varAllocND> = $r4;

        $r5 = new com.hp.hpl.jena.sparql.core.VarAlloc;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.core.VarAlloc: void <init>(java.lang.String)>(".");

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.core.VarAlloc varAllocIntern> = $r5;

        return;
    }

    public com.hp.hpl.jena.sparql.sse.Item getItem()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.Item $r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.Item currentItem>;

        return $r1;
    }

    public void parseStart()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth> = 0;

        return;
    }

    public void parseFinish()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        int $i0, $i1, $i3;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.String $r5;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        $i0 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth>;

        if $i0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stack error: depth =");

        $i1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at end of parse run");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>(r0, $r5);

     label1:
        $i3 = (int) -1;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth> = $i3;

        return;
    }

    public void listStart(int, int)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r1;
        com.hp.hpl.jena.sparql.sse.ItemList $r0;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r2;

        r1 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.sparql.sse.ItemList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.ItemList: void <init>(int,int)>(i0, i1);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void pushList(com.hp.hpl.jena.sparql.sse.ItemList)>($r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList(com.hp.hpl.jena.sparql.sse.ItemList)>($r0);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void setCurrentItem(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return;
    }

    public void listFinish(int, int)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.ItemList $r1;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.ItemList popList()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createList(com.hp.hpl.jena.sparql.sse.ItemList)>($r1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void listAdd(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return;
    }

    protected void setCurrentItem(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.Item r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.Item currentItem> = r1;

        return;
    }

    protected void listAdd(com.hp.hpl.jena.sparql.sse.Item)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack $r1;
        com.hp.hpl.jena.sparql.sse.ItemList $r3;
        com.hp.hpl.jena.sparql.sse.Item r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        r2 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack listStack>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void setCurrentItem(com.hp.hpl.jena.sparql.sse.Item)>(r2);

        return;

     label1:
        if r2 == null goto label2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.ItemList currentList()>();

        virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.ItemList: void add(com.hp.hpl.jena.sparql.sse.Item)>(r2);

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void setCurrentItem(com.hp.hpl.jena.sparql.sse.Item)>(r2);

        return;
    }

    public void emitSymbol(int, int, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createSymbol(java.lang.String,int,int)>(r1, i0, i1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void listAdd(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return;
    }

    public void emitVar(int, int, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r1;
        com.hp.hpl.jena.sparql.sse.Item $r6;
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.core.VarAlloc $r2, $r3, $r4;
        int i0, i1;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        $r4 = r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.core.VarAlloc varAlloc>;

        r5 = virtualinvoke $r4.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        goto label4;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("?");

        if $z1 == 0 goto label2;

        $r3 = r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.core.VarAlloc varAllocND>;

        r5 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        goto label4;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z2 == 0 goto label3;

        $r2 = r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.core.VarAlloc varAllocIntern>;

        r5 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.VarAlloc: com.hp.hpl.jena.sparql.core.Var allocVar()>();

        goto label4;

     label3:
        r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r0);

     label4:
        $r6 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node,int,int)>(r5, i0, i1);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void listAdd(com.hp.hpl.jena.sparql.sse.Item)>($r6);

        return;
    }

    public void emitLiteral(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r5;
        com.hp.hpl.jena.datatypes.TypeMapper $r1;
        com.hp.hpl.jena.sparql.sse.Item $r4;
        com.hp.hpl.jena.graph.Node r8;
        com.hp.hpl.jena.datatypes.RDFDatatype $r2;
        int i0, i1;
        java.lang.String r0, r3, r6, r7;

        r5 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.String;

        r0 := @parameter5: java.lang.String;

        if r7 != null goto label1;

        if r0 == null goto label3;

     label1:
        if r0 == null goto label2;

        r7 = virtualinvoke r5.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: java.lang.String resolvePrefixedName(java.lang.String,int,int)>(r0, i0, i1);

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getSafeTypeByName(java.lang.String)>(r7);

        r8 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r3, null, $r2);

        goto label4;

     label3:
        r8 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String,java.lang.String,com.hp.hpl.jena.datatypes.RDFDatatype)>(r3, r6, null);

     label4:
        $r4 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node,int,int)>(r8, i0, i1);

        virtualinvoke r5.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void listAdd(com.hp.hpl.jena.sparql.sse.Item)>($r4);

        return;
    }

    public final void emitBNode(int, int, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r1;
        com.hp.hpl.jena.sparql.sse.Item $r3;
        com.hp.hpl.jena.graph.Node r4;
        int i0, i1;
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.LabelToNodeMap $r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        r4 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        goto label2;

     label1:
        $r2 = r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.util.LabelToNodeMap bNodeLabels>;

        r4 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.LabelToNodeMap: com.hp.hpl.jena.graph.Node asNode(java.lang.String)>(r0);

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node,int,int)>(r4, i0, i1);

        virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void listAdd(com.hp.hpl.jena.sparql.sse.Item)>($r3);

        return;
    }

    public void emitIRI(int, int, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r3;
        int i0, i1;
        com.hp.hpl.jena.sparql.sse.Item $r2;
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;

        r3 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createURI(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.sse.Item: com.hp.hpl.jena.sparql.sse.Item createNode(com.hp.hpl.jena.graph.Node,int,int)>($r1, i0, i1);

        virtualinvoke r3.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void listAdd(com.hp.hpl.jena.sparql.sse.Item)>($r2);

        return;
    }

    public void emitPName(int, int, java.lang.String)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        int i0, i1;
        java.lang.String r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: java.lang.String resolvePrefixedName(java.lang.String,int,int)>(r1, i0, i1);

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void emitIRI(int,int,java.lang.String)>(i0, i1, $r2);

        return;
    }

    protected com.hp.hpl.jena.sparql.sse.ItemList currentList()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack $r1;
        com.hp.hpl.jena.sparql.sse.ItemList $r2;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack listStack>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack: com.hp.hpl.jena.sparql.sse.ItemList getCurrent()>();

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.sse.ItemList popList()
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack $r1;
        com.hp.hpl.jena.sparql.sse.ItemList $r2;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        $i0 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth>;

        $i1 = $i0 - 1;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth> = $i1;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void setCurrentItem(com.hp.hpl.jena.sparql.sse.Item)>(null);

        $r1 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack listStack>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack: com.hp.hpl.jena.sparql.sse.ItemList pop()>();

        return $r2;
    }

    protected void pushList(com.hp.hpl.jena.sparql.sse.ItemList)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r0;
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack $r2;
        com.hp.hpl.jena.sparql.sse.ItemList r1;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.ItemList;

        $r2 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack listStack>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain$ListStack: void push(com.hp.hpl.jena.sparql.sse.ItemList)>(r1);

        $i0 = r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: int depth> = $i1;

        return;
    }

    protected java.lang.String resolvePrefixedName(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain r5;
        int i0, i1;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String r2, $r4;

        r5 := @this: com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pname:");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    protected static void throwException(java.lang.String, int, int)
    {
        com.hp.hpl.jena.sparql.sse.SSEParseException $r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r8;
        java.lang.String r7, $r9;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = new com.hp.hpl.jena.sparql.sse.SSEParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.sparql.sse.SSEParseException: void <init>(java.lang.String,int,int)>($r9, i0, i1);

        throw $r0;
    }

    protected static void throwException(java.lang.String, com.hp.hpl.jena.sparql.sse.ItemLocation)
    {
        com.hp.hpl.jena.sparql.sse.ItemLocation r1;
        int $i0, $i1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.sparql.sse.ItemLocation;

        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemLocation: int getLine()>();

        $i1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.sse.ItemLocation: int getColumn()>();

        staticinvoke <com.hp.hpl.jena.sparql.sse.lang.ParseHandlerPlain: void throwException(java.lang.String,int,int)>(r0, $i0, $i1);

        return;
    }
}
