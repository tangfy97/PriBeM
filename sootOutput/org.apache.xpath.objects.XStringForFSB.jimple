public class org.apache.xpath.objects.XStringForFSB extends org.apache.xpath.objects.XString
{
    int m_start;
    int m_length;
    protected java.lang.String m_strCache;
    protected int m_hash;

    public void <init>(org.apache.xml.utils.FastStringBuffer, int, int)
    {
        org.apache.xml.utils.FastStringBuffer r1;
        int i0, i1;
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.objects.XString: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache> = null;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_hash> = 0;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_start> = i0;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_length> = i1;

        if null != r1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_FASTSTRINGBUFFER_CANNOT_BE_NULL", null);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    private void <init>(java.lang.String)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>(r1);

        r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache> = null;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_hash> = 0;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_FSB_CANNOT_TAKE_STRING", null);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public org.apache.xml.utils.FastStringBuffer fsb()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.Object $r1;
        org.apache.xml.utils.FastStringBuffer $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = r0.<org.apache.xpath.objects.XObject: java.lang.Object m_obj>;

        $r2 = (org.apache.xml.utils.FastStringBuffer) $r1;

        return $r2;
    }

    public void appendToFsb(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xpath.objects.XStringForFSB r1;
        java.lang.String $r2;
        org.apache.xml.utils.FastStringBuffer r0;

        r1 := @this: org.apache.xpath.objects.XStringForFSB;

        r0 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        $r2 = virtualinvoke r1.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        virtualinvoke r0.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r2);

        return;
    }

    public boolean hasString()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache>;

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object object()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        return $r1;
    }

    public java.lang.String str()
    {
        org.apache.xml.utils.FastStringBuffer $r3;
        int $i0, $i1;
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache>;

        if null != $r1 goto label1;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i1, $i0);

        r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache> = $r4;

     label1:
        $r2 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache>;

        return $r2;
    }

    public void dispatchCharactersEvents(org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.FastStringBuffer $r1;
        int $i0, $i1;
        org.apache.xpath.objects.XStringForFSB r0;
        org.xml.sax.ContentHandler r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r2 := @parameter0: org.xml.sax.ContentHandler;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r2, $i1, $i0);

        return;
    }

    public void dispatchAsComment(org.xml.sax.ext.LexicalHandler) throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler r2;
        org.apache.xml.utils.FastStringBuffer $r1;
        int $i0, $i1;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r2 := @parameter0: org.xml.sax.ext.LexicalHandler;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: void sendSAXComment(org.xml.sax.ext.LexicalHandler,int,int)>(r2, $i1, $i0);

        return;
    }

    public int length()
    {
        int $i0;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        return $i0;
    }

    public char charAt(int)
    {
        org.apache.xml.utils.FastStringBuffer $r1;
        int i0, $i1, $i2;
        org.apache.xpath.objects.XStringForFSB r0;
        char $c3;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i2 = $i1 + i0;

        $c3 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>($i2);

        return $c3;
    }

    public void getChars(int, int, char[], int)
    {
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, i13, i14, i15;
        org.apache.xml.utils.FastStringBuffer $r2;
        char $c10;
        char[] r1;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: char[];

        i3 := @parameter3: int;

        i13 = i0 - i1;

        $i2 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i13 <= $i2 goto label1;

        i13 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

     label1:
        $i4 = lengthof r1;

        $i5 = $i4 - i3;

        if i13 <= $i5 goto label2;

        $i11 = lengthof r1;

        i13 = $i11 - i3;

     label2:
        $i6 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i7 = i1 + $i6;

        $i12 = $i7 + i13;

        i14 = i3;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i8 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i15 = i1 + $i8;

        goto label4;

     label3:
        $i9 = i14;

        i14 = i14 + 1;

        $c10 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i15);

        r1[$i9] = $c10;

        i15 = i15 + 1;

     label4:
        if i15 < $i12 goto label3;

        return;
    }

    public boolean equals(org.apache.xml.utils.XMLString)
    {
        org.apache.xml.utils.FastStringBuffer $r2;
        char $c2, $c3;
        org.apache.xml.utils.XMLString r1;
        int $i0, $i1, i4, i5, i6, $i7, $i8, $i10;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        if r0 != r1 goto label1;

        return 1;

     label1:
        i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i0 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        if i4 != $i0 goto label5;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i6 = 0;

        goto label4;

     label2:
        $c2 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i5);

        $c3 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i6);

        $i7 = (int) $c2;

        $i8 = (int) $c3;

        if $i7 == $i8 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        i6 = i6 + 1;

     label4:
        $i1 = i4;

        $i10 = (int) -1;

        i4 = i4 + $i10;

        if $i1 != 0 goto label2;

        return 1;

     label5:
        return 0;
    }

    public boolean equals(org.apache.xpath.objects.XObject)
    {
        int $i0, $i1, $i2, i5, i6, i7, $i8, $i9, $i11;
        java.lang.String $r2;
        boolean $z0;
        org.apache.xml.utils.FastStringBuffer $r3;
        char $c3, $c4;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i0 = virtualinvoke r1.<org.apache.xpath.objects.XObject: int getType()>();

        if $i0 != 2 goto label2;

        $z0 = virtualinvoke r1.<org.apache.xpath.objects.XObject: boolean equals(org.apache.xpath.objects.XObject)>(r0);

        return $z0;

     label2:
        $r2 = virtualinvoke r1.<org.apache.xpath.objects.XObject: java.lang.String str()>();

        i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i5 != $i1 goto label6;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i6 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i7 = 0;

        goto label5;

     label3:
        $c3 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i6);

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i7);

        $i8 = (int) $c3;

        $i9 = (int) $c4;

        if $i8 == $i9 goto label4;

        return 0;

     label4:
        i6 = i6 + 1;

        i7 = i7 + 1;

     label5:
        $i2 = i5;

        $i11 = (int) -1;

        i5 = i5 + $i11;

        if $i2 != 0 goto label3;

        return 1;

     label6:
        return 0;
    }

    public boolean equals(java.lang.String)
    {
        org.apache.xml.utils.FastStringBuffer $r2;
        char $c2, $c3;
        int $i0, $i1, i4, i5, i6, $i7, $i8, $i10;
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i4 != $i0 goto label4;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i6 = 0;

        goto label3;

     label1:
        $c2 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i5);

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        $i7 = (int) $c2;

        $i8 = (int) $c3;

        if $i7 == $i8 goto label2;

        return 0;

     label2:
        i5 = i5 + 1;

        i6 = i6 + 1;

     label3:
        $i1 = i4;

        $i10 = (int) -1;

        i4 = i4 + $i10;

        if $i1 != 0 goto label1;

        return 1;

     label4:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.xpath.objects.XStringForFSB r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r1 := @this: org.apache.xpath.objects.XStringForFSB;

        r0 := @parameter0: java.lang.Object;

        if null != r0 goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.apache.xpath.objects.XNumber;

        if $z0 == 0 goto label2;

        $z6 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z6;

     label2:
        $z1 = r0 instanceof org.apache.xpath.objects.XNodeSet;

        if $z1 == 0 goto label3;

        $z5 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z5;

     label3:
        $z2 = r0 instanceof org.apache.xpath.objects.XStringForFSB;

        if $z2 == 0 goto label4;

        $z4 = virtualinvoke r1.<org.apache.xpath.objects.XStringForFSB: boolean equals(org.apache.xml.utils.XMLString)>(r1);

        return $z4;

     label4:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z3 = virtualinvoke r1.<org.apache.xpath.objects.XStringForFSB: boolean equals(java.lang.String)>($r2);

        return $z3;
    }

    public boolean equalsIgnoreCase(java.lang.String)
    {
        int $i0, $i1;
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != $i1 goto label1;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int compareTo(org.apache.xml.utils.XMLString)
    {
        org.apache.xml.utils.XMLString r1;
        int i0, $i1, $i2, $i5, $i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i15;
        org.apache.xml.utils.FastStringBuffer $r2;
        char $c3, $c4;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i1 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        i7 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i8 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i9 = 0;

        goto label3;

     label1:
        $c3 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i8);

        $c4 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i9);

        $i10 = (int) $c3;

        $i11 = (int) $c4;

        if $i10 == $i11 goto label2;

        $i12 = (int) $c3;

        $i13 = (int) $c4;

        $i5 = $i12 - $i13;

        return $i5;

     label2:
        i8 = i8 + 1;

        i9 = i9 + 1;

     label3:
        $i2 = i7;

        $i15 = (int) -1;

        i7 = i7 + $i15;

        if $i2 != 0 goto label1;

        $i6 = i0 - $i1;

        return $i6;
    }

    public int compareToIgnoreCase(org.apache.xml.utils.XMLString)
    {
        org.apache.xml.utils.XMLString r1;
        int i0, $i1, $i2, $i7, $i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i17;
        org.apache.xml.utils.FastStringBuffer $r2;
        char $c3, $c4, $c5, $c6;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i1 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i10 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i11 = 0;

        goto label3;

     label1:
        $c3 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i10);

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $c5 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i11);

        $c6 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        $i12 = (int) $c4;

        $i13 = (int) $c6;

        if $i12 == $i13 goto label2;

        $i14 = (int) $c4;

        $i15 = (int) $c6;

        $i7 = $i14 - $i15;

        return $i7;

     label2:
        i10 = i10 + 1;

        i11 = i11 + 1;

     label3:
        $i2 = i9;

        $i17 = (int) -1;

        i9 = i9 + $i17;

        if $i2 != 0 goto label1;

        $i8 = i0 - $i1;

        return $i8;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $i0 = specialinvoke r0.<org.apache.xpath.objects.XString: int hashCode()>();

        return $i0;
    }

    public boolean startsWith(org.apache.xml.utils.XMLString, int)
    {
        org.apache.xml.utils.XMLString r2;
        int i0, $i1, $i2, $i3, $i4, i7, i8, i9, $i10, $i11, $i13;
        org.apache.xml.utils.FastStringBuffer $r1;
        char $c5, $c6;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r2 := @parameter0: org.apache.xml.utils.XMLString;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i7 = $i1 + i0;

        i8 = 0;

        $i2 = interfaceinvoke r2.<org.apache.xml.utils.XMLString: int length()>();

        i9 = $i2;

        if i0 < 0 goto label1;

        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i4 = $i3 - $i2;

        if i0 <= $i4 goto label4;

     label1:
        return 0;

     label2:
        $c5 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i7);

        $c6 = interfaceinvoke r2.<org.apache.xml.utils.XMLString: char charAt(int)>(i8);

        $i10 = (int) $c5;

        $i11 = (int) $c6;

        if $i10 == $i11 goto label3;

        return 0;

     label3:
        i7 = i7 + 1;

        i8 = i8 + 1;

     label4:
        $i13 = (int) -1;

        i9 = i9 + $i13;

        if i9 >= 0 goto label2;

        return 1;
    }

    public boolean startsWith(org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: boolean startsWith(org.apache.xml.utils.XMLString,int)>(r1, 0);

        return $z0;
    }

    public int indexOf(int)
    {
        int i0, $i1;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: int indexOf(int,int)>(i0, 0);

        return $i1;
    }

    public int indexOf(int, int)
    {
        int $i0, $i1, i2, $i3, $i4, i6, $i7, $i8, i9, i10, $i12, $i13, $i15;
        org.apache.xml.utils.FastStringBuffer $r1;
        char $c5;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i6 := @parameter0: int;

        i9 := @parameter1: int;

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        i2 = $i1 + $i0;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        if i9 >= 0 goto label1;

        i9 = 0;

        goto label2;

     label1:
        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i9 < $i3 goto label2;

        $i12 = (int) -1;

        return $i12;

     label2:
        $i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i10 = $i4 + i9;

        goto label5;

     label3:
        $c5 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i10);

        $i13 = (int) $c5;

        if $i13 != i6 goto label4;

        $i7 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i8 = i10 - $i7;

        return $i8;

     label4:
        i10 = i10 + 1;

     label5:
        if i10 < i2 goto label3;

        $i15 = (int) -1;

        return $i15;
    }

    public org.apache.xml.utils.XMLString substring(int)
    {
        org.apache.xml.utils.FastStringBuffer $r2;
        org.apache.xpath.objects.XString $r3;
        int i0, $i1, i2, $i3, i4;
        org.apache.xpath.objects.XStringForFSB r0, $r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        i2 = $i1 - i0;

        if i2 > 0 goto label1;

        $r3 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

        return $r3;

     label1:
        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i4 = $i3 + i0;

        $r1 = new org.apache.xpath.objects.XStringForFSB;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        specialinvoke $r1.<org.apache.xpath.objects.XStringForFSB: void <init>(org.apache.xml.utils.FastStringBuffer,int,int)>($r2, i4, i2);

        return $r1;
    }

    public org.apache.xml.utils.XMLString substring(int, int)
    {
        org.apache.xml.utils.FastStringBuffer $r2;
        org.apache.xpath.objects.XString $r3;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.xpath.objects.XStringForFSB r0, $r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i5 = i0 - i1;

        $i2 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i5 <= $i2 goto label1;

        i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

     label1:
        if i5 > 0 goto label2;

        $r3 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

        return $r3;

     label2:
        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i4 = $i3 + i1;

        $r1 = new org.apache.xpath.objects.XStringForFSB;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        specialinvoke $r1.<org.apache.xpath.objects.XStringForFSB: void <init>(org.apache.xml.utils.FastStringBuffer,int,int)>($r2, i4, i5);

        return $r1;
    }

    public org.apache.xml.utils.XMLString concat(java.lang.String)
    {
        org.apache.xpath.objects.XStringForFSB r1;
        java.lang.String $r2, r3, $r4;
        org.apache.xpath.objects.XString $r0;

        r1 := @this: org.apache.xpath.objects.XStringForFSB;

        r3 := @parameter0: java.lang.String;

        $r0 = new org.apache.xpath.objects.XString;

        $r2 = virtualinvoke r1.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>(r3);

        specialinvoke $r0.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>($r4);

        return $r0;
    }

    public org.apache.xml.utils.XMLString trim()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString $r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.XMLString fixWhiteSpace(boolean,boolean,boolean)>(1, 1, 0);

        return $r1;
    }

    private static boolean isSpace(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>(c0);

        return $z0;
    }

    public org.apache.xml.utils.XMLString fixWhiteSpace(boolean, boolean, boolean)
    {
        org.apache.xml.utils.XMLString $r4;
        org.apache.xml.utils.XMLStringFactory $r3;
        byte b15;
        boolean $z0, z1, z2, z3, z4, z5, z6, z7;
        org.apache.xml.utils.FastStringBuffer $r2;
        org.apache.xpath.objects.XStringForFSB r0;
        int $i0, $i1, i2, $i3, $i5, $i6, $i7, $i8, $i10, i12, i13, $i16, $i17, $i18, $i19, $i20, $i22, $i23;
        char $c4, $c9, $c11, c14;
        char[] r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        z3 := @parameter0: boolean;

        z2 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i2 = $i1 + $i0;

        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        r1 = newarray (char)[$i3];

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        z4 = 0;

        i12 = 0;

        z5 = 0;

        i13 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        goto label08;

     label01:
        $c4 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i13);

        $z0 = staticinvoke <org.apache.xpath.objects.XStringForFSB: boolean isSpace(char)>($c4);

        if $z0 == 0 goto label06;

        if z5 != 0 goto label05;

        $i16 = (int) $c4;

        if 32 == $i16 goto label02;

        z4 = 1;

     label02:
        $i6 = i12;

        i12 = i12 + 1;

        r1[$i6] = 32;

        if z1 == 0 goto label04;

        if i12 == 0 goto label04;

        $i7 = i12 - 1;

        c14 = r1[$i7];

        $i17 = (int) c14;

        if $i17 == 46 goto label03;

        $i18 = (int) c14;

        if $i18 == 33 goto label03;

        $i19 = (int) c14;

        if $i19 == 63 goto label03;

        z5 = 1;

     label03:
        goto label07;

     label04:
        z5 = 1;

        goto label07;

     label05:
        z4 = 1;

        z5 = 1;

        goto label07;

     label06:
        $i5 = i12;

        i12 = i12 + 1;

        r1[$i5] = $c4;

        z5 = 0;

     label07:
        i13 = i13 + 1;

     label08:
        if i13 < i2 goto label01;

        if z2 == 0 goto label09;

        if 1 > i12 goto label09;

        $i10 = i12 - 1;

        $c11 = r1[$i10];

        $i20 = (int) $c11;

        if 32 != $i20 goto label09;

        z4 = 1;

        $i22 = (int) -1;

        i12 = i12 + $i22;

     label09:
        z6 = 0;

        b15 = 0;

        z7 = 0;

        if z3 == 0 goto label10;

        if 0 >= i12 goto label10;

        $c9 = r1[0];

        $i23 = (int) $c9;

        if 32 != $i23 goto label10;

        z4 = 1;

        z6 = 1;

        b15 = 1;

        z7 = 1;

     label10:
        $r3 = staticinvoke <org.apache.xpath.objects.XMLStringFactoryImpl: org.apache.xml.utils.XMLStringFactory getFactory()>();

        if z4 == 0 goto label11;

        $i8 = i12 - z7;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(char[],int,int)>(r1, b15, $i8);

        goto label12;

     label11:
        $r4 = r0;

     label12:
        return $r4;
    }

    public double toDouble()
    {
        java.lang.Double $r5;
        int $i0, $i1, $i2, $i3, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r2;
        boolean $z0, $z1;
        double $d0;
        org.apache.xml.utils.FastStringBuffer $r1;
        char $c4, $c5, $c6, $c7;
        java.lang.NumberFormatException $r4;
        org.apache.xpath.objects.XStringForFSB r0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if $i0 != 0 goto label01;

        return #NaN;

     label01:
        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i2 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $r2 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i2, $i1);

        i9 = 0;

        goto label04;

     label02:
        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i9);

        $z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c4);

        if $z0 != 0 goto label03;

        goto label05;

     label03:
        i9 = i9 + 1;

     label04:
        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i9 < $i3 goto label02;

     label05:
        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i9);

        $i12 = (int) $c5;

        if $i12 != 45 goto label08;

        i9 = i9 + 1;

        goto label08;

     label06:
        $c6 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i9);

        $i13 = (int) $c6;

        if $i13 == 46 goto label07;

        $i14 = (int) $c6;

        if $i14 < 48 goto label11;

        $i15 = (int) $c6;

        if $i15 <= 57 goto label07;

        goto label11;

     label07:
        i9 = i9 + 1;

     label08:
        $i10 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i9 < $i10 goto label06;

        goto label11;

     label09:
        $c7 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i9);

        $z1 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c7);

        if $z1 != 0 goto label10;

        goto label12;

     label10:
        i9 = i9 + 1;

     label11:
        $i11 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i9 < $i11 goto label09;

     label12:
        $i8 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i9 == $i8 goto label13;

        return #NaN;

     label13:
        $r5 = new java.lang.Double;

        specialinvoke $r5.<java.lang.Double: void <init>(java.lang.String)>($r2);

        $d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

        return $d0;

     label14:
        $r4 := @caughtexception;

        return #NaN;

        catch java.lang.NumberFormatException from label13 to label14 with label14;
    }
}
