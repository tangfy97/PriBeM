public class com.hp.hpl.jena.reasoner.TriplePattern extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.ClauseEntry
{
    protected com.hp.hpl.jena.graph.Node subject;
    protected com.hp.hpl.jena.graph.Node predicate;
    protected com.hp.hpl.jena.graph.Node object;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        com.hp.hpl.jena.graph.Node r1, $r2, r3, $r4, r5, $r6;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>(r1);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject> = $r2;

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>(r3);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate> = $r4;

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>(r5);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object> = $r6;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        com.hp.hpl.jena.graph.TripleMatch r1;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>($r2);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject> = $r3;

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r5 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>($r4);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate> = $r5;

        $r6 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>($r6);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object> = $r7;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Triple r1;
        com.hp.hpl.jena.reasoner.TriplePattern r0;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>($r2);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject> = $r3;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r5 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>($r4);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate> = $r5;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)>($r6);

        r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object> = $r7;

        return;
    }

    public com.hp.hpl.jena.graph.Node getObject()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.reasoner.TriplePattern r0;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getPredicate()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.reasoner.TriplePattern r0;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getSubject()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.reasoner.TriplePattern r0;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.TripleMatch asTripleMatch()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5, $r6;
        com.hp.hpl.jena.graph.Triple $r7;
        com.hp.hpl.jena.reasoner.TriplePattern r0;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node toMatch(com.hp.hpl.jena.graph.Node)>($r1);

        $r3 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node toMatch(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r6 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node toMatch(com.hp.hpl.jena.graph.Node)>($r5);

        $r7 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple createMatch(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r4, $r6);

        return $r7;
    }

    public com.hp.hpl.jena.graph.Triple asTriple()
    {
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple $r0;

        r1 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r0 = new com.hp.hpl.jena.graph.Triple;

        $r4 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r3 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r2 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, $r2);

        return $r0;
    }

    public boolean compatibleWith(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r13, $r20, $r21, $r22, $r23, $r24, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.hp.hpl.jena.graph.Node[] $r18, $r19;
        com.hp.hpl.jena.reasoner.TriplePattern r0, r4;
        com.hp.hpl.jena.reasoner.rulesys.Functor r12, r15;
        int $i0, $i1;
        java.lang.String $r16, $r17;
        java.lang.Object $r11, $r14;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label01;

        $r23 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z10 = virtualinvoke $r23.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z10 != 0 goto label01;

        $r25 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r24 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z11 = virtualinvoke $r25.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r24);

        if $z11 == 0 goto label02;

     label01:
        $z12 = 1;

        goto label03;

     label02:
        $z12 = 0;

     label03:
        if $z12 != 0 goto label04;

        return 0;

     label04:
        $r2 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 != 0 goto label05;

        $r20 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z8 = virtualinvoke $r20.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z8 != 0 goto label05;

        $r22 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r21 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z9 = virtualinvoke $r22.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r21);

        if $z9 == 0 goto label06;

     label05:
        $z13 = 1;

        goto label07;

     label06:
        $z13 = 0;

     label07:
        if $z13 != 0 goto label08;

        return 0;

     label08:
        $r3 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 != 0 goto label09;

        $r5 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label10;

     label09:
        return 1;

     label10:
        $r6 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r6);

        if $z4 == 0 goto label13;

        $r9 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r9);

        if $z6 == 0 goto label13;

        $r10 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r12 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r11;

        $r13 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r15 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r14;

        $r16 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r17 = virtualinvoke r15.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z7 == 0 goto label11;

        $r18 = virtualinvoke r12.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i0 = lengthof $r18;

        $r19 = virtualinvoke r15.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i1 = lengthof $r19;

        if $i0 != $i1 goto label11;

        $z14 = 1;

        goto label12;

     label11:
        $z14 = 0;

     label12:
        return $z14;

     label13:
        $r8 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r7 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z5 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>($r7);

        return $z5;
    }

    public boolean variantOf(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r21, $r22;
        java.util.Map $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.graph.Node[] $r19, $r20;
        com.hp.hpl.jena.reasoner.TriplePattern r1, r2;
        com.hp.hpl.jena.reasoner.rulesys.Functor r13, r16;
        int $i0, $i1, $i2, i3;
        java.lang.String $r17, $r18;
        java.lang.Object $r12, $r15;

        r1 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r0 = staticinvoke <com.hp.hpl.jena.util.CollectionFactory: java.util.Map createHashedMap()>();

        $r4 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r3 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z0 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean variantOf(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,java.util.Map)>($r4, $r3, $r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r6 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r5 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean variantOf(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,java.util.Map)>($r6, $r5, $r0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r7);

        if $z2 == 0 goto label8;

        $r10 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r10);

        if $z4 == 0 goto label8;

        $r11 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r13 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r12;

        $r14 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r16 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r15;

        $r17 = virtualinvoke r13.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r18 = virtualinvoke r16.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z5 != 0 goto label3;

        return 0;

     label3:
        $r19 = virtualinvoke r13.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r20 = virtualinvoke r16.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i1 = lengthof $r19;

        $i0 = lengthof $r20;

        if $i1 == $i0 goto label4;

        return 0;

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof $r19;

        if i3 >= $i2 goto label7;

        $r22 = $r19[i3];

        $r21 = $r20[i3];

        $z6 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean variantOf(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,java.util.Map)>($r22, $r21, $r0);

        if $z6 != 0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 1;

     label8:
        $r9 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r8 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean variantOf(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,java.util.Map)>($r9, $r8, $r0);

        return $z3;
    }

    private boolean variantOf(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, java.util.Map)
    {
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.reasoner.TriplePattern r4;
        java.util.Map r2;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: java.util.Map;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label5;

        $z2 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z2 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r3 != null goto label1;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return 1;

     label1:
        if $r3 != r1 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;

     label5:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z1;
    }

    public boolean isLegal()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5, $r9;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node[] $r8;
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        java.lang.Object $r6;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r7;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r3);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $r4 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r4);

        if $z3 == 0 goto label6;

        $r5 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r7 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r6;

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        i1 = 0;

     label4:
        $i0 = lengthof $r8;

        if i1 >= $i0 goto label6;

        $r9 = $r8[i1];

        $z4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r9);

        if $z4 == 0 goto label5;

        return 0;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 1;
    }

    public boolean subsumes(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.reasoner.TriplePattern r0, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r4 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $r10 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r9 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z5 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label4;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 != 0 goto label2;

        $r8 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r7 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z4 = virtualinvoke $r8.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r7);

        if $z4 == 0 goto label4;

     label2:
        $r3 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 != 0 goto label3;

        $r6 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r5 = r4.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label4;

     label3:
        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        return $z6;
    }

    public boolean isGround()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5;
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        java.lang.Object $r6;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r7;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 != 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z2 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z2 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r4 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r4);

        if $z3 == 0 goto label3;

        $r5 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $r7 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r6;

        $z4 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isGround()>();

        return $z4;

     label3:
        return 1;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node $r2, $r6, $r10;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12;
        java.lang.String $r3, $r7, $r11, $r13;

        r1 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r3 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @");

        $r6 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static java.lang.String simplePrintString(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r6, $r10;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12;
        java.lang.String $r3, $r7, $r11, $r13;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.TriplePattern: java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static java.lang.String simplePrintString(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        int $i0, $i1, i2, $i3, $i4, $i6, $i8, $i10;
        java.lang.String $r1, $r2, $r3, $r4, r5, $r6, $r9, $r11;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r10, $r12;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.Node_URI;

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(35);

        i2 = $i0;

        $i6 = (int) -1;

        if $i0 != $i6 goto label1;

        $i1 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(47);

        i2 = $i1;

        $i8 = (int) -1;

        if $i1 != $i8 goto label1;

        $i10 = (int) -1;

        i2 = $i10;

     label1:
        $i3 = i2 + 1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        r5 = "";

        $r6 = staticinvoke <com.hp.hpl.jena.vocabulary.RDF: java.lang.String getURI()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        r5 = "rdf:";

        goto label3;

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.vocabulary.RDFS: java.lang.String getURI()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        r5 = "rdfs:";

     label3:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $i4 = i2 + 1;

        $r9 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i4);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label4:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        return $r1;
    }

    private static com.hp.hpl.jena.graph.Node normalize(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r1;
        com.hp.hpl.jena.graph.Node r0, $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r0 != $r2 goto label2;

     label1:
        $r1 = <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD>;

        return $r1;

     label2:
        return r0;
    }

    private static com.hp.hpl.jena.graph.Node toMatch(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r6, $r7, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.reasoner.TriplePattern r1, $r2, $r5, $r8;
        java.lang.Object r0;

        r1 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z0 == 0 goto label1;

        $r4 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r2 = (com.hp.hpl.jena.reasoner.TriplePattern) r0;

        $r3 = $r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean nodeEqual(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3);

        if $z1 == 0 goto label1;

        $r7 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r5 = (com.hp.hpl.jena.reasoner.TriplePattern) r0;

        $r6 = $r5.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z2 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean nodeEqual(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r7, $r6);

        if $z2 == 0 goto label1;

        $r10 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r8 = (com.hp.hpl.jena.reasoner.TriplePattern) r0;

        $r9 = $r8.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = specialinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: boolean nodeEqual(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r9);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private boolean nodeEqual(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.TriplePattern r2;
        com.hp.hpl.jena.graph.Node r0, r1;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label1;

        $z2 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.reasoner.TriplePattern r0;

        r0 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        i5 = 0;

        $r1 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z0 = $r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 != 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $i3 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i4 = $i3 >> 1;

        i5 = 0 ^ $i4;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z1 = $r2 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z1 != 0 goto label2;

        $r5 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $i2 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        i5 = i5 ^ $i2;

     label2:
        $r3 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z2 = $r3 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z2 != 0 goto label3;

        $r4 = r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $i0 = virtualinvoke $r4.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        $i1 = $i0 << 1;

        i5 = i5 ^ $i1;

     label3:
        return i5;
    }

    public boolean sameAs(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r3, $r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.reasoner.TriplePattern r1, r2;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: com.hp.hpl.jena.reasoner.TriplePattern;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.reasoner.TriplePattern) r0;

        $r4 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $r3 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node subject>;

        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean sameNodeAs(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3);

        if $z1 == 0 goto label2;

        $r6 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $r5 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node predicate>;

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean sameNodeAs(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r5);

        if $z2 == 0 goto label2;

        $r8 = r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $r7 = r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node object>;

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean sameNodeAs(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, $r7);

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }
}
