public class com.hp.hpl.jena.sparql.syntax.ElementData extends com.hp.hpl.jena.sparql.syntax.Element
{
    private java.util.List vars;
    private java.util.List rows;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.syntax.ElementData r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.Element: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows> = $r2;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Table getTable()
    {
        com.hp.hpl.jena.sparql.algebra.table.TableData $r0;
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.syntax.ElementData r1;

        r1 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        $r0 = new com.hp.hpl.jena.sparql.algebra.table.TableData;

        $r3 = r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        $r2 = r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.table.TableData: void <init>(java.util.List,java.util.List)>($r3, $r2);

        return $r0;
    }

    public java.util.List getVars()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementData r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        return $r1;
    }

    public java.util.List getRows()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementData r0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows>;

        return $r1;
    }

    public void add(com.hp.hpl.jena.sparql.core.Var)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.syntax.ElementData r0;
        com.hp.hpl.jena.sparql.core.Var r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void add(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.syntax.ElementData r2;
        com.hp.hpl.jena.sparql.core.Var r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0;
        java.util.List $r3, $r6;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;
        com.hp.hpl.jena.sparql.ARQException $r7;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = r2.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        $r7 = new com.hp.hpl.jena.sparql.ARQException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Variable ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not already declared for ElementData");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label2:
        goto label1;

     label3:
        $r3 = r2.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.syntax.Element, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso $r5;
        com.hp.hpl.jena.sparql.syntax.ElementData r1, r2;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r6;
        java.util.List $r3, $r4, $r7, $r8;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r9;
        com.hp.hpl.jena.sparql.syntax.Element r0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        r9 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementData;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.syntax.ElementData) r0;

        $r4 = r2.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        $r3 = r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = r2.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows>;

        $r8 = r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows>;

        $r5 = new com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        $r6 = <com.hp.hpl.jena.sparql.util.NodeUtils: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest sameTerm>;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: void <init>(com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r6);

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.resultset.ResultSetCompare: boolean equalsByTest(java.util.Collection,java.util.Collection,com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)>($r7, $r8, $r5);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public int hashCode()
    {
        java.util.List $r1, $r2;
        com.hp.hpl.jena.sparql.syntax.ElementData r0;
        int $i0, $i1, $i2;

        r0 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        $r1 = r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List vars>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List rows>;

        $i1 = interfaceinvoke $r2.<java.util.List: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementVisitor)
    {
        com.hp.hpl.jena.sparql.syntax.ElementVisitor r0;
        com.hp.hpl.jena.sparql.syntax.ElementData r1;

        r1 := @this: com.hp.hpl.jena.sparql.syntax.ElementData;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementVisitor: void visit(com.hp.hpl.jena.sparql.syntax.ElementData)>(r1);

        return;
    }
}
