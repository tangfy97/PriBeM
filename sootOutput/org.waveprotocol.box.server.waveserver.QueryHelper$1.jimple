final class org.waveprotocol.box.server.waveserver.QueryHelper$1 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        org.waveprotocol.box.server.waveserver.QueryHelper$1 r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.waveprotocol.wave.model.wave.data.WaveViewData, org.waveprotocol.wave.model.wave.data.WaveViewData)
    {
        org.waveprotocol.wave.model.wave.data.WaveViewData r1, r2;
        int $i3;
        long $l0, $l1, $l2;
        org.waveprotocol.box.server.waveserver.QueryHelper$1 r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$1;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveViewData;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.data.WaveViewData;

        $l0 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.QueryHelper$1: long computeLmt(org.waveprotocol.wave.model.wave.data.WaveViewData)>(r1);

        $l1 = specialinvoke r0.<org.waveprotocol.box.server.waveserver.QueryHelper$1: long computeLmt(org.waveprotocol.wave.model.wave.data.WaveViewData)>(r2);

        $l2 = $l0 - $l1;

        $i3 = staticinvoke <java.lang.Long: int signum(long)>($l2);

        return $i3;
    }

    private long computeLmt(org.waveprotocol.wave.model.wave.data.WaveViewData)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r4;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        long $l0, l2, $l3;
        java.lang.Iterable $r1;
        byte $b1;
        org.waveprotocol.wave.model.wave.data.WaveViewData r0;
        int $i4;
        java.lang.Object $r3;
        org.waveprotocol.box.server.waveserver.QueryHelper$1 r6;
        boolean $z0, $z1;

        r6 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveViewData;

        l2 = -1L;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveViewData: java.lang.Iterable getWavelets()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r3;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>($r5);

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $l0 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getLastModifiedTime()>();

        $b1 = l2 cmp $l0;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label3;

        $l3 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getLastModifiedTime()>();

        goto label4;

     label3:
        $l3 = l2;

     label4:
        l2 = $l3;

        goto label1;

     label5:
        return l2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.data.WaveViewData $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        org.waveprotocol.box.server.waveserver.QueryHelper$1 r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.QueryHelper$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.model.wave.data.WaveViewData) r1;

        $r3 = (org.waveprotocol.wave.model.wave.data.WaveViewData) r2;

        $i0 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.QueryHelper$1: int compare(org.waveprotocol.wave.model.wave.data.WaveViewData,org.waveprotocol.wave.model.wave.data.WaveViewData)>($r4, $r3);

        return $i0;
    }
}
