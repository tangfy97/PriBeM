public class groovyjarjarantlr.RuleBlock extends groovyjarjarantlr.AlternativeBlock
{
    protected java.lang.String ruleName;
    protected java.lang.String argAction;
    protected java.lang.String throwsSpec;
    protected java.lang.String returnAction;
    protected groovyjarjarantlr.RuleEndElement endNode;
    protected boolean testLiterals;
    groovyjarjarantlr.collections.impl.Vector labeledElements;
    protected boolean[] lock;
    protected groovyjarjarantlr.Lookahead[] cache;
    java.util.Hashtable exceptionSpecs;
    protected boolean defaultErrorHandler;
    protected java.lang.String ignoreRule;

    public void <init>(groovyjarjarantlr.Grammar, java.lang.String)
    {
        groovyjarjarantlr.RuleBlock r0;
        groovyjarjarantlr.Lookahead[] $r4;
        groovyjarjarantlr.Grammar r1;
        int $i0, $i1;
        java.lang.String r2;
        groovyjarjarantlr.collections.impl.Vector $r3;
        java.util.Hashtable $r5;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<groovyjarjarantlr.AlternativeBlock: void <init>(groovyjarjarantlr.Grammar)>(r1);

        r0.<groovyjarjarantlr.RuleBlock: java.lang.String argAction> = null;

        r0.<groovyjarjarantlr.RuleBlock: java.lang.String throwsSpec> = null;

        r0.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction> = null;

        r0.<groovyjarjarantlr.RuleBlock: boolean testLiterals> = 0;

        r0.<groovyjarjarantlr.RuleBlock: boolean defaultErrorHandler> = 1;

        r0.<groovyjarjarantlr.RuleBlock: java.lang.String ignoreRule> = null;

        r0.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName> = r2;

        $r3 = new groovyjarjarantlr.collections.impl.Vector;

        specialinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: void <init>()>();

        r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements> = $r3;

        $i0 = r1.<groovyjarjarantlr.Grammar: int maxk>;

        $i1 = $i0 + 1;

        $r4 = newarray (groovyjarjarantlr.Lookahead)[$i1];

        r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Lookahead[] cache> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        r0.<groovyjarjarantlr.RuleBlock: java.util.Hashtable exceptionSpecs> = $r5;

        $z0 = r1 instanceof groovyjarjarantlr.ParserGrammar;

        virtualinvoke r0.<groovyjarjarantlr.RuleBlock: void setAutoGen(boolean)>($z0);

        return;
    }

    public void <init>(groovyjarjarantlr.Grammar, java.lang.String, int, boolean)
    {
        groovyjarjarantlr.RuleBlock r0;
        int i0;
        java.lang.String r2;
        groovyjarjarantlr.Grammar r1;
        boolean z0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<groovyjarjarantlr.RuleBlock: void <init>(groovyjarjarantlr.Grammar,java.lang.String)>(r1, r2);

        r0.<groovyjarjarantlr.RuleBlock: int line> = i0;

        virtualinvoke r0.<groovyjarjarantlr.RuleBlock: void setAutoGen(boolean)>(z0);

        return;
    }

    public void addExceptionSpec(groovyjarjarantlr.ExceptionSpec)
    {
        groovyjarjarantlr.ExceptionSpec r1, $r3;
        groovyjarjarantlr.Grammar $r8, $r16;
        groovyjarjarantlr.Tool $r10, $r18;
        java.lang.StringBuffer $r9, $r11, $r13, $r14, $r17, $r19, $r21, $r22, $r24;
        java.lang.String $r12, $r15, $r20, $r25, $r26;
        groovyjarjarantlr.Token $r2, $r4, $r5, $r7, $r23;
        java.util.Hashtable $r6;
        groovyjarjarantlr.RuleBlock r0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r1 := @parameter0: groovyjarjarantlr.ExceptionSpec;

        $r2 = r1.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.Token label>;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.ExceptionSpec findExceptionSpec(groovyjarjarantlr.Token)>($r2);

        if $r3 == null goto label2;

        $r7 = r1.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.Token label>;

        if $r7 == null goto label1;

        $r16 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r18 = $r16.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r20 = r0.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' already has an exception handler for label: ");

        $r23 = r1.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.Token label>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r18.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r25);

        goto label5;

     label1:
        $r8 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Rule \'");

        $r12 = r0.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' already has an exception handler");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r15);

        goto label5;

     label2:
        $r6 = r0.<groovyjarjarantlr.RuleBlock: java.util.Hashtable exceptionSpecs>;

        $r4 = r1.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.Token label>;

        if $r4 != null goto label3;

        $r26 = "";

        goto label4;

     label3:
        $r5 = r1.<groovyjarjarantlr.ExceptionSpec: groovyjarjarantlr.Token label>;

        $r26 = virtualinvoke $r5.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label4:
        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, r1);

     label5:
        return;
    }

    public groovyjarjarantlr.ExceptionSpec findExceptionSpec(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.RuleBlock r0;
        groovyjarjarantlr.ExceptionSpec $r4;
        java.lang.Object $r3;
        java.lang.String $r5;
        groovyjarjarantlr.Token r1;
        java.util.Hashtable $r2;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r1 := @parameter0: groovyjarjarantlr.Token;

        $r2 = r0.<groovyjarjarantlr.RuleBlock: java.util.Hashtable exceptionSpecs>;

        if r1 != null goto label1;

        $r5 = "";

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

     label2:
        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        $r4 = (groovyjarjarantlr.ExceptionSpec) $r3;

        return $r4;
    }

    public groovyjarjarantlr.ExceptionSpec findExceptionSpec(java.lang.String)
    {
        groovyjarjarantlr.RuleBlock r0;
        groovyjarjarantlr.ExceptionSpec $r4;
        java.lang.Object $r3;
        java.lang.String r1, $r5;
        java.util.Hashtable $r2;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<groovyjarjarantlr.RuleBlock: java.util.Hashtable exceptionSpecs>;

        if r1 != null goto label1;

        $r5 = "";

        goto label2;

     label1:
        $r5 = r1;

     label2:
        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        $r4 = (groovyjarjarantlr.ExceptionSpec) $r3;

        return $r4;
    }

    public void generate()
    {
        groovyjarjarantlr.RuleBlock r0;
        groovyjarjarantlr.Grammar $r1;
        groovyjarjarantlr.CodeGenerator $r2;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r2.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.AlternativeBlock)>(r0);

        return;
    }

    public boolean getDefaultErrorHandler()
    {
        groovyjarjarantlr.RuleBlock r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $z0 = r0.<groovyjarjarantlr.RuleBlock: boolean defaultErrorHandler>;

        return $z0;
    }

    public groovyjarjarantlr.RuleEndElement getEndElement()
    {
        groovyjarjarantlr.RuleEndElement $r1;
        groovyjarjarantlr.RuleBlock r0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        return $r1;
    }

    public java.lang.String getIgnoreRule()
    {
        java.lang.String $r1;
        groovyjarjarantlr.RuleBlock r0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.RuleBlock: java.lang.String ignoreRule>;

        return $r1;
    }

    public java.lang.String getRuleName()
    {
        java.lang.String $r1;
        groovyjarjarantlr.RuleBlock r0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        return $r1;
    }

    public boolean getTestLiterals()
    {
        groovyjarjarantlr.RuleBlock r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $z0 = r0.<groovyjarjarantlr.RuleBlock: boolean testLiterals>;

        return $z0;
    }

    public boolean isLexerAutoGenRule()
    {
        java.lang.String $r1;
        groovyjarjarantlr.RuleBlock r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        $r1 = r0.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("nextToken");

        return $z0;
    }

    public groovyjarjarantlr.Lookahead look(int)
    {
        groovyjarjarantlr.RuleBlock r0;
        groovyjarjarantlr.Lookahead $r3;
        int i0;
        groovyjarjarantlr.LLkGrammarAnalyzer $r2;
        groovyjarjarantlr.Grammar $r1;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        i0 := @parameter0: int;

        $r1 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r2 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.LLkGrammarAnalyzer theLLkAnalyzer>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.LLkGrammarAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.RuleBlock)>(i0, r0);

        return $r3;
    }

    public void prepareForAnalysis()
    {
        groovyjarjarantlr.RuleBlock r0;
        int $i0, $i1;
        boolean[] $r2;
        groovyjarjarantlr.Grammar $r1;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        specialinvoke r0.<groovyjarjarantlr.AlternativeBlock: void prepareForAnalysis()>();

        $r1 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $i0 = $r1.<groovyjarjarantlr.Grammar: int maxk>;

        $i1 = $i0 + 1;

        $r2 = newarray (boolean)[$i1];

        r0.<groovyjarjarantlr.RuleBlock: boolean[] lock> = $r2;

        return;
    }

    public void setDefaultErrorHandler(boolean)
    {
        groovyjarjarantlr.RuleBlock r0;
        boolean z0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        z0 := @parameter0: boolean;

        r0.<groovyjarjarantlr.RuleBlock: boolean defaultErrorHandler> = z0;

        return;
    }

    public void setEndElement(groovyjarjarantlr.RuleEndElement)
    {
        groovyjarjarantlr.RuleEndElement r1;
        groovyjarjarantlr.RuleBlock r0;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r1 := @parameter0: groovyjarjarantlr.RuleEndElement;

        r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode> = r1;

        return;
    }

    public void setOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.TokenManager $r26;
        groovyjarjarantlr.RuleBlock r6;
        groovyjarjarantlr.Tool $r9, $r21, $r31, $r38, $r44, $r51, $r55, $r61;
        java.lang.StringBuffer $r8, $r10, $r12, $r30, $r32, $r34;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r11, $r13, $r15, $r17, $r18, $r22, $r25, $r28, $r33, $r35, $r39, $r41, $r45, $r47, $r48, $r52, $r56, $r57, $r58, $r62;
        groovyjarjarantlr.Grammar $r7, $r14, $r19, $r20, $r23, $r24, $r29, $r36, $r37, $r40, $r42, $r43, $r46, $r49, $r50, $r53, $r54, $r59, $r60;
        groovyjarjarantlr.Token r0, r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        groovyjarjarantlr.TokenSymbol $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r6 := @this: groovyjarjarantlr.RuleBlock;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r16 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("defaultErrorHandler");

        if $z0 == 0 goto label03;

        $r57 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z12 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z12 == 0 goto label01;

        r6.<groovyjarjarantlr.RuleBlock: boolean defaultErrorHandler> = 1;

        goto label16;

     label01:
        $r58 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z13 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z13 == 0 goto label02;

        r6.<groovyjarjarantlr.RuleBlock: boolean defaultErrorHandler> = 0;

        goto label16;

     label02:
        $r59 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r61 = $r59.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r60 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r62 = virtualinvoke $r60.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i12 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i13 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r61.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for defaultErrorHandler must be true or false", $r62, $i12, $i13);

        goto label16;

     label03:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("testLiterals");

        if $z1 == 0 goto label07;

        $r46 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $z9 = $r46 instanceof groovyjarjarantlr.LexerGrammar;

        if $z9 != 0 goto label04;

        $r53 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r55 = $r53.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r54 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r56 = virtualinvoke $r54.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i10 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i11 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r55.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("testLiterals option only valid for lexer rules", $r56, $i10, $i11);

        goto label16;

     label04:
        $r47 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z10 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z10 == 0 goto label05;

        r6.<groovyjarjarantlr.RuleBlock: boolean testLiterals> = 1;

        goto label16;

     label05:
        $r48 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z11 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z11 == 0 goto label06;

        r6.<groovyjarjarantlr.RuleBlock: boolean testLiterals> = 0;

        goto label16;

     label06:
        $r49 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r51 = $r49.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r50 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r52 = virtualinvoke $r50.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i8 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i9 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r51.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for testLiterals must be true or false", $r52, $i8, $i9);

        goto label16;

     label07:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ignore");

        if $z2 == 0 goto label09;

        $r40 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $z8 = $r40 instanceof groovyjarjarantlr.LexerGrammar;

        if $z8 != 0 goto label08;

        $r42 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r44 = $r42.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r43 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r45 = virtualinvoke $r43.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i7 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r44.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("ignore option only valid for lexer rules", $r45, $i6, $i7);

        goto label16;

     label08:
        $r41 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r6.<groovyjarjarantlr.RuleBlock: java.lang.String ignoreRule> = $r41;

        goto label16;

     label09:
        $r4 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("paraphrase");

        if $z3 == 0 goto label12;

        $r23 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $z7 = $r23 instanceof groovyjarjarantlr.LexerGrammar;

        if $z7 != 0 goto label10;

        $r36 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r38 = $r36.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r37 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r39 = virtualinvoke $r37.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i5 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r38.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("paraphrase option only valid for lexer rules", $r39, $i4, $i5);

        goto label16;

     label10:
        $r24 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r26 = $r24.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r25 = r6.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r27 = interfaceinvoke $r26.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>($r25);

        if $r27 != null goto label11;

        $r29 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r31 = $r29.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot find token associated with rule ");

        $r33 = r6.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r35);

     label11:
        $r28 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r27.<groovyjarjarantlr.TokenSymbol: void setParaphrase(java.lang.String)>($r28);

        goto label16;

     label12:
        $r5 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("generateAmbigWarnings");

        if $z4 == 0 goto label15;

        $r17 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z5 == 0 goto label13;

        r6.<groovyjarjarantlr.RuleBlock: boolean generateAmbigWarnings> = 1;

        goto label16;

     label13:
        $r18 = virtualinvoke r16.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z6 == 0 goto label14;

        r6.<groovyjarjarantlr.RuleBlock: boolean generateAmbigWarnings> = 0;

        goto label16;

     label14:
        $r19 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r21 = $r19.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r20 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r22 = virtualinvoke $r20.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r21.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Value for generateAmbigWarnings must be true or false", $r22, $i2, $i3);

        goto label16;

     label15:
        $r7 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r9 = $r7.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid rule option: ");

        $r11 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r13, $r15, $i0, $i1);

     label16:
        return;
    }

    public java.lang.String toString()
    {
        groovyjarjarantlr.Lookahead[] r2;
        groovyjarjarantlr.Grammar $r3, $r19;
        groovyjarjarantlr.TokenManager $r20;
        groovyjarjarantlr.collections.impl.Vector $r22;
        boolean z0;
        groovyjarjarantlr.RuleBlock r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r14, $r17, $r18, $r24, $r27, $r28, $r29;
        int i0, $i1, i2;
        java.lang.String $r8, $r11, $r15, $r23, $r25, r30, r31;
        groovyjarjarantlr.RuleEndElement $r1;
        groovyjarjarantlr.Lookahead $r16, $r21, $r26;

        r0 := @this: groovyjarjarantlr.RuleBlock;

        r30 = " FOLLOW={";

        $r1 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        r2 = $r1.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r3 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        i0 = $r3.<groovyjarjarantlr.Grammar: int maxk>;

        z0 = 1;

        i2 = 1;

     label1:
        if i2 > i0 goto label4;

        $r16 = r2[i2];

        if $r16 != null goto label2;

        goto label3;

     label2:
        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r21 = r2[i2];

        $r19 = r0.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Grammar grammar>;

        $r20 = $r19.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r22 = interfaceinvoke $r20.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        $r23 = virtualinvoke $r21.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.collections.impl.Vector)>(",", $r22);

        $r24 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        r30 = $r25;

        z0 = 0;

        if i2 >= i0 goto label3;

        $i1 = i2 + 1;

        $r26 = r2[$i1];

        if $r26 == null goto label3;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(";");

        r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r30);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        r31 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        if z0 == 0 goto label5;

        r31 = "";

     label5:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = r0.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r11 = specialinvoke r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ;");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r31);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;
    }
}
