class groovy.util.FactoryBuilderSupport$1 extends groovy.util.AbstractFactory
{
    private final java.lang.Class val$beanClass;
    private final groovy.util.FactoryBuilderSupport this$0;

    void <init>(groovy.util.FactoryBuilderSupport, java.lang.Class)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.util.FactoryBuilderSupport$1 r0;
        java.lang.Class r2;

        r0 := @this: groovy.util.FactoryBuilderSupport$1;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Class;

        r0.<groovy.util.FactoryBuilderSupport$1: groovy.util.FactoryBuilderSupport this$0> = r1;

        r0.<groovy.util.FactoryBuilderSupport$1: java.lang.Class val$beanClass> = r2;

        specialinvoke r0.<groovy.util.AbstractFactory: void <init>()>();

        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        groovy.util.FactoryBuilderSupport r6;
        groovy.util.FactoryBuilderSupport$1 r2;
        java.util.Map r7;
        java.lang.Object r0, r1, $r5;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r2 := @this: groovy.util.FactoryBuilderSupport$1;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r1 := @parameter1: java.lang.Object;

        r0 := @parameter2: java.lang.Object;

        r7 := @parameter3: java.util.Map;

        $r3 = r2.<groovy.util.FactoryBuilderSupport$1: java.lang.Class val$beanClass>;

        $z0 = staticinvoke <groovy.util.FactoryBuilderSupport: boolean checkValueIsTypeNotString(java.lang.Object,java.lang.Object,java.lang.Class)>(r0, r1, $r3);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r4 = r2.<groovy.util.FactoryBuilderSupport$1: java.lang.Class val$beanClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        return $r5;
    }
}
