public class org.aspectj.internal.lang.reflect.DeclareParentsImpl extends java.lang.Object implements org.aspectj.lang.reflect.DeclareParents
{
    private org.aspectj.lang.reflect.AjType declaringType;
    private org.aspectj.lang.reflect.TypePattern targetTypesPattern;
    private java.lang.reflect.Type[] parents;
    private java.lang.String parentsString;
    private java.lang.String firstMissingTypeName;
    private boolean isExtends;
    private boolean parentsError;

    public void <init>(java.lang.String, java.lang.String, boolean, org.aspectj.lang.reflect.AjType)
    {
        org.aspectj.lang.reflect.AjType r3;
        org.aspectj.internal.lang.reflect.TypePatternImpl $r1;
        java.lang.reflect.Type[] $r6;
        java.lang.Class $r5;
        java.lang.ClassNotFoundException $r7;
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r0;
        java.lang.String r2, r4, $r8;
        boolean z0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.aspectj.lang.reflect.AjType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean parentsError> = 0;

        $r1 = new org.aspectj.internal.lang.reflect.TypePatternImpl;

        specialinvoke $r1.<org.aspectj.internal.lang.reflect.TypePatternImpl: void <init>(java.lang.String)>(r2);

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: org.aspectj.lang.reflect.TypePattern targetTypesPattern> = $r1;

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean isExtends> = z0;

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: org.aspectj.lang.reflect.AjType declaringType> = r3;

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: java.lang.String parentsString> = r4;

     label1:
        $r5 = interfaceinvoke r3.<org.aspectj.lang.reflect.AjType: java.lang.Class getJavaClass()>();

        $r6 = staticinvoke <org.aspectj.internal.lang.reflect.StringToType: java.lang.reflect.Type[] commaSeparatedListToTypeArray(java.lang.String,java.lang.Class)>(r4, $r5);

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: java.lang.reflect.Type[] parents> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean parentsError> = 1;

        $r8 = virtualinvoke $r7.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: java.lang.String firstMissingTypeName> = $r8;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r0;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: org.aspectj.lang.reflect.AjType declaringType>;

        return $r1;
    }

    public org.aspectj.lang.reflect.TypePattern getTargetTypesPattern()
    {
        org.aspectj.lang.reflect.TypePattern $r1;
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: org.aspectj.lang.reflect.TypePattern targetTypesPattern>;

        return $r1;
    }

    public boolean isExtends()
    {
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r0;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $z0 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean isExtends>;

        return $z0;
    }

    public boolean isImplements()
    {
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $z0 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean isExtends>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.reflect.Type[] getParentTypes() throws java.lang.ClassNotFoundException
    {
        java.lang.reflect.Type[] $r1;
        java.lang.ClassNotFoundException $r2;
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $z0 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean parentsError>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.ClassNotFoundException;

        $r3 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: java.lang.String firstMissingTypeName>;

        specialinvoke $r2.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: java.lang.reflect.Type[] parents>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.lang.reflect.TypePattern $r2;
        java.lang.StringBuffer $r0;
        org.aspectj.internal.lang.reflect.DeclareParentsImpl r1;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0;

        r1 := @this: org.aspectj.internal.lang.reflect.DeclareParentsImpl;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("declare parents : ");

        $r2 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: org.aspectj.lang.reflect.TypePattern getTargetTypesPattern()>();

        $r3 = interfaceinvoke $r2.<org.aspectj.lang.reflect.TypePattern: java.lang.String asString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $z0 = virtualinvoke r1.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: boolean isExtends()>();

        if $z0 == 0 goto label1;

        $r6 = " extends ";

        goto label2;

     label1:
        $r6 = " implements ";

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r4 = r1.<org.aspectj.internal.lang.reflect.DeclareParentsImpl: java.lang.String parentsString>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }
}
