public class com.jhlabs.math.MarbleFunction extends com.jhlabs.math.CompoundFunction2D
{

    public void <init>()
    {
        com.jhlabs.math.TurbulenceFunction $r1;
        com.jhlabs.math.Noise $r2;
        com.jhlabs.math.MarbleFunction r0;

        r0 := @this: com.jhlabs.math.MarbleFunction;

        $r1 = new com.jhlabs.math.TurbulenceFunction;

        $r2 = new com.jhlabs.math.Noise;

        specialinvoke $r2.<com.jhlabs.math.Noise: void <init>()>();

        specialinvoke $r1.<com.jhlabs.math.TurbulenceFunction: void <init>(com.jhlabs.math.Function2D,float)>($r2, 6.0F);

        specialinvoke r0.<com.jhlabs.math.CompoundFunction2D: void <init>(com.jhlabs.math.Function2D)>($r1);

        return;
    }

    public void <init>(com.jhlabs.math.Function2D)
    {
        com.jhlabs.math.Function2D r1;
        com.jhlabs.math.MarbleFunction r0;

        r0 := @this: com.jhlabs.math.MarbleFunction;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        specialinvoke r0.<com.jhlabs.math.CompoundFunction2D: void <init>(com.jhlabs.math.Function2D)>(r1);

        return;
    }

    public float evaluate(float, float)
    {
        com.jhlabs.math.Function2D $r1;
        com.jhlabs.math.MarbleFunction r0;
        float f0, f1, $f2, $f3;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.jhlabs.math.MarbleFunction;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<com.jhlabs.math.CompoundFunction2D: com.jhlabs.math.Function2D basis>;

        $f2 = interfaceinvoke $r1.<com.jhlabs.math.Function2D: float evaluate(float,float)>(f0, f1);

        $d0 = (double) $f2;

        $d1 = 8.0 * $d0;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d3 = $d2 + 1.0;

        $d4 = 0.5 * $d3;

        $d5 = staticinvoke <java.lang.Math: double pow(double,double)>($d4, 0.77);

        $f3 = (float) $d5;

        return $f3;
    }
}
