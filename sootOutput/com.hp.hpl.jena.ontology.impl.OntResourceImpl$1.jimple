final class com.hp.hpl.jena.ontology.impl.OntResourceImpl$1 extends com.hp.hpl.jena.enhanced.Implementation
{

    void <init>()
    {
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$1 r0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl$1;

        specialinvoke r0.<com.hp.hpl.jena.enhanced.Implementation: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.enhanced.EnhNode wrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.ontology.ConversionException $r3;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$1 r0;
        com.hp.hpl.jena.enhanced.EnhGraph r2;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl $r10;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl$1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.ontology.impl.OntResourceImpl$1: boolean canWrap(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        if $z0 == 0 goto label1;

        $r10 = new com.hp.hpl.jena.ontology.impl.OntResourceImpl;

        specialinvoke $r10.<com.hp.hpl.jena.ontology.impl.OntResourceImpl: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.enhanced.EnhGraph)>(r1, r2);

        return $r10;

     label1:
        $r3 = new com.hp.hpl.jena.ontology.ConversionException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert node ");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to OntResource");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.ontology.ConversionException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public boolean canWrap(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.enhanced.EnhGraph)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.ontology.impl.OntResourceImpl$1 r1;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.enhanced.EnhGraph r2;

        r1 := @this: com.hp.hpl.jena.ontology.impl.OntResourceImpl$1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.enhanced.EnhGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
