public final class org.waveprotocol.wave.model.document.raw.impl.Element extends org.waveprotocol.wave.model.document.raw.impl.Node implements org.waveprotocol.wave.model.document.Doc$E
{
    private final java.lang.String tagName;
    private java.util.Map backingAttributeMap;
    private java.util.Map publicAttributeMap;
    private java.util.Map properties;
    public static final org.waveprotocol.wave.model.document.util.ElementManager ELEMENT_MANAGER;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.lang.String tagName> = r1;

        return;
    }

    public void setProperty(org.waveprotocol.wave.model.document.util.Property, java.lang.Object)
    {
        java.util.Map $r1;
        org.waveprotocol.wave.model.document.util.Property r2;
        int $i0;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.Object r4;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Property;

        r4 := @parameter1: java.lang.Object;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map getTransientData()>();

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Property: int getId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r4);

        return;
    }

    public java.lang.Object getProperty(org.waveprotocol.wave.model.document.util.Property)
    {
        java.util.Map $r1;
        org.waveprotocol.wave.model.document.util.Property r2;
        int $i0;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.Object $r4;
        java.lang.Integer $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Property;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map getTransientData()>();

        $i0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Property: int getId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        return $r4;
    }

    private java.util.Map getTransientData()
    {
        java.util.Map $r1, $r2;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.util.HashMap $r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map properties>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map properties> = $r3;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map properties>;

        return $r2;
    }

    public boolean isContentAttached()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()>();

        if $r1 != null goto label1;

        $z0 = 0;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()>();

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.raw.impl.Element: boolean isContentAttached()>();

     label2:
        return $z0;
    }

    public short getNodeType()
    {
        short $s0;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $s0 = <org.waveprotocol.wave.model.document.indexed.NodeType: short ELEMENT_NODE>;

        return $s0;
    }

    public java.util.Map getAttributes()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map publicAttributeMap>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: void constructMaps()>();

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map publicAttributeMap>;

        return $r2;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node insertBefore(org.waveprotocol.wave.model.document.raw.impl.Node, org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Element $r1, r3, $r4, $r6;
        java.lang.AssertionError $r5, $r7;
        org.waveprotocol.wave.model.document.raw.impl.Node r0, r2, r8;
        boolean $z0, $z1, $z2;

        r3 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        r2 := @parameter1: org.waveprotocol.wave.model.document.raw.impl.Node;

        $z0 = <org.waveprotocol.wave.model.document.raw.impl.Element: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 == null goto label1;

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()>();

        if $r6 == r3 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("insertBefore: refChild is not child of parent");

        throw $r7;

     label1:
        $z2 = <org.waveprotocol.wave.model.document.raw.impl.Element: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: boolean isOrIsAncestorOf(org.waveprotocol.wave.model.document.raw.impl.Node)>(r3);

        if $z1 == 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("insertBefore: newChild is or is an ancestor of parent!");

        throw $r5;

     label2:
        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element parent>;

        if $r1 == null goto label3;

        $r4 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element parent>;

        virtualinvoke $r4.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node removeChild(org.waveprotocol.wave.model.document.raw.impl.Node)>(r0);

     label3:
        if r2 == null goto label4;

        r8 = r2.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling>;

        r2.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling> = r0;

        goto label5;

     label4:
        r8 = r3.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node lastChild>;

        r3.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node lastChild> = r0;

     label5:
        if r8 == null goto label6;

        r8.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node nextSibling> = r0;

        goto label7;

     label6:
        r3.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node firstChild> = r0;

     label7:
        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element parent> = r3;

        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling> = r8;

        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node nextSibling> = r2;

        return r0;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Node removeChild(org.waveprotocol.wave.model.document.raw.impl.Node)
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r0, r3, r4;
        org.waveprotocol.wave.model.document.raw.impl.Element $r1, r2;
        java.lang.IllegalArgumentException $r5;

        r2 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r0 := @parameter0: org.waveprotocol.wave.model.document.raw.impl.Node;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element getParentElement()>();

        if $r1 == r2 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("removeChild: oldChild is not child of parent");

        throw $r5;

     label1:
        r3 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling>;

        r4 = r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node nextSibling>;

        if r3 == null goto label2;

        r3.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node nextSibling> = r4;

        goto label3;

     label2:
        r2.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node firstChild> = r4;

     label3:
        if r4 == null goto label4;

        r4.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling> = r3;

        goto label5;

     label4:
        r2.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node lastChild> = r3;

     label5:
        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node previousSibling> = null;

        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node nextSibling> = null;

        r0.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Element parent> = null;

        return r0;
    }

    public java.lang.String getTagName()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.lang.String tagName>;

        return $r1;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        java.util.Map $r1, $r2;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.Object $r4;
        java.lang.String r3, $r5;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map backingAttributeMap>;

        if $r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map getBackingAttributeMap()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r5 = (java.lang.String) $r4;

     label2:
        return $r5;
    }

    public void setAttribute(java.lang.String, java.lang.String)
    {
        java.util.Map $r1;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map getBackingAttributeMap()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.lang.String r2;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map getBackingAttributeMap()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        return;
    }

    public int calculateSize()
    {
        org.waveprotocol.wave.model.document.raw.impl.Node r1;
        int $i0, i1;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        i1 = 2;

        r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.raw.impl.Node getFirstChild()>();

     label1:
        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<org.waveprotocol.wave.model.document.raw.impl.Node: int calculateSize()>();

        i1 = i1 + $i0;

        r1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.raw.impl.Node: org.waveprotocol.wave.model.document.raw.impl.Node getNextSibling()>();

        goto label1;

     label2:
        return i1;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Element asElement()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        return r0;
    }

    public org.waveprotocol.wave.model.document.raw.impl.Text asText()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        return null;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl $r2;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r0;
        org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc $r4;
        org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory $r1;
        org.waveprotocol.wave.model.document.raw.impl.Element r3;
        java.lang.String $r5;

        r3 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = <org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory BUILDER>;

        $r0 = <org.waveprotocol.wave.model.document.operation.Attributes: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl EMPTY_MAP>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl$Factory: org.waveprotocol.wave.model.document.raw.impl.RawDocumentImpl create(java.lang.String,java.util.Map)>("x", $r0);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc createNode(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r2, r3);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.XmlStringBuilderDoc: java.lang.String toString()>();

        return $r5;
    }

    private java.util.Map getBackingAttributeMap()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map backingAttributeMap>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.raw.impl.Element: void constructMaps()>();

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map backingAttributeMap>;

        return $r2;
    }

    private void constructMaps()
    {
        java.util.TreeMap $r1;
        java.util.Map $r2, $r3;
        org.waveprotocol.wave.model.document.raw.impl.Element r0;

        r0 := @this: org.waveprotocol.wave.model.document.raw.impl.Element;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map backingAttributeMap> = $r1;

        $r2 = r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map backingAttributeMap>;

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        r0.<org.waveprotocol.wave.model.document.raw.impl.Element: java.util.Map publicAttributeMap> = $r3;

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.raw.impl.Element$1 $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/raw/impl/Element;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.raw.impl.Element: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.raw.impl.Element$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.raw.impl.Element$1: void <init>()>();

        <org.waveprotocol.wave.model.document.raw.impl.Element: org.waveprotocol.wave.model.document.util.ElementManager ELEMENT_MANAGER> = $r1;

        return;
    }
}
