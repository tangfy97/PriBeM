public class com.hp.hpl.jena.ontology.OntTools extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.ontology.OntTools r0;

        r0 := @this: com.hp.hpl.jena.ontology.OntTools;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.ontology.OntClass getLCA(com.hp.hpl.jena.ontology.OntModel, com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntClass)
    {
        com.hp.hpl.jena.rdf.model.RDFNode $r4;
        com.hp.hpl.jena.shared.JenaException $r9;
        com.hp.hpl.jena.ontology.Profile $r1;
        com.hp.hpl.jena.rdf.model.Resource $r2, $r3;
        com.hp.hpl.jena.ontology.OntClass r5, r6, $r7, $r8;
        com.hp.hpl.jena.ontology.OntModel r0;

        r0 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r5 := @parameter1: com.hp.hpl.jena.ontology.OntClass;

        r6 := @parameter2: com.hp.hpl.jena.ontology.OntClass;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource THING()>();

        if $r2 != null goto label1;

        $r9 = new com.hp.hpl.jena.shared.JenaException;

        specialinvoke $r9.<com.hp.hpl.jena.shared.JenaException: void <init>(java.lang.String)>("The given OntModel has a language profile that does not define a generic root class (such as owl:Thing)");

        throw $r9;

     label1:
        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.Resource inModel(com.hp.hpl.jena.rdf.model.Model)>(r0);

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.RDFNode as(java.lang.Class)>(class "Lcom/hp/hpl/jena/ontology/OntClass;");

        $r7 = (com.hp.hpl.jena.ontology.OntClass) $r4;

        $r8 = staticinvoke <com.hp.hpl.jena.ontology.OntTools: com.hp.hpl.jena.ontology.OntClass getLCA(com.hp.hpl.jena.ontology.OntModel,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass)>(r0, $r7, r5, r6);

        return $r8;
    }

    public static com.hp.hpl.jena.ontology.OntClass getLCA(com.hp.hpl.jena.ontology.OntModel, com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntClass)
    {
        com.hp.hpl.jena.rdf.model.Resource $r4;
        com.hp.hpl.jena.ontology.OntTools$LCAIndex $r3;
        com.hp.hpl.jena.ontology.OntClass r0, r1, r2, $r5;
        com.hp.hpl.jena.ontology.OntModel r6;
        boolean $z0, $z1, $z2, $z3;

        r6 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        r1 := @parameter1: com.hp.hpl.jena.ontology.OntClass;

        r0 := @parameter2: com.hp.hpl.jena.ontology.OntClass;

        r2 := @parameter3: com.hp.hpl.jena.ontology.OntClass;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r1;

     label2:
        $z2 = interfaceinvoke r0.<com.hp.hpl.jena.ontology.OntClass: boolean hasSubClass(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        if $z2 == 0 goto label3;

        return r0;

     label3:
        $z3 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntClass: boolean hasSubClass(com.hp.hpl.jena.rdf.model.Resource)>(r0);

        if $z3 == 0 goto label4;

        return r2;

     label4:
        $r3 = new com.hp.hpl.jena.ontology.OntTools$LCAIndex;

        specialinvoke $r3.<com.hp.hpl.jena.ontology.OntTools$LCAIndex: void <init>()>();

        staticinvoke <com.hp.hpl.jena.ontology.OntTools: com.hp.hpl.jena.ontology.OntTools$DisjointSet lca(com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntTools$LCAIndex)>(r1, r0, r2, $r3);

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.ontology.OntTools$LCAIndex: com.hp.hpl.jena.rdf.model.Resource getLCA(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>(r0, r2);

        $r5 = (com.hp.hpl.jena.ontology.OntClass) $r4;

        return $r5;
    }

    public static com.hp.hpl.jena.ontology.OntTools$Path findShortestPath(com.hp.hpl.jena.rdf.model.Model, com.hp.hpl.jena.rdf.model.Resource, com.hp.hpl.jena.rdf.model.RDFNode, com.hp.hpl.jena.util.iterator.Filter)
    {
        com.hp.hpl.jena.ontology.OntTools$Path r8, $r16, $r17, $r20, r21;
        com.hp.hpl.jena.util.iterator.Filter r5;
        java.util.HashSet $r1;
        com.hp.hpl.jena.rdf.model.StmtIterator $r4, $r11;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.rdf.model.RDFNode r9, $r15;
        com.hp.hpl.jena.rdf.model.Statement r14, $r19;
        com.hp.hpl.jena.rdf.model.Resource r3, $r10;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6, $r12;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.lang.Object $r7, $r13, $r18;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        r9 := @parameter2: com.hp.hpl.jena.rdf.model.RDFNode;

        r5 := @parameter3: com.hp.hpl.jena.util.iterator.Filter;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Property,com.hp.hpl.jena.rdf.model.RDFNode)>(r3, null, null);

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>(r5);

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = new com.hp.hpl.jena.ontology.OntTools$Path;

        specialinvoke $r17.<com.hp.hpl.jena.ontology.OntTools$Path: void <init>()>();

        $r18 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (com.hp.hpl.jena.rdf.model.Statement) $r18;

        $r20 = virtualinvoke $r17.<com.hp.hpl.jena.ontology.OntTools$Path: com.hp.hpl.jena.ontology.OntTools$Path append(com.hp.hpl.jena.rdf.model.Statement)>($r19);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label1;

     label2:
        r21 = null;

     label3:
        if r21 != null goto label8;

        $z1 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label8;

        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>(0);

        r8 = (com.hp.hpl.jena.ontology.OntTools$Path) $r7;

        $z2 = virtualinvoke r8.<com.hp.hpl.jena.ontology.OntTools$Path: boolean hasTerminus(com.hp.hpl.jena.rdf.model.RDFNode)>(r9);

        if $z2 == 0 goto label4;

        r21 = r8;

        goto label7;

     label4:
        $r10 = virtualinvoke r8.<com.hp.hpl.jena.ontology.OntTools$Path: com.hp.hpl.jena.rdf.model.Resource getTerminalResource()>();

        if $r10 == null goto label7;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r10);

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties()>();

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>(r5);

     label5:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.rdf.model.Statement) $r13;

        $r15 = interfaceinvoke r14.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $z4 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z4 != 0 goto label6;

        $r16 = virtualinvoke r8.<com.hp.hpl.jena.ontology.OntTools$Path: com.hp.hpl.jena.ontology.OntTools$Path append(com.hp.hpl.jena.rdf.model.Statement)>(r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

     label6:
        goto label5;

     label7:
        goto label3;

     label8:
        return r21;
    }

    public static java.util.List namedHierarchyRoots(com.hp.hpl.jena.ontology.OntModel)
    {
        java.util.ArrayList $r0, $r1;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r6;
        java.lang.Object $r4;
        com.hp.hpl.jena.ontology.OntClass r5;
        com.hp.hpl.jena.ontology.OntModel r2;
        boolean $z0;

        r2 := @parameter0: com.hp.hpl.jena.ontology.OntModel;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntModel: com.hp.hpl.jena.util.iterator.ExtendedIterator listHierarchyRootClasses()>();

        staticinvoke <com.hp.hpl.jena.ontology.OntTools: void partitionByNamed(java.util.Iterator,java.util.List,java.util.List)>($r3, $r0, $r1);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0);

        r5 = (com.hp.hpl.jena.ontology.OntClass) $r4;

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.ontology.OntClass: com.hp.hpl.jena.util.iterator.ExtendedIterator listSubClasses(boolean)>(1);

        staticinvoke <com.hp.hpl.jena.ontology.OntTools: void partitionByNamed(java.util.Iterator,java.util.List,java.util.List)>($r6, $r0, $r1);

        goto label1;

     label2:
        return $r0;
    }

    protected static com.hp.hpl.jena.ontology.OntTools$DisjointSet lca(com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntTools$LCAIndex)
    {
        com.hp.hpl.jena.ontology.OntClass r1, r4, r5, r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.ontology.OntTools$DisjointSet $r2, $r10, $r11;
        com.hp.hpl.jena.ontology.Profile $r8;
        com.hp.hpl.jena.rdf.model.Resource $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.ontology.OntTools$LCAIndex r0;
        java.lang.Object $r6;

        r1 := @parameter0: com.hp.hpl.jena.ontology.OntClass;

        r4 := @parameter1: com.hp.hpl.jena.ontology.OntClass;

        r5 := @parameter2: com.hp.hpl.jena.ontology.OntClass;

        r0 := @parameter3: com.hp.hpl.jena.ontology.OntTools$LCAIndex;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntTools$LCAIndex: com.hp.hpl.jena.ontology.OntTools$DisjointSet getSet(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: boolean isBlack()>();

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: void setAncestor(com.hp.hpl.jena.ontology.OntTools$DisjointSet)>($r2);

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntClass: com.hp.hpl.jena.util.iterator.ExtendedIterator listSubClasses(boolean)>(1);

     label2:
        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.ontology.OntClass) $r6;

        $z3 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label2;

        $r8 = interfaceinvoke r1.<com.hp.hpl.jena.ontology.OntClass: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource NOTHING()>();

        $z4 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label3;

        goto label2;

     label3:
        $r10 = staticinvoke <com.hp.hpl.jena.ontology.OntTools: com.hp.hpl.jena.ontology.OntTools$DisjointSet lca(com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntTools$LCAIndex)>(r7, r4, r5, r0);

        virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: void union(com.hp.hpl.jena.ontology.OntTools$DisjointSet)>($r10);

        $r11 = virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: com.hp.hpl.jena.ontology.OntTools$DisjointSet find()>();

        virtualinvoke $r11.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: void setAncestor(com.hp.hpl.jena.ontology.OntTools$DisjointSet)>($r2);

        goto label2;

     label4:
        virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: void setBlack()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label5;

        staticinvoke <com.hp.hpl.jena.ontology.OntTools: void checkSolution(com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntTools$LCAIndex)>(r4, r5, r0);

        goto label6;

     label5:
        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label6;

        staticinvoke <com.hp.hpl.jena.ontology.OntTools: void checkSolution(com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntClass,com.hp.hpl.jena.ontology.OntTools$LCAIndex)>(r5, r4, r0);

     label6:
        return $r2;
    }

    protected static void checkSolution(com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntClass, com.hp.hpl.jena.ontology.OntTools$LCAIndex)
    {
        com.hp.hpl.jena.ontology.OntTools$DisjointSet $r2, $r4, $r5, $r6;
        com.hp.hpl.jena.rdf.model.Resource $r7;
        com.hp.hpl.jena.ontology.OntTools$LCAIndex r0;
        com.hp.hpl.jena.ontology.OntClass r1, r3, r8;
        boolean $z0, $z1, $z2, $z3;

        r3 := @parameter0: com.hp.hpl.jena.ontology.OntClass;

        r1 := @parameter1: com.hp.hpl.jena.ontology.OntClass;

        r0 := @parameter2: com.hp.hpl.jena.ontology.OntTools$LCAIndex;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntTools$LCAIndex: com.hp.hpl.jena.ontology.OntTools$DisjointSet getSet(com.hp.hpl.jena.rdf.model.Resource)>(r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.ontology.OntTools$LCAIndex: com.hp.hpl.jena.ontology.OntTools$DisjointSet getSet(com.hp.hpl.jena.rdf.model.Resource)>(r3);

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: boolean isBlack()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: boolean used()>();

        if $z1 != 0 goto label1;

        if $r4 == null goto label1;

        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: boolean isBlack()>();

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke $r4.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: boolean used()>();

        if $z3 != 0 goto label1;

        virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: void setUsed()>();

        virtualinvoke $r4.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: void setUsed()>();

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: com.hp.hpl.jena.ontology.OntTools$DisjointSet find()>();

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: com.hp.hpl.jena.ontology.OntTools$DisjointSet getAncestor()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.ontology.OntTools$DisjointSet: com.hp.hpl.jena.rdf.model.Resource getNode()>();

        r8 = (com.hp.hpl.jena.ontology.OntClass) $r7;

        virtualinvoke r0.<com.hp.hpl.jena.ontology.OntTools$LCAIndex: void setLCA(com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource,com.hp.hpl.jena.rdf.model.Resource)>(r3, r1, r8);

     label1:
        return;
    }

    protected static void partitionByNamed(java.util.Iterator, java.util.List, java.util.List)
    {
        com.hp.hpl.jena.ontology.OntClass r2, r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        java.util.Iterator r0;
        com.hp.hpl.jena.ontology.Profile $r4;
        com.hp.hpl.jena.rdf.model.Resource $r5;
        java.util.List r3, r7, $r10;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        java.lang.Object $r1, $r8;

        r0 := @parameter0: java.util.Iterator;

        r3 := @parameter1: java.util.List;

        r7 := @parameter2: java.util.List;

     label01:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.hp.hpl.jena.ontology.OntClass) $r1;

        z7 = 0;

        z9 = 0;

        z8 = 0;

        $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label02;

        z7 = 1;

        z9 = 1;

        z8 = 1;

     label02:
        $r4 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntClass: com.hp.hpl.jena.ontology.Profile getProfile()>();

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.ontology.Profile: com.hp.hpl.jena.rdf.model.Resource THING()>();

        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntClass: com.hp.hpl.jena.util.iterator.ExtendedIterator listSuperClasses()>();

     label03:
        if z9 != 0 goto label06;

        $z3 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.ontology.OntClass) $r8;

        if $r5 == null goto label04;

        $z6 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z6 != 0 goto label05;

     label04:
        $z4 = interfaceinvoke r9.<com.hp.hpl.jena.ontology.OntClass: boolean isAnon()>();

        if $z4 != 0 goto label05;

        $z5 = virtualinvoke r9.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z5 != 0 goto label05;

        z7 = 1;

        z9 = 1;

        z8 = 1;

     label05:
        goto label03;

     label06:
        if z8 != 0 goto label09;

        $z2 = interfaceinvoke r2.<com.hp.hpl.jena.ontology.OntClass: boolean isAnon()>();

        if $z2 == 0 goto label07;

        $r10 = r7;

        goto label08;

     label07:
        $r10 = r3;

     label08:
        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r2);

     label09:
        goto label01;

     label10:
        return;
    }
}
