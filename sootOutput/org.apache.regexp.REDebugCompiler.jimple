public class org.apache.regexp.REDebugCompiler extends org.apache.regexp.RECompiler
{
    static java.util.Hashtable hashOpcode;

    public void <init>()
    {
        org.apache.regexp.REDebugCompiler r0;

        r0 := @this: org.apache.regexp.REDebugCompiler;

        specialinvoke r0.<org.apache.regexp.RECompiler: void <init>()>();

        return;
    }

    java.lang.String opcodeToString(char)
    {
        org.apache.regexp.REDebugCompiler r3;
        int $i1;
        char c0;
        java.lang.Object $r2;
        java.lang.String r4;
        java.lang.Integer $r5;
        java.util.Hashtable $r1;

        r3 := @this: org.apache.regexp.REDebugCompiler;

        c0 := @parameter0: char;

        $r1 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r5 = new java.lang.Integer;

        $i1 = (int) c0;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i1);

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        r4 = (java.lang.String) $r2;

        if r4 != null goto label1;

        r4 = "OP_????";

     label1:
        return r4;
    }

    java.lang.String charToString(char)
    {
        org.apache.regexp.REDebugCompiler r5;
        char c0;
        java.lang.StringBuffer $r1, $r2, $r6;
        int $i1, $i2, $i3;
        java.lang.String $r3, $r4;

        r5 := @this: org.apache.regexp.REDebugCompiler;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 32 goto label1;

        $i2 = (int) c0;

        if $i2 <= 127 goto label2;

     label1:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\");

        $i3 = (int) c0;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label2:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        return $r4;
    }

    java.lang.String nodeToString(int)
    {
        org.apache.regexp.REDebugCompiler r0;
        char c2, c4;
        java.lang.StringBuffer $r5, $r6, $r7, $r9;
        int i0, $i1, $i3, $i5;
        char[] $r1, $r2;
        java.lang.String $r4, $r8;

        r0 := @this: org.apache.regexp.REDebugCompiler;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i1 = i0 + 0;

        c2 = $r1[$i1];

        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i3 = i0 + 1;

        c4 = $r2[$i3];

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.regexp.REDebugCompiler: java.lang.String opcodeToString(char)>(c2);

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", opdata = ");

        $i5 = (int) c4;

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public void dumpProgram(java.io.PrintWriter)
    {
        java.io.PrintWriter r4;
        short s6;
        java.lang.StringBuffer $r6, $r7, $r9, $r10, $r18, $r19, $r21, $r24, $r25;
        int $i0, $i2, $i4, $i7, $i8, $i9, i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.lang.String $r8, $r11, $r13, $r17, $r20, $r22, $r23;
        org.apache.regexp.REDebugCompiler r0;
        char c1, c3, $c5, $c10, c11, c12;
        char[] $r1, $r2, $r3, $r12, $r14, $r15;

        r0 := @this: org.apache.regexp.REDebugCompiler;

        r4 := @parameter0: java.io.PrintWriter;

        i13 = 0;

        goto label12;

     label01:
        $r1 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i0 = i13 + 0;

        c1 = $r1[$i0];

        $r2 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i2 = i13 + 1;

        c3 = $r2[$i2];

        $r3 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i4 = i13 + 2;

        $c5 = $r3[$i4];

        s6 = (short) $c5;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i13);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". ");

        $r8 = virtualinvoke r0.<org.apache.regexp.REDebugCompiler: java.lang.String nodeToString(int)>(i13);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", next = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r11);

        if s6 != 0 goto label02;

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>("none");

        goto label03;

     label02:
        $i18 = (int) s6;

        $i7 = i13 + $i18;

        virtualinvoke r4.<java.io.PrintWriter: void print(int)>($i7);

     label03:
        i13 = i13 + 3;

        $i19 = (int) c1;

        if $i19 != 91 goto label08;

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(", [");

        i14 = 0;

        goto label07;

     label04:
        $r14 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        i15 = i13 + 1;

        c11 = $r14[i13];

        $r15 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        i13 = i15 + 1;

        c12 = $r15[i15];

        $i20 = (int) c11;

        $i21 = (int) c12;

        if $i20 != $i21 goto label05;

        $r23 = virtualinvoke r0.<org.apache.regexp.REDebugCompiler: java.lang.String charToString(char)>(c11);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r23);

        goto label06;

     label05:
        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke r0.<org.apache.regexp.REDebugCompiler: java.lang.String charToString(char)>(c11);

        $r18 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r20 = virtualinvoke r0.<org.apache.regexp.REDebugCompiler: java.lang.String charToString(char)>(c12);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r22);

     label06:
        i14 = i14 + 1;

     label07:
        $i22 = (int) c3;

        if i14 < $i22 goto label04;

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>("]");

     label08:
        $i23 = (int) c1;

        if $i23 != 65 goto label11;

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(", \"");

        $i24 = (int) c3;

        i16 = $i24;

        goto label10;

     label09:
        $r12 = r0.<org.apache.regexp.RECompiler: char[] instruction>;

        $i9 = i13;

        i13 = i13 + 1;

        $c10 = $r12[$i9];

        $r13 = virtualinvoke r0.<org.apache.regexp.REDebugCompiler: java.lang.String charToString(char)>($c10);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>($r13);

     label10:
        $i8 = i16;

        i16 = i16 - 1;

        if $i8 != 0 goto label09;

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>("\"");

     label11:
        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>("");

     label12:
        $i17 = r0.<org.apache.regexp.RECompiler: int lenInstruction>;

        if i13 < $i17 goto label01;

        return;
    }

    static void <clinit>()
    {
        java.lang.Integer $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43;
        java.util.Hashtable $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode> = $r0;

        $r2 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(56);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, "OP_RELUCTANTSTAR");

        $r4 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(61);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, "OP_RELUCTANTPLUS");

        $r6 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>(47);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "OP_RELUCTANTMAYBE");

        $r8 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r7 = new java.lang.Integer;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>(69);

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "OP_END");

        $r10 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>(94);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "OP_BOL");

        $r12 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r11 = new java.lang.Integer;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>(36);

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "OP_EOL");

        $r14 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r13 = new java.lang.Integer;

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>(46);

        virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "OP_ANY");

        $r16 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r15 = new java.lang.Integer;

        specialinvoke $r15.<java.lang.Integer: void <init>(int)>(91);

        virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, "OP_ANYOF");

        $r18 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>(124);

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, "OP_BRANCH");

        $r20 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r19 = new java.lang.Integer;

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>(65);

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, "OP_ATOM");

        $r22 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r21 = new java.lang.Integer;

        specialinvoke $r21.<java.lang.Integer: void <init>(int)>(42);

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, "OP_STAR");

        $r24 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r23 = new java.lang.Integer;

        specialinvoke $r23.<java.lang.Integer: void <init>(int)>(43);

        virtualinvoke $r24.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, "OP_PLUS");

        $r26 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r25 = new java.lang.Integer;

        specialinvoke $r25.<java.lang.Integer: void <init>(int)>(63);

        virtualinvoke $r26.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, "OP_MAYBE");

        $r28 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r27 = new java.lang.Integer;

        specialinvoke $r27.<java.lang.Integer: void <init>(int)>(78);

        virtualinvoke $r28.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, "OP_NOTHING");

        $r30 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r29 = new java.lang.Integer;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>(71);

        virtualinvoke $r30.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, "OP_GOTO");

        $r32 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r31 = new java.lang.Integer;

        specialinvoke $r31.<java.lang.Integer: void <init>(int)>(92);

        virtualinvoke $r32.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, "OP_ESCAPE");

        $r34 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r33 = new java.lang.Integer;

        specialinvoke $r33.<java.lang.Integer: void <init>(int)>(40);

        virtualinvoke $r34.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, "OP_OPEN");

        $r36 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r35 = new java.lang.Integer;

        specialinvoke $r35.<java.lang.Integer: void <init>(int)>(41);

        virtualinvoke $r36.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, "OP_CLOSE");

        $r38 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r37 = new java.lang.Integer;

        specialinvoke $r37.<java.lang.Integer: void <init>(int)>(35);

        virtualinvoke $r38.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, "OP_BACKREF");

        $r40 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r39 = new java.lang.Integer;

        specialinvoke $r39.<java.lang.Integer: void <init>(int)>(80);

        virtualinvoke $r40.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, "OP_POSIXCLASS");

        $r42 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r41 = new java.lang.Integer;

        specialinvoke $r41.<java.lang.Integer: void <init>(int)>(60);

        virtualinvoke $r42.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, "OP_OPEN_CLUSTER");

        $r44 = <org.apache.regexp.REDebugCompiler: java.util.Hashtable hashOpcode>;

        $r43 = new java.lang.Integer;

        specialinvoke $r43.<java.lang.Integer: void <init>(int)>(62);

        virtualinvoke $r44.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, "OP_CLOSE_CLUSTER");

        return;
    }
}
