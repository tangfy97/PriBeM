public class org.springframework.beans.factory.support.DefaultSingletonBeanRegistry extends org.springframework.core.SimpleAliasRegistry implements org.springframework.beans.factory.config.SingletonBeanRegistry
{
    protected static final java.lang.Object NULL_OBJECT;
    protected final org.apache.commons.logging.Log logger;
    private final java.util.Map singletonObjects;
    private final java.util.Map singletonFactories;
    private final java.util.Map earlySingletonObjects;
    private final java.util.Set registeredSingletons;
    private final java.util.Set singletonsCurrentlyInCreation;
    private java.util.Set suppressedExceptions;
    private boolean singletonsCurrentlyInDestruction;
    private final java.util.Map disposableBeans;
    private final java.util.Map containedBeanMap;
    private final java.util.Map dependentBeanMap;
    private final java.util.Map dependenciesForBeanMap;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.Object NULL_OBJECT> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.concurrent.ConcurrentHashMap $r3, $r10, $r11, $r12;
        java.util.Set $r8;
        java.util.HashMap $r4, $r5;
        java.util.HashSet $r7;
        java.util.LinkedHashMap $r9;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.LinkedHashSet $r6;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        specialinvoke r0.<org.springframework.core.SimpleAliasRegistry: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects> = $r5;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>(int)>(16);

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>($r7);

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set singletonsCurrentlyInCreation> = $r8;

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean singletonsCurrentlyInDestruction> = 0;

        $r9 = new java.util.LinkedHashMap;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans> = $r9;

        $r10 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map containedBeanMap> = $r10;

        $r11 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap> = $r11;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap> = $r12;

        return;
    }

    public void registerSingleton(java.lang.String, java.lang.Object) throws java.lang.IllegalStateException
    {
        java.lang.Throwable $r15;
        java.lang.IllegalStateException $r6;
        java.util.Map $r2, $r3;
        java.lang.String r0, $r14;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r1;
        java.lang.Object $r4, r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r1 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'beanName\' must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r4 == null goto label2;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not register object [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] under bean name \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': there is already object [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] bound");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label2:
        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void addSingleton(java.lang.String,java.lang.Object)>(r0, r5);

        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r15 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r15;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void addSingleton(java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r8;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set $r7;
        java.util.Map $r1, $r4, $r5, $r6;
        java.lang.Object r3, $r9;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        if r3 == null goto label2;

        $r9 = r3;

        goto label3;

     label2:
        $r9 = <org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.Object NULL_OBJECT>;

     label3:
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r9);

        $r5 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r6 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r7 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r2);

        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void addSingletonFactory(java.lang.String, org.springframework.beans.factory.ObjectFactory)
    {
        java.lang.Throwable $r8;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r1;
        java.util.Set $r7;
        org.springframework.beans.factory.ObjectFactory r0;
        java.util.Map $r2, $r4, $r5, $r6;
        java.lang.String r3;
        boolean $z0;

        r1 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.springframework.beans.factory.ObjectFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Singleton factory must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r2;

     label1:
        $r4 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        $r5 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r0);

        $r6 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        $r7 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label2:
        exitmonitor $r2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object getSingleton(java.lang.String)
    {
        java.lang.Object $r2;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.Object getSingleton(java.lang.String,boolean)>(r1, 1);

        return $r2;
    }

    protected java.lang.Object getSingleton(java.lang.String, boolean)
    {
        java.lang.Throwable $r14;
        java.util.Map $r2, $r5, $r6, $r8, $r12, $r13;
        java.lang.String r1;
        boolean z0;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        org.springframework.beans.factory.ObjectFactory r10;
        java.lang.Object $r3, $r4, $r7, $r9, $r11, r15, $r16;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r15 = $r3;

        if $r3 != null goto label6;

        $r5 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r5;

     label1:
        $r6 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r15 = $r7;

        if $r7 != null goto label2;

        if z0 == 0 goto label2;

        $r8 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (org.springframework.beans.factory.ObjectFactory) $r9;

        if r10 == null goto label2;

        $r11 = interfaceinvoke r10.<org.springframework.beans.factory.ObjectFactory: java.lang.Object getObject()>();

        r15 = $r11;

        $r12 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11);

        $r13 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label2:
        exitmonitor $r5;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        exitmonitor $r5;

     label5:
        throw $r14;

     label6:
        $r4 = <org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.Object NULL_OBJECT>;

        if r15 == $r4 goto label7;

        $r16 = r15;

        goto label8;

     label7:
        $r16 = null;

     label8:
        return $r16;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object getSingleton(java.lang.String, org.springframework.beans.factory.ObjectFactory)
    {
        java.util.Map $r2, $r3;
        boolean $z0, $z1, z2, $z3, $z5, $z6;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r1;
        java.util.Set $r6, $r19;
        java.lang.Exception r22;
        java.lang.StringBuilder $r10, $r12, $r13;
        java.lang.Throwable $r16, $r17;
        org.springframework.beans.factory.BeanCreationNotAllowedException $r15;
        org.springframework.beans.factory.BeanCreationException $r18;
        java.lang.String r0, $r14;
        java.util.LinkedHashSet $r9;
        java.util.Iterator $r20;
        org.springframework.beans.factory.ObjectFactory r7;
        java.lang.Object $r4, $r8, $r21, r23, $r24, $r25;
        org.apache.commons.logging.Log $r5, $r11;

        r1 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r0 := @parameter0: java.lang.String;

        r7 := @parameter1: org.springframework.beans.factory.ObjectFactory;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'beanName\' must not be null");

        $r2 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r2;

     label01:
        $r3 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r23 = $r4;

        if $r4 != null goto label16;

        $z0 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean singletonsCurrentlyInDestruction>;

        if $z0 == 0 goto label02;

        $r15 = new org.springframework.beans.factory.BeanCreationNotAllowedException;

        specialinvoke $r15.<org.springframework.beans.factory.BeanCreationNotAllowedException: void <init>(java.lang.String,java.lang.String)>(r0, "Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)");

        throw $r15;

     label02:
        $r5 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label03;

        $r11 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating shared instance of singleton bean \'");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label03:
        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void beforeSingletonCreation(java.lang.String)>(r0);

        $r6 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions>;

        if $r6 != null goto label04;

        $z6 = 1;

        $z5 = 1;

        goto label05;

     label04:
        $z6 = 0;

        $z5 = 0;

     label05:
        z2 = $z6;

        if $z5 == 0 goto label06;

        $r9 = new java.util.LinkedHashSet;

        specialinvoke $r9.<java.util.LinkedHashSet: void <init>()>();

        r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions> = $r9;

     label06:
        $r8 = interfaceinvoke r7.<org.springframework.beans.factory.ObjectFactory: java.lang.Object getObject()>();

        r23 = $r8;

     label07:
        goto label14;

     label08:
        $r18 := @caughtexception;

        if z2 == 0 goto label11;

        $r19 = r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions>;

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label09:
        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.Exception) $r21;

        virtualinvoke $r18.<org.springframework.beans.factory.BeanCreationException: void addRelatedCause(java.lang.Throwable)>(r22);

     label10:
        $z3 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label09;

     label11:
        throw $r18;

     label12:
        $r17 := @caughtexception;

        if z2 == 0 goto label13;

        r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions> = null;

     label13:
        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void afterSingletonCreation(java.lang.String)>(r0);

        throw $r17;

     label14:
        if z2 == 0 goto label15;

        r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions> = null;

     label15:
        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void afterSingletonCreation(java.lang.String)>(r0);

        virtualinvoke r1.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void addSingleton(java.lang.String,java.lang.Object)>(r0, $r8);

     label16:
        $r24 = <org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.Object NULL_OBJECT>;

        if r23 == $r24 goto label17;

        $r25 = r23;

        goto label18;

     label17:
        $r25 = null;

     label18:
        exitmonitor $r2;

     label19:
        return $r25;

     label20:
        $r16 := @caughtexception;

        exitmonitor $r2;

     label21:
        throw $r16;

        catch org.springframework.beans.factory.BeanCreationException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label12 with label12;
        catch java.lang.Throwable from label01 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    protected void onSuppressedException(java.lang.Exception)
    {
        java.lang.Throwable $r5;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r1;
        java.util.Set $r2, $r4;
        java.lang.Exception r3;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r3 := @parameter0: java.lang.Exception;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions>;

        if $r2 == null goto label2;

        $r4 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set suppressedExceptions>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label2:
        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void removeSingleton(java.lang.String)
    {
        java.lang.Throwable $r7;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set $r6;
        java.util.Map $r1, $r3, $r4, $r5;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r4 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r5 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r6 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons>;

        interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsSingleton(java.lang.String)
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String[] getSingletonNames()
    {
        java.lang.Throwable $r4;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.lang.String[] $r3;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons>;

        $r3 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r2);

        exitmonitor $r1;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getSingletonCount()
    {
        java.lang.Throwable $r3;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r1;
        int $i0;
        java.util.Set $r2;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons>;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        exitmonitor $r1;

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void beforeSingletonCreation(java.lang.String)
    {
        org.springframework.beans.factory.BeanCurrentlyInCreationException $r3;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set singletonsCurrentlyInCreation>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new org.springframework.beans.factory.BeanCurrentlyInCreationException;

        specialinvoke $r3.<org.springframework.beans.factory.BeanCurrentlyInCreationException: void <init>(java.lang.String)>(r1);

        throw $r3;

     label1:
        return;
    }

    protected void afterSingletonCreation(java.lang.String)
    {
        java.lang.IllegalStateException $r3;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String r1, $r7;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set singletonsCurrentlyInCreation>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Singleton \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' isn\'t currently in creation");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public final boolean isSingletonCurrentlyInCreation(java.lang.String)
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set singletonsCurrentlyInCreation>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void registerDisposableBean(java.lang.String, org.springframework.beans.factory.DisposableBean)
    {
        java.lang.Throwable $r5;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r1, $r4;
        org.springframework.beans.factory.DisposableBean r3;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.springframework.beans.factory.DisposableBean;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans>;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerContainedBean(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r8;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set r9;
        java.util.Map $r1, $r3, $r7;
        java.lang.Object $r4;
        java.lang.String r2, r5;
        java.util.LinkedHashSet $r6;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r5 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map containedBeanMap>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map containedBeanMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r9 = (java.util.Set) $r4;

        if r9 != null goto label2;

        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>(int)>(8);

        r9 = $r6;

        $r7 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map containedBeanMap>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6);

     label2:
        interfaceinvoke r9.<java.util.Set: boolean add(java.lang.Object)>(r5);

        exitmonitor $r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r8;

     label6:
        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void registerDependentBean(java.lang.String,java.lang.String)>(r5, r2);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void registerDependentBean(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r14, $r15;
        java.util.Map $r3, $r4, $r7, $r8, $r11, $r13;
        java.lang.String r1, $r2, r6;
        java.util.LinkedHashSet $r10, $r12;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set r16, r17;
        java.lang.Object $r5, $r9;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.lang.String canonicalName(java.lang.String)>(r1);

        $r3 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        entermonitor $r3;

     label01:
        $r4 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r16 = (java.util.Set) $r5;

        if r16 != null goto label02;

        $r12 = new java.util.LinkedHashSet;

        specialinvoke $r12.<java.util.LinkedHashSet: void <init>(int)>(8);

        r16 = $r12;

        $r13 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r12);

     label02:
        interfaceinvoke r16.<java.util.Set: boolean add(java.lang.Object)>(r6);

        exitmonitor $r3;

     label03:
        goto label06;

     label04:
        $r15 := @caughtexception;

        exitmonitor $r3;

     label05:
        throw $r15;

     label06:
        $r7 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap>;

        entermonitor $r7;

     label07:
        $r8 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r17 = (java.util.Set) $r9;

        if r17 != null goto label08;

        $r10 = new java.util.LinkedHashSet;

        specialinvoke $r10.<java.util.LinkedHashSet: void <init>(int)>(8);

        r17 = $r10;

        $r11 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r10);

     label08:
        interfaceinvoke r17.<java.util.Set: boolean add(java.lang.Object)>($r2);

        exitmonitor $r7;

     label09:
        goto label12;

     label10:
        $r14 := @caughtexception;

        exitmonitor $r7;

     label11:
        throw $r14;

     label12:
        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected boolean hasDependentBean(java.lang.String)
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String[] getDependentBeans(java.lang.String)
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r2;
        java.util.Set r4;
        java.lang.Object $r3;
        java.lang.String[] $r5, $r6;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Set) $r3;

        if r4 != null goto label1;

        $r6 = newarray (java.lang.String)[0];

        return $r6;

     label1:
        $r5 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>(r4);

        return $r5;
    }

    public java.lang.String[] getDependenciesForBean(java.lang.String)
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.lang.Object[] $r6;
        java.util.Set r4;
        java.lang.String[] $r5, $r7, $r8;
        java.util.Map $r2;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Set) $r3;

        if r4 != null goto label1;

        $r8 = newarray (java.lang.String)[0];

        return $r8;

     label1:
        $i0 = interfaceinvoke r4.<java.util.Set: int size()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r6 = interfaceinvoke r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    public void destroySingletons()
    {
        java.lang.Throwable $r21, $r22, $r23;
        java.lang.String[] $r7;
        java.util.Map $r2, $r3, $r4, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        int $i0, i1, $i3;
        java.lang.String $r8, $r20;
        boolean $z0;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Collection $r6;
        java.util.Set $r5, $r16;
        org.apache.commons.logging.Log $r1, $r18;
        java.lang.StringBuilder $r19, $r24;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z0 == 0 goto label01;

        $r18 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destroying singletons in ");

        $r19 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r20);

     label01:
        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r2;

     label02:
        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean singletonsCurrentlyInDestruction> = 1;

        exitmonitor $r2;

     label03:
        goto label06;

     label04:
        $r23 := @caughtexception;

        exitmonitor $r2;

     label05:
        throw $r23;

     label06:
        $r3 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans>;

        entermonitor $r3;

     label07:
        $r4 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = (java.util.Collection) $r5;

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] toStringArray(java.util.Collection)>($r6);

        $i0 = lengthof $r7;

        i1 = $i0 - 1;

        goto label09;

     label08:
        $r8 = $r7[i1];

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroySingleton(java.lang.String)>($r8);

        $i3 = (int) -1;

        i1 = i1 + $i3;

     label09:
        if i1 >= 0 goto label08;

        exitmonitor $r3;

     label10:
        goto label13;

     label11:
        $r22 := @caughtexception;

        exitmonitor $r3;

     label12:
        throw $r22;

     label13:
        $r9 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map containedBeanMap>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        $r10 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        interfaceinvoke $r10.<java.util.Map: void clear()>();

        $r11 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap>;

        interfaceinvoke $r11.<java.util.Map: void clear()>();

        $r12 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        entermonitor $r12;

     label14:
        $r13 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        interfaceinvoke $r13.<java.util.Map: void clear()>();

        $r14 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonFactories>;

        interfaceinvoke $r14.<java.util.Map: void clear()>();

        $r15 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map earlySingletonObjects>;

        interfaceinvoke $r15.<java.util.Map: void clear()>();

        $r16 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Set registeredSingletons>;

        interfaceinvoke $r16.<java.util.Set: void clear()>();

        r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: boolean singletonsCurrentlyInDestruction> = 0;

        exitmonitor $r12;

     label15:
        goto label18;

     label16:
        $r21 := @caughtexception;

        exitmonitor $r12;

     label17:
        throw $r21;

     label18:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public void destroySingleton(java.lang.String)
    {
        java.lang.Throwable $r6;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r2, $r3;
        org.springframework.beans.factory.DisposableBean r5;
        java.lang.Object $r4;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void removeSingleton(java.lang.String)>(r1);

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans>;

        entermonitor $r2;

     label1:
        $r3 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map disposableBeans>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r5 = (org.springframework.beans.factory.DisposableBean) $r4;

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r6;

     label5:
        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroyBean(java.lang.String,org.springframework.beans.factory.DisposableBean)>(r1, r5);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void destroyBean(java.lang.String, org.springframework.beans.factory.DisposableBean)
    {
        java.util.Map $r2, $r6, $r7, $r14, $r34;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Set r4, $r8, r13, $r36;
        org.springframework.beans.factory.DisposableBean r5;
        java.lang.StringBuilder $r20, $r22, $r23, $r24, $r28, $r30, $r31;
        java.lang.Throwable $r26, $r27;
        java.lang.String r1, $r25, $r32, r33, r37;
        java.util.Map$Entry r11;
        java.util.Iterator $r9, $r15, $r18;
        java.lang.Object $r3, $r10, $r12, $r16, $r19, $r35;
        org.apache.commons.logging.Log $r17, $r21, $r29;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.springframework.beans.factory.DisposableBean;

        $r2 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r4 = (java.util.Set) $r3;

        if r4 == null goto label04;

        $r17 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label01;

        $r21 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Retrieved dependent beans for bean \'");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r25);

     label01:
        $r18 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.lang.String) $r19;

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroySingleton(java.lang.String)>(r33);

     label03:
        $z3 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label02;

     label04:
        if r5 == null goto label08;

     label05:
        interfaceinvoke r5.<org.springframework.beans.factory.DisposableBean: void destroy()>();

     label06:
        goto label08;

     label07:
        $r27 := @caughtexception;

        $r29 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: org.apache.commons.logging.Log logger>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Destroy method on bean with name \'");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' threw an exception");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r32, $r27);

     label08:
        $r34 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map containedBeanMap>;

        $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r36 = (java.util.Set) $r35;

        if $r36 == null goto label11;

        $r15 = interfaceinvoke $r36.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label09:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.lang.String) $r16;

        virtualinvoke r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: void destroySingleton(java.lang.String)>(r37);

     label10:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label09;

     label11:
        $r6 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        entermonitor $r6;

     label12:
        $r7 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependentBeanMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r10;

        $r12 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.util.Set) $r12;

        interfaceinvoke r13.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $z0 = interfaceinvoke r13.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label14;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

     label14:
        $z4 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label13;

        exitmonitor $r6;

     label15:
        goto label18;

     label16:
        $r26 := @caughtexception;

        exitmonitor $r6;

     label17:
        throw $r26;

     label18:
        $r14 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map dependenciesForBeanMap>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    protected final java.lang.Object getSingletonMutex()
    {
        org.springframework.beans.factory.support.DefaultSingletonBeanRegistry r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;

        $r1 = r0.<org.springframework.beans.factory.support.DefaultSingletonBeanRegistry: java.util.Map singletonObjects>;

        return $r1;
    }
}
