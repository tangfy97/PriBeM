public class org.apache.xmlbeans.impl.tool.StreamInstanceValidator extends java.lang.Object
{
    private static final javax.xml.stream.XMLInputFactory XML_INPUT_FACTORY;

    public void <init>()
    {
        org.apache.xmlbeans.impl.tool.StreamInstanceValidator r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.StreamInstanceValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Validates the specified instance against the specified schema.");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("A streaming validation useful for validating very large instance ");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("documents with less memory. Contrast with the validate tool.");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Usage: svalidate [-dl] [-nopvr] [-noupa] [-license] schema.xsd instance.xml");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Options:");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("    -dl - permit network downloads for imports and includes (default is off)");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("    -noupa - do not enforce the unique particle attribution rule");

        $r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("    -nopvr - do not enforce the particle valid (restriction) rule");

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    -license - prints license information");

        return;
    }

    public static void main(java.lang.String[])
    {
        java.util.Set $r3;
        java.lang.Exception $r35, $r39;
        org.apache.xmlbeans.XmlObject[] $r20, $r22, r47;
        java.lang.Object[] $r21;
        java.util.ArrayList $r17, $r23;
        java.lang.StringBuffer $r29, $r31, $r33, $r40, $r43, $r44, $r45;
        java.lang.String $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r32, $r34, $r46;
        org.apache.xmlbeans.SchemaTypeLoader r48;
        java.io.File $r26, $r42;
        boolean z0, z1, $z2, $z3, $z4, z5, $z6, $z7, $z8;
        org.apache.xmlbeans.impl.tool.CommandLine $r1;
        java.lang.String[] r2, $r7, $r10;
        org.apache.xmlbeans.ResourceLoader $r25;
        java.util.HashSet $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        org.apache.xmlbeans.XmlObject $r28;
        java.io.PrintStream $r30, $r36, $r37, $r41, $r49;
        java.util.Iterator $r50;
        org.apache.xmlbeans.XmlOptions $r18, $r19, $r24, $r27;
        java.lang.Object $r38;
        java.io.File[] $r14, $r15, $r16;

        r2 := @parameter0: java.lang.String[];

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("h");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("help");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("usage");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("license");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("version");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("dl");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("noupr");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("noupa");

        $r1 = new org.apache.xmlbeans.impl.tool.CommandLine;

        $r3 = <java.util.Collections: java.util.Set EMPTY_SET>;

        specialinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: void <init>(java.lang.String[],java.util.Collection,java.util.Collection)>(r2, $r0, $r3);

        $r4 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("h");

        if $r4 != null goto label01;

        $r5 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("help");

        if $r5 != null goto label01;

        $r6 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("usage");

        if $r6 != null goto label01;

        $i0 = lengthof r2;

        if $i0 >= 1 goto label02;

     label01:
        staticinvoke <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label02:
        $r7 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] getBadOpts()>();

        $i1 = lengthof $r7;

        if $i1 <= 0 goto label05;

        i6 = 0;

     label03:
        $i5 = lengthof $r7;

        if i6 >= $i5 goto label04;

        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized option: ");

        $r32 = $r7[i6];

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r34);

        i6 = i6 + 1;

        goto label03;

     label04:
        staticinvoke <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label05:
        $r8 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("license");

        if $r8 == null goto label06;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printLicense()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label06:
        $r9 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("version");

        if $r9 == null goto label07;

        staticinvoke <org.apache.xmlbeans.impl.tool.CommandLine: void printVersion()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label07:
        $r10 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String[] args()>();

        $i2 = lengthof $r10;

        if $i2 != 0 goto label08;

        staticinvoke <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void printUsage()>();

        return;

     label08:
        $r11 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("dl");

        if $r11 == null goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        z5 = $z4;

        $r12 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("nopvr");

        if $r12 == null goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        z0 = $z6;

        $r13 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.lang.String getOpt(java.lang.String)>("noupa");

        if $r13 == null goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        z1 = $z7;

        $r14 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>(".xsd");

        $r15 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>(".xml");

        $r16 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.CommandLine: java.io.File[] filesEndingWith(java.lang.String)>(".jar");

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        $r18 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r18.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r19 = virtualinvoke $r18.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadLineNumbers()>();

        i7 = 0;

     label15:
        $i8 = lengthof $r14;

        if i7 >= $i8 goto label20;

     label16:
        $r26 = $r14[i7];

        $r27 = virtualinvoke $r19.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setLoadMessageDigest()>();

        $r28 = staticinvoke <org.apache.xmlbeans.XmlObject$Factory: org.apache.xmlbeans.XmlObject parse(java.io.File,org.apache.xmlbeans.XmlOptions)>($r26, $r27);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r28);

     label17:
        goto label19;

     label18:
        $r39 := @caughtexception;

        $r41 = <java.lang.System: java.io.PrintStream err>;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r42 = $r14[i7];

        $r43 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not loadable: ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r39);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r46);

     label19:
        i7 = i7 + 1;

        goto label15;

     label20:
        $r20 = newarray (org.apache.xmlbeans.XmlObject)[0];

        $r21 = interfaceinvoke $r17.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r20);

        $r22 = (org.apache.xmlbeans.XmlObject[]) $r21;

        r47 = (org.apache.xmlbeans.XmlObject[]) $r22;

        r48 = null;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $r24 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r24.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        virtualinvoke $r24.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setErrorListener(java.util.Collection)>($r23);

        if z5 == 0 goto label21;

        virtualinvoke $r24.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCompileDownloadUrls()>();

     label21:
        if z0 == 0 goto label22;

        virtualinvoke $r24.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCompileNoPvrRule()>();

     label22:
        if z1 == 0 goto label23;

        virtualinvoke $r24.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setCompileNoUpaRule()>();

     label23:
        if $r16 == null goto label24;

        $i4 = lengthof $r16;

        if $i4 <= 0 goto label24;

        $r25 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.ResourceLoader resourceLoaderForPath(java.io.File[])>($r16);

        r48 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeLoader typeLoaderForResource(org.apache.xmlbeans.ResourceLoader)>($r25);

     label24:
        if r47 == null goto label25;

        $i3 = lengthof r47;

        if $i3 <= 0 goto label25;

        r48 = staticinvoke <org.apache.xmlbeans.XmlBeans: org.apache.xmlbeans.SchemaTypeSystem compileXsd(org.apache.xmlbeans.XmlObject[],org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions)>(r47, r48, $r24);

     label25:
        goto label31;

     label26:
        $r35 := @caughtexception;

        $z2 = interfaceinvoke $r23.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label27;

        $z3 = $r35 instanceof org.apache.xmlbeans.XmlException;

        if $z3 != 0 goto label28;

     label27:
        $r36 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r35.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>($r36);

     label28:
        $r49 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>("Schema invalid");

        $r50 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>();

     label29:
        $z8 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label30;

        $r37 = <java.lang.System: java.io.PrintStream out>;

        $r38 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.Object)>($r38);

        goto label29;

     label30:
        return;

     label31:
        staticinvoke <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: void validateFiles(java.io.File[],org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions)>($r15, r48, $r19);

        return;

        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label24 to label25 with label26;
    }

    public static void validateFiles(java.io.File[], org.apache.xmlbeans.SchemaTypeLoader, org.apache.xmlbeans.XmlOptions)
    {
        javax.xml.stream.XMLInputFactory $r6;
        javax.xml.stream.XMLStreamReader $r7;
        javax.xml.stream.XMLStreamException $r37;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r28;
        org.apache.xmlbeans.XmlError $r40, r41;
        long $l1, $l2, l7;
        java.util.ArrayList $r1;
        java.lang.StringBuffer $r10, $r12, $r13, $r14, $r15, $r21, $r23, $r24, $r25, $r26, $r29, $r31, $r32, $r33, $r34;
        int $i0, $i3, $i4, $i5, i6;
        java.lang.String $r4, $r16, $r20, $r27, $r35, $r39;
        java.io.PrintStream $r11, $r19, $r22, $r30, $r36;
        java.util.Iterator $r17;
        org.apache.xmlbeans.SchemaTypeLoader r8;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader $r0;
        java.io.FileInputStream $r5;
        java.io.File r3;
        org.apache.xmlbeans.XmlOptions r9;
        javax.xml.stream.Location $r38;
        java.lang.Object $r18;
        java.io.File[] r2;

        r2 := @parameter0: java.io.File[];

        r8 := @parameter1: org.apache.xmlbeans.SchemaTypeLoader;

        r9 := @parameter2: org.apache.xmlbeans.XmlOptions;

        $r0 = new org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader;

        specialinvoke $r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label01:
        $i0 = lengthof r2;

        if i6 >= $i0 goto label14;

        r3 = r2[i6];

        $r4 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>();

        l7 = 0L;

        interfaceinvoke $r1.<java.util.Collection: void clear()>();

     label02:
        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        $r6 = <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: javax.xml.stream.XMLInputFactory XML_INPUT_FACTORY>;

        $r7 = virtualinvoke $r6.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.InputStream)>($r4, $r5);

     label03:
        $z0 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z0 != 0 goto label04;

        interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label03;

     label04:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l7 = $l1;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: void init(javax.xml.stream.XMLStreamReader,boolean,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaTypeLoader,org.apache.xmlbeans.XmlOptions,java.util.Collection)>($r7, 1, null, r8, r9, $r1);

     label05:
        $z1 = virtualinvoke $r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: boolean hasNext()>();

        if $z1 == 0 goto label06;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: int next()>();

        goto label05;

     label06:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l7 = $l2 - $l1;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: void close()>();

        virtualinvoke $r5.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r37 := @caughtexception;

        $r38 = virtualinvoke $r37.<javax.xml.stream.XMLStreamException: javax.xml.stream.Location getLocation()>();

        $r39 = virtualinvoke $r37.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        $i3 = interfaceinvoke $r38.<javax.xml.stream.Location: int getLineNumber()>();

        $i4 = interfaceinvoke $r38.<javax.xml.stream.Location: int getColumnNumber()>();

        $i5 = interfaceinvoke $r38.<javax.xml.stream.Location: int getCharacterOffset()>();

        $r40 = staticinvoke <org.apache.xmlbeans.XmlError: org.apache.xmlbeans.XmlError forLocation(java.lang.String,java.lang.String,int,int,int)>($r39, $r4, $i3, $i4, $i5);

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>($r40);

        goto label10;

     label09:
        $r28 := @caughtexception;

        $r30 = <java.lang.System: java.io.PrintStream err>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("error for file: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r28);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r35);

        $r36 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r28.<java.lang.Exception: void printStackTrace(java.io.PrintStream)>($r36);

        goto label13;

     label10:
        $z2 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label11;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" valid. (");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l7);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms)");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r27);

        goto label13;

     label11:
        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" NOT valid (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms):");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r17 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.apache.xmlbeans.XmlError) $r18;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r20 = staticinvoke <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: java.lang.String stringFromError(org.apache.xmlbeans.XmlError,java.lang.String)>(r41, $r4);

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r20);

        goto label12;

     label13:
        i6 = i6 + 1;

        goto label01;

     label14:
        return;

        catch javax.xml.stream.XMLStreamException from label02 to label07 with label08;
        catch java.lang.Exception from label02 to label07 with label09;
    }

    private static java.lang.String stringFromError(org.apache.xmlbeans.XmlError, java.lang.String)
    {
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14;
        int $i0, $i1, $i2;
        java.lang.String $r2, r5, $r12, $r15;
        org.apache.xmlbeans.XmlError r1;

        r1 := @parameter0: org.apache.xmlbeans.XmlError;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.xmlbeans.XmlError: int getSeverity()>();

        $r2 = staticinvoke <org.apache.xmlbeans.XmlError: java.lang.String severityAsString(int)>($i0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i1 = virtualinvoke r1.<org.apache.xmlbeans.XmlError: int getLine()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $i2 = virtualinvoke r1.<org.apache.xmlbeans.XmlError: int getColumn()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r12 = virtualinvoke r1.<org.apache.xmlbeans.XmlError: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;
    }

    static void <clinit>()
    {
        javax.xml.stream.XMLInputFactory $r0;

        $r0 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        <org.apache.xmlbeans.impl.tool.StreamInstanceValidator: javax.xml.stream.XMLInputFactory XML_INPUT_FACTORY> = $r0;

        return;
    }
}
