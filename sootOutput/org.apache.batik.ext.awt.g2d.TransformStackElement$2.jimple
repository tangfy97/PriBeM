class org.apache.batik.ext.awt.g2d.TransformStackElement$2 extends org.apache.batik.ext.awt.g2d.TransformStackElement
{

    void <init>(org.apache.batik.ext.awt.g2d.TransformType, double[])
    {
        double[] r2;
        org.apache.batik.ext.awt.g2d.TransformStackElement$2 r0;
        org.apache.batik.ext.awt.g2d.TransformType r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement$2;

        r1 := @parameter0: org.apache.batik.ext.awt.g2d.TransformType;

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.batik.ext.awt.g2d.TransformStackElement: void <init>(org.apache.batik.ext.awt.g2d.TransformType,double[])>(r1, r2);

        return;
    }

    boolean isIdentity(double[])
    {
        org.apache.batik.ext.awt.g2d.TransformStackElement$2 r1;
        byte $b0;
        double[] r0;
        double $d0, $d1;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.g2d.TransformStackElement$2;

        r0 := @parameter0: double[];

        $d0 = r0[0];

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $b0 = $d1 cmpl 1.0;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
