public final class org.apache.jena.riot.system.Checker extends java.lang.Object
{
    private boolean allowRelativeIRIs;
    private boolean warningsAreErrors;
    private org.apache.jena.riot.system.ErrorHandler handler;
    private org.apache.jena.riot.checker.NodeChecker checkLiterals;
    private org.apache.jena.riot.checker.NodeChecker checkURIs;
    private org.apache.jena.riot.checker.NodeChecker checkBlankNodes;
    private org.apache.jena.riot.checker.NodeChecker checkVars;

    public void <init>()
    {
        org.apache.jena.riot.system.Checker r0;

        r0 := @this: org.apache.jena.riot.system.Checker;

        specialinvoke r0.<org.apache.jena.riot.system.Checker: void <init>(org.apache.jena.riot.system.ErrorHandler)>(null);

        return;
    }

    public void <init>(org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.CheckerVar $r5;
        org.apache.jena.riot.system.ErrorHandler r6;
        org.apache.jena.iri.IRIFactory $r3;
        org.apache.jena.riot.checker.CheckerLiterals $r1;
        org.apache.jena.riot.checker.CheckerBlankNodes $r4;
        org.apache.jena.riot.checker.CheckerIRI $r2;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r6 := @parameter0: org.apache.jena.riot.system.ErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jena.riot.system.Checker: boolean allowRelativeIRIs> = 0;

        r0.<org.apache.jena.riot.system.Checker: boolean warningsAreErrors> = 0;

        if r6 != null goto label1;

        r6 = staticinvoke <org.apache.jena.riot.system.ErrorHandlerFactory: org.apache.jena.riot.system.ErrorHandler getDefaultErrorHandler()>();

     label1:
        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler> = r6;

        $r1 = new org.apache.jena.riot.checker.CheckerLiterals;

        specialinvoke $r1.<org.apache.jena.riot.checker.CheckerLiterals: void <init>(org.apache.jena.riot.system.ErrorHandler)>(r6);

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkLiterals> = $r1;

        $r2 = new org.apache.jena.riot.checker.CheckerIRI;

        $r3 = <org.apache.jena.riot.system.IRIResolver: org.apache.jena.iri.IRIFactory iriFactory>;

        specialinvoke $r2.<org.apache.jena.riot.checker.CheckerIRI: void <init>(org.apache.jena.riot.system.ErrorHandler,org.apache.jena.iri.IRIFactory)>(r6, $r3);

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkURIs> = $r2;

        $r4 = new org.apache.jena.riot.checker.CheckerBlankNodes;

        specialinvoke $r4.<org.apache.jena.riot.checker.CheckerBlankNodes: void <init>(org.apache.jena.riot.system.ErrorHandler)>(r6);

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkBlankNodes> = $r4;

        $r5 = new org.apache.jena.riot.checker.CheckerVar;

        specialinvoke $r5.<org.apache.jena.riot.checker.CheckerVar: void <init>(org.apache.jena.riot.system.ErrorHandler)>(r6);

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkVars> = $r5;

        return;
    }

    public org.apache.jena.riot.system.ErrorHandler getHandler()
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.system.ErrorHandler $r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        $r1 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler>;

        return $r1;
    }

    public void setHandler(org.apache.jena.riot.system.ErrorHandler)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.system.ErrorHandler r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: org.apache.jena.riot.system.ErrorHandler;

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler> = r1;

        return;
    }

    public boolean check(com.hp.hpl.jena.graph.Node, long, long)
    {
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.riot.system.Checker r1;
        org.apache.jena.riot.system.ErrorHandler $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r1 := @this: org.apache.jena.riot.system.Checker;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label1;

        $z7 = virtualinvoke r1.<org.apache.jena.riot.system.Checker: boolean checkIRI(com.hp.hpl.jena.graph.Node,long,long)>(r0, l0, l1);

        return $z7;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 == 0 goto label2;

        $z6 = virtualinvoke r1.<org.apache.jena.riot.system.Checker: boolean checkBlank(com.hp.hpl.jena.graph.Node,long,long)>(r0, l0, l1);

        return $z6;

     label2:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label3;

        $z5 = virtualinvoke r1.<org.apache.jena.riot.system.Checker: boolean checkLiteral(com.hp.hpl.jena.graph.Node,long,long)>(r0, l0, l1);

        return $z5;

     label3:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke r1.<org.apache.jena.riot.system.Checker: boolean checkVar(com.hp.hpl.jena.graph.Node,long,long)>(r0, l0, l1);

        return $z4;

     label4:
        $r2 = r1.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler>;

        interfaceinvoke $r2.<org.apache.jena.riot.system.ErrorHandler: void warning(java.lang.String,long,long)>("Not a recognized node: ", l0, l1);

        return 0;
    }

    public boolean check(com.hp.hpl.jena.graph.Triple, long, long)
    {
        long l0, l1;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1;
        org.apache.jena.riot.system.Checker r0;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke r0.<org.apache.jena.riot.system.Checker: boolean checkTriple(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,long,long)>($r2, $r3, $r4, l0, l1);

        return $z0;
    }

    public boolean checkTriple(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, long, long)
    {
        long l0, l1;
        com.hp.hpl.jena.graph.Node r0, r3, r5;
        org.apache.jena.riot.system.Checker r1;
        org.apache.jena.riot.system.ErrorHandler $r2, $r4, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;

        r1 := @this: org.apache.jena.riot.system.Checker;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        z6 = 1;

        if r0 == null goto label1;

        $z4 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z5 != 0 goto label2;

     label1:
        $r2 = r1.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler>;

        interfaceinvoke $r2.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Subject is not a URI or blank node", l0, l1);

        z6 = 0;

     label2:
        if r3 == null goto label3;

        $z3 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z3 != 0 goto label4;

     label3:
        $r4 = r1.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler>;

        interfaceinvoke $r4.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Predicate not a URI", l0, l1);

        z6 = 0;

     label4:
        if r5 == null goto label5;

        $z0 = virtualinvoke r5.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r5.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 != 0 goto label6;

        $z2 = virtualinvoke r5.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 != 0 goto label6;

     label5:
        $r6 = r1.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.system.ErrorHandler handler>;

        interfaceinvoke $r6.<org.apache.jena.riot.system.ErrorHandler: void error(java.lang.String,long,long)>("Object is not a URI, blank node or literal", l0, l1);

        z6 = 0;

     label6:
        return z6;
    }

    public final boolean checkVar(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r2;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkVars>;

        $z0 = interfaceinvoke $r2.<org.apache.jena.riot.checker.NodeChecker: boolean check(com.hp.hpl.jena.graph.Node,long,long)>(r1, l0, l1);

        return $z0;
    }

    public final boolean checkLiteral(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r2;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkLiterals>;

        $z0 = interfaceinvoke $r2.<org.apache.jena.riot.checker.NodeChecker: boolean check(com.hp.hpl.jena.graph.Node,long,long)>(r1, l0, l1);

        return $z0;
    }

    public final boolean checkBlank(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r2;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkBlankNodes>;

        $z0 = interfaceinvoke $r2.<org.apache.jena.riot.checker.NodeChecker: boolean check(com.hp.hpl.jena.graph.Node,long,long)>(r1, l0, l1);

        return $z0;
    }

    public final boolean checkIRI(com.hp.hpl.jena.graph.Node, long, long)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r2;
        long l0, l1;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkURIs>;

        $z0 = interfaceinvoke $r2.<org.apache.jena.riot.checker.NodeChecker: boolean check(com.hp.hpl.jena.graph.Node,long,long)>(r1, l0, l1);

        return $z0;
    }

    public final boolean checkIRI(org.apache.jena.iri.IRI, long, long)
    {
        org.apache.jena.riot.checker.NodeChecker $r1, $r2;
        long l0, l1;
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.iri.IRI r3;
        org.apache.jena.riot.checker.CheckerIRI $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r3 := @parameter0: org.apache.jena.iri.IRI;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkURIs>;

        $z0 = $r1 instanceof org.apache.jena.riot.checker.CheckerIRI;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkURIs>;

        $r4 = (org.apache.jena.riot.checker.CheckerIRI) $r2;

        $z1 = virtualinvoke $r4.<org.apache.jena.riot.checker.CheckerIRI: boolean checkIRI(org.apache.jena.iri.IRI,long,long)>(r3, l0, l1);

        return $z1;
    }

    public final org.apache.jena.riot.checker.NodeChecker getCheckLiterals()
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        $r1 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkLiterals>;

        return $r1;
    }

    public final void setCheckLiterals(org.apache.jena.riot.checker.NodeChecker)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: org.apache.jena.riot.checker.NodeChecker;

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkLiterals> = r1;

        return;
    }

    public final org.apache.jena.riot.checker.NodeChecker getCheckURIs()
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        $r1 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkURIs>;

        return $r1;
    }

    public final void setCheckURIs(org.apache.jena.riot.checker.NodeChecker)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: org.apache.jena.riot.checker.NodeChecker;

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkURIs> = r1;

        return;
    }

    public final org.apache.jena.riot.checker.NodeChecker getCheckBlankNodes()
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        $r1 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkBlankNodes>;

        return $r1;
    }

    public final void setCheckBlankNodes(org.apache.jena.riot.checker.NodeChecker)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: org.apache.jena.riot.checker.NodeChecker;

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkBlankNodes> = r1;

        return;
    }

    public final org.apache.jena.riot.checker.NodeChecker getCheckVars()
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker $r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        $r1 = r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkVars>;

        return $r1;
    }

    public final void setCheckVars(org.apache.jena.riot.checker.NodeChecker)
    {
        org.apache.jena.riot.system.Checker r0;
        org.apache.jena.riot.checker.NodeChecker r1;

        r0 := @this: org.apache.jena.riot.system.Checker;

        r1 := @parameter0: org.apache.jena.riot.checker.NodeChecker;

        r0.<org.apache.jena.riot.system.Checker: org.apache.jena.riot.checker.NodeChecker checkVars> = r1;

        return;
    }
}
