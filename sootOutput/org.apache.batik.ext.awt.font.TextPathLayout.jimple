public class org.apache.batik.ext.awt.font.TextPathLayout extends java.lang.Object
{
    public static final int ALIGN_START;
    public static final int ALIGN_MIDDLE;
    public static final int ALIGN_END;
    public static final int ADJUST_SPACING;
    public static final int ADJUST_GLYPHS;

    public void <init>()
    {
        org.apache.batik.ext.awt.font.TextPathLayout r0;

        r0 := @this: org.apache.batik.ext.awt.font.TextPathLayout;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.Shape layoutGlyphVector(java.awt.font.GlyphVector, java.awt.Shape, int, float, float, int)
    {
        java.awt.geom.Point2D $r8;
        java.awt.geom.Rectangle2D $r4, $r7;
        byte $b1, $b2;
        java.awt.Shape r2, $r6, $r10, r12;
        java.awt.geom.AffineTransform $r9, $r11;
        float $f0, f1, $f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, f17;
        java.awt.geom.GeneralPath $r0;
        int $i0, i3, i4, i5, $i6;
        java.awt.font.GlyphMetrics $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.batik.ext.awt.geom.PathLength $r1;
        java.awt.font.GlyphVector r3;

        r3 := @parameter0: java.awt.font.GlyphVector;

        r2 := @parameter1: java.awt.Shape;

        i3 := @parameter2: int;

        f5 := @parameter3: float;

        f3 := @parameter4: float;

        i4 := @parameter5: int;

        $r0 = new java.awt.geom.GeneralPath;

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>()>();

        $r1 = new org.apache.batik.ext.awt.geom.PathLength;

        specialinvoke $r1.<org.apache.batik.ext.awt.geom.PathLength: void <init>(java.awt.Shape)>(r2);

        $f0 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.PathLength: float lengthOfPath()>();

        if r3 != null goto label01;

        return $r0;

     label01:
        $r4 = virtualinvoke r3.<java.awt.font.GlyphVector: java.awt.geom.Rectangle2D getVisualBounds()>();

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getWidth()>();

        f1 = (float) $d0;

        if r2 == null goto label02;

        $i0 = virtualinvoke r3.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        if $i0 == 0 goto label02;

        $f2 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.PathLength: float lengthOfPath()>();

        $b1 = $f2 cmpl 0.0F;

        if $b1 == 0 goto label02;

        $b2 = f1 cmpl 0.0F;

        if $b2 != 0 goto label03;

     label02:
        return $r0;

     label03:
        f4 = f3 / f1;

        f16 = f5;

        if i3 != 2 goto label04;

        $f15 = $f0 - f3;

        f16 = f5 + $f15;

        goto label05;

     label04:
        if i3 != 1 goto label05;

        $f13 = $f0 - f3;

        $f14 = $f13 / 2.0F;

        f16 = f5 + $f14;

     label05:
        i5 = 0;

        goto label11;

     label06:
        $r5 = virtualinvoke r3.<java.awt.font.GlyphVector: java.awt.font.GlyphMetrics getGlyphMetrics(int)>(i5);

        $f6 = virtualinvoke $r5.<java.awt.font.GlyphMetrics: float getAdvance()>();

        f17 = $f6;

        $r6 = virtualinvoke r3.<java.awt.font.GlyphVector: java.awt.Shape getGlyphOutline(int)>(i5);

        r12 = $r6;

        if i4 != 1 goto label07;

        $d6 = (double) f4;

        $r11 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d6, 1.0);

        r12 = virtualinvoke $r11.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r6);

        f17 = $f6 * f4;

     label07:
        $r7 = interfaceinvoke r12.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $d1 = virtualinvoke $r7.<java.awt.geom.RectangularShape: double getWidth()>();

        $f11 = (float) $d1;

        $f7 = $f11 / 2.0F;

        $f12 = f16 + $f7;

        $r8 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.PathLength: java.awt.geom.Point2D pointAtLength(float)>($f12);

        if $r8 == null goto label08;

        $f9 = virtualinvoke $r1.<org.apache.batik.ext.awt.geom.PathLength: float angleAtLength(float)>($f12);

        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        $d2 = virtualinvoke $r8.<java.awt.geom.Point2D: double getX()>();

        $d3 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void translate(double,double)>($d2, $d3);

        $d4 = (double) $f9;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void rotate(double)>($d4);

        $f10 = f17 / -2.0F;

        $d5 = (double) $f10;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void translate(double,double)>($d5, 0.0);

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r12);

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r10, 0);

     label08:
        if i4 != 0 goto label09;

        $f8 = f17 * f4;

        f16 = f16 + $f8;

        goto label10;

     label09:
        f16 = f16 + f17;

     label10:
        i5 = i5 + 1;

     label11:
        $i6 = virtualinvoke r3.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        if i5 < $i6 goto label06;

        return $r0;
    }

    public static java.awt.Shape layoutGlyphVector(java.awt.font.GlyphVector, java.awt.Shape, int)
    {
        java.awt.Shape r1, $r3;
        java.awt.geom.Rectangle2D $r2;
        int i0;
        float $f0;
        java.awt.font.GlyphVector r0;
        double $d0;

        r0 := @parameter0: java.awt.font.GlyphVector;

        r1 := @parameter1: java.awt.Shape;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<java.awt.font.GlyphVector: java.awt.geom.Rectangle2D getVisualBounds()>();

        $d0 = virtualinvoke $r2.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d0;

        $r3 = staticinvoke <org.apache.batik.ext.awt.font.TextPathLayout: java.awt.Shape layoutGlyphVector(java.awt.font.GlyphVector,java.awt.Shape,int,float,float,int)>(r0, r1, i0, 0.0F, $f0, 0);

        return $r3;
    }

    public static java.awt.Shape layoutGlyphVector(java.awt.font.GlyphVector, java.awt.Shape)
    {
        java.awt.Shape r1, $r2;
        java.awt.font.GlyphVector r0;

        r0 := @parameter0: java.awt.font.GlyphVector;

        r1 := @parameter1: java.awt.Shape;

        $r2 = staticinvoke <org.apache.batik.ext.awt.font.TextPathLayout: java.awt.Shape layoutGlyphVector(java.awt.font.GlyphVector,java.awt.Shape,int)>(r0, r1, 0);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.batik.ext.awt.font.TextPathLayout: int ADJUST_GLYPHS> = 1;

        <org.apache.batik.ext.awt.font.TextPathLayout: int ADJUST_SPACING> = 0;

        <org.apache.batik.ext.awt.font.TextPathLayout: int ALIGN_END> = 2;

        <org.apache.batik.ext.awt.font.TextPathLayout: int ALIGN_MIDDLE> = 1;

        <org.apache.batik.ext.awt.font.TextPathLayout: int ALIGN_START> = 0;

        return;
    }
}
