public class ucar.nc2.NetcdfFile extends java.lang.Object implements ucar.nc2.util.cache.FileCacheable
{
    public static final java.lang.String IOSP_MESSAGE_ADD_RECORD_STRUCTURE;
    public static final java.lang.String IOSP_MESSAGE_CONVERT_RECORD_STRUCTURE;
    public static final java.lang.String IOSP_MESSAGE_REMOVE_RECORD_STRUCTURE;
    public static final java.lang.String IOSP_MESSAGE_RANDOM_ACCESS_FILE;
    private static org.slf4j.Logger log;
    private static int default_buffersize;
    private static java.util.ArrayList registeredProviders;
    protected static boolean debugSPI;
    protected static boolean debugCompress;
    protected static boolean showRequest;
    static boolean debugStructureIterator;
    static boolean loadWarnings;
    private static boolean userLoads;
    public static final java.lang.String reserved;
    protected java.lang.String location;
    protected java.lang.String id;
    protected java.lang.String title;
    protected java.lang.String cacheName;
    protected ucar.nc2.Group rootGroup;
    protected boolean unlocked;
    private boolean immutable;
    protected ucar.nc2.util.cache.FileCache cache;
    protected ucar.nc2.iosp.IOServiceProvider spi;
    protected java.util.List variables;
    protected java.util.List dimensions;
    protected java.util.List gattributes;

    public static java.lang.String escapeName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String escape2(java.lang.String,java.lang.String)>(r0, " .!*\'();:@&=+$,/?%#[]");

        return $r1;
    }

    public static java.lang.String unescapeName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String unescape(java.lang.String)>(r0);

        return $r1;
    }

    public static void registerIOProvider(java.lang.String) throws java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.ClassNotFoundException
    {
        java.lang.Class $r0, $r3;
        java.lang.ClassLoader $r1;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        $r0 = class "Lucar/nc2/NetcdfFile;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.Class)>($r3);

        return;
    }

    public static void registerIOProvider(java.lang.Class) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        ucar.nc2.iosp.IOServiceProvider r2;
        java.lang.Class r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.ArrayList $r3, $r4;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (ucar.nc2.iosp.IOServiceProvider) $r1;

        $z0 = <ucar.nc2.NetcdfFile: boolean userLoads>;

        if $z0 == 0 goto label1;

        $r4 = <ucar.nc2.NetcdfFile: java.util.ArrayList registeredProviders>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r2);

        goto label2;

     label1:
        $r3 = <ucar.nc2.NetcdfFile: java.util.ArrayList registeredProviders>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label2:
        return;
    }

    public static void setDebugFlags(ucar.nc2.util.DebugFlags)
    {
        ucar.nc2.util.DebugFlags r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: ucar.nc2.util.DebugFlags;

        $z0 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("NetcdfFile/debugSPI");

        <ucar.nc2.NetcdfFile: boolean debugSPI> = $z0;

        $z1 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("NetcdfFile/debugCompress");

        <ucar.nc2.NetcdfFile: boolean debugCompress> = $z1;

        $z2 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("NetcdfFile/structureIterator");

        <ucar.nc2.NetcdfFile: boolean debugStructureIterator> = $z2;

        $z3 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("NetcdfFile/disallowFileTruncation");

        <ucar.nc2.iosp.netcdf3.N3header: boolean disallowFileTruncation> = $z3;

        $z4 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("NetcdfFile/debugHeaderSize");

        <ucar.nc2.iosp.netcdf3.N3header: boolean debugHeaderSize> = $z4;

        $z5 = interfaceinvoke r0.<ucar.nc2.util.DebugFlags: boolean isSet(java.lang.String)>("NetcdfFile/showRequest");

        <ucar.nc2.NetcdfFile: boolean showRequest> = $z5;

        return;
    }

    public static void setProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <ucar.nc2.iosp.netcdf3.N3iosp: void setProperty(java.lang.String,java.lang.String)>(r0, r1);

        return;
    }

    public static ucar.nc2.NetcdfFile open(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        ucar.nc2.NetcdfFile $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String,ucar.nc2.util.CancelTask)>(r0, null);

        return $r1;
    }

    public static ucar.nc2.NetcdfFile open(java.lang.String, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r1;
        int $i1;
        java.lang.String r0;
        ucar.nc2.NetcdfFile $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: ucar.nc2.util.CancelTask;

        $i1 = (int) -1;

        $r2 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String,int,ucar.nc2.util.CancelTask)>(r0, $i1, r1);

        return $r2;
    }

    public static ucar.nc2.NetcdfFile open(java.lang.String, int, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        ucar.nc2.util.CancelTask r1;
        int i0;
        java.lang.String r0;
        ucar.nc2.NetcdfFile $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: ucar.nc2.util.CancelTask;

        $r2 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(java.lang.String,int,ucar.nc2.util.CancelTask,java.lang.Object)>(r0, i0, r1, null);

        return $r2;
    }

    public static ucar.nc2.NetcdfFile open(java.lang.String, int, ucar.nc2.util.CancelTask, java.lang.Object) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r1;
        ucar.nc2.util.CancelTask r2;
        int i0;
        java.lang.Object r3;
        java.io.IOException $r5;
        java.lang.String r0;
        ucar.nc2.NetcdfFile $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: ucar.nc2.util.CancelTask;

        r3 := @parameter3: java.lang.Object;

        $r1 = staticinvoke <ucar.nc2.NetcdfFile: ucar.unidata.io.RandomAccessFile getRaf(java.lang.String,int)>(r0, i0);

     label1:
        $r4 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(ucar.unidata.io.RandomAccessFile,java.lang.String,ucar.nc2.util.CancelTask,java.lang.Object)>($r1, r0, r2, r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: void close()>();

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static boolean canOpen(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r2;
        ucar.unidata.io.RandomAccessFile $r1, r3;
        int $i1;
        java.lang.String r0;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        r3 = null;

     label1:
        $i1 = (int) -1;

        $r1 = staticinvoke <ucar.nc2.NetcdfFile: ucar.unidata.io.RandomAccessFile getRaf(java.lang.String,int)>(r0, $i1);

        r3 = $r1;

        if $r1 == null goto label2;

        $z1 = staticinvoke <ucar.nc2.NetcdfFile: boolean canOpen(ucar.unidata.io.RandomAccessFile)>($r1);

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = $z1;

     label4:
        if $r1 == null goto label5;

        virtualinvoke $r1.<ucar.unidata.io.RandomAccessFile: void close()>();

     label5:
        return z0;

     label6:
        $r2 := @caughtexception;

     label7:
        if r3 == null goto label8;

        virtualinvoke r3.<ucar.unidata.io.RandomAccessFile: void close()>();

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private static boolean canOpen(ucar.unidata.io.RandomAccessFile) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r0;
        java.util.Iterator $r2;
        java.util.ArrayList $r1;
        ucar.nc2.iosp.IOServiceProvider r4;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        $z0 = staticinvoke <ucar.nc2.iosp.netcdf3.N3header: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = <ucar.nc2.NetcdfFile: java.util.ArrayList registeredProviders>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.iosp.IOServiceProvider) $r3;

        $z2 = interfaceinvoke r4.<ucar.nc2.iosp.IOServiceProvider: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r0);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public static ucar.nc2.NetcdfFile open(java.lang.String, java.lang.String, int, ucar.nc2.util.CancelTask, java.lang.Object) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r9;
        ucar.nc2.util.CancelTask r11;
        ucar.nc2.iosp.IOServiceProvider r5;
        int i0;
        java.lang.String r2, r7, $r8, r12, $r13;
        boolean $z0, $z1;
        java.lang.Class $r0, $r3;
        java.lang.Object $r4, r6;
        java.lang.ClassLoader $r1;
        ucar.nc2.NetcdfFile $r10;

        r7 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r11 := @parameter3: ucar.nc2.util.CancelTask;

        r6 := @parameter4: java.lang.Object;

        $r0 = class "Lucar/nc2/NetcdfFile;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r5 = (ucar.nc2.iosp.IOServiceProvider) $r4;

        if r6 == null goto label1;

        interfaceinvoke r5.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r6);

     label1:
        $r8 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        r12 = $r8;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("file://");

        if $z0 == 0 goto label2;

        r12 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(7);

        goto label3;

     label2:
        $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z1 == 0 goto label3;

        r12 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(5);

     label3:
        $r13 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String replace(java.lang.String,char,java.lang.String)>(r12, 92, "/");

        if i0 > 0 goto label4;

        i0 = <ucar.nc2.NetcdfFile: int default_buffersize>;

     label4:
        $r9 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r9.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String,int)>($r13, "r", i0);

        $r10 = new ucar.nc2.NetcdfFile;

        specialinvoke $r10.<ucar.nc2.NetcdfFile: void <init>(ucar.nc2.iosp.IOServiceProvider,ucar.unidata.io.RandomAccessFile,java.lang.String,ucar.nc2.util.CancelTask)>(r5, $r9, r7, r11);

        if r6 == null goto label5;

        interfaceinvoke r5.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r6);

     label5:
        return $r10;
    }

    private static ucar.unidata.io.RandomAccessFile getRaf(java.lang.String, int) throws java.io.IOException
    {
        byte[] $r11;
        ucar.unidata.io.RandomAccessFile $r3, $r4, r30;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r20;
        java.lang.StringBuilder $r6, $r7, $r9, $r13, $r14, $r16, $r21, $r23, $r24, $r25, $r27, $r28;
        ucar.unidata.io.http.HTTPRandomAccessFile $r18, $r19;
        int i0;
        java.lang.String r0, $r1, $r2, $r5, $r8, $r10, $r15, $r17, $r26, $r29, r31, r32;
        org.slf4j.Logger $r22;
        ucar.unidata.io.InMemoryRandomAccessFile $r12;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        if i0 > 0 goto label01;

        i0 = <ucar.nc2.NetcdfFile: int default_buffersize>;

     label01:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("http:");

        if $z0 == 0 goto label02;

        $r19 = new ucar.unidata.io.http.HTTPRandomAccessFile;

        specialinvoke $r19.<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String)>($r1);

        r30 = $r19;

        goto label11;

     label02:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("nodods:");

        if $z1 == 0 goto label03;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http");

        $r15 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(6);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = new ucar.unidata.io.http.HTTPRandomAccessFile;

        specialinvoke $r18.<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String)>($r17);

        r30 = $r18;

        goto label11;

     label03:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("slurp:");

        if $z2 == 0 goto label04;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("http");

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <ucar.nc2.util.IO: byte[] readURLContentsToByteArray(java.lang.String)>($r10);

        $r12 = new ucar.unidata.io.InMemoryRandomAccessFile;

        specialinvoke $r12.<ucar.unidata.io.InMemoryRandomAccessFile: void <init>(java.lang.String,byte[])>($r10, $r11);

        r30 = $r12;

        goto label11;

     label04:
        $r2 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String replace(java.lang.String,char,java.lang.String)>($r1, 92, "/");

        r31 = $r2;

        $z3 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z3 == 0 goto label05;

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(5);

        r31 = staticinvoke <ucar.unidata.util.StringUtil: java.lang.String unescape(java.lang.String)>($r5);

     label05:
        r32 = null;

     label06:
        r32 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String makeUncompressed(java.lang.String)>(r31);

     label07:
        goto label09;

     label08:
        $r20 := @caughtexception;

        $r22 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to uncompress ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" err= ");

        $r26 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; try as a regular file.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String)>($r29);

     label09:
        if r32 == null goto label10;

        $r4 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r4.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String,int)>(r32, "r", i0);

        r30 = $r4;

        goto label11;

     label10:
        $r3 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r3.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String,int)>(r31, "r", i0);

        r30 = $r3;

     label11:
        return r30;

        catch java.lang.Exception from label06 to label07 with label08;
    }

    private static java.lang.String makeUncompressed(java.lang.String) throws java.lang.Exception
    {
        java.nio.channels.OverlappingFileLockException $r62, $r65;
        java.util.zip.GZIPInputStream $r85;
        byte $b3;
        java.lang.Exception $r55;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r21, $r22, $r23, $r24, $r30, $r31, $r32, $r33, $r39, $r40, $r41, $r42, $r49, $r50, $r51, $r52, $r58, $r59, $r72, $r77, $r80, $r83, $r86, $r87;
        java.lang.Throwable $r54, $r63;
        long $l2;
        java.lang.String r0, $r1, $r2, $r9, $r16, $r25, $r34, $r43, $r46, $r53, $r60;
        java.io.FileOutputStream r70, $r74;
        java.io.File $r66, $r73;
        java.nio.channels.FileLock $r6, r68;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        ucar.unidata.io.UncompressInputStream $r76;
        java.util.zip.ZipInputStream $r79;
        int $i0, $i1, $i4;
        java.io.PrintStream $r11, $r20, $r29, $r38, $r48;
        org.slf4j.Logger $r57;
        java.io.FileInputStream r67, $r71, $r75, $r78, $r81, $r84;
        java.lang.InterruptedException $r61, $r64;
        ucar.unidata.io.bzip2.CBZip2InputStream $r82;
        java.nio.channels.FileChannel $r5, $r45;
        java.io.InputStream r69;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label01;

        return null;

     label01:
        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Z");

        if $z0 != 0 goto label02;

        $z12 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("zip");

        if $z12 != 0 goto label02;

        $z13 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gzip");

        if $z13 != 0 goto label02;

        $z14 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gz");

        if $z14 != 0 goto label02;

        $z15 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("bz2");

        if $z15 != 0 goto label02;

        return null;

     label02:
        $r66 = staticinvoke <ucar.nc2.util.DiskCache: java.io.File getFileStandardPolicy(java.lang.String)>($r2);

        $z18 = virtualinvoke $r66.<java.io.File: boolean exists()>();

        if $z18 == 0 goto label20;

        $l2 = virtualinvoke $r66.<java.io.File: long length()>();

        $b3 = $l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label20;

        r67 = null;

        r68 = null;

     label03:
        $r71 = new java.io.FileInputStream;

        specialinvoke $r71.<java.io.FileInputStream: void <init>(java.io.File)>($r66);

        r67 = $r71;

     label04:
        $r45 = virtualinvoke $r71.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        r68 = virtualinvoke $r45.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(0L, 1L, 1);

     label05:
        goto label11;

     label06:
        $r65 := @caughtexception;

     label07:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label08:
        goto label10;

     label09:
        $r64 := @caughtexception;

        goto label11;

     label10:
        goto label04;

     label11:
        $z11 = <ucar.nc2.NetcdfFile: boolean debugCompress>;

        if $z11 == 0 goto label12;

        $r48 = <java.lang.System: java.io.PrintStream out>;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found uncompressed ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.String)>($r53);

     label12:
        $r46 = virtualinvoke $r66.<java.io.File: java.lang.String getPath()>();

     label13:
        if r68 == null goto label14;

        virtualinvoke r68.<java.nio.channels.FileLock: void release()>();

     label14:
        if $r71 == null goto label15;

        virtualinvoke $r71.<java.io.FileInputStream: void close()>();

     label15:
        return $r46;

     label16:
        $r63 := @caughtexception;

     label17:
        if r68 == null goto label18;

        virtualinvoke r68.<java.nio.channels.FileLock: void release()>();

     label18:
        if r67 == null goto label19;

        virtualinvoke r67.<java.io.FileInputStream: void close()>();

     label19:
        throw $r63;

     label20:
        $r73 = new java.io.File;

        specialinvoke $r73.<java.io.File: void <init>(java.lang.String)>(r0);

        $z1 = virtualinvoke $r73.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label21;

        return null;

     label21:
        r69 = null;

        $r74 = new java.io.FileOutputStream;

        specialinvoke $r74.<java.io.FileOutputStream: void <init>(java.io.File)>($r66);

        r70 = $r74;

     label22:
        $r5 = virtualinvoke $r74.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r6 = virtualinvoke $r5.<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>(0L, 1L, 0);

     label23:
        goto label29;

     label24:
        $r62 := @caughtexception;

     label25:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label26:
        goto label28;

     label27:
        $r61 := @caughtexception;

     label28:
        goto label22;

     label29:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Z");

        if $z2 == 0 goto label30;

        $r76 = new ucar.unidata.io.UncompressInputStream;

        $r75 = new java.io.FileInputStream;

        specialinvoke $r75.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        specialinvoke $r76.<ucar.unidata.io.UncompressInputStream: void <init>(java.io.InputStream)>($r75);

        r69 = $r76;

        staticinvoke <ucar.nc2.NetcdfFile: void copy(java.io.InputStream,java.io.OutputStream,int)>($r76, $r74, 100000);

        $z10 = <ucar.nc2.NetcdfFile: boolean debugCompress>;

        if $z10 == 0 goto label34;

        $r38 = <java.lang.System: java.io.PrintStream out>;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uncompressed ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>($r43);

        goto label34;

     label30:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("zip");

        if $z3 == 0 goto label31;

        $r79 = new java.util.zip.ZipInputStream;

        $r78 = new java.io.FileInputStream;

        specialinvoke $r78.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        specialinvoke $r79.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r78);

        r69 = $r79;

        staticinvoke <ucar.nc2.NetcdfFile: void copy(java.io.InputStream,java.io.OutputStream,int)>($r79, $r74, 100000);

        $z9 = <ucar.nc2.NetcdfFile: boolean debugCompress>;

        if $z9 == 0 goto label34;

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unzipped ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r34);

        goto label34;

     label31:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("bz2");

        if $z4 == 0 goto label32;

        $r82 = new ucar.unidata.io.bzip2.CBZip2InputStream;

        $r81 = new java.io.FileInputStream;

        specialinvoke $r81.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        specialinvoke $r82.<ucar.unidata.io.bzip2.CBZip2InputStream: void <init>(java.io.InputStream,boolean)>($r81, 1);

        r69 = $r82;

        staticinvoke <ucar.nc2.NetcdfFile: void copy(java.io.InputStream,java.io.OutputStream,int)>($r82, $r74, 100000);

        $z8 = <ucar.nc2.NetcdfFile: boolean debugCompress>;

        if $z8 == 0 goto label34;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unbzipped ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r25);

        goto label34;

     label32:
        $z5 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gzip");

        if $z5 != 0 goto label33;

        $z7 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("gz");

        if $z7 == 0 goto label34;

     label33:
        $r85 = new java.util.zip.GZIPInputStream;

        $r84 = new java.io.FileInputStream;

        specialinvoke $r84.<java.io.FileInputStream: void <init>(java.lang.String)>(r0);

        specialinvoke $r85.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>($r84);

        r69 = $r85;

        staticinvoke <ucar.nc2.NetcdfFile: void copy(java.io.InputStream,java.io.OutputStream,int)>($r85, $r74, 100000);

        $z6 = <ucar.nc2.NetcdfFile: boolean debugCompress>;

        if $z6 == 0 goto label34;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ungzipped ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label34:
        if $r6 == null goto label35;

        virtualinvoke $r6.<java.nio.channels.FileLock: void release()>();

     label35:
        if r69 == null goto label36;

        virtualinvoke r69.<java.io.InputStream: void close()>();

     label36:
        if $r74 == null goto label45;

        virtualinvoke $r74.<java.io.FileOutputStream: void close()>();

        goto label45;

     label37:
        $r55 := @caughtexception;

        if $r74 == null goto label38;

        virtualinvoke $r74.<java.io.FileOutputStream: void close()>();

     label38:
        r70 = null;

        $z16 = virtualinvoke $r66.<java.io.File: boolean exists()>();

        if $z16 == 0 goto label39;

        $z17 = virtualinvoke $r66.<java.io.File: boolean delete()>();

        if $z17 != 0 goto label39;

        $r57 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to delete uncompressed file (IOException)");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r57.<org.slf4j.Logger: void warn(java.lang.String)>($r60);

     label39:
        throw $r55;

     label40:
        $r54 := @caughtexception;

     label41:
        if $r6 == null goto label42;

        virtualinvoke $r6.<java.nio.channels.FileLock: void release()>();

     label42:
        if r69 == null goto label43;

        virtualinvoke r69.<java.io.InputStream: void close()>();

     label43:
        if r70 == null goto label44;

        virtualinvoke r70.<java.io.FileOutputStream: void close()>();

     label44:
        throw $r54;

     label45:
        $r9 = virtualinvoke $r66.<java.io.File: java.lang.String getPath()>();

        return $r9;

        catch java.nio.channels.OverlappingFileLockException from label04 to label05 with label06;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label03 to label13 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.nio.channels.OverlappingFileLockException from label22 to label23 with label24;
        catch java.lang.InterruptedException from label25 to label26 with label27;
        catch java.lang.Exception from label29 to label34 with label37;
        catch java.lang.Throwable from label29 to label34 with label40;
        catch java.lang.Throwable from label37 to label41 with label40;
    }

    private static void copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r2;
        byte[] r0;
        int i0, $i1, $i3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

     label1:
        $i1 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0);

        $i3 = (int) -1;

        if $i1 != $i3 goto label2;

        goto label3;

     label2:
        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r0, 0, $i1);

        goto label1;

     label3:
        return;
    }

    public static ucar.nc2.NetcdfFile openInMemory(java.lang.String, byte[], java.lang.String) throws java.io.IOException, java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        byte[] r2;
        ucar.unidata.io.InMemoryRandomAccessFile $r0;
        ucar.nc2.iosp.IOServiceProvider r8;
        java.lang.Class $r3, $r6;
        java.lang.Object $r7;
        java.lang.String r1, r5;
        java.lang.ClassLoader $r4;
        ucar.nc2.NetcdfFile $r9;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r5 := @parameter2: java.lang.String;

        $r0 = new ucar.unidata.io.InMemoryRandomAccessFile;

        specialinvoke $r0.<ucar.unidata.io.InMemoryRandomAccessFile: void <init>(java.lang.String,byte[])>(r1, r2);

        $r3 = class "Lucar/nc2/NetcdfFile;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        r8 = (ucar.nc2.iosp.IOServiceProvider) $r7;

        $r9 = new ucar.nc2.NetcdfFile;

        specialinvoke $r9.<ucar.nc2.NetcdfFile: void <init>(ucar.nc2.iosp.IOServiceProvider,ucar.unidata.io.RandomAccessFile,java.lang.String,ucar.nc2.util.CancelTask)>(r8, $r0, r1, null);

        return $r9;
    }

    public static ucar.nc2.NetcdfFile openInMemory(java.lang.String, byte[]) throws java.io.IOException
    {
        byte[] r2;
        java.lang.String r1;
        ucar.nc2.NetcdfFile $r3;
        ucar.unidata.io.InMemoryRandomAccessFile $r0;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r0 = new ucar.unidata.io.InMemoryRandomAccessFile;

        specialinvoke $r0.<ucar.unidata.io.InMemoryRandomAccessFile: void <init>(java.lang.String,byte[])>(r1, r2);

        $r3 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile open(ucar.unidata.io.RandomAccessFile,java.lang.String,ucar.nc2.util.CancelTask,java.lang.Object)>($r0, r1, null, null);

        return $r3;
    }

    public static ucar.nc2.NetcdfFile openInMemory(java.lang.String) throws java.io.IOException
    {
        byte[] $r5;
        java.io.BufferedInputStream $r3;
        java.io.ByteArrayOutputStream $r2;
        long $l0;
        java.io.FileInputStream $r4;
        java.io.File $r0;
        int $i1;
        java.lang.String r1;
        ucar.nc2.NetcdfFile $r6;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        $r2 = new java.io.ByteArrayOutputStream;

        $l0 = virtualinvoke $r0.<java.io.File: long length()>();

        $i1 = (int) $l0;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>($i1);

        $r3 = new java.io.BufferedInputStream;

        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        specialinvoke $r3.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r4);

        staticinvoke <ucar.nc2.util.IO: long copy(java.io.InputStream,java.io.OutputStream)>($r3, $r2);

        $r5 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r6 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile openInMemory(java.lang.String,byte[])>(r1, $r5);

        return $r6;
    }

    public static ucar.nc2.NetcdfFile openInMemory(java.net.URI) throws java.io.IOException
    {
        byte[] $r3;
        java.net.URL $r1;
        java.net.URI r0;
        java.lang.String $r4;
        ucar.nc2.NetcdfFile $r5;
        java.io.InputStream $r2;

        r0 := @parameter0: java.net.URI;

        $r1 = virtualinvoke r0.<java.net.URI: java.net.URL toURL()>();

        $r2 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>();

        $r3 = staticinvoke <ucar.nc2.util.IO: byte[] readContentsToByteArray(java.io.InputStream)>($r2);

        $r4 = virtualinvoke r0.<java.net.URI: java.lang.String toString()>();

        $r5 = staticinvoke <ucar.nc2.NetcdfFile: ucar.nc2.NetcdfFile openInMemory(java.lang.String,byte[])>($r4, $r3);

        return $r5;
    }

    private static ucar.nc2.NetcdfFile open(ucar.unidata.io.RandomAccessFile, java.lang.String, ucar.nc2.util.CancelTask, java.lang.Object) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r0;
        ucar.nc2.util.CancelTask r7;
        ucar.nc2.iosp.IOServiceProvider r22, r55;
        java.lang.InstantiationException $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalAccessException $r37;
        java.lang.StringBuilder $r8, $r10, $r13, $r16, $r17, $r18, $r19, $r25, $r27, $r30, $r32, $r34, $r35, $r39, $r40, $r42, $r43, $r45, $r49, $r50, $r52, $r53;
        ucar.nc2.NetcdfFile $r5;
        java.util.ArrayList $r1;
        java.lang.String r6, $r12, $r14, $r20, $r29, $r31, $r36, $r41, $r44, $r46, $r51, $r54;
        java.io.PrintStream $r26, $r33;
        org.slf4j.Logger $r4, $r9;
        java.util.Iterator $r2;
        java.io.IOException $r15, $r38, $r48;
        java.lang.Object r3, $r21, $r24;
        java.lang.Class $r11, $r23, $r28;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: ucar.nc2.util.CancelTask;

        r3 := @parameter3: java.lang.Object;

        r55 = null;

        $z0 = <ucar.nc2.NetcdfFile: boolean debugSPI>;

        if $z0 == 0 goto label01;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetcdfFile try to open = ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r36);

     label01:
        $z1 = staticinvoke <ucar.nc2.iosp.netcdf3.N3header: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r0);

        if $z1 == 0 goto label02;

        r55 = staticinvoke <ucar.nc2.iosp.netcdf3.SPFactory: ucar.nc2.iosp.IOServiceProvider getServiceProvider()>();

        goto label10;

     label02:
        $r1 = <ucar.nc2.NetcdfFile: java.util.ArrayList registeredProviders>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r21 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r22 = (ucar.nc2.iosp.IOServiceProvider) $r21;

        $z4 = <ucar.nc2.NetcdfFile: boolean debugSPI>;

        if $z4 == 0 goto label04;

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" try iosp = ");

        $r28 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r31);

     label04:
        $z5 = interfaceinvoke r22.<ucar.nc2.iosp.IOServiceProvider: boolean isValidFile(ucar.unidata.io.RandomAccessFile)>(r0);

        if $z5 == 0 goto label09;

        $r23 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

     label05:
        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.Object newInstance()>();

        r55 = (ucar.nc2.iosp.IOServiceProvider) $r24;

     label06:
        goto label10;

     label07:
        $r47 := @caughtexception;

        $r48 = new java.io.IOException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOServiceProvider ");

        $r51 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must have no-arg constructor.");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>($r54);

        throw $r48;

     label08:
        $r37 := @caughtexception;

        $r38 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOServiceProvider ");

        $r41 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IllegalAccessException: ");

        $r44 = virtualinvoke $r37.<java.lang.IllegalAccessException: java.lang.String getMessage()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r46);

        throw $r38;

     label09:
        goto label03;

     label10:
        if r55 != null goto label11;

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void close()>();

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant read ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": not a valid CDM file.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label11:
        if r3 == null goto label12;

        interfaceinvoke r55.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r3);

     label12:
        $r4 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label13;

        $r9 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using IOSP ");

        $r11 = virtualinvoke r55.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r14);

     label13:
        $r5 = new ucar.nc2.NetcdfFile;

        specialinvoke $r5.<ucar.nc2.NetcdfFile: void <init>(ucar.nc2.iosp.IOServiceProvider,ucar.unidata.io.RandomAccessFile,java.lang.String,ucar.nc2.util.CancelTask)>(r55, r0, r6, r7);

        if r3 == null goto label14;

        interfaceinvoke r55.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r3);

     label14:
        return $r5;

        catch java.lang.InstantiationException from label05 to label06 with label07;
        catch java.lang.IllegalAccessException from label05 to label06 with label08;
    }

    public synchronized boolean isUnlocked()
    {
        ucar.nc2.NetcdfFile r0;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean unlocked>;

        return $z0;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.lang.Throwable $r5;
        ucar.nc2.util.cache.FileCache $r1, $r4;
        ucar.nc2.iosp.IOServiceProvider $r2, $r3;
        ucar.nc2.NetcdfFile r0;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.util.cache.FileCache cache>;

        if $r1 == null goto label1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 1;

        $r4 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.util.cache.FileCache cache>;

        virtualinvoke $r4.<ucar.nc2.util.cache.FileCache: void release(ucar.nc2.util.cache.FileCacheable)>(r0);

        goto label5;

     label1:
        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if null == $r2 goto label2;

        $r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r3.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label2:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setFileCache(ucar.nc2.util.cache.FileCache)
    {
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.util.cache.FileCache r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: ucar.nc2.util.cache.FileCache;

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.util.cache.FileCache cache> = r1;

        return;
    }

    public java.lang.String getCacheName()
    {
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.lang.String cacheName>;

        return $r1;
    }

    protected void setCacheName(java.lang.String)
    {
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.lang.String;

        r0.<ucar.nc2.NetcdfFile: java.lang.String cacheName> = r1;

        return;
    }

    public java.lang.String getLocation()
    {
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.lang.String location>;

        return $r1;
    }

    public java.lang.String getId()
    {
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.lang.String id>;

        return $r1;
    }

    public java.lang.String getTitle()
    {
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.lang.String title>;

        return $r1;
    }

    public ucar.nc2.Group getRootGroup()
    {
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        return $r1;
    }

    public java.util.List getVariables()
    {
        java.util.List $r1;
        ucar.nc2.NetcdfFile r0;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.util.List variables>;

        return $r1;
    }

    public ucar.nc2.Variable findTopVariable(java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.List $r2;
        java.lang.Object $r4;
        ucar.nc2.Variable r5;
        java.lang.String r0, $r6;
        ucar.nc2.NetcdfFile r1;
        boolean $z0, $z1;

        r1 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<ucar.nc2.NetcdfFile: java.util.List variables>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.Variable) $r4;

        $r6 = virtualinvoke r5.<ucar.nc2.Variable: java.lang.String getName()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        return r5;

     label3:
        goto label2;

     label4:
        return null;
    }

    public ucar.nc2.Group findGroup(java.lang.String)
    {
        java.lang.String[] $r3;
        ucar.nc2.Group $r2, $r5, r6;
        int $i0, i1, i2;
        java.lang.String r0, r4;
        ucar.nc2.NetcdfFile r1;

        r1 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        return $r2;

     label2:
        r6 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        i1 = lengthof $r3;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r4 = $r3[i2];

        $r5 = virtualinvoke r6.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>(r4);

        r6 = $r5;

        if $r5 != null goto label4;

        return null;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return r6;
    }

    public ucar.nc2.Variable findVariable(java.lang.String)
    {
        ucar.nc2.Structure $r8;
        java.util.StringTokenizer $r2, $r11;
        int $i0, $i1, $i2;
        ucar.nc2.Variable $r5, $r9, r16;
        java.lang.String r0, $r3, $r4, $r6, $r7, $r10, $r12, r15;
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.Group $r13, r14;
        ucar.nc2.NetcdfFile r1;

        r1 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        r14 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        r15 = r0;

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if $i1 < 0 goto label05;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i1 + 1;

        r15 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r11 = new java.util.StringTokenizer;

        specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r10, "/");

     label03:
        $z3 = virtualinvoke $r11.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label05;

        $r12 = virtualinvoke $r11.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r13 = virtualinvoke r14.<ucar.nc2.Group: ucar.nc2.Group findGroup(java.lang.String)>($r12);

        r14 = $r13;

        if $r13 != null goto label04;

        return null;

     label04:
        goto label03;

     label05:
        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r15, ".");

        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label06;

        return null;

     label06:
        $r3 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String unescapeName(java.lang.String)>($r3);

        $r5 = virtualinvoke r14.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>($r4);

        r16 = $r5;

        if $r5 != null goto label07;

        return null;

     label07:
        $z1 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label10;

        $z2 = r16 instanceof ucar.nc2.Structure;

        if $z2 != 0 goto label08;

        return null;

     label08:
        $r6 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r7 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String unescapeName(java.lang.String)>($r6);

        $r8 = (ucar.nc2.Structure) r16;

        $r9 = virtualinvoke $r8.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r7);

        r16 = $r9;

        if $r9 != null goto label09;

        return null;

     label09:
        goto label07;

     label10:
        return r16;
    }

    public java.util.List getDimensions()
    {
        java.util.List $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        $r2 = $r3;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

     label2:
        return $r2;
    }

    public ucar.nc2.Dimension findDimension(java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.List $r2;
        java.lang.Object $r4;
        ucar.nc2.Dimension r5;
        java.lang.String r0, $r6;
        ucar.nc2.NetcdfFile r1;
        boolean $z0, $z1;

        r1 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.Dimension) $r4;

        $r6 = virtualinvoke r5.<ucar.nc2.Dimension: java.lang.String getName()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        return r5;

     label3:
        goto label2;

     label4:
        return null;
    }

    public boolean hasUnlimitedDimension()
    {
        ucar.nc2.Dimension $r1;
        ucar.nc2.NetcdfFile r0;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension getUnlimitedDimension()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public ucar.nc2.Dimension getUnlimitedDimension()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        ucar.nc2.Dimension r4;
        ucar.nc2.NetcdfFile r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Dimension) $r3;

        $z1 = virtualinvoke r4.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.util.List getGlobalAttributes()
    {
        java.util.List $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        boolean $z0;
        java.util.ArrayList $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        $r2 = $r3;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r1);

     label2:
        return $r2;
    }

    public ucar.nc2.Attribute findGlobalAttribute(java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        ucar.nc2.Attribute r4;
        java.lang.Object $r3;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r5, $r6;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Attribute) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        ucar.nc2.Attribute r4;
        java.lang.Object $r3;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r5, $r6;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Attribute) $r3;

        $r6 = virtualinvoke r4.<ucar.nc2.Attribute: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        return null;
    }

    public java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable, java.lang.String, java.lang.String)
    {
        ucar.nc2.Group $r4;
        ucar.nc2.Attribute r6;
        ucar.nc2.Variable r0;
        java.lang.String r1, r2, r5;
        ucar.nc2.NetcdfFile r3;
        boolean $z0;

        r3 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: ucar.nc2.Variable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r5 = null;

        if r0 != null goto label1;

        $r4 = r3.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        r6 = virtualinvoke $r4.<ucar.nc2.Group: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

        goto label2;

     label1:
        r6 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

     label2:
        if r6 == null goto label3;

        $z0 = virtualinvoke r6.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label3;

        r5 = virtualinvoke r6.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

     label3:
        if null != r5 goto label4;

        r5 = r2;

     label4:
        return r5;
    }

    public double readAttributeDouble(ucar.nc2.Variable, java.lang.String, double)
    {
        ucar.nc2.Group $r5;
        ucar.nc2.Attribute r6;
        ucar.nc2.Variable r0;
        java.lang.String r1, $r3;
        ucar.nc2.NetcdfFile r4;
        java.lang.Number $r2;
        boolean $z0;
        double $d0, $d1, d2;

        r4 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: ucar.nc2.Variable;

        r1 := @parameter1: java.lang.String;

        d2 := @parameter2: double;

        if r0 != null goto label1;

        $r5 = r4.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        r6 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

        goto label2;

     label1:
        r6 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

     label2:
        if r6 != null goto label3;

        return d2;

     label3:
        $z0 = virtualinvoke r6.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r6.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        return $d1;

     label4:
        $r2 = virtualinvoke r6.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public int readAttributeInteger(ucar.nc2.Variable, java.lang.String, int)
    {
        ucar.nc2.Group $r5;
        ucar.nc2.Attribute r6;
        int $i0, $i1, i2;
        ucar.nc2.Variable r0;
        java.lang.String r1, $r3;
        ucar.nc2.NetcdfFile r4;
        java.lang.Number $r2;
        boolean $z0;

        r4 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: ucar.nc2.Variable;

        r1 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        if r0 != null goto label1;

        $r5 = r4.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        r6 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

        goto label2;

     label1:
        r6 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute findAttributeIgnoreCase(java.lang.String)>(r1);

     label2:
        if r6 != null goto label3;

        return i2;

     label3:
        $z0 = virtualinvoke r6.<ucar.nc2.Attribute: boolean isString()>();

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r6.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i1;

     label4:
        $r2 = virtualinvoke r6.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $i0 = virtualinvoke $r2.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public void writeCDL(java.io.OutputStream, boolean)
    {
        java.io.PrintWriter $r0;
        java.io.OutputStream r2;
        java.io.OutputStreamWriter $r1;
        ucar.nc2.NetcdfFile r3;
        boolean z0;

        r3 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r0 = new java.io.PrintWriter;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r2);

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.Writer)>($r1);

        virtualinvoke r3.<ucar.nc2.NetcdfFile: void toStringStart(java.io.PrintWriter,boolean)>($r0, z0);

        virtualinvoke r3.<ucar.nc2.NetcdfFile: void toStringEnd(java.io.PrintWriter)>($r0);

        virtualinvoke $r0.<java.io.PrintWriter: void flush()>();

        return;
    }

    public void writeCDL(java.io.PrintWriter, boolean)
    {
        java.io.PrintWriter r1;
        ucar.nc2.NetcdfFile r0;
        boolean z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void toStringStart(java.io.PrintWriter,boolean)>(r1, z0);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void toStringEnd(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    public java.lang.String toString()
    {
        java.io.PrintWriter $r5;
        java.io.StringWriter $r4;
        int $i1;
        ucar.nc2.NetcdfFile r1;
        java.lang.String $r3;

        r1 := @this: ucar.nc2.NetcdfFile;

        $r4 = new java.io.StringWriter;

        $i1 = (int) 50000;

        specialinvoke $r4.<java.io.StringWriter: void <init>(int)>($i1);

        $r5 = new java.io.PrintWriter;

        specialinvoke $r5.<java.io.PrintWriter: void <init>(java.io.Writer)>($r4);

        virtualinvoke r1.<ucar.nc2.NetcdfFile: void writeCDL(java.io.PrintWriter,boolean)>($r5, 0);

        $r3 = virtualinvoke $r4.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;
    }

    protected void toStringStart(java.io.PrintWriter, boolean)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r1, r3, $r8;
        boolean z0, $z1, $z2;
        java.io.PrintWriter r2;
        ucar.nc2.Group $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        ucar.nc2.NetcdfFile r0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        r3 = $r1;

        if z0 == 0 goto label4;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(47);

        i6 = $i0;

        if $i0 >= 0 goto label1;

        i6 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(92);

     label1:
        if i6 < 0 goto label2;

        $i5 = i6 + 1;

        r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i5);

     label2:
        $z1 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>(".nc");

        if $z1 == 0 goto label3;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $i4 = $i3 - 3;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label3:
        $z2 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>(".cdl");

        if $z2 == 0 goto label4;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        $i2 = $i1 - 4;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("netcdf ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r8);

        $r9 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        virtualinvoke $r9.<ucar.nc2.Group: void writeCDL(java.io.PrintWriter,java.lang.String,boolean)>(r2, "", z0);

        return;
    }

    protected void toStringEnd(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;
        ucar.nc2.NetcdfFile r1;

        r1 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("}\n");

        return;
    }

    public void writeNcML(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.io.OutputStreamWriter $r1;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: java.lang.String;

        $r1 = new java.io.OutputStreamWriter;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r2);

        staticinvoke <ucar.nc2.NCdumpW: void writeNcML(ucar.nc2.NetcdfFile,java.io.Writer,boolean,java.lang.String)>(r0, $r1, 0, r3);

        return;
    }

    public void writeNcML(java.io.Writer, java.lang.String) throws java.io.IOException
    {
        java.io.Writer r1;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r2;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        staticinvoke <ucar.nc2.NCdumpW: void writeNcML(ucar.nc2.NetcdfFile,java.io.Writer,boolean,java.lang.String)>(r0, r1, 0, r2);

        return;
    }

    public boolean syncExtend() throws java.io.IOException
    {
        ucar.nc2.iosp.IOServiceProvider $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $z0 = interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProvider: boolean syncExtend()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean sync() throws java.io.IOException
    {
        ucar.nc2.iosp.IOServiceProvider $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $z0 = interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProvider: boolean sync()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile $r3;
        ucar.nc2.iosp.IOServiceProvider $r4, $r5;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r2;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 0;

        r0.<ucar.nc2.NetcdfFile: java.lang.String location> = r2;

        $r3 = new ucar.unidata.io.RandomAccessFile;

        specialinvoke $r3.<ucar.unidata.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r2, "r");

        $r4 = staticinvoke <ucar.nc2.iosp.netcdf3.SPFactory: ucar.nc2.iosp.IOServiceProvider getServiceProvider()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = $r4;

        $r5 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r5.<ucar.nc2.iosp.IOServiceProvider: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>($r3, r0, null);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    public void <init>(java.net.URL) throws java.io.IOException
    {
        ucar.unidata.io.http.HTTPRandomAccessFile $r4;
        java.net.URL r2;
        ucar.nc2.Group $r1;
        ucar.nc2.iosp.IOServiceProvider $r6, $r7;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r3, $r5;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 0;

        $r3 = virtualinvoke r2.<java.net.URL: java.lang.String toString()>();

        r0.<ucar.nc2.NetcdfFile: java.lang.String location> = $r3;

        $r4 = new ucar.unidata.io.http.HTTPRandomAccessFile;

        $r5 = r0.<ucar.nc2.NetcdfFile: java.lang.String location>;

        specialinvoke $r4.<ucar.unidata.io.http.HTTPRandomAccessFile: void <init>(java.lang.String)>($r5);

        $r6 = staticinvoke <ucar.nc2.iosp.netcdf3.SPFactory: ucar.nc2.iosp.IOServiceProvider getServiceProvider()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = $r6;

        $r7 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r7.<ucar.nc2.iosp.IOServiceProvider: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>($r4, r0, null);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    protected void <init>(java.lang.String, java.lang.String, java.lang.String, int, ucar.nc2.util.CancelTask) throws java.io.IOException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.ClassNotFoundException
    {
        ucar.unidata.io.RandomAccessFile $r11;
        ucar.nc2.util.CancelTask r12;
        ucar.nc2.iosp.IOServiceProvider $r7, $r9, $r13, $r21, $r30, $r34, $r38;
        boolean $z0;
        ucar.nc2.Group $r1;
        java.lang.StringBuilder $r18, $r20, $r24;
        ucar.nc2.NetcdfFile r0;
        java.lang.ClassLoader $r3;
        java.lang.Throwable $r26, $r28, $r29, $r31, $r32, $r35, $r36;
        int i0;
        java.lang.String r4, r8, r10, $r14, $r15, $r16, $r17, $r23, $r25;
        java.io.PrintStream $r19;
        java.io.IOException $r37;
        java.lang.RuntimeException $r27, $r33;
        java.lang.Class $r2, $r5, $r22;
        java.lang.Object $r6;

        r0 := @this: ucar.nc2.NetcdfFile;

        r4 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r12 := @parameter4: ucar.nc2.util.CancelTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 0;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        $r7 = (ucar.nc2.iosp.IOServiceProvider) $r6;

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = $r7;

        $z0 = <ucar.nc2.NetcdfFile: boolean debugSPI>;

        if $z0 == 0 goto label01;

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetcdfFile uses iosp = ");

        $r21 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r22 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r25);

     label01:
        $r9 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r9.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r8);

        r0.<ucar.nc2.NetcdfFile: java.lang.String location> = r10;

        $r11 = staticinvoke <ucar.nc2.NetcdfFile: ucar.unidata.io.RandomAccessFile getRaf(java.lang.String,int)>(r10, i0);

     label02:
        $r13 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r13.<ucar.nc2.iosp.IOServiceProvider: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>($r11, r0, r12);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void finish()>();

     label03:
        goto label28;

     label04:
        $r37 := @caughtexception;

     label05:
        $r38 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r38.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label06:
        goto label08;

     label07:
        $r36 := @caughtexception;

     label08:
        virtualinvoke $r11.<ucar.unidata.io.RandomAccessFile: void close()>();

     label09:
        goto label11;

     label10:
        $r35 := @caughtexception;

     label11:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        throw $r37;

     label12:
        $r33 := @caughtexception;

     label13:
        $r34 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r34.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label14:
        goto label16;

     label15:
        $r32 := @caughtexception;

     label16:
        virtualinvoke $r11.<ucar.unidata.io.RandomAccessFile: void close()>();

     label17:
        goto label19;

     label18:
        $r31 := @caughtexception;

     label19:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        throw $r33;

     label20:
        $r29 := @caughtexception;

     label21:
        $r30 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        interfaceinvoke $r30.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label22:
        goto label24;

     label23:
        $r28 := @caughtexception;

     label24:
        virtualinvoke $r11.<ucar.unidata.io.RandomAccessFile: void close()>();

     label25:
        goto label27;

     label26:
        $r26 := @caughtexception;

     label27:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        $r27 = new java.lang.RuntimeException;

        specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r29);

        throw $r27;

     label28:
        $r14 = r0.<ucar.nc2.NetcdfFile: java.lang.String id>;

        if $r14 != null goto label29;

        $r17 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "_Id", null);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void setId(java.lang.String)>($r17);

     label29:
        $r15 = r0.<ucar.nc2.NetcdfFile: java.lang.String title>;

        if $r15 != null goto label30;

        $r16 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "_Title", null);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void setId(java.lang.String)>($r16);

     label30:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.RuntimeException from label02 to label03 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    protected void <init>(ucar.nc2.iosp.IOServiceProvider, ucar.unidata.io.RandomAccessFile, java.lang.String, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        java.lang.Throwable $r17, $r19, $r20, $r21, $r22, $r24, $r25;
        ucar.unidata.io.RandomAccessFile r4;
        ucar.nc2.util.CancelTask r5;
        ucar.nc2.iosp.IOServiceProvider r2;
        java.lang.String r3, $r6, $r7, $r8, $r9, $r14, $r16;
        boolean $z0;
        java.io.PrintStream $r11;
        java.io.IOException $r26;
        java.lang.RuntimeException $r18, $r23;
        ucar.nc2.Group $r1;
        java.lang.StringBuilder $r10, $r12, $r15;
        java.lang.Class $r13;
        ucar.nc2.NetcdfFile r0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: ucar.nc2.iosp.IOServiceProvider;

        r4 := @parameter1: ucar.unidata.io.RandomAccessFile;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: ucar.nc2.util.CancelTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 0;

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = r2;

        r0.<ucar.nc2.NetcdfFile: java.lang.String location> = r3;

        $z0 = <ucar.nc2.NetcdfFile: boolean debugSPI>;

        if $z0 == 0 goto label01;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetcdfFile uses iosp = ");

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label01:
        interfaceinvoke r2.<ucar.nc2.iosp.IOServiceProvider: void open(ucar.unidata.io.RandomAccessFile,ucar.nc2.NetcdfFile,ucar.nc2.util.CancelTask)>(r4, r0, r5);

     label02:
        goto label27;

     label03:
        $r26 := @caughtexception;

     label04:
        interfaceinvoke r2.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label05:
        goto label07;

     label06:
        $r25 := @caughtexception;

     label07:
        virtualinvoke r4.<ucar.unidata.io.RandomAccessFile: void close()>();

     label08:
        goto label10;

     label09:
        $r24 := @caughtexception;

     label10:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        throw $r26;

     label11:
        $r23 := @caughtexception;

     label12:
        interfaceinvoke r2.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label13:
        goto label15;

     label14:
        $r22 := @caughtexception;

     label15:
        virtualinvoke r4.<ucar.unidata.io.RandomAccessFile: void close()>();

     label16:
        goto label18;

     label17:
        $r21 := @caughtexception;

     label18:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        throw $r23;

     label19:
        $r20 := @caughtexception;

     label20:
        interfaceinvoke r2.<ucar.nc2.iosp.IOServiceProvider: void close()>();

     label21:
        goto label23;

     label22:
        $r19 := @caughtexception;

     label23:
        virtualinvoke r4.<ucar.unidata.io.RandomAccessFile: void close()>();

     label24:
        goto label26;

     label25:
        $r17 := @caughtexception;

     label26:
        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = null;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw $r18;

     label27:
        $r6 = r0.<ucar.nc2.NetcdfFile: java.lang.String id>;

        if $r6 != null goto label28;

        $r9 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "_Id", null);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void setId(java.lang.String)>($r9);

     label28:
        $r7 = r0.<ucar.nc2.NetcdfFile: java.lang.String title>;

        if $r7 != null goto label29;

        $r8 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "_Title", null);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: void setId(java.lang.String)>($r8);

     label29:
        virtualinvoke r0.<ucar.nc2.NetcdfFile: void finish()>();

        return;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.RuntimeException from label01 to label02 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    protected void <init>()
    {
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 0;

        return;
    }

    protected void <init>(ucar.nc2.NetcdfFile)
    {
        ucar.nc2.iosp.IOServiceProvider $r6;
        ucar.nc2.NetcdfFile r0, r2;
        java.lang.String $r3, $r4, $r5;
        ucar.nc2.Group $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: ucar.nc2.NetcdfFile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r1;

        r0.<ucar.nc2.NetcdfFile: boolean unlocked> = 0;

        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 0;

        $r3 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        r0.<ucar.nc2.NetcdfFile: java.lang.String location> = $r3;

        $r4 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getId()>();

        r0.<ucar.nc2.NetcdfFile: java.lang.String id> = $r4;

        $r5 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getTitle()>();

        r0.<ucar.nc2.NetcdfFile: java.lang.String title> = $r5;

        $r6 = r2.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi> = $r6;

        return;
    }

    public ucar.nc2.Attribute addAttribute(ucar.nc2.Group, ucar.nc2.Attribute)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Attribute r1;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: ucar.nc2.Attribute;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        virtualinvoke r3.<ucar.nc2.Group: void addAttribute(ucar.nc2.Attribute)>(r1);

        return r1;
    }

    public ucar.nc2.Group addGroup(ucar.nc2.Group, ucar.nc2.Group)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group r1, r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: ucar.nc2.Group;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        virtualinvoke r3.<ucar.nc2.Group: void addGroup(ucar.nc2.Group)>(r1);

        return r1;
    }

    public ucar.nc2.Dimension addDimension(ucar.nc2.Group, ucar.nc2.Dimension)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Dimension r1;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: ucar.nc2.Dimension;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        virtualinvoke r3.<ucar.nc2.Group: void addDimension(ucar.nc2.Dimension)>(r1);

        return r1;
    }

    public boolean removeDimension(ucar.nc2.Group, java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        ucar.nc2.Group r3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        $z1 = virtualinvoke r3.<ucar.nc2.Group: boolean removeDimension(java.lang.String)>(r1);

        return $z1;
    }

    public ucar.nc2.Variable addVariable(ucar.nc2.Group, ucar.nc2.Variable)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.Variable r1;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group r3;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: ucar.nc2.Variable;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        if r1 == null goto label3;

        virtualinvoke r3.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>(r1);

     label3:
        return r1;
    }

    public ucar.nc2.Variable addVariable(ucar.nc2.Group, java.lang.String, ucar.ma2.DataType, java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        ucar.ma2.DataType r3;
        ucar.nc2.Group r6;
        ucar.nc2.Variable $r1;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r2, r4;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r6 := @parameter0: ucar.nc2.Group;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: ucar.ma2.DataType;

        r4 := @parameter3: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r5;

     label1:
        if r6 != null goto label2;

        r6 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        $r1 = new ucar.nc2.Variable;

        specialinvoke $r1.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r0, r6, null, r2);

        virtualinvoke $r1.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>(r3);

        virtualinvoke $r1.<ucar.nc2.Variable: void setDimensions(java.lang.String)>(r4);

        virtualinvoke r6.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>($r1);

        return $r1;
    }

    public ucar.nc2.Variable addStringVariable(ucar.nc2.Group, java.lang.String, java.lang.String, int)
    {
        java.lang.IllegalStateException $r15;
        int i0;
        ucar.nc2.Variable $r7;
        java.lang.String r2, $r5, r10, $r14;
        boolean $z0;
        ucar.ma2.DataType $r8;
        ucar.nc2.Group r16;
        java.lang.StringBuilder $r1, $r3, $r4, $r9, $r11, $r12, $r13;
        ucar.nc2.Dimension $r6;
        ucar.nc2.NetcdfFile r0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r16 := @parameter0: ucar.nc2.Group;

        r2 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r15;

     label1:
        if r16 != null goto label2;

        r16 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_strlen");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new ucar.nc2.Dimension;

        specialinvoke $r6.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r5, i0);

        virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(r16, $r6);

        $r7 = new ucar.nc2.Variable;

        specialinvoke $r7.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r0, r16, null, r2);

        $r8 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        virtualinvoke $r7.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r14);

        virtualinvoke r16.<ucar.nc2.Group: void addVariable(ucar.nc2.Variable)>($r7);

        return $r7;
    }

    public boolean removeVariable(ucar.nc2.Group, java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        ucar.nc2.Group r3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        if r3 != null goto label2;

        r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

     label2:
        $z1 = virtualinvoke r3.<ucar.nc2.Group: boolean removeVariable(java.lang.String)>(r1);

        return $z1;
    }

    public ucar.nc2.Attribute addVariableAttribute(ucar.nc2.Variable, ucar.nc2.Attribute)
    {
        ucar.nc2.Attribute r1, $r2;
        ucar.nc2.Variable r0;
        ucar.nc2.NetcdfFile r3;

        r3 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: ucar.nc2.Variable;

        r1 := @parameter1: ucar.nc2.Attribute;

        $r2 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>(r1);

        return $r2;
    }

    public java.lang.Object sendIospMessage(java.lang.Object)
    {
        ucar.nc2.iosp.IOServiceProvider $r2, $r3;
        java.lang.Boolean $r7, $r12, $r13;
        ucar.nc2.Variable $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, z6, $z7, $z8;
        ucar.nc2.Group $r5, $r8, $r10;
        java.util.List $r9;
        java.lang.Object r0, $r4;
        ucar.nc2.NetcdfFile r1;

        r1 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.lang.Object;

        if null != r0 goto label01;

        return null;

     label01:
        if r0 != "AddRecordStructure" goto label07;

        $r10 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        $r11 = virtualinvoke $r10.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        if $r11 == null goto label02;

        $z2 = $r11 instanceof ucar.nc2.Structure;

        if $z2 == 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        if $z3 != 0 goto label04;

        $r13 = virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.Boolean makeRecordStructure()>();

        $z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label05;

     label04:
        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        return $r12;

     label07:
        if r0 != "RemoveRecordStructure" goto label11;

        $r5 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        $r6 = virtualinvoke $r5.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        if $r6 == null goto label08;

        $z0 = $r6 instanceof ucar.nc2.Structure;

        if $z0 == 0 goto label08;

        $z8 = 1;

        $z7 = 1;

        goto label09;

     label08:
        $z8 = 0;

        $z7 = 0;

     label09:
        z6 = $z7;

        if $z8 == 0 goto label10;

        $r8 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        virtualinvoke $r8.<ucar.nc2.Group: boolean remove(ucar.nc2.Variable)>($r6);

        $r9 = r1.<ucar.nc2.NetcdfFile: java.util.List variables>;

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>($r6);

        virtualinvoke r1.<ucar.nc2.NetcdfFile: java.lang.Boolean removeRecordStructure()>();

     label10:
        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6);

        return $r7;

     label11:
        $r2 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r2 == null goto label12;

        $r3 = r1.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r4 = interfaceinvoke $r3.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>(r0);

        return $r4;

     label12:
        return null;
    }

    protected java.lang.Boolean makeRecordStructure()
    {
        java.lang.IllegalStateException $r5;
        ucar.nc2.iosp.IOServiceProvider $r1, $r2, $r3;
        java.lang.Boolean r6;
        java.lang.Object $r4;
        ucar.nc2.NetcdfFile r0;
        boolean $z0, $z1, $z2;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r5;

     label1:
        r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label2;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $z1 = $r2 instanceof ucar.nc2.iosp.netcdf3.N3iosp;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<ucar.nc2.NetcdfFile: boolean hasUnlimitedDimension()>();

        if $z2 == 0 goto label2;

        $r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r4 = interfaceinvoke $r3.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        r6 = (java.lang.Boolean) $r4;

     label2:
        return r6;
    }

    protected java.lang.Boolean removeRecordStructure()
    {
        java.lang.IllegalStateException $r5;
        ucar.nc2.iosp.IOServiceProvider $r1, $r2, $r3;
        java.lang.Boolean r6;
        java.lang.Object $r4;
        ucar.nc2.NetcdfFile r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r5;

     label1:
        r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label2;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $z1 = $r2 instanceof ucar.nc2.iosp.netcdf3.N3iosp;

        if $z1 == 0 goto label2;

        $r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r4 = interfaceinvoke $r3.<ucar.nc2.iosp.IOServiceProvider: java.lang.Object sendIospMessage(java.lang.Object)>("RemoveRecordStructure");

        r6 = (java.lang.Boolean) $r4;

     label2:
        return r6;
    }

    public void setId(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        r0.<ucar.nc2.NetcdfFile: java.lang.String id> = r1;

        return;
    }

    public void setTitle(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        r0.<ucar.nc2.NetcdfFile: java.lang.String title> = r1;

        return;
    }

    public void setLocation(java.lang.String)
    {
        java.lang.IllegalStateException $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r2;

     label1:
        r0.<ucar.nc2.NetcdfFile: java.lang.String location> = r1;

        return;
    }

    public ucar.nc2.NetcdfFile setImmutable()
    {
        ucar.nc2.Group $r1;
        java.util.List $r2, $r3, $r4, $r5, $r6, $r7;
        ucar.nc2.NetcdfFile r0;
        boolean $z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r0.<ucar.nc2.NetcdfFile: boolean immutable> = 1;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void setImmutable(ucar.nc2.Group)>($r1);

        $r2 = r0.<ucar.nc2.NetcdfFile: java.util.List variables>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        r0.<ucar.nc2.NetcdfFile: java.util.List variables> = $r3;

        $r4 = r0.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r4);

        r0.<ucar.nc2.NetcdfFile: java.util.List dimensions> = $r5;

        $r6 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        $r7 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r6);

        r0.<ucar.nc2.NetcdfFile: java.util.List gattributes> = $r7;

        return r0;
    }

    private void setImmutable(ucar.nc2.Group)
    {
        ucar.nc2.Variable r11;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2, $r4, $r6;
        ucar.nc2.Group r0, r13;
        java.util.List $r1, $r3, $r5;
        java.lang.Object $r7, $r9, $r10;
        ucar.nc2.Dimension r12;
        ucar.nc2.NetcdfFile r8;

        r8 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: ucar.nc2.Group;

        $r1 = r0.<ucar.nc2.Group: java.util.List variables>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (ucar.nc2.Variable) $r10;

        virtualinvoke r11.<ucar.nc2.Variable: ucar.nc2.Variable setImmutable()>();

        goto label1;

     label2:
        $r3 = r0.<ucar.nc2.Group: java.util.List dimensions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.nc2.Dimension) $r9;

        virtualinvoke r12.<ucar.nc2.Dimension: ucar.nc2.Dimension setImmutable()>();

        goto label3;

     label4:
        $r5 = virtualinvoke r0.<ucar.nc2.Group: java.util.List getGroups()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r13 = (ucar.nc2.Group) $r7;

        specialinvoke r8.<ucar.nc2.NetcdfFile: void setImmutable(ucar.nc2.Group)>(r13);

        goto label5;

     label6:
        virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group setImmutable()>();

        return;
    }

    public void empty()
    {
        java.lang.IllegalStateException $r5;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group $r4;
        boolean $z0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r5;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.NetcdfFile: java.util.List variables> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.NetcdfFile: java.util.List gattributes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.NetcdfFile: java.util.List dimensions> = $r3;

        $r4 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group makeRootGroup()>();

        r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup> = $r4;

        return;
    }

    protected ucar.nc2.Group makeRootGroup()
    {
        ucar.nc2.NetcdfFile r1;
        ucar.nc2.Group $r0;

        r1 := @this: ucar.nc2.NetcdfFile;

        $r0 = new ucar.nc2.Group;

        specialinvoke $r0.<ucar.nc2.Group: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String)>(r1, null, "");

        $r0.<ucar.nc2.Group: ucar.nc2.Group parent> = null;

        return $r0;
    }

    public void finish()
    {
        java.lang.IllegalStateException $r5;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Group $r4;
        boolean $z0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean immutable>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cant modify");

        throw $r5;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.NetcdfFile: java.util.List variables> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.NetcdfFile: java.util.List dimensions> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.NetcdfFile: java.util.List gattributes> = $r3;

        $r4 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void finishGroup(ucar.nc2.Group)>($r4);

        return;
    }

    private void finishGroup(ucar.nc2.Group)
    {
        boolean $z0, $z1, $z2, $z3;
        ucar.nc2.Group r1, $r12, $r19, r27;
        java.util.List $r2, $r3, $r4, $r6, $r8, $r16, $r17, $r23, $r24;
        ucar.nc2.Attribute $r22, r25;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r13, $r14, $r20, $r21;
        java.util.Iterator $r5, $r7, $r9;
        java.lang.Object $r10, $r11, $r18;
        ucar.nc2.Dimension $r15, r26;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: ucar.nc2.Group;

        $r3 = r0.<ucar.nc2.NetcdfFile: java.util.List variables>;

        $r2 = r1.<ucar.nc2.Group: java.util.List variables>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r4 = r1.<ucar.nc2.Group: java.util.List attributes>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r18 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r25 = (ucar.nc2.Attribute) $r18;

        $r19 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        if r1 != $r19 goto label02;

        $r24 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r25);

        goto label03;

     label02:
        $r20 = virtualinvoke r25.<ucar.nc2.Attribute: java.lang.String getName()>();

        $r21 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String makeFullNameWithString(ucar.nc2.Group,java.lang.String)>(r1, $r20);

        $r23 = r0.<ucar.nc2.NetcdfFile: java.util.List gattributes>;

        $r22 = new ucar.nc2.Attribute;

        specialinvoke $r22.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.nc2.Attribute)>($r21, r25);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r22);

     label03:
        goto label01;

     label04:
        $r6 = r1.<ucar.nc2.Group: java.util.List dimensions>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r11 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r26 = (ucar.nc2.Dimension) $r11;

        $z3 = virtualinvoke r26.<ucar.nc2.Dimension: boolean isShared()>();

        if $z3 == 0 goto label07;

        $r12 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.Group rootGroup>;

        if r1 != $r12 goto label06;

        $r17 = r0.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r26);

        goto label07;

     label06:
        $r13 = virtualinvoke r26.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r14 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.lang.String makeFullNameWithString(ucar.nc2.Group,java.lang.String)>(r1, $r13);

        $r16 = r0.<ucar.nc2.NetcdfFile: java.util.List dimensions>;

        $r15 = new ucar.nc2.Dimension;

        specialinvoke $r15.<ucar.nc2.Dimension: void <init>(java.lang.String,ucar.nc2.Dimension)>($r14, r26);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

     label07:
        goto label05;

     label08:
        $r8 = virtualinvoke r1.<ucar.nc2.Group: java.util.List getGroups()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r27 = (ucar.nc2.Group) $r10;

        specialinvoke r0.<ucar.nc2.NetcdfFile: void finishGroup(ucar.nc2.Group)>(r27);

        goto label09;

     label10:
        return;
    }

    protected java.lang.String makeFullNameWithString(ucar.nc2.Group, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String r2, $r3;
        ucar.nc2.NetcdfFile r4;
        ucar.nc2.Group r1;

        r4 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: ucar.nc2.Group;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendGroupName(java.lang.StringBuilder,ucar.nc2.Group)>($r0, r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected static java.lang.String makeFullName(ucar.nc2.Group, ucar.nc2.Variable)
    {
        ucar.nc2.Variable r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4;
        ucar.nc2.Group r0;
        boolean $z0, $z1;

        r0 := @parameter0: ucar.nc2.Group;

        r1 := @parameter1: ucar.nc2.Variable;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<ucar.nc2.Group: boolean isRoot()>();

        if $z1 == 0 goto label2;

     label1:
        $z0 = virtualinvoke r1.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r1.<ucar.nc2.Variable: java.lang.String getShortName()>();

        return $r4;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendGroupName(java.lang.StringBuilder,ucar.nc2.Group)>($r2, r0);

        staticinvoke <ucar.nc2.NetcdfFile: void appendStructureName(java.lang.StringBuilder,ucar.nc2.Variable)>($r2, r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static void appendGroupName(java.lang.StringBuilder, ucar.nc2.Group)
    {
        java.lang.StringBuilder r3;
        java.lang.String $r4;
        ucar.nc2.Group r0, $r1, $r2, $r5;
        boolean $z0;

        r3 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: ucar.nc2.Group;

        $r1 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        if $r2 == null goto label4;

        $r5 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendGroupName(java.lang.StringBuilder,ucar.nc2.Group)>(r3, $r5);

     label4:
        $r4 = virtualinvoke r0.<ucar.nc2.Group: java.lang.String getShortName()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        return;
    }

    private static void appendStructureName(java.lang.StringBuilder, ucar.nc2.Variable)
    {
        ucar.nc2.Variable r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        ucar.nc2.Structure $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: ucar.nc2.Variable;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendStructureName(java.lang.StringBuilder,ucar.nc2.Variable)>(r1, $r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        return;
    }

    protected static java.lang.String makeFullNameEscaped(ucar.nc2.Group, ucar.nc2.Variable)
    {
        java.lang.StringBuilder $r0;
        ucar.nc2.Variable r2;
        java.lang.String $r3;
        ucar.nc2.Group r1;

        r1 := @parameter0: ucar.nc2.Group;

        r2 := @parameter1: ucar.nc2.Variable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendGroupNameEscaped(java.lang.StringBuilder,ucar.nc2.Group)>($r0, r1);

        staticinvoke <ucar.nc2.NetcdfFile: void appendStructureNameEscaped(java.lang.StringBuilder,ucar.nc2.Variable)>($r0, r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static void appendGroupNameEscaped(java.lang.StringBuilder, ucar.nc2.Group)
    {
        ucar.nc2.Group r0, $r1, $r2, $r6;
        java.lang.StringBuilder r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r3 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: ucar.nc2.Group;

        $r1 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        if $r2 == null goto label4;

        $r6 = virtualinvoke r0.<ucar.nc2.Group: ucar.nc2.Group getParentGroup()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendGroupNameEscaped(java.lang.StringBuilder,ucar.nc2.Group)>(r3, $r6);

     label4:
        $r4 = virtualinvoke r0.<ucar.nc2.Group: java.lang.String getShortName()>();

        $r5 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String escapeName(java.lang.String)>($r4);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        return;
    }

    private static void appendStructureNameEscaped(java.lang.StringBuilder, ucar.nc2.Variable)
    {
        ucar.nc2.Variable r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2, $r3;
        ucar.nc2.Structure $r4;
        boolean $z0;

        r1 := @parameter0: java.lang.StringBuilder;

        r0 := @parameter1: ucar.nc2.Variable;

        $z0 = virtualinvoke r0.<ucar.nc2.Variable: boolean isMemberOfStructure()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<ucar.nc2.Variable: ucar.nc2.Structure getParentStructure()>();

        staticinvoke <ucar.nc2.NetcdfFile: void appendStructureNameEscaped(java.lang.StringBuilder,ucar.nc2.Variable)>(r1, $r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r3 = staticinvoke <ucar.nc2.NetcdfFile: java.lang.String escapeName(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        return;
    }

    protected ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r14;
        ucar.ma2.Section r3;
        ucar.nc2.util.cache.FileCache $r12;
        ucar.nc2.iosp.IOServiceProvider $r1, $r4;
        ucar.nc2.Variable r2;
        java.lang.String $r9, $r11, $r13, $r18, $r22, $r26;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r20;
        java.io.IOException $r6;
        ucar.ma2.Array $r5;
        java.lang.StringBuilder $r7, $r8, $r10, $r15, $r16, $r17, $r19, $r21, $r23, $r24, $r25;
        ucar.nc2.NetcdfFile r0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: ucar.nc2.Variable;

        r3 := @parameter1: ucar.ma2.Section;

        $z0 = <ucar.nc2.NetcdfFile: boolean showRequest>;

        if $z0 == 0 goto label1;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data request for variable: ");

        $r22 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" section= ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label1:
        $z1 = r0.<ucar.nc2.NetcdfFile: boolean unlocked>;

        if $z1 == 0 goto label2;

        $r12 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.util.cache.FileCache cache>;

        $r13 = virtualinvoke $r12.<ucar.nc2.util.cache.FileCache: java.lang.String getInfo(ucar.nc2.util.cache.FileCacheable)>(r0);

        $r14 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File is unlocked - cannot use\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label2:
        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 != null goto label3;

        $r6 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BAD: missing spi: ");

        $r9 = virtualinvoke r2.<ucar.nc2.Variable: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        $r4 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r5 = interfaceinvoke $r4.<ucar.nc2.iosp.IOServiceProvider: ucar.ma2.Array readData(ucar.nc2.Variable,ucar.ma2.Section)>(r2, r3);

        $z2 = virtualinvoke r2.<ucar.nc2.Variable: boolean isUnsigned()>();

        virtualinvoke $r5.<ucar.ma2.Array: void setUnsigned(boolean)>($z2);

        return $r5;
    }

    public ucar.ma2.Array readSection(java.lang.String) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r12;
        ucar.ma2.Section $r8;
        ucar.ma2.Array $r6, $r7, $r10;
        ucar.nc2.iosp.IOServiceProvider $r4, $r5;
        ucar.nc2.ParsedSectionSpec $r2, $r3;
        ucar.nc2.Variable $r9, $r11;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean unlocked>;

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("File is unlocked - cannot use");

        throw $r12;

     label1:
        $r2 = staticinvoke <ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec parseVariableSection(ucar.nc2.NetcdfFile,java.lang.String)>(r0, r1);

        $r3 = $r2.<ucar.nc2.ParsedSectionSpec: ucar.nc2.ParsedSectionSpec child>;

        if $r3 != null goto label2;

        $r9 = $r2.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $r8 = $r2.<ucar.nc2.ParsedSectionSpec: ucar.ma2.Section section>;

        $r10 = virtualinvoke $r9.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>($r8);

        $r11 = $r2.<ucar.nc2.ParsedSectionSpec: ucar.nc2.Variable v>;

        $z1 = virtualinvoke $r11.<ucar.nc2.Variable: boolean isUnsigned()>();

        virtualinvoke $r10.<ucar.ma2.Array: void setUnsigned(boolean)>($z1);

        return $r10;

     label2:
        $r4 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r4 != null goto label3;

        $r7 = staticinvoke <ucar.nc2.iosp.IospHelper: ucar.ma2.Array readSection(ucar.nc2.ParsedSectionSpec)>($r2);

        return $r7;

     label3:
        $r5 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r6 = interfaceinvoke $r5.<ucar.nc2.iosp.IOServiceProvider: ucar.ma2.Array readSection(ucar.nc2.ParsedSectionSpec)>($r2);

        return $r6;
    }

    protected long readToByteChannel(ucar.nc2.Variable, ucar.ma2.Section, java.nio.channels.WritableByteChannel) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.IllegalStateException $r7;
        ucar.ma2.Section r3;
        long $l0, $l1;
        ucar.ma2.Array $r4;
        ucar.nc2.iosp.IOServiceProvider $r1, $r6;
        java.nio.channels.WritableByteChannel r5;
        ucar.nc2.Variable r2;
        ucar.nc2.NetcdfFile r0;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: ucar.nc2.Variable;

        r3 := @parameter1: ucar.ma2.Section;

        r5 := @parameter2: java.nio.channels.WritableByteChannel;

        $z0 = r0.<ucar.nc2.NetcdfFile: boolean unlocked>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("File is unlocked - cannot use");

        throw $r7;

     label1:
        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label2;

        $z1 = virtualinvoke r2.<ucar.nc2.Variable: boolean hasCachedData()>();

        if $z1 == 0 goto label3;

     label2:
        $r4 = virtualinvoke r2.<ucar.nc2.Variable: ucar.ma2.Array read(ucar.ma2.Section)>(r3);

        $l0 = staticinvoke <ucar.nc2.iosp.IospHelper: long copyToByteChannel(ucar.ma2.Array,java.nio.channels.WritableByteChannel)>($r4, r5);

        return $l0;

     label3:
        $r6 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $l1 = interfaceinvoke $r6.<ucar.nc2.iosp.IOServiceProvider: long readToByteChannel(ucar.nc2.Variable,ucar.ma2.Section,java.nio.channels.WritableByteChannel)>(r2, r3, r5);

        return $l1;
    }

    protected ucar.ma2.StructureDataIterator getStructureIterator(ucar.nc2.Structure, int) throws java.io.IOException
    {
        ucar.nc2.iosp.IOServiceProvider $r2;
        ucar.ma2.StructureDataIterator $r3;
        int i0;
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.Structure r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: ucar.nc2.Structure;

        i0 := @parameter1: int;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProvider: ucar.ma2.StructureDataIterator getStructureIterator(ucar.nc2.Structure,int)>(r1, i0);

        return $r3;
    }

    public java.util.List readArrays(java.util.List) throws java.io.IOException
    {
        java.util.Iterator $r2;
        ucar.ma2.Array $r5;
        java.util.ArrayList $r0;
        java.util.List r1;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        ucar.nc2.NetcdfFile r6;
        boolean $z0;

        r6 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $r5 = virtualinvoke r4.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public ucar.ma2.Array read(java.lang.String, boolean) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        java.lang.UnsupportedOperationException $r3;
        ucar.nc2.NetcdfFile r0;
        java.lang.String r1;
        ucar.ma2.Array $r2;
        boolean z0;

        r0 := @this: ucar.nc2.NetcdfFile;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("NetdfFile.read(String variableSection, boolean flatten=false)");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<ucar.nc2.NetcdfFile: ucar.ma2.Array readSection(java.lang.String)>(r1);

        return $r2;
    }

    protected java.lang.String toStringDebug(java.lang.Object)
    {
        ucar.nc2.iosp.IOServiceProvider $r1, $r3;
        java.lang.Object r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r4;

        r0 := @this: ucar.nc2.NetcdfFile;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r3 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r4 = interfaceinvoke $r3.<ucar.nc2.iosp.IOServiceProvider: java.lang.String toStringDebug(java.lang.Object)>(r2);

     label2:
        return $r4;
    }

    public java.lang.String getDetailInfo()
    {
        ucar.nc2.NetcdfFile r1;
        java.lang.String $r2;
        java.util.Formatter $r0;

        r1 := @this: ucar.nc2.NetcdfFile;

        $r0 = new java.util.Formatter;

        specialinvoke $r0.<java.util.Formatter: void <init>()>();

        virtualinvoke r1.<ucar.nc2.NetcdfFile: void getDetailInfo(java.util.Formatter)>($r0);

        $r2 = virtualinvoke $r0.<java.util.Formatter: java.lang.String toString()>();

        return $r2;
    }

    public void getDetailInfo(java.util.Formatter)
    {
        java.lang.Object[] $r1, $r4, $r6, $r8, $r10, $r12, $r16, $r19, $r22;
        java.util.Formatter r0;
        ucar.nc2.iosp.IOServiceProvider $r15, $r17, $r20;
        java.lang.String $r3, $r5, $r7, $r9, $r11, $r14, $r21;
        java.lang.Class $r13, $r18;
        ucar.nc2.NetcdfFile r2;

        r2 := @this: ucar.nc2.NetcdfFile;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r1[0] = $r3;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("NetcdfFile location= %s%n", $r1);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getTitle()>();

        $r4[0] = $r5;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  title= %s%n", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getId()>();

        $r6[0] = $r7;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  id= %s%n", $r6);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getFileTypeId()>();

        $r8[0] = $r9;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  fileType= %s%n", $r8);

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r2.<ucar.nc2.NetcdfFile: java.lang.String getFileTypeDescription()>();

        $r10[0] = $r11;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  fileDesc= %s%n", $r10);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12[0] = $r14;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  class= %s%n", $r12);

        $r15 = r2.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r15 != null goto label1;

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  has no IOSP%n", $r22);

        goto label2;

     label1:
        $r16 = newarray (java.lang.Object)[1];

        $r17 = r2.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $r16[0] = $r18;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  iosp= %s%n%n", $r16);

        $r19 = newarray (java.lang.Object)[1];

        $r20 = r2.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r21 = interfaceinvoke $r20.<ucar.nc2.iosp.IOServiceProvider: java.lang.String getDetailInfo()>();

        $r19[0] = $r21;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r19);

     label2:
        virtualinvoke r2.<ucar.nc2.NetcdfFile: void showCached(java.util.Formatter)>(r0);

        virtualinvoke r2.<ucar.nc2.NetcdfFile: void showProxies(java.util.Formatter)>(r0);

        return;
    }

    protected void showCached(java.util.Formatter)
    {
        java.util.Formatter r3;
        java.lang.Long $r24, $r35, $r37;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r1, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r27, $r28, $r29, $r30;
        ucar.nc2.NetcdfFile r0;
        java.lang.Object[] $r9, $r17, $r23, $r32, $r36, $r43;
        long $l0, $l1, $l3, $l4, $l5, l8;
        int $i2, $i6, i7;
        java.lang.Boolean $r34;
        ucar.nc2.Variable r26, r39;
        java.lang.String $r8, $r16, $r22, $r31, $r33, $r40;
        java.util.Iterator $r2, $r11;
        java.io.IOException $r41;
        ucar.ma2.Array r42;
        java.lang.Object $r25, $r38;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: java.util.Formatter;

        i7 = 8;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r38 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r39 = (ucar.nc2.Variable) $r38;

        $r40 = virtualinvoke r39.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $i6 = virtualinvoke $r40.<java.lang.String: int length()>();

        i7 = staticinvoke <java.lang.Math: int max(int,int)>(i7, $i6);

        goto label1;

     label2:
        l8 = 0L;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%n%-");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s isCaching  size     cachedSize (bytes) %n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "Variable";

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r8, $r9);

        $r10 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r25 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r26 = (ucar.nc2.Variable) $r25;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %-");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s %5s %8d ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = newarray (java.lang.Object)[3];

        $r33 = virtualinvoke r26.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r32[0] = $r33;

        $z2 = virtualinvoke r26.<ucar.nc2.Variable: boolean isCaching()>();

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r32[1] = $r34;

        $l1 = virtualinvoke r26.<ucar.nc2.Variable: long getSize()>();

        $i2 = virtualinvoke r26.<ucar.nc2.Variable: int getElementSize()>();

        $l3 = (long) $i2;

        $l4 = $l1 * $l3;

        $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r32[2] = $r35;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r31, $r32);

        $z3 = virtualinvoke r26.<ucar.nc2.Variable: boolean hasCachedData()>();

        if $z3 == 0 goto label8;

        r42 = null;

     label4:
        r42 = virtualinvoke r26.<ucar.nc2.Variable: ucar.ma2.Array read()>();

     label5:
        goto label7;

     label6:
        $r41 := @caughtexception;

        virtualinvoke $r41.<java.io.IOException: void printStackTrace()>();

     label7:
        $l5 = virtualinvoke r42.<ucar.ma2.Array: long getSizeBytes()>();

        $r36 = newarray (java.lang.Object)[1];

        $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r36[0] = $r37;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %8d", $r36);

        l8 = l8 + $l5;

     label8:
        $r43 = newarray (java.lang.Object)[0];

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r43);

        goto label3;

     label9:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s                  --------%n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = " ";

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r16, $r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s                 %8d Kb total cached%n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = " ";

        $l0 = l8 / 1000L;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r23[1] = $r24;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r22, $r23);

        return;

        catch java.io.IOException from label4 to label5 with label6;
    }

    protected void showProxies(java.util.Formatter)
    {
        java.util.Formatter r3;
        boolean $z0, $z1, z2;
        java.util.List $r1, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r15, $r16, $r17, $r18;
        ucar.nc2.NetcdfFile r0;
        java.lang.Object[] $r9, $r12, $r20;
        int $i0, i1;
        ucar.nc2.Variable r30, r31;
        java.lang.String $r8, $r19, $r21, $r24, $r26, $r29;
        ucar.nc2.ProxyReader $r14, $r22, $r28;
        java.util.Iterator $r2, $r11;
        java.lang.Object $r13, $r27;
        java.lang.Class $r23, $r25;

        r0 := @this: ucar.nc2.NetcdfFile;

        r3 := @parameter0: java.util.Formatter;

        i1 = 8;

        z2 = 0;

        $r1 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r27 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r30 = (ucar.nc2.Variable) $r27;

        $r28 = r30.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader>;

        if $r28 == r30 goto label2;

        z2 = 1;

     label2:
        $r29 = virtualinvoke r30.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $i0 = virtualinvoke $r29.<java.lang.String: int length()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i0);

        goto label1;

     label3:
        if z2 != 0 goto label4;

        return;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%n%-");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s  proxyReader   Variable.Class %n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "Variable";

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r8, $r9);

        $r10 = virtualinvoke r0.<ucar.nc2.NetcdfFile: java.util.List getVariables()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r31 = (ucar.nc2.Variable) $r13;

        $r14 = r31.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader>;

        if $r14 == r31 goto label6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %-");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s  %s %s%n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = newarray (java.lang.Object)[3];

        $r21 = virtualinvoke r31.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r20[0] = $r21;

        $r22 = r31.<ucar.nc2.Variable: ucar.nc2.ProxyReader proxyReader>;

        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getName()>();

        $r20[1] = $r24;

        $r25 = virtualinvoke r31.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r20[2] = $r26;

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r19, $r20);

     label6:
        goto label5;

     label7:
        $r12 = newarray (java.lang.Object)[0];

        virtualinvoke r3.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r12);

        return;
    }

    public ucar.nc2.iosp.IOServiceProvider getIosp()
    {
        ucar.nc2.NetcdfFile r0;
        ucar.nc2.iosp.IOServiceProvider $r1;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        return $r1;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.iosp.IOServiceProvider $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProvider: java.lang.String getFileTypeId()>();

        return $r3;

     label1:
        return "N/A";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.iosp.IOServiceProvider $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProvider: java.lang.String getFileTypeDescription()>();

        return $r3;

     label1:
        return "N/A";
    }

    public java.lang.String getFileTypeVersion()
    {
        ucar.nc2.iosp.IOServiceProvider $r1, $r2;
        ucar.nc2.NetcdfFile r0;
        java.lang.String $r3;

        r0 := @this: ucar.nc2.NetcdfFile;

        $r1 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.NetcdfFile: ucar.nc2.iosp.IOServiceProvider spi>;

        $r3 = interfaceinvoke $r2.<ucar.nc2.iosp.IOServiceProvider: java.lang.String getFileTypeVersion()>();

        return $r3;

     label1:
        return "N/A";
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r1;
        java.lang.Object[] $r7, $r8;
        java.lang.String[] r9;
        java.util.Formatter $r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r9 := @parameter0: java.lang.String[];

        $r0 = new java.util.Formatter;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r0.<java.util.Formatter: void <init>(java.io.PrintStream)>($r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" %");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(20);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s %n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "test";

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r6, $r7);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "asiuasdipuasiud";

        virtualinvoke $r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %20s %n", $r8);

        return;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12, $r15, $r17, $r18, $r21, $r23, $r24, $r27, $r29, $r30, $r33, $r35, $r36, $r39, $r41, $r42, $r45, $r47, $r48, $r51, $r53, $r54, $r57, $r59, $r60, $r63, $r65, $r66, $r69, $r71, $r72, $r75, $r77, $r78, $r81, $r83, $r84, $r87, $r89, $r90, $r93, $r95, $r96, $r99, $r101, $r102, $r105, $r107, $r108, $r111, $r113, $r114, $r117, $r119, $r120, $r123, $r125, $r126, $r129, $r131, $r132, $r135, $r137, $r138, $r141, $r143, $r144;
        java.lang.ClassLoader $r147, $r149, $r151, $r153, $r156, $r158, $r160;
        org.slf4j.Logger $r0, $r4, $r10, $r16, $r22, $r28, $r34, $r40, $r46, $r52, $r58, $r64, $r70, $r76, $r82, $r88, $r94, $r100, $r106, $r112, $r118, $r124, $r130, $r136, $r142;
        java.lang.Class $r146, $r148, $r150, $r152, $r154, $r155, $r157, $r159;
        java.lang.Throwable $r2, $r8, $r14, $r20, $r26, $r32, $r38, $r44, $r50, $r56, $r62, $r68, $r74, $r80, $r86, $r92, $r98, $r104, $r110, $r116, $r122, $r128, $r134, $r140;
        java.util.ArrayList $r1;
        java.lang.String $r7, $r13, $r19, $r25, $r31, $r37, $r43, $r49, $r55, $r61, $r67, $r73, $r79, $r85, $r91, $r97, $r103, $r109, $r115, $r121, $r127, $r133, $r139, $r145;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;

        <ucar.nc2.NetcdfFile: java.lang.String reserved> = " .!*\'();:@&=+$,/?%#[]";

        <ucar.nc2.NetcdfFile: java.lang.String IOSP_MESSAGE_RANDOM_ACCESS_FILE> = "RandomAccessFile";

        <ucar.nc2.NetcdfFile: java.lang.String IOSP_MESSAGE_REMOVE_RECORD_STRUCTURE> = "RemoveRecordStructure";

        <ucar.nc2.NetcdfFile: java.lang.String IOSP_MESSAGE_CONVERT_RECORD_STRUCTURE> = "ConvertRecordStructure";

        <ucar.nc2.NetcdfFile: java.lang.String IOSP_MESSAGE_ADD_RECORD_STRUCTURE> = "AddRecordStructure";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/NetcdfFile;");

        <ucar.nc2.NetcdfFile: org.slf4j.Logger log> = $r0;

        <ucar.nc2.NetcdfFile: int default_buffersize> = 8092;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <ucar.nc2.NetcdfFile: java.util.ArrayList registeredProviders> = $r1;

        <ucar.nc2.NetcdfFile: boolean debugSPI> = 0;

        <ucar.nc2.NetcdfFile: boolean debugCompress> = 0;

        <ucar.nc2.NetcdfFile: boolean showRequest> = 0;

        <ucar.nc2.NetcdfFile: boolean debugStructureIterator> = 0;

        <ucar.nc2.NetcdfFile: boolean loadWarnings> = 0;

        <ucar.nc2.NetcdfFile: boolean userLoads> = 0;

     label01:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.stream.NcStreamIosp");

     label02:
        goto label04;

     label03:
        $r140 := @caughtexception;

        $z23 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z23 == 0 goto label04;

        $r142 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r141 = new java.lang.StringBuilder;

        specialinvoke $r141.<java.lang.StringBuilder: void <init>()>();

        $r143 = virtualinvoke $r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r144 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r140);

        $r145 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r142.<org.slf4j.Logger: void info(java.lang.String)>($r145);

     label04:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.hdf5.H5iosp");

     label05:
        goto label07;

     label06:
        $r134 := @caughtexception;

        $z22 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z22 == 0 goto label07;

        $r136 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r135 = new java.lang.StringBuilder;

        specialinvoke $r135.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r134);

        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r136.<org.slf4j.Logger: void info(java.lang.String)>($r139);

     label07:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.hdf4.H4iosp");

     label08:
        goto label10;

     label09:
        $r128 := @caughtexception;

        $z21 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z21 == 0 goto label10;

        $r130 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r129 = new java.lang.StringBuilder;

        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();

        $r131 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r128);

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r130.<org.slf4j.Logger: void info(java.lang.String)>($r133);

     label10:
        $r146 = class "Lucar/nc2/NetcdfFile;";

        $r147 = virtualinvoke $r146.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r147.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("ucar.grib.grib2.Grib2Input");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.grib.GribGridServiceProvider");

     label11:
        goto label13;

     label12:
        $r122 := @caughtexception;

        $z20 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z20 == 0 goto label13;

        $r124 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r123 = new java.lang.StringBuilder;

        specialinvoke $r123.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r122);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r124.<org.slf4j.Logger: void info(java.lang.String)>($r127);

     label13:
        $r148 = class "Lucar/nc2/NetcdfFile;";

        $r149 = virtualinvoke $r148.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r149.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("ucar.grib.grib2.Grib2Input");

        $r150 = class "Lucar/nc2/NetcdfFile;";

        $r151 = virtualinvoke $r150.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r151.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("visad.util.Trace");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.gempak.GempakGridServiceProvider");

     label14:
        goto label16;

     label15:
        $r116 := @caughtexception;

        $z19 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z19 == 0 goto label16;

        $r118 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r116);

        $r121 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r118.<org.slf4j.Logger: void info(java.lang.String)>($r121);

     label16:
        $r152 = class "Lucar/nc2/NetcdfFile;";

        $r153 = virtualinvoke $r152.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r154 = virtualinvoke $r153.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("ucar.nc2.iosp.bufr.BufrIosp");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.Class)>($r154);

     label17:
        goto label19;

     label18:
        $r110 := @caughtexception;

        $z18 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z18 == 0 goto label19;

        $r112 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load resource: ");

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r110);

        $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r112.<org.slf4j.Logger: void info(java.lang.String)>($r115);

     label19:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider");

     label20:
        goto label22;

     label21:
        $r104 := @caughtexception;

        $z17 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z17 == 0 goto label22;

        $r106 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r107 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r104);

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r106.<org.slf4j.Logger: void info(java.lang.String)>($r109);

     label22:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.nids.Nidsiosp");

     label23:
        goto label25;

     label24:
        $r98 := @caughtexception;

        $z16 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z16 == 0 goto label25;

        $r100 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r98);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r100.<org.slf4j.Logger: void info(java.lang.String)>($r103);

     label25:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.nowrad.NOWRadiosp");

     label26:
        goto label28;

     label27:
        $r92 := @caughtexception;

        $z15 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z15 == 0 goto label28;

        $r94 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r92);

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r94.<org.slf4j.Logger: void info(java.lang.String)>($r97);

     label28:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.dorade.Doradeiosp");

     label29:
        goto label31;

     label30:
        $r86 := @caughtexception;

        $z14 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z14 == 0 goto label31;

        $r88 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r86);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r88.<org.slf4j.Logger: void info(java.lang.String)>($r91);

     label31:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.dmsp.DMSPiosp");

     label32:
        goto label34;

     label33:
        $r80 := @caughtexception;

        $z13 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z13 == 0 goto label34;

        $r82 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r80);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r82.<org.slf4j.Logger: void info(java.lang.String)>($r85);

     label34:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.cinrad.Cinrad2IOServiceProvider");

     label35:
        goto label37;

     label36:
        $r74 := @caughtexception;

        $z12 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z12 == 0 goto label37;

        $r76 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r74);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r76.<org.slf4j.Logger: void info(java.lang.String)>($r79);

     label37:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.misc.GtopoIosp");

     label38:
        goto label40;

     label39:
        $r68 := @caughtexception;

        $z11 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z11 == 0 goto label40;

        $r70 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r68);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r70.<org.slf4j.Logger: void info(java.lang.String)>($r73);

     label40:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.misc.NmcObsLegacy");

     label41:
        goto label43;

     label42:
        $r62 := @caughtexception;

        $z10 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z10 == 0 goto label43;

        $r64 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r62);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r64.<org.slf4j.Logger: void info(java.lang.String)>($r67);

     label43:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.gini.Giniiosp");

     label44:
        goto label46;

     label45:
        $r56 := @caughtexception;

        $z9 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z9 == 0 goto label46;

        $r58 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r58.<org.slf4j.Logger: void info(java.lang.String)>($r61);

     label46:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.uf.UFiosp");

     label47:
        goto label49;

     label48:
        $r50 := @caughtexception;

        $z8 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z8 == 0 goto label49;

        $r52 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r52.<org.slf4j.Logger: void info(java.lang.String)>($r55);

     label49:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.misc.Uspln");

     label50:
        goto label52;

     label51:
        $r44 := @caughtexception;

        $z7 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z7 == 0 goto label52;

        $r46 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r46.<org.slf4j.Logger: void info(java.lang.String)>($r49);

     label52:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.misc.Nldn");

     label53:
        goto label55;

     label54:
        $r38 := @caughtexception;

        $z6 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z6 == 0 goto label55;

        $r40 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r40.<org.slf4j.Logger: void info(java.lang.String)>($r43);

     label55:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.fysat.Fysatiosp");

     label56:
        goto label58;

     label57:
        $r32 := @caughtexception;

        $z5 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z5 == 0 goto label58;

        $r34 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void info(java.lang.String)>($r37);

     label58:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.uamiv.UAMIVServiceProvider");

     label59:
        goto label61;

     label60:
        $r26 := @caughtexception;

        $z4 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z4 == 0 goto label61;

        $r28 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String)>($r31);

     label61:
        $r155 = class "Lucar/nc2/NetcdfFile;";

        $r156 = virtualinvoke $r155.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r156.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("edu.wisc.ssec.mcidas.AreaFile");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.mcidas.AreaServiceProvider");

     label62:
        goto label64;

     label63:
        $r20 := @caughtexception;

        $z3 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z3 == 0 goto label64;

        $r22 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r25);

     label64:
        $r157 = class "Lucar/nc2/NetcdfFile;";

        $r158 = virtualinvoke $r157.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r158.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("visad.util.Trace");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.gempak.GempakSurfaceIOSP");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.gempak.GempakSoundingIOSP");

     label65:
        goto label67;

     label66:
        $r14 := @caughtexception;

        $z2 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z2 == 0 goto label67;

        $r16 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r19);

     label67:
        $r159 = class "Lucar/nc2/NetcdfFile;";

        $r160 = virtualinvoke $r159.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r160.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("edu.wisc.ssec.mcidas.GridDirectory");

        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.mcidas.McIDASGridServiceProvider");

     label68:
        goto label70;

     label69:
        $r8 := @caughtexception;

        $z1 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z1 == 0 goto label70;

        $r10 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>($r13);

     label70:
        staticinvoke <ucar.nc2.NetcdfFile: void registerIOProvider(java.lang.String)>("ucar.nc2.iosp.noaa.Ghcnm2");

     label71:
        goto label73;

     label72:
        $r2 := @caughtexception;

        $z0 = <ucar.nc2.NetcdfFile: boolean loadWarnings>;

        if $z0 == 0 goto label73;

        $r4 = <ucar.nc2.NetcdfFile: org.slf4j.Logger log>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r7);

     label73:
        <ucar.nc2.NetcdfFile: boolean userLoads> = 1;

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label30;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch java.lang.Throwable from label49 to label50 with label51;
        catch java.lang.Throwable from label52 to label53 with label54;
        catch java.lang.Throwable from label55 to label56 with label57;
        catch java.lang.Throwable from label58 to label59 with label60;
        catch java.lang.Throwable from label61 to label62 with label63;
        catch java.lang.Throwable from label64 to label65 with label66;
        catch java.lang.Throwable from label67 to label68 with label69;
        catch java.lang.Throwable from label70 to label71 with label72;
    }
}
