public class com.hp.hpl.jena.sparql.pfunction.library.blankNode extends com.hp.hpl.jena.sparql.pfunction.PFuncSimple
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.library.blankNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.blankNode;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PFuncSimple: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, $r2, r3, r13;
        com.hp.hpl.jena.sparql.pfunction.library.blankNode r12;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r11;
        java.lang.String $r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.core.Var $r8;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r5, $r7, $r9, $r10;

        r12 := @this: com.hp.hpl.jena.sparql.pfunction.library.blankNode;

        r6 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r13 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        r4 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        $r11 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("bnode: subject is an unbound variable");

        throw $r11;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z1 != 0 goto label2;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4);

        return $r10;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $r2 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r1);

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z2 == 0 goto label3;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r3);

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator oneResult(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6, $r8, $r2, r4);

        return $r9;

     label3:
        $z3 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>($r2);

        if $z3 == 0 goto label4;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator result(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6, r4);

        return $r7;

     label4:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4);

        return $r5;
    }
}
