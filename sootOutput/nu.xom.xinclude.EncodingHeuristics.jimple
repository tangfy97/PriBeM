class nu.xom.xinclude.EncodingHeuristics extends java.lang.Object
{

    private void <init>()
    {
        nu.xom.xinclude.EncodingHeuristics r0;

        r0 := @this: nu.xom.xinclude.EncodingHeuristics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String readEncodingFromStream(java.io.InputStream) throws java.io.IOException
    {
        byte[] r7, r8;
        byte $b5, $b6, $b7, $b8, $b9;
        int $i0, $i1, $i2, $i3, $i4, $i10, $i11, i12, i13, $i15;
        java.lang.String $r2, $r4, $r9, $r10;
        java.io.IOException $r6;
        java.lang.RuntimeException $r5;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<java.io.InputStream: void mark(int)>(1024);

     label01:
        $i0 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i0 != 254 goto label03;

        if $i1 != 255 goto label03;

     label02:
        return "UnicodeBig";

     label03:
        if $i0 != 255 goto label05;

        if $i1 != 254 goto label05;

     label04:
        return "UnicodeLittle";

     label05:
        $i2 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i0 != 239 goto label07;

        if $i1 != 187 goto label07;

        if $i2 != 191 goto label07;

     label06:
        return "UTF-8";

     label07:
        $i11 = virtualinvoke r0.<java.io.InputStream: int read()>();

        if $i0 != 0 goto label09;

        if $i1 != 0 goto label09;

        if $i2 != 254 goto label09;

        if $i11 != 255 goto label09;

     label08:
        return "UTF32BE";

     label09:
        if $i0 != 0 goto label11;

        if $i1 != 0 goto label11;

        if $i2 != 255 goto label11;

        if $i11 != 254 goto label11;

     label10:
        return "UTF32LE";

     label11:
        if $i0 != 0 goto label13;

        if $i1 != 0 goto label13;

        if $i2 != 0 goto label13;

        if $i11 != 60 goto label13;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label12:
        return "UTF32BE";

     label13:
        if $i0 != 60 goto label15;

        if $i1 != 0 goto label15;

        if $i2 != 0 goto label15;

        if $i11 != 0 goto label15;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label14:
        return "UTF32LE";

     label15:
        if $i0 != 0 goto label17;

        if $i1 != 60 goto label17;

        if $i2 != 0 goto label17;

        if $i11 != 63 goto label17;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label16:
        return "UnicodeBigUnmarked";

     label17:
        if $i0 != 60 goto label19;

        if $i1 != 0 goto label19;

        if $i2 != 63 goto label19;

        if $i11 != 0 goto label19;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label18:
        return "UnicodeLittleUnmarked";

     label19:
        if $i0 != 60 goto label21;

        if $i1 != 63 goto label21;

        if $i2 != 120 goto label21;

        if $i11 != 109 goto label21;

        r7 = newarray (byte)[1024];

        $b6 = (byte) $i0;

        r7[0] = $b6;

        $b7 = (byte) $i1;

        r7[1] = $b7;

        $b8 = (byte) $i2;

        r7[2] = $b8;

        $b9 = (byte) $i11;

        r7[3] = $b9;

        $i10 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r7, 4, 1020);

        i12 = $i10 + 4;

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r7, 0, i12, "8859_1");

        $r4 = staticinvoke <nu.xom.xinclude.EncodingHeuristics: java.lang.String findEncodingDeclaration(java.lang.String)>($r9);

        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label20:
        return $r4;

     label21:
        if $i0 != 76 goto label26;

        if $i1 != 111 goto label26;

        if $i2 != 167 goto label26;

        if $i11 != 148 goto label26;

        r8 = newarray (byte)[1016];

        i13 = 0;

     label22:
        $i3 = lengthof r8;

        if i13 >= $i3 goto label24;

        $i4 = virtualinvoke r0.<java.io.InputStream: int read()>();

        $i15 = (int) -1;

        if $i4 != $i15 goto label23;

        goto label24;

     label23:
        $b5 = (byte) $i4;

        r8[i13] = $b5;

        i13 = i13 + 1;

        goto label22;

     label24:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        $r10 = new java.lang.String;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],java.lang.String)>(r8, "Cp037");

        $r2 = staticinvoke <nu.xom.xinclude.EncodingHeuristics: java.lang.String findEncodingDeclaration(java.lang.String)>($r10);

     label25:
        return $r2;

     label26:
        goto label29;

     label27:
        $r6 := @caughtexception;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return "UTF-8";

     label28:
        $r5 := @caughtexception;

        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return "UTF-8";

     label29:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

        return "UTF-8";

        catch java.io.IOException from label01 to label02 with label27;
        catch java.io.IOException from label03 to label04 with label27;
        catch java.io.IOException from label05 to label06 with label27;
        catch java.io.IOException from label07 to label08 with label27;
        catch java.io.IOException from label09 to label10 with label27;
        catch java.io.IOException from label11 to label12 with label27;
        catch java.io.IOException from label13 to label14 with label27;
        catch java.io.IOException from label15 to label16 with label27;
        catch java.io.IOException from label17 to label18 with label27;
        catch java.io.IOException from label19 to label20 with label27;
        catch java.io.IOException from label21 to label25 with label27;
        catch java.lang.RuntimeException from label01 to label02 with label28;
        catch java.lang.RuntimeException from label03 to label04 with label28;
        catch java.lang.RuntimeException from label05 to label06 with label28;
        catch java.lang.RuntimeException from label07 to label08 with label28;
        catch java.lang.RuntimeException from label09 to label10 with label28;
        catch java.lang.RuntimeException from label11 to label12 with label28;
        catch java.lang.RuntimeException from label13 to label14 with label28;
        catch java.lang.RuntimeException from label15 to label16 with label28;
        catch java.lang.RuntimeException from label17 to label18 with label28;
        catch java.lang.RuntimeException from label19 to label20 with label28;
        catch java.lang.RuntimeException from label21 to label25 with label28;
    }

    private static java.lang.String findEncodingDeclaration(java.lang.String) throws java.io.IOException
    {
        java.lang.StringBuffer $r5;
        int $i0, i1, $i2, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String r0, $r2;
        char $c3, $c5, $c7;
        java.io.IOException $r4;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("encoding");

        i1 = $i0 + 8;

     label1:
        $i2 = i1;

        i1 = i1 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2);

        $i8 = (int) $c3;

        if $i8 == 32 goto label1;

        $i9 = (int) $c3;

        if $i9 == 9 goto label1;

        $i10 = (int) $c3;

        if $i10 == 13 goto label1;

        $i11 = (int) $c3;

        if $i11 == 10 goto label1;

        goto label2;

     label2:
        $i12 = (int) $c3;

        if $i12 == 61 goto label3;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Couldn\'t determine encoding");

        throw $r4;

     label3:
        $i4 = i1;

        i1 = i1 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $i13 = (int) $c5;

        if $i13 == 32 goto label3;

        $i14 = (int) $c5;

        if $i14 == 9 goto label3;

        $i15 = (int) $c5;

        if $i15 == 13 goto label3;

        $i16 = (int) $c5;

        if $i16 == 10 goto label3;

        goto label4;

     label4:
        $i17 = (int) $c5;

        if $i17 == 39 goto label5;

        $i18 = (int) $c5;

        if $i18 == 34 goto label5;

        return "UTF-8";

     label5:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

     label6:
        $i6 = i1;

        i1 = i1 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $i19 = (int) $c7;

        $i20 = (int) $c5;

        if $i19 != $i20 goto label7;

        goto label8;

     label7:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

        goto label6;

     label8:
        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
