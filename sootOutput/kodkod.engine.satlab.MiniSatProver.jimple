final class kodkod.engine.satlab.MiniSatProver extends kodkod.engine.satlab.NativeSolver implements kodkod.engine.satlab.SATProver
{
    private kodkod.engine.satlab.LazyTrace proof;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lkodkod/engine/satlab/MiniSatProver;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <kodkod.engine.satlab.MiniSatProver: boolean $assertionsDisabled> = $z1;

        staticinvoke <kodkod.engine.satlab.MiniSatProver: void loadLibrary(java.lang.String)>("minisatprover");

        return;
    }

    void <init>()
    {
        long $l0;
        kodkod.engine.satlab.MiniSatProver r0;

        r0 := @this: kodkod.engine.satlab.MiniSatProver;

        $l0 = staticinvoke <kodkod.engine.satlab.MiniSatProver: long make()>();

        specialinvoke r0.<kodkod.engine.satlab.NativeSolver: void <init>(long)>($l0);

        r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof> = null;

        return;
    }

    private int[][] format(int[][])
    {
        int[][] r0;
        kodkod.util.ints.IntIterator $r4;
        int[] r5, r6, r7, r8;
        boolean $z0, $z1, $z2;
        kodkod.engine.satlab.MiniSatProver r2;
        kodkod.util.ints.IntBitSet $r1;
        java.lang.AssertionError $r3;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23;

        r2 := @this: kodkod.engine.satlab.MiniSatProver;

        r0 := @parameter0: int[][];

        i0 = lengthof r0;

        $r1 = new kodkod.util.ints.IntBitSet;

        specialinvoke $r1.<kodkod.util.ints.IntBitSet: void <init>(int)>(i0);

        $i1 = virtualinvoke r2.<kodkod.engine.satlab.MiniSatProver: int numberOfVariables()>();

        i2 = $i1 + 1;

        i17 = 0;

        goto label03;

     label01:
        r5 = r0[i17];

        if r5 == null goto label02;

        $i3 = r5[0];

        if $i3 < i2 goto label02;

        $i4 = r5[0];

        $i5 = $i4 - i2;

        r5[0] = $i5;

        interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean add(int)>(i17);

     label02:
        i17 = i17 + 1;

     label03:
        if i17 < i0 goto label01;

        $i6 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int size()>();

        i18 = i0 - $i6;

        $i7 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int min()>();

        if $i7 >= i18 goto label13;

        r6 = newarray (int)[i0];

        i19 = 0;

        i20 = 0;

        i21 = i18;

        goto label09;

     label04:
        $z1 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean contains(int)>(i19);

        if $z1 == 0 goto label07;

        $i10 = i21;

        i21 = i21 + 1;

        r6[i19] = $i10;

        r7 = r0[i19];

        i22 = 0;

        i11 = lengthof r7;

        goto label06;

     label05:
        $i12 = r7[i22];

        $i13 = r6[$i12];

        r7[i22] = $i13;

        i22 = i22 + 1;

     label06:
        if i22 < i11 goto label05;

        goto label08;

     label07:
        $i9 = i20;

        i20 = i20 + 1;

        r6[i19] = $i9;

     label08:
        i19 = i19 + 1;

     label09:
        if i19 < i0 goto label04;

        $r4 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>(i0, 0);

        goto label12;

     label10:
        $i14 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: int next()>();

        i23 = r6[$i14];

        if $i14 != i23 goto label11;

        goto label12;

     label11:
        r8 = r0[$i14];

        $i16 = $i14 + 1;

        $i15 = i23 - $i14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i16, r0, $i14, $i15);

        r0[i23] = r8;

     label12:
        $z2 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label10;

     label13:
        $z0 = <kodkod.engine.satlab.MiniSatProver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label14;

        $i8 = virtualinvoke r2.<kodkod.engine.satlab.MiniSatProver: int numberOfClauses()>();

        if i18 == $i8 goto label14;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label14:
        return r0;
    }

    public kodkod.engine.satlab.ResolutionTrace proof()
    {
        java.lang.IllegalStateException $r8;
        int[][] $r5, $r7;
        kodkod.engine.satlab.MiniSatProver r0;
        long $l0;
        kodkod.engine.satlab.LazyTrace $r3, $r4, $r6;
        int $i1;
        java.lang.Boolean $r1, $r2;
        boolean $z0;

        r0 := @this: kodkod.engine.satlab.MiniSatProver;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r2 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: java.lang.Boolean status()>();

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        $r3 = r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof>;

        if $r3 != null goto label2;

        $l0 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: long peer()>();

        $r5 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: int[][] trace(long,boolean)>($l0, 1);

        virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: void free()>();

        $r6 = new kodkod.engine.satlab.LazyTrace;

        $r7 = specialinvoke r0.<kodkod.engine.satlab.MiniSatProver: int[][] format(int[][])>($r5);

        $i1 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: int numberOfClauses()>();

        specialinvoke $r6.<kodkod.engine.satlab.LazyTrace: void <init>(int[][],int)>($r7, $i1);

        r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof> = $r6;

     label2:
        $r4 = r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof>;

        return $r4;
    }

    public void reduce(kodkod.engine.satlab.ReductionStrategy)
    {
        int[][] $r13, $r16;
        long $l0;
        java.lang.AssertionError $r8;
        int[] $r7;
        kodkod.engine.satlab.LazyTrace $r2, $r3, $r12, $r14, $r15;
        int $i1, $i2;
        java.lang.String $r11;
        kodkod.engine.satlab.ReductionStrategy r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4;
        kodkod.engine.satlab.MiniSatProver r0;
        kodkod.engine.satlab.Clause r6;
        kodkod.util.ints.IntSet r17;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9, $r10;

        r0 := @this: kodkod.engine.satlab.MiniSatProver;

        r1 := @parameter0: kodkod.engine.satlab.ReductionStrategy;

        virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.ResolutionTrace proof()>();

        $r2 = r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof>;

        r17 = interfaceinvoke r1.<kodkod.engine.satlab.ReductionStrategy: kodkod.util.ints.IntSet next(kodkod.engine.satlab.ResolutionTrace)>($r2);

        goto label6;

     label1:
        $l0 = staticinvoke <kodkod.engine.satlab.MiniSatProver: long make()>();

        $i1 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: int numberOfVariables()>();

        virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: void addVariables(long,int)>($l0, $i1);

        $r3 = r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof>;

        $r4 = virtualinvoke $r3.<kodkod.engine.satlab.LazyTrace: java.util.Iterator iterator(kodkod.util.ints.IntSet)>(r17);

        goto label3;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.engine.satlab.Clause) $r5;

        $r7 = virtualinvoke r6.<kodkod.engine.satlab.Clause: int[] toArray()>();

        $z1 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: boolean addClause(long,int[])>($l0, $r7);

        if $z1 != 0 goto label3;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("could not add non-redundant clause: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r8;

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $z2 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: boolean solve(long)>($l0);

        if $z2 != 0 goto label4;

        $i2 = interfaceinvoke r17.<kodkod.util.ints.IntSet: int size()>();

        virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: void adjustClauseCount(int)>($i2);

        $r13 = virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: int[][] trace(long,boolean)>($l0, 0);

        virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: void free(long)>($l0);

        $r14 = new kodkod.engine.satlab.LazyTrace;

        $r15 = r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof>;

        $r16 = specialinvoke r0.<kodkod.engine.satlab.MiniSatProver: int[][] format(int[][])>($r13);

        specialinvoke $r14.<kodkod.engine.satlab.LazyTrace: void <init>(kodkod.engine.satlab.LazyTrace,kodkod.util.ints.IntSet,int[][])>($r15, r17, $r16);

        r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof> = $r14;

        goto label5;

     label4:
        virtualinvoke r0.<kodkod.engine.satlab.MiniSatProver: void free(long)>($l0);

     label5:
        $r12 = r0.<kodkod.engine.satlab.MiniSatProver: kodkod.engine.satlab.LazyTrace proof>;

        r17 = interfaceinvoke r1.<kodkod.engine.satlab.ReductionStrategy: kodkod.util.ints.IntSet next(kodkod.engine.satlab.ResolutionTrace)>($r12);

     label6:
        $z3 = interfaceinvoke r17.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z3 == 0 goto label1;

        return;
    }

    public java.lang.String toString()
    {
        kodkod.engine.satlab.MiniSatProver r0;

        r0 := @this: kodkod.engine.satlab.MiniSatProver;

        return "MiniSatProver";
    }

    private static native long make();

    native void free(long);

    native void addVariables(long, int);

    native boolean addClause(long, int[]);

    native boolean solve(long);

    native boolean valueOf(long, int);

    native int[][] trace(long, boolean);
}
