public class org.apache.xpath.compiler.XPathParser extends java.lang.Object
{
    public static final java.lang.String CONTINUE_AFTER_FATAL_ERROR;
    private org.apache.xpath.compiler.OpMap m_ops;
    transient java.lang.String m_token;
    transient char m_tokenChar;
    int m_queueMark;
    protected static final int FILTER_MATCH_FAILED;
    protected static final int FILTER_MATCH_PRIMARY;
    protected static final int FILTER_MATCH_PREDICATES;
    org.apache.xml.utils.PrefixResolver m_namespaceContext;
    private javax.xml.transform.ErrorListener m_errorListener;
    javax.xml.transform.SourceLocator m_sourceLocator;

    public void <init>(javax.xml.transform.ErrorListener, javax.xml.transform.SourceLocator)
    {
        javax.xml.transform.SourceLocator r2;
        org.apache.xpath.compiler.XPathParser r0;
        javax.xml.transform.ErrorListener r1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: javax.xml.transform.ErrorListener;

        r2 := @parameter1: javax.xml.transform.SourceLocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

        r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = 0;

        r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener m_errorListener> = r1;

        r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator> = r2;

        return;
    }

    public void initXPath(org.apache.xpath.compiler.Compiler, java.lang.String, org.apache.xml.utils.PrefixResolver) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r19;
        org.apache.xpath.XPathProcessorException $r20;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xpath.compiler.Lexer $r3;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r13, $r16, $r17, $r18;
        java.lang.String r4, $r7, $r11, $r14, $r15, $r21, $r22, r23, $r24;
        boolean $z0;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r5, $r6;
        org.apache.xml.utils.PrefixResolver r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.xml.utils.PrefixResolver;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops> = r1;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xml.utils.PrefixResolver m_namespaceContext> = r2;

        $r3 = new org.apache.xpath.compiler.Lexer;

        specialinvoke $r3.<org.apache.xpath.compiler.Lexer: void <init>(org.apache.xpath.compiler.Compiler,org.apache.xml.utils.PrefixResolver,org.apache.xpath.compiler.XPathParser)>(r1, r2, r0);

        virtualinvoke $r3.<org.apache.xpath.compiler.Lexer: void tokenize(java.lang.String)>(r4);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(0, 1);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, 2);

     label1:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r7 goto label4;

        r23 = "";

        goto label3;

     label2:
        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r23);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        r23 = $r14;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r15 goto label3;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        r23 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r24 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null != $r24 goto label2;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r23;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXTRA_ILLEGAL_TOKENS", $r19);

     label4:
        goto label7;

     label5:
        $r20 := @caughtexception;

        $r21 = "CONTINUE_AFTER_FATAL_ERROR";

        $r22 = virtualinvoke $r20.<org.apache.xpath.XPathException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z0 == 0 goto label6;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void initXPath(org.apache.xpath.compiler.Compiler,java.lang.String,org.apache.xml.utils.PrefixResolver)>(r1, "/..", r2);

        goto label7;

     label6:
        throw $r20;

     label7:
        virtualinvoke r1.<org.apache.xpath.compiler.OpMap: void shrink()>();

        return;

        catch org.apache.xpath.XPathProcessorException from label1 to label4 with label5;
    }

    public void initMatchPattern(org.apache.xpath.compiler.Compiler, java.lang.String, org.apache.xml.utils.PrefixResolver) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r24;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xpath.compiler.Lexer $r27;
        java.lang.StringBuffer $r14, $r15, $r17, $r18, $r22, $r23, $r28, $r29;
        int $i0, $i1, $i2, $i4;
        java.lang.String r4, $r7, $r16, $r19, $r20, r25, $r26;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        org.apache.xml.utils.PrefixResolver r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        r4 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.xml.utils.PrefixResolver;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops> = r1;

        r0.<org.apache.xpath.compiler.XPathParser: org.apache.xml.utils.PrefixResolver m_namespaceContext> = r2;

        $r27 = new org.apache.xpath.compiler.Lexer;

        specialinvoke $r27.<org.apache.xpath.compiler.Lexer: void <init>(org.apache.xpath.compiler.Compiler,org.apache.xml.utils.PrefixResolver,org.apache.xpath.compiler.XPathParser)>(r1, r2, r0);

        virtualinvoke $r27.<org.apache.xpath.compiler.Lexer: void tokenize(java.lang.String)>(r4);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(0, 30);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, 2);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Pattern()>();

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r7 goto label3;

        r25 = "";

        goto label2;

     label1:
        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r25);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        r25 = $r19;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $r20 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r20 goto label2;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r26 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null != $r26 goto label1;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r25;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXTRA_ILLEGAL_TOKENS", $r24);

     label3:
        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = (int) -1;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, $i4);

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = $i1 + 1;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i2);

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: void shrink()>();

        return;
    }

    public void setErrorHandler(javax.xml.transform.ErrorListener)
    {
        org.apache.xpath.compiler.XPathParser r0;
        javax.xml.transform.ErrorListener r1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: javax.xml.transform.ErrorListener;

        r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener m_errorListener> = r1;

        return;
    }

    public javax.xml.transform.ErrorListener getErrorListener()
    {
        org.apache.xpath.compiler.XPathParser r0;
        javax.xml.transform.ErrorListener $r1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener m_errorListener>;

        return $r1;
    }

    final boolean tokenIs(java.lang.String)
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.String $r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        goto label3;

     label1:
        if r2 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    final boolean tokenIs(char)
    {
        org.apache.xpath.compiler.XPathParser r0;
        int $i2, $i3;
        char c0, $c1;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c0 := @parameter0: char;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r1 == null goto label2;

        $c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i2 = (int) $c1;

        $i3 = (int) c0;

        if $i2 != $i3 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    final boolean lookahead(char, int)
    {
        org.apache.xml.utils.ObjectVector $r4;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i9, $i10;
        java.lang.String r6;
        boolean $z0, z1;
        org.apache.xpath.compiler.XPathParser r0;
        char $c7, c8;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c8 := @parameter0: char;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        i2 = $i1 + i0;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i2 > $i3 goto label4;

        if i2 <= 0 goto label4;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if $i4 == 0 goto label4;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = $r3.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i5 = i2 - 1;

        $r5 = virtualinvoke $r4.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i5);

        r6 = (java.lang.String) $r5;

        $i6 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i6 != 1 goto label2;

        $c7 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0);

        $i9 = (int) $c7;

        $i10 = (int) c8;

        if $i9 != $i10 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        z1 = $z0;

        goto label5;

     label4:
        z1 = 0;

     label5:
        return z1;
    }

    private final boolean lookbehind(char, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xml.utils.ObjectVector $r2;
        char c5;
        org.apache.xpath.compiler.OpMap $r1;
        int i0, $i1, $i2, i3, $i4, $i6, $i7;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c5 := @parameter0: char;

        i0 := @parameter1: int;

        $i2 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i1 = i0 + 1;

        i3 = $i2 - $i1;

        if i3 < 0 goto label8;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = $r1.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i3);

        r4 = (java.lang.String) $r3;

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i4 != 1 goto label6;

        if r4 != null goto label1;

        $i6 = 124;

        goto label2;

     label1:
        $i6 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

     label2:
        if $i6 != 124 goto label3;

        $z0 = 0;

        goto label5;

     label3:
        $i7 = (int) c5;

        if $i6 != $i7 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        z1 = $z0;

        goto label7;

     label6:
        z1 = 0;

     label7:
        goto label9;

     label8:
        z1 = 0;

     label9:
        return z1;
    }

    private final boolean lookbehindHasToken(int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xml.utils.ObjectVector $r2;
        org.apache.xpath.compiler.OpMap $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0, z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = $i1 - i0;

        if $i2 <= 0 goto label5;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = $r1.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i4 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i3 = i0 - 1;

        $i5 = $i4 - $i3;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i5);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        $i6 = 124;

        goto label2;

     label1:
        $i6 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

     label2:
        if $i6 != 124 goto label3;

        $z0 = 0;

        goto label4;

     label3:
        $z0 = 1;

     label4:
        z1 = $z0;

        goto label6;

     label5:
        z1 = 0;

     label6:
        return z1;
    }

    private final boolean lookahead(java.lang.String, int)
    {
        org.apache.xml.utils.ObjectVector $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r2, r6;
        boolean $z0, z1, $z2;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = $i1 + i0;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if $i2 > $i3 goto label4;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = $r3.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i5 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i4 = i0 - 1;

        $i6 = $i5 + $i4;

        $r5 = virtualinvoke $r4.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i6);

        r6 = (java.lang.String) $r5;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        goto label3;

     label1:
        if r2 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        z1 = $z0;

        goto label7;

     label4:
        if null != r2 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        z1 = $z2;

     label7:
        return z1;
    }

    private final void nextToken()
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xml.utils.ObjectVector $r3;
        char $c4;
        org.apache.xpath.compiler.OpMap $r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r4;
        java.lang.String $r5, $r6;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $i0 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if $i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = $r2.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i2 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i3 = $i2 + 1;

        r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i3;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i2);

        $r5 = (java.lang.String) $r4;

        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = $r5;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c4 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = $c4;

        goto label2;

     label1:
        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = null;

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

     label2:
        return;
    }

    private final java.lang.String getTokenRelative(int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xml.utils.ObjectVector $r3;
        org.apache.xpath.compiler.OpMap $r1, $r2;
        int i0, $i1, i2, $i3;
        java.lang.Object $r4;
        java.lang.String r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        i2 = $i1 + i0;

        if i2 <= 0 goto label1;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i2 >= $i3 goto label1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = $r2.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i2);

        r5 = (java.lang.String) $r4;

        goto label2;

     label1:
        r5 = null;

     label2:
        return r5;
    }

    private final void prevToken()
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xml.utils.ObjectVector $r2;
        char $c4;
        org.apache.xpath.compiler.OpMap $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $i0 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = $i1 - 1;

        r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i2;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = $r1.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i3 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i3);

        $r4 = (java.lang.String) $r3;

        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = $r4;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c4 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = $c4;

        goto label2;

     label1:
        r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = null;

        r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

     label2:
        return;
    }

    private final void consumeExpected(java.lang.String) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.Object[] $r2;
        org.apache.xpath.XPathProcessorException $r4;
        java.lang.String r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r2[1] = $r3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_BUT_FOUND", $r2);

        $r4 = new org.apache.xpath.XPathProcessorException;

        specialinvoke $r4.<org.apache.xpath.XPathProcessorException: void <init>(java.lang.String)>("CONTINUE_AFTER_FATAL_ERROR");

        throw $r4;

     label2:
        return;
    }

    private final void consumeExpected(char) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.Object[] $r1;
        org.apache.xpath.XPathProcessorException $r4;
        char c0;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        c0 := @parameter0: char;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(c0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $r1[0] = $r2;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r1[1] = $r3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_BUT_FOUND", $r1);

        $r4 = new org.apache.xpath.XPathProcessorException;

        specialinvoke $r4.<org.apache.xpath.XPathProcessorException: void <init>(java.lang.String)>("CONTINUE_AFTER_FATAL_ERROR");

        throw $r4;

     label2:
        return;
    }

    void warn(java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        java.io.PrintStream $r5;
        javax.xml.transform.SourceLocator $r7;
        java.lang.Object[] r1;
        org.apache.xpath.compiler.XPathParser r3;
        javax.xml.transform.TransformerException $r6;
        javax.xml.transform.ErrorListener $r4;
        java.lang.String r0, $r2;

        r3 := @this: org.apache.xpath.compiler.XPathParser;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHWarning(java.lang.String,java.lang.Object[])>(r0, r1);

        $r4 = virtualinvoke r3.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener getErrorListener()>();

        if null == $r4 goto label1;

        $r6 = new javax.xml.transform.TransformerException;

        $r7 = r3.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r6.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>($r2, $r7);

        interfaceinvoke $r4.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>($r6);

        goto label2;

     label1:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r2);

     label2:
        return;
    }

    private void assertion(boolean, java.lang.String)
    {
        java.lang.Object[] $r0;
        org.apache.xpath.compiler.XPathParser r4;
        java.lang.String r1, $r2;
        java.lang.RuntimeException $r3;
        boolean z0;

        r4 := @this: org.apache.xpath.compiler.XPathParser;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = r1;

        $r2 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_INCORRECT_PROGRAMMER_ASSERTION", $r0);

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        return;
    }

    void error(java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        javax.xml.transform.SourceLocator $r6;
        java.lang.Object[] r1;
        org.apache.xpath.compiler.XPathParser r3;
        javax.xml.transform.TransformerException $r5;
        java.lang.String r0, $r2;
        javax.xml.transform.ErrorListener $r4;

        r3 := @this: org.apache.xpath.compiler.XPathParser;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>(r0, r1);

        $r4 = virtualinvoke r3.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.ErrorListener getErrorListener()>();

        $r5 = new javax.xml.transform.TransformerException;

        $r6 = r3.<org.apache.xpath.compiler.XPathParser: javax.xml.transform.SourceLocator m_sourceLocator>;

        specialinvoke $r5.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>($r2, $r6);

        if null == $r4 goto label1;

        interfaceinvoke $r4.<javax.xml.transform.ErrorListener: void fatalError(javax.xml.transform.TransformerException)>($r5);

        goto label2;

     label1:
        throw $r5;

     label2:
        return;
    }

    protected java.lang.String dumpRemainingTokenQueue()
    {
        org.apache.xml.utils.ObjectVector $r4;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, i3;
        java.lang.String r6, r15, r16;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i3 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i3 >= $i0 goto label3;

        r15 = "\n Remaining tokens: (";

        goto label2;

     label1:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = $r3.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i2 = i3;

        i3 = i3 + 1;

        $r5 = virtualinvoke $r4.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i2);

        r6 = (java.lang.String) $r5;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        r15 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getTokenQueueSize()>();

        if i3 < $i1 goto label1;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r15);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label4;

     label3:
        r16 = "";

     label4:
        return r16;
    }

    final int getFunctionToken(java.lang.String)
    {
        org.apache.xpath.compiler.XPathParser r6;
        java.lang.Integer $r3;
        java.lang.ClassCastException $r4;
        java.lang.NullPointerException $r5;
        int i0, $i2, $i4;
        java.lang.Object $r2;
        java.lang.String r0;
        java.util.Hashtable $r1;

        r6 := @this: org.apache.xpath.compiler.XPathParser;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = <org.apache.xpath.compiler.Keywords: java.util.Hashtable m_functions>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Integer) $r2;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $i2 = (int) -1;

        i0 = $i2;

        goto label5;

     label4:
        $r4 := @caughtexception;

        $i4 = (int) -1;

        i0 = $i4;

     label5:
        return i0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label4;
    }

    void insertOp(int, int, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5;
        int $i0, i1, i2, $i3, $i4, i5, $i6, i7, $i9;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i5 := @parameter2: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i7 = $i0 - 1;

        goto label2;

     label1:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = i7 + i2;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i7);

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, $i4);

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label2:
        if i7 >= i1 goto label1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(i1, i5);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = $i0 + i2;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i6);

        return;
    }

    void appendOp(int, int)
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4;
        int $i0, i1, i2, $i3, $i4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, i1);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = $i0 + 1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, i2);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i0 + i2;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        return;
    }

    protected void Expr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void OrExpr()>();

        return;
    }

    protected void OrExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void AndExpr()>();

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label1;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("or");

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>($i0, 2, 2);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void OrExpr()>();

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = $i0 + 1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - $i0;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

     label1:
        return;
    }

    protected void AndExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i5 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int EqualityExpr(int)>($i5);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label1;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("and");

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>($i0, 2, 3);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void AndExpr()>();

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = $i0 + 1;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - $i0;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

     label1:
        return;
    }

    protected int EqualityExpr(int) throws javax.xml.transform.TransformerException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i18, $i20;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i14 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = (int) -1;

        if $i18 != i14 goto label1;

        i14 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

     label1:
        $i20 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int RelationalExpr(int)>($i20);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label3;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(33);

        if $z0 == 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(61, 1);

        if $z2 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i14, 2, 4);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i15 = $i7 - i14;

        $i8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int EqualityExpr(int)>(i14);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = $i8 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = $i8 + i15;

        $i10 = $i9 + 1;

        $i12 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i10);

        $i13 = $i12 + i15;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i11, $i13);

        i14 = $i8 + 2;

        goto label3;

     label2:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(61);

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i14, 2, 5);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i16 = $i0 - i14;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int EqualityExpr(int)>(i14);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i1 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i1 + i16;

        $i3 = $i2 + 1;

        $i5 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i3);

        $i6 = $i5 + i16;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i6);

        i14 = $i1 + 2;

     label3:
        return i14;
    }

    protected int RelationalExpr(int) throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i18, $i20;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i16 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = (int) -1;

        if $i18 != i16 goto label1;

        i16 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

     label1:
        $i20 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AdditiveExpr(int)>($i20);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label7;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(60);

        if $z0 == 0 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(61);

        if $z3 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i16, 2, 6);

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i16, 2, 7);

     label3:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i15 = $i8 - i16;

        $i9 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int RelationalExpr(int)>(i16);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i12 = $i9 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = $i9 + $i15;

        $i11 = $i10 + 1;

        $i13 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i11);

        $i14 = $i13 + $i15;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i12, $i14);

        i16 = $i9 + 2;

        goto label7;

     label4:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(62);

        if $z1 == 0 goto label7;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(61);

        if $z2 == 0 goto label5;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i16, 2, 8);

        goto label6;

     label5:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i16, 2, 9);

     label6:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i0 - i16;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int RelationalExpr(int)>(i16);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i1 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i1 + $i7;

        $i3 = $i2 + 1;

        $i5 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i3);

        $i6 = $i5 + $i7;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i6);

        i16 = $i1 + 2;

     label7:
        return i16;
    }

    protected int AdditiveExpr(int) throws javax.xml.transform.TransformerException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i18, $i20;
        java.lang.String $r2;
        boolean $z0, $z1;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i14 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = (int) -1;

        if $i18 != i14 goto label1;

        i14 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

     label1:
        $i20 = (int) -1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>($i20);

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label3;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(43);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i14, 2, 10);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i15 = $i7 - i14;

        $i8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AdditiveExpr(int)>(i14);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = $i8 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = $i8 + i15;

        $i10 = $i9 + 1;

        $i12 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i10);

        $i13 = $i12 + i15;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i11, $i13);

        i14 = $i8 + 2;

        goto label3;

     label2:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(45);

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i14, 2, 11);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i16 = $i0 - i14;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AdditiveExpr(int)>(i14);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i1 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i1 + i16;

        $i3 = $i2 + 1;

        $i5 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i3);

        $i6 = $i5 + i16;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i6);

        i14 = $i1 + 2;

     label3:
        return i14;
    }

    protected int MultiplicativeExpr(int) throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, $i34;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i28 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i34 = (int) -1;

        if $i34 != i28 goto label1;

        i28 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void UnaryExpr()>();

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label5;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i28, 2, 12);

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i21 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i29 = $i21 - i28;

        $i22 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i28);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i25 = $i22 + 1;

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i23 = $i22 + i29;

        $i24 = $i23 + 1;

        $i26 = virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i24);

        $i27 = $i26 + i29;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i25, $i27);

        i28 = $i22 + 2;

        goto label5;

     label2:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("div");

        if $z1 == 0 goto label3;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i28, 2, 13);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i30 = $i14 - i28;

        $i15 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i28);

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = $i15 + 1;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i16 = $i15 + i30;

        $i17 = $i16 + 1;

        $i19 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i17);

        $i20 = $i19 + i30;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i18, $i20);

        i28 = $i15 + 2;

        goto label5;

     label3:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("mod");

        if $z2 == 0 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i28, 2, 14);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i31 = $i7 - i28;

        $i8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i28);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = $i8 + 1;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = $i8 + i31;

        $i10 = $i9 + 1;

        $i12 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i10);

        $i13 = $i12 + i31;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i11, $i13);

        i28 = $i8 + 2;

        goto label5;

     label4:
        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("quo");

        if $z3 == 0 goto label5;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>(i28, 2, 15);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i32 = $i0 - i28;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int MultiplicativeExpr(int)>(i28);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i1 + 1;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i1 + i32;

        $i3 = $i2 + 1;

        $i5 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i3);

        $i6 = $i5 + i32;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i6);

        i28 = $i1 + 2;

     label5:
        return i28;
    }

    protected void UnaryExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        char $c1;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        int $i0, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        z0 = 0;

        $c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i5 = (int) $c1;

        if $i5 != 45 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 16);

        z0 = 1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void UnionExpr()>();

        if z0 == 0 goto label2;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - $i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, $i4);

     label2:
        return;
    }

    protected void StringExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 17);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = $i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - $i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected void BooleanExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        int $i0, $i1, i2, $i3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 18);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i2 = $i1 - $i0;

        if i2 != 2 goto label1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL", null);

     label1:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = $i0 + 1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, i2);

        return;
    }

    protected void NumberExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 19);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = $i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - $i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected void UnionExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        z1 = 0;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void PathExpr()>();

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(124);

        if $z0 == 0 goto label3;

        if 0 != z1 goto label2;

        z1 = 1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>($i0, 2, 20);

     label2:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        if 1 != 0 goto label1;

     label3:
        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = $i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - $i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected void PathExpr() throws javax.xml.transform.TransformerException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        boolean $z0, $z1, z3, $z4, $z5;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int FilterExpr()>();

        if $i1 == 0 goto label6;

        if $i1 != 2 goto label1;

        $z5 = 1;

        $z4 = 1;

        goto label2;

     label1:
        $z5 = 0;

        $z4 = 0;

     label2:
        z3 = $z4;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z0 == 0 goto label4;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        if $z5 != 0 goto label3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>($i0, 2, 28);

        z3 = 1;

     label3:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean RelativeLocationPath()>();

        if $z1 != 0 goto label4;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_REL_LOC_PATH", null);

     label4:
        if z3 == 0 goto label5;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i9 = (int) -1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, $i9);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 + 1;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = $i0 + 1;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i6 - $i0;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i7);

     label5:
        goto label7;

     label6:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void LocationPath()>();

     label7:
        return;
    }

    protected int FilterExpr() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.OpMap $r1;
        org.apache.xpath.compiler.XPathParser r0;
        byte b1;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean PrimaryExpr()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void insertOp(int,int,int)>($i0, 2, 28);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Predicate()>();

     label2:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z2 != 0 goto label1;

        b1 = 2;

        goto label5;

     label3:
        b1 = 1;

        goto label5;

     label4:
        b1 = 0;

     label5:
        return b1;
    }

    protected boolean PrimaryExpr() throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r5, $r6, $r9, $r10, $r11, $r12;
        int $i0, $i2, $i3, $i4, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25;
        java.lang.String $r4, $r7, $r8;
        char $c1, $c5, $c6, $c7, $c8, $c13, $c20;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $c1 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i21 = (int) $c1;

        if $i21 == 39 goto label01;

        $c5 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i22 = (int) $c5;

        if $i22 != 34 goto label02;

     label01:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 21);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Literal()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - $i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, $i4);

        z4 = 1;

        goto label10;

     label02:
        $c6 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i23 = (int) $c6;

        if $i23 != 36 goto label03;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 22);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void QName()>();

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i17 = $i0 + 1;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i19 = $i18 - $i0;

        virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i17, $i19);

        z4 = 1;

        goto label10;

     label03:
        $c7 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i24 = (int) $c7;

        if $i24 != 40 goto label04;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 23);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(41);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = $i0 + 1;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i15 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i16 = $i15 - $i0;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i14, $i16);

        z4 = 1;

        goto label10;

     label04:
        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r4 goto label07;

        $c8 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $i25 = (int) $c8;

        if 46 != $i25 goto label05;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i12 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i12 <= 1 goto label05;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c13 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(1);

        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c13);

        if $z3 != 0 goto label06;

     label05:
        $c20 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c20);

        if $z5 == 0 goto label07;

     label06:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 27);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Number()>();

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = $i0 + 1;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i11 = $i10 - $i0;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i9, $i11);

        z4 = 1;

        goto label10;

     label07:
        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 != 0 goto label08;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z1 == 0 goto label09;

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 3);

        if $z2 == 0 goto label09;

     label08:
        z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean FunctionCall()>();

        goto label10;

     label09:
        z4 = 0;

     label10:
        return z4;
    }

    protected void Argument() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 26);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = $i0 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - $i0;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        return;
    }

    protected boolean FunctionCall() throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r13, $r14;
        java.lang.Object[] $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i21;
        java.lang.String $r2, $r10, $r12;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 24);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = $i0 + 1;

        $i13 = $i10 + 1;

        $i11 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i12 = $i11 - 1;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i13, $i12);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(58);

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = $i0 + 1;

        $i17 = $i14 + 2;

        $i15 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i16 = $i15 - 1;

        virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i17, $i16);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label5;

     label1:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int getFunctionToken(java.lang.String)>($r2);

        $i19 = (int) -1;

        if $i19 != $i1 goto label2;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r11[0] = $r12;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_COULDNOT_FIND_FUNCTION", $r11);

     label2:
        tableswitch($i1)
        {
            case 1030: goto label3;
            case 1031: goto label3;
            case 1032: goto label3;
            case 1033: goto label3;
            default: goto label4;
        };

     label3:
        return 0;

     label4:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(3, 25);

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = $i0 + 1;

        $i3 = $i2 + 1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, $i1);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label5:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(40);

        goto label8;

     label6:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(44);

        if $z1 == 0 goto label7;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG", null);

     label7:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Argument()>();

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z2 != 0 goto label8;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(44);

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z3 == 0 goto label8;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG", null);

     label8:
        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z4 != 0 goto label9;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r10 != null goto label6;

     label9:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(41);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i21 = (int) -1;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i21);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i5 + 1;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i6);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = $i0 + 1;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i9 = $i8 - $i0;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i7, $i9);

        return 1;
    }

    protected void LocationPath() throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 28);

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 50);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = $i1 - 2;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, 4);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - 1;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, 35);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label1:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r2 == null goto label2;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean RelativeLocationPath()>();

        if $z1 != 0 goto label2;

        if $z0 != 0 goto label2;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_PATH", $r3);

     label2:
        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = (int) -1;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i12);

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i6 + 1;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i7);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = $i0 + 1;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i10 = $i9 - $i0;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i8, $i10);

        return;
    }

    protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean Step()>();

        if $z0 != 0 goto label2;

        return 0;

     label1:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean Step()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_STEP", null);

     label2:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z2 != 0 goto label1;

        return 1;
    }

    protected boolean Step() throws javax.xml.transform.TransformerException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25;
        java.lang.String $r4, $r5;
        char $c4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        i25 = $i0;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z0 == 0 goto label01;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 42);

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i14 = $i13 + 1;

        virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i14);

        $r17 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i15 = virtualinvoke $r16.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r17.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i15, 1033);

        $r19 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r18 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i16 = virtualinvoke $r18.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i17 = $i16 + 1;

        virtualinvoke $r19.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i17);

        $r21 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i18 = $i0 + 1;

        $i19 = $i18 + 1;

        $r20 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i20 = virtualinvoke $r20.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i21 = $i20 - $i0;

        virtualinvoke $r21.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i19, $i21);

        $r23 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i22 = $i0 + 1;

        $r22 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i23 = virtualinvoke $r22.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i24 = $i23 - $i0;

        virtualinvoke $r23.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i22, $i24);

        $r24 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i25 = virtualinvoke $r24.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

     label01:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>(".");

        if $z1 == 0 goto label03;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z8 == 0 goto label02;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_PREDICATE_ILLEGAL_SYNTAX", null);

     label02:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 48);

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i10 = $i9 - 2;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, 4);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = $i11 - 1;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i12, 1033);

        goto label10;

     label03:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("..");

        if $z2 == 0 goto label04;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 45);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i5 - 2;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, 4);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = $i7 - 1;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i8, 1033);

        goto label10;

     label04:
        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z3 != 0 goto label05;

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z5 != 0 goto label05;

        $z6 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(95);

        if $z6 != 0 goto label05;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if $r4 == null goto label08;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c4 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        $z7 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c4);

        if $z7 == 0 goto label08;

     label05:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Basis()>();

        goto label07;

     label06:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Predicate()>();

     label07:
        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z4 != 0 goto label06;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = i25 + 1;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 - i25;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i3);

        goto label10;

     label08:
        if $z0 == 0 goto label09;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_LOC_STEP", null);

     label09:
        return 0;

     label10:
        return 1;
    }

    protected void Basis() throws javax.xml.transform.TransformerException
    {
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $z0 = specialinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(java.lang.String,int)>("::", 1);

        if $z0 == 0 goto label1;

        i1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: int AxisName()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z1 == 0 goto label2;

        i1 = 39;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 39);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label3;

     label2:
        i1 = 40;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 40);

     label3:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 + 1;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i3);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void NodeTest(int)>(i1);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i0 + 1;

        $i5 = $i4 + 1;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i6 - $i0;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i7);

        return;
    }

    protected int AxisName() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        java.lang.Object[] $r5;
        java.lang.Integer $r4;
        int $i0;
        java.lang.Object $r3;
        java.lang.String $r1, $r6;
        java.util.Hashtable $r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r2 = <org.apache.xpath.compiler.Keywords: java.util.Hashtable m_axisnames>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        if null != $r3 goto label1;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r5[0] = $r6;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_ILLEGAL_AXIS_NAME", $r5);

     label1:
        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, $i0);

        return $i0;
    }

    protected void NodeTest(int) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.ObjectVector $r12, $r17;
        java.lang.Integer $r27;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r28, $r29, $r30, $r31, $r35, $r36;
        java.lang.Object[] $r32;
        java.lang.String $r15, $r24, $r33, r34;
        org.apache.xml.utils.PrefixResolver $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i30, $i32;
        java.util.Hashtable $r25;
        char $c10, $c19;
        java.lang.Object $r13, $r26;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        i6 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 == 0 goto label04;

        $r25 = <org.apache.xpath.compiler.Keywords: java.util.Hashtable m_nodetypes>;

        $r24 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r26 = virtualinvoke $r25.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r24);

        if null != $r26 goto label01;

        $r32 = newarray (java.lang.Object)[1];

        $r33 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r32[0] = $r33;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_UNKNOWN_NODETYPE", $r32);

        goto label03;

     label01:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $r27 = (java.lang.Integer) $r26;

        $i21 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        $r29 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r28 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i22 = virtualinvoke $r28.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r29.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i22, $i21);

        $r31 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r30 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i23 = virtualinvoke $r30.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i24 = $i23 + 1;

        virtualinvoke $r31.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i24);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(40);

        if 1032 != $i21 goto label02;

        $z8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(41);

        if $z8 != 0 goto label02;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Literal()>();

     label02:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(41);

     label03:
        goto label12;

     label04:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, 34);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = $i1 + 1;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i2);

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z1 == 0 goto label07;

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z5 == 0 goto label05;

        $r23 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r22 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i20 = virtualinvoke $r22.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i28 = (int) -3;

        virtualinvoke $r23.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i20, $i28);

        goto label06;

     label05:
        $r21 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r20 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i16 = virtualinvoke $r20.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i17 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i18 = $i17 - 1;

        virtualinvoke $r21.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i16, $i18);

        $c19 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $z6 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c19);

        if $z6 != 0 goto label06;

        $z7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(95);

        if $z7 != 0 goto label06;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_NODE_TEST", null);

     label06:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(58);

        goto label08;

     label07:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i30 = (int) -2;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, $i30);

     label08:
        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i5 = $i4 + 1;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i5);

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(42);

        if $z2 == 0 goto label09;

        $r19 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r18 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i15 = virtualinvoke $r18.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i32 = (int) -3;

        virtualinvoke $r19.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i15, $i32);

        goto label11;

     label09:
        if 49 != i6 goto label10;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = $r11.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i11 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i12 = $i11 - 1;

        $r13 = virtualinvoke $r12.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i12);

        r34 = (java.lang.String) $r13;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        $r15 = interfaceinvoke $r14.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r34);

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r17 = $r16.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $i13 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i14 = $i13 - 1;

        virtualinvoke $r17.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>($r15, $i14);

     label10:
        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i9 = $i8 - 1;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i7, $i9);

        $c10 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $z3 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c10);

        if $z3 != 0 goto label11;

        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(95);

        if $z4 != 0 goto label11;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_NODE_TEST", null);

     label11:
        $r35 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r36 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i25 = virtualinvoke $r36.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i26 = $i25 + 1;

        virtualinvoke $r35.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i26);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label12:
        return;
    }

    protected void Predicate() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void PredicateExpr()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(93);

     label1:
        return;
    }

    protected void PredicateExpr() throws javax.xml.transform.TransformerException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 29);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Expr()>();

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = (int) -1;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i1, $i8);

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i2 = virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i3 = $i2 + 1;

        virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i3);

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = $i0 + 1;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i5 - $i0;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i6);

        return;
    }

    protected void QName() throws javax.xml.transform.TransformerException
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        boolean $z0;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z0 == 0 goto label1;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i8 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i9 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i10 = $i9 - 1;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i8, $i10);

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = $i11 + 1;

        virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i12);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void consumeExpected(char)>(58);

        goto label2;

     label1:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i14 = (int) -2;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, $i14);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = $i1 + 1;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i2);

     label2:
        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i5 = $i4 - 1;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i3, $i5);

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i6 + 1;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i7);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;
    }

    protected void NCName()
    {
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i1 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i2 = $i1 - 1;

        virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i0, $i2);

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 + 1;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        return;
    }

    protected void Literal() throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r3;
        org.apache.xml.utils.ObjectVector $r6, $r11;
        int $i0, i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r1, $r2, $r4, $r8, $r9;
        org.apache.xpath.compiler.XPathParser r0;
        char c2, $c3;
        org.apache.xpath.objects.XString $r16;
        org.apache.xpath.compiler.OpMap $r5, $r10, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        i1 = $i0 - 1;

        c2 = r0.<org.apache.xpath.compiler.XPathParser: char m_tokenChar>;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c3 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i1);

        $i9 = (int) c2;

        if $i9 != 34 goto label1;

        $i10 = (int) $c3;

        if $i10 == 34 goto label2;

     label1:
        $i11 = (int) c2;

        if $i11 != 39 goto label3;

        $i12 = (int) $c3;

        if $i12 != 39 goto label3;

     label2:
        $i4 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i8 = $i4 - 1;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r6 = $r5.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        virtualinvoke $r6.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>(null, $i8);

        $r16 = new org.apache.xpath.objects.XString;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(1, i1);

        specialinvoke $r16.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>($r9);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r11 = $r10.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        virtualinvoke $r11.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>($r16, $i8);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i5, $i8);

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i6 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i7 = $i6 + 1;

        virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i7);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label4;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r3[0] = $r4;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_PATTERN_LITERAL_NEEDS_BE_QUOTED", $r3);

     label4:
        return;
    }

    protected void Number() throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.ObjectVector $r9;
        java.lang.Object[] $r15;
        java.lang.Double $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;
        java.lang.String $r1, $r2, $r4, $r5, $r16;
        double d0;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.objects.XNumber $r18;
        java.lang.NumberFormatException $r14, $r17;
        org.apache.xpath.compiler.OpMap $r7, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r1 goto label7;

     label1:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(101);

        $i10 = (int) -1;

        if $i0 > $i10 goto label2;

        $r4 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $i1 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(69);

        $i12 = (int) -1;

        if $i1 <= $i12 goto label3;

     label2:
        $r17 = new java.lang.NumberFormatException;

        specialinvoke $r17.<java.lang.NumberFormatException: void <init>()>();

        throw $r17;

     label3:
        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r5);

        d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        d0 = 0.0;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r15[0] = $r16;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_COULDNOT_BE_FORMATTED_TO_NUMBER", $r15);

     label6:
        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r9 = $r7.<org.apache.xpath.compiler.OpMap: org.apache.xml.utils.ObjectVector m_tokenQueue>;

        $r18 = new org.apache.xpath.objects.XNumber;

        specialinvoke $r18.<org.apache.xpath.objects.XNumber: void <init>(double)>(d0);

        $i2 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i3 = $i2 - 1;

        virtualinvoke $r9.<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)>($r18, $i3);

        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i4 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i5 = r0.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i6 = $i5 - 1;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, $i6);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = $i7 + 1;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i8);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

     label7:
        return;

        catch java.lang.NumberFormatException from label1 to label4 with label5;
    }

    protected void Pattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        goto label1;

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void LocationPathPattern()>();

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(124);

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label1;

     label2:
        return;
    }

    protected void LocationPathPattern() throws javax.xml.transform.TransformerException
    {
        byte b9, b16, b17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i19;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        b9 = 0;

        b17 = 0;

        b16 = 0;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 31);

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 == 0 goto label04;

        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("id");

        if $z4 != 0 goto label01;

        $z7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("key");

        if $z7 == 0 goto label04;

     label01:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void IdKeyPattern()>();

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z5 == 0 goto label08;

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        $z6 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z6 == 0 goto label02;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label03;

     label02:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 53);

     label03:
        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i6 = $i5 - 2;

        virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, 4);

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = $i7 - 1;

        virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i8, 1034);

        b9 = 2;

        b17 = 2;

        b16 = 2;

        goto label08;

     label04:
        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z1 == 0 goto label07;

        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(47, 1);

        if $z3 == 0 goto label05;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        b9 = 2;

        b17 = 2;

        b16 = 2;

        goto label06;

     label05:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(4, 50);

        b9 = 1;

        b17 = 1;

        b16 = 1;

     label06:
        $r4 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i1 = virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i2 = $i1 - 2;

        virtualinvoke $r4.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i2, 4);

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r5.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 - 1;

        virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i4, 35);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label08;

     label07:
        b9 = 2;

        b17 = 2;

        b16 = 2;

     label08:
        if b17 == 0 goto label10;

        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(124);

        if $z2 != 0 goto label09;

        $r2 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        if null == $r2 goto label09;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void RelativePathPattern()>();

        goto label10;

     label09:
        if b16 != 2 goto label10;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_REL_PATH_PATTERN", null);

     label10:
        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i19 = (int) -1;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i10, $i19);

        $r13 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r14 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i11 = virtualinvoke $r14.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i12 = $i11 + 1;

        virtualinvoke $r13.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i12);

        $r15 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i13 = $i0 + 1;

        $r16 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i14 = virtualinvoke $r16.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i15 = $i14 - $i0;

        virtualinvoke $r15.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i13, $i15);

        return;
    }

    protected void IdKeyPattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean FunctionCall()>();

        return;
    }

    protected void RelativePathPattern() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean z0, $z1, $z2;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean StepPattern(boolean)>(0);

        goto label4;

     label1:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        if z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean StepPattern(boolean)>($z1);

     label4:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z2 != 0 goto label1;

        return;
    }

    protected boolean StepPattern(boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.XPathParser r0;
        boolean z0, $z1;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean AbbreviatedNodeTestStep(boolean)>(z0);

        return $z1;
    }

    protected boolean AbbreviatedNodeTestStep(boolean) throws javax.xml.transform.TransformerException
    {
        byte b2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, z9;
        org.apache.xpath.compiler.XPathParser r0;
        org.apache.xpath.compiler.OpMap $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.Object[] $r4;
        int $i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15;
        java.lang.String $r5;

        r0 := @this: org.apache.xpath.compiler.XPathParser;

        z6 := @parameter0: boolean;

        $r1 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i0 = virtualinvoke $r1.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i13 = (int) -1;

        i1 = $i13;

        $z0 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z0 == 0 goto label01;

        b2 = 51;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 51);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label08;

     label01:
        $z1 = specialinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(java.lang.String,int)>("::", 1);

        if $z1 == 0 goto label05;

        $z7 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("attribute");

        if $z7 == 0 goto label02;

        b2 = 51;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 51);

        goto label04;

     label02:
        $z8 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(java.lang.String)>("child");

        if $z8 == 0 goto label03;

        $r6 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r6.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        b2 = 53;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 53);

        goto label04;

     label03:
        b2 = -1;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $r4[0] = $r5;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_AXES_NOT_ALLOWED", $r4);

     label04:
        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label08;

     label05:
        $z2 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z2 == 0 goto label07;

        if z6 != 0 goto label06;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_STEP_PATTERN", null);

     label06:
        b2 = 52;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        goto label08;

     label07:
        $r2 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        i1 = virtualinvoke $r2.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        b2 = 53;

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void appendOp(int,int)>(2, 53);

     label08:
        $r7 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $r8 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i3 = virtualinvoke $r8.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i4 = $i3 + 1;

        virtualinvoke $r7.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(1, $i4);

        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void NodeTest(int)>(b2);

        $r9 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i5 = $i0 + 1;

        $i6 = $i5 + 1;

        $r10 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i7 = virtualinvoke $r10.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i8 = $i7 - $i0;

        virtualinvoke $r9.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i6, $i8);

        goto label10;

     label09:
        virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: void Predicate()>();

     label10:
        $z3 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(91);

        if $z3 != 0 goto label09;

        $i15 = (int) -1;

        if i1 <= $i15 goto label11;

        $z4 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(47);

        if $z4 == 0 goto label11;

        $z5 = virtualinvoke r0.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(47, 1);

        if $z5 == 0 goto label11;

        $r3 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        virtualinvoke $r3.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>(i1, 52);

        specialinvoke r0.<org.apache.xpath.compiler.XPathParser: void nextToken()>();

        z9 = 1;

        goto label12;

     label11:
        z9 = 0;

     label12:
        $r11 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i9 = $i0 + 1;

        $r12 = r0.<org.apache.xpath.compiler.XPathParser: org.apache.xpath.compiler.OpMap m_ops>;

        $i10 = virtualinvoke $r12.<org.apache.xpath.compiler.OpMap: int getOp(int)>(1);

        $i11 = $i10 - $i0;

        virtualinvoke $r11.<org.apache.xpath.compiler.OpMap: void setOp(int,int)>($i9, $i11);

        return z9;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.compiler.XPathParser: int FILTER_MATCH_PREDICATES> = 2;

        <org.apache.xpath.compiler.XPathParser: int FILTER_MATCH_PRIMARY> = 1;

        <org.apache.xpath.compiler.XPathParser: int FILTER_MATCH_FAILED> = 0;

        <org.apache.xpath.compiler.XPathParser: java.lang.String CONTINUE_AFTER_FATAL_ERROR> = "CONTINUE_AFTER_FATAL_ERROR";

        return;
    }
}
