class javax.mail.internet.MailDateFormat$MailDateParser extends java.lang.Object
{
    static final java.lang.String whitespace;
    int current;
    int endOffset;
    java.lang.String source;
    java.text.ParsePosition pos;
    final javax.mail.internet.MailDateFormat this$0;

    public void <init>(javax.mail.internet.MailDateFormat, java.lang.String, java.text.ParsePosition)
    {
        javax.mail.internet.MailDateFormat r1;
        java.text.ParsePosition r3;
        int $i0, $i1;
        java.lang.String r2;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        r1 := @parameter0: javax.mail.internet.MailDateFormat;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.text.ParsePosition;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: javax.mail.internet.MailDateFormat this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source> = r2;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.text.ParsePosition pos> = r3;

        $i0 = virtualinvoke r3.<java.text.ParsePosition: int getIndex()>();

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i0;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset> = $i1;

        return;
    }

    public java.util.Date parse(boolean) throws java.text.ParseException
    {
        java.util.Date $r4;
        java.text.ParsePosition $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0, z1;
        java.util.GregorianCalendar $r2;
        java.util.TimeZone $r3;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        z1 := @parameter0: boolean;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void locateNumeric()>();

        $i0 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseNumber(int,int)>(1, 2);

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipDateDelimiter()>();

        $i1 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseMonth()>();

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipDateDelimiter()>();

        $i2 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseYear()>();

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipRequiredWhiteSpace()>();

        $i3 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseNumber(int,int)>(1, 2);

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipRequiredChar(char)>(58);

        $i4 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseNumber(int,int)>(2, 2);

        i8 = 0;

        $z0 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: boolean skipOptionalChar(char)>(58);

        if $z0 == 0 goto label1;

        i8 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseNumber(int,int)>(2, 2);

     label1:
        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipWhiteSpace()>();

        $i5 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseTimeZone()>();

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.text.ParsePosition pos>;

        $i6 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        virtualinvoke $r1.<java.text.ParsePosition: void setIndex(int)>($i6);

        $r2 = new java.util.GregorianCalendar;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r3);

        virtualinvoke $r2.<java.util.Calendar: void setLenient(boolean)>(z1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int,int,int,int,int)>($i2, $i1, $i0, $i3, $i4, i8);

        $i7 = neg $i5;

        virtualinvoke $r2.<java.util.Calendar: void add(int,int)>(12, $i7);

        $r4 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        return $r4;
    }

    private void skipRequiredChar(char) throws java.text.ParseException
    {
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8;
        java.lang.String $r1, $r6, $r11;
        char $c3, c4;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r12, $r13;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        c4 := @parameter0: char;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 < $i0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>($r11);

     label1:
        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        $i8 = (int) c4;

        if $i7 == $i8 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delimiter \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' expected");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>($r6);

     label2:
        $i5 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i6 = $i5 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i6;

        return;
    }

    private boolean skipOptionalChar(char)
    {
        char $c3, c4;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8;
        java.lang.String $r1;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        c4 := @parameter0: char;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        $i8 = (int) c4;

        if $i7 == $i8 goto label2;

        return 0;

     label2:
        $i5 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i6 = $i5 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i6;

        return 1;
    }

    private void skipWhiteSpace()
    {
        char $c3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.String $r1, $r2;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

     label1:
        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 >= $i0 goto label3;

        $r2 = " \t\r\n";

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        $i4 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i7);

        if $i4 >= 0 goto label2;

        return;

     label2:
        $i5 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i6 = $i5 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i6;

        goto label1;

     label3:
        return;
    }

    private void skipNonWhiteSpace()
    {
        char $c3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.String $r1, $r2;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

     label1:
        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 >= $i0 goto label3;

        $r2 = " \t\r\n";

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i7 = (int) $c3;

        $i4 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i7);

        if $i4 < 0 goto label2;

        return;

     label2:
        $i5 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i6 = $i5 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i6;

        goto label1;

     label3:
        return;
    }

    private void skipRequiredWhiteSpace() throws java.text.ParseException
    {
        char $c5;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r1, $r2;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

     label1:
        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i2 >= $i1 goto label4;

        $r2 = " \t\r\n";

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i4 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c5 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $i10 = (int) $c5;

        $i6 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($i10);

        if $i6 >= 0 goto label3;

        $i9 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        if i0 != $i9 goto label2;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("White space character expected");

     label2:
        return;

     label3:
        $i7 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i8 = $i7 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i8;

        goto label1;

     label4:
        $i3 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        if i0 != $i3 goto label5;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("White space character expected");

     label5:
        return;
    }

    private void parseError(java.lang.String) throws java.text.ParseException
    {
        int $i0, $i1;
        java.text.ParsePosition $r1;
        java.lang.String r3;
        java.text.ParseException $r2;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.text.ParsePosition pos>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        virtualinvoke $r1.<java.text.ParsePosition: void setErrorIndex(int)>($i0);

        $r2 = new java.text.ParseException;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        specialinvoke $r2.<java.text.ParseException: void <init>(java.lang.String,int)>(r3, $i1);

        throw $r2;
    }

    private void locateNumeric() throws java.text.ParseException
    {
        char $c3;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.String $r1;
        javax.mail.internet.MailDateFormat$MailDateParser r0;
        boolean $z0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

     label1:
        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 >= $i0 goto label3;

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z0 == 0 goto label2;

        return;

     label2:
        $i4 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i5 = $i4 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i5;

        goto label1;

     label3:
        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Number field expected");

        return;
    }

    private int parseNumber(int, int) throws java.text.ParseException
    {
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.String $r1;
        boolean $z0;
        char $c7;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        i4 := @parameter0: int;

        i5 := @parameter1: int;

        i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        i13 = 0;

     label1:
        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i2 >= $i1 goto label3;

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i6 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i6);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c7);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $i8 = i13 * 10;

        $i9 = staticinvoke <java.lang.Character: int digit(char,int)>($c7, 10);

        i13 = $i8 + $i9;

        $i10 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i11 = $i10 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i11;

        goto label1;

     label3:
        $i3 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i12 = $i3 - i0;

        if $i12 < i4 goto label4;

        if $i12 <= i5 goto label5;

     label4:
        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid number field");

     label5:
        return i13;
    }

    private void skipDateDelimiter() throws java.text.ParseException
    {
        char $c3;
        int $i0, $i1, $i2, $i4, $i5, $i6;
        java.lang.String $r1;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid date field delimiter");

     label1:
        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i6 = (int) $c3;

        if $i6 != 45 goto label2;

        $i4 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i5 = $i4 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i5;

        goto label3;

     label2:
        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipRequiredWhiteSpace()>();

     label3:
        return;
    }

    private int parseMonth() throws java.text.ParseException
    {
        byte b6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i2 = $i1 - $i0;

        if $i2 >= 3 goto label01;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid month");

     label01:
        b6 = 0;

        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i5 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i3 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i4 = $i3 + 3;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("jan");

        if $z0 == 0 goto label02;

        b6 = 0;

        goto label14;

     label02:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("feb");

        if $z1 == 0 goto label03;

        b6 = 1;

        goto label14;

     label03:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("mar");

        if $z2 == 0 goto label04;

        b6 = 2;

        goto label14;

     label04:
        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("apr");

        if $z3 == 0 goto label05;

        b6 = 3;

        goto label14;

     label05:
        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("may");

        if $z4 == 0 goto label06;

        b6 = 4;

        goto label14;

     label06:
        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("jun");

        if $z5 == 0 goto label07;

        b6 = 5;

        goto label14;

     label07:
        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("jul");

        if $z6 == 0 goto label08;

        b6 = 6;

        goto label14;

     label08:
        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("aug");

        if $z7 == 0 goto label09;

        b6 = 7;

        goto label14;

     label09:
        $z8 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("sep");

        if $z8 == 0 goto label10;

        b6 = 8;

        goto label14;

     label10:
        $z9 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("oct");

        if $z9 == 0 goto label11;

        b6 = 9;

        goto label14;

     label11:
        $z10 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("nov");

        if $z10 == 0 goto label12;

        b6 = 10;

        goto label14;

     label12:
        $z11 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("dec");

        if $z11 == 0 goto label13;

        b6 = 11;

        goto label14;

     label13:
        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid month");

     label14:
        $i7 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i8 = $i7 + 3;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i8;

        return b6;
    }

    private int parseYear() throws java.text.ParseException
    {
        int $i0, i1;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        $i0 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseNumber(int,int)>(2, 4);

        i1 = $i0;

        if $i0 >= 50 goto label1;

        i1 = $i0 + 2000;

        goto label2;

     label1:
        if $i0 >= 100 goto label2;

        i1 = $i0 + 1990;

     label2:
        return i1;
    }

    private int parseTimeZone() throws java.text.ParseException
    {
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, $i18, $i19, $i20;
        java.lang.String $r1, $r2, $r3, $r4;
        char $c3;
        javax.mail.internet.MailDateFormat$MailDateParser r0;

        r0 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        $i1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i0 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int endOffset>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Missing time zone");

     label1:
        $r1 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i18 = (int) $c3;

        if $i18 == 45 goto label2;

        $i19 = (int) $c3;

        if $i19 != 43 goto label4;

     label2:
        $i4 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $i5 = $i4 + 1;

        r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current> = $i5;

        $i6 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int parseNumber(int,int)>(4, 4);

        $i7 = $i6 / 100;

        $i9 = $i7 * 60;

        $i8 = $i6 % 100;

        $i15 = $i9 + $i8;

        i16 = $i15;

        $i20 = (int) $c3;

        if $i20 != 45 goto label3;

        i16 = neg $i15;

     label3:
        return i16;

     label4:
        i17 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void skipNonWhiteSpace()>();

        $r2 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String source>;

        $i10 = r0.<javax.mail.internet.MailDateFormat$MailDateParser: int current>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i17, $i10);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $i11 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i11 != 1 goto label5;

        $i14 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int militaryZoneOffset(java.lang.String)>($r4);

        return $i14;

     label5:
        $i12 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i12 > 3 goto label6;

        $i13 = specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: int namedZoneOffset(java.lang.String)>($r4);

        return $i13;

     label6:
        specialinvoke r0.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid time zone");

        return 0;
    }

    private int namedZoneOffset(java.lang.String) throws java.text.ParseException
    {
        int $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        javax.mail.internet.MailDateFormat$MailDateParser r1;

        r1 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UT");

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("GMT");

        if $z1 == 0 goto label02;

        return 0;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("EST");

        if $z2 == 0 goto label03;

        $i1 = (int) -300;

        return $i1;

     label03:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("EDT");

        if $z3 == 0 goto label04;

        $i3 = (int) -240;

        return $i3;

     label04:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CST");

        if $z4 == 0 goto label05;

        $i5 = (int) -360;

        return $i5;

     label05:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CDT");

        if $z5 == 0 goto label06;

        $i7 = (int) -300;

        return $i7;

     label06:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MST");

        if $z6 == 0 goto label07;

        $i9 = (int) -420;

        return $i9;

     label07:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MDT");

        if $z7 == 0 goto label08;

        $i11 = (int) -360;

        return $i11;

     label08:
        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PST");

        if $z8 == 0 goto label09;

        $i13 = (int) -480;

        return $i13;

     label09:
        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("PDT");

        if $z9 == 0 goto label10;

        $i15 = (int) -420;

        return $i15;

     label10:
        specialinvoke r1.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid time zone");

        return 0;
    }

    private int militaryZoneOffset(java.lang.String) throws java.text.ParseException
    {
        int $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26;
        java.lang.String r0;
        char $c0, $c1;
        javax.mail.internet.MailDateFormat$MailDateParser r1;

        r1 := @this: javax.mail.internet.MailDateFormat$MailDateParser;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $i2 = (int) $c1;

        tableswitch($i2)
        {
            case 65: goto label01;
            case 66: goto label02;
            case 67: goto label03;
            case 68: goto label04;
            case 69: goto label05;
            case 70: goto label06;
            case 71: goto label07;
            case 72: goto label08;
            case 73: goto label09;
            case 74: goto label26;
            case 75: goto label10;
            case 76: goto label11;
            case 77: goto label12;
            case 78: goto label13;
            case 79: goto label14;
            case 80: goto label15;
            case 81: goto label16;
            case 82: goto label17;
            case 83: goto label18;
            case 84: goto label19;
            case 85: goto label20;
            case 86: goto label21;
            case 87: goto label22;
            case 88: goto label23;
            case 89: goto label24;
            case 90: goto label25;
            default: goto label26;
        };

     label01:
        return 60;

     label02:
        return 120;

     label03:
        return 180;

     label04:
        return 240;

     label05:
        return 300;

     label06:
        return 360;

     label07:
        return 420;

     label08:
        return 480;

     label09:
        return 540;

     label10:
        return 600;

     label11:
        return 660;

     label12:
        return 720;

     label13:
        $i4 = (int) -60;

        return $i4;

     label14:
        $i6 = (int) -120;

        return $i6;

     label15:
        $i8 = (int) -180;

        return $i8;

     label16:
        $i10 = (int) -240;

        return $i10;

     label17:
        $i12 = (int) -300;

        return $i12;

     label18:
        $i14 = (int) -360;

        return $i14;

     label19:
        $i16 = (int) -420;

        return $i16;

     label20:
        $i18 = (int) -480;

        return $i18;

     label21:
        $i20 = (int) -540;

        return $i20;

     label22:
        $i22 = (int) -600;

        return $i22;

     label23:
        $i24 = (int) -660;

        return $i24;

     label24:
        $i26 = (int) -720;

        return $i26;

     label25:
        return 0;

     label26:
        specialinvoke r1.<javax.mail.internet.MailDateFormat$MailDateParser: void parseError(java.lang.String)>("Invalid time zone");

        return 0;
    }

    public static void <clinit>()
    {
        <javax.mail.internet.MailDateFormat$MailDateParser: java.lang.String whitespace> = " \t\r\n";

        return;
    }
}
