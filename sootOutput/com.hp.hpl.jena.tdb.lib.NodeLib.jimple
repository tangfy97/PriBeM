public class com.hp.hpl.jena.tdb.lib.NodeLib extends java.lang.Object
{
    private static com.hp.hpl.jena.tdb.nodetable.Nodec nodec;
    private static final char MarkerChar;
    private static final char[] invalidIRIChars;
    private static int InitialPoolSize;
    private static org.apache.jena.atlas.lib.Pool digesters;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.lib.NodeLib r0;

        r0 := @this: com.hp.hpl.jena.tdb.lib.NodeLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long encodeStore(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.tdb.base.objectfile.ObjectFile)
    {
        com.hp.hpl.jena.tdb.TDBException $r7;
        com.hp.hpl.jena.tdb.base.objectfile.ObjectFile r2;
        long $l1;
        com.hp.hpl.jena.graph.Node r0;
        java.nio.ByteBuffer $r5;
        com.hp.hpl.jena.tdb.nodetable.Nodec $r1, $r4;
        java.lang.Long $r6;
        com.hp.hpl.jena.tdb.base.block.Block $r3;
        int $i0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.tdb.base.objectfile.ObjectFile;

        $r1 = <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.tdb.nodetable.Nodec nodec>;

        $i0 = interfaceinvoke $r1.<com.hp.hpl.jena.tdb.nodetable.Nodec: int maxSize(com.hp.hpl.jena.graph.Node)>(r0);

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.tdb.base.objectfile.ObjectFile: com.hp.hpl.jena.tdb.base.block.Block allocWrite(int)>($i0);

     label1:
        $r4 = <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.tdb.nodetable.Nodec nodec>;

        $r5 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.tdb.nodetable.Nodec: int encode(com.hp.hpl.jena.graph.Node,java.nio.ByteBuffer,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r5, null);

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.base.objectfile.ObjectFile: void completeWrite(com.hp.hpl.jena.tdb.base.block.Block)>($r3);

        $r6 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

     label2:
        return $l1;

     label3:
        $r7 := @caughtexception;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.base.objectfile.ObjectFile: void abortWrite(com.hp.hpl.jena.tdb.base.block.Block)>($r3);

        throw $r7;

        catch com.hp.hpl.jena.tdb.TDBException from label1 to label2 with label3;
    }

    public static com.hp.hpl.jena.graph.Node fetchDecode(long, com.hp.hpl.jena.tdb.base.objectfile.ObjectFile)
    {
        com.hp.hpl.jena.tdb.base.objectfile.ObjectFile r0;
        long l0;
        com.hp.hpl.jena.graph.Node $r2;
        java.nio.ByteBuffer $r1;

        l0 := @parameter0: long;

        r0 := @parameter1: com.hp.hpl.jena.tdb.base.objectfile.ObjectFile;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.base.objectfile.ObjectFile: java.nio.ByteBuffer read(long)>(l0);

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.graph.Node decode(java.nio.ByteBuffer)>($r1);

        return $r2;
    }

    public static java.nio.ByteBuffer encode(com.hp.hpl.jena.graph.Node)
    {
        int $i0, $i1;
        com.hp.hpl.jena.graph.Node r0;
        java.nio.ByteBuffer $r2;
        com.hp.hpl.jena.tdb.nodetable.Nodec $r1, $r3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.tdb.nodetable.Nodec nodec>;

        $i0 = interfaceinvoke $r1.<com.hp.hpl.jena.tdb.nodetable.Nodec: int maxSize(com.hp.hpl.jena.graph.Node)>(r0);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $r3 = <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.tdb.nodetable.Nodec nodec>;

        $i1 = interfaceinvoke $r3.<com.hp.hpl.jena.tdb.nodetable.Nodec: int encode(com.hp.hpl.jena.graph.Node,java.nio.ByteBuffer,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r2, null);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i1);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node decode(java.nio.ByteBuffer)
    {
        com.hp.hpl.jena.graph.Node $r2;
        java.nio.ByteBuffer r0;
        com.hp.hpl.jena.tdb.nodetable.Nodec $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r1 = <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.tdb.nodetable.Nodec nodec>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.tdb.nodetable.Nodec: com.hp.hpl.jena.graph.Node decode(java.nio.ByteBuffer,com.hp.hpl.jena.shared.PrefixMapping)>(r0, null);

        return $r2;
    }

    public static com.hp.hpl.jena.tdb.store.Hash hash(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.tdb.store.Hash $r0;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.tdb.store.Hash;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.store.Hash: void <init>(int)>(16);

        staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: void setHash(com.hp.hpl.jena.tdb.store.Hash,com.hp.hpl.jena.graph.Node)>($r0, r1);

        return $r0;
    }

    public static void setHash(com.hp.hpl.jena.tdb.store.Hash, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.store.Hash r8;
        com.hp.hpl.jena.graph.Node r0;
        int[] $r2;
        int $i0, $i1;
        java.lang.String $r7, $r9, $r10, $r11, $r12, $r13, $r18;
        com.hp.hpl.jena.tdb.TDBException $r3, $r14;
        com.hp.hpl.jena.tdb.store.NodeType $r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r15, $r16, $r17;

        r8 := @parameter0: com.hp.hpl.jena.tdb.store.Hash;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeType: com.hp.hpl.jena.tdb.store.NodeType lookup(com.hp.hpl.jena.graph.Node)>(r0);

        $r2 = <com.hp.hpl.jena.tdb.lib.NodeLib$2: int[] $SwitchMap$com$hp$hpl$jena$tdb$store$NodeType>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.NodeType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r13 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: void hash(com.hp.hpl.jena.tdb.store.Hash,java.lang.String,java.lang.String,java.lang.String,com.hp.hpl.jena.tdb.store.NodeType)>(r8, $r13, null, null, $r1);

        return;

     label2:
        $r12 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: void hash(com.hp.hpl.jena.tdb.store.Hash,java.lang.String,java.lang.String,java.lang.String,com.hp.hpl.jena.tdb.store.NodeType)>(r8, $r12, null, null, $r1);

        return;

     label3:
        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLanguage()>();

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralDatatypeURI()>();

        staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: void hash(com.hp.hpl.jena.tdb.store.Hash,java.lang.String,java.lang.String,java.lang.String,com.hp.hpl.jena.tdb.store.NodeType)>(r8, $r9, $r10, $r11, $r1);

        return;

     label4:
        $r3 = new com.hp.hpl.jena.tdb.TDBException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to hash something strange: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label5:
        $r14 = new com.hp.hpl.jena.tdb.TDBException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NodeType broken: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r18);

        throw $r14;
    }

    private static java.security.MessageDigest allocDigest()
    {
        java.security.MessageDigest r3;
        java.security.NoSuchAlgorithmException $r2;
        org.apache.jena.atlas.lib.Pool $r0;
        java.lang.Object $r1;

     label1:
        $r0 = <com.hp.hpl.jena.tdb.lib.NodeLib: org.apache.jena.atlas.lib.Pool digesters>;

        $r1 = interfaceinvoke $r0.<org.apache.jena.atlas.lib.Pool: java.lang.Object get()>();

        r3 = (java.security.MessageDigest) $r1;

        if r3 != null goto label2;

        r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static void deallocDigest(java.security.MessageDigest)
    {
        org.apache.jena.atlas.lib.Pool $r1;
        java.security.MessageDigest r0;

        r0 := @parameter0: java.security.MessageDigest;

        virtualinvoke r0.<java.security.MessageDigest: void reset()>();

        $r1 = <com.hp.hpl.jena.tdb.lib.NodeLib: org.apache.jena.atlas.lib.Pool digesters>;

        interfaceinvoke $r1.<org.apache.jena.atlas.lib.Pool: void put(java.lang.Object)>(r0);

        return;
    }

    private static void hash(com.hp.hpl.jena.tdb.store.Hash, java.lang.String, java.lang.String, java.lang.String, com.hp.hpl.jena.tdb.store.NodeType)
    {
        byte[] $r13, $r15, $r16, $r17;
        com.hp.hpl.jena.tdb.store.Hash r14;
        java.security.MessageDigest $r12;
        int $i0, $i1;
        java.security.DigestException $r18;
        java.lang.String r1, $r9, $r11, r19, r20;
        com.hp.hpl.jena.tdb.store.NodeType r8;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r5, $r6, $r7, $r10;

        r14 := @parameter0: com.hp.hpl.jena.tdb.store.Hash;

        r1 := @parameter1: java.lang.String;

        r19 := @parameter2: java.lang.String;

        r20 := @parameter3: java.lang.String;

        r8 := @parameter4: com.hp.hpl.jena.tdb.store.NodeType;

        if r20 != null goto label1;

        r20 = "";

     label1:
        if r19 != null goto label2;

        r19 = "";

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.tdb.store.NodeType: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r12 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: java.security.MessageDigest allocDigest()>();

        $r13 = staticinvoke <org.apache.jena.atlas.lib.Bytes: byte[] string2bytes(java.lang.String)>($r11);

        virtualinvoke $r12.<java.security.MessageDigest: void update(byte[])>($r13);

        $i0 = virtualinvoke r14.<com.hp.hpl.jena.tdb.store.Hash: int getLen()>();

        if $i0 != 16 goto label4;

        $r17 = virtualinvoke r14.<com.hp.hpl.jena.tdb.store.Hash: byte[] getBytes()>();

        virtualinvoke $r12.<java.security.MessageDigest: int digest(byte[],int,int)>($r17, 0, 16);

        goto label5;

     label4:
        $r15 = virtualinvoke $r12.<java.security.MessageDigest: byte[] digest()>();

        $r16 = virtualinvoke r14.<com.hp.hpl.jena.tdb.store.Hash: byte[] getBytes()>();

        $i1 = virtualinvoke r14.<com.hp.hpl.jena.tdb.store.Hash: int getLen()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r16, 0, $i1);

     label5:
        staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: void deallocDigest(java.security.MessageDigest)>($r12);

     label6:
        return;

     label7:
        $r18 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.logging.Log: void fatal(java.lang.Class,java.lang.String,java.lang.Throwable)>(class "Lcom/hp/hpl/jena/tdb/lib/NodeLib;", "DigestException", $r18);

        return;

        catch java.security.DigestException from label3 to label6 with label7;
    }

    public static com.hp.hpl.jena.tdb.store.NodeId getNodeId(com.hp.hpl.jena.tdb.base.record.Record, int)
    {
        byte[] $r1;
        com.hp.hpl.jena.tdb.store.NodeId $r2;
        com.hp.hpl.jena.tdb.base.record.Record r0;
        int i0;
        long $l1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        $l1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: long getLong(byte[],int)>($r1, i0);

        $r2 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: com.hp.hpl.jena.tdb.store.NodeId create(long)>($l1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node termOrAny(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        return $r1;

     label2:
        return r0;
    }

    public static java.lang.String format(java.lang.String, com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.graph.Node[] r1;
        com.hp.hpl.jena.graph.Node $r3;
        int $i0, i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r4, r5;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        if i1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label2:
        $r3 = r1[i1];

        $r4 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.util.Iterator nodes(com.hp.hpl.jena.tdb.nodetable.NodeTable, java.util.Iterator)
    {
        com.hp.hpl.jena.tdb.lib.NodeLib$1 $r1;
        java.util.Iterator r0, $r3;
        com.hp.hpl.jena.tdb.nodetable.NodeTable r2;

        r2 := @parameter0: com.hp.hpl.jena.tdb.nodetable.NodeTable;

        r0 := @parameter1: java.util.Iterator;

        $r1 = new com.hp.hpl.jena.tdb.lib.NodeLib$1;

        specialinvoke $r1.<com.hp.hpl.jena.tdb.lib.NodeLib$1: void <init>(com.hp.hpl.jena.tdb.nodetable.NodeTable)>(r2);

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>(r0, $r1);

        return $r3;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.nodetable.NodecSSE $r0;
        org.apache.jena.atlas.lib.PoolBase $r2;
        java.security.MessageDigest $r5;
        java.security.NoSuchAlgorithmException $r6;
        org.apache.jena.atlas.lib.Pool $r3, $r4;
        int $i0, i1;
        char[] $r1;

        <com.hp.hpl.jena.tdb.lib.NodeLib: char MarkerChar> = 95;

        $r0 = new com.hp.hpl.jena.tdb.nodetable.NodecSSE;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.nodetable.NodecSSE: void <init>()>();

        <com.hp.hpl.jena.tdb.lib.NodeLib: com.hp.hpl.jena.tdb.nodetable.Nodec nodec> = $r0;

        $r1 = newarray (char)[2];

        $r1[0] = 95;

        $r1[1] = 32;

        <com.hp.hpl.jena.tdb.lib.NodeLib: char[] invalidIRIChars> = $r1;

        <com.hp.hpl.jena.tdb.lib.NodeLib: int InitialPoolSize> = 5;

        $r2 = new org.apache.jena.atlas.lib.PoolBase;

        specialinvoke $r2.<org.apache.jena.atlas.lib.PoolBase: void <init>()>();

        $r3 = staticinvoke <org.apache.jena.atlas.lib.PoolSync: org.apache.jena.atlas.lib.Pool create(org.apache.jena.atlas.lib.Pool)>($r2);

        <com.hp.hpl.jena.tdb.lib.NodeLib: org.apache.jena.atlas.lib.Pool digesters> = $r3;

     label1:
        i1 = 0;

     label2:
        $i0 = <com.hp.hpl.jena.tdb.lib.NodeLib: int InitialPoolSize>;

        if i1 >= $i0 goto label3;

        $r4 = <com.hp.hpl.jena.tdb.lib.NodeLib: org.apache.jena.atlas.lib.Pool digesters>;

        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        interfaceinvoke $r4.<org.apache.jena.atlas.lib.Pool: void put(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.security.NoSuchAlgorithmException: void printStackTrace()>();

     label5:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label3 with label4;
    }
}
