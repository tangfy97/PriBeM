public abstract class kodkod.engine.bool.BooleanValue extends java.lang.Object implements java.lang.Comparable
{

    void <init>()
    {
        kodkod.engine.bool.BooleanValue r0;

        r0 := @this: kodkod.engine.bool.BooleanValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    abstract kodkod.engine.bool.BooleanValue negation();

    public abstract int label();

    public abstract kodkod.engine.bool.Operator op();

    public final int compareTo(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.BooleanValue r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.engine.bool.BooleanValue;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: int label()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.BooleanValue: int label()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        kodkod.engine.bool.BooleanValue r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: kodkod.engine.bool.BooleanValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (kodkod.engine.bool.BooleanValue) r1;

        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanValue: int compareTo(kodkod.engine.bool.BooleanValue)>($r2);

        return $i0;
    }
}
