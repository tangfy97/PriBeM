class com.jidesoft.plaf.windows.AnimationController$AnimationState extends java.lang.Object
{
    private final com.jidesoft.plaf.windows.TMSchema$State startState;
    private final long duration;
    private long startTime;
    private boolean isForward;
    private boolean isForwardAndReverse;
    private float progress;
    static final boolean $assertionsDisabled;

    void <init>(com.jidesoft.plaf.windows.TMSchema$State, long, boolean)
    {
        long l0, $l1, $l2;
        java.lang.AssertionError $r4, $r5;
        com.jidesoft.plaf.windows.AnimationController$AnimationState r0;
        byte $b3;
        com.jidesoft.plaf.windows.TMSchema$State r1;
        int $i4;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController$AnimationState;

        r1 := @parameter0: com.jidesoft.plaf.windows.TMSchema$State;

        l0 := @parameter1: long;

        z2 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isForward> = 1;

        $z0 = <com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        $b3 = l0 cmp 0L;

        $i4 = (int) $b3;

        if $i4 > 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $z1 = <com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z3 = staticinvoke <javax.swing.SwingUtilities: boolean isEventDispatchThread()>();

        if $z3 != 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: com.jidesoft.plaf.windows.TMSchema$State startState> = r1;

        $l1 = l0 * 1000000L;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: long duration> = $l1;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: long startTime> = $l2;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isForwardAndReverse> = z2;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress> = 0.0F;

        return;
    }

    private void updateProgress()
    {
        long $l0, $l1, $l2, $l3;
        java.lang.AssertionError $r2;
        byte $b4;
        int $i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.jidesoft.plaf.windows.AnimationController$AnimationState r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController$AnimationState;

        $z0 = <com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = staticinvoke <javax.swing.SwingUtilities: boolean isEventDispatchThread()>();

        if $z4 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $z1 = virtualinvoke r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isDone()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $l1 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: long startTime>;

        $l2 = $l0 - $l1;

        $f1 = (float) $l2;

        $l3 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: long duration>;

        $f0 = (float) $l3;

        $f2 = $f1 / $f0;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress> = $f2;

        $f3 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress>;

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f3, 0.0F);

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress> = $f4;

        $f5 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress>;

        $b4 = $f5 cmpl 1.0F;

        $i5 = (int) $b4;

        if $i5 < 0 goto label5;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress> = 1.0F;

        $z2 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isForwardAndReverse>;

        if $z2 == 0 goto label5;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: long startTime> = $l0;

        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress> = 0.0F;

        $z3 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isForward>;

        if $z3 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isForward> = $z5;

     label5:
        return;
    }

    void paintSkin(com.jidesoft.plaf.windows.XPStyle$Skin, java.awt.Graphics, int, int, int, int, com.jidesoft.plaf.windows.TMSchema$State)
    {
        java.lang.AssertionError $r9;
        java.awt.AlphaComposite $r7, $r8;
        java.awt.Graphics2D r5;
        com.jidesoft.plaf.windows.TMSchema$State r3, $r6;
        int i0, i1, i2, i3;
        boolean $z0, $z1, $z2, $z3;
        com.jidesoft.plaf.windows.AnimationController$AnimationState r0;
        com.jidesoft.plaf.windows.XPStyle$Skin r1;
        java.awt.Graphics r2, $r4;
        float $f0, f1;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController$AnimationState;

        r1 := @parameter0: com.jidesoft.plaf.windows.XPStyle$Skin;

        r2 := @parameter1: java.awt.Graphics;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r3 := @parameter6: com.jidesoft.plaf.windows.TMSchema$State;

        $z0 = <com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = staticinvoke <javax.swing.SwingUtilities: boolean isEventDispatchThread()>();

        if $z3 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        specialinvoke r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: void updateProgress()>();

        $z1 = virtualinvoke r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isDone()>();

        if $z1 != 0 goto label4;

        $r4 = virtualinvoke r2.<java.awt.Graphics: java.awt.Graphics create()>();

        r5 = (java.awt.Graphics2D) $r4;

        $r6 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: com.jidesoft.plaf.windows.TMSchema$State startState>;

        virtualinvoke r1.<com.jidesoft.plaf.windows.XPStyle$Skin: void paintSkinRaw(java.awt.Graphics,int,int,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r5, i0, i1, i2, i3, $r6);

        $z2 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean isForward>;

        if $z2 == 0 goto label2;

        f1 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress>;

        goto label3;

     label2:
        $f0 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress>;

        f1 = 1.0F - $f0;

     label3:
        $r7 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        $r8 = virtualinvoke $r7.<java.awt.AlphaComposite: java.awt.AlphaComposite derive(float)>(f1);

        virtualinvoke r5.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r8);

        virtualinvoke r1.<com.jidesoft.plaf.windows.XPStyle$Skin: void paintSkinRaw(java.awt.Graphics,int,int,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r5, i0, i1, i2, i3, r3);

        virtualinvoke r5.<java.awt.Graphics2D: void dispose()>();

        goto label5;

     label4:
        virtualinvoke r1.<com.jidesoft.plaf.windows.XPStyle$Skin: void paintSkinRaw(java.awt.Graphics,int,int,int,int,com.jidesoft.plaf.windows.TMSchema$State)>(r2, i0, i1, i2, i3, r3);

     label5:
        return;
    }

    boolean isDone()
    {
        java.lang.AssertionError $r2;
        com.jidesoft.plaf.windows.AnimationController$AnimationState r0;
        byte $b0;
        int $i1;
        float $f0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.jidesoft.plaf.windows.AnimationController$AnimationState;

        $z0 = <com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <javax.swing.SwingUtilities: boolean isEventDispatchThread()>();

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $f0 = r0.<com.jidesoft.plaf.windows.AnimationController$AnimationState: float progress>;

        $b0 = $f0 cmpl 1.0F;

        $i1 = (int) $b0;

        if $i1 < 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/jidesoft/plaf/windows/AnimationController;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.jidesoft.plaf.windows.AnimationController$AnimationState: boolean $assertionsDisabled> = $z1;

        return;
    }
}
