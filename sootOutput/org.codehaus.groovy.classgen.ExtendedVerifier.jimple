public class org.codehaus.groovy.classgen.ExtendedVerifier extends java.lang.Object implements org.codehaus.groovy.ast.GroovyClassVisitor
{
    public static final java.lang.String JVM_ERROR_MESSAGE;
    private org.codehaus.groovy.control.SourceUnit source;
    private org.codehaus.groovy.ast.ClassNode currentClass;

    public void <init>(org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.control.SourceUnit r1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.control.SourceUnit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source> = r1;

        return;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.ast.ClassNode currentClass> = r1;

        virtualinvoke r0.<org.codehaus.groovy.classgen.ExtendedVerifier: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,int)>(r1, 1);

        virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: void visitContents(org.codehaus.groovy.ast.GroovyClassVisitor)>(r0);

        return;
    }

    public void visitConstructor(org.codehaus.groovy.ast.ConstructorNode)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.ConstructorNode r1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.ConstructorNode;

        virtualinvoke r0.<org.codehaus.groovy.classgen.ExtendedVerifier: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,int)>(r1, 2);

        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.FieldNode r1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        virtualinvoke r0.<org.codehaus.groovy.classgen.ExtendedVerifier: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,int)>(r1, 8);

        return;
    }

    public void visitMethod(org.codehaus.groovy.ast.MethodNode)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.Parameter[] $r2, $r3;
        org.codehaus.groovy.ast.Parameter r4;
        org.codehaus.groovy.ast.MethodNode r1;
        int $i0, i1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        virtualinvoke r0.<org.codehaus.groovy.classgen.ExtendedVerifier: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,int)>(r1, 4);

        i1 = 0;

     label1:
        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        r4 = $r3[i1];

        virtualinvoke r0.<org.codehaus.groovy.classgen.ExtendedVerifier: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode,int)>(r4, 16);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.PropertyNode r1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        return;
    }

    protected void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode, int)
    {
        org.codehaus.groovy.ast.AnnotationNode r8, $r9;
        org.codehaus.groovy.ast.AnnotatedNode r0;
        java.lang.StringBuffer $r10, $r11, $r14, $r15, $r17;
        java.util.Map $r1, $r4;
        int i0;
        java.lang.String $r13, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r6;
        org.codehaus.groovy.ast.ClassNode $r3, $r12;
        java.util.Collection $r5;
        org.codehaus.groovy.classgen.ExtendedVerifier r2;
        java.lang.Object $r7;

        r2 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r0 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: java.util.Map getAnnotations()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r2.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.ast.ClassNode currentClass>;

        virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void setAnnotated(boolean)>(1);

        $z1 = virtualinvoke r2.<org.codehaus.groovy.classgen.ExtendedVerifier: boolean isAnnotationCompatible()>();

        if $z1 != 0 goto label2;

        virtualinvoke r2.<org.codehaus.groovy.classgen.ExtendedVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("Annotations are not supported in the current runtime.Please make sure you are running on a JVM >= 1.5", r0);

        return;

     label2:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: java.util.Map getAnnotations()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.codehaus.groovy.ast.AnnotationNode) $r7;

        $r9 = specialinvoke r2.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.ast.AnnotationNode visitAnnotation(org.codehaus.groovy.ast.AnnotationNode)>(r8);

        $z3 = virtualinvoke $r9.<org.codehaus.groovy.ast.AnnotationNode: boolean isValid()>();

        if $z3 != 0 goto label4;

        return;

     label4:
        $z4 = virtualinvoke $r9.<org.codehaus.groovy.ast.AnnotationNode: boolean isTargetAllowed(int)>(i0);

        if $z4 != 0 goto label5;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Annotation @");

        $r12 = virtualinvoke $r9.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not allowed on element ");

        $r16 = staticinvoke <org.codehaus.groovy.ast.AnnotationNode: java.lang.String targetToName(int)>(i0);

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.groovy.classgen.ExtendedVerifier: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r18, $r9);

     label5:
        goto label3;

     label6:
        return;
    }

    private org.codehaus.groovy.ast.AnnotationNode visitAnnotation(org.codehaus.groovy.ast.AnnotationNode)
    {
        org.codehaus.groovy.control.ErrorCollector $r0, $r9;
        org.codehaus.groovy.ast.AnnotationNode r6, $r7;
        org.codehaus.groovy.control.SourceUnit $r2, $r5, $r8;
        org.codehaus.groovy.control.CompilerConfiguration $r3;
        org.codehaus.groovy.classgen.ExtendedVerifier r1;
        org.codehaus.groovy.classgen.AnnotationVisitor $r4;

        r1 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r6 := @parameter0: org.codehaus.groovy.ast.AnnotationNode;

        $r0 = new org.codehaus.groovy.control.ErrorCollector;

        $r2 = r1.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.CompilerConfiguration getConfiguration()>();

        specialinvoke $r0.<org.codehaus.groovy.control.ErrorCollector: void <init>(org.codehaus.groovy.control.CompilerConfiguration)>($r3);

        $r4 = new org.codehaus.groovy.classgen.AnnotationVisitor;

        $r5 = r1.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source>;

        specialinvoke $r4.<org.codehaus.groovy.classgen.AnnotationVisitor: void <init>(org.codehaus.groovy.control.SourceUnit,org.codehaus.groovy.control.ErrorCollector)>($r5, $r0);

        $r7 = virtualinvoke $r4.<org.codehaus.groovy.classgen.AnnotationVisitor: org.codehaus.groovy.ast.AnnotationNode visit(org.codehaus.groovy.ast.AnnotationNode)>(r6);

        $r8 = r1.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source>;

        $r9 = virtualinvoke $r8.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.ErrorCollector getErrorCollector()>();

        virtualinvoke $r9.<org.codehaus.groovy.control.ErrorCollector: void addCollectorContents(org.codehaus.groovy.control.ErrorCollector)>($r0);

        return $r7;
    }

    protected boolean isAnnotationCompatible()
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.control.SourceUnit $r1;
        java.lang.String $r2, $r4;
        org.codehaus.groovy.control.CompilerConfiguration $r3;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        $r2 = "1.5";

        $r1 = r0.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source>;

        $r3 = virtualinvoke $r1.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.CompilerConfiguration getConfiguration()>();

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.control.CompilerConfiguration: java.lang.String getTargetBytecode()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    protected void addError(java.lang.String, org.codehaus.groovy.ast.ASTNode)
    {
        org.codehaus.groovy.control.ErrorCollector $r2;
        org.codehaus.groovy.control.SourceUnit $r1, $r11;
        org.codehaus.groovy.control.messages.SyntaxErrorMessage $r3;
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.ASTNode r10;
        java.lang.StringBuffer $r5, $r7, $r8;
        int $i0, $i1;
        java.lang.String r6, $r9;
        org.codehaus.groovy.syntax.SyntaxException $r4;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r6 := @parameter0: java.lang.String;

        r10 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        $r1 = r0.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.ErrorCollector getErrorCollector()>();

        $r3 = new org.codehaus.groovy.control.messages.SyntaxErrorMessage;

        $r4 = new org.codehaus.groovy.syntax.SyntaxException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $i0 = virtualinvoke r10.<org.codehaus.groovy.ast.ASTNode: int getLineNumber()>();

        $i1 = virtualinvoke r10.<org.codehaus.groovy.ast.ASTNode: int getColumnNumber()>();

        specialinvoke $r4.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,int,int)>($r9, $i0, $i1);

        $r11 = r0.<org.codehaus.groovy.classgen.ExtendedVerifier: org.codehaus.groovy.control.SourceUnit source>;

        specialinvoke $r3.<org.codehaus.groovy.control.messages.SyntaxErrorMessage: void <init>(org.codehaus.groovy.syntax.SyntaxException,org.codehaus.groovy.control.SourceUnit)>($r4, $r11);

        virtualinvoke $r2.<org.codehaus.groovy.control.ErrorCollector: void addErrorAndContinue(org.codehaus.groovy.control.messages.Message)>($r3);

        return;
    }

    public void visitGenericType(org.codehaus.groovy.ast.GenericsType)
    {
        org.codehaus.groovy.classgen.ExtendedVerifier r0;
        org.codehaus.groovy.ast.GenericsType r1;

        r0 := @this: org.codehaus.groovy.classgen.ExtendedVerifier;

        r1 := @parameter0: org.codehaus.groovy.ast.GenericsType;

        return;
    }

    public static void <clinit>()
    {
        <org.codehaus.groovy.classgen.ExtendedVerifier: java.lang.String JVM_ERROR_MESSAGE> = "Please make sure you are running on a JVM >= 1.5";

        return;
    }
}
