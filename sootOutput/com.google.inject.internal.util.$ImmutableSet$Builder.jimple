public class com.google.inject.internal.util.$ImmutableSet$Builder extends java.lang.Object
{
    final java.util.ArrayList contents;

    public void <init>()
    {
        com.google.inject.internal.util.$ImmutableSet$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        r0.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents> = $r1;

        return;
    }

    public com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object)
    {
        java.lang.Object r0;
        com.google.inject.internal.util.$ImmutableSet$Builder r1;
        java.util.ArrayList $r2;

        r1 := @this: com.google.inject.internal.util.$ImmutableSet$Builder;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "element cannot be null");

        $r2 = r1.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        return r1;
    }

    public transient com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object[] r0;
        com.google.inject.internal.util.$ImmutableSet$Builder r2;
        java.util.ArrayList $r3;

        r2 := @this: com.google.inject.internal.util.$ImmutableSet$Builder;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "elements cannot be null");

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Iterable checkContentsNotNull(java.lang.Iterable,java.lang.Object)>($r1, "elements cannot contain null");

        $r3 = r2.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r1);

        return r2;
    }

    public com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.util.Collection r7;
        java.lang.Iterable r0;
        java.util.ArrayList $r4, $r5, $r6;
        int $i0, $i1, $i2;
        com.google.inject.internal.util.$ImmutableSet$Builder r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r2 := @this: com.google.inject.internal.util.$ImmutableSet$Builder;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        r7 = (java.util.Collection) r0;

        $r6 = r2.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        $r5 = r2.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i1 = interfaceinvoke r7.<java.util.Collection: int size()>();

        $i2 = $i0 + $i1;

        virtualinvoke $r6.<java.util.ArrayList: void ensureCapacity(int)>($i2);

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r3, "elements contains a null");

        $r4 = r2.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label2;

     label3:
        return r2;
    }

    public com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.google.inject.internal.util.$ImmutableSet$Builder r1;
        java.lang.Object $r2;
        boolean $z0;
        java.util.ArrayList $r3;

        r1 := @this: com.google.inject.internal.util.$ImmutableSet$Builder;

        r0 := @parameter0: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <com.google.inject.internal.util.$Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "element cannot be null");

        $r3 = r1.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        goto label1;

     label2:
        return r1;
    }

    public com.google.inject.internal.util.$ImmutableSet build()
    {
        com.google.inject.internal.util.$ImmutableSet$Builder r0;
        com.google.inject.internal.util.$ImmutableSet $r2;
        java.util.ArrayList $r1;

        r0 := @this: com.google.inject.internal.util.$ImmutableSet$Builder;

        $r1 = r0.<com.google.inject.internal.util.$ImmutableSet$Builder: java.util.ArrayList contents>;

        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable)>($r1);

        return $r2;
    }
}
