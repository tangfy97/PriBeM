class com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet extends com.mycila.inject.internal.guava.collect.StandardTable$TableSet
{
    final com.mycila.inject.internal.guava.collect.StandardTable$RowMap this$1;

    void <init>(com.mycila.inject.internal.guava.collect.StandardTable$RowMap)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet r0;
        com.mycila.inject.internal.guava.collect.StandardTable $r2;
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.StandardTable$RowMap;

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet: com.mycila.inject.internal.guava.collect.StandardTable$RowMap this$1> = r1;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.StandardTable$TableSet: void <init>(com.mycila.inject.internal.guava.collect.StandardTable,com.mycila.inject.internal.guava.collect.StandardTable$1)>($r2, null);

        return;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet r1;
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntryIterator $r0;
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet;

        $r0 = new com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntryIterator;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet: com.mycila.inject.internal.guava.collect.StandardTable$RowMap this$1>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntryIterator: void <init>(com.mycila.inject.internal.guava.collect.StandardTable$RowMap)>($r2);

        return $r0;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet r0;
        java.util.Map $r3;
        int $i0;
        com.mycila.inject.internal.guava.collect.StandardTable $r2;
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet: com.mycila.inject.internal.guava.collect.StandardTable$RowMap this$1>;

        $r2 = $r1.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r3 = $r2.<com.mycila.inject.internal.guava.collect.StandardTable: java.util.Map backingMap>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet r4;
        java.util.Map$Entry r1;
        java.util.Set $r8;
        com.mycila.inject.internal.guava.collect.StandardTable $r6;
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap $r5;
        java.util.Map $r7;
        java.lang.Object r0, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label3;

        r1 = (java.util.Map$Entry) r0;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r3 instanceof java.util.Map;

        if $z1 == 0 goto label1;

        $r5 = r4.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet: com.mycila.inject.internal.guava.collect.StandardTable$RowMap this$1>;

        $r6 = $r5.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r7 = $r6.<com.mycila.inject.internal.guava.collect.StandardTable: java.util.Map backingMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $z2 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: boolean safeContains(java.util.Collection,java.lang.Object)>($r8, r1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet r4;
        java.util.Map$Entry r1;
        java.util.Set $r8;
        com.mycila.inject.internal.guava.collect.StandardTable $r6;
        com.mycila.inject.internal.guava.collect.StandardTable$RowMap $r5;
        java.util.Map $r7;
        java.lang.Object r0, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r4 := @this: com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label3;

        r1 = (java.util.Map$Entry) r0;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r3 instanceof java.util.Map;

        if $z1 == 0 goto label1;

        $r5 = r4.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap$EntrySet: com.mycila.inject.internal.guava.collect.StandardTable$RowMap this$1>;

        $r6 = $r5.<com.mycila.inject.internal.guava.collect.StandardTable$RowMap: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r7 = $r6.<com.mycila.inject.internal.guava.collect.StandardTable: java.util.Map backingMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }
}
