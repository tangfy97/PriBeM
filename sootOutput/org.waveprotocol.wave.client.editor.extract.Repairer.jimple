public class org.waveprotocol.wave.client.editor.extract.Repairer extends java.lang.Object
{
    public static boolean debugRepairIsFatal;
    public static final org.waveprotocol.wave.client.editor.extract.ExtractResources resources;
    private final org.waveprotocol.wave.client.editor.content.ContentView persistentView;
    private final org.waveprotocol.wave.client.editor.content.ContentView renderedView;
    private final org.waveprotocol.wave.client.editor.impl.HtmlView strippingView;
    private final org.waveprotocol.wave.client.editor.extract.RepairListener listener;
    static final boolean $assertionsDisabled;

    private static boolean getAssertionsOn()
    {
        java.lang.AssertionError $r0, $r1;
        boolean $z0;

     label1:
        $z0 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        return 1;

     label4:
        return 0;

        catch java.lang.AssertionError from label1 to label2 with label3;
    }

    public void <init>(org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.client.editor.content.ContentView, org.waveprotocol.wave.client.editor.impl.HtmlView, org.waveprotocol.wave.client.editor.extract.RepairListener)
    {
        org.waveprotocol.wave.client.editor.content.ContentView r1, r2;
        org.waveprotocol.wave.client.editor.extract.RepairListener r4;
        org.waveprotocol.wave.client.editor.extract.Repairer r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView r3;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentView;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentView;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.impl.HtmlView;

        r4 := @parameter3: org.waveprotocol.wave.client.editor.extract.RepairListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView persistentView> = r1;

        r0.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView renderedView> = r2;

        r0.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.impl.HtmlView strippingView> = r3;

        r0.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.RepairListener listener> = r4;

        return;
    }

    public void handle(org.waveprotocol.wave.client.editor.extract.InconsistencyException)
    {
        org.waveprotocol.wave.client.editor.extract.InconsistencyException r0;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r3;
        org.waveprotocol.wave.client.editor.extract.Repairer r1;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing $r2;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.InconsistencyException;

        $z0 = r0 instanceof org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted;

        if $z0 == 0 goto label1;

        $r3 = (org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted) r0;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleInserted(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted)>($r3);

        goto label2;

     label1:
        $r2 = (org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing) r0;

        virtualinvoke r1.<org.waveprotocol.wave.client.editor.extract.Repairer: void handleMissing(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing)>($r2);

     label2:
        return;
    }

    public void handleInserted(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted)
    {
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted r2;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.client.editor.extract.Repairer r3;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.document.util.Point$El $r4;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>("handleInserted: ", r2);

        $z0 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Repairer triggered, handleInserted");

        throw $r5;

     label1:
        $r4 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: org.waveprotocol.wave.model.document.util.Point$El getContentPoint()>();

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r4, null);

        return;
    }

    public void handleMissing(org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r5;
        org.waveprotocol.wave.client.editor.content.ContentView $r4;
        org.waveprotocol.wave.common.logging.Logger $r1;
        java.lang.AssertionError $r7;
        org.waveprotocol.wave.model.document.util.Point$El $r6;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing r2;
        org.waveprotocol.wave.client.editor.extract.Repairer r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String,java.lang.Throwable)>("handleMissing: ", r2);

        $z0 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Repairer triggered, handleMissing");

        throw $r7;

     label1:
        $r4 = r3.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView renderedView>;

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing: org.waveprotocol.wave.client.editor.content.ContentNode getBrokenNode()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r4, $r5);

        virtualinvoke r3.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r6, null);

        return;
    }

    private void revertWithoutNotification(org.waveprotocol.wave.model.document.util.Point$El, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r38;
        boolean $z0;
        org.waveprotocol.wave.client.editor.content.ContentView $r13, $r14, $r26;
        org.waveprotocol.wave.model.document.util.Point$El r0, r12;
        org.waveprotocol.wave.common.logging.LoggerBundle $r2, $r20, $r28, $r31;
        java.lang.StringBuilder $r4, $r5, $r7, $r22, $r23, $r24, $r33, $r34, $r35;
        java.lang.Throwable $r18;
        org.waveprotocol.wave.common.logging.Logger $r3, $r21, $r29, $r32;
        org.waveprotocol.wave.client.editor.content.ContentElement $r11, $r16;
        java.lang.String $r8, $r25, $r36;
        org.waveprotocol.wave.client.editor.extract.Repairer r9;
        java.lang.RuntimeException $r17, $r19, $r30;
        java.lang.Object $r1, $r6, $r10, $r15, $r27, $r37;

        r9 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        r12 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        $z0 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean debugRepairIsFatal>;

        if $z0 == 0 goto label01;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("Repair is fatal");

        throw $r17;

     label01:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        if $r1 != null goto label02;

        $r14 = r9.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView renderedView>;

        $r13 = r9.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView renderedView>;

        $r15 = interfaceinvoke $r13.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r16 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r15;

        virtualinvoke r9.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.client.editor.content.ContentElement)>($r14, $r16);

        return;

     label02:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

     label03:
        $r2 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REPAIRING!! ");

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r8);

        $r10 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r11 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r10;

        virtualinvoke r9.<org.waveprotocol.wave.client.editor.extract.Repairer: void flashShowRepair(org.waveprotocol.wave.client.editor.content.ContentElement)>($r11);

     label04:
        virtualinvoke r9.<org.waveprotocol.wave.client.editor.extract.Repairer: void revertInner(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>(r0, r12);

     label05:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return;

     label06:
        $r30 := @caughtexception;

        $r31 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r32 = interfaceinvoke $r31.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception while revertInner: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r32.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r36);

        $r37 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        r38 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r37;

     label07:
        if r38 == null goto label12;

     label08:
        virtualinvoke r38.<org.waveprotocol.wave.client.editor.content.ContentNode: void revertImplementation()>();

     label09:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return;

     label10:
        $r19 := @caughtexception;

        $r20 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r21 = interfaceinvoke $r20.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while revertImplementation: ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r25);

        $r26 = r9.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView persistentView>;

        $r27 = interfaceinvoke $r26.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        if r38 != $r27 goto label11;

        throw $r30;

     label11:
        r38 = virtualinvoke r38.<org.waveprotocol.wave.client.editor.content.ContentNode: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label07;

     label12:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        goto label15;

     label13:
        $r18 := @caughtexception;

     label14:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r18;

     label15:
        $r28 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r29 = interfaceinvoke $r28.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        interfaceinvoke $r29.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>("Revert successful");

        return;

        catch java.lang.RuntimeException from label04 to label05 with label06;
        catch java.lang.RuntimeException from label08 to label09 with label10;
        catch java.lang.Throwable from label03 to label05 with label13;
        catch java.lang.Throwable from label06 to label09 with label13;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void revert(org.waveprotocol.wave.model.document.util.Point$El, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.client.editor.extract.RepairListener $r3;
        org.waveprotocol.wave.client.editor.extract.Repairer r0;
        org.waveprotocol.wave.model.document.util.Point$El r1, r2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.RepairListener listener>;

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.extract.RepairListener: void onRangeRevert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>(r1, r2);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.Repairer: void revertWithoutNotification(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>(r1, r2);

        return;
    }

    public void revert(org.waveprotocol.wave.model.document.ReadableDocument, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        org.waveprotocol.wave.client.editor.extract.RepairListener $r6, $r7;
        org.waveprotocol.wave.model.document.util.Point$El $r2, $r3;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.client.editor.extract.Repairer r5;

        r5 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El start(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getDocumentElement()>();

        if r1 != $r4 goto label1;

        $r7 = r5.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.RepairListener listener>;

        interfaceinvoke $r7.<org.waveprotocol.wave.client.editor.extract.RepairListener: void onFullDocumentRevert(org.waveprotocol.wave.model.document.ReadableDocument)>(r0);

        goto label2;

     label1:
        $r6 = r5.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.RepairListener listener>;

        interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.extract.RepairListener: void onRangeRevert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r2, $r3);

     label2:
        specialinvoke r5.<org.waveprotocol.wave.client.editor.extract.Repairer: void revertWithoutNotification(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r2, $r3);

        return;
    }

    public void flashShowRepair(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.extract.ExtractResources$Css $r10;
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        com.google.gwt.dom.client.Element $r7, $r8;
        java.lang.StringBuilder $r2, $r3, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement r4;
        org.waveprotocol.wave.client.editor.extract.Repairer$1 $r12;
        java.lang.String $r6, $r11;
        org.waveprotocol.wave.client.editor.extract.ExtractResources $r9;
        org.waveprotocol.wave.client.editor.extract.Repairer r13;
        boolean $z0;

        r13 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r4 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("repairing region: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r6);

        $z0 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showErrors()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r7 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r7 != null goto label2;

        return;

     label2:
        $r8 = virtualinvoke r4.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r9 = <org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.ExtractResources resources>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.extract.ExtractResources: org.waveprotocol.wave.client.editor.extract.ExtractResources$Css css()>();

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.client.editor.extract.ExtractResources$Css: java.lang.String repaired()>();

        virtualinvoke $r8.<com.google.gwt.dom.client.Element: void addClassName(java.lang.String)>($r11);

        $r12 = new org.waveprotocol.wave.client.editor.extract.Repairer$1;

        specialinvoke $r12.<org.waveprotocol.wave.client.editor.extract.Repairer$1: void <init>(org.waveprotocol.wave.client.editor.extract.Repairer,org.waveprotocol.wave.client.editor.content.ContentElement)>(r13, r4);

        virtualinvoke $r12.<org.waveprotocol.wave.client.scheduler.ScheduleTimer: void schedule(int)>(800);

        return;
    }

    public void showDeath(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.extract.ExtractResources$Css $r4;
        com.google.gwt.dom.client.Element $r1, $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.extract.ExtractResources $r3;
        java.lang.String $r5;
        org.waveprotocol.wave.client.editor.extract.Repairer r6;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showErrors()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r3 = <org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.ExtractResources resources>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.extract.ExtractResources: org.waveprotocol.wave.client.editor.extract.ExtractResources$Css css()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.extract.ExtractResources$Css: java.lang.String dead()>();

        virtualinvoke $r2.<com.google.gwt.dom.client.Element: void addClassName(java.lang.String)>($r5);

     label2:
        return;
    }

    public void hideDeath(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.extract.ExtractResources$Css $r4;
        com.google.gwt.dom.client.Element $r1, $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r0;
        org.waveprotocol.wave.client.editor.extract.ExtractResources $r3;
        java.lang.String $r5;
        org.waveprotocol.wave.client.editor.extract.Repairer r6;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        $z0 = staticinvoke <org.waveprotocol.wave.client.debug.logger.LogLevel: boolean showErrors()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        $r3 = <org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.ExtractResources resources>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.extract.ExtractResources: org.waveprotocol.wave.client.editor.extract.ExtractResources$Css css()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.extract.ExtractResources$Css: java.lang.String dead()>();

        virtualinvoke $r2.<com.google.gwt.dom.client.Element: void removeClassName(java.lang.String)>($r5);

     label2:
        return;
    }

    void revertInner(org.waveprotocol.wave.model.document.util.Point$El, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r17, $r20, $r25, $r28, r29, r30, r31;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.client.editor.content.ContentView r1;
        org.waveprotocol.wave.model.document.util.Point$El r2, r5;
        com.google.gwt.dom.client.Element r27;
        java.lang.AssertionError $r33, $r34, $r35, $r36;
        org.waveprotocol.wave.client.editor.extract.Repairer r0;
        com.google.gwt.core.client.JavaScriptObject $r19;
        java.lang.Object $r4, $r6, $r7, $r8, $r9, $r11, $r13, $r15, $r16, $r21, $r22, $r24;
        com.google.gwt.dom.client.Node r3, $r18, $r26, $r32, $r37;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        r5 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        r1 = r0.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView renderedView>;

        $z0 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if r5 == null goto label01;

        $r21 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r22 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        if $r21 == $r22 goto label01;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>(java.lang.Object)>("No reverting across elements");

        throw $r33;

     label01:
        $r24 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object nodeBefore(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>(r1, r2);

        $r25 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r24;

        if $r25 != null goto label02;

        $r26 = null;

        goto label03;

     label02:
        $r26 = virtualinvoke $r25.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label03:
        r3 = $r26;

        if $r26 != null goto label04;

        $r15 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getContainer()>();

        $r16 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getVisibleNode(java.lang.Object)>($r15);

        $r17 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r16;

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $r19 = virtualinvoke $r18.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r27 = (com.google.gwt.dom.client.Element) $r19;

        goto label05;

     label04:
        r27 = virtualinvoke $r26.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

     label05:
        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        $r20 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r4;

        if r5 != null goto label06;

        $r28 = null;

        goto label07;

     label06:
        $r6 = virtualinvoke r5.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        $r28 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r6;

     label07:
        r29 = $r28;

        $z1 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label08;

        $r13 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getVisibleNode(java.lang.Object)>($r20);

        if $r13 == $r20 goto label08;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label08:
        $z2 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label09;

        $r11 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getVisibleNode(java.lang.Object)>(r29);

        if $r11 == r29 goto label09;

        $r35 = new java.lang.AssertionError;

        specialinvoke $r35.<java.lang.AssertionError: void <init>()>();

        throw $r35;

     label09:
        $z3 = <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled>;

        if $z3 != 0 goto label10;

        if r29 == null goto label10;

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getParentElement(java.lang.Object)>($r20);

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getParentElement(java.lang.Object)>(r29);

        if $r8 == $r9 goto label10;

        $r36 = new java.lang.AssertionError;

        specialinvoke $r36.<java.lang.AssertionError: void <init>(java.lang.Object)>("First and last are expected to have same parent");

        throw $r36;

     label10:
        r30 = $r20;

     label11:
        if r30 == r29 goto label13;

        if r5 != null goto label12;

        $z4 = virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isConsistent()>();

        if $z4 == 0 goto label12;

        goto label13;

     label12:
        virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: void revertImplementation()>();

        $r7 = interfaceinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r30);

        r30 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r7;

        goto label11;

     label13:
        r31 = r30;

        if r30 != null goto label14;

        $r32 = null;

        goto label15;

     label14:
        $r32 = virtualinvoke r30.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label15:
        $r37 = (com.google.gwt.dom.client.Node) r27;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.Repairer: void reattachImplChildren(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode)>($r37, r3, $r32, $r20, r31);

        return;
    }

    private void reattachImplChildren(com.google.gwt.dom.client.Node, com.google.gwt.dom.client.Node, com.google.gwt.dom.client.Node, org.waveprotocol.wave.client.editor.content.ContentNode, org.waveprotocol.wave.client.editor.content.ContentNode)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode r4, r5, r15;
        org.waveprotocol.wave.client.editor.extract.Repairer r1;
        org.waveprotocol.wave.client.editor.content.ContentView $r9;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2, $r12;
        com.google.gwt.dom.client.Element $r11;
        java.lang.Object $r3, $r10, $r13;
        com.google.gwt.dom.client.Node r0, r6, $r7, r8, $r14;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r6 := @parameter0: com.google.gwt.dom.client.Node;

        r0 := @parameter1: com.google.gwt.dom.client.Node;

        r8 := @parameter2: com.google.gwt.dom.client.Node;

        r4 := @parameter3: org.waveprotocol.wave.client.editor.content.ContentNode;

        r5 := @parameter4: org.waveprotocol.wave.client.editor.content.ContentNode;

     label1:
        if r0 != null goto label2;

        $r12 = r1.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.impl.HtmlView strippingView>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getFirstChild(java.lang.Object)>(r6);

        $r14 = (com.google.gwt.dom.client.Node) $r13;

        goto label3;

     label2:
        $r2 = r1.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.impl.HtmlView strippingView>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r0);

        $r14 = (com.google.gwt.dom.client.Node) $r3;

     label3:
        if $r14 == null goto label6;

        if $r14 != r8 goto label4;

        goto label6;

     label4:
        $r11 = virtualinvoke $r14.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        if $r11 == null goto label5;

        virtualinvoke $r14.<com.google.gwt.dom.client.Node: void removeFromParent()>();

     label5:
        goto label1;

     label6:
        r15 = r4;

     label7:
        if r15 == r5 goto label8;

        $r7 = virtualinvoke r15.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        virtualinvoke r6.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node insertBefore(com.google.gwt.dom.client.Node,com.google.gwt.dom.client.Node)>($r7, r8);

        $r9 = r1.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView renderedView>;

        $r10 = interfaceinvoke $r9.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>(r15);

        r15 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r10;

        goto label7;

     label8:
        return;
    }

    public boolean zipRange(org.waveprotocol.wave.client.editor.RestrictedRange, com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r4, $r7;
        org.waveprotocol.wave.client.editor.content.ContentView $r10;
        java.lang.RuntimeException $r8;
        org.waveprotocol.wave.model.document.util.Point$El $r11, $r12;
        org.waveprotocol.wave.client.editor.RestrictedRange r0;
        java.lang.Object $r1, $r3, $r5;
        org.waveprotocol.wave.client.editor.content.ContentElement $r2;
        org.waveprotocol.wave.client.editor.extract.Repairer r9;
        com.google.gwt.dom.client.Node r6;
        boolean $z0;

        r9 := @this: org.waveprotocol.wave.client.editor.extract.Repairer;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.RestrictedRange;

        r6 := @parameter1: com.google.gwt.dom.client.Node;

     label1:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getContainer()>();

        $r2 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeBefore()>();

        $r4 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r3;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r7 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r5;

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentElement: boolean zipChildrenExcludingFrom(org.waveprotocol.wave.client.editor.content.ContentNode,org.waveprotocol.wave.client.editor.content.ContentNode,com.google.gwt.dom.client.Node)>($r4, $r7, r6);

     label2:
        return $z0;

     label3:
        $r8 := @caughtexception;

        $r10 = r9.<org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.content.ContentView persistentView>;

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El getPointBefore(org.waveprotocol.wave.model.document.ReadableDocument)>($r10);

        $r12 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El getPointAfter()>();

        virtualinvoke r9.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r11, $r12);

        return 1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.extract.ExtractResources$Css $r4;
        java.lang.Class $r0;
        java.lang.Object $r1;
        org.waveprotocol.wave.client.editor.extract.ExtractResources $r2, $r3;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/Repairer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.Repairer: boolean $assertionsDisabled> = $z3;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.extract.Repairer: boolean getAssertionsOn()>();

        <org.waveprotocol.wave.client.editor.extract.Repairer: boolean debugRepairIsFatal> = $z1;

        $z2 = staticinvoke <com.google.gwt.core.client.GWT: boolean isClient()>();

        if $z2 == 0 goto label3;

        $r1 = staticinvoke <com.google.gwt.core.client.GWT: java.lang.Object create(java.lang.Class)>(class "Lorg/waveprotocol/wave/client/editor/extract/ExtractResources;");

        $r2 = (org.waveprotocol.wave.client.editor.extract.ExtractResources) $r1;

        <org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.ExtractResources resources> = $r2;

        $r3 = <org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.ExtractResources resources>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.extract.ExtractResources: org.waveprotocol.wave.client.editor.extract.ExtractResources$Css css()>();

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.extract.ExtractResources$Css: java.lang.String getText()>();

        staticinvoke <com.google.gwt.dom.client.StyleInjector: void inject(java.lang.String,boolean)>($r5, 1);

        goto label4;

     label3:
        <org.waveprotocol.wave.client.editor.extract.Repairer: org.waveprotocol.wave.client.editor.extract.ExtractResources resources> = null;

     label4:
        return;
    }
}
