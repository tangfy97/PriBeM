public class org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier extends org.apache.poi.poifs.crypt.EncryptionVerifier implements org.apache.poi.poifs.crypt.standard.EncryptionRecord
{
    private static final int SPIN_COUNT;
    private final int verifierHashSize;
    static final boolean $assertionsDisabled;

    protected void <init>(org.apache.poi.poifs.filesystem.DocumentInputStream, org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader)
    {
        byte[] r2, r3, r6;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader r4;
        org.apache.poi.poifs.crypt.ChainingMode $r8;
        java.lang.RuntimeException $r11;
        org.apache.poi.poifs.crypt.HashAlgorithm $r9;
        int $i0, $i1, $i2, $i4;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r0;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r5, $r7;
        org.apache.poi.poifs.filesystem.DocumentInputStream r1;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.DocumentInputStream;

        r4 := @parameter1: org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader;

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: int readInt()>();

        if $i0 == 16 goto label1;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Salt size != 16 !?");

        throw $r11;

     label1:
        r2 = newarray (byte)[16];

        virtualinvoke r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: void readFully(byte[])>(r2);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setSalt(byte[])>(r2);

        r3 = newarray (byte)[16];

        virtualinvoke r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: void readFully(byte[])>(r3);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setEncryptedVerifier(byte[])>(r3);

        $i1 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: int readInt()>();

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: int verifierHashSize> = $i1;

        $r5 = virtualinvoke r4.<org.apache.poi.poifs.crypt.standard.StandardEncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $i2 = $r5.<org.apache.poi.poifs.crypt.CipherAlgorithm: int encryptedVerifierHashLength>;

        r6 = newarray (byte)[$i2];

        virtualinvoke r1.<org.apache.poi.poifs.filesystem.DocumentInputStream: void readFully(byte[])>(r6);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setEncryptedVerifierHash(byte[])>(r6);

        $i4 = (int) 50000;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setSpinCount(int)>($i4);

        $r7 = <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm aes128>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setCipherAlgorithm(org.apache.poi.poifs.crypt.CipherAlgorithm)>($r7);

        $r8 = <org.apache.poi.poifs.crypt.ChainingMode: org.apache.poi.poifs.crypt.ChainingMode ecb>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>($r8);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setEncryptedKey(byte[])>(null);

        $r9 = <org.apache.poi.poifs.crypt.HashAlgorithm: org.apache.poi.poifs.crypt.HashAlgorithm sha1>;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setHashAlgorithm(org.apache.poi.poifs.crypt.HashAlgorithm)>($r9);

        return;
    }

    protected void <init>(org.apache.poi.poifs.crypt.CipherAlgorithm, org.apache.poi.poifs.crypt.HashAlgorithm, int, int, org.apache.poi.poifs.crypt.ChainingMode)
    {
        org.apache.poi.poifs.crypt.ChainingMode r3;
        org.apache.poi.poifs.crypt.HashAlgorithm r2;
        int $i0, i1, i2, $i4;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r0;
        org.apache.poi.poifs.crypt.CipherAlgorithm r1;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        r1 := @parameter0: org.apache.poi.poifs.crypt.CipherAlgorithm;

        r2 := @parameter1: org.apache.poi.poifs.crypt.HashAlgorithm;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r3 := @parameter4: org.apache.poi.poifs.crypt.ChainingMode;

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void <init>()>();

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setCipherAlgorithm(org.apache.poi.poifs.crypt.CipherAlgorithm)>(r1);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setHashAlgorithm(org.apache.poi.poifs.crypt.HashAlgorithm)>(r2);

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setChainingMode(org.apache.poi.poifs.crypt.ChainingMode)>(r3);

        $i4 = (int) 50000;

        virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: void setSpinCount(int)>($i4);

        $i0 = r2.<org.apache.poi.poifs.crypt.HashAlgorithm: int hashSize>;

        r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: int verifierHashSize> = $i0;

        return;
    }

    protected void setSalt(byte[])
    {
        byte[] r0;
        org.apache.poi.EncryptedDocumentException $r1;
        int $i0;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r2;

        r2 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        r0 := @parameter0: byte[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 == 16 goto label2;

     label1:
        $r1 = new org.apache.poi.EncryptedDocumentException;

        specialinvoke $r1.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>("invalid verifier salt");

        throw $r1;

     label2:
        specialinvoke r2.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setSalt(byte[])>(r0);

        return;
    }

    protected void setEncryptedVerifier(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setEncryptedVerifier(byte[])>(r1);

        return;
    }

    protected void setEncryptedVerifierHash(byte[])
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.poi.poifs.crypt.EncryptionVerifier: void setEncryptedVerifierHash(byte[])>(r1);

        return;
    }

    public void write(org.apache.poi.util.LittleEndianByteArrayOutputStream)
    {
        byte[] $r1, $r3, $r4;
        java.lang.AssertionError $r5, $r6, $r7;
        org.apache.poi.util.LittleEndianByteArrayOutputStream r2;
        int $i0, $i1, $i2, $i3;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        r2 := @parameter0: org.apache.poi.util.LittleEndianByteArrayOutputStream;

        $r1 = virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: byte[] getSalt()>();

        $z0 = <org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i3 = lengthof $r1;

        if $i3 == 16 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $i0 = lengthof $r1;

        virtualinvoke r2.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeInt(int)>($i0);

        virtualinvoke r2.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void write(byte[])>($r1);

        $r3 = virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: byte[] getEncryptedVerifier()>();

        $z1 = <org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i2 = lengthof $r3;

        if $i2 == 16 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        virtualinvoke r2.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void write(byte[])>($r3);

        $r4 = virtualinvoke r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: byte[] getEncryptedVerifierHash()>();

        $z2 = <org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i1 = lengthof $r4;

        if $i1 == 32 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        virtualinvoke r2.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void writeInt(int)>(20);

        virtualinvoke r2.<org.apache.poi.util.LittleEndianByteArrayOutputStream: void write(byte[])>($r4);

        return;
    }

    protected int getVerifierHashSize()
    {
        int $i0;
        org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier r0;

        r0 := @this: org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier;

        $i0 = r0.<org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: int verifierHashSize>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: int SPIN_COUNT> = 50000;

        $r0 = class "Lorg/apache/poi/poifs/crypt/standard/StandardEncryptionVerifier;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.poi.poifs.crypt.standard.StandardEncryptionVerifier: boolean $assertionsDisabled> = $z1;

        return;
    }
}
