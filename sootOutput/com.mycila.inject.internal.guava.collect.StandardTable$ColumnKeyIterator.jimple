class com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator extends com.mycila.inject.internal.guava.collect.AbstractIterator
{
    final java.util.Map seen;
    final java.util.Iterator mapIterator;
    java.util.Iterator entryIterator;
    final com.mycila.inject.internal.guava.collect.StandardTable this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.StandardTable)
    {
        java.util.Iterator $r9;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r10;
        java.util.Collection $r8;
        com.mycila.inject.internal.guava.collect.StandardTable r1, $r2, $r6;
        com.mycila.inject.internal.guava.base.Supplier $r3;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator r0;
        java.util.Map $r5, $r7;
        java.lang.Object $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.StandardTable;

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: com.mycila.inject.internal.guava.collect.StandardTable this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractIterator: void <init>()>();

        $r2 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r3 = $r2.<com.mycila.inject.internal.guava.collect.StandardTable: com.mycila.inject.internal.guava.base.Supplier factory>;

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.base.Supplier: java.lang.Object get()>();

        $r5 = (java.util.Map) $r4;

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Map seen> = $r5;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: com.mycila.inject.internal.guava.collect.StandardTable this$0>;

        $r7 = $r6.<com.mycila.inject.internal.guava.collect.StandardTable: java.util.Map backingMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $r9 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator mapIterator> = $r9;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.UnmodifiableIterator emptyIterator()>();

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator entryIterator> = $r10;

        return;
    }

    protected java.lang.Object computeNext()
    {
        java.util.Map $r5, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r10;
        java.util.Iterator $r1, $r3, $r7, $r8, $r17;
        java.util.Set $r6;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator r0;
        java.lang.Object $r2, $r4, $r9, $r12, $r14, $r15, $r16;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator;

     label1:
        $r17 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator entryIterator>;

        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator entryIterator>;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Map seen>;

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z1 != 0 goto label2;

        $r13 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Map seen>;

        $r14 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r16;

     label2:
        goto label1;

     label3:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator mapIterator>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator mapIterator>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.util.Iterator entryIterator> = $r7;

        goto label1;

     label4:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: java.lang.Object endOfData()>();

        return $r2;
    }

    void <init>(com.mycila.inject.internal.guava.collect.StandardTable, com.mycila.inject.internal.guava.collect.StandardTable$1)
    {
        com.mycila.inject.internal.guava.collect.StandardTable$1 r2;
        com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator r0;
        com.mycila.inject.internal.guava.collect.StandardTable r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.StandardTable;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.StandardTable$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.StandardTable$ColumnKeyIterator: void <init>(com.mycila.inject.internal.guava.collect.StandardTable)>(r1);

        return;
    }
}
