class com.jmatio.io.OSArrayTag extends com.jmatio.io.MatTag
{
    private java.nio.ByteBuffer data;

    public void <init>(int, byte[])
    {
        com.jmatio.io.OSArrayTag r0;
        byte[] r1;
        int i0;
        java.nio.ByteBuffer $r2;

        r0 := @this: com.jmatio.io.OSArrayTag;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        specialinvoke r0.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(i0, $r2);

        return;
    }

    public void <init>(int, java.nio.ByteBuffer)
    {
        com.jmatio.io.OSArrayTag r0;
        int i0, $i1;
        java.nio.ByteBuffer r1;

        r0 := @this: com.jmatio.io.OSArrayTag;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteBuffer;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        specialinvoke r0.<com.jmatio.io.MatTag: void <init>(int,int)>(i0, $i1);

        r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data> = r1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        return;
    }

    public void writeTo(java.io.DataOutputStream) throws java.io.IOException
    {
        byte[] $r3, $r8;
        java.nio.ByteBuffer $r2, $r4, $r5, $r6, $r7, $r9, $r10, $r11;
        java.io.DataOutputStream r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14;
        com.jmatio.io.OSArrayTag r0;

        r0 := @this: com.jmatio.io.OSArrayTag;

        r1 := @parameter0: java.io.DataOutputStream;

        $i0 = r0.<com.jmatio.io.OSArrayTag: int size>;

        if $i0 > 4 goto label1;

        $i6 = r0.<com.jmatio.io.OSArrayTag: int size>;

        if $i6 <= 0 goto label1;

        $i7 = r0.<com.jmatio.io.OSArrayTag: int size>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i7);

        $i8 = r0.<com.jmatio.io.OSArrayTag: int type>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i8);

        $r9 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i9 = virtualinvoke $r9.<java.nio.ByteBuffer: int limit()>();

        i10 = virtualinvoke r0.<com.jmatio.io.OSArrayTag: int getPadding(int,boolean)>($i9, 1);

        goto label2;

     label1:
        $i1 = r0.<com.jmatio.io.OSArrayTag: int type>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        $i2 = r0.<com.jmatio.io.OSArrayTag: int size>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i2);

        $r2 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        i10 = virtualinvoke r0.<com.jmatio.io.OSArrayTag: int getPadding(int,boolean)>($i3, 0);

     label2:
        $r10 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i11 = virtualinvoke $r10.<java.nio.ByteBuffer: int remaining()>();

        if $i11 >= 1024 goto label3;

        $r7 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i12 = virtualinvoke $r7.<java.nio.ByteBuffer: int remaining()>();

        goto label4;

     label3:
        $i12 = 1024;

     label4:
        $r8 = newarray (byte)[$i12];

     label5:
        $r11 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i13 = virtualinvoke $r11.<java.nio.ByteBuffer: int remaining()>();

        if $i13 <= 0 goto label8;

        $r4 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i4 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        $i5 = lengthof $r8;

        if $i4 <= $i5 goto label6;

        $i14 = lengthof $r8;

        goto label7;

     label6:
        $r5 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        $i14 = virtualinvoke $r5.<java.nio.ByteBuffer: int remaining()>();

     label7:
        $r6 = r0.<com.jmatio.io.OSArrayTag: java.nio.ByteBuffer data>;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r8, 0, $i14);

        virtualinvoke r1.<java.io.DataOutputStream: void write(byte[],int,int)>($r8, 0, $i14);

        goto label5;

     label8:
        if i10 <= 0 goto label9;

        $r3 = newarray (byte)[i10];

        virtualinvoke r1.<java.io.DataOutputStream: void write(byte[])>($r3);

     label9:
        return;
    }
}
