public final class org.apache.lucene.util.packed.BlockPackedWriter extends org.apache.lucene.util.packed.AbstractBlockPackedWriter
{
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.DataOutput, int)
    {
        org.apache.lucene.util.packed.BlockPackedWriter r0;
        int i0;
        org.apache.lucene.store.DataOutput r1;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void <init>(org.apache.lucene.store.DataOutput,int)>(r1, i0);

        return;
    }

    protected void flush() throws java.io.IOException
    {
        byte $b0, $b1, $b3, $b5, $b6, $b7, $b25;
        boolean $z0, $z1;
        org.apache.lucene.store.DataOutput $r1, $r3;
        long $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17, l19, l20, l23;
        java.lang.AssertionError $r7;
        org.apache.lucene.util.packed.BlockPackedWriter r0;
        long[] $r2, $r4, $r5;
        int i2, $i4, $i8, $i13, $i18, i21, $i22, $i24, i26, $i27, $i28;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedWriter;

        $z0 = <org.apache.lucene.util.packed.BlockPackedWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i18 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: int off>;

        if $i18 > 0 goto label01;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label01:
        l19 = 9223372036854775807L;

        l20 = -9223372036854775808L;

        i21 = 0;

     label02:
        $i22 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: int off>;

        if i21 >= $i22 goto label03;

        $r4 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: long[] values>;

        $l16 = $r4[i21];

        l19 = staticinvoke <java.lang.Math: long min(long,long)>($l16, l19);

        $r5 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: long[] values>;

        $l17 = $r5[i21];

        l20 = staticinvoke <java.lang.Math: long max(long,long)>($l17, l20);

        i21 = i21 + 1;

        goto label02;

     label03:
        l23 = l20 - l19;

        $b0 = l23 cmp 0L;

        $i27 = (int) $b0;

        if $i27 >= 0 goto label04;

        $i24 = 64;

        goto label06;

     label04:
        $b1 = l23 cmp 0L;

        if $b1 != 0 goto label05;

        $i24 = 0;

        goto label06;

     label05:
        $i24 = staticinvoke <org.apache.lucene.util.packed.PackedInts: int bitsRequired(long)>(l23);

     label06:
        i2 = $i24;

        if $i24 != 64 goto label07;

        l19 = 0L;

        goto label08;

     label07:
        $b3 = l19 cmp 0L;

        $i28 = (int) $b3;

        if $i28 <= 0 goto label08;

        $l14 = staticinvoke <org.apache.lucene.util.packed.PackedInts: long maxValue(int)>($i24);

        $l15 = l20 - $l14;

        l19 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l15);

     label08:
        $i4 = i2 << 1;

        $b25 = l19 cmp 0L;

        if $b25 != 0 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        $i13 = $i4 | $z1;

        $r1 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        $b5 = (byte) $i13;

        virtualinvoke $r1.<org.apache.lucene.store.DataOutput: void writeByte(byte)>($b5);

        $b6 = l19 cmp 0L;

        if $b6 == 0 goto label11;

        $r3 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: org.apache.lucene.store.DataOutput out>;

        $l11 = staticinvoke <org.apache.lucene.util.packed.BlockPackedWriter: long zigZagEncode(long)>(l19);

        $l12 = $l11 - 1L;

        staticinvoke <org.apache.lucene.util.packed.BlockPackedWriter: void writeVLong(org.apache.lucene.store.DataOutput,long)>($r3, $l12);

     label11:
        if i2 <= 0 goto label14;

        $b7 = l19 cmp 0L;

        if $b7 == 0 goto label13;

        i26 = 0;

     label12:
        $i8 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: int off>;

        if i26 >= $i8 goto label13;

        $r2 = r0.<org.apache.lucene.util.packed.BlockPackedWriter: long[] values>;

        $l9 = $r2[i26];

        $l10 = $l9 - l19;

        $r2[i26] = $l10;

        i26 = i26 + 1;

        goto label12;

     label13:
        virtualinvoke r0.<org.apache.lucene.util.packed.BlockPackedWriter: void writeValues(int)>(i2);

     label14:
        r0.<org.apache.lucene.util.packed.BlockPackedWriter: int off> = 0;

        return;
    }

    public volatile long ord()
    {
        org.apache.lucene.util.packed.BlockPackedWriter r0;
        long $l0;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedWriter;

        $l0 = specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: long ord()>();

        return $l0;
    }

    public volatile void finish() throws java.io.IOException
    {
        org.apache.lucene.util.packed.BlockPackedWriter r0;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedWriter;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void finish()>();

        return;
    }

    public volatile void add(long) throws java.io.IOException
    {
        org.apache.lucene.util.packed.BlockPackedWriter r0;
        long l0;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedWriter;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void add(long)>(l0);

        return;
    }

    public volatile void reset(org.apache.lucene.store.DataOutput)
    {
        org.apache.lucene.util.packed.BlockPackedWriter r0;
        org.apache.lucene.store.DataOutput r1;

        r0 := @this: org.apache.lucene.util.packed.BlockPackedWriter;

        r1 := @parameter0: org.apache.lucene.store.DataOutput;

        specialinvoke r0.<org.apache.lucene.util.packed.AbstractBlockPackedWriter: void reset(org.apache.lucene.store.DataOutput)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/BlockPackedWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.BlockPackedWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
