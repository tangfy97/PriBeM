class bsh.BSHArrayDimensions extends bsh.SimpleNode
{
    public java.lang.Class baseType;
    public int numDefinedDims;
    public int numUndefinedDims;
    public int[] definedDimensions;

    void <init>(int)
    {
        int i0;
        bsh.BSHArrayDimensions r0;

        r0 := @this: bsh.BSHArrayDimensions;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public void addDefinedDimension()
    {
        int $i0, $i1;
        bsh.BSHArrayDimensions r0;

        r0 := @this: bsh.BSHArrayDimensions;

        $i0 = r0.<bsh.BSHArrayDimensions: int numDefinedDims>;

        $i1 = $i0 + 1;

        r0.<bsh.BSHArrayDimensions: int numDefinedDims> = $i1;

        return;
    }

    public void addUndefinedDimension()
    {
        int $i0, $i1;
        bsh.BSHArrayDimensions r0;

        r0 := @this: bsh.BSHArrayDimensions;

        $i0 = r0.<bsh.BSHArrayDimensions: int numUndefinedDims>;

        $i1 = $i0 + 1;

        r0.<bsh.BSHArrayDimensions: int numUndefinedDims> = $i1;

        return;
    }

    public java.lang.Object eval(java.lang.Class, bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.Interpreter r3;
        bsh.CallStack r2;
        java.lang.StringBuffer $r5, $r6, $r7;
        java.lang.Class r1;
        java.lang.Object $r4;
        java.lang.String $r8;
        bsh.BSHArrayDimensions r0;
        boolean $z0;

        r0 := @this: bsh.BSHArrayDimensions;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: bsh.CallStack;

        r3 := @parameter2: bsh.Interpreter;

        $z0 = <bsh.Interpreter: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("array base type = ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <bsh.Interpreter: void debug(java.lang.String)>($r8);

     label1:
        r0.<bsh.BSHArrayDimensions: java.lang.Class baseType> = r1;

        $r4 = virtualinvoke r0.<bsh.BSHArrayDimensions: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        return $r4;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.SimpleNode r2, $r7;
        int[] $r3, $r10, $r17, $r18, $r19, $r20, $r38;
        bsh.BSHArrayInitializer $r14;
        boolean $z0;
        bsh.Interpreter r6;
        java.lang.Exception $r30;
        bsh.Node $r1, $r4;
        bsh.BSHArrayDimensions r0;
        bsh.CallStack r5;
        java.lang.StringBuffer $r22, $r23, $r24, $r25, $r26, $r27, $r32, $r33, $r34, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12;
        java.lang.String $r28, $r36;
        bsh.EvalError $r21, $r29, $r31;
        bsh.Primitive $r9, $r11;
        java.lang.Object $r8, $r15, r37;
        java.lang.Class $r12, $r13, $r16;

        r0 := @this: bsh.BSHArrayDimensions;

        r5 := @parameter0: bsh.CallStack;

        r6 := @parameter1: bsh.Interpreter;

        $r1 = virtualinvoke r0.<bsh.BSHArrayDimensions: bsh.Node jjtGetChild(int)>(0);

        r2 = (bsh.SimpleNode) $r1;

        $z0 = r2 instanceof bsh.BSHArrayInitializer;

        if $z0 == 0 goto label06;

        $r12 = r0.<bsh.BSHArrayDimensions: java.lang.Class baseType>;

        if $r12 != null goto label01;

        $r29 = new bsh.EvalError;

        specialinvoke $r29.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Internal Array Eval err:  unknown base type", r0, r5);

        throw $r29;

     label01:
        $r14 = (bsh.BSHArrayInitializer) r2;

        $r13 = r0.<bsh.BSHArrayDimensions: java.lang.Class baseType>;

        $i3 = r0.<bsh.BSHArrayDimensions: int numUndefinedDims>;

        $r15 = virtualinvoke $r14.<bsh.BSHArrayInitializer: java.lang.Object eval(java.lang.Class,int,bsh.CallStack,bsh.Interpreter)>($r13, $i3, r5, r6);

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $i4 = staticinvoke <bsh.Reflect: int getArrayDimensions(java.lang.Class)>($r16);

        $r17 = newarray (int)[$i4];

        r0.<bsh.BSHArrayDimensions: int[] definedDimensions> = $r17;

        $r18 = r0.<bsh.BSHArrayDimensions: int[] definedDimensions>;

        $i6 = lengthof $r18;

        $i5 = r0.<bsh.BSHArrayDimensions: int numUndefinedDims>;

        if $i6 == $i5 goto label02;

        $r21 = new bsh.EvalError;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Incompatible initializer. Allocation calls for a ");

        $i9 = r0.<bsh.BSHArrayDimensions: int numUndefinedDims>;

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" dimensional array, but initializer is a ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" dimensional array");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r28, r0, r5);

        throw $r21;

     label02:
        r37 = $r15;

        i10 = 0;

        goto label05;

     label03:
        $r19 = r0.<bsh.BSHArrayDimensions: int[] definedDimensions>;

        $i7 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r37);

        $r19[i10] = $i7;

        $r20 = r0.<bsh.BSHArrayDimensions: int[] definedDimensions>;

        $i8 = $r20[i10];

        if $i8 <= 0 goto label04;

        r37 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r37, 0);

     label04:
        i10 = i10 + 1;

     label05:
        $r38 = r0.<bsh.BSHArrayDimensions: int[] definedDimensions>;

        $i11 = lengthof $r38;

        if i10 < $i11 goto label03;

        return $r15;

     label06:
        $i0 = r0.<bsh.BSHArrayDimensions: int numDefinedDims>;

        $r3 = newarray (int)[$i0];

        r0.<bsh.BSHArrayDimensions: int[] definedDimensions> = $r3;

        i12 = 0;

        goto label11;

     label07:
        $r4 = virtualinvoke r0.<bsh.BSHArrayDimensions: bsh.Node jjtGetChild(int)>(i12);

        $r7 = (bsh.SimpleNode) $r4;

        $r8 = virtualinvoke $r7.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r5, r6);

        $r10 = r0.<bsh.BSHArrayDimensions: int[] definedDimensions>;

        $r9 = (bsh.Primitive) $r8;

        $i2 = virtualinvoke $r9.<bsh.Primitive: int intValue()>();

        $r10[i12] = $i2;

     label08:
        goto label10;

     label09:
        $r30 := @caughtexception;

        $r31 = new bsh.EvalError;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Array index: ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" does not evaluate to an integer");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r36, r0, r5);

        throw $r31;

     label10:
        i12 = i12 + 1;

     label11:
        $i1 = r0.<bsh.BSHArrayDimensions: int numDefinedDims>;

        if i12 < $i1 goto label07;

        $r11 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r11;

        catch java.lang.Exception from label07 to label08 with label09;
    }
}
