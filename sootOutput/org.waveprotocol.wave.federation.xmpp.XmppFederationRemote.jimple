public class org.waveprotocol.wave.federation.xmpp.XmppFederationRemote extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationProvider
{
    private static final java.util.logging.Logger LOG;
    private static final int XMPP_PROVIDER_TIMEOUT;
    private final org.waveprotocol.wave.federation.WaveletFederationListener$Factory updatesListenerFactory;
    private final org.waveprotocol.wave.federation.xmpp.XmppDisco disco;
    private final java.lang.String jid;
    private org.waveprotocol.wave.federation.xmpp.XmppManager manager;

    public void <init>(org.waveprotocol.wave.federation.WaveletFederationListener$Factory, org.waveprotocol.wave.federation.xmpp.XmppDisco, java.lang.String)
    {
        org.waveprotocol.wave.federation.xmpp.XmppDisco r2;
        java.lang.String r3;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;
        org.waveprotocol.wave.federation.WaveletFederationListener$Factory r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r1 := @parameter0: org.waveprotocol.wave.federation.WaveletFederationListener$Factory;

        r2 := @parameter1: org.waveprotocol.wave.federation.xmpp.XmppDisco;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = null;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.WaveletFederationListener$Factory updatesListenerFactory> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppDisco disco> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.lang.String jid> = r3;

        return;
    }

    public void setManager(org.waveprotocol.wave.federation.xmpp.XmppManager)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppManager;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppManager manager> = r1;

        return;
    }

    public void submitRequest(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)
    {
        byte[] $r17;
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r27;
        org.xmpp.packet.IQ$Type $r1;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r24;
        org.waveprotocol.wave.model.id.WaveletName r6;
        org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta r16;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r32;
        java.util.logging.Logger $r4;
        java.lang.StringBuilder $r3, $r5, $r7, $r28, $r29, $r30;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r22;
        org.waveprotocol.wave.model.id.WaveletId $r23;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r19;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$1 $r21;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2 $r26;
        java.lang.String $r2, $r8, $r10, $r18, $r20, $r25, $r31;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r9;
        org.dom4j.Element $r11, $r12, $r13, $r14, $r15;
        org.xmpp.packet.IQ $r0;

        r9 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r6 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r16 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta;

        r22 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        $r0 = new org.xmpp.packet.IQ;

        $r1 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type set>;

        specialinvoke $r0.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type)>($r1);

        $r2 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke $r0.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r2);

        $r4 = <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Submitting delta to remote server, wavelet ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void info(java.lang.String)>($r8);

        $r10 = r9.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.lang.String jid>;

        virtualinvoke $r0.<org.xmpp.packet.IQ: void setFrom(java.lang.String)>($r10);

        $r11 = virtualinvoke $r0.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("pubsub", "http://jabber.org/protocol/pubsub");

        $r12 = interfaceinvoke $r11.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("publish");

        interfaceinvoke $r12.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("node", "wavelet");

        $r13 = interfaceinvoke $r12.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        $r14 = interfaceinvoke $r13.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("submit-request", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r15 = interfaceinvoke $r14.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("delta");

        $r17 = virtualinvoke r16.<org.waveprotocol.wave.federation.Proto$ProtocolSignedDelta: byte[] toByteArray()>();

        $r18 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(byte[])>($r17);

        interfaceinvoke $r15.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r18);

     label1:
        $r19 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: java.lang.String waveletNameToURI(org.waveprotocol.wave.model.id.WaveletName)>(r6);

        interfaceinvoke $r15.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("wavelet-name", $r20);

     label2:
        goto label4;

     label3:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t encode wavelet name ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r31);

        interfaceinvoke r22.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r32);

        return;

     label4:
        $r21 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$1;

        specialinvoke $r21.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$1: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)>(r9, r22);

        $r24 = r9.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        $r23 = r6.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r25 = virtualinvoke $r23.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r26 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2;

        specialinvoke $r26.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$2: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener,org.waveprotocol.wave.model.id.WaveletName)>(r9, $r0, $r21, r22, r6);

        virtualinvoke $r24.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void discoverRemoteJid(java.lang.String,org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>($r25, $r26);

        return;

        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label1 to label2 with label3;
    }

    public void requestHistory(org.waveprotocol.wave.model.id.WaveletName, java.lang.String, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, long, org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)
    {
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r35;
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener r30;
        byte $b3;
        org.xmpp.packet.IQ$Type $r1;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r33;
        org.waveprotocol.wave.model.id.WaveletName r6;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r40;
        java.util.logging.Logger $r4;
        com.google.protobuf.ByteString $r22, $r25;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11, $r13, $r14, $r37, $r38, $r42, $r43;
        long $l0, $l1, l2;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r27;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3 $r44;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$4 $r45;
        int $i4;
        java.lang.String $r2, $r15, $r17, $r21, $r23, $r24, $r26, $r28, r31, $r34, $r39;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r16;
        org.dom4j.Element $r18, $r19, $r20;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r9, r12;
        org.xmpp.packet.IQ $r41;

        r16 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r6 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r31 := @parameter1: java.lang.String;

        r9 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r12 := @parameter3: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        l2 := @parameter4: long;

        r30 := @parameter5: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener;

        $r41 = new org.xmpp.packet.IQ;

        $r1 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        specialinvoke $r41.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type)>($r1);

        $r2 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke $r41.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r2);

        $r4 = <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Getting history from remote server, wavelet ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (inc) through ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (ex)");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void info(java.lang.String)>($r15);

        $r17 = r16.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.lang.String jid>;

        virtualinvoke $r41.<org.xmpp.packet.IQ: void setFrom(java.lang.String)>($r17);

        $r18 = virtualinvoke $r41.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("pubsub", "http://jabber.org/protocol/pubsub");

        $r19 = interfaceinvoke $r18.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("items");

        interfaceinvoke $r19.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("node", "wavelet");

        $r20 = interfaceinvoke $r19.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("delta-history", "http://waveprotocol.org/protocol/0.2/waveserver");

        $l0 = virtualinvoke r9.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r21 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        interfaceinvoke $r20.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("start-version", $r21);

        $r22 = virtualinvoke r9.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: com.google.protobuf.ByteString getHistoryHash()>();

        $r23 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>($r22);

        interfaceinvoke $r20.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("start-version-hash", $r23);

        $l1 = virtualinvoke r12.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r24 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        interfaceinvoke $r20.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("end-version", $r24);

        $r25 = virtualinvoke r12.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: com.google.protobuf.ByteString getHistoryHash()>();

        $r26 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>($r25);

        interfaceinvoke $r20.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("end-version-hash", $r26);

        $b3 = l2 cmp 0L;

        $i4 = (int) $b3;

        if $i4 <= 0 goto label1;

        $r34 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l2);

        interfaceinvoke $r20.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("response-length-limit", $r34);

     label1:
        $r27 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: java.lang.String waveletNameToURI(org.waveprotocol.wave.model.id.WaveletName)>(r6);

        interfaceinvoke $r20.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("wavelet-name", $r28);

     label2:
        goto label4;

     label3:
        $r35 := @caughtexception;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t encode wavelet name ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r39);

        interfaceinvoke r30.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r40);

        return;

     label4:
        $r44 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3;

        specialinvoke $r44.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$3: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)>(r16, r30);

        $r33 = r16.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        $r45 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$4;

        specialinvoke $r45.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$4: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener,java.lang.String)>(r16, $r41, $r44, r30, r31);

        virtualinvoke $r33.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void discoverRemoteJid(java.lang.String,org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>(r31, $r45);

        return;

        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label1 to label2 with label3;
    }

    public void getDeltaSignerInfo(com.google.protobuf.ByteString, org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)
    {
        org.waveprotocol.wave.model.id.WaveletId $r6;
        long $l0;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r17;
        org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener r20;
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r23;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$5 $r19;
        org.xmpp.packet.IQ$Type $r1;
        java.lang.String $r2, $r4, $r7, $r12, $r15, $r16, $r18, $r27;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r22;
        org.waveprotocol.wave.model.id.WaveletName r5;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$6 $r21;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r28;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r3;
        com.google.protobuf.ByteString r11, $r14;
        org.dom4j.Element $r8, $r9, $r10;
        java.lang.StringBuilder $r24, $r25, $r26;
        org.xmpp.packet.IQ $r0;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r13;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r11 := @parameter0: com.google.protobuf.ByteString;

        r5 := @parameter1: org.waveprotocol.wave.model.id.WaveletName;

        r13 := @parameter2: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        r20 := @parameter3: org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener;

        $r0 = new org.xmpp.packet.IQ;

        $r1 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        specialinvoke $r0.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type)>($r1);

        $r2 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke $r0.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r2);

        $r4 = r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.lang.String jid>;

        virtualinvoke $r0.<org.xmpp.packet.IQ: void setFrom(java.lang.String)>($r4);

        $r6 = r5.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r8 = virtualinvoke $r0.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("pubsub", "http://jabber.org/protocol/pubsub");

        $r9 = interfaceinvoke $r8.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("items");

        interfaceinvoke $r9.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("node", "signer");

        $r10 = interfaceinvoke $r9.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("signer-request", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r12 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>(r11);

        interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("signer-id", $r12);

        $r14 = virtualinvoke r13.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: com.google.protobuf.ByteString getHistoryHash()>();

        $r15 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>($r14);

        interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("history-hash", $r15);

        $l0 = virtualinvoke r13.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("version", $r16);

     label1:
        $r17 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: java.lang.String waveletNameToURI(org.waveprotocol.wave.model.id.WaveletName)>(r5);

        interfaceinvoke $r10.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("wavelet-name", $r18);

     label2:
        goto label4;

     label3:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t encode wavelet name ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r27);

        interfaceinvoke r20.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r28);

        return;

     label4:
        $r19 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$5;

        specialinvoke $r19.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$5: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)>(r3, r20);

        $r22 = r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        $r21 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$6;

        specialinvoke $r21.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$6: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener,java.lang.String)>(r3, $r0, $r19, r20, $r7);

        virtualinvoke $r22.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void discoverRemoteJid(java.lang.String,org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>($r7, $r21);

        return;

        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label1 to label2 with label3;
    }

    public void postSignerInfo(java.lang.String, org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo, org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo r7;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$7 $r9;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$8 $r12;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r3;
        org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener r10;
        org.dom4j.Element $r5, $r6, $r8;
        org.xmpp.packet.IQ$Type $r1;
        java.lang.String $r2, $r4, r11;
        org.waveprotocol.wave.federation.xmpp.XmppDisco $r13;
        org.xmpp.packet.IQ $r0;

        r3 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r11 := @parameter0: java.lang.String;

        r7 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo;

        r10 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener;

        $r0 = new org.xmpp.packet.IQ;

        $r1 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type set>;

        specialinvoke $r0.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type)>($r1);

        $r2 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.lang.String generateUniqueId()>();

        virtualinvoke $r0.<org.xmpp.packet.IQ: void setID(java.lang.String)>($r2);

        $r4 = r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.lang.String jid>;

        virtualinvoke $r0.<org.xmpp.packet.IQ: void setFrom(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("pubsub", "http://jabber.org/protocol/pubsub");

        $r6 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("publish");

        interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("node", "signer");

        $r8 = interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: void protocolSignerInfoToXml(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo,org.dom4j.Element)>(r7, $r8);

        $r9 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$7;

        specialinvoke $r9.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$7: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)>(r3, r10);

        $r13 = r3.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppDisco disco>;

        $r12 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$8;

        specialinvoke $r12.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$8: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,org.xmpp.packet.IQ,org.waveprotocol.wave.federation.xmpp.PacketCallback,org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener,java.lang.String)>(r3, $r0, $r9, r10, r11);

        virtualinvoke $r13.<org.waveprotocol.wave.federation.xmpp.XmppDisco: void discoverRemoteJid(java.lang.String,org.waveprotocol.wave.federation.xmpp.SuccessFailCallback)>(r11, $r12);

        return;
    }

    public void update(org.xmpp.packet.Message, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException $r46;
        org.waveprotocol.wave.federation.WaveletFederationListener $r21;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10 $r10;
        org.xmpp.packet.Message r0;
        java.util.concurrent.atomic.AtomicInteger $r6;
        org.waveprotocol.wave.federation.WaveletFederationListener$Factory $r19;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.id.WaveletName $r17;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r42, $r43, $r44, $r45, $r52;
        com.google.protobuf.ByteString $r30, $r37;
        java.util.List $r4, $r5, $r23, $r24;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r9;
        java.lang.StringBuilder $r38, $r39, $r40, $r47, $r48, $r50;
        com.google.common.collect.ImmutableList$Builder $r22;
        org.waveprotocol.wave.model.id.WaveletId $r18;
        long $l0;
        org.waveprotocol.wave.model.id.IdURIEncoderDecoder $r15;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder $r28, $r31, $r33;
        com.google.common.collect.ImmutableList $r26;
        java.lang.String $r16, $r20, $r29, $r32, $r36, $r41, $r49, $r51;
        java.util.Iterator $r11, $r25;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9 $r7;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r8;
        org.dom4j.Element $r1, $r2, $r3, r13, $r14, $r27, r53;
        java.lang.Object $r12, $r35;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r34;

        r8 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r0 := @parameter0: org.xmpp.packet.Message;

        r9 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Message: org.dom4j.Element getChildElement(java.lang.String,java.lang.String)>("request", "urn:xmpp:receipts");

        $r2 = virtualinvoke r0.<org.xmpp.packet.Message: org.dom4j.Element getChildElement(java.lang.String,java.lang.String)>("event", "http://jabber.org/protocol/pubsub#event");

        if $r2 != null goto label01;

        $r45 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Event element missing from message");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r45);

        return;

     label01:
        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("items");

        if $r3 != null goto label02;

        $r44 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Items element missing from update message");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r44);

        return;

     label02:
        $r4 = interfaceinvoke $r3.<org.dom4j.Element: java.util.List elements(java.lang.String)>("item");

        $r5 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.List toSafeElementList(java.util.List)>($r4);

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        $r43 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("No items included");

        interfaceinvoke r9.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r43);

        return;

     label03:
        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        $r7 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9;

        specialinvoke $r7.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$9: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,java.util.concurrent.atomic.AtomicInteger,org.dom4j.Element,org.xmpp.packet.Message,org.waveprotocol.wave.federation.xmpp.PacketCallback)>(r8, $r6, $r1, r0, r9);

        $r10 = new org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10;

        specialinvoke $r10.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10: void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote,java.lang.Runnable)>(r8, $r7);

        $r11 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.dom4j.Element) $r12;

        $r14 = interfaceinvoke r13.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("wavelet-update");

        if $r14 != null goto label05;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wavelet-update element missing from message: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r41);

        interfaceinvoke $r10.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r42);

        goto label04;

     label05:
        $r15 = <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.model.id.IdURIEncoderDecoder waveletNameCodec>;

        $r16 = interfaceinvoke $r14.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r17 = virtualinvoke $r15.<org.waveprotocol.wave.model.id.IdURIEncoderDecoder: org.waveprotocol.wave.model.id.WaveletName uriToWaveletName(java.lang.String)>($r16);

     label06:
        goto label08;

     label07:
        $r46 := @caughtexception;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t decode wavelet name: ");

        $r49 = interfaceinvoke $r14.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("wavelet-name");

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r51);

        interfaceinvoke $r10.<org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r52);

        goto label04;

     label08:
        $r19 = r8.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.WaveletFederationListener$Factory updatesListenerFactory>;

        $r18 = $r17.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r20 = virtualinvoke $r18.<org.waveprotocol.wave.model.id.WaveletId: java.lang.String getDomain()>();

        $r21 = interfaceinvoke $r19.<org.waveprotocol.wave.federation.WaveletFederationListener$Factory: org.waveprotocol.wave.federation.WaveletFederationListener listenerForDomain(java.lang.String)>($r20);

        $r22 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();

        $r23 = interfaceinvoke $r14.<org.dom4j.Element: java.util.List elements(java.lang.String)>("applied-delta");

        $r24 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: java.util.List toSafeElementList(java.util.List)>($r23);

        $r25 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r35 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r53 = (org.dom4j.Element) $r35;

        $r36 = interfaceinvoke r53.<org.dom4j.Element: java.lang.String getText()>();

        $r37 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>($r36);

        virtualinvoke $r22.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>($r37);

        goto label09;

     label10:
        $r26 = virtualinvoke $r22.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();

        $z2 = virtualinvoke $r26.<com.google.common.collect.ImmutableList: boolean isEmpty()>();

        if $z2 != 0 goto label11;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        interfaceinvoke $r21.<org.waveprotocol.wave.federation.WaveletFederationListener: void waveletDeltaUpdate(org.waveprotocol.wave.model.id.WaveletName,java.util.List,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>($r17, $r26, $r10);

     label11:
        $r27 = interfaceinvoke $r14.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("commit-notice");

        if $r27 == null goto label12;

        $r28 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder newBuilder()>();

        $r29 = interfaceinvoke $r27.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("history-hash");

        $r30 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>($r29);

        $r31 = virtualinvoke $r28.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setHistoryHash(com.google.protobuf.ByteString)>($r30);

        $r32 = interfaceinvoke $r27.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("version");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r32);

        $r33 = virtualinvoke $r31.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setVersion(long)>($l0);

        $r34 = virtualinvoke $r33.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion build()>();

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        interfaceinvoke $r21.<org.waveprotocol.wave.federation.WaveletFederationListener: void waveletCommitUpdate(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback)>($r17, $r34, $r10);

     label12:
        goto label04;

     label13:
        interfaceinvoke $r7.<java.lang.Runnable: void run()>();

        return;

        catch org.waveprotocol.wave.model.id.URIEncoderDecoder$EncodingException from label05 to label06 with label07;
    }

    private void processSubmitResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r32;
        java.util.logging.Logger $r23;
        com.google.protobuf.ByteString $r10;
        java.lang.StringBuilder $r24, $r25, $r26, $r28, $r29, $r30;
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r3;
        org.dom4j.Attribute $r4, $r5, $r6, $r7;
        long $l0, $l1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder $r8;
        int $i2;
        java.lang.String $r9, $r11, $r12, $r13, $r27, $r31;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r18;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, $r15, $r16, $r17, r19, r20, r21, r22;
        org.xmpp.packet.IQ $r1;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion $r14;

        r18 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r0 := @parameter0: org.xmpp.packet.Packet;

        r3 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        r19 = null;

        r20 = null;

        r21 = null;

        r22 = null;

        $r1 = (org.xmpp.packet.IQ) r0;

        $r2 = virtualinvoke $r1.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        if $r2 == null goto label1;

        $r15 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("publish");

        r19 = $r15;

        if $r15 == null goto label1;

        $r16 = interfaceinvoke $r15.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("item");

        r20 = $r16;

        if $r16 == null goto label1;

        $r17 = interfaceinvoke $r16.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("submit-response");

        r21 = $r17;

        if $r17 == null goto label1;

        r22 = interfaceinvoke $r17.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("hashed-version");

     label1:
        if $r2 == null goto label2;

        if r19 == null goto label2;

        if r20 == null goto label2;

        if r21 == null goto label2;

        if r22 == null goto label2;

        $r4 = interfaceinvoke r22.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("history-hash");

        if $r4 == null goto label2;

        $r5 = interfaceinvoke r22.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("version");

        if $r5 == null goto label2;

        $r6 = interfaceinvoke r21.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("application-timestamp");

        if $r6 == null goto label2;

        $r7 = interfaceinvoke r21.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("operations-applied");

        if $r7 != null goto label3;

     label2:
        $r23 = <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected submitResponse to submit request: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.util.logging.Logger: void severe(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid submitResponse: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r31);

        interfaceinvoke r3.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r32);

        return;

     label3:
        $r8 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder newBuilder()>();

        $r9 = interfaceinvoke r22.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("history-hash");

        $r10 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: com.google.protobuf.ByteString decode(java.lang.String)>($r9);

        virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setHistoryHash(com.google.protobuf.ByteString)>($r10);

        $r11 = interfaceinvoke r22.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("version");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11);

        virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setVersion(long)>($l0);

        $r12 = interfaceinvoke r21.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("application-timestamp");

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r12);

        $r13 = interfaceinvoke r21.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("operations-applied");

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        $r14 = virtualinvoke $r8.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion build()>();

        interfaceinvoke r3.<org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener: void onSuccess(int,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,long)>($i2, $r14, $l1);

        return;
    }

    private void processHistoryResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)
    {
        byte[] $r35, $r36;
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener r5;
        byte $b0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r10, $r29;
        com.google.protobuf.ByteString $r13, $r37;
        java.util.List $r15, $r19;
        java.lang.StringBuilder $r7, $r8, $r26, $r27, $r42, $r43;
        org.dom4j.Attribute $r30, $r32;
        long l1, l2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder $r11, $r12, $r14;
        java.util.ArrayList $r4;
        int $i3;
        java.lang.String $r9, $r24, $r28, $r31, $r33, $r34;
        java.util.Iterator $r16, $r20;
        java.lang.NumberFormatException $r38, $r39;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r40;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r1, $r2, $r3, r18, r22;
        java.lang.Object $r17, $r21;
        org.dom4j.QName $r23;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r41;

        r40 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r0 := @parameter0: org.xmpp.packet.Packet;

        r5 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Packet: org.dom4j.Element getElement()>();

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("pubsub");

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("items");

        l1 = -1L;

        l2 = -1L;

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        if $r3 == null goto label17;

        $r15 = interfaceinvoke $r3.<org.dom4j.Element: java.util.List elements()>();

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.dom4j.Element) $r17;

        $r19 = interfaceinvoke r18.<org.dom4j.Element: java.util.List elements()>();

        $r20 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.dom4j.Element) $r21;

        $r23 = interfaceinvoke r22.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r24 = virtualinvoke $r23.<org.dom4j.QName: java.lang.String getName()>();

        $z2 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("applied-delta");

        if $z2 == 0 goto label03;

        $r34 = interfaceinvoke r22.<org.dom4j.Element: java.lang.String getText()>();

        $r35 = virtualinvoke $r34.<java.lang.String: byte[] getBytes()>();

        $r36 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r35);

        $r37 = staticinvoke <com.google.protobuf.ByteString: com.google.protobuf.ByteString copyFrom(byte[])>($r36);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r37);

        goto label14;

     label03:
        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("commit-notice");

        if $z3 == 0 goto label08;

        $r32 = interfaceinvoke r22.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("version");

        if $r32 == null goto label07;

     label04:
        $r33 = interfaceinvoke $r32.<org.dom4j.Attribute: java.lang.String getValue()>();

        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r33);

     label05:
        goto label07;

     label06:
        $r39 := @caughtexception;

        l2 = -1L;

     label07:
        goto label14;

     label08:
        $z4 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("history-truncated");

        if $z4 == 0 goto label13;

        $r30 = interfaceinvoke r22.<org.dom4j.Element: org.dom4j.Attribute attribute(java.lang.String)>("version");

        if $r30 == null goto label12;

     label09:
        $r31 = interfaceinvoke $r30.<org.dom4j.Attribute: java.lang.String getValue()>();

        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r31);

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

        l1 = -1L;

     label12:
        goto label14;

     label13:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad response packet: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r28);

        interfaceinvoke r5.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r29);

     label14:
        goto label02;

     label15:
        goto label01;

     label16:
        goto label18;

     label17:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad response packet: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r9);

        interfaceinvoke r5.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r10);

     label18:
        $b0 = l2 cmp -1L;

        $i3 = (int) $b0;

        if $i3 <= 0 goto label19;

        $r11 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder newBuilder()>();

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setVersion(long)>(l2);

        $r13 = <com.google.protobuf.ByteString: com.google.protobuf.ByteString EMPTY>;

        $r14 = virtualinvoke $r12.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder setHistoryHash(com.google.protobuf.ByteString)>($r13);

        r41 = virtualinvoke $r14.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion$Builder: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion build()>();

        goto label20;

     label19:
        r41 = null;

     label20:
        interfaceinvoke r5.<org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener: void onSuccess(java.util.List,org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion,long)>($r4, r41, l1);

        return;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
    }

    private void processGetSignerResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo $r9;
        org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener r7;
        java.lang.String $r5, $r6, $r14, $r17, $r24;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r15, $r18, $r25;
        java.util.logging.Logger $r11, $r20;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r19;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, $r3, $r4, $r8;
        java.lang.StringBuilder $r10, $r12, $r13, $r21, $r22, $r23;
        org.xmpp.packet.IQ r1;
        org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType $r16;

        r19 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r0 := @parameter0: org.xmpp.packet.Packet;

        r7 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener;

        r1 = (org.xmpp.packet.IQ) r0;

        $r2 = virtualinvoke r1.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("items");

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("signature");

        if $r4 != null goto label1;

        $r11 = <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty getDeltaSignerRequest response: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void severe(java.lang.String)>($r14);

        $r15 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Bad getDeltaSignatureRequest response");

        interfaceinvoke r7.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r15);

        return;

     label1:
        $r5 = interfaceinvoke $r4.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("domain");

        $r6 = interfaceinvoke $r4.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("algorithm");

        if $r5 == null goto label2;

        if $r6 == null goto label2;

        $r8 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("certificate");

        if $r8 != null goto label3;

     label2:
        $r20 = <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad getDeltaSignerRequest response: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.util.logging.Logger: void severe(java.lang.String)>($r24);

        $r25 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("Bad getDeltaSignatureRequest response");

        interfaceinvoke r7.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r25);

        return;

     label3:
        $r9 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppUtil: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo xmlToProtocolSignerInfo(org.dom4j.Element)>($r4);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType: java.lang.String toString()>();

        $r18 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>($r17);

        interfaceinvoke r7.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r18);

        return;

     label6:
        interfaceinvoke r7.<org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener: void onSuccess(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo)>($r9);

        return;

        catch org.waveprotocol.wave.federation.xmpp.XmppUtil$UnknownSignerType from label3 to label4 with label5;
    }

    private void processPostSignerResponse(org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError $r7;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r8;
        org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener r6;
        org.xmpp.packet.Packet r0;
        org.dom4j.Element $r2, $r3, $r4, $r5;
        org.xmpp.packet.IQ r1;

        r8 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r0 := @parameter0: org.xmpp.packet.Packet;

        r6 := @parameter1: org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener;

        r1 = (org.xmpp.packet.IQ) r0;

        $r2 = virtualinvoke r1.<org.xmpp.packet.IQ: org.dom4j.Element getChildElement()>();

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("publish");

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("item");

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("signature-response");

        if $r5 == null goto label1;

        interfaceinvoke r6.<org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener: void onSuccess()>();

        goto label2;

     label1:
        $r7 = staticinvoke <org.waveprotocol.wave.federation.FederationErrors: org.waveprotocol.wave.federation.FederationErrorProto$FederationError badRequest(java.lang.String)>("No valid response");

        interfaceinvoke r6.<org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener: void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>($r7);

     label2:
        return;
    }

    static void access$000(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;
        org.xmpp.packet.Packet r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r1 := @parameter1: org.xmpp.packet.Packet;

        r2 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void processSubmitResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener)>(r1, r2);

        return;
    }

    static org.waveprotocol.wave.federation.xmpp.XmppManager access$100(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager $r1;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: org.waveprotocol.wave.federation.xmpp.XmppManager manager>;

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;
        org.xmpp.packet.Packet r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r1 := @parameter1: org.xmpp.packet.Packet;

        r2 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void processHistoryResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.WaveletFederationProvider$HistoryResponseListener)>(r1, r2);

        return;
    }

    static void access$300(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;
        org.xmpp.packet.Packet r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r1 := @parameter1: org.xmpp.packet.Packet;

        r2 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void processGetSignerResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.WaveletFederationProvider$DeltaSignerInfoResponseListener)>(r1, r2);

        return;
    }

    static void access$400(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, org.xmpp.packet.Packet, org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)
    {
        org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r0;
        org.xmpp.packet.Packet r1;

        r0 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r1 := @parameter1: org.xmpp.packet.Packet;

        r2 := @parameter2: org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener;

        specialinvoke r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: void processPostSignerResponse(org.xmpp.packet.Packet,org.waveprotocol.wave.federation.WaveletFederationProvider$PostSignerInfoResponseListener)>(r1, r2);

        return;
    }

    static java.util.logging.Logger access$500()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: int XMPP_PROVIDER_TIMEOUT> = 30;

        $r0 = class "Lorg/waveprotocol/wave/federation/xmpp/XmppFederationRemote;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
