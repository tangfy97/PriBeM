public class org.apache.lucene.index.Payload extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable
{
    protected byte[] data;
    protected int offset;
    protected int length;

    public void <init>()
    {
        org.apache.lucene.index.Payload r0;

        r0 := @this: org.apache.lucene.index.Payload;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(byte[])
    {
        int $i0;
        org.apache.lucene.index.Payload r0;
        byte[] r1;

        r0 := @this: org.apache.lucene.index.Payload;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.lucene.index.Payload: void <init>(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int)
    {
        org.apache.lucene.index.Payload r0;
        byte[] r2;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.lucene.index.Payload;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label1;

        $i3 = i0 + i1;

        $i2 = lengthof r2;

        if $i3 <= $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        r0.<org.apache.lucene.index.Payload: byte[] data> = r2;

        r0.<org.apache.lucene.index.Payload: int offset> = i0;

        r0.<org.apache.lucene.index.Payload: int length> = i1;

        return;
    }

    public void setData(byte[])
    {
        int $i0;
        org.apache.lucene.index.Payload r0;
        byte[] r1;

        r0 := @this: org.apache.lucene.index.Payload;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.lucene.index.Payload: void setData(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void setData(byte[], int, int)
    {
        org.apache.lucene.index.Payload r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: org.apache.lucene.index.Payload;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.apache.lucene.index.Payload: byte[] data> = r1;

        r0.<org.apache.lucene.index.Payload: int offset> = i0;

        r0.<org.apache.lucene.index.Payload: int length> = i1;

        return;
    }

    public byte[] getData()
    {
        org.apache.lucene.index.Payload r0;
        byte[] $r1;

        r0 := @this: org.apache.lucene.index.Payload;

        $r1 = r0.<org.apache.lucene.index.Payload: byte[] data>;

        return $r1;
    }

    public int getOffset()
    {
        int $i0;
        org.apache.lucene.index.Payload r0;

        r0 := @this: org.apache.lucene.index.Payload;

        $i0 = r0.<org.apache.lucene.index.Payload: int offset>;

        return $i0;
    }

    public int length()
    {
        int $i0;
        org.apache.lucene.index.Payload r0;

        r0 := @this: org.apache.lucene.index.Payload;

        $i0 = r0.<org.apache.lucene.index.Payload: int length>;

        return $i0;
    }

    public byte byteAt(int)
    {
        byte[] $r2;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        org.apache.lucene.index.Payload r1;
        byte $b4;
        int i0, $i1, $i2, $i3;

        r1 := @this: org.apache.lucene.index.Payload;

        i0 := @parameter0: int;

        if 0 > i0 goto label1;

        $i1 = r1.<org.apache.lucene.index.Payload: int length>;

        if i0 >= $i1 goto label1;

        $r2 = r1.<org.apache.lucene.index.Payload: byte[] data>;

        $i2 = r1.<org.apache.lucene.index.Payload: int offset>;

        $i3 = $i2 + i0;

        $b4 = $r2[$i3];

        return $b4;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r0;
    }

    public byte[] toByteArray()
    {
        org.apache.lucene.index.Payload r0;
        byte[] r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.index.Payload;

        $i0 = r0.<org.apache.lucene.index.Payload: int length>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.apache.lucene.index.Payload: byte[] data>;

        $i2 = r0.<org.apache.lucene.index.Payload: int offset>;

        $i1 = r0.<org.apache.lucene.index.Payload: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, r1, 0, $i1);

        return r1;
    }

    public void copyTo(byte[], int)
    {
        byte[] r1, $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        org.apache.lucene.index.Payload r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.lucene.index.Payload;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i3 = r0.<org.apache.lucene.index.Payload: int length>;

        $i1 = lengthof r1;

        $i2 = $i1 + i0;

        if $i3 <= $i2 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<org.apache.lucene.index.Payload: byte[] data>;

        $i5 = r0.<org.apache.lucene.index.Payload: int offset>;

        $i4 = r0.<org.apache.lucene.index.Payload: int length>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, r1, i0, $i4);

        return;
    }

    public java.lang.Object clone()
    {
        byte[] $r2, $r3, $r4, $r6;
        java.lang.RuntimeException $r8;
        java.lang.CloneNotSupportedException $r7;
        org.apache.lucene.index.Payload r0, r9;
        int $i0, $i1, $i2;
        java.lang.Object $r1, $r5;

        r0 := @this: org.apache.lucene.index.Payload;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r9 = (org.apache.lucene.index.Payload) $r1;

        $i0 = r0.<org.apache.lucene.index.Payload: int offset>;

        if $i0 != 0 goto label2;

        $i2 = r0.<org.apache.lucene.index.Payload: int length>;

        $r3 = r0.<org.apache.lucene.index.Payload: byte[] data>;

        $i1 = lengthof $r3;

        if $i2 != $i1 goto label2;

        $r4 = r0.<org.apache.lucene.index.Payload: byte[] data>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (byte[]) $r5;

        r9.<org.apache.lucene.index.Payload: byte[] data> = $r6;

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<org.apache.lucene.index.Payload: byte[] toByteArray()>();

        r9.<org.apache.lucene.index.Payload: byte[] data> = $r2;

        r9.<org.apache.lucene.index.Payload: int offset> = 0;

     label3:
        return r9;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label3 with label4;
    }

    public boolean equals(java.lang.Object)
    {
        byte[] $r3, $r4;
        org.apache.lucene.index.Payload r1, r2;
        byte $b7, $b8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i9, $i10, $i11;
        boolean $z0;
        java.lang.Object r0;

        r1 := @this: org.apache.lucene.index.Payload;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.apache.lucene.index.Payload;

        if $z0 == 0 goto label6;

        r2 = (org.apache.lucene.index.Payload) r0;

        $i1 = r1.<org.apache.lucene.index.Payload: int length>;

        $i0 = r2.<org.apache.lucene.index.Payload: int length>;

        if $i1 != $i0 goto label5;

        i9 = 0;

     label2:
        $i2 = r1.<org.apache.lucene.index.Payload: int length>;

        if i9 >= $i2 goto label4;

        $r3 = r1.<org.apache.lucene.index.Payload: byte[] data>;

        $i3 = r1.<org.apache.lucene.index.Payload: int offset>;

        $i4 = $i3 + i9;

        $b8 = $r3[$i4];

        $r4 = r2.<org.apache.lucene.index.Payload: byte[] data>;

        $i5 = r2.<org.apache.lucene.index.Payload: int offset>;

        $i6 = $i5 + i9;

        $b7 = $r4[$i6];

        $i10 = (int) $b8;

        $i11 = (int) $b7;

        if $i10 == $i11 goto label3;

        return 0;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        return 0;
    }

    public int hashCode()
    {
        org.apache.lucene.index.Payload r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.lucene.index.Payload;

        $r1 = r0.<org.apache.lucene.index.Payload: byte[] data>;

        $i3 = r0.<org.apache.lucene.index.Payload: int offset>;

        $i1 = r0.<org.apache.lucene.index.Payload: int offset>;

        $i0 = r0.<org.apache.lucene.index.Payload: int length>;

        $i2 = $i1 + $i0;

        $i4 = staticinvoke <org.apache.lucene.util.ArrayUtil: int hashCode(byte[],int,int)>($r1, $i3, $i2);

        return $i4;
    }
}
