public class org.waveprotocol.wave.client.editor.event.EditorEventImpl extends org.waveprotocol.wave.client.common.util.SignalEventImpl implements org.waveprotocol.wave.client.editor.event.EditorEvent
{
    public static org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory FACTORY;
    private boolean shouldAllowDefault;
    private org.waveprotocol.wave.client.editor.content.ContentPoint caret;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventImpl;

        specialinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEventImpl: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl: boolean shouldAllowDefault> = 0;

        return;
    }

    public void allowBrowserDefault()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventImpl;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl: boolean shouldAllowDefault> = 1;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.ContentPoint getCaret()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl r0;
        org.waveprotocol.wave.client.editor.content.ContentPoint $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl: org.waveprotocol.wave.client.editor.content.ContentPoint caret>;

        return $r1;
    }

    public void setCaret(org.waveprotocol.wave.client.editor.content.ContentPoint)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl r0;
        org.waveprotocol.wave.client.editor.content.ContentPoint r1;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentPoint;

        r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl: org.waveprotocol.wave.client.editor.content.ContentPoint caret> = r1;

        return;
    }

    public boolean shouldAllowBrowserDefault()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventImpl;

        $z0 = r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl: boolean shouldAllowDefault>;

        return $z0;
    }

    void <init>(org.waveprotocol.wave.client.editor.event.EditorEventImpl$1)
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl$1 r1;
        org.waveprotocol.wave.client.editor.event.EditorEventImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.event.EditorEventImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.event.EditorEventImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.event.EditorEventImpl$1 $r0;

        $r0 = new org.waveprotocol.wave.client.editor.event.EditorEventImpl$1;

        specialinvoke $r0.<org.waveprotocol.wave.client.editor.event.EditorEventImpl$1: void <init>()>();

        <org.waveprotocol.wave.client.editor.event.EditorEventImpl: org.waveprotocol.wave.client.common.util.SignalEventImpl$SignalEventFactory FACTORY> = $r0;

        return;
    }
}
