public class org.apache.zookeeper.server.upgrade.DataTreeV1 extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private java.util.concurrent.ConcurrentHashMap nodes;
    private org.apache.zookeeper.server.WatchManager dataWatches;
    private org.apache.zookeeper.server.WatchManager childWatches;
    private java.util.Map ephemerals;
    private org.apache.zookeeper.server.upgrade.DataNodeV1 root;
    public volatile long lastProcessedZxid;
    int scount;
    public boolean initialized;

    public java.util.Map getEphemeralsMap()
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.Map $r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        return $r1;
    }

    public void setEphemeralsMap(java.util.Map)
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.Map r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals> = r1;

        return;
    }

    public java.util.HashSet getEphemerals(long)
    {
        java.lang.Throwable $r7;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        long l0;
        java.util.HashSet r4, $r6, r8;
        java.lang.Long $r2;
        java.util.Map $r1;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.util.HashSet) $r3;

        if r4 != null goto label1;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        return $r6;

     label1:
        entermonitor r4;

     label2:
        $r5 = virtualinvoke r4.<java.util.HashSet: java.lang.Object clone()>();

        r8 = (java.util.HashSet) $r5;

        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        exitmonitor r4;

     label5:
        throw $r7;

     label6:
        return r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Collection getSessions()
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.Set $r2;
        java.util.Map $r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public org.apache.zookeeper.server.upgrade.DataNodeV1 getNode(java.lang.String)
    {
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r4;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r3;

        return $r4;
    }

    public void <init>()
    {
        byte[] $r7;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r4, $r9, $r11;
        org.apache.zookeeper.data.StatPersistedV1 $r6;
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r5, $r8, $r10;
        org.apache.zookeeper.server.WatchManager $r2, $r3;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes> = $r1;

        $r2 = new org.apache.zookeeper.server.WatchManager;

        specialinvoke $r2.<org.apache.zookeeper.server.WatchManager: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches> = $r2;

        $r3 = new org.apache.zookeeper.server.WatchManager;

        specialinvoke $r3.<org.apache.zookeeper.server.WatchManager: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager childWatches> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals> = $r4;

        $r5 = new org.apache.zookeeper.server.upgrade.DataNodeV1;

        $r7 = newarray (byte)[0];

        $r6 = new org.apache.zookeeper.data.StatPersistedV1;

        specialinvoke $r6.<org.apache.zookeeper.data.StatPersistedV1: void <init>()>();

        specialinvoke $r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: void <init>(org.apache.zookeeper.server.upgrade.DataNodeV1,byte[],java.util.List,org.apache.zookeeper.data.StatPersistedV1)>(null, $r7, null, $r6);

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root> = $r5;

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid> = 0L;

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: boolean initialized> = 0;

        $r9 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r8 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root>;

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("", $r8);

        $r11 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r10 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root>;

        virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("/", $r10);

        return;
    }

    public static void copyStatPersisted(org.apache.zookeeper.data.StatPersistedV1, org.apache.zookeeper.data.StatPersistedV1)
    {
        long $l1, $l3, $l4, $l5, $l7;
        org.apache.zookeeper.data.StatPersistedV1 r0, r1;
        int $i0, $i2, $i6;

        r1 := @parameter0: org.apache.zookeeper.data.StatPersistedV1;

        r0 := @parameter1: org.apache.zookeeper.data.StatPersistedV1;

        $i0 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: int getAversion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setAversion(int)>($i0);

        $l1 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getCtime()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setCtime(long)>($l1);

        $i2 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: int getCversion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setCversion(int)>($i2);

        $l3 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getCzxid()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setCzxid(long)>($l3);

        $l4 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getMtime()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setMtime(long)>($l4);

        $l5 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getMzxid()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setMzxid(long)>($l5);

        $i6 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: int getVersion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setVersion(int)>($i6);

        $l7 = virtualinvoke r1.<org.apache.zookeeper.data.StatPersistedV1: long getEphemeralOwner()>();

        virtualinvoke r0.<org.apache.zookeeper.data.StatPersistedV1: void setEphemeralOwner(long)>($l7);

        return;
    }

    public static void copyStat(org.apache.zookeeper.data.Stat, org.apache.zookeeper.data.Stat)
    {
        long $l1, $l3, $l4, $l5, $l7;
        org.apache.zookeeper.data.Stat r0, r1;
        int $i0, $i2, $i6, $i8, $i9;

        r1 := @parameter0: org.apache.zookeeper.data.Stat;

        r0 := @parameter1: org.apache.zookeeper.data.Stat;

        $i0 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: int getAversion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setAversion(int)>($i0);

        $l1 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: long getCtime()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setCtime(long)>($l1);

        $i2 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: int getCversion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setCversion(int)>($i2);

        $l3 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: long getCzxid()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setCzxid(long)>($l3);

        $l4 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: long getMtime()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setMtime(long)>($l4);

        $l5 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: long getMzxid()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setMzxid(long)>($l5);

        $i6 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: int getVersion()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setVersion(int)>($i6);

        $l7 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: long getEphemeralOwner()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setEphemeralOwner(long)>($l7);

        $i8 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: int getDataLength()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setDataLength(int)>($i8);

        $i9 = virtualinvoke r1.<org.apache.zookeeper.data.Stat: int getNumChildren()>();

        virtualinvoke r0.<org.apache.zookeeper.data.Stat: void setNumChildren(int)>($i9);

        return;
    }

    public java.lang.String createNode(java.lang.String, byte[], java.util.List, long, long, long) throws org.apache.zookeeper.KeeperException$NoNodeException, org.apache.zookeeper.KeeperException$NodeExistsException
    {
        byte[] r12;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r4;
        org.apache.zookeeper.KeeperException$NoNodeException $r28;
        byte $b6;
        java.lang.Long $r21, $r26;
        java.util.Map $r20, $r25;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap $r5, $r15;
        org.apache.zookeeper.data.StatPersistedV1 $r3, $r9, $r10;
        java.util.List r13;
        java.lang.Throwable $r29, $r30;
        long l2, l3, l4;
        java.util.HashSet $r8, $r14, r23, $r24, r31;
        int $i0, $i1, $i5, i7;
        java.lang.String r0, $r1, $r2, $r32;
        org.apache.zookeeper.KeeperException$NodeExistsException $r27;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r7, $r11;
        org.apache.zookeeper.server.WatchManager $r17, $r18;
        org.apache.zookeeper.Watcher$Event$EventType $r16, $r19;
        java.lang.Object $r6, $r22;

        r4 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r0 := @parameter0: java.lang.String;

        r12 := @parameter1: byte[];

        r13 := @parameter2: java.util.List;

        l4 := @parameter3: long;

        l3 := @parameter4: long;

        l2 := @parameter5: long;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r3 = new org.apache.zookeeper.data.StatPersistedV1;

        specialinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void <init>()>();

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setCtime(long)>(l2);

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setMtime(long)>(l2);

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setCzxid(long)>(l3);

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setMzxid(long)>(l3);

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setVersion(int)>(0);

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setAversion(int)>(0);

        virtualinvoke $r3.<org.apache.zookeeper.data.StatPersistedV1: void setEphemeralOwner(long)>(l4);

        $r5 = r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r7 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r6;

        if r7 != null goto label01;

        $r28 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r28.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r28;

     label01:
        entermonitor r7;

     label02:
        $r8 = r7.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        $z0 = virtualinvoke $r8.<java.util.HashSet: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label03;

        $r27 = new org.apache.zookeeper.KeeperException$NodeExistsException;

        specialinvoke $r27.<org.apache.zookeeper.KeeperException$NodeExistsException: void <init>()>();

        throw $r27;

     label03:
        $r9 = r7.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $i5 = virtualinvoke $r9.<org.apache.zookeeper.data.StatPersistedV1: int getCversion()>();

        i7 = $i5 + 1;

        $r10 = r7.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r10.<org.apache.zookeeper.data.StatPersistedV1: void setCversion(int)>(i7);

        $r11 = new org.apache.zookeeper.server.upgrade.DataNodeV1;

        specialinvoke $r11.<org.apache.zookeeper.server.upgrade.DataNodeV1: void <init>(org.apache.zookeeper.server.upgrade.DataNodeV1,byte[],java.util.List,org.apache.zookeeper.data.StatPersistedV1)>(r7, r12, r13, $r3);

        $r14 = r7.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r2);

        $r15 = r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r11);

        $b6 = l4 cmp 0L;

        if $b6 == 0 goto label09;

        $r20 = r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r22 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        r31 = (java.util.HashSet) $r22;

        if r31 != null goto label04;

        $r24 = new java.util.HashSet;

        specialinvoke $r24.<java.util.HashSet: void <init>()>();

        r31 = $r24;

        $r25 = r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r24);

     label04:
        r23 = r31;

        entermonitor r31;

     label05:
        virtualinvoke r31.<java.util.HashSet: boolean add(java.lang.Object)>(r0);

        exitmonitor r31;

     label06:
        goto label09;

     label07:
        $r30 := @caughtexception;

        exitmonitor r23;

     label08:
        throw $r30;

     label09:
        exitmonitor r7;

     label10:
        goto label13;

     label11:
        $r29 := @caughtexception;

        exitmonitor r7;

     label12:
        throw $r29;

     label13:
        $r17 = r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches>;

        $r16 = <org.apache.zookeeper.Watcher$Event$EventType: org.apache.zookeeper.Watcher$Event$EventType NodeCreated>;

        virtualinvoke $r17.<org.apache.zookeeper.server.WatchManager: java.util.Set triggerWatch(java.lang.String,org.apache.zookeeper.Watcher$Event$EventType)>(r0, $r16);

        $r18 = r4.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager childWatches>;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label14;

        $r32 = "/";

        goto label15;

     label14:
        $r32 = $r1;

     label15:
        $r19 = <org.apache.zookeeper.Watcher$Event$EventType: org.apache.zookeeper.Watcher$Event$EventType NodeChildrenChanged>;

        virtualinvoke $r18.<org.apache.zookeeper.server.WatchManager: java.util.Set triggerWatch(java.lang.String,org.apache.zookeeper.Watcher$Event$EventType)>($r32, $r19);

        return r0;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void deleteNode(java.lang.String) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r3;
        org.apache.zookeeper.KeeperException$NoNodeException $r26, $r27;
        byte $b5;
        java.lang.Long $r23;
        java.util.Map $r22;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r4, $r7, $r8;
        java.util.Set $r17;
        org.apache.zookeeper.data.StatPersistedV1 $r12, $r13, $r14;
        java.lang.Throwable $r28, $r29;
        long $l4;
        java.util.HashSet $r11, r25;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r1, $r2, $r30;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r6, r10;
        org.apache.zookeeper.server.WatchManager $r16, $r19, $r20;
        org.apache.zookeeper.Watcher$Event$EventType $r15, $r18, $r21;
        java.lang.Object $r5, $r9, $r24;

        r3 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r5;

        if r6 != null goto label01;

        $r27 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r27.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r27;

     label01:
        $r7 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        $r8 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r10 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r9;

        if r10 != null goto label02;

        $r26 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r26.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r26;

     label02:
        entermonitor r10;

     label03:
        $r11 = r10.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        virtualinvoke $r11.<java.util.HashSet: boolean remove(java.lang.Object)>($r2);

        $r13 = r10.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $r12 = r10.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $i2 = virtualinvoke $r12.<org.apache.zookeeper.data.StatPersistedV1: int getCversion()>();

        $i3 = $i2 + 1;

        virtualinvoke $r13.<org.apache.zookeeper.data.StatPersistedV1: void setCversion(int)>($i3);

        $r14 = r6.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l4 = virtualinvoke $r14.<org.apache.zookeeper.data.StatPersistedV1: long getEphemeralOwner()>();

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label08;

        $r22 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r24 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        r25 = (java.util.HashSet) $r24;

        if r25 == null goto label08;

        entermonitor r25;

     label04:
        virtualinvoke r25.<java.util.HashSet: boolean remove(java.lang.Object)>(r0);

        exitmonitor r25;

     label05:
        goto label08;

     label06:
        $r29 := @caughtexception;

        exitmonitor r25;

     label07:
        throw $r29;

     label08:
        r6.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 parent> = null;

        exitmonitor r10;

     label09:
        goto label12;

     label10:
        $r28 := @caughtexception;

        exitmonitor r10;

     label11:
        throw $r28;

     label12:
        $r16 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches>;

        $r15 = <org.apache.zookeeper.Watcher$Event$EventType: org.apache.zookeeper.Watcher$Event$EventType NodeDeleted>;

        $r17 = virtualinvoke $r16.<org.apache.zookeeper.server.WatchManager: java.util.Set triggerWatch(java.lang.String,org.apache.zookeeper.Watcher$Event$EventType)>(r0, $r15);

        $r19 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager childWatches>;

        $r18 = <org.apache.zookeeper.Watcher$Event$EventType: org.apache.zookeeper.Watcher$Event$EventType NodeDeleted>;

        virtualinvoke $r19.<org.apache.zookeeper.server.WatchManager: java.util.Set triggerWatch(java.lang.String,org.apache.zookeeper.Watcher$Event$EventType,java.util.Set)>(r0, $r18, $r17);

        $r20 = r3.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager childWatches>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label13;

        $r30 = "/";

        goto label14;

     label13:
        $r30 = $r1;

     label14:
        $r21 = <org.apache.zookeeper.Watcher$Event$EventType: org.apache.zookeeper.Watcher$Event$EventType NodeChildrenChanged>;

        virtualinvoke $r20.<org.apache.zookeeper.server.WatchManager: java.util.Set triggerWatch(java.lang.String,org.apache.zookeeper.Watcher$Event$EventType)>($r30, $r21);

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.zookeeper.data.Stat setData(java.lang.String, byte[], int, long, long) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.lang.Throwable $r13;
        byte[] r6;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r1;
        long l0, l1;
        org.apache.zookeeper.data.Stat $r0;
        org.apache.zookeeper.KeeperException$NoNodeException $r12;
        int i2;
        java.lang.String r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.zookeeper.data.StatPersistedV1 $r7, $r8, $r9;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r5;
        org.apache.zookeeper.server.WatchManager $r11;
        org.apache.zookeeper.Watcher$Event$EventType $r10;
        java.lang.Object $r4;

        r1 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: byte[];

        i2 := @parameter2: int;

        l1 := @parameter3: long;

        l0 := @parameter4: long;

        $r0 = new org.apache.zookeeper.data.Stat;

        specialinvoke $r0.<org.apache.zookeeper.data.Stat: void <init>()>();

        $r3 = r1.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r4;

        if r5 != null goto label1;

        $r12 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r12.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r12;

     label1:
        entermonitor r5;

     label2:
        r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data> = r6;

        $r7 = r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r7.<org.apache.zookeeper.data.StatPersistedV1: void setMtime(long)>(l0);

        $r8 = r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r8.<org.apache.zookeeper.data.StatPersistedV1: void setMzxid(long)>(l1);

        $r9 = r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r9.<org.apache.zookeeper.data.StatPersistedV1: void setVersion(int)>(i2);

        virtualinvoke r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: void copyStat(org.apache.zookeeper.data.Stat)>($r0);

        exitmonitor r5;

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        exitmonitor r5;

     label5:
        throw $r13;

     label6:
        $r11 = r1.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches>;

        $r10 = <org.apache.zookeeper.Watcher$Event$EventType: org.apache.zookeeper.Watcher$Event$EventType NodeDataChanged>;

        virtualinvoke $r11.<org.apache.zookeeper.server.WatchManager: java.util.Set triggerWatch(java.lang.String,org.apache.zookeeper.Watcher$Event$EventType)>(r2, $r10);

        return $r0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public byte[] getData(java.lang.String, org.apache.zookeeper.data.Stat, org.apache.zookeeper.Watcher) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.lang.Throwable $r10;
        byte[] $r7;
        org.apache.zookeeper.Watcher r6;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.zookeeper.data.Stat r5;
        org.apache.zookeeper.KeeperException$NoNodeException $r9;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r4;
        org.apache.zookeeper.server.WatchManager $r8;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.zookeeper.data.Stat;

        r6 := @parameter2: org.apache.zookeeper.Watcher;

        $r2 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r3;

        if r4 != null goto label1;

        $r9 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r9.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r9;

     label1:
        entermonitor r4;

     label2:
        virtualinvoke r4.<org.apache.zookeeper.server.upgrade.DataNodeV1: void copyStat(org.apache.zookeeper.data.Stat)>(r5);

        if r6 == null goto label3;

        $r8 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches>;

        virtualinvoke $r8.<org.apache.zookeeper.server.WatchManager: void addWatch(java.lang.String,org.apache.zookeeper.Watcher)>(r1, r6);

     label3:
        $r7 = r4.<org.apache.zookeeper.server.upgrade.DataNodeV1: byte[] data>;

        exitmonitor r4;

     label4:
        return $r7;

     label5:
        $r10 := @caughtexception;

        exitmonitor r4;

     label6:
        throw $r10;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.apache.zookeeper.data.Stat statNode(java.lang.String, org.apache.zookeeper.Watcher) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.lang.Throwable $r9;
        org.apache.zookeeper.Watcher r6;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.zookeeper.data.Stat $r0;
        org.apache.zookeeper.KeeperException$NoNodeException $r7;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r5;
        org.apache.zookeeper.server.WatchManager $r8;
        java.lang.Object $r4;
        java.lang.String r2;

        r1 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.zookeeper.Watcher;

        $r0 = new org.apache.zookeeper.data.Stat;

        specialinvoke $r0.<org.apache.zookeeper.data.Stat: void <init>()>();

        $r3 = r1.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r4;

        if r6 == null goto label1;

        $r8 = r1.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches>;

        virtualinvoke $r8.<org.apache.zookeeper.server.WatchManager: void addWatch(java.lang.String,org.apache.zookeeper.Watcher)>(r2, r6);

     label1:
        if r5 != null goto label2;

        $r7 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r7.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r7;

     label2:
        entermonitor r5;

     label3:
        virtualinvoke r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: void copyStat(org.apache.zookeeper.data.Stat)>($r0);

        exitmonitor r5;

     label4:
        return $r0;

     label5:
        $r9 := @caughtexception;

        exitmonitor r5;

     label6:
        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.ArrayList getChildren(java.lang.String, org.apache.zookeeper.data.Stat, org.apache.zookeeper.Watcher) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.lang.Throwable $r10;
        org.apache.zookeeper.Watcher r7;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.zookeeper.data.Stat r11;
        org.apache.zookeeper.KeeperException$NoNodeException $r9;
        java.util.ArrayList $r5;
        java.util.HashSet $r6;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r4;
        org.apache.zookeeper.server.WatchManager $r8;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: org.apache.zookeeper.data.Stat;

        r7 := @parameter2: org.apache.zookeeper.Watcher;

        $r2 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r3;

        if r4 != null goto label1;

        $r9 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r9.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r9;

     label1:
        entermonitor r4;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r4.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        if r7 == null goto label3;

        $r8 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager childWatches>;

        virtualinvoke $r8.<org.apache.zookeeper.server.WatchManager: void addWatch(java.lang.String,org.apache.zookeeper.Watcher)>(r1, r7);

     label3:
        exitmonitor r4;

     label4:
        return $r5;

     label5:
        $r10 := @caughtexception;

        exitmonitor r4;

     label6:
        throw $r10;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public org.apache.zookeeper.data.Stat setACL(java.lang.String, java.util.List, int) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.lang.Throwable $r9;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.zookeeper.data.Stat $r0;
        org.apache.zookeeper.KeeperException$NoNodeException $r8;
        org.apache.zookeeper.data.StatPersistedV1 $r6;
        java.util.List r7;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r5;
        int i0;
        java.lang.Object $r4;
        java.lang.String r2;

        r1 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r2 := @parameter0: java.lang.String;

        r7 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        $r0 = new org.apache.zookeeper.data.Stat;

        specialinvoke $r0.<org.apache.zookeeper.data.Stat: void <init>()>();

        $r3 = r1.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r4;

        if r5 != null goto label1;

        $r8 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r8.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r8;

     label1:
        entermonitor r5;

     label2:
        $r6 = r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        virtualinvoke $r6.<org.apache.zookeeper.data.StatPersistedV1: void setAversion(int)>(i0);

        r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl> = r7;

        virtualinvoke r5.<org.apache.zookeeper.server.upgrade.DataNodeV1: void copyStat(org.apache.zookeeper.data.Stat)>($r0);

        exitmonitor r5;

     label3:
        return $r0;

     label4:
        $r9 := @caughtexception;

        exitmonitor r5;

     label5:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.List getACL(java.lang.String, org.apache.zookeeper.data.Stat) throws org.apache.zookeeper.KeeperException$NoNodeException
    {
        java.lang.Throwable $r9;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.zookeeper.data.Stat r5;
        org.apache.zookeeper.KeeperException$NoNodeException $r8;
        java.util.ArrayList $r6;
        java.util.List $r7;
        org.apache.zookeeper.server.upgrade.DataNodeV1 r4;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.zookeeper.data.Stat;

        $r2 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r3;

        if r4 != null goto label1;

        $r8 = new org.apache.zookeeper.KeeperException$NoNodeException;

        specialinvoke $r8.<org.apache.zookeeper.KeeperException$NoNodeException: void <init>()>();

        throw $r8;

     label1:
        entermonitor r4;

     label2:
        virtualinvoke r4.<org.apache.zookeeper.server.upgrade.DataNodeV1: void copyStat(org.apache.zookeeper.data.Stat)>(r5);

        $r6 = new java.util.ArrayList;

        $r7 = r4.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.List acl>;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        exitmonitor r4;

     label3:
        return $r6;

     label4:
        $r9 := @caughtexception;

        exitmonitor r4;

     label5:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult processTxn(org.apache.zookeeper.txn.TxnHeader, org.apache.jute.Record)
    {
        byte[] $r18, $r31;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r2;
        byte $b6;
        org.apache.zookeeper.txn.CreateTxn r46;
        org.apache.jute.Record r3;
        java.lang.StringBuilder $r6, $r8, $r14, $r16, $r22, $r24, $r27, $r29, $r38, $r39, $r48, $r49, $r50, $r51, $r52;
        org.apache.zookeeper.txn.DeleteTxn r20;
        long $l0, $l2, $l4, $l5, $l10, $l11, $l12, $l13, $l15, $l16, $l17;
        java.lang.String $r7, $r9, $r15, $r17, $r23, $r25, $r28, $r30, $r33, $r40, r45;
        org.apache.zookeeper.txn.TxnHeader r1;
        org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult $r47;
        org.apache.zookeeper.txn.ErrorTxn r34;
        org.apache.zookeeper.txn.SetDataTxn r12;
        org.apache.zookeeper.data.Stat $r11, $r19;
        boolean $z0, $z1;
        java.util.List $r10, $r32;
        org.apache.zookeeper.txn.SetACLTxn r4;
        org.apache.zookeeper.KeeperException$Code $r41, $r42, $r43, $r44;
        int $i1, $i3, $i7, $i8, $i9, $i14, $i18;
        org.slf4j.Logger $r37;
        org.apache.zookeeper.KeeperException $r35;

        r2 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: org.apache.zookeeper.txn.TxnHeader;

        r3 := @parameter1: org.apache.jute.Record;

        $r47 = new org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult;

        specialinvoke $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: void <init>()>();

        r45 = "";

     label01:
        $l0 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: long clientId> = $l0;

        $i1 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: int getCxid()>();

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: int cxid> = $i1;

        $l2 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: long zxid> = $l2;

        $i3 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: int type> = $i3;

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: int err> = 0;

        $l5 = $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: long zxid>;

        $l4 = r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid>;

        $b6 = $l5 cmp $l4;

        $i18 = (int) $b6;

        if $i18 <= 0 goto label02;

        $l16 = $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: long zxid>;

        r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: long lastProcessedZxid> = $l16;

     label02:
        $i7 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        tableswitch($i7)
        {
            case -11: goto label09;
            case -10: goto label11;
            case -9: goto label11;
            case -8: goto label11;
            case -7: goto label11;
            case -6: goto label11;
            case -5: goto label11;
            case -4: goto label11;
            case -3: goto label11;
            case -2: goto label11;
            case -1: goto label10;
            case 0: goto label11;
            case 1: goto label03;
            case 2: goto label06;
            case 3: goto label11;
            case 4: goto label11;
            case 5: goto label07;
            case 6: goto label11;
            case 7: goto label08;
            default: goto label11;
        };

     label03:
        r46 = (org.apache.zookeeper.txn.CreateTxn) r3;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Create transaction for ");

        $r28 = virtualinvoke r46.<org.apache.zookeeper.txn.CreateTxn: java.lang.String getPath()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r45 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke r46.<org.apache.zookeeper.txn.CreateTxn: java.lang.String getPath()>();

        $r31 = virtualinvoke r46.<org.apache.zookeeper.txn.CreateTxn: byte[] getData()>();

        $r32 = virtualinvoke r46.<org.apache.zookeeper.txn.CreateTxn: java.util.List getAcl()>();

        $z0 = virtualinvoke r46.<org.apache.zookeeper.txn.CreateTxn: boolean getEphemeral()>();

        if $z0 == 0 goto label04;

        $l17 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        goto label05;

     label04:
        $l17 = 0L;

     label05:
        $l12 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $l13 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getTime()>();

        virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.lang.String createNode(java.lang.String,byte[],java.util.List,long,long,long)>($r30, $r31, $r32, $l17, $l12, $l13);

        $r33 = virtualinvoke r46.<org.apache.zookeeper.txn.CreateTxn: java.lang.String getPath()>();

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: java.lang.String path> = $r33;

        goto label11;

     label06:
        r20 = (org.apache.zookeeper.txn.DeleteTxn) r3;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delete transaction for ");

        $r23 = virtualinvoke r20.<org.apache.zookeeper.txn.DeleteTxn: java.lang.String getPath()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        r45 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r20.<org.apache.zookeeper.txn.DeleteTxn: java.lang.String getPath()>();

        virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: void deleteNode(java.lang.String)>($r25);

        goto label11;

     label07:
        r12 = (org.apache.zookeeper.txn.SetDataTxn) r3;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set data for  transaction for ");

        $r15 = virtualinvoke r12.<org.apache.zookeeper.txn.SetDataTxn: java.lang.String getPath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r45 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke r12.<org.apache.zookeeper.txn.SetDataTxn: java.lang.String getPath()>();

        $r18 = virtualinvoke r12.<org.apache.zookeeper.txn.SetDataTxn: byte[] getData()>();

        $i9 = virtualinvoke r12.<org.apache.zookeeper.txn.SetDataTxn: int getVersion()>();

        $l10 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        $l11 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getTime()>();

        $r19 = virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.data.Stat setData(java.lang.String,byte[],int,long,long)>($r17, $r18, $i9, $l10, $l11);

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: org.apache.zookeeper.data.Stat stat> = $r19;

        goto label11;

     label08:
        r4 = (org.apache.zookeeper.txn.SetACLTxn) r3;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set ACL for  transaction for ");

        $r7 = virtualinvoke r4.<org.apache.zookeeper.txn.SetACLTxn: java.lang.String getPath()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r45 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r4.<org.apache.zookeeper.txn.SetACLTxn: java.lang.String getPath()>();

        $r10 = virtualinvoke r4.<org.apache.zookeeper.txn.SetACLTxn: java.util.List getAcl()>();

        $i8 = virtualinvoke r4.<org.apache.zookeeper.txn.SetACLTxn: int getVersion()>();

        $r11 = virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.data.Stat setACL(java.lang.String,java.util.List,int)>($r9, $r10, $i8);

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: org.apache.zookeeper.data.Stat stat> = $r11;

        goto label11;

     label09:
        $l15 = virtualinvoke r1.<org.apache.zookeeper.txn.TxnHeader: long getClientId()>();

        virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: void killSession(long)>($l15);

        goto label11;

     label10:
        r34 = (org.apache.zookeeper.txn.ErrorTxn) r3;

        $i14 = virtualinvoke r34.<org.apache.zookeeper.txn.ErrorTxn: int getErr()>();

        $r47.<org.apache.zookeeper.server.upgrade.DataTreeV1$ProcessTxnResult: int err> = $i14;

     label11:
        goto label14;

     label12:
        $r35 := @caughtexception;

        $z1 = r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: boolean initialized>;

        if $z1 != 0 goto label13;

        $r41 = virtualinvoke $r35.<org.apache.zookeeper.KeeperException: org.apache.zookeeper.KeeperException$Code code()>();

        $r42 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code NONODE>;

        if $r41 == $r42 goto label14;

        $r43 = virtualinvoke $r35.<org.apache.zookeeper.KeeperException: org.apache.zookeeper.KeeperException$Code code()>();

        $r44 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code NODEEXISTS>;

        if $r43 == $r44 goto label14;

     label13:
        $r37 = <org.apache.zookeeper.server.upgrade.DataTreeV1: org.slf4j.Logger LOG>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed:");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r40, $r35);

     label14:
        return $r47;

        catch org.apache.zookeeper.KeeperException from label01 to label11 with label12;
    }

    void killSession(long)
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        long l0;
        org.apache.zookeeper.KeeperException$NoNodeException $r17;
        java.util.HashSet r4;
        java.lang.Long $r2;
        java.util.Map $r1;
        java.lang.String r7, $r14, $r16, $r23, $r25;
        boolean $z0, $z1;
        org.slf4j.Logger $r8, $r10, $r19;
        java.util.Iterator $r5;
        java.lang.Object $r3, $r6;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r15, $r18, $r20, $r21, $r22, $r24;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        r4 = (java.util.HashSet) $r3;

        if r4 == null goto label6;

        $r5 = virtualinvoke r4.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

     label2:
        virtualinvoke r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: void deleteNode(java.lang.String)>(r7);

        $r8 = <org.apache.zookeeper.server.upgrade.DataTreeV1: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r10 = <org.apache.zookeeper.server.upgrade.DataTreeV1: org.slf4j.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting ephemeral node ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for session 0x");

        $r14 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r16);

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r19 = <org.apache.zookeeper.server.upgrade.DataTreeV1: org.slf4j.Logger LOG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring NoNodeException for path ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while removing ephemeral for dead session 0x");

        $r23 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l0);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void warn(java.lang.String)>($r25);

     label5:
        goto label1;

     label6:
        return;

        catch org.apache.zookeeper.KeeperException$NoNodeException from label2 to label3 with label4;
    }

    void serializeNode(org.apache.jute.OutputArchive, java.lang.StringBuilder) throws java.io.IOException, java.lang.InterruptedException
    {
        java.lang.Throwable $r10;
        java.lang.Object[] $r8;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r2;
        java.lang.String[] $r7, r11;
        java.util.HashSet $r5, $r6;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.jute.OutputArchive r4;
        java.lang.String $r1, r9;
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r3;
        java.lang.StringBuilder r0;

        r2 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r4 := @parameter0: org.apache.jute.OutputArchive;

        r0 := @parameter1: java.lang.StringBuilder;

        $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 getNode(java.lang.String)>($r1);

        if $r3 != null goto label1;

        return;

     label1:
        entermonitor $r3;

     label2:
        $i0 = r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: int scount>;

        $i1 = $i0 + 1;

        r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: int scount> = $i1;

        interfaceinvoke r4.<org.apache.jute.OutputArchive: void writeString(java.lang.String,java.lang.String)>($r1, "path");

        interfaceinvoke r4.<org.apache.jute.OutputArchive: void writeRecord(org.apache.jute.Record,java.lang.String)>($r3, "node");

        $r6 = $r3.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        $r5 = $r3.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        $i2 = virtualinvoke $r5.<java.util.HashSet: int size()>();

        $r7 = newarray (java.lang.String)[$i2];

        $r8 = virtualinvoke $r6.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r11 = (java.lang.String[]) $r8;

        exitmonitor $r3;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r10;

     label6:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if r11 == null goto label8;

        i4 = lengthof r11;

        i5 = 0;

     label7:
        if i5 >= i4 goto label8;

        r9 = r11[i5];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i3, 2147483647);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke r2.<org.apache.zookeeper.server.upgrade.DataTreeV1: void serializeNode(org.apache.jute.OutputArchive,java.lang.StringBuilder)>(r4, r0);

        i5 = i5 + 1;

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void serialize(org.apache.jute.OutputArchive, java.lang.String) throws java.io.IOException, java.lang.InterruptedException
    {
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r3;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        org.apache.jute.OutputArchive r1;
        java.lang.StringBuilder $r2;
        java.lang.String r4;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: org.apache.jute.OutputArchive;

        r4 := @parameter1: java.lang.String;

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: int scount> = 0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("");

        virtualinvoke r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: void serializeNode(org.apache.jute.OutputArchive,java.lang.StringBuilder)>(r1, $r2);

        $r3 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root>;

        if $r3 == null goto label1;

        interfaceinvoke r1.<org.apache.jute.OutputArchive: void writeString(java.lang.String,java.lang.String)>("/", "path");

     label1:
        return;
    }

    public void deserialize(org.apache.jute.InputArchive, java.lang.String) throws java.io.IOException
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        org.apache.jute.InputArchive r2;
        long $l2;
        java.util.HashSet $r12, r23, $r25;
        byte $b3;
        java.lang.Long $r16, $r20;
        java.util.Map $r15, $r19;
        int $i0, $i1, $i5;
        java.lang.String $r7, $r13, r21, r22;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r1, $r4, $r6, $r8;
        org.apache.zookeeper.data.StatPersistedV1 $r14;
        org.apache.zookeeper.server.upgrade.DataNodeV1 $r3, $r10, $r11, $r24;
        java.lang.Object $r9, $r17;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r2 := @parameter0: org.apache.jute.InputArchive;

        r21 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        r22 = interfaceinvoke r2.<org.apache.jute.InputArchive: java.lang.String readString(java.lang.String)>("path");

     label1:
        $z0 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z0 != 0 goto label5;

        $r24 = new org.apache.zookeeper.server.upgrade.DataNodeV1;

        specialinvoke $r24.<org.apache.zookeeper.server.upgrade.DataNodeV1: void <init>()>();

        interfaceinvoke r2.<org.apache.jute.InputArchive: void readRecord(org.apache.jute.Record,java.lang.String)>($r24, "node");

        $r6 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, $r24);

        $i0 = virtualinvoke r22.<java.lang.String: int lastIndexOf(int)>(47);

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root> = $r24;

        goto label4;

     label2:
        $r7 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r8 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (org.apache.zookeeper.server.upgrade.DataNodeV1) $r9;

        $r24.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 parent> = $r10;

        $r11 = $r24.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 parent>;

        $r12 = $r11.<org.apache.zookeeper.server.upgrade.DataNodeV1: java.util.HashSet children>;

        $i1 = $i0 + 1;

        $r13 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int)>($i1);

        virtualinvoke $r12.<java.util.HashSet: boolean add(java.lang.Object)>($r13);

        $r14 = $r24.<org.apache.zookeeper.server.upgrade.DataNodeV1: org.apache.zookeeper.data.StatPersistedV1 stat>;

        $l2 = virtualinvoke $r14.<org.apache.zookeeper.data.StatPersistedV1: long getEphemeralOwner()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label4;

        $r15 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        r23 = (java.util.HashSet) $r17;

        if r23 != null goto label3;

        $r25 = new java.util.HashSet;

        specialinvoke $r25.<java.util.HashSet: void <init>()>();

        r23 = $r25;

        $r19 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r25);

     label3:
        virtualinvoke r23.<java.util.HashSet: boolean add(java.lang.Object)>(r22);

     label4:
        r22 = interfaceinvoke r2.<org.apache.jute.InputArchive: java.lang.String readString(java.lang.String)>("path");

        goto label1;

     label5:
        $r4 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        $r3 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("/", $r3);

        return;
    }

    public java.lang.String dumpEphemerals()
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.lang.Long $r12, $r19;
        java.util.Map $r1, $r18;
        boolean $z0, $z1;
        java.util.Set $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r13, $r14, $r16, $r25, $r26, $r27, $r28;
        java.lang.Throwable $r30;
        long $l1;
        java.util.HashSet r21;
        int $i0;
        java.lang.String $r8, $r10, $r15, $r17, r24, $r29;
        java.util.Iterator $r9, $r22;
        java.lang.Object $r11, $r20, $r23;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = new java.lang.StringBuilder;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sessions with Ephemerals (");

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Long) $r11;

        $l1 = virtualinvoke $r12.<java.lang.Long: long longValue()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r15 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":\n");

        $r18 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r20 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r21 = (java.util.HashSet) $r20;

        entermonitor r21;

     label2:
        $r22 = virtualinvoke r21.<java.util.HashSet: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.String) $r23;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        goto label3;

     label4:
        exitmonitor r21;

     label5:
        goto label8;

     label6:
        $r30 := @caughtexception;

        exitmonitor r21;

     label7:
        throw $r30;

     label8:
        goto label1;

     label9:
        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void removeCnxn(org.apache.zookeeper.Watcher)
    {
        org.apache.zookeeper.server.WatchManager $r2, $r3;
        org.apache.zookeeper.Watcher r1;
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r1 := @parameter0: org.apache.zookeeper.Watcher;

        $r2 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager dataWatches>;

        virtualinvoke $r2.<org.apache.zookeeper.server.WatchManager: void removeWatcher(org.apache.zookeeper.Watcher)>(r1);

        $r3 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.WatchManager childWatches>;

        virtualinvoke $r3.<org.apache.zookeeper.server.WatchManager: void removeWatcher(org.apache.zookeeper.Watcher)>(r1);

        return;
    }

    public void clear()
    {
        org.apache.zookeeper.server.upgrade.DataTreeV1 r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.zookeeper.server.upgrade.DataTreeV1;

        r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: org.apache.zookeeper.server.upgrade.DataNodeV1 root> = null;

        $r1 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.concurrent.ConcurrentHashMap nodes>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        $r2 = r0.<org.apache.zookeeper.server.upgrade.DataTreeV1: java.util.Map ephemerals>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/upgrade/DataTreeV1;");

        <org.apache.zookeeper.server.upgrade.DataTreeV1: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
