public class org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator
{
    private static int[] smallPrimes;
    private org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param;
    private static final java.math.BigInteger ONE;

    public void <init>()
    {
        org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(org.bouncycastle.crypto.KeyGenerationParameters)
    {
        org.bouncycastle.crypto.KeyGenerationParameters r1;
        org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters $r2;
        org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator;

        r1 := @parameter0: org.bouncycastle.crypto.KeyGenerationParameters;

        $r2 = (org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters) r1;

        r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param> = $r2;

        return;
    }

    public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        java.util.Vector $r7, $r8, $r199;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r45;
        java.math.BigInteger $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r141, $r142, $r143, $r144, $r154, $r156, $r157, $r158, $r159, $r161, $r162, $r163, $r164, $r177, $r182, $r184, r192, r193, $r194, $r195, $r196, $r197, $r198, r200, r201;
        java.lang.StringBuilder $r48, $r50, $r51, $r52, $r56, $r58, $r59, $r61, $r63, $r64, $r65, $r66, $r67, $r69, $r71, $r72, $r74, $r76, $r77, $r79, $r81, $r82, $r84, $r86, $r87, $r89, $r91, $r92, $r94, $r96, $r97, $r99, $r101, $r102, $r104, $r106, $r107, $r109, $r111, $r112, $r115, $r117, $r118, $r120, $r122, $r123, $r125, $r127, $r128, $r130, $r132, $r133, $r135, $r137, $r138, $r145, $r147, $r149, $r150, $r151, $r166, $r168, $r169, $r170, $r172, $r174, $r175, $r176, $r178, $r185, $r187, $r189, $r190;
        long l24, $l25, l26;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, i23, i27, $i28, i29, i30;
        java.io.PrintStream $r49, $r54, $r55, $r57, $r62, $r70, $r75, $r80, $r85, $r90, $r95, $r100, $r105, $r110, $r114, $r116, $r121, $r126, $r131, $r136, $r146, $r165, $r167, $r173, $r180, $r186;
        java.lang.Object $r140, $r148, $r153, $r155, $r160, $r181, $r183;
        java.security.SecureRandom $r3;
        org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator r0;
        java.lang.String $r53, $r60, $r68, $r73, $r78, $r83, $r88, $r93, $r98, $r103, $r108, $r113, $r119, $r124, $r129, $r134, $r139, $r152, $r171, $r179, $r191;
        org.bouncycastle.crypto.params.NaccacheSternKeyParameters $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        org.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters $r47;
        org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters $r1, $r2, $r4, $r5, $r6, $r188;

        r0 := @this: org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator;

        $r1 = r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getStrength()>();

        $r2 = r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r4 = r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $i1 = virtualinvoke $r4.<org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getCertainty()>();

        $r5 = r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $z0 = virtualinvoke $r5.<org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters: boolean isDebug()>();

        if $z0 == 0 goto label01;

        $r186 = <java.lang.System: java.io.PrintStream out>;

        $r185 = new java.lang.StringBuilder;

        specialinvoke $r185.<java.lang.StringBuilder: void <init>()>();

        $r187 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fetching first ");

        $r188 = r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $i19 = virtualinvoke $r188.<org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getCntSmallPrimes()>();

        $r189 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r190 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" primes.");

        $r191 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r186.<java.io.PrintStream: void println(java.lang.String)>($r191);

     label01:
        $r6 = r0.<org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters param>;

        $i2 = virtualinvoke $r6.<org.bouncycastle.crypto.params.NaccacheSternKeyGenerationParameters: int getCntSmallPrimes()>();

        $r7 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.util.Vector findFirstPrimes(int)>($i2);

        $r8 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.util.Vector permuteList(java.util.Vector,java.security.SecureRandom)>($r7, $r3);

        r192 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        r193 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        i20 = 0;

     label02:
        $i21 = virtualinvoke $r8.<java.util.Vector: int size()>();

        $i22 = $i21 / 2;

        if i20 >= $i22 goto label03;

        $r183 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i20);

        $r184 = (java.math.BigInteger) $r183;

        r192 = virtualinvoke r192.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r184);

        i20 = i20 + 1;

        goto label02;

     label03:
        $i3 = virtualinvoke $r8.<java.util.Vector: int size()>();

        i23 = $i3 / 2;

     label04:
        $i4 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if i23 >= $i4 goto label05;

        $r181 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i23);

        $r182 = (java.math.BigInteger) $r181;

        r193 = virtualinvoke r193.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r182);

        i23 = i23 + 1;

        goto label04;

     label05:
        $r9 = virtualinvoke r192.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r193);

        $i5 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        $i6 = $i0 - $i5;

        i7 = $i6 - 48;

        $i8 = i7 / 2;

        $i9 = $i8 + 1;

        $r10 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>($i9, $i1, $r3);

        $i10 = i7 / 2;

        $i11 = $i10 + 1;

        $r11 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>($i11, $i1, $r3);

        l24 = 0L;

        if $z0 == 0 goto label06;

        $r180 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r180.<java.io.PrintStream: void println(java.lang.String)>("generating p and q");

     label06:
        $r12 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r192);

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

        $r14 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r193);

        $r15 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(1);

     label07:
        $l25 = l24 + 1L;

        l24 = $l25;

        $r194 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>(24, $i1, $r3);

        $r195 = virtualinvoke $r194.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r13);

        $r196 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r197 = virtualinvoke $r195.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r196);

        $z10 = virtualinvoke $r197.<java.math.BigInteger: boolean isProbablePrime(int)>($i1);

        if $z10 != 0 goto label08;

        goto label07;

     label08:
        $r198 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger generatePrime(int,int,java.security.SecureRandom)>(24, $i1, $r3);

        $z11 = virtualinvoke $r194.<java.math.BigInteger: boolean equals(java.lang.Object)>($r198);

        if $z11 == 0 goto label09;

        goto label08;

     label09:
        $r16 = virtualinvoke $r198.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r15);

        $r17 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r18 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r17);

        $z1 = virtualinvoke $r18.<java.math.BigInteger: boolean isProbablePrime(int)>($i1);

        if $z1 == 0 goto label08;

        goto label10;

     label10:
        $r19 = virtualinvoke $r194.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r198);

        $r20 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r19);

        $r21 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z2 = virtualinvoke $r20.<java.math.BigInteger: boolean equals(java.lang.Object)>($r21);

        if $z2 != 0 goto label11;

        goto label07;

     label11:
        $r22 = virtualinvoke $r197.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r18);

        $i12 = virtualinvoke $r22.<java.math.BigInteger: int bitLength()>();

        if $i12 >= $i0 goto label12;

        if $z0 == 0 goto label07;

        $r173 = <java.lang.System: java.io.PrintStream out>;

        $r172 = new java.lang.StringBuilder;

        specialinvoke $r172.<java.lang.StringBuilder: void <init>()>();

        $r174 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key size too small. Should be ");

        $r175 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but is actually ");

        $r177 = virtualinvoke $r197.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r18);

        $i18 = virtualinvoke $r177.<java.math.BigInteger: int bitLength()>();

        $r178 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r173.<java.io.PrintStream: void println(java.lang.String)>($r179);

        goto label07;

     label12:
        if $z0 == 0 goto label13;

        $r167 = <java.lang.System: java.io.PrintStream out>;

        $r166 = new java.lang.StringBuilder;

        specialinvoke $r166.<java.lang.StringBuilder: void <init>()>();

        $r168 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("needed ");

        $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l25);

        $r170 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tries to generate p and q.");

        $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r167.<java.io.PrintStream: void println(java.lang.String)>($r171);

     label13:
        $r23 = virtualinvoke $r197.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r18);

        $r24 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r25 = virtualinvoke $r197.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r24);

        $r26 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $r27 = virtualinvoke $r18.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r26);

        $r28 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r27);

        l26 = 0L;

        if $z0 == 0 goto label14;

        $r165 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r165.<java.io.PrintStream: void println(java.lang.String)>("generating g");

     label14:
        $r199 = new java.util.Vector;

        specialinvoke $r199.<java.util.Vector: void <init>()>();

        i27 = 0;

     label15:
        $i28 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if i27 == $i28 goto label19;

        $r160 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i27);

        r200 = (java.math.BigInteger) $r160;

        $r161 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>(r200);

     label16:
        l26 = l26 + 1L;

        $r162 = new java.math.BigInteger;

        specialinvoke $r162.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i0, $i1, $r3);

        $r163 = virtualinvoke $r162.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r161, $r23);

        $r164 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z9 = virtualinvoke $r163.<java.math.BigInteger: boolean equals(java.lang.Object)>($r164);

        if $z9 == 0 goto label17;

        goto label16;

     label17:
        virtualinvoke $r199.<java.util.Vector: void addElement(java.lang.Object)>($r162);

        goto label18;

     label18:
        i27 = i27 + 1;

        goto label15;

     label19:
        r201 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        i29 = 0;

     label20:
        $i13 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if i29 >= $i13 goto label21;

        $r153 = virtualinvoke $r199.<java.util.Vector: java.lang.Object elementAt(int)>(i29);

        $r154 = (java.math.BigInteger) $r153;

        $r155 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i29);

        $r156 = (java.math.BigInteger) $r155;

        $r157 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r156);

        $r158 = virtualinvoke $r154.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r157, $r23);

        $r159 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r158);

        r201 = virtualinvoke $r159.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r23);

        i29 = i29 + 1;

        goto label20;

     label21:
        z12 = 0;

        i30 = 0;

     label22:
        $i14 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if i30 >= $i14 goto label25;

        $r140 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i30);

        $r141 = (java.math.BigInteger) $r140;

        $r142 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r141);

        $r143 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r142, $r23);

        $r144 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z8 = virtualinvoke $r143.<java.math.BigInteger: boolean equals(java.lang.Object)>($r144);

        if $z8 == 0 goto label24;

        if $z0 == 0 goto label23;

        $r146 = <java.lang.System: java.io.PrintStream out>;

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r147 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/");

        $r148 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i30);

        $r149 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r148);

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n g: ");

        $r151 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r152 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r146.<java.io.PrintStream: void println(java.lang.String)>($r152);

     label23:
        z12 = 1;

        goto label25;

     label24:
        i30 = i30 + 1;

        goto label22;

     label25:
        if z12 == 0 goto label26;

        goto label14;

     label26:
        $r29 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(4L);

        $r30 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r29);

        $r31 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r30, $r23);

        $r32 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z3 = virtualinvoke $r31.<java.math.BigInteger: boolean equals(java.lang.Object)>($r32);

        if $z3 == 0 goto label27;

        if $z0 == 0 goto label14;

        $r136 = <java.lang.System: java.io.PrintStream out>;

        $r135 = new java.lang.StringBuilder;

        specialinvoke $r135.<java.lang.StringBuilder: void <init>()>();

        $r137 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/4\n g:");

        $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r136.<java.io.PrintStream: void println(java.lang.String)>($r139);

        goto label14;

     label27:
        $r33 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r194);

        $r34 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r33, $r23);

        $r35 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z4 = virtualinvoke $r34.<java.math.BigInteger: boolean equals(java.lang.Object)>($r35);

        if $z4 == 0 goto label28;

        if $z0 == 0 goto label14;

        $r131 = <java.lang.System: java.io.PrintStream out>;

        $r130 = new java.lang.StringBuilder;

        specialinvoke $r130.<java.lang.StringBuilder: void <init>()>();

        $r132 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/p\'\n g: ");

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r131.<java.io.PrintStream: void println(java.lang.String)>($r134);

        goto label14;

     label28:
        $r36 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r198);

        $r37 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r36, $r23);

        $r38 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z5 = virtualinvoke $r37.<java.math.BigInteger: boolean equals(java.lang.Object)>($r38);

        if $z5 == 0 goto label29;

        if $z0 == 0 goto label14;

        $r126 = <java.lang.System: java.io.PrintStream out>;

        $r125 = new java.lang.StringBuilder;

        specialinvoke $r125.<java.lang.StringBuilder: void <init>()>();

        $r127 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/q\'\n g: ");

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r126.<java.io.PrintStream: void println(java.lang.String)>($r129);

        goto label14;

     label29:
        $r39 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r10);

        $r40 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r39, $r23);

        $r41 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z6 = virtualinvoke $r40.<java.math.BigInteger: boolean equals(java.lang.Object)>($r41);

        if $z6 == 0 goto label30;

        if $z0 == 0 goto label14;

        $r121 = <java.lang.System: java.io.PrintStream out>;

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/a\n g: ");

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r121.<java.io.PrintStream: void println(java.lang.String)>($r124);

        goto label14;

     label30:
        $r42 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r11);

        $r43 = virtualinvoke r201.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r42, $r23);

        $r44 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE>;

        $z7 = virtualinvoke $r43.<java.math.BigInteger: boolean equals(java.lang.Object)>($r44);

        if $z7 == 0 goto label31;

        if $z0 == 0 goto label14;

        $r116 = <java.lang.System: java.io.PrintStream out>;

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r117 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g has order phi(n)/b\n g: ");

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r116.<java.io.PrintStream: void println(java.lang.String)>($r119);

        goto label14;

     label31:
        if $z0 == 0 goto label32;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("needed ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l26);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tries to generate g");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r53);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r54.<java.io.PrintStream: void println()>();

        $r55 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>("found new NaccacheStern cipher variables:");

        $r57 = <java.lang.System: java.io.PrintStream out>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smallPrimes: ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.io.PrintStream: void println(java.lang.String)>($r60);

        $r62 = <java.lang.System: java.io.PrintStream out>;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sigma:...... ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i17 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits)");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r62.<java.io.PrintStream: void println(java.lang.String)>($r68);

        $r70 = <java.lang.System: java.io.PrintStream out>;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a:.......... ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r73);

        $r75 = <java.lang.System: java.io.PrintStream out>;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b:.......... ");

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r75.<java.io.PrintStream: void println(java.lang.String)>($r78);

        $r80 = <java.lang.System: java.io.PrintStream out>;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p\':......... ");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r194);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r80.<java.io.PrintStream: void println(java.lang.String)>($r83);

        $r85 = <java.lang.System: java.io.PrintStream out>;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("q\':......... ");

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r198);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r85.<java.io.PrintStream: void println(java.lang.String)>($r88);

        $r90 = <java.lang.System: java.io.PrintStream out>;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p:.......... ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r197);

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r90.<java.io.PrintStream: void println(java.lang.String)>($r93);

        $r95 = <java.lang.System: java.io.PrintStream out>;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("q:.......... ");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r95.<java.io.PrintStream: void println(java.lang.String)>($r98);

        $r100 = <java.lang.System: java.io.PrintStream out>;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n:.......... ");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r100.<java.io.PrintStream: void println(java.lang.String)>($r103);

        $r105 = <java.lang.System: java.io.PrintStream out>;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("phi(n):..... ");

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r105.<java.io.PrintStream: void println(java.lang.String)>($r108);

        $r110 = <java.lang.System: java.io.PrintStream out>;

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r111 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("g:.......... ");

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r201);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r110.<java.io.PrintStream: void println(java.lang.String)>($r113);

        $r114 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r114.<java.io.PrintStream: void println()>();

     label32:
        $r45 = new org.bouncycastle.crypto.AsymmetricCipherKeyPair;

        $r46 = new org.bouncycastle.crypto.params.NaccacheSternKeyParameters;

        $i15 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        specialinvoke $r46.<org.bouncycastle.crypto.params.NaccacheSternKeyParameters: void <init>(boolean,java.math.BigInteger,java.math.BigInteger,int)>(0, r201, $r23, $i15);

        $r47 = new org.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters;

        $i16 = virtualinvoke $r9.<java.math.BigInteger: int bitLength()>();

        specialinvoke $r47.<org.bouncycastle.crypto.params.NaccacheSternPrivateKeyParameters: void <init>(java.math.BigInteger,java.math.BigInteger,int,java.util.Vector,java.math.BigInteger)>(r201, $r23, $i16, $r8, $r28);

        specialinvoke $r45.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>($r46, $r47);

        return $r45;
    }

    private static java.math.BigInteger generatePrime(int, int, java.security.SecureRandom)
    {
        java.security.SecureRandom r1;
        int i0, i1, $i2;
        java.math.BigInteger $r0, $r2, r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.security.SecureRandom;

        $r0 = new java.math.BigInteger;

        specialinvoke $r0.<java.math.BigInteger: void <init>(int,int,java.util.Random)>(i0, i1, r1);

        r3 = $r0;

     label1:
        $i2 = virtualinvoke r3.<java.math.BigInteger: int bitLength()>();

        if $i2 == i0 goto label2;

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,int,java.util.Random)>(i0, i1, r1);

        r3 = $r2;

        goto label1;

     label2:
        return r3;
    }

    private static java.util.Vector permuteList(java.util.Vector, java.security.SecureRandom)
    {
        java.security.SecureRandom r5;
        java.util.Vector $r0, $r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3, $r4, $r6;

        r2 := @parameter0: java.util.Vector;

        r5 := @parameter1: java.security.SecureRandom;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        i5 = 0;

     label1:
        $i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        if i5 >= $i0 goto label2;

        $r6 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        virtualinvoke $r1.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.util.Vector: void removeElementAt(int)>(0);

     label3:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i1 == 0 goto label4;

        $r4 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $i2 = virtualinvoke $r0.<java.util.Vector: int size()>();

        $i3 = $i2 + 1;

        $i4 = staticinvoke <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: int getInt(java.security.SecureRandom,int)>(r5, $i3);

        virtualinvoke $r0.<java.util.Vector: void insertElementAt(java.lang.Object,int)>($r4, $i4);

        virtualinvoke $r1.<java.util.Vector: void removeElementAt(int)>(0);

        goto label3;

     label4:
        return $r0;
    }

    private static int getInt(java.security.SecureRandom, int)
    {
        long $l9, $l12, $l13, $l14;
        java.security.SecureRandom r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i15;

        r0 := @parameter0: java.security.SecureRandom;

        i0 := @parameter1: int;

        $i1 = neg i0;

        $i2 = i0 & $i1;

        if $i2 != i0 goto label1;

        $l9 = (long) i0;

        $i10 = virtualinvoke r0.<java.security.SecureRandom: int nextInt()>();

        $i11 = $i10 & 2147483647;

        $l12 = (long) $i11;

        $l13 = $l9 * $l12;

        $l14 = $l13 >> 31;

        $i15 = (int) $l14;

        return $i15;

     label1:
        $i3 = virtualinvoke r0.<java.security.SecureRandom: int nextInt()>();

        $i7 = $i3 & 2147483647;

        $i8 = $i7 % i0;

        $i5 = $i7 - $i8;

        $i4 = i0 - 1;

        $i6 = $i5 + $i4;

        if $i6 < 0 goto label1;

        return $i8;
    }

    private static java.util.Vector findFirstPrimes(int)
    {
        java.util.Vector $r0;
        int[] $r1;
        int i0, $i1, i3;
        long $l2;
        java.math.BigInteger $r2;

        i0 := @parameter0: int;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>(int)>(i0);

        i3 = 0;

     label1:
        if i3 == i0 goto label2;

        $r1 = <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: int[] smallPrimes>;

        $i1 = $r1[i3];

        $l2 = (long) $i1;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r0;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r1;
        int[] $r0;

        $r0 = newarray (int)[101];

        $r0[0] = 3;

        $r0[1] = 5;

        $r0[2] = 7;

        $r0[3] = 11;

        $r0[4] = 13;

        $r0[5] = 17;

        $r0[6] = 19;

        $r0[7] = 23;

        $r0[8] = 29;

        $r0[9] = 31;

        $r0[10] = 37;

        $r0[11] = 41;

        $r0[12] = 43;

        $r0[13] = 47;

        $r0[14] = 53;

        $r0[15] = 59;

        $r0[16] = 61;

        $r0[17] = 67;

        $r0[18] = 71;

        $r0[19] = 73;

        $r0[20] = 79;

        $r0[21] = 83;

        $r0[22] = 89;

        $r0[23] = 97;

        $r0[24] = 101;

        $r0[25] = 103;

        $r0[26] = 107;

        $r0[27] = 109;

        $r0[28] = 113;

        $r0[29] = 127;

        $r0[30] = 131;

        $r0[31] = 137;

        $r0[32] = 139;

        $r0[33] = 149;

        $r0[34] = 151;

        $r0[35] = 157;

        $r0[36] = 163;

        $r0[37] = 167;

        $r0[38] = 173;

        $r0[39] = 179;

        $r0[40] = 181;

        $r0[41] = 191;

        $r0[42] = 193;

        $r0[43] = 197;

        $r0[44] = 199;

        $r0[45] = 211;

        $r0[46] = 223;

        $r0[47] = 227;

        $r0[48] = 229;

        $r0[49] = 233;

        $r0[50] = 239;

        $r0[51] = 241;

        $r0[52] = 251;

        $r0[53] = 257;

        $r0[54] = 263;

        $r0[55] = 269;

        $r0[56] = 271;

        $r0[57] = 277;

        $r0[58] = 281;

        $r0[59] = 283;

        $r0[60] = 293;

        $r0[61] = 307;

        $r0[62] = 311;

        $r0[63] = 313;

        $r0[64] = 317;

        $r0[65] = 331;

        $r0[66] = 337;

        $r0[67] = 347;

        $r0[68] = 349;

        $r0[69] = 353;

        $r0[70] = 359;

        $r0[71] = 367;

        $r0[72] = 373;

        $r0[73] = 379;

        $r0[74] = 383;

        $r0[75] = 389;

        $r0[76] = 397;

        $r0[77] = 401;

        $r0[78] = 409;

        $r0[79] = 419;

        $r0[80] = 421;

        $r0[81] = 431;

        $r0[82] = 433;

        $r0[83] = 439;

        $r0[84] = 443;

        $r0[85] = 449;

        $r0[86] = 457;

        $r0[87] = 461;

        $r0[88] = 463;

        $r0[89] = 467;

        $r0[90] = 479;

        $r0[91] = 487;

        $r0[92] = 491;

        $r0[93] = 499;

        $r0[94] = 503;

        $r0[95] = 509;

        $r0[96] = 521;

        $r0[97] = 523;

        $r0[98] = 541;

        $r0[99] = 547;

        $r0[100] = 557;

        <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: int[] smallPrimes> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.generators.NaccacheSternKeyPairGenerator: java.math.BigInteger ONE> = $r1;

        return;
    }
}
