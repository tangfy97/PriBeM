class org.apache.tika.fork.InputStreamResource extends java.lang.Object implements org.apache.tika.fork.ForkResource
{
    private final java.io.InputStream stream;

    public void <init>(java.io.InputStream)
    {
        org.apache.tika.fork.InputStreamResource r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.fork.InputStreamResource;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.fork.InputStreamResource: java.io.InputStream stream> = r1;

        return;
    }

    public java.lang.Throwable process(java.io.DataInputStream, java.io.DataOutputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        byte[] r1;
        java.io.IOException $r5;
        org.apache.tika.fork.InputStreamResource r2;
        java.io.DataOutputStream r4;
        int $i0, $i1;
        java.io.InputStream $r3;

        r2 := @this: org.apache.tika.fork.InputStreamResource;

        r0 := @parameter0: java.io.DataInputStream;

        r4 := @parameter1: java.io.DataOutputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readInt()>();

        r1 = newarray (byte)[$i0];

     label1:
        $r3 = r2.<org.apache.tika.fork.InputStreamResource: java.io.InputStream stream>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        return $r5;

     label4:
        virtualinvoke r4.<java.io.DataOutputStream: void writeInt(int)>($i1);

        if $i1 <= 0 goto label5;

        virtualinvoke r4.<java.io.DataOutputStream: void write(byte[],int,int)>(r1, 0, $i1);

     label5:
        virtualinvoke r4.<java.io.DataOutputStream: void flush()>();

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
