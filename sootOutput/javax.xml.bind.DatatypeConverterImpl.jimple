final class javax.xml.bind.DatatypeConverterImpl extends java.lang.Object implements javax.xml.bind.DatatypeConverterInterface
{
    public static final javax.xml.bind.DatatypeConverterInterface theInstance;
    private static final char[] hexCode;
    private static final byte[] decodeMap;
    private static final byte PADDING;
    private static final char[] encodeMap;
    private static final javax.xml.datatype.DatatypeFactory datatypeFactory;
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        javax.xml.bind.DatatypeConverterImpl r0;

        r0 := @this: javax.xml.bind.DatatypeConverterImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String parseString(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public java.math.BigInteger parseInteger(java.lang.String)
    {
        java.math.BigInteger $r1;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.math.BigInteger _parseInteger(java.lang.CharSequence)>(r0);

        return $r1;
    }

    public static java.math.BigInteger _parseInteger(java.lang.CharSequence)
    {
        java.lang.CharSequence r1, $r2, $r3;
        java.math.BigInteger $r0;
        java.lang.String $r4;

        r1 := @parameter0: java.lang.CharSequence;

        $r0 = new java.math.BigInteger;

        $r2 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r1);

        $r3 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.CharSequence removeOptionalPlus(java.lang.CharSequence)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>($r4);

        return $r0;
    }

    public java.lang.String printInteger(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printInteger(java.math.BigInteger)>(r0);

        return $r1;
    }

    public static java.lang.String _printInteger(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.String $r1;

        r0 := @parameter0: java.math.BigInteger;

        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString()>();

        return $r1;
    }

    public int parseInt(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int _parseInt(java.lang.CharSequence)>(r0);

        return $i0;
    }

    public static int _parseInt(java.lang.CharSequence)
    {
        byte b5;
        int $i0, $i1, $i3, $i4, i6, i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r5;
        boolean $z0;
        java.lang.CharSequence r0;
        char $c2;
        java.lang.NumberFormatException $r7;
        java.lang.StringBuilder $r3, $r4, $r6;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        b5 = 1;

        i6 = 0;

        i7 = 0;

     label1:
        if i7 >= $i0 goto label7;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i7);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c2);

        if $z0 == 0 goto label2;

        goto label6;

     label2:
        $i8 = (int) $c2;

        if 48 > $i8 goto label3;

        $i9 = (int) $c2;

        if $i9 > 57 goto label3;

        $i4 = i6 * 10;

        $i10 = (int) $c2;

        $i3 = $i10 - 48;

        i6 = $i4 + $i3;

        goto label6;

     label3:
        $i11 = (int) $c2;

        if $i11 != 45 goto label4;

        b5 = -1;

        goto label6;

     label4:
        $i12 = (int) $c2;

        if $i12 != 43 goto label5;

        goto label6;

     label5:
        $r7 = new java.lang.NumberFormatException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a number: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r7;

     label6:
        i7 = i7 + 1;

        goto label1;

     label7:
        $i1 = i6 * b5;

        return $i1;
    }

    public long parseLong(java.lang.String)
    {
        long $l0;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: long _parseLong(java.lang.CharSequence)>(r0);

        return $l0;
    }

    public static long _parseLong(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1, $r2;
        java.lang.Long $r4;
        long $l0;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r0);

        $r2 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.CharSequence removeOptionalPlus(java.lang.CharSequence)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r3);

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public short parseShort(java.lang.String)
    {
        short $s0;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $s0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: short _parseShort(java.lang.CharSequence)>(r0);

        return $s0;
    }

    public static short _parseShort(java.lang.CharSequence)
    {
        int $i0;
        short $s1;
        java.lang.CharSequence r0;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int _parseInt(java.lang.CharSequence)>(r0);

        $s1 = (short) $i0;

        return $s1;
    }

    public java.lang.String printShort(short)
    {
        short s0;
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        s0 := @parameter0: short;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printShort(short)>(s0);

        return $r0;
    }

    public static java.lang.String _printShort(short)
    {
        int $i1;
        short s0;
        java.lang.String $r0;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        return $r0;
    }

    public java.math.BigDecimal parseDecimal(java.lang.String)
    {
        java.math.BigDecimal $r1;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.math.BigDecimal _parseDecimal(java.lang.CharSequence)>(r0);

        return $r1;
    }

    public static java.math.BigDecimal _parseDecimal(java.lang.CharSequence)
    {
        java.math.BigDecimal $r1;
        java.lang.CharSequence $r0, r3;
        int $i0;
        java.lang.String $r2;

        r3 := @parameter0: java.lang.CharSequence;

        $r0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r3);

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 > 0 goto label1;

        return null;

     label1:
        $r1 = new java.math.BigDecimal;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        return $r1;
    }

    public float parseFloat(java.lang.String)
    {
        float $f0;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: float _parseFloat(java.lang.CharSequence)>(r0);

        return $f0;
    }

    public static float _parseFloat(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        char $c1, $c4;
        java.lang.NumberFormatException $r3;
        int $i0, $i2, $i3;
        float $f0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z0 == 0 goto label1;

        return #NaNF;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z1 == 0 goto label2;

        return #InfinityF;

     label2:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z2 == 0 goto label3;

        return #-InfinityF;

     label3:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label4;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $z3 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: boolean isDigitOrPeriodOrSign(char)>($c1);

        if $z3 == 0 goto label4;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        $z4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: boolean isDigitOrPeriodOrSign(char)>($c4);

        if $z4 != 0 goto label5;

     label4:
        $r3 = new java.lang.NumberFormatException;

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>()>();

        throw $r3;

     label5:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r2);

        return $f0;
    }

    public java.lang.String printFloat(float)
    {
        float f0;
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        f0 := @parameter0: float;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printFloat(float)>(f0);

        return $r0;
    }

    public static java.lang.String _printFloat(float)
    {
        byte $b0, $b1;
        float f0;
        java.lang.String $r0;
        boolean $z0;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        return "NaN";

     label1:
        $b0 = f0 cmpl #InfinityF;

        if $b0 != 0 goto label2;

        return "INF";

     label2:
        $b1 = f0 cmpl #-InfinityF;

        if $b1 != 0 goto label3;

        return "-INF";

     label3:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        return $r0;
    }

    public double parseDouble(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;
        double $d0;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $d0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: double _parseDouble(java.lang.CharSequence)>(r0);

        return $d0;
    }

    public static double _parseDouble(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        char $c1, $c4;
        java.lang.NumberFormatException $r3;
        int $i0, $i2, $i3;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        double $d0;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z0 == 0 goto label1;

        return #NaN;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("INF");

        if $z1 == 0 goto label2;

        return #Infinity;

     label2:
        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-INF");

        if $z2 == 0 goto label3;

        return #-Infinity;

     label3:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label4;

        $c1 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        $z3 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: boolean isDigitOrPeriodOrSign(char)>($c1);

        if $z3 == 0 goto label4;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        $z4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: boolean isDigitOrPeriodOrSign(char)>($c4);

        if $z4 != 0 goto label5;

     label4:
        $r3 = new java.lang.NumberFormatException;

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label5:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        return $d0;
    }

    public boolean parseBoolean(java.lang.String)
    {
        javax.xml.bind.DatatypeConverterImpl r2;
        java.lang.Boolean $r1;
        java.lang.String r0;
        boolean $z0;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.Boolean _parseBoolean(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static java.lang.Boolean _parseBoolean(java.lang.CharSequence)
    {
        int $i0, $i1, $i2, $i4, $i6, $i8, $i10, $i12, i14, i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.Boolean $r1, $r2, $r3, $r5;
        java.lang.String $r4, $r6;
        boolean $z0, $z1, z2;
        java.lang.CharSequence r0;
        char $c3, $c5, $c7, $c9, $c11, $c13;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label01;

        return null;

     label01:
        i14 = 0;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        z2 = 0;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i1 > 0 goto label02;

        return null;

     label02:
        $i2 = i14;

        i14 = i14 + 1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c3);

        if $z0 == 0 goto label03;

        if i14 < $i0 goto label02;

     label03:
        i15 = 0;

        $i16 = (int) $c3;

        lookupswitch($i16)
        {
            case 48: goto label05;
            case 49: goto label04;
            case 102: goto label09;
            case 116: goto label06;
            default: goto label12;
        };

     label04:
        z2 = 1;

        goto label12;

     label05:
        z2 = 0;

        goto label12;

     label06:
        $i4 = i14;

        i14 = i14 + 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $r4 = "rue";

        $i6 = i15;

        i15 = i15 + 1;

        $c7 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i6);

        $i17 = (int) $c7;

        $i18 = (int) $c5;

        if $i17 != $i18 goto label07;

        if i14 >= $i0 goto label07;

        if i15 < 3 goto label06;

     label07:
        if i15 != 3 goto label08;

        z2 = 1;

        goto label12;

     label08:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r1;

     label09:
        $i10 = i14;

        i14 = i14 + 1;

        $c11 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i10);

        $r6 = "alse";

        $i12 = i15;

        i15 = i15 + 1;

        $c13 = virtualinvoke $r6.<java.lang.String: char charAt(int)>($i12);

        $i19 = (int) $c13;

        $i20 = (int) $c11;

        if $i19 != $i20 goto label10;

        if i14 >= $i0 goto label10;

        if i15 < 4 goto label09;

     label10:
        if i15 != 4 goto label11;

        z2 = 0;

        goto label12;

     label11:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r5;

     label12:
        if i14 >= $i0 goto label14;

     label13:
        $i8 = i14;

        i14 = i14 + 1;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i8);

        $z1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c9);

        if $z1 == 0 goto label14;

        if i14 < $i0 goto label13;

     label14:
        if i14 != $i0 goto label15;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        return $r3;

     label15:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r2;
    }

    public java.lang.String printBoolean(boolean)
    {
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r0;
        boolean z0;

        r0 := @this: javax.xml.bind.DatatypeConverterImpl;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = "true";

        goto label2;

     label1:
        $r1 = "false";

     label2:
        return $r1;
    }

    public static java.lang.String _printBoolean(boolean)
    {
        java.lang.String $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = "true";

        goto label2;

     label1:
        $r0 = "false";

     label2:
        return $r0;
    }

    public byte parseByte(java.lang.String)
    {
        java.lang.String r0;
        byte $b0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $b0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte _parseByte(java.lang.CharSequence)>(r0);

        return $b0;
    }

    public static byte _parseByte(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence r0;
        byte $b1;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int _parseInt(java.lang.CharSequence)>(r0);

        $b1 = (byte) $i0;

        return $b1;
    }

    public java.lang.String printByte(byte)
    {
        java.lang.String $r0;
        byte b0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        b0 := @parameter0: byte;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printByte(byte)>(b0);

        return $r0;
    }

    public static java.lang.String _printByte(byte)
    {
        int $i1;
        java.lang.String $r0;
        byte b0;

        b0 := @parameter0: byte;

        $i1 = (int) b0;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        return $r0;
    }

    public javax.xml.namespace.QName parseQName(java.lang.String, javax.xml.namespace.NamespaceContext)
    {
        javax.xml.bind.DatatypeConverterImpl r3;
        javax.xml.namespace.NamespaceContext r1;
        java.lang.String r0;
        javax.xml.namespace.QName $r2;

        r3 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.xml.namespace.NamespaceContext;

        $r2 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: javax.xml.namespace.QName _parseQName(java.lang.CharSequence,javax.xml.namespace.NamespaceContext)>(r0, r1);

        return $r2;
    }

    public static javax.xml.namespace.QName _parseQName(java.lang.CharSequence, javax.xml.namespace.NamespaceContext)
    {
        javax.xml.namespace.NamespaceContext r4;
        boolean $z0, $z1;
        java.lang.CharSequence r0, $r1, $r3, $r13;
        java.lang.StringBuilder $r8, $r9, $r10, $r19;
        javax.xml.namespace.QName $r21;
        int $i0, $i1, $i2, $i4, i7, i8, i9, $i11, $i12;
        java.lang.String $r2, $r5, $r11, r15, r16, r17;
        char $c3, $c5, $c6;
        java.lang.IllegalArgumentException $r18, $r20;

        r0 := @parameter0: java.lang.CharSequence;

        r4 := @parameter1: javax.xml.namespace.NamespaceContext;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i7 = 0;

     label01:
        if i7 >= $i0 goto label02;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i7);

        $z1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c6);

        if $z1 == 0 goto label02;

        i7 = i7 + 1;

        goto label01;

     label02:
        i8 = $i0;

     label03:
        if i8 <= i7 goto label04;

        $i4 = i8 - 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c5);

        if $z0 == 0 goto label04;

        $i11 = (int) -1;

        i8 = i8 + $i11;

        goto label03;

     label04:
        if i8 != i7 goto label05;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input is empty");

        throw $r18;

     label05:
        i9 = i7 + 1;

     label06:
        if i9 >= i8 goto label07;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i9);

        $i12 = (int) $c3;

        if $i12 == 58 goto label07;

        i9 = i9 + 1;

        goto label06;

     label07:
        if i9 != i8 goto label08;

        r15 = interfaceinvoke r4.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>("");

        $r13 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i7, i8);

        r16 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

        r17 = "";

        goto label10;

     label08:
        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i7, i9);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        r17 = $r2;

        $i1 = i9 + 1;

        $r3 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, i8);

        r16 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = interfaceinvoke r4.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>($r2);

        r15 = $r5;

        if $r5 == null goto label09;

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 != 0 goto label10;

     label09:
        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefix ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not bound to a namespace");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r20;

     label10:
        $r21 = new javax.xml.namespace.QName;

        specialinvoke $r21.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r15, r16, r17);

        return $r21;
    }

    public java.util.Calendar parseDateTime(java.lang.String)
    {
        java.lang.String r0;
        java.util.GregorianCalendar $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.util.GregorianCalendar _parseDateTime(java.lang.CharSequence)>(r0);

        return $r1;
    }

    public static java.util.GregorianCalendar _parseDateTime(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        java.util.GregorianCalendar $r5;
        java.lang.String $r2;
        javax.xml.datatype.DatatypeFactory $r3;
        javax.xml.datatype.XMLGregorianCalendar $r4;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence trim(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = <javax.xml.bind.DatatypeConverterImpl: javax.xml.datatype.DatatypeFactory datatypeFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>($r2);

        $r5 = virtualinvoke $r4.<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>();

        return $r5;
    }

    public java.lang.String printDateTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printDateTime(java.util.Calendar)>(r0);

        return $r1;
    }

    public static java.lang.String _printDateTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl$CalendarFormatter: java.lang.String doFormat(java.lang.String,java.util.Calendar)>("%Y-%M-%DT%h:%m:%s%z", r0);

        return $r1;
    }

    public byte[] parseBase64Binary(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte[] _parseBase64Binary(java.lang.String)>(r0);

        return $r1;
    }

    public byte[] parseHexBinary(java.lang.String)
    {
        byte[] r1;
        byte $b10;
        javax.xml.bind.DatatypeConverterImpl r12;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i11, i12, $i14, $i16;
        java.lang.String r0, $r6, $r11;
        char $c3, $c6;
        java.lang.IllegalArgumentException $r14, $r16;
        java.lang.StringBuilder $r4, $r5, $r9, $r10, $r13, $r15;

        r12 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 % 2;

        if $i1 == 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hexBinary needs to be even-length: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r14;

     label1:
        $i2 = $i0 / 2;

        r1 = newarray (byte)[$i2];

        i12 = 0;

     label2:
        if i12 >= $i0 goto label5;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int hexToBin(char)>($c3);

        $i5 = i12 + 1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i5);

        $i7 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int hexToBin(char)>($c6);

        $i14 = (int) -1;

        if $i4 == $i14 goto label3;

        $i16 = (int) -1;

        if $i7 != $i16 goto label4;

     label3:
        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("contains illegal character for hexBinary: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r16;

     label4:
        $i11 = i12 / 2;

        $i8 = $i4 * 16;

        $i9 = $i8 + $i7;

        $b10 = (byte) $i9;

        r1[$i11] = $b10;

        i12 = i12 + 2;

        goto label2;

     label5:
        return r1;
    }

    private static int hexToBin(char)
    {
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16;
        char c0;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if 48 > $i6 goto label1;

        $i7 = (int) c0;

        if $i7 > 57 goto label1;

        $i8 = (int) c0;

        $i5 = $i8 - 48;

        return $i5;

     label1:
        $i9 = (int) c0;

        if 65 > $i9 goto label2;

        $i10 = (int) c0;

        if $i10 > 70 goto label2;

        $i11 = (int) c0;

        $i3 = $i11 - 65;

        $i4 = $i3 + 10;

        return $i4;

     label2:
        $i12 = (int) c0;

        if 97 > $i12 goto label3;

        $i13 = (int) c0;

        if $i13 > 102 goto label3;

        $i14 = (int) c0;

        $i1 = $i14 - 97;

        $i2 = $i1 + 10;

        return $i2;

     label3:
        $i16 = (int) -1;

        return $i16;
    }

    public java.lang.String printHexBinary(byte[])
    {
        byte[] r1;
        byte b3, $b7;
        javax.xml.bind.DatatypeConverterImpl r5;
        int $i0, $i1, i2, $i4, $i5, i9, $i10, $i11;
        java.lang.String $r2;
        char $c6, $c8;
        char[] $r3, $r4;
        java.lang.StringBuilder $r6;

        r5 := @this: javax.xml.bind.DatatypeConverterImpl;

        r1 := @parameter0: byte[];

        $r6 = new java.lang.StringBuilder;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i1);

        i2 = lengthof r1;

        i9 = 0;

     label1:
        if i9 >= i2 goto label2;

        b3 = r1[i9];

        $r3 = <javax.xml.bind.DatatypeConverterImpl: char[] hexCode>;

        $i10 = (int) b3;

        $i4 = $i10 >> 4;

        $i5 = $i4 & 15;

        $c6 = $r3[$i5];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r4 = <javax.xml.bind.DatatypeConverterImpl: char[] hexCode>;

        $b7 = b3 & 15;

        $i11 = (int) $b7;

        $c8 = $r4[$i11];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        i9 = i9 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public long parseUnsignedInt(java.lang.String)
    {
        long $l0;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: long _parseLong(java.lang.CharSequence)>(r0);

        return $l0;
    }

    public java.lang.String printUnsignedInt(long)
    {
        long l0;
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        l0 := @parameter0: long;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printLong(long)>(l0);

        return $r0;
    }

    public int parseUnsignedShort(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int _parseInt(java.lang.CharSequence)>(r0);

        return $i0;
    }

    public java.util.Calendar parseTime(java.lang.String)
    {
        java.util.GregorianCalendar $r3;
        javax.xml.bind.DatatypeConverterImpl r4;
        java.lang.String r0;
        javax.xml.datatype.DatatypeFactory $r1;
        javax.xml.datatype.XMLGregorianCalendar $r2;

        r4 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = <javax.xml.bind.DatatypeConverterImpl: javax.xml.datatype.DatatypeFactory datatypeFactory>;

        $r2 = virtualinvoke $r1.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>();

        return $r3;
    }

    public java.lang.String printTime(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl$CalendarFormatter: java.lang.String doFormat(java.lang.String,java.util.Calendar)>("%h:%m:%s%z", r0);

        return $r1;
    }

    public java.util.Calendar parseDate(java.lang.String)
    {
        java.util.GregorianCalendar $r3;
        javax.xml.bind.DatatypeConverterImpl r4;
        java.lang.String r0;
        javax.xml.datatype.DatatypeFactory $r1;
        javax.xml.datatype.XMLGregorianCalendar $r2;

        r4 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        $r1 = <javax.xml.bind.DatatypeConverterImpl: javax.xml.datatype.DatatypeFactory datatypeFactory>;

        $r2 = virtualinvoke $r1.<javax.xml.datatype.DatatypeFactory: javax.xml.datatype.XMLGregorianCalendar newXMLGregorianCalendar(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<javax.xml.datatype.XMLGregorianCalendar: java.util.GregorianCalendar toGregorianCalendar()>();

        return $r3;
    }

    public java.lang.String printDate(java.util.Calendar)
    {
        java.util.Calendar r0;
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.util.Calendar;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printDate(java.util.Calendar)>(r0);

        return $r1;
    }

    public static java.lang.String _printDate(java.util.Calendar)
    {
        java.util.Calendar r3;
        java.lang.StringBuilder $r0, $r1;
        java.lang.String $r2, $r4;

        r3 := @parameter0: java.util.Calendar;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("%Y-%M-%D");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%z");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl$CalendarFormatter: java.lang.String doFormat(java.lang.String,java.util.Calendar)>($r2, r3);

        return $r4;
    }

    public java.lang.String parseAnySimpleType(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public java.lang.String printString(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public java.lang.String printInt(int)
    {
        int i0;
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        i0 := @parameter0: int;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printInt(int)>(i0);

        return $r0;
    }

    public static java.lang.String _printInt(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;
    }

    public java.lang.String printLong(long)
    {
        long l0;
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        l0 := @parameter0: long;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printLong(long)>(l0);

        return $r0;
    }

    public static java.lang.String _printLong(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        return $r0;
    }

    public java.lang.String printDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printDecimal(java.math.BigDecimal)>(r0);

        return $r1;
    }

    public static java.lang.String _printDecimal(java.math.BigDecimal)
    {
        java.math.BigDecimal r0;
        java.lang.String $r1;

        r0 := @parameter0: java.math.BigDecimal;

        $r1 = virtualinvoke r0.<java.math.BigDecimal: java.lang.String toPlainString()>();

        return $r1;
    }

    public java.lang.String printDouble(double)
    {
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;
        double d0;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        d0 := @parameter0: double;

        $r0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printDouble(double)>(d0);

        return $r0;
    }

    public static java.lang.String _printDouble(double)
    {
        byte $b0, $b1;
        java.lang.String $r0;
        double d0;
        boolean $z0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label1;

        return "NaN";

     label1:
        $b0 = d0 cmpl #Infinity;

        if $b0 != 0 goto label2;

        return "INF";

     label2:
        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label3;

        return "-INF";

     label3:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        return $r0;
    }

    public java.lang.String printQName(javax.xml.namespace.QName, javax.xml.namespace.NamespaceContext)
    {
        javax.xml.bind.DatatypeConverterImpl r3;
        javax.xml.namespace.NamespaceContext r1;
        javax.xml.namespace.QName r0;
        java.lang.String $r2;

        r3 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: javax.xml.namespace.NamespaceContext;

        $r2 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printQName(javax.xml.namespace.QName,javax.xml.namespace.NamespaceContext)>(r0, r1);

        return $r2;
    }

    public static java.lang.String _printQName(javax.xml.namespace.QName, javax.xml.namespace.NamespaceContext)
    {
        int $i0;
        javax.xml.namespace.NamespaceContext r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        javax.xml.namespace.QName r1;
        java.lang.String $r2, $r3, $r4, r9;

        r1 := @parameter0: javax.xml.namespace.QName;

        r0 := @parameter1: javax.xml.namespace.NamespaceContext;

        $r2 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r0.<javax.xml.namespace.NamespaceContext: java.lang.String getPrefix(java.lang.String)>($r2);

        $r4 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        r9 = $r4;

        goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r9;
    }

    public java.lang.String printBase64Binary(byte[])
    {
        byte[] r0;
        java.lang.String $r1;
        javax.xml.bind.DatatypeConverterImpl r2;

        r2 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printBase64Binary(byte[])>(r0);

        return $r1;
    }

    public java.lang.String printUnsignedShort(int)
    {
        int i0;
        java.lang.String $r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;
    }

    public java.lang.String printAnySimpleType(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.bind.DatatypeConverterImpl r1;

        r1 := @this: javax.xml.bind.DatatypeConverterImpl;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public static java.lang.String installHook(java.lang.String)
    {
        java.lang.String r1;
        javax.xml.bind.DatatypeConverterInterface $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = <javax.xml.bind.DatatypeConverterImpl: javax.xml.bind.DatatypeConverterInterface theInstance>;

        staticinvoke <javax.xml.bind.DatatypeConverter: void setDatatypeConverter(javax.xml.bind.DatatypeConverterInterface)>($r0);

        return r1;
    }

    private static byte[] initDecodeMap()
    {
        byte[] r0;
        byte $b2, $b5, $b7;
        int $i0, $i1, $i3, $i4, $i6, i8, i9, i10, i11;

        r0 = newarray (byte)[128];

        i8 = 0;

     label1:
        if i8 >= 128 goto label2;

        r0[i8] = -1;

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = 65;

     label3:
        if i9 > 90 goto label4;

        $i6 = i9 - 65;

        $b7 = (byte) $i6;

        r0[i9] = $b7;

        i9 = i9 + 1;

        goto label3;

     label4:
        i10 = 97;

     label5:
        if i10 > 122 goto label6;

        $i3 = i10 - 97;

        $i4 = $i3 + 26;

        $b5 = (byte) $i4;

        r0[i10] = $b5;

        i10 = i10 + 1;

        goto label5;

     label6:
        i11 = 48;

     label7:
        if i11 > 57 goto label8;

        $i0 = i11 - 48;

        $i1 = $i0 + 52;

        $b2 = (byte) $i1;

        r0[i11] = $b2;

        i11 = i11 + 1;

        goto label7;

     label8:
        r0[43] = 62;

        r0[47] = 63;

        r0[61] = 127;

        return r0;
    }

    private static int guessLength(java.lang.String)
    {
        byte[] $r1;
        byte b14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, i13, i15, $i16, $i17, $i18, $i20, $i22;
        java.lang.String r0;
        char $c8;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i13 = $i0 - 1;

     label1:
        if i13 < 0 goto label4;

        $r1 = <javax.xml.bind.DatatypeConverterImpl: byte[] decodeMap>;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        $i16 = (int) $c8;

        b14 = $r1[$i16];

        $i17 = (int) b14;

        if $i17 != 127 goto label2;

        goto label3;

     label2:
        $i18 = (int) b14;

        $i20 = (int) -1;

        if $i18 != $i20 goto label4;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = $i10 / 4;

        $i12 = $i11 * 3;

        return $i12;

     label3:
        $i22 = (int) -1;

        i13 = i13 + $i22;

        goto label1;

     label4:
        i15 = i13 + 1;

        $i9 = $i0 - i15;

        if $i9 <= 2 goto label5;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i5 / 4;

        $i7 = $i6 * 3;

        return $i7;

     label5:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 / 4;

        $i3 = $i2 * 3;

        $i4 = $i3 - $i9;

        return $i4;
    }

    public static byte[] _parseBase64Binary(java.lang.String)
    {
        byte[] r1, r2, $r3, r4;
        byte b3, $b5, $b6, $b10, $b11, $b12, $b14, $b15, $b18, $b20, $b21, $b25;
        int $i0, $i1, $i4, $i7, $i8, $i9, $i13, $i16, $i17, $i19, $i22, $i23, $i24, $i26, i27, i28, i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41;
        java.lang.String r0;
        char $c2;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int guessLength(java.lang.String)>(r0);

        r1 = newarray (byte)[$i0];

        i27 = 0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        r2 = newarray (byte)[4];

        i28 = 0;

        i29 = 0;

     label1:
        if i29 >= $i1 goto label6;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i29);

        $r3 = <javax.xml.bind.DatatypeConverterImpl: byte[] decodeMap>;

        $i30 = (int) $c2;

        b3 = $r3[$i30];

        $i31 = (int) b3;

        $i33 = (int) -1;

        if $i31 == $i33 goto label2;

        $i26 = i28;

        i28 = i28 + 1;

        r2[$i26] = b3;

     label2:
        if i28 != 4 goto label5;

        $i4 = i27;

        i27 = i27 + 1;

        $b5 = r2[0];

        $i34 = (int) $b5;

        $i8 = $i34 << 2;

        $b6 = r2[1];

        $i35 = (int) $b6;

        $i7 = $i35 >> 4;

        $i9 = $i8 | $i7;

        $b10 = (byte) $i9;

        r1[$i4] = $b10;

        $b11 = r2[2];

        $i36 = (int) $b11;

        if $i36 == 127 goto label3;

        $i19 = i27;

        i27 = i27 + 1;

        $b20 = r2[1];

        $i37 = (int) $b20;

        $i23 = $i37 << 4;

        $b21 = r2[2];

        $i38 = (int) $b21;

        $i22 = $i38 >> 2;

        $i24 = $i23 | $i22;

        $b25 = (byte) $i24;

        r1[$i19] = $b25;

     label3:
        $b12 = r2[3];

        $i39 = (int) $b12;

        if $i39 == 127 goto label4;

        $i13 = i27;

        i27 = i27 + 1;

        $b14 = r2[2];

        $i40 = (int) $b14;

        $i16 = $i40 << 6;

        $b15 = r2[3];

        $i41 = (int) $b15;

        $i17 = $i16 | $i41;

        $b18 = (byte) $i17;

        r1[$i13] = $b18;

     label4:
        i28 = 0;

     label5:
        i29 = i29 + 1;

        goto label1;

     label6:
        if $i0 != i27 goto label7;

        return r1;

     label7:
        r4 = newarray (byte)[i27];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, i27);

        return r4;
    }

    private static char[] initEncodeMap()
    {
        char $c2, $c5, $c7;
        int $i0, $i1, $i3, $i4, $i6, i8, i9, i10;
        char[] r0;

        r0 = newarray (char)[64];

        i8 = 0;

     label1:
        if i8 >= 26 goto label2;

        $i6 = 65 + i8;

        $c7 = (char) $i6;

        r0[i8] = $c7;

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = 26;

     label3:
        if i9 >= 52 goto label4;

        $i3 = i9 - 26;

        $i4 = 97 + $i3;

        $c5 = (char) $i4;

        r0[i9] = $c5;

        i9 = i9 + 1;

        goto label3;

     label4:
        i10 = 52;

     label5:
        if i10 >= 62 goto label6;

        $i0 = i10 - 52;

        $i1 = 48 + $i0;

        $c2 = (char) $i1;

        r0[i10] = $c2;

        i10 = i10 + 1;

        goto label5;

     label6:
        r0[62] = 43;

        r0[63] = 47;

        return r0;
    }

    public static char encode(int)
    {
        int i0, $i1;
        char[] $r0;
        char $c2;

        i0 := @parameter0: int;

        $r0 = <javax.xml.bind.DatatypeConverterImpl: char[] encodeMap>;

        $i1 = i0 & 63;

        $c2 = $r0[$i1];

        return $c2;
    }

    public static byte encodeByte(int)
    {
        byte $b3;
        int i0, $i1;
        char[] $r0;
        char $c2;

        i0 := @parameter0: int;

        $r0 = <javax.xml.bind.DatatypeConverterImpl: char[] encodeMap>;

        $i1 = i0 & 63;

        $c2 = $r0[$i1];

        $b3 = (byte) $c2;

        return $b3;
    }

    public static java.lang.String _printBase64Binary(byte[])
    {
        int $i0;
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: java.lang.String _printBase64Binary(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.lang.String _printBase64Binary(byte[], int, int)
    {
        byte[] r1;
        java.lang.AssertionError $r3;
        int i0, $i1, $i2, $i3, i4, $i5, $i6;
        char[] r0;
        java.lang.String $r2;
        boolean $z0;

        r1 := @parameter0: byte[];

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = i0 + 2;

        $i2 = $i1 / 3;

        $i3 = $i2 * 4;

        r0 = newarray (char)[$i3];

        $i5 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: int _printBase64Binary(byte[],int,int,char[],int)>(r1, i4, i0, r0, 0);

        $z0 = <javax.xml.bind.DatatypeConverterImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = lengthof r0;

        if $i5 == $i6 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r0);

        return $r2;
    }

    public static int _printBase64Binary(byte[], int, int, char[], int)
    {
        byte[] r1;
        byte $b2, $b5, $b6, $b8, $b15, $b16, $b19, $b22, $b23, $b26, $b29, $b30, $b32, $b39, $b40, $b42, $b49, $b50;
        char[] r0;
        int i0, i1, $i3, $i7, $i9, $i10, $i11, $i12, $i14, $i17, $i20, $i24, $i27, $i31, $i33, $i34, $i35, $i36, $i38, $i41, $i43, $i44, $i45, $i46, $i48, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, $i64, $i65, $i66, $i67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i76, $i77;
        char $c4, $c13, $c18, $c21, $c25, $c28, $c37, $c47, $c51;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: char[];

        i52 := @parameter4: int;

        i53 = i0;

        i54 = i1;

     label1:
        if i53 < 3 goto label2;

        i55 = i52 + 1;

        $b26 = r1[i54];

        $i64 = (int) $b26;

        $i27 = $i64 >> 2;

        $c28 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i27);

        r0[i52] = $c28;

        i56 = i55 + 1;

        $b29 = r1[i54];

        $b30 = $b29 & 3;

        $i65 = (int) $b30;

        $i35 = $i65 << 4;

        $i31 = i54 + 1;

        $b32 = r1[$i31];

        $i66 = (int) $b32;

        $i33 = $i66 >> 4;

        $i34 = $i33 & 15;

        $i36 = $i35 | $i34;

        $c37 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i36);

        r0[i55] = $c37;

        i57 = i56 + 1;

        $i38 = i54 + 1;

        $b39 = r1[$i38];

        $b40 = $b39 & 15;

        $i67 = (int) $b40;

        $i45 = $i67 << 2;

        $i41 = i54 + 2;

        $b42 = r1[$i41];

        $i68 = (int) $b42;

        $i43 = $i68 >> 6;

        $i44 = $i43 & 3;

        $i46 = $i45 | $i44;

        $c47 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i46);

        r0[i56] = $c47;

        i52 = i57 + 1;

        $i48 = i54 + 2;

        $b49 = r1[$i48];

        $b50 = $b49 & 63;

        $i69 = (int) $b50;

        $c51 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i69);

        r0[i57] = $c51;

        $i71 = (int) -3;

        i53 = i53 + $i71;

        i54 = i54 + 3;

        goto label1;

     label2:
        if i53 != 1 goto label3;

        i58 = i52 + 1;

        $b19 = r1[i54];

        $i72 = (int) $b19;

        $i20 = $i72 >> 2;

        $c21 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i20);

        r0[i52] = $c21;

        i59 = i58 + 1;

        $b22 = r1[i54];

        $b23 = $b22 & 3;

        $i73 = (int) $b23;

        $i24 = $i73 << 4;

        $c25 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i24);

        r0[i58] = $c25;

        i60 = i59 + 1;

        r0[i59] = 61;

        i52 = i60 + 1;

        r0[i60] = 61;

     label3:
        if i53 != 2 goto label4;

        i61 = i52 + 1;

        $b2 = r1[i54];

        $i74 = (int) $b2;

        $i3 = $i74 >> 2;

        $c4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i3);

        r0[i52] = $c4;

        i62 = i61 + 1;

        $b5 = r1[i54];

        $b6 = $b5 & 3;

        $i75 = (int) $b6;

        $i11 = $i75 << 4;

        $i7 = i54 + 1;

        $b8 = r1[$i7];

        $i76 = (int) $b8;

        $i9 = $i76 >> 4;

        $i10 = $i9 & 15;

        $i12 = $i11 | $i10;

        $c13 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i12);

        r0[i61] = $c13;

        i63 = i62 + 1;

        $i14 = i54 + 1;

        $b15 = r1[$i14];

        $b16 = $b15 & 15;

        $i77 = (int) $b16;

        $i17 = $i77 << 2;

        $c18 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char encode(int)>($i17);

        r0[i62] = $c18;

        i52 = i63 + 1;

        r0[i63] = 61;

     label4:
        return i52;
    }

    public static int _printBase64Binary(byte[], int, int, byte[], int)
    {
        byte[] r0, r1;
        byte $b2, $b4, $b5, $b6, $b8, $b13, $b15, $b16, $b18, $b19, $b21, $b22, $b23, $b25, $b26, $b28, $b29, $b30, $b32, $b37, $b39, $b40, $b42, $b47, $b49, $b50, $b51;
        int i0, i1, $i3, $i7, $i9, $i10, $i11, $i12, $i14, $i17, $i20, $i24, $i27, $i31, $i33, $i34, $i35, $i36, $i38, $i41, $i43, $i44, $i45, $i46, $i48, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, $i64, $i65, $i66, $i67, $i68, $i69, $i71, $i72, $i73, $i74, $i75, $i76, $i77;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: byte[];

        i52 := @parameter4: int;

        i53 = i0;

        i54 = i1;

     label1:
        if i53 < 3 goto label2;

        i55 = i52 + 1;

        $b26 = r1[i54];

        $i64 = (int) $b26;

        $i27 = $i64 >> 2;

        $b28 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i27);

        r0[i52] = $b28;

        i56 = i55 + 1;

        $b29 = r1[i54];

        $b30 = $b29 & 3;

        $i65 = (int) $b30;

        $i35 = $i65 << 4;

        $i31 = i54 + 1;

        $b32 = r1[$i31];

        $i66 = (int) $b32;

        $i33 = $i66 >> 4;

        $i34 = $i33 & 15;

        $i36 = $i35 | $i34;

        $b37 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i36);

        r0[i55] = $b37;

        i57 = i56 + 1;

        $i38 = i54 + 1;

        $b39 = r1[$i38];

        $b40 = $b39 & 15;

        $i67 = (int) $b40;

        $i45 = $i67 << 2;

        $i41 = i54 + 2;

        $b42 = r1[$i41];

        $i68 = (int) $b42;

        $i43 = $i68 >> 6;

        $i44 = $i43 & 3;

        $i46 = $i45 | $i44;

        $b47 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i46);

        r0[i56] = $b47;

        i52 = i57 + 1;

        $i48 = i54 + 2;

        $b49 = r1[$i48];

        $b50 = $b49 & 63;

        $i69 = (int) $b50;

        $b51 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i69);

        r0[i57] = $b51;

        $i71 = (int) -3;

        i53 = i53 + $i71;

        i54 = i54 + 3;

        goto label1;

     label2:
        if i53 != 1 goto label3;

        i58 = i52 + 1;

        $b19 = r1[i54];

        $i72 = (int) $b19;

        $i20 = $i72 >> 2;

        $b21 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i20);

        r0[i52] = $b21;

        i59 = i58 + 1;

        $b22 = r1[i54];

        $b23 = $b22 & 3;

        $i73 = (int) $b23;

        $i24 = $i73 << 4;

        $b25 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i24);

        r0[i58] = $b25;

        i60 = i59 + 1;

        r0[i59] = 61;

        i52 = i60 + 1;

        r0[i60] = 61;

     label3:
        if i53 != 2 goto label4;

        i61 = i52 + 1;

        $b2 = r1[i54];

        $i74 = (int) $b2;

        $i3 = $i74 >> 2;

        $b4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i3);

        r0[i52] = $b4;

        i62 = i61 + 1;

        $b5 = r1[i54];

        $b6 = $b5 & 3;

        $i75 = (int) $b6;

        $i11 = $i75 << 4;

        $i7 = i54 + 1;

        $b8 = r1[$i7];

        $i76 = (int) $b8;

        $i9 = $i76 >> 4;

        $i10 = $i9 & 15;

        $i12 = $i11 | $i10;

        $b13 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i12);

        r0[i61] = $b13;

        i63 = i62 + 1;

        $i14 = i54 + 1;

        $b15 = r1[$i14];

        $b16 = $b15 & 15;

        $i77 = (int) $b16;

        $i17 = $i77 << 2;

        $b18 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte encodeByte(int)>($i17);

        r0[i62] = $b18;

        i52 = i63 + 1;

        r0[i63] = 61;

     label4:
        return i52;
    }

    private static java.lang.CharSequence removeOptionalPlus(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, r2;
        char $c1, $c2;
        java.lang.NumberFormatException $r3;
        int $i0, $i3, $i4, $i5, $i6;

        r2 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if $i0 <= 1 goto label1;

        $c1 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(0);

        $i3 = (int) $c1;

        if $i3 == 43 goto label2;

     label1:
        return r2;

     label2:
        $r0 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, $i0);

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>(0);

        $i4 = (int) $c2;

        if 48 > $i4 goto label3;

        $i5 = (int) $c2;

        if $i5 > 57 goto label3;

        return $r0;

     label3:
        $i6 = (int) $c2;

        if 46 != $i6 goto label4;

        return $r0;

     label4:
        $r3 = new java.lang.NumberFormatException;

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>()>();

        throw $r3;
    }

    private static boolean isDigitOrPeriodOrSign(char)
    {
        int $i1, $i2, $i3, $i4, $i5;
        char c0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if 48 > $i1 goto label1;

        $i2 = (int) c0;

        if $i2 > 57 goto label1;

        return 1;

     label1:
        $i3 = (int) c0;

        if $i3 == 43 goto label2;

        $i4 = (int) c0;

        if $i4 == 45 goto label2;

        $i5 = (int) c0;

        if $i5 != 46 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        byte[] $r4;
        javax.xml.datatype.DatatypeConfigurationException $r7;
        java.lang.Error $r8;
        javax.xml.datatype.DatatypeFactory $r6;
        javax.xml.bind.DatatypeConverterImpl $r1;
        char[] $r3, $r5;
        java.lang.Class $r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        <javax.xml.bind.DatatypeConverterImpl: byte PADDING> = 127;

        $r0 = class "Ljavax/xml/bind/DatatypeConverterImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <javax.xml.bind.DatatypeConverterImpl: boolean $assertionsDisabled> = $z1;

        $r1 = new javax.xml.bind.DatatypeConverterImpl;

        specialinvoke $r1.<javax.xml.bind.DatatypeConverterImpl: void <init>()>();

        <javax.xml.bind.DatatypeConverterImpl: javax.xml.bind.DatatypeConverterInterface theInstance> = $r1;

        $r2 = "0123456789ABCDEF";

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        <javax.xml.bind.DatatypeConverterImpl: char[] hexCode> = $r3;

        $r4 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: byte[] initDecodeMap()>();

        <javax.xml.bind.DatatypeConverterImpl: byte[] decodeMap> = $r4;

        $r5 = staticinvoke <javax.xml.bind.DatatypeConverterImpl: char[] initEncodeMap()>();

        <javax.xml.bind.DatatypeConverterImpl: char[] encodeMap> = $r5;

     label3:
        $r6 = staticinvoke <javax.xml.datatype.DatatypeFactory: javax.xml.datatype.DatatypeFactory newInstance()>();

        <javax.xml.bind.DatatypeConverterImpl: javax.xml.datatype.DatatypeFactory datatypeFactory> = $r6;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label6:
        return;

        catch javax.xml.datatype.DatatypeConfigurationException from label3 to label4 with label5;
    }
}
