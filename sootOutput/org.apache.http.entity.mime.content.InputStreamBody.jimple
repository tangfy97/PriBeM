public class org.apache.http.entity.mime.content.InputStreamBody extends org.apache.http.entity.mime.content.AbstractContentBody
{
    private final java.io.InputStream in;
    private final java.lang.String filename;

    public void <init>(java.io.InputStream, java.lang.String, java.lang.String)
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;
        java.lang.String r1, r3;
        java.lang.IllegalArgumentException $r4;
        java.io.InputStream r2;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        r2 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.mime.content.AbstractContentBody: void <init>(java.lang.String)>(r1);

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r4;

     label1:
        r0.<org.apache.http.entity.mime.content.InputStreamBody: java.io.InputStream in> = r2;

        r0.<org.apache.http.entity.mime.content.InputStreamBody: java.lang.String filename> = r3;

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.http.entity.mime.content.InputStreamBody: void <init>(java.io.InputStream,java.lang.String,java.lang.String)>(r1, "application/octet-stream", r2);

        return;
    }

    public java.io.InputStream getInputStream()
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        $r1 = r0.<org.apache.http.entity.mime.content.InputStreamBody: java.io.InputStream in>;

        return $r1;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        org.apache.http.entity.mime.content.InputStreamBody r2;
        java.lang.Throwable $r6;
        byte[] r1;
        java.lang.IllegalArgumentException $r8;
        int $i0, $i2;
        java.io.InputStream $r3, $r4, $r7;

        r2 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r8;

     label1:
        r1 = newarray (byte)[4096];

     label2:
        $r3 = r2.<org.apache.http.entity.mime.content.InputStreamBody: java.io.InputStream in>;

        $i0 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>(r1);

        $i2 = (int) -1;

        if $i0 == $i2 goto label3;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        goto label2;

     label3:
        virtualinvoke r0.<java.io.OutputStream: void flush()>();

     label4:
        $r4 = r2.<org.apache.http.entity.mime.content.InputStreamBody: java.io.InputStream in>;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

        goto label7;

     label5:
        $r6 := @caughtexception;

     label6:
        $r7 = r2.<org.apache.http.entity.mime.content.InputStreamBody: java.io.InputStream in>;

        virtualinvoke $r7.<java.io.InputStream: void close()>();

        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String getTransferEncoding()
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        return "binary";
    }

    public java.lang.String getCharset()
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        return null;
    }

    public long getContentLength()
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        return -1L;
    }

    public java.lang.String getFilename()
    {
        org.apache.http.entity.mime.content.InputStreamBody r0;
        java.lang.String $r1;

        r0 := @this: org.apache.http.entity.mime.content.InputStreamBody;

        $r1 = r0.<org.apache.http.entity.mime.content.InputStreamBody: java.lang.String filename>;

        return $r1;
    }
}
