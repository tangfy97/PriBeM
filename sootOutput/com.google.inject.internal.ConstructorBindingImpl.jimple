final class com.google.inject.internal.ConstructorBindingImpl extends com.google.inject.internal.BindingImpl implements com.google.inject.spi.ConstructorBinding
{
    private final com.google.inject.internal.ConstructorBindingImpl$Factory factory;
    private final com.google.inject.spi.InjectionPoint constructorInjectionPoint;

    private void <init>(com.google.inject.internal.InjectorImpl, com.google.inject.Key, java.lang.Object, com.google.inject.internal.InternalFactory, com.google.inject.internal.Scoping, com.google.inject.internal.ConstructorBindingImpl$Factory, com.google.inject.spi.InjectionPoint)
    {
        com.google.inject.internal.Scoping r5;
        com.google.inject.Key r2;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.internal.InjectorImpl r1;
        com.google.inject.spi.InjectionPoint r7;
        com.google.inject.internal.InternalFactory r4;
        com.google.inject.internal.ConstructorBindingImpl$Factory r6;
        java.lang.Object r3;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r1 := @parameter0: com.google.inject.internal.InjectorImpl;

        r2 := @parameter1: com.google.inject.Key;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: com.google.inject.internal.InternalFactory;

        r5 := @parameter4: com.google.inject.internal.Scoping;

        r6 := @parameter5: com.google.inject.internal.ConstructorBindingImpl$Factory;

        r7 := @parameter6: com.google.inject.spi.InjectionPoint;

        specialinvoke r0.<com.google.inject.internal.BindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping)>(r1, r2, r3, r4, r5);

        r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory> = r6;

        r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint> = r7;

        return;
    }

    public void <init>(com.google.inject.Key, java.lang.Object, com.google.inject.internal.Scoping, com.google.inject.spi.InjectionPoint, java.util.Set)
    {
        com.google.inject.internal.ConstructorInjector $r8;
        com.google.inject.internal.Scoping r3;
        com.google.inject.Key r2;
        com.google.inject.internal.ConstructionProxy $r7;
        java.util.Set r9;
        com.google.inject.internal.DefaultConstructionProxyFactory $r5;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.spi.InjectionPoint r6;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r4, $r10;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r2 := @parameter0: com.google.inject.Key;

        r1 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.google.inject.internal.Scoping;

        r6 := @parameter3: com.google.inject.spi.InjectionPoint;

        r9 := @parameter4: java.util.Set;

        specialinvoke r0.<com.google.inject.internal.BindingImpl: void <init>(java.lang.Object,com.google.inject.Key,com.google.inject.internal.Scoping)>(r1, r2, r3);

        $r4 = new com.google.inject.internal.ConstructorBindingImpl$Factory;

        specialinvoke $r4.<com.google.inject.internal.ConstructorBindingImpl$Factory: void <init>(boolean,com.google.inject.Key)>(0, r2);

        r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory> = $r4;

        $r5 = new com.google.inject.internal.DefaultConstructionProxyFactory;

        specialinvoke $r5.<com.google.inject.internal.DefaultConstructionProxyFactory: void <init>(com.google.inject.spi.InjectionPoint)>(r6);

        $r7 = virtualinvoke $r5.<com.google.inject.internal.DefaultConstructionProxyFactory: com.google.inject.internal.ConstructionProxy create()>();

        r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint> = r6;

        $r10 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r8 = new com.google.inject.internal.ConstructorInjector;

        specialinvoke $r8.<com.google.inject.internal.ConstructorInjector: void <init>(java.util.Set,com.google.inject.internal.ConstructionProxy,com.google.inject.internal.SingleParameterInjector[],com.google.inject.internal.MembersInjectorImpl)>(r9, $r7, null, null);

        staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$002(com.google.inject.internal.ConstructorBindingImpl$Factory,com.google.inject.internal.ConstructorInjector)>($r10, $r8);

        return;
    }

    static com.google.inject.internal.ConstructorBindingImpl create(com.google.inject.internal.InjectorImpl, com.google.inject.Key, com.google.inject.spi.InjectionPoint, java.lang.Object, com.google.inject.internal.Scoping, com.google.inject.internal.Errors, boolean) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.Scoping $r9, r18;
        com.google.inject.Key r3;
        com.google.inject.internal.ConstructorBindingImpl $r22;
        com.google.inject.internal.ErrorsException $r16;
        int $i0, $i1;
        boolean $z0, $z1, $z2, z3;
        java.lang.reflect.Member $r6;
        java.util.Collection $r14;
        com.google.inject.ConfigurationException $r13;
        com.google.inject.internal.Errors r0, $r10, $r15;
        com.google.inject.internal.InjectorImpl r4;
        com.google.inject.spi.InjectionPoint r17;
        com.google.inject.internal.InternalFactory $r21;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r20;
        java.lang.Class r2, $r7, $r8, $r19;
        java.lang.Object r5;
        com.google.inject.TypeLiteral $r1, $r11, $r12;

        r4 := @parameter0: com.google.inject.internal.InjectorImpl;

        r3 := @parameter1: com.google.inject.Key;

        r17 := @parameter2: com.google.inject.spi.InjectionPoint;

        r5 := @parameter3: java.lang.Object;

        r18 := @parameter4: com.google.inject.internal.Scoping;

        r0 := @parameter5: com.google.inject.internal.Errors;

        z3 := @parameter6: boolean;

        $i0 = virtualinvoke r0.<com.google.inject.internal.Errors: int size()>();

        if r17 != null goto label1;

        $r12 = virtualinvoke r3.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r19 = virtualinvoke $r12.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r17.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral getDeclaringType()>();

        $r19 = virtualinvoke $r1.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

     label2:
        r2 = $r19;

        $i1 = virtualinvoke $r19.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i1);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors missingImplementation(com.google.inject.Key)>(r3);

     label3:
        $z1 = staticinvoke <com.google.inject.internal.util.$Classes: boolean isInnerClass(java.lang.Class)>(r2);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors cannotInjectInnerClass(java.lang.Class)>(r2);

     label4:
        virtualinvoke r0.<com.google.inject.internal.Errors: void throwIfNewErrors(int)>($i0);

        if r17 != null goto label8;

     label5:
        $r11 = virtualinvoke r3.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        r17 = staticinvoke <com.google.inject.spi.InjectionPoint: com.google.inject.spi.InjectionPoint forConstructorOf(com.google.inject.TypeLiteral)>($r11);

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<com.google.inject.ConfigurationException: java.util.Collection getErrorMessages()>();

        $r15 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors merge(java.util.Collection)>($r14);

        $r16 = virtualinvoke $r15.<com.google.inject.internal.Errors: com.google.inject.internal.ErrorsException toException()>();

        throw $r16;

     label8:
        $z2 = virtualinvoke r18.<com.google.inject.internal.Scoping: boolean isExplicitlyScoped()>();

        if $z2 != 0 goto label9;

        $r6 = virtualinvoke r17.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        $r7 = interfaceinvoke $r6.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r8 = staticinvoke <com.google.inject.internal.Annotations: java.lang.Class findScopeAnnotation(com.google.inject.internal.Errors,java.lang.Class)>(r0, $r7);

        if $r8 == null goto label9;

        $r9 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping forAnnotation(java.lang.Class)>($r8);

        $r10 = virtualinvoke r0.<com.google.inject.internal.Errors: com.google.inject.internal.Errors withSource(java.lang.Object)>(r2);

        r18 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.Scoping makeInjectable(com.google.inject.internal.Scoping,com.google.inject.internal.InjectorImpl,com.google.inject.internal.Errors)>($r9, r4, $r10);

     label9:
        virtualinvoke r0.<com.google.inject.internal.Errors: void throwIfNewErrors(int)>($i0);

        $r20 = new com.google.inject.internal.ConstructorBindingImpl$Factory;

        specialinvoke $r20.<com.google.inject.internal.ConstructorBindingImpl$Factory: void <init>(boolean,com.google.inject.Key)>(z3, r3);

        $r21 = staticinvoke <com.google.inject.internal.Scoping: com.google.inject.internal.InternalFactory scope(com.google.inject.Key,com.google.inject.internal.InjectorImpl,com.google.inject.internal.InternalFactory,java.lang.Object,com.google.inject.internal.Scoping)>(r3, r4, $r20, r5, r18);

        $r22 = new com.google.inject.internal.ConstructorBindingImpl;

        specialinvoke $r22.<com.google.inject.internal.ConstructorBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.internal.ConstructorBindingImpl$Factory,com.google.inject.spi.InjectionPoint)>(r4, r3, r5, $r21, r18, $r20, r17);

        return $r22;

        catch com.google.inject.ConfigurationException from label5 to label6 with label7;
    }

    public void initialize(com.google.inject.internal.InjectorImpl, com.google.inject.internal.Errors) throws com.google.inject.internal.ErrorsException
    {
        com.google.inject.internal.InjectorImpl$InjectorOptions $r2;
        com.google.inject.internal.ConstructorInjector $r8;
        com.google.inject.internal.ConstructorInjectorStore $r6;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.internal.Errors r4;
        com.google.inject.internal.InjectorImpl r1;
        com.google.inject.spi.InjectionPoint $r5;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r3, $r7;
        boolean $z0, $z1;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r1 := @parameter0: com.google.inject.internal.InjectorImpl;

        r4 := @parameter1: com.google.inject.internal.Errors;

        $r3 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.InjectorImpl$InjectorOptions options>;

        $z0 = $r2.<com.google.inject.internal.InjectorImpl$InjectorOptions: boolean disableCircularProxies>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: boolean access$102(com.google.inject.internal.ConstructorBindingImpl$Factory,boolean)>($r3, $z1);

        $r7 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r6 = r1.<com.google.inject.internal.InjectorImpl: com.google.inject.internal.ConstructorInjectorStore constructors>;

        $r5 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        $r8 = virtualinvoke $r6.<com.google.inject.internal.ConstructorInjectorStore: com.google.inject.internal.ConstructorInjector get(com.google.inject.spi.InjectionPoint,com.google.inject.internal.Errors)>($r5, r4);

        staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$002(com.google.inject.internal.ConstructorBindingImpl$Factory,com.google.inject.internal.ConstructorInjector)>($r7, $r8);

        return;
    }

    boolean isInitialized()
    {
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.internal.ConstructorInjector $r2;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r1;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r1 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    com.google.inject.spi.InjectionPoint getInternalConstructor()
    {
        com.google.inject.internal.ConstructorInjector $r2, $r5;
        com.google.inject.internal.ConstructionProxy $r6;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.spi.InjectionPoint $r3, $r7;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r1, $r4;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r1 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r1);

        if $r2 == null goto label1;

        $r4 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r5 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r4);

        $r6 = virtualinvoke $r5.<com.google.inject.internal.ConstructorInjector: com.google.inject.internal.ConstructionProxy getConstructionProxy()>();

        $r7 = interfaceinvoke $r6.<com.google.inject.internal.ConstructionProxy: com.google.inject.spi.InjectionPoint getInjectionPoint()>();

        return $r7;

     label1:
        $r3 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        return $r3;
    }

    java.util.Set getInternalDependencies()
    {
        com.google.inject.internal.ConstructorInjector $r3;
        java.util.Set $r6, $r10, $r13;
        com.google.inject.ConfigurationException $r11;
        com.google.inject.internal.ConstructorBindingImpl r1;
        com.google.inject.spi.InjectionPoint $r4, $r7, $r8;
        com.google.inject.internal.util.$ImmutableSet $r12;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r2;
        com.google.inject.internal.util.$ImmutableSet$Builder $r0, $r5;
        com.google.inject.TypeLiteral $r9;

        r1 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r0 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet$Builder builder()>();

        $r2 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r3 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r2);

        if $r3 != null goto label4;

        $r7 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object)>($r7);

     label1:
        $r8 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        $r9 = virtualinvoke $r8.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral getDeclaringType()>();

        $r10 = staticinvoke <com.google.inject.spi.InjectionPoint: java.util.Set forInstanceMethodsAndFields(com.google.inject.TypeLiteral)>($r9);

        virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable)>($r10);

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        goto label5;

     label4:
        $r4 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint getConstructor()>();

        $r5 = virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object)>($r4);

        $r6 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: java.util.Set getInjectableMembers()>();

        virtualinvoke $r5.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable)>($r6);

     label5:
        $r12 = virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet build()>();

        $r13 = staticinvoke <com.google.inject.spi.Dependency: java.util.Set forInjectionPoints(java.util.Set)>($r12);

        return $r13;

        catch com.google.inject.ConfigurationException from label1 to label2 with label3;
    }

    public java.lang.Object acceptTargetVisitor(com.google.inject.spi.BindingTargetVisitor)
    {
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.internal.ConstructorInjector $r2;
        com.google.inject.spi.BindingTargetVisitor r3;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r3 := @parameter0: com.google.inject.spi.BindingTargetVisitor;

        $r1 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "not initialized");

        $r4 = interfaceinvoke r3.<com.google.inject.spi.BindingTargetVisitor: java.lang.Object visit(com.google.inject.spi.ConstructorBinding)>(r0);

        return $r4;
    }

    public com.google.inject.spi.InjectionPoint getConstructor()
    {
        com.google.inject.internal.ConstructorInjector $r2, $r4;
        com.google.inject.internal.ConstructionProxy $r5;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.spi.InjectionPoint $r6;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r1 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Binding is not ready");

        $r3 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r4 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r3);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.ConstructorInjector: com.google.inject.internal.ConstructionProxy getConstructionProxy()>();

        $r6 = interfaceinvoke $r5.<com.google.inject.internal.ConstructionProxy: com.google.inject.spi.InjectionPoint getInjectionPoint()>();

        return $r6;
    }

    public java.util.Set getInjectableMembers()
    {
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.internal.ConstructorInjector $r2, $r4;
        com.google.inject.internal.util.$ImmutableSet $r5;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r1 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Binding is not ready");

        $r3 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r4 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r3);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.ConstructorInjector: com.google.inject.internal.util.$ImmutableSet getInjectableMembers()>();

        return $r5;
    }

    public java.util.Map getMethodInterceptors()
    {
        com.google.inject.internal.ConstructorInjector $r2, $r4;
        com.google.inject.internal.ConstructionProxy $r5;
        com.google.inject.internal.util.$ImmutableMap $r6;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r1, $r3;
        boolean $z0;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r1 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r2 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Binding is not ready");

        $r3 = r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r4 = staticinvoke <com.google.inject.internal.ConstructorBindingImpl$Factory: com.google.inject.internal.ConstructorInjector access$000(com.google.inject.internal.ConstructorBindingImpl$Factory)>($r3);

        $r5 = virtualinvoke $r4.<com.google.inject.internal.ConstructorInjector: com.google.inject.internal.ConstructionProxy getConstructionProxy()>();

        $r6 = interfaceinvoke $r5.<com.google.inject.internal.ConstructionProxy: com.google.inject.internal.util.$ImmutableMap getMethodInterceptors()>();

        return $r6;
    }

    public java.util.Set getDependencies()
    {
        java.util.Set $r4, $r7;
        com.google.inject.internal.ConstructorBindingImpl r1;
        com.google.inject.spi.InjectionPoint $r2;
        com.google.inject.internal.util.$ImmutableSet $r6;
        com.google.inject.internal.util.$ImmutableSet$Builder $r0, $r3, $r5;

        r1 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r0 = new com.google.inject.internal.util.$ImmutableSet$Builder;

        specialinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: void <init>()>();

        $r2 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint getConstructor()>();

        $r3 = virtualinvoke $r0.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder add(java.lang.Object)>($r2);

        $r4 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: java.util.Set getInjectableMembers()>();

        $r5 = virtualinvoke $r3.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet$Builder addAll(java.lang.Iterable)>($r4);

        $r6 = virtualinvoke $r5.<com.google.inject.internal.util.$ImmutableSet$Builder: com.google.inject.internal.util.$ImmutableSet build()>();

        $r7 = staticinvoke <com.google.inject.spi.Dependency: java.util.Set forInjectionPoints(java.util.Set)>($r6);

        return $r7;
    }

    protected com.google.inject.internal.BindingImpl withScoping(com.google.inject.internal.Scoping)
    {
        com.google.inject.internal.Scoping r4;
        com.google.inject.Key $r2;
        com.google.inject.internal.ConstructorBindingImpl $r0, r1;
        com.google.inject.spi.InjectionPoint $r5;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r6, $r7;
        java.lang.Object $r3;

        r1 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r4 := @parameter0: com.google.inject.internal.Scoping;

        $r0 = new com.google.inject.internal.ConstructorBindingImpl;

        $r2 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.Key getKey()>();

        $r3 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: java.lang.Object getSource()>();

        $r7 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r6 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r5 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        specialinvoke $r0.<com.google.inject.internal.ConstructorBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.internal.ConstructorBindingImpl$Factory,com.google.inject.spi.InjectionPoint)>(null, $r2, $r3, $r7, r4, $r6, $r5);

        return $r0;
    }

    protected com.google.inject.internal.BindingImpl withKey(com.google.inject.Key)
    {
        com.google.inject.internal.Scoping $r5;
        com.google.inject.Key r1;
        com.google.inject.internal.ConstructorBindingImpl $r0, r2;
        com.google.inject.spi.InjectionPoint $r6;
        com.google.inject.internal.ConstructorBindingImpl$Factory $r4, $r7;
        java.lang.Object $r3;

        r2 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r1 := @parameter0: com.google.inject.Key;

        $r0 = new com.google.inject.internal.ConstructorBindingImpl;

        $r3 = virtualinvoke r2.<com.google.inject.internal.ConstructorBindingImpl: java.lang.Object getSource()>();

        $r4 = r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r5 = virtualinvoke r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $r7 = r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.ConstructorBindingImpl$Factory factory>;

        $r6 = r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        specialinvoke $r0.<com.google.inject.internal.ConstructorBindingImpl: void <init>(com.google.inject.internal.InjectorImpl,com.google.inject.Key,java.lang.Object,com.google.inject.internal.InternalFactory,com.google.inject.internal.Scoping,com.google.inject.internal.ConstructorBindingImpl$Factory,com.google.inject.spi.InjectionPoint)>(null, r1, $r3, $r4, $r5, $r7, $r6);

        return $r0;
    }

    public void applyTo(com.google.inject.Binder)
    {
        com.google.inject.internal.Scoping $r2;
        java.lang.reflect.Member $r9;
        com.google.inject.Key $r6;
        java.lang.reflect.Constructor $r10;
        com.google.inject.binder.ScopedBindingBuilder $r12;
        com.google.inject.internal.ConstructorBindingImpl r0;
        com.google.inject.spi.InjectionPoint $r1, $r8;
        com.google.inject.Binder r3, $r5;
        com.google.inject.binder.LinkedBindingBuilder $r7;
        java.lang.Object $r4;
        com.google.inject.TypeLiteral $r11;

        r0 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r3 := @parameter0: com.google.inject.Binder;

        $r1 = virtualinvoke r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint getConstructor()>();

        $r2 = virtualinvoke r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $r4 = virtualinvoke r0.<com.google.inject.internal.ConstructorBindingImpl: java.lang.Object getSource()>();

        $r5 = interfaceinvoke r3.<com.google.inject.Binder: com.google.inject.Binder withSource(java.lang.Object)>($r4);

        $r6 = virtualinvoke r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.Key getKey()>();

        $r7 = interfaceinvoke $r5.<com.google.inject.Binder: com.google.inject.binder.LinkedBindingBuilder bind(com.google.inject.Key)>($r6);

        $r8 = virtualinvoke r0.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint getConstructor()>();

        $r9 = virtualinvoke $r8.<com.google.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();

        $r10 = (java.lang.reflect.Constructor) $r9;

        $r11 = virtualinvoke $r1.<com.google.inject.spi.InjectionPoint: com.google.inject.TypeLiteral getDeclaringType()>();

        $r12 = interfaceinvoke $r7.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor,com.google.inject.TypeLiteral)>($r10, $r11);

        virtualinvoke $r2.<com.google.inject.internal.Scoping: void applyTo(com.google.inject.binder.ScopedBindingBuilder)>($r12);

        return;
    }

    public java.lang.String toString()
    {
        com.google.inject.internal.Scoping $r6;
        com.google.inject.Key $r2;
        com.google.inject.internal.ConstructorBindingImpl r1;
        com.google.inject.internal.util.$ToStringBuilder $r0, $r3, $r5, $r7;
        java.lang.Object $r4;
        java.lang.String $r8;

        r1 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r0 = new com.google.inject.internal.util.$ToStringBuilder;

        specialinvoke $r0.<com.google.inject.internal.util.$ToStringBuilder: void <init>(java.lang.Class)>(class "Lcom/google/inject/spi/ConstructorBinding;");

        $r2 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.Key getKey()>();

        $r3 = virtualinvoke $r0.<com.google.inject.internal.util.$ToStringBuilder: com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object)>("key", $r2);

        $r4 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: java.lang.Object getSource()>();

        $r5 = virtualinvoke $r3.<com.google.inject.internal.util.$ToStringBuilder: com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object)>("source", $r4);

        $r6 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $r7 = virtualinvoke $r5.<com.google.inject.internal.util.$ToStringBuilder: com.google.inject.internal.util.$ToStringBuilder add(java.lang.String,java.lang.Object)>("scope", $r6);

        $r8 = virtualinvoke $r7.<com.google.inject.internal.util.$ToStringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public boolean equals(java.lang.Object)
    {
        com.google.inject.internal.Scoping $r5, $r6;
        com.google.inject.Key $r3, $r4;
        com.google.inject.internal.ConstructorBindingImpl r1, r2;
        com.google.inject.spi.InjectionPoint $r7, $r8;
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: com.google.inject.internal.ConstructorBindingImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.google.inject.internal.ConstructorBindingImpl;

        if $z0 == 0 goto label3;

        r1 = (com.google.inject.internal.ConstructorBindingImpl) r0;

        $r3 = virtualinvoke r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.Key getKey()>();

        $r4 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.Key getKey()>();

        $z1 = virtualinvoke $r3.<com.google.inject.Key: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $r6 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $z2 = virtualinvoke $r5.<com.google.inject.internal.Scoping: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label1;

        $r8 = r2.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        $r7 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        $z3 = staticinvoke <com.google.inject.internal.util.$Objects: boolean equal(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    public int hashCode()
    {
        com.google.inject.internal.ConstructorBindingImpl r1;
        java.lang.Object[] $r0;
        com.google.inject.internal.Scoping $r3;
        com.google.inject.spi.InjectionPoint $r4;
        com.google.inject.Key $r2;
        int $i0;

        r1 := @this: com.google.inject.internal.ConstructorBindingImpl;

        $r0 = newarray (java.lang.Object)[3];

        $r2 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.Key getKey()>();

        $r0[0] = $r2;

        $r3 = virtualinvoke r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.internal.Scoping getScoping()>();

        $r0[1] = $r3;

        $r4 = r1.<com.google.inject.internal.ConstructorBindingImpl: com.google.inject.spi.InjectionPoint constructorInjectionPoint>;

        $r0[2] = $r4;

        $i0 = staticinvoke <com.google.inject.internal.util.$Objects: int hashCode(java.lang.Object[])>($r0);

        return $i0;
    }
}
