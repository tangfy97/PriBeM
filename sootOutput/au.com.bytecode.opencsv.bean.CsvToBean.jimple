public class au.com.bytecode.opencsv.bean.CsvToBean extends java.lang.Object
{
    java.util.Map editorMap;

    public void <init>()
    {
        au.com.bytecode.opencsv.bean.CsvToBean r0;

        r0 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<au.com.bytecode.opencsv.bean.CsvToBean: java.util.Map editorMap> = null;

        return;
    }

    public java.util.List parse(au.com.bytecode.opencsv.bean.MappingStrategy, java.io.Reader)
    {
        au.com.bytecode.opencsv.bean.CsvToBean r0;
        java.util.List $r4;
        au.com.bytecode.opencsv.CSVReader $r2;
        au.com.bytecode.opencsv.bean.MappingStrategy r1;
        java.io.Reader r3;

        r0 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r1 := @parameter0: au.com.bytecode.opencsv.bean.MappingStrategy;

        r3 := @parameter1: java.io.Reader;

        $r2 = new au.com.bytecode.opencsv.CSVReader;

        specialinvoke $r2.<au.com.bytecode.opencsv.CSVReader: void <init>(java.io.Reader)>(r3);

        $r4 = virtualinvoke r0.<au.com.bytecode.opencsv.bean.CsvToBean: java.util.List parse(au.com.bytecode.opencsv.bean.MappingStrategy,au.com.bytecode.opencsv.CSVReader)>(r1, $r2);

        return $r4;
    }

    public java.util.List parse(au.com.bytecode.opencsv.bean.MappingStrategy, au.com.bytecode.opencsv.CSVReader)
    {
        au.com.bytecode.opencsv.bean.CsvToBean r4;
        java.lang.String[] $r3;
        java.lang.RuntimeException $r7;
        java.lang.Exception $r6;
        java.util.ArrayList $r2;
        au.com.bytecode.opencsv.CSVReader r1;
        au.com.bytecode.opencsv.bean.MappingStrategy r0;
        java.lang.Object $r5;

        r4 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r0 := @parameter0: au.com.bytecode.opencsv.bean.MappingStrategy;

        r1 := @parameter1: au.com.bytecode.opencsv.CSVReader;

     label1:
        interfaceinvoke r0.<au.com.bytecode.opencsv.bean.MappingStrategy: void captureHeader(au.com.bytecode.opencsv.CSVReader)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label2:
        $r3 = virtualinvoke r1.<au.com.bytecode.opencsv.CSVReader: java.lang.String[] readNext()>();

        if null == $r3 goto label3;

        $r5 = virtualinvoke r4.<au.com.bytecode.opencsv.bean.CsvToBean: java.lang.Object processLine(au.com.bytecode.opencsv.bean.MappingStrategy,java.lang.String[])>(r0, $r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label2;

     label3:
        return $r2;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error parsing CSV!", $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    protected java.lang.Object processLine(au.com.bytecode.opencsv.bean.MappingStrategy, java.lang.String[]) throws java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException, java.beans.IntrospectionException
    {
        au.com.bytecode.opencsv.bean.CsvToBean r5;
        java.lang.Object[] $r8;
        java.lang.String[] r2;
        java.beans.PropertyDescriptor $r4;
        int $i0, i1;
        au.com.bytecode.opencsv.bean.MappingStrategy r0;
        java.lang.Object $r1, $r6;
        java.lang.String r3;
        java.lang.reflect.Method $r7;

        r5 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r0 := @parameter0: au.com.bytecode.opencsv.bean.MappingStrategy;

        r2 := @parameter1: java.lang.String[];

        $r1 = interfaceinvoke r0.<au.com.bytecode.opencsv.bean.MappingStrategy: java.lang.Object createBean()>();

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label3;

        r3 = r2[i1];

        $r4 = interfaceinvoke r0.<au.com.bytecode.opencsv.bean.MappingStrategy: java.beans.PropertyDescriptor findDescriptor(int)>(i1);

        if null == $r4 goto label2;

        $r6 = virtualinvoke r5.<au.com.bytecode.opencsv.bean.CsvToBean: java.lang.Object convertValue(java.lang.String,java.beans.PropertyDescriptor)>(r3, $r4);

        $r7 = virtualinvoke $r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r6;

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r8);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r1;
    }

    protected java.lang.Object convertValue(java.lang.String, java.beans.PropertyDescriptor) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        au.com.bytecode.opencsv.bean.CsvToBean r0;
        java.beans.PropertyEditor $r2;
        java.beans.PropertyDescriptor r1;
        java.lang.Object r5;
        java.lang.String r3, $r4;

        r0 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.beans.PropertyDescriptor;

        $r2 = virtualinvoke r0.<au.com.bytecode.opencsv.bean.CsvToBean: java.beans.PropertyEditor getPropertyEditor(java.beans.PropertyDescriptor)>(r1);

        r5 = r3;

        if null == $r2 goto label1;

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r2.<java.beans.PropertyEditor: void setAsText(java.lang.String)>($r4);

        r5 = interfaceinvoke $r2.<java.beans.PropertyEditor: java.lang.Object getValue()>();

     label1:
        return r5;
    }

    private java.beans.PropertyEditor getPropertyEditorValue(java.lang.Class)
    {
        au.com.bytecode.opencsv.bean.CsvToBean r0;
        java.beans.PropertyEditor $r5, $r7, r8;
        java.util.HashMap $r6;
        java.util.Map $r1, $r3;
        java.lang.Class r2;
        java.lang.Object $r4;

        r0 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r2 := @parameter0: java.lang.Class;

        $r1 = r0.<au.com.bytecode.opencsv.bean.CsvToBean: java.util.Map editorMap>;

        if $r1 != null goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<au.com.bytecode.opencsv.bean.CsvToBean: java.util.Map editorMap> = $r6;

     label1:
        $r3 = r0.<au.com.bytecode.opencsv.bean.CsvToBean: java.util.Map editorMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (java.beans.PropertyEditor) $r4;

        r8 = $r7;

        if $r7 != null goto label2;

        $r5 = staticinvoke <java.beans.PropertyEditorManager: java.beans.PropertyEditor findEditor(java.lang.Class)>(r2);

        r8 = $r5;

        specialinvoke r0.<au.com.bytecode.opencsv.bean.CsvToBean: void addEditorToMap(java.lang.Class,java.beans.PropertyEditor)>(r2, $r5);

     label2:
        return r8;
    }

    private void addEditorToMap(java.lang.Class, java.beans.PropertyEditor)
    {
        java.beans.PropertyEditor r0;
        au.com.bytecode.opencsv.bean.CsvToBean r1;
        java.util.Map $r3;
        java.lang.Class r2;

        r1 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.beans.PropertyEditor;

        if r0 == null goto label1;

        $r3 = r1.<au.com.bytecode.opencsv.bean.CsvToBean: java.util.Map editorMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label1:
        return;
    }

    protected java.beans.PropertyEditor getPropertyEditor(java.beans.PropertyDescriptor) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        au.com.bytecode.opencsv.bean.CsvToBean r2;
        java.beans.PropertyEditor $r4, $r6;
        java.beans.PropertyDescriptor r0;
        java.lang.Class $r1, $r3;
        java.lang.Object $r5;

        r2 := @this: au.com.bytecode.opencsv.bean.CsvToBean;

        r0 := @parameter0: java.beans.PropertyDescriptor;

        $r1 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.Class getPropertyEditorClass()>();

        if null == $r1 goto label1;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = (java.beans.PropertyEditor) $r5;

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();

        $r4 = specialinvoke r2.<au.com.bytecode.opencsv.bean.CsvToBean: java.beans.PropertyEditor getPropertyEditorValue(java.lang.Class)>($r3);

        return $r4;
    }
}
