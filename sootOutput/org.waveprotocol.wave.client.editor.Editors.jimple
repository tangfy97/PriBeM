public final class org.waveprotocol.wave.client.editor.Editors extends java.lang.Object
{
    private static boolean rootRegistriesInitialised;

    private void <init>()
    {
        org.waveprotocol.wave.client.editor.Editors r0;

        r0 := @this: org.waveprotocol.wave.client.editor.Editors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.client.editor.Editor create()
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r4;
        com.google.gwt.dom.client.DivElement $r1;
        org.waveprotocol.wave.client.editor.EditorImplWebkitMobile $r3;
        com.google.gwt.dom.client.Element $r5, $r6, $r7;
        com.google.gwt.dom.client.Document $r0;
        boolean $z0;

        $r0 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r1 = virtualinvoke $r0.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.DivElement createDivElement()>();

        $r5 = (com.google.gwt.dom.client.Element) $r1;

        virtualinvoke $r5.<com.google.gwt.dom.client.Element: void setClassName(java.lang.String)>("editor");

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMobileWebkit()>();

        if $z0 == 0 goto label1;

        $r3 = new org.waveprotocol.wave.client.editor.EditorImplWebkitMobile;

        $r2 = $r3;

        $r6 = (com.google.gwt.dom.client.Element) $r1;

        specialinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImplWebkitMobile: void <init>(boolean,com.google.gwt.dom.client.Element)>(1, $r6);

        goto label2;

     label1:
        $r4 = new org.waveprotocol.wave.client.editor.EditorImpl;

        $r2 = $r4;

        $r7 = (com.google.gwt.dom.client.Element) $r1;

        specialinvoke $r4.<org.waveprotocol.wave.client.editor.EditorImpl: void <init>(boolean,com.google.gwt.dom.client.Element)>(1, $r7);

     label2:
        return $r2;
    }

    public static org.waveprotocol.wave.client.editor.Editor attachTo(org.waveprotocol.wave.client.editor.content.ContentDocument)
    {
        org.waveprotocol.wave.client.editor.content.ContentView $r1;
        org.waveprotocol.wave.client.editor.EditorImpl $r6, $r8;
        org.waveprotocol.wave.client.editor.EditorImplWebkitMobile $r7;
        org.waveprotocol.wave.client.editor.content.ContentDocument r0;
        com.google.gwt.dom.client.Element $r4, $r5;
        java.lang.Object $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ContentView getFullContentView()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r3 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r2;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.content.ContentElement: com.google.gwt.dom.client.Element getImplNodelet()>();

        if $r4 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        $r5 = virtualinvoke $r4.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        if $r5 == null goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2);

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMobileWebkit()>();

        if $z0 == 0 goto label5;

        $r7 = new org.waveprotocol.wave.client.editor.EditorImplWebkitMobile;

        $r6 = $r7;

        specialinvoke $r7.<org.waveprotocol.wave.client.editor.EditorImplWebkitMobile: void <init>(boolean,com.google.gwt.dom.client.Element)>(0, $r5);

        goto label6;

     label5:
        $r8 = new org.waveprotocol.wave.client.editor.EditorImpl;

        $r6 = $r8;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.EditorImpl: void <init>(boolean,com.google.gwt.dom.client.Element)>(0, $r5);

     label6:
        virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl: void setContent(org.waveprotocol.wave.client.editor.content.ContentDocument)>(r0);

        return $r6;
    }

    public static void initRootRegistries()
    {
        org.waveprotocol.wave.model.util.StringSet $r1, $r2;
        java.lang.String[] $r0;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        org.waveprotocol.wave.model.document.util.FilteredView$Skip $r11, $r12, $r13;
        boolean $z0;

        $z0 = <org.waveprotocol.wave.client.editor.Editors: boolean rootRegistriesInitialised>;

        if $z0 == 0 goto label1;

        return;

     label1:
        <org.waveprotocol.wave.client.editor.Editors: boolean rootRegistriesInitialised> = 1;

        $r1 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.model.util.StringSet TAB_TARGETS>;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "caption";

        $r0[1] = "profile-field";

        $r0[2] = "text-setting";

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r0);

        interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringSet: void addAll(org.waveprotocol.wave.model.util.ReadableStringSet)>($r2);

        $r3 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.ImeExtractor: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r3);

        $r4 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.ContentDocElement: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry,java.lang.String)>($r4, "doc");

        $r5 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.Paragraph: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r5);

        $r6 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: void registerLines(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r6);

        $r7 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.Caption: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r7);

        $r8 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.ChunkyElementHandler: void register(java.lang.String,org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>("br", $r8);

        $r9 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.AnnotationPaint: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r9);

        $r10 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.editor.content.img.ImgDoodad: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r10);

        $r11 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip NONE>;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.content.ValidSelectionStrategy: void registerTagForSelections(java.lang.String,boolean,org.waveprotocol.wave.model.document.util.FilteredView$Skip)>("l:p", 0, $r11);

        $r12 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip SHALLOW>;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.content.ValidSelectionStrategy: void registerTagForSelections(java.lang.String,boolean,org.waveprotocol.wave.model.document.util.FilteredView$Skip)>("l:s", 0, $r12);

        $r13 = <org.waveprotocol.wave.model.document.util.FilteredView$Skip: org.waveprotocol.wave.model.document.util.FilteredView$Skip DEEP>;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.content.ValidSelectionStrategy: void registerTagForSelections(java.lang.String,boolean,org.waveprotocol.wave.model.document.util.FilteredView$Skip)>("line", 1, $r13);

        return;
    }

    static void <clinit>()
    {
        staticinvoke <org.waveprotocol.wave.client.editor.Editors: void initRootRegistries()>();

        return;
    }
}
