public class org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder extends org.apache.batik.parser.DefaultPathHandler
{
    protected org.apache.batik.dom.svg.ListHandler listHandler;
    protected org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs;
    private final org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0;

    public void <init>(org.apache.batik.dom.svg.AbstractSVGNormPathSegList, org.apache.batik.dom.svg.ListHandler)
    {
        org.apache.batik.dom.svg.ListHandler r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList r1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractSVGNormPathSegList;

        r2 := @parameter1: org.apache.batik.dom.svg.ListHandler;

        specialinvoke r0.<org.apache.batik.parser.DefaultPathHandler: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0> = r1;

        r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler> = r2;

        return;
    }

    public void startPath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList $r3;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        org.apache.batik.dom.svg.ListHandler $r1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler>;

        interfaceinvoke $r1.<org.apache.batik.dom.svg.ListHandler: void startList()>();

        $r2 = new org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0>;

        specialinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void <init>(org.apache.batik.dom.svg.AbstractSVGNormPathSegList,short,java.lang.String,float,float,float,float,float,float)>($r3, 2, "M", 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);

        r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs> = $r2;

        return;
    }

    public void endPath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.ListHandler $r1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler>;

        interfaceinvoke $r1.<org.apache.batik.dom.svg.ListHandler: void endList()>();

        return;
    }

    public void movetoRel(float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3, f4, $f5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f5 = $f3 + f4;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void movetoAbs(float,float)>($f2, $f5);

        return;
    }

    public void movetoAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.ListHandler $r3;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r4, $r5, $r6;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegMovetoLinetoItem $r1;
        float f0, f1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler>;

        $r1 = new org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegMovetoLinetoItem;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0>;

        specialinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegMovetoLinetoItem: void <init>(org.apache.batik.dom.svg.AbstractSVGPathSegList,short,java.lang.String,float,float)>($r2, 2, "M", f0, f1);

        interfaceinvoke $r3.<org.apache.batik.dom.svg.ListHandler: void item(org.apache.batik.dom.svg.SVGItem)>($r1);

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setX(float)>(f0);

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setY(float)>(f1);

        $r6 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setPathSegType(short)>(2);

        return;
    }

    public void closePath() throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegItem $r1;
        org.apache.batik.dom.svg.ListHandler $r3;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler>;

        $r1 = new org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegItem;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0>;

        specialinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegItem: void <init>(org.apache.batik.dom.svg.AbstractSVGPathSegList,short,java.lang.String)>($r2, 1, "z");

        interfaceinvoke $r3.<org.apache.batik.dom.svg.ListHandler: void item(org.apache.batik.dom.svg.SVGItem)>($r1);

        return;
    }

    public void linetoRel(float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3, f4, $f5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f5 = $f3 + f4;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void linetoAbs(float,float)>($f2, $f5);

        return;
    }

    public void linetoAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.ListHandler $r3;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r4, $r5, $r6;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegMovetoLinetoItem $r1;
        float f0, f1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler>;

        $r1 = new org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegMovetoLinetoItem;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0>;

        specialinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegMovetoLinetoItem: void <init>(org.apache.batik.dom.svg.AbstractSVGPathSegList,short,java.lang.String,float,float)>($r2, 4, "L", f0, f1);

        interfaceinvoke $r3.<org.apache.batik.dom.svg.ListHandler: void item(org.apache.batik.dom.svg.SVGItem)>($r1);

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setX(float)>(f0);

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setY(float)>(f1);

        $r6 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setPathSegType(short)>(4);

        return;
    }

    public void linetoHorizontalRel(float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void linetoAbs(float,float)>($f2, $f3);

        return;
    }

    public void linetoHorizontalAbs(float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float f0, $f1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f0 := @parameter0: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f1 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void linetoAbs(float,float)>(f0, $f1);

        return;
    }

    public void linetoVerticalRel(float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, $f1, f2, $f3;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f2 := @parameter0: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f1 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f3 = $f1 + f2;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void linetoAbs(float,float)>($f0, $f3);

        return;
    }

    public void linetoVerticalAbs(float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void linetoAbs(float,float)>($f0, f1);

        return;
    }

    public void curvetoCubicRel(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3, f4, $f5, $f6, f7, $f8, $f9, f10, $f11, $f12, f13, $f14, $f15, f16, $f17;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        f7 := @parameter2: float;

        f10 := @parameter3: float;

        f13 := @parameter4: float;

        f16 := @parameter5: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f5 = $f3 + f4;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f6 = virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f8 = $f6 + f7;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f9 = virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f11 = $f9 + f10;

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f12 = virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f14 = $f12 + f13;

        $r6 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f15 = virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f17 = $f15 + f16;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoCubicAbs(float,float,float,float,float,float)>($f2, $f5, $f8, $f11, $f14, $f17);

        return;
    }

    public void curvetoCubicAbs(float, float, float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.ListHandler $r3;
        org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegCurvetoCubicItem $r1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r4, $r5;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float f0, f1, f2, f3, f4, f5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.ListHandler listHandler>;

        $r1 = new org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegCurvetoCubicItem;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList this$0>;

        specialinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegCurvetoCubicItem: void <init>(org.apache.batik.dom.svg.AbstractSVGPathSegList,short,java.lang.String,float,float,float,float,float,float)>($r2, 6, "C", f0, f1, f2, f3, f4, f5);

        interfaceinvoke $r3.<org.apache.batik.dom.svg.ListHandler: void item(org.apache.batik.dom.svg.SVGItem)>($r1);

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setValue(float,float,float,float,float,float)>(f0, f1, f2, f3, f4, f5);

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setPathSegType(short)>(6);

        return;
    }

    public void curvetoCubicSmoothRel(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r3, $r4;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3, f4, $f5, $f6, f7, $f8, $f9, f10, $f11;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        f7 := @parameter2: float;

        f10 := @parameter3: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f5 = $f3 + f4;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f6 = virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f8 = $f6 + f7;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f9 = virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f11 = $f9 + f10;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoCubicSmoothAbs(float,float,float,float)>($f2, $f5, $f8, $f11);

        return;
    }

    public void curvetoCubicSmoothAbs(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        short $s0;
        int $i1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, $f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f2 := @parameter0: float;

        f3 := @parameter1: float;

        f4 := @parameter2: float;

        f5 := @parameter3: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $s0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegItem: short getPathSegType()>();

        $i1 = (int) $s0;

        if $i1 != 6 goto label1;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f6 = virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f7 = virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r6 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f8 = virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX2()>();

        $f9 = $f7 - $f8;

        $f10 = $f6 + $f9;

        $r7 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f11 = virtualinvoke $r7.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $r8 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f12 = virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $r9 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f13 = virtualinvoke $r9.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY2()>();

        $f14 = $f12 - $f13;

        $f15 = $f11 + $f14;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoCubicAbs(float,float,float,float,float,float)>($f10, $f15, f2, f3, f4, f5);

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f1 = virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoCubicAbs(float,float,float,float,float,float)>($f0, $f1, f2, f3, f4, f5);

     label2:
        return;
    }

    public void curvetoQuadraticRel(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r3, $r4;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3, f4, $f5, $f6, f7, $f8, $f9, f10, $f11;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        f7 := @parameter2: float;

        f10 := @parameter3: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f5 = $f3 + f4;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f6 = virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f8 = $f6 + f7;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f9 = virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f11 = $f9 + f10;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoQuadraticAbs(float,float,float,float)>($f2, $f5, $f8, $f11);

        return;
    }

    public void curvetoQuadraticAbs(float, float, float, float) throws org.apache.batik.parser.ParseException
    {
        float $f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, $f9, $f10, $f11, $f12, f13, $f14, $f15, $f16, f17, $f18, $f19, $f20, $f21, $f22, $f23;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f8 := @parameter1: float;

        f13 := @parameter2: float;

        f17 := @parameter3: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f2 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f3 = f1 - $f2;

        $f4 = 2.0F * $f3;

        $f5 = $f4 / 3.0F;

        $f6 = $f0 + $f5;

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f7 = virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f9 = virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f10 = f8 - $f9;

        $f11 = 2.0F * $f10;

        $f12 = $f11 / 3.0F;

        $f23 = $f7 + $f12;

        $f14 = f1 - f13;

        $f15 = 2.0F * $f14;

        $f16 = $f15 / 3.0F;

        $f22 = f13 + $f16;

        $f18 = f8 - f17;

        $f19 = 2.0F * $f18;

        $f20 = $f19 / 3.0F;

        $f21 = f17 + $f20;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoCubicAbs(float,float,float,float,float,float)>($f6, $f23, $f22, $f21, f13, f17);

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setX1(float)>(f1);

        $r6 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setY1(float)>(f8);

        $r7 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r7.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setPathSegType(short)>(8);

        return;
    }

    public void curvetoQuadraticSmoothRel(float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, f1, $f2, $f3, f4, $f5;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f1 := @parameter0: float;

        f4 := @parameter1: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f2 = $f0 + f1;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f5 = $f3 + f4;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoQuadraticSmoothAbs(float,float)>($f2, $f5);

        return;
    }

    public void curvetoQuadraticSmoothAbs(float, float) throws org.apache.batik.parser.ParseException
    {
        short $s0;
        int $i1;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float $f0, $f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f2 := @parameter0: float;

        f3 := @parameter1: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $s0 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGPathSegList$SVGPathSegItem: short getPathSegType()>();

        $i1 = (int) $s0;

        if $i1 != 8 goto label1;

        $r4 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f4 = virtualinvoke $r4.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r5 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f5 = virtualinvoke $r5.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r6 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f6 = virtualinvoke $r6.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX1()>();

        $f7 = $f5 - $f6;

        $f8 = $f4 + $f7;

        $r7 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f9 = virtualinvoke $r7.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $r8 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f10 = virtualinvoke $r8.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $r9 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f11 = virtualinvoke $r9.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY1()>();

        $f12 = $f10 - $f11;

        $f13 = $f9 + $f12;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoQuadraticAbs(float,float,float,float)>($f8, $f13, f2, f3);

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f0 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $r3 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f1 = virtualinvoke $r3.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoQuadraticAbs(float,float,float,float)>($f0, $f1, f2, f3);

     label2:
        return;
    }

    public void arcRel(float, float, float, boolean, boolean, float, float) throws org.apache.batik.parser.ParseException
    {
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;
        float f0, f1, f2, $f3, f4, $f5, $f6, f7, $f8;
        boolean z0, z1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        f4 := @parameter5: float;

        f7 := @parameter6: float;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f3 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        $f5 = $f3 + f4;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f6 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        $f8 = $f6 + f7;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void arcAbs(float,float,float,boolean,boolean,float,float)>(f0, f1, f2, z0, z1, $f5, $f8);

        return;
    }

    public void arcAbs(float, float, float, boolean, boolean, float, float) throws org.apache.batik.parser.ParseException
    {
        java.awt.geom.PathIterator $r7;
        byte $b0, $b1, $b2, $b4;
        boolean z0, z1, $z2;
        java.awt.Shape $r5;
        java.awt.geom.AffineTransform $r4, $r6;
        float f0, f1, f2, f3, $f4, $f5, f6, $f7, $f8, $f9, $f10, $f11, $f12;
        float[] $r8;
        java.awt.geom.Arc2D $r3;
        int $i3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem $r1, $r2, $r9;
        org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder;

        f0 := @parameter0: float;

        f3 := @parameter1: float;

        f6 := @parameter2: float;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label1;

        $b1 = f3 cmpl 0.0F;

        if $b1 != 0 goto label2;

     label1:
        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void linetoAbs(float,float)>(f1, f2);

        return;

     label2:
        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f4 = virtualinvoke $r1.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getX()>();

        d0 = (double) $f4;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        $f5 = virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: float getY()>();

        d1 = (double) $f5;

        $d2 = (double) f1;

        $b2 = d0 cmpl $d2;

        if $b2 != 0 goto label3;

        $d12 = (double) f2;

        $b4 = d1 cmpl $d12;

        if $b4 != 0 goto label3;

        return;

     label3:
        $d7 = (double) f0;

        $d6 = (double) f3;

        $d5 = (double) f6;

        $d4 = (double) f1;

        $d3 = (double) f2;

        $r3 = staticinvoke <org.apache.batik.ext.awt.geom.ExtendedGeneralPath: java.awt.geom.Arc2D computeArc(double,double,double,double,double,boolean,boolean,double,double)>(d0, d1, $d7, $d6, $d5, z0, z1, $d4, $d3);

        if $r3 != null goto label4;

        return;

     label4:
        $d8 = (double) f6;

        $d9 = staticinvoke <java.lang.Math: double toRadians(double)>($d8);

        $d10 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getCenterX()>();

        $d11 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getCenterY()>();

        $r4 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($d9, $d10, $d11);

        $r5 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r3);

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>()>();

        $r7 = interfaceinvoke $r5.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>($r6);

        $r8 = newarray (float)[6];

        $r8[0] = 0.0F;

        $r8[1] = 0.0F;

        $r8[2] = 0.0F;

        $r8[3] = 0.0F;

        $r8[4] = 0.0F;

        $r8[5] = 0.0F;

        goto label8;

     label5:
        $i3 = interfaceinvoke $r7.<java.awt.geom.PathIterator: int currentSegment(float[])>($r8);

        lookupswitch($i3)
        {
            case 3: goto label6;
            default: goto label7;
        };

     label6:
        $f12 = $r8[0];

        $f11 = $r8[1];

        $f10 = $r8[2];

        $f9 = $r8[3];

        $f8 = $r8[4];

        $f7 = $r8[5];

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: void curvetoCubicAbs(float,float,float,float,float,float)>($f12, $f11, $f10, $f9, $f8, $f7);

     label7:
        interfaceinvoke $r7.<java.awt.geom.PathIterator: void next()>();

     label8:
        $z2 = interfaceinvoke $r7.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z2 == 0 goto label5;

        $r9 = r0.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$NormalizedPathSegListBuilder: org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem lastAbs>;

        virtualinvoke $r9.<org.apache.batik.dom.svg.AbstractSVGNormPathSegList$SVGPathSegGenericItem: void setPathSegType(short)>(10);

        return;
    }
}
