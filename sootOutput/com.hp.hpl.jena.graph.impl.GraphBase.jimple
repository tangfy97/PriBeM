public abstract class com.hp.hpl.jena.graph.impl.GraphBase extends java.lang.Object implements com.hp.hpl.jena.graph.impl.GraphWithPerform
{
    protected boolean closed;
    protected com.hp.hpl.jena.graph.GraphStatisticsHandler statisticsHandler;
    protected com.hp.hpl.jena.graph.GraphEventManager gem;
    protected com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler;
    protected com.hp.hpl.jena.graph.Capabilities capabilities;
    protected com.hp.hpl.jena.shared.PrefixMapping pm;
    public static final int TOSTRING_TRIPLE_BASE;
    public static final int TOSTRING_TRIPLE_LIMIT;

    public void <init>()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean closed> = 0;

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.Capabilities capabilities> = null;

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.shared.PrefixMapping pm> = null;

        return;
    }

    protected void checkOpen()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.shared.ClosedException $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new com.hp.hpl.jena.shared.ClosedException;

        specialinvoke $r1.<com.hp.hpl.jena.shared.ClosedException: void <init>(java.lang.String,com.hp.hpl.jena.graph.Graph)>("already closed", r0);

        throw $r1;

     label1:
        return;
    }

    public void close()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean closed> = 1;

        return;
    }

    public boolean isClosed()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean closed>;

        return $z0;
    }

    public boolean dependsOn(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.graph.GraphStatisticsHandler getStatisticsHandler()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.GraphStatisticsHandler $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphStatisticsHandler statisticsHandler>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphStatisticsHandler createStatisticsHandler()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphStatisticsHandler statisticsHandler> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphStatisticsHandler statisticsHandler>;

        return $r2;
    }

    protected com.hp.hpl.jena.graph.GraphStatisticsHandler createStatisticsHandler()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        return null;
    }

    public com.hp.hpl.jena.graph.GraphEventManager getEventManager()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.impl.SimpleEventManager $r3;
        com.hp.hpl.jena.graph.GraphEventManager $r1, $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager gem>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.graph.impl.SimpleEventManager;

        specialinvoke $r3.<com.hp.hpl.jena.graph.impl.SimpleEventManager: void <init>(com.hp.hpl.jena.graph.Graph)>(r0);

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager gem> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager gem>;

        return $r2;
    }

    public void notifyAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.GraphEventManager $r1;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.GraphEventManager: void notifyAddTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>(r0, r2);

        return;
    }

    public void notifyDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.GraphEventManager $r1;
        com.hp.hpl.jena.graph.Triple r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.GraphEventManager: void notifyDeleteTriple(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Triple)>(r0, r2);

        return;
    }

    public com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r1;
        com.hp.hpl.jena.graph.impl.SimpleTransactionHandler $r0;

        r1 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r0 = new com.hp.hpl.jena.graph.impl.SimpleTransactionHandler;

        specialinvoke $r0.<com.hp.hpl.jena.graph.impl.SimpleTransactionHandler: void <init>()>();

        return $r0;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler $r3;
        com.hp.hpl.jena.graph.BulkUpdateHandler $r1, $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        specialinvoke $r3.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void <init>(com.hp.hpl.jena.graph.impl.GraphWithPerform)>(r0);

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.BulkUpdateHandler bulkHandler>;

        return $r2;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.impl.AllCapabilities $r3;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.graph.impl.AllCapabilities;

        specialinvoke $r3.<com.hp.hpl.jena.graph.impl.AllCapabilities: void <init>()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.Capabilities capabilities> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.Capabilities capabilities>;

        return $r2;
    }

    public com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.shared.PrefixMapping $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r1 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.shared.PrefixMapping pm>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.shared.PrefixMapping createPrefixMapping()>();

        r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.shared.PrefixMapping pm> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.shared.PrefixMapping pm>;

        return $r2;
    }

    protected com.hp.hpl.jena.shared.PrefixMapping createPrefixMapping()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r1;
        com.hp.hpl.jena.shared.impl.PrefixMappingImpl $r0;

        r1 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r0 = new com.hp.hpl.jena.shared.impl.PrefixMappingImpl;

        specialinvoke $r0.<com.hp.hpl.jena.shared.impl.PrefixMappingImpl: void <init>()>();

        return $r0;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void performAdd(com.hp.hpl.jena.graph.Triple)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void notifyAdd(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r1;
        com.hp.hpl.jena.shared.AddDeniedException $r0;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.shared.AddDeniedException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.AddDeniedException: void <init>(java.lang.String)>("GraphBase::performAdd");

        throw $r0;
    }

    public final void delete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void performDelete(com.hp.hpl.jena.graph.Triple)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void notifyDelete(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r1;
        com.hp.hpl.jena.shared.DeleteDeniedException $r0;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.shared.DeleteDeniedException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.DeleteDeniedException: void <init>(java.lang.String)>("GraphBase::delete");

        throw $r0;
    }

    public void clear()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.GraphEventManager $r4;
        com.hp.hpl.jena.graph.GraphEvents $r5;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        staticinvoke <com.hp.hpl.jena.graph.GraphUtil: void remove(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r3, $r2, $r1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r5 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents removeAll>;

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r5);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.GraphEventManager $r4;
        com.hp.hpl.jena.graph.GraphEvents $r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        staticinvoke <com.hp.hpl.jena.graph.GraphUtil: void remove(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1, r2, r3);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r5 = staticinvoke <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        interfaceinvoke $r4.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r5);

        return;
    }

    public final com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.TripleMatch r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        return $r2;
    }

    protected abstract com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch);

    public com.hp.hpl.jena.util.iterator.ExtendedIterator forTestingOnly_graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.TripleMatch r1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.TripleMatch)>(r1);

        return $r2;
    }

    public final com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        com.hp.hpl.jena.graph.Node r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r4;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Triple $r4;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple createMatch(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>($r4);

        return $r5;
    }

    public final boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean graphBaseContains(com.hp.hpl.jena.graph.Triple)>(r1);

        return $z0;
    }

    protected boolean graphBaseContains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean containsByFind(com.hp.hpl.jena.graph.Triple)>(r1);

        return $z0;
    }

    public final boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.graph.Triple $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        $r4 = staticinvoke <com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Triple create(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean contains(com.hp.hpl.jena.graph.Triple)>($r4);

        return $z0;
    }

    protected final boolean containsByFind(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        java.lang.Throwable $r3;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.TripleMatch)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $z0;

     label3:
        $r3 := @caughtexception;

     label4:
        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final int size()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        int $i0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: int graphBaseSize()>();

        return $i0;
    }

    protected int graphBaseSize()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        java.lang.Throwable $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r1;
        int i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $r1 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r0);

     label1:
        i0 = 0;

     label2:
        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        i0 = i0 + 1;

        goto label2;

     label3:
        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return i0;

     label4:
        $r2 := @caughtexception;

     label5:
        interfaceinvoke $r1.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isIsomorphicWith(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        virtualinvoke r0.<com.hp.hpl.jena.graph.impl.GraphBase: void checkOpen()>();

        if r1 == null goto label1;

        $z0 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphMatcher: boolean equals(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.impl.GraphBase r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.graph.impl.GraphBase;

        $z0 = r0.<com.hp.hpl.jena.graph.impl.GraphBase: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = "closed ";

        goto label2;

     label1:
        $r2 = "";

     label2:
        $r1 = staticinvoke <com.hp.hpl.jena.graph.impl.GraphBase: java.lang.String toString(java.lang.String,com.hp.hpl.jena.graph.Graph)>($r2, r0);

        return $r1;
    }

    public static java.lang.String toString(java.lang.String, com.hp.hpl.jena.graph.Graph)
    {
        java.lang.StringBuffer $r2;
        int i0;
        java.lang.String r4, $r7, $r9, $r12, r13;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Triple $r11;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r8;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.Object $r10;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r2 = new java.lang.StringBuffer;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>($r7);

        i0 = 0;

        r13 = "";

        $r8 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator findAll(com.hp.hpl.jena.graph.Graph)>(r0);

     label1:
        $z0 = interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        if i0 >= 17 goto label2;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        r13 = "; ";

        i0 = i0 + 1;

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ClosableIterator: java.lang.Object next()>();

        $r11 = (com.hp.hpl.jena.graph.Triple) $r10;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Triple: java.lang.String toString(com.hp.hpl.jena.shared.PrefixMapping)>($r1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        goto label1;

     label2:
        $z1 = interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

     label3:
        interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r9 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.graph.impl.GraphBase: int TOSTRING_TRIPLE_LIMIT> = 17;

        <com.hp.hpl.jena.graph.impl.GraphBase: int TOSTRING_TRIPLE_BASE> = 10;

        return;
    }
}
