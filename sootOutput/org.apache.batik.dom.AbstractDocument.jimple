public abstract class org.apache.batik.dom.AbstractDocument extends org.apache.batik.dom.AbstractParentNode implements org.w3c.dom.Document, org.w3c.dom.events.DocumentEvent, org.w3c.dom.traversal.DocumentTraversal, org.apache.batik.i18n.Localizable, org.w3c.dom.xpath.XPathEvaluator
{
    protected static final java.lang.String RESOURCES;
    protected transient org.apache.batik.i18n.LocalizableSupport localizableSupport;
    protected transient org.w3c.dom.DOMImplementation implementation;
    protected transient org.apache.batik.dom.traversal.TraversalSupport traversalSupport;
    protected transient org.apache.batik.dom.events.DocumentEventSupport documentEventSupport;
    protected transient boolean eventsEnabled;
    protected transient java.util.WeakHashMap elementsByTagNames;
    protected transient java.util.WeakHashMap elementsByTagNamesNS;
    protected java.lang.String inputEncoding;
    protected java.lang.String xmlEncoding;
    protected java.lang.String xmlVersion;
    protected boolean xmlStandalone;
    protected java.lang.String documentURI;
    protected boolean strictErrorChecking;
    protected org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig;
    protected transient org.apache.batik.dom.xbl.XBLManager xblManager;
    protected transient java.util.Map elementsById;

    protected void <init>()
    {
        org.apache.batik.dom.xbl.GenericXBLManager $r4;
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void <init>()>();

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.dom.resources.Messages", $r3);

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion> = "1.0";

        r0.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking> = 1;

        $r4 = new org.apache.batik.dom.xbl.GenericXBLManager;

        specialinvoke $r4.<org.apache.batik.dom.xbl.GenericXBLManager: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager> = $r4;

        return;
    }

    public void <init>(org.w3c.dom.DocumentType, org.w3c.dom.DOMImplementation)
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.i18n.LocalizableSupport $r1;
        org.w3c.dom.DocumentType r6;
        org.apache.batik.dom.xbl.GenericXBLManager $r4;
        org.w3c.dom.Document $r8;
        org.apache.batik.dom.GenericDocumentType r7;
        java.lang.Class $r2;
        java.lang.ClassLoader $r3;
        org.w3c.dom.DOMImplementation r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r6 := @parameter0: org.w3c.dom.DocumentType;

        r5 := @parameter1: org.w3c.dom.DOMImplementation;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void <init>()>();

        $r1 = new org.apache.batik.i18n.LocalizableSupport;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.dom.resources.Messages", $r3);

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r1;

        r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion> = "1.0";

        r0.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking> = 1;

        $r4 = new org.apache.batik.dom.xbl.GenericXBLManager;

        specialinvoke $r4.<org.apache.batik.dom.xbl.GenericXBLManager: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager> = $r4;

        r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation> = r5;

        if r6 == null goto label2;

        $z0 = r6 instanceof org.apache.batik.dom.GenericDocumentType;

        if $z0 == 0 goto label1;

        r7 = (org.apache.batik.dom.GenericDocumentType) r6;

        $r8 = virtualinvoke r7.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        if $r8 != null goto label1;

        virtualinvoke r7.<org.apache.batik.dom.AbstractNode: void setOwnerDocument(org.w3c.dom.Document)>(r0);

     label1:
        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r6);

     label2:
        return;
    }

    public void setDocumentInputEncoding(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractDocument: java.lang.String inputEncoding> = r1;

        return;
    }

    public void setDocumentXmlEncoding(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlEncoding> = r1;

        return;
    }

    public void setLocale(java.util.Locale)
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.util.Locale r1;
        org.apache.batik.i18n.LocalizableSupport $r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        virtualinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void setLocale(java.util.Locale)>(r1);

        return;
    }

    public java.util.Locale getLocale()
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.util.Locale $r2;
        org.apache.batik.i18n.LocalizableSupport $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r2 = virtualinvoke $r1.<org.apache.batik.i18n.LocalizableSupport: java.util.Locale getLocale()>();

        return $r2;
    }

    public java.lang.String formatMessage(java.lang.String, java.lang.Object[]) throws java.util.MissingResourceException
    {
        java.lang.Object[] r2;
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String r1, $r4;
        org.apache.batik.i18n.LocalizableSupport $r3;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport>;

        $r4 = virtualinvoke $r3.<org.apache.batik.i18n.LocalizableSupport: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    public boolean getEventsEnabled()
    {
        org.apache.batik.dom.AbstractDocument r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $z0 = r0.<org.apache.batik.dom.AbstractDocument: boolean eventsEnabled>;

        return $z0;
    }

    public void setEventsEnabled(boolean)
    {
        org.apache.batik.dom.AbstractDocument r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.dom.AbstractDocument: boolean eventsEnabled> = z0;

        return;
    }

    public java.lang.String getNodeName()
    {
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        return "#document";
    }

    public short getNodeType()
    {
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        return 9;
    }

    public org.w3c.dom.DocumentType getDoctype()
    {
        short $s0;
        org.w3c.dom.Node r2;
        int $i1;
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.DocumentType $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 10 goto label2;

        $r1 = (org.w3c.dom.DocumentType) r2;

        return $r1;

     label2:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r2 != null goto label1;

        return null;
    }

    public void setDoctype(org.w3c.dom.DocumentType)
    {
        org.apache.batik.dom.AbstractDocument r1;
        org.apache.batik.dom.ExtendedNode $r2;
        org.w3c.dom.DocumentType r0;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.w3c.dom.DocumentType;

        if r0 == null goto label1;

        virtualinvoke r1.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r0);

        $r2 = (org.apache.batik.dom.ExtendedNode) r0;

        interfaceinvoke $r2.<org.apache.batik.dom.ExtendedNode: void setReadonly(boolean)>(1);

     label1:
        return;
    }

    public org.w3c.dom.DOMImplementation getImplementation()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.DOMImplementation $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation>;

        return $r1;
    }

    public org.w3c.dom.Element getDocumentElement()
    {
        short $s0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r2;
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r1 = (org.w3c.dom.Element) r2;

        return $r1;

     label2:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r2 != null goto label1;

        return null;
    }

    public org.w3c.dom.Node importNode(org.w3c.dom.Node, boolean) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Node r1, $r2;
        org.apache.batik.dom.AbstractDocument r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean,boolean)>(r1, z0, 0);

        return $r2;
    }

    public org.w3c.dom.Node importNode(org.w3c.dom.Node, boolean, boolean)
    {
        boolean $z0, $z1, z2, $z3, z4, $z5;
        java.lang.Object[] $r19;
        org.apache.batik.dom.AbstractAttr r18;
        org.w3c.dom.Attr r16;
        short $s0;
        org.w3c.dom.Node r0, $r2, $r15, $r17, r21, r22;
        org.w3c.dom.DOMException $r20;
        int $i1, i2, $i3;
        org.w3c.dom.NamedNodeMap $r14;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.batik.dom.AbstractDocument r1;
        org.w3c.dom.Element $r13;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.w3c.dom.Node;

        z4 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        tableswitch($i3)
        {
            case 1: goto label01;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label14;
            case 7: goto label11;
            case 8: goto label12;
            case 9: goto label14;
            case 10: goto label14;
            case 11: goto label13;
            default: goto label14;
        };

     label01:
        $r11 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r13 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r11, $r12);

        r21 = $r13;

        $z0 = interfaceinvoke r0.<org.w3c.dom.Node: boolean hasAttributes()>();

        if $z0 == 0 goto label15;

        $r14 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i1 = interfaceinvoke $r14.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i2 = 0;

        goto label06;

     label02:
        $r15 = interfaceinvoke $r14.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i2);

        r16 = (org.w3c.dom.Attr) $r15;

        $z1 = interfaceinvoke r16.<org.w3c.dom.Attr: boolean getSpecified()>();

        if $z1 != 0 goto label03;

        goto label05;

     label03:
        $r17 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r16, 1);

        r18 = (org.apache.batik.dom.AbstractAttr) $r17;

        if z2 == 0 goto label04;

        $z3 = virtualinvoke r18.<org.apache.batik.dom.AbstractAttr: boolean isId()>();

        if $z3 == 0 goto label04;

        virtualinvoke r18.<org.apache.batik.dom.AbstractAttr: void setIsId(boolean)>(0);

     label04:
        interfaceinvoke $r13.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r18);

     label05:
        i2 = i2 + 1;

     label06:
        if i2 < $i1 goto label02;

        goto label15;

     label07:
        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r10 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>($r9, $r10);

        goto label15;

     label08:
        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Text createTextNode(java.lang.String)>($r8);

        z4 = 0;

        goto label15;

     label09:
        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r7);

        z4 = 0;

        goto label15;

     label10:
        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.EntityReference createEntityReference(java.lang.String)>($r6);

        goto label15;

     label11:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r4, $r5);

        z4 = 0;

        goto label15;

     label12:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Comment createComment(java.lang.String)>($r3);

        z4 = 0;

        goto label15;

     label13:
        r21 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DocumentFragment createDocumentFragment()>();

        goto label15;

     label14:
        $r19 = newarray (java.lang.Object)[0];

        $r20 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "import.node", $r19);

        throw $r20;

     label15:
        $z5 = r0 instanceof org.apache.batik.dom.AbstractNode;

        if $z5 == 0 goto label16;

        virtualinvoke r1.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(2, r0, r21);

     label16:
        if z4 == 0 goto label19;

        r22 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label18;

     label17:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r22, 1);

        interfaceinvoke r21.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        r22 = interfaceinvoke r22.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label18:
        if r22 != null goto label17;

     label19:
        return r21;
    }

    public org.w3c.dom.Node cloneNode(boolean)
    {
        org.w3c.dom.Document r2;
        org.w3c.dom.Node $r1, $r3, r4;
        org.apache.batik.dom.AbstractDocument r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node newNode()>();

        r2 = (org.w3c.dom.Document) $r1;

        virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r2);

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(1, r0, r2);

        if z0 == 0 goto label3;

        r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r4, z0);

        interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r4 != null goto label1;

     label3:
        return r2;
    }

    public abstract boolean isId(org.w3c.dom.Attr);

    public org.w3c.dom.Element getElementById(java.lang.String)
    {
        org.w3c.dom.Element $r1, $r3;
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element getDocumentElement()>();

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element getChildElementById(org.w3c.dom.Node,java.lang.String)>($r1, r2);

        return $r3;
    }

    public org.w3c.dom.Element getChildElementById(org.w3c.dom.Node, java.lang.String)
    {
        java.util.Map $r2, $r5, $r16;
        org.w3c.dom.Node r3, $r4, $r12, $r15;
        int $i0;
        java.lang.String r0;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        org.apache.batik.dom.AbstractDocument r1;
        java.util.List r18;
        org.w3c.dom.Element r11, r17;
        org.apache.batik.dom.AbstractDocument$IdSoftRef r9, $r13;
        java.lang.Object $r6, $r8, $r10, $r14;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r3 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label01;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return null;

     label02:
        $r2 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        if $r2 != null goto label03;

        return null;

     label03:
        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node getRoot(org.w3c.dom.Node)>(r3);

        $r5 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r6 != null goto label04;

        return null;

     label04:
        $z0 = $r6 instanceof org.apache.batik.dom.AbstractDocument$IdSoftRef;

        if $z0 == 0 goto label07;

        $r13 = (org.apache.batik.dom.AbstractDocument$IdSoftRef) $r6;

        $r14 = virtualinvoke $r13.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r14 != null goto label05;

        $r16 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return null;

     label05:
        r17 = (org.w3c.dom.Element) $r14;

        $r15 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node getRoot(org.w3c.dom.Node)>(r17);

        if $r15 != $r4 goto label06;

        return r17;

     label06:
        return null;

     label07:
        r18 = (java.util.List) $r6;

        $r7 = interfaceinvoke r18.<java.util.List: java.util.Iterator iterator()>();

        goto label10;

     label08:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.batik.dom.AbstractDocument$IdSoftRef) $r8;

        $r10 = virtualinvoke r9.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r10 != null goto label09;

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

        goto label10;

     label09:
        r11 = (org.w3c.dom.Element) $r10;

        $r12 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Node getRoot(org.w3c.dom.Node)>(r11);

        if $r12 != $r4 goto label10;

        return r11;

     label10:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label08;

        return null;
    }

    protected org.w3c.dom.Node getRoot(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Node r1, r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = r1;

        goto label2;

     label1:
        r2 = r1;

        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label2:
        if r1 != null goto label1;

        return r2;
    }

    public void removeIdEntry(org.w3c.dom.Element, java.lang.String)
    {
        java.lang.Throwable $r14;
        java.util.Map $r2, r3, $r4, $r12, $r13;
        int $i0;
        java.lang.String r0;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        org.apache.batik.dom.AbstractDocument r1;
        java.util.List r6;
        org.w3c.dom.Element r11;
        org.apache.batik.dom.AbstractDocument$IdSoftRef r9;
        java.lang.Object $r5, $r8, $r10;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r11 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label01;

        return;

     label01:
        $r2 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        if $r2 != null goto label02;

        return;

     label02:
        r3 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        entermonitor r3;

     label03:
        $r4 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r5 != null goto label04;

        exitmonitor r3;

        return;

     label04:
        $z0 = $r5 instanceof org.apache.batik.dom.AbstractDocument$IdSoftRef;

        if $z0 == 0 goto label05;

        $r13 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        exitmonitor r3;

        return;

     label05:
        r6 = (java.util.List) $r5;

        $r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

        goto label08;

     label06:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.batik.dom.AbstractDocument$IdSoftRef) $r8;

        $r10 = virtualinvoke r9.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r10 != null goto label07;

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

        goto label08;

     label07:
        if r11 != $r10 goto label08;

        interfaceinvoke $r7.<java.util.Iterator: void remove()>();

        goto label09;

     label08:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label06;

     label09:
        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i0 != 0 goto label10;

        $r12 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

     label10:
        exitmonitor r3;

        goto label12;

     label11:
        $r14 := @caughtexception;

        exitmonitor r3;

        throw $r14;

     label12:
        return;

        catch java.lang.Throwable from label03 to label11 with label11;
    }

    public void addIdEntry(org.w3c.dom.Element, java.lang.String)
    {
        java.lang.Throwable $r17;
        java.util.HashMap $r15;
        java.util.ArrayList $r8;
        java.util.Map $r2, $r3, $r10, $r12, $r14, r18;
        java.lang.String r0;
        boolean $z0;
        org.apache.batik.dom.AbstractDocument r1;
        java.util.List r20;
        org.w3c.dom.Element r6;
        org.apache.batik.dom.AbstractDocument$IdSoftRef $r5, $r9, $r11, $r13, $r16, r19;
        java.lang.Object $r4, $r7;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r6 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        if $r2 != null goto label2;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        $r16 = new org.apache.batik.dom.AbstractDocument$IdSoftRef;

        specialinvoke $r16.<org.apache.batik.dom.AbstractDocument$IdSoftRef: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.Object,java.lang.String)>(r1, r6, r0);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r16);

        r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById> = $r15;

        return;

     label2:
        r18 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        entermonitor r18;

     label3:
        $r3 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r4 != null goto label4;

        $r14 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r13 = new org.apache.batik.dom.AbstractDocument$IdSoftRef;

        specialinvoke $r13.<org.apache.batik.dom.AbstractDocument$IdSoftRef: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.Object,java.lang.String)>(r1, r6, r0);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r13);

        exitmonitor r18;

        return;

     label4:
        $z0 = $r4 instanceof org.apache.batik.dom.AbstractDocument$IdSoftRef;

        if $z0 == 0 goto label6;

        r19 = (org.apache.batik.dom.AbstractDocument$IdSoftRef) $r4;

        $r7 = virtualinvoke r19.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r7 != null goto label5;

        $r12 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        $r11 = new org.apache.batik.dom.AbstractDocument$IdSoftRef;

        specialinvoke $r11.<org.apache.batik.dom.AbstractDocument$IdSoftRef: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.Object,java.lang.String)>(r1, r6, r0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r11);

        exitmonitor r18;

        return;

     label5:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(4);

        virtualinvoke r19.<org.apache.batik.dom.AbstractDocument$IdSoftRef: void setList(java.util.List)>($r8);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r19);

        $r9 = new org.apache.batik.dom.AbstractDocument$IdSoftRef;

        specialinvoke $r9.<org.apache.batik.dom.AbstractDocument$IdSoftRef: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.Object,java.lang.String,java.util.List)>(r1, r6, r0, $r8);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = r1.<org.apache.batik.dom.AbstractDocument: java.util.Map elementsById>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r8);

        exitmonitor r18;

        return;

     label6:
        r20 = (java.util.List) $r4;

        $r5 = new org.apache.batik.dom.AbstractDocument$IdSoftRef;

        specialinvoke $r5.<org.apache.batik.dom.AbstractDocument$IdSoftRef: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.Object,java.lang.String,java.util.List)>(r1, r6, r0, r20);

        interfaceinvoke r20.<java.util.List: boolean add(java.lang.Object)>($r5);

        exitmonitor r18;

        goto label8;

     label7:
        $r17 := @caughtexception;

        exitmonitor r18;

        throw $r17;

     label8:
        return;

        catch java.lang.Throwable from label3 to label7 with label7;
    }

    public void updateIdEntry(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Element r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r0, r1;
        boolean $z0;

        r2 := @this: org.apache.batik.dom.AbstractDocument;

        r3 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r0 == r1 goto label1;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return;

     label2:
        virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: void removeIdEntry(org.w3c.dom.Element,java.lang.String)>(r3, r0);

        virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: void addIdEntry(org.w3c.dom.Element,java.lang.String)>(r3, r1);

        return;
    }

    public org.apache.batik.dom.AbstractParentNode$ElementsByTagName getElementsByTagName(org.w3c.dom.Node, java.lang.String)
    {
        org.apache.batik.util.SoftDoublyIndexedTable r5;
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName $r8;
        org.w3c.dom.Node r2;
        java.lang.Object $r4, $r7;
        java.lang.String r6;
        java.util.WeakHashMap $r1, $r3;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNames>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNames>;

        $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.apache.batik.util.SoftDoublyIndexedTable) $r4;

        if r5 != null goto label2;

        return null;

     label2:
        $r7 = virtualinvoke r5.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(null, r6);

        $r8 = (org.apache.batik.dom.AbstractParentNode$ElementsByTagName) $r7;

        return $r8;
    }

    public void putElementsByTagName(org.w3c.dom.Node, java.lang.String, org.apache.batik.dom.AbstractParentNode$ElementsByTagName)
    {
        org.apache.batik.util.SoftDoublyIndexedTable $r7, $r10, r11;
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName r6;
        org.w3c.dom.Node r2;
        java.lang.Object $r4;
        java.lang.String r5;
        java.util.WeakHashMap $r1, $r3, $r8, $r9;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: org.apache.batik.dom.AbstractParentNode$ElementsByTagName;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNames>;

        if $r1 != null goto label1;

        $r9 = new java.util.WeakHashMap;

        specialinvoke $r9.<java.util.WeakHashMap: void <init>(int)>(11);

        r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNames> = $r9;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNames>;

        $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r10 = (org.apache.batik.util.SoftDoublyIndexedTable) $r4;

        r11 = $r10;

        if $r10 != null goto label2;

        $r8 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNames>;

        $r7 = new org.apache.batik.util.SoftDoublyIndexedTable;

        specialinvoke $r7.<org.apache.batik.util.SoftDoublyIndexedTable: void <init>()>();

        r11 = $r7;

        virtualinvoke $r8.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r7);

     label2:
        virtualinvoke r11.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, r5, r6);

        return;
    }

    public org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS getElementsByTagNameNS(org.w3c.dom.Node, java.lang.String, java.lang.String)
    {
        org.apache.batik.util.SoftDoublyIndexedTable r5;
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS $r9;
        org.w3c.dom.Node r2;
        java.lang.Object $r4, $r8;
        java.lang.String r6, r7;
        java.util.WeakHashMap $r1, $r3;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNamesNS>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNamesNS>;

        $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.apache.batik.util.SoftDoublyIndexedTable) $r4;

        if r5 != null goto label2;

        return null;

     label2:
        $r8 = virtualinvoke r5.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.Object get(java.lang.Object,java.lang.Object)>(r6, r7);

        $r9 = (org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS) $r8;

        return $r9;
    }

    public void putElementsByTagNameNS(org.w3c.dom.Node, java.lang.String, java.lang.String, org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS)
    {
        org.apache.batik.util.SoftDoublyIndexedTable $r8, $r11, r12;
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS r7;
        org.w3c.dom.Node r2;
        java.lang.Object $r4;
        java.lang.String r5, r6;
        java.util.WeakHashMap $r1, $r3, $r9, $r10;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        r5 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNamesNS>;

        if $r1 != null goto label1;

        $r10 = new java.util.WeakHashMap;

        specialinvoke $r10.<java.util.WeakHashMap: void <init>(int)>(11);

        r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNamesNS> = $r10;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNamesNS>;

        $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r2);

        $r11 = (org.apache.batik.util.SoftDoublyIndexedTable) $r4;

        r12 = $r11;

        if $r11 != null goto label2;

        $r9 = r0.<org.apache.batik.dom.AbstractDocument: java.util.WeakHashMap elementsByTagNamesNS>;

        $r8 = new org.apache.batik.util.SoftDoublyIndexedTable;

        specialinvoke $r8.<org.apache.batik.util.SoftDoublyIndexedTable: void <init>()>();

        r12 = $r8;

        virtualinvoke $r9.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8);

     label2:
        virtualinvoke r12.<org.apache.batik.util.SoftDoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r5, r6, r7);

        return;
    }

    public org.w3c.dom.events.Event createEvent(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.events.Event $r4;
        org.apache.batik.dom.events.DocumentEventSupport $r1, $r3, $r7;
        java.lang.String r2;
        org.apache.batik.dom.AbstractDOMImplementation $r6;
        org.w3c.dom.DOMImplementation $r5;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.events.DocumentEventSupport documentEventSupport>;

        if $r1 != null goto label1;

        $r5 = r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation>;

        $r6 = (org.apache.batik.dom.AbstractDOMImplementation) $r5;

        $r7 = virtualinvoke $r6.<org.apache.batik.dom.AbstractDOMImplementation: org.apache.batik.dom.events.DocumentEventSupport createDocumentEventSupport()>();

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.events.DocumentEventSupport documentEventSupport> = $r7;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.events.DocumentEventSupport documentEventSupport>;

        $r4 = virtualinvoke $r3.<org.apache.batik.dom.events.DocumentEventSupport: org.w3c.dom.events.Event createEvent(java.lang.String)>(r2);

        return $r4;
    }

    public boolean canDispatch(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument r1;
        int $i0;
        java.lang.String r0, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r2 = null;

     label2:
        if r2 == null goto label3;

        $z9 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/xml-events");

        if $z9 == 0 goto label7;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Event");

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MutationEvent");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MutationNameEvent");

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UIEvent");

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("MouseEvent");

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("KeyEvent");

        if $z5 != 0 goto label4;

        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("KeyboardEvent");

        if $z6 != 0 goto label4;

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("TextEvent");

        if $z7 != 0 goto label4;

        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("CustomEvent");

        if $z8 == 0 goto label5;

     label4:
        $z10 = 1;

        goto label6;

     label5:
        $z10 = 0;

     label6:
        return $z10;

     label7:
        return 0;
    }

    public org.w3c.dom.traversal.NodeIterator createNodeIterator(org.w3c.dom.Node, int, org.w3c.dom.traversal.NodeFilter, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.traversal.TraversalSupport $r1, $r4, $r6;
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.traversal.NodeIterator $r5;
        org.w3c.dom.Node r2;
        int i0;
        org.w3c.dom.traversal.NodeFilter r3;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        r3 := @parameter2: org.w3c.dom.traversal.NodeFilter;

        z0 := @parameter3: boolean;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.traversal.TraversalSupport traversalSupport>;

        if $r1 != null goto label1;

        $r6 = new org.apache.batik.dom.traversal.TraversalSupport;

        specialinvoke $r6.<org.apache.batik.dom.traversal.TraversalSupport: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.traversal.TraversalSupport traversalSupport> = $r6;

     label1:
        $r4 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.traversal.TraversalSupport traversalSupport>;

        $r5 = virtualinvoke $r4.<org.apache.batik.dom.traversal.TraversalSupport: org.w3c.dom.traversal.NodeIterator createNodeIterator(org.apache.batik.dom.AbstractDocument,org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)>(r0, r2, i0, r3, z0);

        return $r5;
    }

    public org.w3c.dom.traversal.TreeWalker createTreeWalker(org.w3c.dom.Node, int, org.w3c.dom.traversal.NodeFilter, boolean) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.traversal.TreeWalker $r3;
        org.w3c.dom.Node r1;
        int i0;
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.traversal.NodeFilter r2;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        r2 := @parameter2: org.w3c.dom.traversal.NodeFilter;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.apache.batik.dom.traversal.TraversalSupport: org.w3c.dom.traversal.TreeWalker createTreeWalker(org.apache.batik.dom.AbstractDocument,org.w3c.dom.Node,int,org.w3c.dom.traversal.NodeFilter,boolean)>(r0, r1, i0, r2, z0);

        return $r3;
    }

    public void detachNodeIterator(org.w3c.dom.traversal.NodeIterator)
    {
        org.apache.batik.dom.traversal.TraversalSupport $r2;
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.traversal.NodeIterator r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: org.w3c.dom.traversal.NodeIterator;

        $r2 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.traversal.TraversalSupport traversalSupport>;

        virtualinvoke $r2.<org.apache.batik.dom.traversal.TraversalSupport: void detachNodeIterator(org.w3c.dom.traversal.NodeIterator)>(r1);

        return;
    }

    public void nodeToBeRemoved(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.TraversalSupport $r1, $r3;
        org.w3c.dom.Node r2;
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.traversal.TraversalSupport traversalSupport>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.traversal.TraversalSupport traversalSupport>;

        virtualinvoke $r3.<org.apache.batik.dom.traversal.TraversalSupport: void nodeToBeRemoved(org.w3c.dom.Node)>(r2);

     label1:
        return;
    }

    protected org.apache.batik.dom.AbstractDocument getCurrentDocument()
    {
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        return r0;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.w3c.dom.Document)
    {
        java.lang.Object[] $r1;
        org.w3c.dom.Document r4;
        org.w3c.dom.DOMException $r2;
        org.w3c.dom.Node r3;
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r3 := @parameter0: org.w3c.dom.Node;

        r4 := @parameter1: org.w3c.dom.Document;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "import.document", $r1);

        throw $r2;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.w3c.dom.Document)
    {
        java.lang.Object[] $r1;
        org.w3c.dom.Document r4;
        org.w3c.dom.DOMException $r2;
        org.w3c.dom.Node r3;
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r3 := @parameter0: org.w3c.dom.Node;

        r4 := @parameter1: org.w3c.dom.Document;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "import.document", $r1);

        throw $r2;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractDocument r0, r2;
        org.apache.batik.i18n.LocalizableSupport $r4;
        org.w3c.dom.Node r1;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        java.lang.String $r7, $r8, $r9, $r10;
        org.w3c.dom.DOMImplementation $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractDocument) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation>;

        r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation> = $r3;

        $r4 = new org.apache.batik.i18n.LocalizableSupport;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r4.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.dom.resources.Messages", $r6);

        r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r4;

        $r7 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String inputEncoding>;

        r2.<org.apache.batik.dom.AbstractDocument: java.lang.String inputEncoding> = $r7;

        $r8 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlEncoding>;

        r2.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlEncoding> = $r8;

        $r9 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion>;

        r2.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion> = $r9;

        $z0 = r0.<org.apache.batik.dom.AbstractDocument: boolean xmlStandalone>;

        r2.<org.apache.batik.dom.AbstractDocument: boolean xmlStandalone> = $z0;

        $r10 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String documentURI>;

        r2.<org.apache.batik.dom.AbstractDocument: java.lang.String documentURI> = $r10;

        $z1 = r0.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking>;

        r2.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking> = $z1;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractDocument r0, r2;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        org.w3c.dom.DOMImplementation $r3;
        org.apache.batik.i18n.LocalizableSupport $r4;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractDocument) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation>;

        r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation> = $r3;

        $r4 = new org.apache.batik.i18n.LocalizableSupport;

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r4.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.dom.resources.Messages", $r6);

        r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r4;

        return r1;
    }

    protected void checkChildType(org.w3c.dom.Node, boolean)
    {
        java.lang.Object[] $r3, $r8;
        java.lang.Integer $r14, $r15, $r16;
        short $s0, $s1;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r6, $r13;
        int $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5, $r10, $r12;
        boolean z0;
        org.apache.batik.dom.AbstractDocument r1;
        org.w3c.dom.DocumentType $r2;
        org.w3c.dom.Element $r7;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label1;
            case 11: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r8 = newarray (java.lang.Object)[4];

        $r14 = new java.lang.Integer;

        $s1 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: short getNodeType()>();

        $i3 = (int) $s1;

        specialinvoke $r14.<java.lang.Integer: void <init>(int)>($i3);

        $r8[0] = $r14;

        $r10 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: java.lang.String getNodeName()>();

        $r8[1] = $r10;

        $r15 = new java.lang.Integer;

        $i4 = (int) $s0;

        specialinvoke $r15.<java.lang.Integer: void <init>(int)>($i4);

        $r8[2] = $r15;

        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r8[3] = $r12;

        $r13 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "child.type", $r8);

        throw $r13;

     label3:
        if z0 != 0 goto label4;

        if $s0 != 1 goto label4;

        $r7 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element getDocumentElement()>();

        if $r7 != null goto label5;

     label4:
        $i5 = (int) $s0;

        if $i5 != 10 goto label6;

        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DocumentType getDoctype()>();

        if $r2 == null goto label6;

     label5:
        $r3 = newarray (java.lang.Object)[2];

        $r16 = new java.lang.Integer;

        $i6 = (int) $s0;

        specialinvoke $r16.<java.lang.Integer: void <init>(int)>($i6);

        $r3[0] = $r16;

        $r5 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r3[1] = $r5;

        $r6 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "document.child.already.exists", $r3);

        throw $r6;

     label6:
        return;
    }

    public java.lang.String getInputEncoding()
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String inputEncoding>;

        return $r1;
    }

    public java.lang.String getXmlEncoding()
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlEncoding>;

        return $r1;
    }

    public boolean getXmlStandalone()
    {
        org.apache.batik.dom.AbstractDocument r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $z0 = r0.<org.apache.batik.dom.AbstractDocument: boolean xmlStandalone>;

        return $z0;
    }

    public void setXmlStandalone(boolean) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractDocument r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.dom.AbstractDocument: boolean xmlStandalone> = z0;

        return;
    }

    public java.lang.String getXmlVersion()
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion>;

        return $r1;
    }

    public void setXmlVersion(java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r2;
        org.w3c.dom.DOMException $r3;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.0");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z1 != 0 goto label2;

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r3 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "xml.version", $r2);

        throw $r3;

     label2:
        r1.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion> = r0;

        return;
    }

    public boolean getStrictErrorChecking()
    {
        org.apache.batik.dom.AbstractDocument r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $z0 = r0.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking>;

        return $z0;
    }

    public void setStrictErrorChecking(boolean)
    {
        org.apache.batik.dom.AbstractDocument r0;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking> = z0;

        return;
    }

    public java.lang.String getDocumentURI()
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String documentURI>;

        return $r1;
    }

    public void setDocumentURI(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.batik.dom.AbstractDocument: java.lang.String documentURI> = r1;

        return;
    }

    public org.w3c.dom.DOMConfiguration getDomConfig()
    {
        org.apache.batik.dom.AbstractDocument$DocumentConfiguration $r1, $r2, $r3;
        org.apache.batik.dom.AbstractDocument r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        if $r1 != null goto label1;

        $r3 = new org.apache.batik.dom.AbstractDocument$DocumentConfiguration;

        specialinvoke $r3.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: void <init>(org.apache.batik.dom.AbstractDocument)>(r0);

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig> = $r3;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        return $r2;
    }

    public org.w3c.dom.Node adoptNode(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r2, $r4, $r9;
        java.lang.Integer $r13;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r6, $r8;
        org.w3c.dom.Node r0, $r7;
        org.w3c.dom.DOMException $r3, $r5, $r12;
        int $i2, $i3;
        java.lang.String $r11;
        boolean $z0, $z1;
        org.apache.batik.dom.AbstractDocument r1;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.batik.dom.AbstractNode;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        tableswitch($i2)
        {
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label5;
            case 9: goto label2;
            case 10: goto label3;
            case 11: goto label5;
            case 12: goto label4;
            default: goto label5;
        };

     label2:
        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "adopt.document", $r4);

        throw $r5;

     label3:
        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "adopt.document.type", $r2);

        throw $r3;

     label4:
        return null;

     label5:
        r6 = (org.apache.batik.dom.AbstractNode) r0;

        $z1 = virtualinvoke r6.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z1 == 0 goto label6;

        $r9 = newarray (java.lang.Object)[2];

        $r13 = new java.lang.Integer;

        $s1 = virtualinvoke r6.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i3 = (int) $s1;

        specialinvoke $r13.<java.lang.Integer: void <init>(int)>($i3);

        $r9[0] = $r13;

        $r11 = virtualinvoke r6.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r9[1] = $r11;

        $r12 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r9);

        throw $r12;

     label6:
        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r7 == null goto label7;

        interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r0);

     label7:
        $r8 = (org.apache.batik.dom.AbstractNode) r0;

        virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: void adoptNode1(org.apache.batik.dom.AbstractNode)>($r8);

        return r0;
    }

    protected void adoptNode1(org.apache.batik.dom.AbstractNode)
    {
        org.apache.batik.dom.AbstractAttr r7, r8;
        short $s0, $s1;
        org.apache.batik.dom.AbstractNode r0, $r4;
        org.w3c.dom.Node $r2, $r3, $r6, r9;
        int $i2, i3, $i4, $i5;
        org.w3c.dom.NamedNodeMap $r5;
        boolean $z0;
        org.apache.batik.dom.AbstractDocument r1;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.apache.batik.dom.AbstractNode;

        r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = r1;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: short getNodeType()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 1: goto label02;
            case 2: goto label01;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label06;
            default: goto label09;
        };

     label01:
        r7 = (org.apache.batik.dom.AbstractAttr) r0;

        r7.<org.apache.batik.dom.AbstractAttr: org.apache.batik.dom.AbstractElement ownerElement> = null;

        r7.<org.apache.batik.dom.AbstractAttr: boolean unspecified> = 0;

        goto label09;

     label02:
        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i2 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i3 = 0;

        goto label05;

     label03:
        $r6 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        r8 = (org.apache.batik.dom.AbstractAttr) $r6;

        $z0 = virtualinvoke r8.<org.apache.batik.dom.AbstractAttr: boolean getSpecified()>();

        if $z0 == 0 goto label04;

        virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: void adoptNode1(org.apache.batik.dom.AbstractNode)>(r8);

     label04:
        i3 = i3 + 1;

     label05:
        if i3 < $i2 goto label03;

        goto label09;

     label06:
        goto label08;

     label07:
        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getFirstChild()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>($r3);

     label08:
        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getFirstChild()>();

        if $r2 != null goto label07;

     label09:
        virtualinvoke r1.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(5, r0, null);

        r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node getFirstChild()>();

        goto label13;

     label10:
        $s1 = interfaceinvoke r9.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s1;

        lookupswitch($i5)
        {
            case 6: goto label11;
            case 10: goto label11;
            case 12: goto label11;
            default: goto label12;
        };

     label11:
        return;

     label12:
        $r4 = (org.apache.batik.dom.AbstractNode) r9;

        virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: void adoptNode1(org.apache.batik.dom.AbstractNode)>($r4);

        r9 = interfaceinvoke r9.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label13:
        if r9 != null goto label10;

        return;
    }

    public org.w3c.dom.Node renameNode(org.w3c.dom.Node, java.lang.String, java.lang.String)
    {
        java.lang.Integer $r82, $r83, $r84, $r85, $r86;
        org.w3c.dom.Document $r6;
        org.apache.batik.dom.AbstractAttrNS r76;
        org.w3c.dom.DOMImplementation $r39;
        org.w3c.dom.events.Event $r21, $r24, $r36;
        java.lang.Object[] $r7, $r44, $r49, $r53, $r57, $r59, $r63;
        org.apache.batik.dom.AbstractAttr $r22, r78;
        short $s0;
        org.apache.batik.dom.AbstractNode r1;
        java.lang.String $r4, r5, $r9, $r11, $r14, $r41, $r42, $r43, $r46, $r48, $r51, $r55, $r61, r65, $r66, $r67;
        org.apache.batik.dom.events.EventSupport $r27, $r37, $r38, $r40;
        org.apache.batik.dom.AbstractDocument r2;
        org.apache.batik.dom.AbstractDOMImplementation r69;
        org.apache.batik.dom.AbstractElement r68;
        org.w3c.dom.events.MutationNameEvent r75, r77, r81;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.HashMap $r15, $r16, $r18, $r19, $r28, $r30, $r31, $r70, $r71, $r72, $r79, $r80;
        org.w3c.dom.Attr $r13, r74;
        org.w3c.dom.Node r0, $r25, $r33, $r35, $r73;
        org.w3c.dom.DOMException $r10, $r47, $r52, $r56, $r58, $r62, $r64;
        int $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12;
        org.w3c.dom.NamedNodeMap $r34;
        org.w3c.dom.Element $r3, $r12, $r23, $r26;
        java.lang.Object $r17, $r20, $r29, $r32;

        r2 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.w3c.dom.Node;

        r65 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r1 = (org.apache.batik.dom.AbstractNode) r0;

        $r3 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element getDocumentElement()>();

        if r1 != $r3 goto label01;

        $r63 = newarray (java.lang.Object)[0];

        $r64 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "rename.document.element", $r63);

        throw $r64;

     label01:
        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label02;

        $i7 = (int) $s0;

        if $i7 == 2 goto label02;

        $r59 = newarray (java.lang.Object)[2];

        $r82 = new java.lang.Integer;

        $i8 = (int) $s0;

        specialinvoke $r82.<java.lang.Integer: void <init>(int)>($i8);

        $r59[0] = $r82;

        $r61 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r59[1] = $r61;

        $r62 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "rename.node", $r59);

        throw $r62;

     label02:
        $r4 = r2.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z0 == 0 goto label03;

        $z10 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName11(java.lang.String)>(r5);

        if $z10 == 0 goto label04;

     label03:
        $z1 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName(java.lang.String)>(r5);

        if $z1 != 0 goto label05;

     label04:
        $r57 = newarray (java.lang.Object)[1];

        $r57[0] = r5;

        $r58 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "wf.invalid.name", $r57);

        throw $r58;

     label05:
        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        if $r6 == r2 goto label06;

        $r53 = newarray (java.lang.Object)[2];

        $r83 = new java.lang.Integer;

        $i9 = (int) $s0;

        specialinvoke $r83.<java.lang.Integer: void <init>(int)>($i9);

        $r53[0] = $r83;

        $r55 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r53[1] = $r55;

        $r56 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(9, "node.from.wrong.document", $r53);

        throw $r56;

     label06:
        $i1 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(58);

        if $i1 == 0 goto label07;

        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        if $i1 != $i3 goto label08;

     label07:
        $r7 = newarray (java.lang.Object)[3];

        $r84 = new java.lang.Integer;

        $i10 = (int) $s0;

        specialinvoke $r84.<java.lang.Integer: void <init>(int)>($i10);

        $r7[0] = $r84;

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r7[1] = $r9;

        $r7[2] = r5;

        $r10 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "qname", $r7);

        throw $r10;

     label08:
        $r11 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getPrefix(java.lang.String)>(r5);

        if r65 == null goto label09;

        $i5 = virtualinvoke r65.<java.lang.String: int length()>();

        if $i5 != 0 goto label09;

        r65 = null;

     label09:
        if $r11 == null goto label10;

        if r65 != null goto label10;

        $r49 = newarray (java.lang.Object)[3];

        $r85 = new java.lang.Integer;

        $i11 = (int) $s0;

        specialinvoke $r85.<java.lang.Integer: void <init>(int)>($i11);

        $r49[0] = $r85;

        $r51 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r49[1] = $r51;

        $r49[2] = $r11;

        $r52 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "prefix", $r49);

        throw $r52;

     label10:
        $z2 = r2.<org.apache.batik.dom.AbstractDocument: boolean strictErrorChecking>;

        if $z2 == 0 goto label13;

        $r41 = "xml";

        $z6 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label11;

        $r48 = "http://www.w3.org/XML/1998/namespace";

        $z9 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(r65);

        if $z9 == 0 goto label12;

     label11:
        $r42 = "xmlns";

        $z7 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z7 == 0 goto label13;

        $r43 = "http://www.w3.org/2000/xmlns/";

        $z8 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r65);

        if $z8 != 0 goto label13;

     label12:
        $r44 = newarray (java.lang.Object)[3];

        $r86 = new java.lang.Integer;

        $i12 = (int) $s0;

        specialinvoke $r86.<java.lang.Integer: void <init>(int)>($i12);

        $r44[0] = $r86;

        $r46 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r44[1] = $r46;

        $r44[2] = r65;

        $r47 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "namespace", $r44);

        throw $r47;

     label13:
        $r66 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r67 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        if $s0 != 1 goto label27;

        $r25 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r26 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>(r65, r5);

        r68 = (org.apache.batik.dom.AbstractElement) $r26;

        $r27 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport getEventSupport()>();

        if $r27 == null goto label15;

        $r37 = virtualinvoke r68.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport getEventSupport()>();

        if $r37 != null goto label14;

        $r39 = r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation>;

        r69 = (org.apache.batik.dom.AbstractDOMImplementation) $r39;

        $r40 = virtualinvoke r69.<org.apache.batik.dom.AbstractDOMImplementation: org.apache.batik.dom.events.EventSupport createEventSupport(org.apache.batik.dom.AbstractNode)>(r68);

        virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: void setEventsEnabled(boolean)>(1);

        r68.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport eventSupport> = $r40;

     label14:
        $r38 = virtualinvoke r68.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.events.EventSupport getEventSupport()>();

        virtualinvoke $r27.<org.apache.batik.dom.events.EventSupport: void moveEventListeners(org.apache.batik.dom.events.EventSupport)>($r38);

     label15:
        $r70 = r68.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        if $r70 != null goto label16;

        $r71 = null;

        goto label17;

     label16:
        $r28 = r1.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        $r29 = virtualinvoke $r28.<java.util.HashMap: java.lang.Object clone()>();

        $r71 = (java.util.HashMap) $r29;

     label17:
        r68.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData> = $r71;

        $r30 = r68.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        if $r30 != null goto label18;

        $r72 = null;

        goto label19;

     label18:
        $r31 = r1.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        $r32 = virtualinvoke $r31.<java.util.HashMap: java.lang.Object clone()>();

        $r72 = (java.util.HashMap) $r32;

     label19:
        r68.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers> = $r72;

        if $r25 == null goto label21;

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        interfaceinvoke $r25.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r0);

        goto label21;

     label20:
        $r33 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        virtualinvoke r68.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r33);

     label21:
        $r73 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r73 != null goto label20;

        $r34 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i6 = 0;

        goto label23;

     label22:
        $r35 = interfaceinvoke $r34.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i6);

        r74 = (org.w3c.dom.Attr) $r35;

        virtualinvoke r68.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r74);

        i6 = i6 + 1;

     label23:
        $i4 = interfaceinvoke $r34.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i6 < $i4 goto label22;

        if $r25 == null goto label25;

        if null != null goto label24;

        interfaceinvoke $r25.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r68);

        goto label25;

     label24:
        interfaceinvoke $r25.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(null, r68);

     label25:
        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(4, r0, r68);

        $z11 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z11 == 0 goto label26;

        $r36 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationNameEvent");

        r75 = (org.w3c.dom.events.MutationNameEvent) $r36;

        interfaceinvoke r75.<org.w3c.dom.events.MutationNameEvent: void initMutationNameEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String)>("http://www.w3.org/2001/xml-events", "DOMElementNameChanged", 1, 0, null, $r66, $r67);

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r75);

     label26:
        return r68;

     label27:
        $z3 = r0 instanceof org.apache.batik.dom.AbstractAttrNS;

        if $z3 == 0 goto label31;

        r76 = (org.apache.batik.dom.AbstractAttrNS) r0;

        $r23 = virtualinvoke r76.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Element getOwnerElement()>();

        if $r23 == null goto label28;

        interfaceinvoke $r23.<org.w3c.dom.Element: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>(r76);

     label28:
        r76.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI> = r65;

        r76.<org.apache.batik.dom.AbstractAttr: java.lang.String nodeName> = r5;

        if $r23 == null goto label29;

        interfaceinvoke $r23.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r76);

     label29:
        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(4, r76, null);

        $z5 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z5 == 0 goto label30;

        $r24 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationNameEvent");

        r77 = (org.w3c.dom.events.MutationNameEvent) $r24;

        interfaceinvoke r77.<org.w3c.dom.events.MutationNameEvent: void initMutationNameEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String)>("http://www.w3.org/2001/xml-events", "DOMAttrNameChanged", 1, 0, r76, $r66, $r67);

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r77);

     label30:
        return r76;

     label31:
        r78 = (org.apache.batik.dom.AbstractAttr) r0;

        $r12 = virtualinvoke r78.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Element getOwnerElement()>();

        if $r12 == null goto label32;

        interfaceinvoke $r12.<org.w3c.dom.Element: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>(r78);

     label32:
        $r13 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>(r65, r5);

        $r22 = (org.apache.batik.dom.AbstractAttr) $r13;

        $r14 = virtualinvoke r78.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeValue()>();

        virtualinvoke $r22.<org.apache.batik.dom.AbstractAttr: void setNodeValue(java.lang.String)>($r14);

        $r15 = r78.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        if $r15 != null goto label33;

        $r79 = null;

        goto label34;

     label33:
        $r16 = r78.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.lang.Object clone()>();

        $r79 = (java.util.HashMap) $r17;

     label34:
        $r22.<org.apache.batik.dom.AbstractNode: java.util.HashMap userData> = $r79;

        $r18 = r78.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        if $r18 != null goto label35;

        $r80 = null;

        goto label36;

     label35:
        $r19 = r78.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object clone()>();

        $r80 = (java.util.HashMap) $r20;

     label36:
        $r22.<org.apache.batik.dom.AbstractNode: java.util.HashMap userDataHandlers> = $r80;

        if $r12 == null goto label37;

        interfaceinvoke $r12.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>($r22);

     label37:
        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: void fireUserDataHandlers(short,org.w3c.dom.Node,org.w3c.dom.Node)>(4, r78, $r22);

        $z4 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z4 == 0 goto label38;

        $r21 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationNameEvent");

        r81 = (org.w3c.dom.events.MutationNameEvent) $r21;

        interfaceinvoke r81.<org.w3c.dom.events.MutationNameEvent: void initMutationNameEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String)>("http://www.w3.org/2001/xml-events", "DOMAttrNameChanged", 1, 0, $r22, $r66, $r67);

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r81);

     label38:
        return $r22;
    }

    public void normalizeDocument()
    {
        org.apache.batik.dom.AbstractDocument$DocumentConfiguration $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r10;
        org.w3c.dom.DOMErrorHandler $r12;
        java.lang.Object $r9;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        if $r1 != null goto label1;

        $r11 = new org.apache.batik.dom.AbstractDocument$DocumentConfiguration;

        specialinvoke $r11.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: void <init>(org.apache.batik.dom.AbstractDocument)>(r0);

        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig> = $r11;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $z0 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: boolean getBooleanParameter(java.lang.String)>("cdata-sections");

        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $z1 = virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: boolean getBooleanParameter(java.lang.String)>("comments");

        $r4 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $z2 = virtualinvoke $r4.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: boolean getBooleanParameter(java.lang.String)>("element-content-whitespace");

        $r5 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $z3 = virtualinvoke $r5.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: boolean getBooleanParameter(java.lang.String)>("namespace-declarations");

        $r6 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $z4 = virtualinvoke $r6.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: boolean getBooleanParameter(java.lang.String)>("namespaces");

        $r7 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $z5 = virtualinvoke $r7.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: boolean getBooleanParameter(java.lang.String)>("split-cdata-sections");

        $r8 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument$DocumentConfiguration domConfig>;

        $r9 = virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument$DocumentConfiguration: java.lang.Object getParameter(java.lang.String)>("error-handler");

        $r12 = (org.w3c.dom.DOMErrorHandler) $r9;

        $r10 = virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element getDocumentElement()>();

        virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: boolean normalizeDocument(org.w3c.dom.Element,boolean,boolean,boolean,boolean,boolean,boolean,org.w3c.dom.DOMErrorHandler)>($r10, $z0, $z1, $z2, $z3, $z4, $z5, $r12);

        return;
    }

    protected boolean normalizeDocument(org.w3c.dom.Element, boolean, boolean, boolean, boolean, boolean, boolean, org.w3c.dom.DOMErrorHandler)
    {
        org.w3c.dom.Text $r8;
        java.lang.Integer $r113, $r114, $r115, $r116, $r117;
        org.w3c.dom.DOMError $r28, $r31, $r36, $r41, $r44, $r49, $r54, $r58;
        java.lang.Object[] $r24, $r29, $r33, $r38, $r42, $r46, $r51, $r56;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s10, $s12, $s14, s15;
        java.lang.StringBuffer $r67, $r68, $r72, $r73, $r77, $r78, $r83, $r84, $r106, $r109, $r110, $r111, $r112;
        org.apache.batik.dom.AbstractDocument r5;
        org.w3c.dom.DOMErrorHandler r6;
        org.w3c.dom.Attr $r87, r94, r97, r101;
        org.w3c.dom.Node $r7, $r9, $r11, $r12, $r16, $r22, $r62, r88, r89, r90, r93, r103;
        int $i6, $i7, $i8, $i11, $i13, $i16, i17, $i18, i19, $i20, i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i39, $i40, $i42, $i43;
        org.w3c.dom.NamedNodeMap $r13, $r96, $r100;
        java.util.LinkedList $r107;
        org.w3c.dom.Element r0, $r105;
        java.lang.Object $r86;
        org.apache.batik.dom.AbstractText r92;
        java.lang.String $r3, $r4, $r10, $r17, $r18, $r19, $r20, $r21, $r23, $r26, $r27, $r30, $r32, $r35, $r37, $r40, $r43, $r45, $r48, $r50, $r53, $r55, $r57, $r59, $r60, $r61, $r63, $r64, $r65, $r69, $r70, $r74, $r75, $r79, $r80, $r81, $r91, $r95, $r98, $r99, $r102, $r104;
        org.apache.batik.dom.AbstractElement r1;
        boolean $z0, z1, z2, $z3, $z4, z5, z6, $z7, $z8, z9, $z10, $z11, $z12, z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36;
        java.util.HashMap $r108;
        java.util.Iterator $r85;
        char $c9;

        r5 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: org.w3c.dom.Element;

        z5 := @parameter1: boolean;

        z6 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z9 := @parameter4: boolean;

        z13 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        r6 := @parameter7: org.w3c.dom.DOMErrorHandler;

        r1 = (org.apache.batik.dom.AbstractElement) r0;

        r88 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label16;

     label01:
        $s0 = interfaceinvoke r88.<org.w3c.dom.Node: short getNodeType()>();

        s15 = $s0;

        $i23 = (int) $s0;

        if $i23 == 3 goto label02;

        if z5 != 0 goto label12;

        $i24 = (int) $s0;

        if $i24 != 4 goto label12;

     label02:
        r89 = r88;

        $r106 = new java.lang.StringBuffer;

        specialinvoke $r106.<java.lang.StringBuffer: void <init>()>();

        $r3 = interfaceinvoke r88.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        r90 = interfaceinvoke r88.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label04;

     label03:
        $r10 = interfaceinvoke r90.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r11 = interfaceinvoke r90.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r90);

        r90 = $r11;

     label04:
        if r90 == null goto label05;

        $s2 = interfaceinvoke r90.<org.w3c.dom.Node: short getNodeType()>();

        $i25 = (int) $s2;

        if $i25 == 3 goto label03;

        if z5 != 0 goto label05;

        $s3 = interfaceinvoke r90.<org.w3c.dom.Node: short getNodeType()>();

        $i26 = (int) $s3;

        if $i26 == 4 goto label03;

     label05:
        $r91 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.String toString()>();

        $i16 = virtualinvoke $r91.<java.lang.String: int length()>();

        if $i16 != 0 goto label06;

        $r9 = interfaceinvoke r90.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r90);

        r88 = $r9;

        goto label16;

     label06:
        $r4 = interfaceinvoke r89.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z0 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label08;

        if z5 != 0 goto label07;

        $i27 = (int) $s0;

        if $i27 != 3 goto label07;

        $r8 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Text createTextNode(java.lang.String)>($r91);

        r88 = $r8;

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>($r8, r89);

        goto label09;

     label07:
        r88 = r89;

        interfaceinvoke r89.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>($r91);

        goto label09;

     label08:
        r88 = r89;

     label09:
        if z1 != 0 goto label10;

        $s1 = interfaceinvoke r88.<org.w3c.dom.Node: short getNodeType()>();

        s15 = $s1;

        $i28 = (int) $s1;

        if $i28 != 3 goto label10;

        r92 = (org.apache.batik.dom.AbstractText) r88;

        $z4 = virtualinvoke r92.<org.apache.batik.dom.AbstractText: boolean isElementContentWhitespace()>();

        if $z4 == 0 goto label10;

        $r7 = interfaceinvoke r88.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r88);

        r88 = $r7;

        goto label16;

     label10:
        $i29 = (int) s15;

        if $i29 != 4 goto label11;

        if z2 == 0 goto label11;

        $z3 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean splitCdata(org.w3c.dom.Element,org.w3c.dom.Node,org.w3c.dom.DOMErrorHandler)>(r0, r88, r6);

        if $z3 != 0 goto label11;

        return 0;

     label11:
        goto label15;

     label12:
        $i30 = (int) $s0;

        if $i30 != 4 goto label13;

        if z2 == 0 goto label13;

        $z7 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean splitCdata(org.w3c.dom.Element,org.w3c.dom.Node,org.w3c.dom.DOMErrorHandler)>(r0, r88, r6);

        if $z7 != 0 goto label15;

        return 0;

     label13:
        $i31 = (int) $s0;

        if $i31 != 8 goto label15;

        if z6 != 0 goto label15;

        $r12 = interfaceinvoke r88.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r93 = $r12;

        if $r12 != null goto label14;

        r93 = interfaceinvoke r88.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label14:
        interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r88);

        r88 = r93;

        goto label16;

     label15:
        r88 = interfaceinvoke r88.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label16:
        if r88 != null goto label01;

        $r13 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r107 = new java.util.LinkedList;

        specialinvoke $r107.<java.util.LinkedList: void <init>()>();

        $r108 = new java.util.HashMap;

        specialinvoke $r108.<java.util.HashMap: void <init>()>();

        i17 = 0;

        goto label23;

     label17:
        $r16 = interfaceinvoke $r13.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i17);

        r94 = (org.w3c.dom.Attr) $r16;

        $r17 = interfaceinvoke r94.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if r94 == null goto label18;

        $r21 = "xmlns";

        $z12 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z12 != 0 goto label19;

     label18:
        $r18 = interfaceinvoke r94.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z8 == 0 goto label22;

     label19:
        if z9 != 0 goto label20;

        virtualinvoke $r107.<java.util.LinkedList: boolean add(java.lang.Object)>(r94);

        goto label22;

     label20:
        $r19 = interfaceinvoke r94.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r20 = interfaceinvoke r94.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z10 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z10 != 0 goto label22;

        $z11 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z11 != 0 goto label21;

        goto label22;

     label21:
        virtualinvoke $r108.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r19);

     label22:
        i17 = i17 + 1;

     label23:
        $i18 = interfaceinvoke $r13.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i17 < $i18 goto label17;

        if z9 != 0 goto label26;

        $r85 = virtualinvoke $r107.<java.util.AbstractSequentialList: java.util.Iterator iterator()>();

        goto label25;

     label24:
        $r86 = interfaceinvoke $r85.<java.util.Iterator: java.lang.Object next()>();

        $r87 = (org.w3c.dom.Attr) $r86;

        interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr)>($r87);

     label25:
        $z33 = interfaceinvoke $r85.<java.util.Iterator: boolean hasNext()>();

        if $z33 != 0 goto label24;

        goto label46;

     label26:
        if z13 == 0 goto label46;

        $r59 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r59 == null goto label30;

        $r80 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $r81 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>($r80);

        $z32 = virtualinvoke r5.<org.apache.batik.dom.AbstractNode: boolean compareStrings(java.lang.String,java.lang.String)>($r81, $r59);

        if $z32 != 0 goto label29;

        if $r80 != null goto label27;

        $r95 = "xmlns";

        goto label28;

     label27:
        $r109 = new java.lang.StringBuffer;

        specialinvoke $r109.<java.lang.StringBuffer: void <init>()>();

        $r83 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r80);

        $r95 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.String toString()>();

     label28:
        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", $r95, $r59);

     label29:
        goto label32;

     label30:
        $r60 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r60 != null goto label31;

        goto label32;

     label31:
        $r61 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>(null);

        if $r61 != null goto label32;

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns", "");

     label32:
        $r96 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i19 = 0;

        goto label45;

     label33:
        $r62 = interfaceinvoke $r96.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i19);

        r97 = (org.w3c.dom.Attr) $r62;

        $r63 = interfaceinvoke r97.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        if $r63 == null goto label43;

        $r65 = interfaceinvoke r97.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r65 == null goto label34;

        $z30 = virtualinvoke $r65.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z30 != 0 goto label44;

        $z31 = virtualinvoke $r65.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z31 != 0 goto label44;

     label34:
        $z28 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2000/xmlns/");

        if $z28 == 0 goto label35;

        goto label44;

     label35:
        if $r65 != null goto label36;

        $r98 = null;

        goto label37;

     label36:
        $r98 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>($r65);

     label37:
        if $r65 == null goto label38;

        if $r98 == null goto label38;

        $z29 = virtualinvoke $r98.<java.lang.String: boolean equals(java.lang.Object)>($r63);

        if $z29 != 0 goto label42;

     label38:
        $r99 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupPrefix(java.lang.String)>($r63);

        if $r99 == null goto label39;

        interfaceinvoke r97.<org.w3c.dom.Node: void setPrefix(java.lang.String)>($r99);

        goto label42;

     label39:
        if $r65 == null goto label40;

        $r75 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupNamespaceURI(java.lang.String)>($r65);

        if $r75 != null goto label40;

        $r110 = new java.lang.StringBuffer;

        specialinvoke $r110.<java.lang.StringBuffer: void <init>()>();

        $r77 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r65);

        $r79 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", $r79, $r63);

        goto label42;

     label40:
        goto label41;

     label41:
        $r111 = new java.lang.StringBuffer;

        specialinvoke $r111.<java.lang.StringBuffer: void <init>()>();

        $r67 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NS");

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        $r70 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String lookupPrefix(java.lang.String)>($r69);

        if $r70 != null goto label41;

        $r112 = new java.lang.StringBuffer;

        specialinvoke $r112.<java.lang.StringBuffer: void <init>()>();

        $r72 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns:");

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", $r74, $r63);

        interfaceinvoke r97.<org.w3c.dom.Node: void setPrefix(java.lang.String)>($r69);

        goto label42;

     label42:
        goto label44;

     label43:
        $r64 = interfaceinvoke r97.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r64 != null goto label44;

     label44:
        i19 = i19 + 1;

     label45:
        $i20 = interfaceinvoke $r96.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i19 < $i20 goto label33;

     label46:
        $r100 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i21 = 0;

        goto label50;

     label47:
        $r22 = interfaceinvoke $r100.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i21);

        r101 = (org.w3c.dom.Attr) $r22;

        $r23 = interfaceinvoke r101.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z14 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkName(java.lang.String)>($r23);

        if $z14 != 0 goto label48;

        if r6 == null goto label48;

        $r29 = newarray (java.lang.Object)[1];

        $r30 = interfaceinvoke r101.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r29[0] = $r30;

        $r31 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character-in-node-name", 2, "wf.invalid.name", $r29, r101, null);

        $z16 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r31);

        if $z16 != 0 goto label48;

        return 0;

     label48:
        $r102 = interfaceinvoke r101.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z34 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkChars(java.lang.String)>($r102);

        if $z34 != 0 goto label49;

        if r6 == null goto label49;

        $r24 = newarray (java.lang.Object)[3];

        $r113 = new java.lang.Integer;

        specialinvoke $r113.<java.lang.Integer: void <init>(int)>(2);

        $r24[0] = $r113;

        $r26 = interfaceinvoke r101.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r24[1] = $r26;

        $r27 = interfaceinvoke r101.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r24[2] = $r27;

        $r28 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character", 2, "wf.invalid.character", $r24, r101, null);

        $z15 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r28);

        if $z15 != 0 goto label49;

        return 0;

     label49:
        i21 = i21 + 1;

     label50:
        $i22 = interfaceinvoke $r100.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i21 < $i22 goto label47;

        r103 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label63;

     label51:
        $s4 = interfaceinvoke r103.<org.w3c.dom.Node: short getNodeType()>();

        $i32 = (int) $s4;

        tableswitch($i32)
        {
            case 1: goto label60;
            case 2: goto label62;
            case 3: goto label52;
            case 4: goto label55;
            case 5: goto label62;
            case 6: goto label62;
            case 7: goto label57;
            case 8: goto label53;
            default: goto label62;
        };

     label52:
        $r50 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z24 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkChars(java.lang.String)>($r50);

        if $z24 != 0 goto label62;

        if r6 == null goto label62;

        $r51 = newarray (java.lang.Object)[3];

        $r114 = new java.lang.Integer;

        $s14 = interfaceinvoke r103.<org.w3c.dom.Node: short getNodeType()>();

        $i33 = (int) $s14;

        specialinvoke $r114.<java.lang.Integer: void <init>(int)>($i33);

        $r51[0] = $r114;

        $r53 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r51[1] = $r53;

        $r51[2] = $r50;

        $r54 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character", 2, "wf.invalid.character", $r51, r103, null);

        $z25 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r54);

        if $z25 != 0 goto label62;

        return 0;

     label53:
        $r32 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z17 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkChars(java.lang.String)>($r32);

        if $z17 == 0 goto label54;

        $i6 = virtualinvoke $r32.<java.lang.String: int indexOf(java.lang.String)>("--");

        $i35 = (int) -1;

        if $i6 != $i35 goto label54;

        $i7 = virtualinvoke $r32.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        $c9 = virtualinvoke $r32.<java.lang.String: char charAt(int)>($i8);

        $i36 = (int) $c9;

        if $i36 != 45 goto label62;

     label54:
        if r6 == null goto label62;

        $r33 = newarray (java.lang.Object)[3];

        $r115 = new java.lang.Integer;

        $s5 = interfaceinvoke r103.<org.w3c.dom.Node: short getNodeType()>();

        $i37 = (int) $s5;

        specialinvoke $r115.<java.lang.Integer: void <init>(int)>($i37);

        $r33[0] = $r115;

        $r35 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r33[1] = $r35;

        $r33[2] = $r32;

        $r36 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character", 2, "wf.invalid.character", $r33, r103, null);

        $z18 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r36);

        if $z18 != 0 goto label62;

        return 0;

     label55:
        $r45 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z22 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkChars(java.lang.String)>($r45);

        if $z22 == 0 goto label56;

        $i13 = virtualinvoke $r45.<java.lang.String: int indexOf(java.lang.String)>("]]>");

        $i39 = (int) -1;

        if $i13 == $i39 goto label62;

     label56:
        if r6 == null goto label62;

        $r46 = newarray (java.lang.Object)[3];

        $r116 = new java.lang.Integer;

        $s12 = interfaceinvoke r103.<org.w3c.dom.Node: short getNodeType()>();

        $i40 = (int) $s12;

        specialinvoke $r116.<java.lang.Integer: void <init>(int)>($i40);

        $r46[0] = $r116;

        $r48 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r46[1] = $r48;

        $r46[2] = $r45;

        $r49 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character", 2, "wf.invalid.character", $r46, r103, null);

        $z23 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r49);

        if $z23 != 0 goto label62;

        return 0;

     label57:
        $r37 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z19 = virtualinvoke $r37.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("xml");

        if $z19 == 0 goto label58;

        if r6 == null goto label58;

        $r42 = newarray (java.lang.Object)[1];

        $r43 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r42[0] = $r43;

        $r44 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character-in-node-name", 2, "wf.invalid.name", $r42, r103, null);

        $z21 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r44);

        if $z21 != 0 goto label58;

        return 0;

     label58:
        $r104 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z35 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkChars(java.lang.String)>($r104);

        if $z35 == 0 goto label59;

        $i11 = virtualinvoke $r104.<java.lang.String: int indexOf(java.lang.String)>("?>");

        $i42 = (int) -1;

        if $i11 == $i42 goto label62;

     label59:
        if r6 == null goto label62;

        $r38 = newarray (java.lang.Object)[3];

        $r117 = new java.lang.Integer;

        $s10 = interfaceinvoke r103.<org.w3c.dom.Node: short getNodeType()>();

        $i43 = (int) $s10;

        specialinvoke $r117.<java.lang.Integer: void <init>(int)>($i43);

        $r38[0] = $r117;

        $r40 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r38[1] = $r40;

        $r38[2] = $r104;

        $r41 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character", 2, "wf.invalid.character", $r38, r103, null);

        $z20 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r41);

        if $z20 != 0 goto label62;

        return 0;

     label60:
        $r55 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z26 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean checkName(java.lang.String)>($r55);

        if $z26 != 0 goto label61;

        if r6 == null goto label61;

        $r56 = newarray (java.lang.Object)[1];

        $r57 = interfaceinvoke r103.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r56[0] = $r57;

        $r58 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("wf-invalid-character-in-node-name", 2, "wf.invalid.name", $r56, r103, null);

        $z27 = interfaceinvoke r6.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r58);

        if $z27 != 0 goto label61;

        return 0;

     label61:
        $r105 = (org.w3c.dom.Element) r103;

        $z36 = virtualinvoke r5.<org.apache.batik.dom.AbstractDocument: boolean normalizeDocument(org.w3c.dom.Element,boolean,boolean,boolean,boolean,boolean,boolean,org.w3c.dom.DOMErrorHandler)>($r105, z5, z6, z1, z9, z13, z2, r6);

        if $z36 != 0 goto label62;

        return 0;

     label62:
        r103 = interfaceinvoke r103.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label63:
        if r103 != null goto label51;

        return 1;
    }

    protected boolean splitCdata(org.w3c.dom.Element, org.w3c.dom.Node, org.w3c.dom.DOMErrorHandler)
    {
        java.lang.Object[] $r9;
        org.w3c.dom.Node r0, $r4;
        int $i0, $i1, $i2, $i4;
        org.w3c.dom.CDATASection $r7, $r11;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        org.apache.batik.dom.AbstractDocument r6;
        org.w3c.dom.Element r5;
        org.w3c.dom.DOMErrorHandler r8;
        org.w3c.dom.DOMError $r10;

        r6 := @this: org.apache.batik.dom.AbstractDocument;

        r5 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.w3c.dom.Node;

        r8 := @parameter2: org.w3c.dom.DOMErrorHandler;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("]]>");

        $i4 = (int) -1;

        if $i0 == $i4 goto label3;

        $i1 = $i0 + 2;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i0 + 2;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke r0.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>($r2);

        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r4 != null goto label1;

        $r11 = virtualinvoke r6.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r3);

        interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r11);

        goto label2;

     label1:
        $r7 = virtualinvoke r6.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r3);

        interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r7, $r4);

     label2:
        if r8 == null goto label3;

        $r9 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke r6.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMError createDOMError(java.lang.String,short,java.lang.String,java.lang.Object[],org.w3c.dom.Node,java.lang.Exception)>("cdata-sections-splitted", 1, "cdata.section.split", $r9, r0, null);

        $z0 = interfaceinvoke r8.<org.w3c.dom.DOMErrorHandler: boolean handleError(org.w3c.dom.DOMError)>($r10);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    protected boolean checkChars(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument r1;
        char $c1, $c2;
        int $i0, i3, i4, $i5, $i6;
        java.lang.String r0, $r2;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r2 = r1.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z0 == 0 goto label4;

        i3 = 0;

        goto label3;

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i5 = (int) $c2;

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXML11Character(int)>($i5);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < $i0 goto label1;

        goto label8;

     label4:
        i4 = 0;

        goto label7;

     label5:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i6 = (int) $c1;

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLCharacter(int)>($i6);

        if $z1 != 0 goto label6;

        return 0;

     label6:
        i4 = i4 + 1;

     label7:
        if i4 < $i0 goto label5;

     label8:
        return 1;
    }

    protected boolean checkName(java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String $r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: java.lang.String xmlVersion>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName11(java.lang.String)>(r2);

        return $z2;

     label1:
        $z1 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName(java.lang.String)>(r2);

        return $z1;
    }

    protected org.w3c.dom.DOMError createDOMError(java.lang.String, short, java.lang.String, java.lang.Object[], org.w3c.dom.Node, java.lang.Exception)
    {
        java.lang.Object[] r5;
        org.apache.batik.dom.AbstractDocument r1, $r3;
        java.lang.Exception r8, $r9;
        short s0;
        org.w3c.dom.Node r7;
        org.apache.batik.dom.AbstractDocument$DocumentError $r0, $r10;
        java.lang.String r2, r4, $r6;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.Object[];

        r7 := @parameter4: org.w3c.dom.Node;

        r8 := @parameter5: java.lang.Exception;

     label1:
        $r0 = new org.apache.batik.dom.AbstractDocument$DocumentError;

        $r3 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r6 = virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r4, r5);

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$DocumentError: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.String,short,java.lang.String,org.w3c.dom.Node,java.lang.Exception)>(r1, r2, s0, $r6, r7, r8);

        return $r0;

     label2:
        $r9 := @caughtexception;

        $r10 = new org.apache.batik.dom.AbstractDocument$DocumentError;

        specialinvoke $r10.<org.apache.batik.dom.AbstractDocument$DocumentError: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.String,short,java.lang.String,org.w3c.dom.Node,java.lang.Exception)>(r1, r2, s0, r4, r7, r8);

        return $r10;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    public void setTextContent(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractDocument r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setXBLManager(org.apache.batik.dom.xbl.XBLManager)
    {
        org.apache.batik.dom.xbl.GenericXBLManager $r4;
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1, $r2, $r3, r5;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r5 := @parameter0: org.apache.batik.dom.xbl.XBLManager;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $z0 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: boolean isProcessing()>();

        $r2 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        interfaceinvoke $r2.<org.apache.batik.dom.xbl.XBLManager: void stopProcessing()>();

        if r5 != null goto label1;

        $r4 = new org.apache.batik.dom.xbl.GenericXBLManager;

        specialinvoke $r4.<org.apache.batik.dom.xbl.GenericXBLManager: void <init>()>();

        r5 = $r4;

     label1:
        r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager> = r5;

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        interfaceinvoke $r3.<org.apache.batik.dom.xbl.XBLManager: void startProcessing()>();

     label2:
        return;
    }

    public org.apache.batik.dom.xbl.XBLManager getXBLManager()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        return $r1;
    }

    public org.w3c.dom.xpath.XPathExpression createExpression(java.lang.String, org.w3c.dom.xpath.XPathNSResolver) throws org.w3c.dom.DOMException, org.w3c.dom.xpath.XPathException
    {
        org.w3c.dom.xpath.XPathNSResolver r3;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.String r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r0;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.w3c.dom.xpath.XPathNSResolver;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathExpr;

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathExpr: void <init>(org.apache.batik.dom.AbstractDocument,java.lang.String,org.w3c.dom.xpath.XPathNSResolver)>(r1, r2, r3);

        return $r0;
    }

    public org.w3c.dom.xpath.XPathNSResolver createNSResolver(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractDocument r1;
        org.apache.batik.dom.AbstractDocument$XPathNodeNSResolver $r0;
        org.w3c.dom.Node r2;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter0: org.w3c.dom.Node;

        $r0 = new org.apache.batik.dom.AbstractDocument$XPathNodeNSResolver;

        specialinvoke $r0.<org.apache.batik.dom.AbstractDocument$XPathNodeNSResolver: void <init>(org.apache.batik.dom.AbstractDocument,org.w3c.dom.Node)>(r1, r2);

        return $r0;
    }

    public java.lang.Object evaluate(java.lang.String, org.w3c.dom.Node, org.w3c.dom.xpath.XPathNSResolver, short, java.lang.Object) throws org.w3c.dom.xpath.XPathException, org.w3c.dom.DOMException
    {
        org.w3c.dom.xpath.XPathNSResolver r2;
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.xpath.XPathExpression $r3;
        short s0;
        org.w3c.dom.Node r4;
        java.lang.Object r5, $r6;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.w3c.dom.Node;

        r2 := @parameter2: org.w3c.dom.xpath.XPathNSResolver;

        s0 := @parameter3: short;

        r5 := @parameter4: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathExpression createExpression(java.lang.String,org.w3c.dom.xpath.XPathNSResolver)>(r1, r2);

        $r6 = interfaceinvoke $r3.<org.w3c.dom.xpath.XPathExpression: java.lang.Object evaluate(org.w3c.dom.Node,short,java.lang.Object)>(r4, s0, r5);

        return $r6;
    }

    public org.w3c.dom.xpath.XPathException createXPathException(short, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r3;
        org.w3c.dom.xpath.XPathException $r0, $r6;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.Exception $r5;
        short s0;
        java.lang.String r2, $r4;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        s0 := @parameter0: short;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

     label1:
        $r0 = new org.w3c.dom.xpath.XPathException;

        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: java.lang.String formatMessage(java.lang.String,java.lang.Object[])>(r2, r3);

        specialinvoke $r0.<org.w3c.dom.xpath.XPathException: void <init>(short,java.lang.String)>(s0, $r4);

        return $r0;

     label2:
        $r5 := @caughtexception;

        $r6 = new org.w3c.dom.xpath.XPathException;

        specialinvoke $r6.<org.w3c.dom.xpath.XPathException: void <init>(short,java.lang.String)>(s0, r2);

        return $r6;

        catch java.lang.Exception from label1 to label2 with label2;
    }

    public org.w3c.dom.Node getXblParentNode()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblParentNode(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.NodeList getXblChildNodes()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.NodeList $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.NodeList getXblChildNodes(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.NodeList getXblScopedChildNodes()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.NodeList $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.NodeList getXblScopedChildNodes(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Node getXblFirstChild()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblFirstChild(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Node getXblLastChild()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblLastChild(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Node getXblPreviousSibling()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblPreviousSibling(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Node getXblNextSibling()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.apache.batik.dom.xbl.XBLManager $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Node getXblNextSibling(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Element getXblFirstElementChild()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblFirstElementChild(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Element getXblLastElementChild()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblLastElementChild(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Element getXblPreviousElementSibling()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblPreviousElementSibling(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Element getXblNextElementSibling()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblNextElementSibling(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Element getXblBoundElement()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblBoundElement(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.Element getXblShadowTree()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.Element $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.Element getXblShadowTree(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    public org.w3c.dom.NodeList getXblDefinitions()
    {
        org.apache.batik.dom.AbstractDocument r0;
        org.w3c.dom.NodeList $r2;
        org.apache.batik.dom.xbl.XBLManager $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.xbl.XBLManager xblManager>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.xbl.XBLManager: org.w3c.dom.NodeList getXblDefinitions(org.w3c.dom.Node)>(r0);

        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.Class $r3;
        java.lang.String $r4;
        org.w3c.dom.DOMImplementation $r2;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Object[] $r10;
        java.io.ObjectInputStream r0;
        org.apache.batik.i18n.LocalizableSupport $r2;
        java.lang.String $r6;
        java.lang.reflect.Method $r9;
        org.w3c.dom.DOMImplementation $r12, $r16;
        java.lang.Class[] $r8;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.Exception $r13, $r14;
        java.lang.Class $r3, $r7;
        java.lang.Object $r5, $r11, $r15;
        java.lang.ClassLoader $r4;

        r1 := @this: org.apache.batik.dom.AbstractDocument;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new org.apache.batik.i18n.LocalizableSupport;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r2.<org.apache.batik.i18n.LocalizableSupport: void <init>(java.lang.String,java.lang.ClassLoader)>("org.apache.batik.dom.resources.Messages", $r4);

        r1.<org.apache.batik.dom.AbstractDocument: org.apache.batik.i18n.LocalizableSupport localizableSupport> = $r2;

        $r5 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6);

     label1:
        $r8 = (java.lang.Class[]) null;

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getDOMImplementation", $r8);

        $r10 = (java.lang.Object[]) null;

        $r11 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r10);

        $r12 = (org.w3c.dom.DOMImplementation) $r11;

        r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation> = $r12;

     label2:
        goto label7;

     label3:
        $r14 := @caughtexception;

     label4:
        $r15 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

        $r16 = (org.w3c.dom.DOMImplementation) $r15;

        r1.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.DOMImplementation implementation> = $r16;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public abstract org.w3c.dom.Attr createAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.Element createElementNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.EntityReference createEntityReference(java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.Attr createAttribute(java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.CDATASection createCDATASection(java.lang.String) throws org.w3c.dom.DOMException;

    public abstract org.w3c.dom.Comment createComment(java.lang.String);

    public abstract org.w3c.dom.Text createTextNode(java.lang.String);

    public abstract org.w3c.dom.DocumentFragment createDocumentFragment();

    public abstract org.w3c.dom.Element createElement(java.lang.String) throws org.w3c.dom.DOMException;

    public static void <clinit>()
    {
        <org.apache.batik.dom.AbstractDocument: java.lang.String RESOURCES> = "org.apache.batik.dom.resources.Messages";

        return;
    }
}
