public class org.apache.batik.ext.awt.image.GraphicsUtil extends java.lang.Object
{
    public static java.awt.geom.AffineTransform IDENTITY;
    public static final boolean WARN_DESTINATION;
    public static final java.awt.image.ColorModel Linear_sRGB;
    public static final java.awt.image.ColorModel Linear_sRGB_Pre;
    public static final java.awt.image.ColorModel Linear_sRGB_Unpre;
    public static final java.awt.image.ColorModel sRGB;
    public static final java.awt.image.ColorModel sRGB_Pre;
    public static final java.awt.image.ColorModel sRGB_Unpre;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.GraphicsUtil r0;

        r0 := @this: org.apache.batik.ext.awt.image.GraphicsUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void drawImage(java.awt.Graphics2D, java.awt.image.RenderedImage)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed $r2;
        java.awt.Graphics2D r0;
        java.awt.image.RenderedImage r1;

        r0 := @parameter0: java.awt.Graphics2D;

        r1 := @parameter1: java.awt.image.RenderedImage;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>(r1);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,org.apache.batik.ext.awt.image.rendered.CachableRed)>(r0, $r2);

        return;
    }

    public static void drawImage(java.awt.Graphics2D, org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.SampleModel $r7;
        byte $b53, $b54;
        org.apache.batik.ext.awt.image.rendered.AffineRed r38, $r52, $r54;
        java.awt.image.Raster $r19;
        java.awt.Composite $r46;
        org.apache.batik.ext.awt.image.rendered.TranslateRed r39, $r53;
        java.awt.Graphics2D r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, $i74, $i75, $i76;
        java.lang.Object $r9, $r10, $r11, $r48;
        java.awt.image.WritableRaster $r13, $r17, $r20, $r21;
        java.awt.geom.AffineTransform $r1, $r34, r37, $r45;
        org.apache.batik.ext.awt.image.rendered.CachableRed r36;
        java.lang.Throwable $r35;
        java.awt.RenderingHints$Key $r8, $r47;
        java.awt.RenderingHints $r26, $r31;
        java.awt.Point $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15;
        java.awt.Shape $r50;
        java.awt.image.BufferedImage $r18, $r33, $r55, $r57;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed r42;
        org.apache.batik.ext.awt.image.SVGComposite $r23, $r24;
        java.awt.Rectangle $r4, $r5, $r49, r51, $r58, $r59;
        java.awt.color.ColorSpace $r27, $r28, $r32, r40, $r43;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.awt.image.ColorModel $r2, $r3, $r6, r41, $r44;

        r0 := @parameter0: java.awt.Graphics2D;

        r36 := @parameter1: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r37 = null;

        goto label01;

     label01:
        $z11 = r36 instanceof org.apache.batik.ext.awt.image.rendered.AffineRed;

        if $z11 == 0 goto label04;

        r38 = (org.apache.batik.ext.awt.image.rendered.AffineRed) r36;

        if r37 != null goto label02;

        r37 = virtualinvoke r38.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform getTransform()>();

        goto label03;

     label02:
        $r34 = virtualinvoke r38.<org.apache.batik.ext.awt.image.rendered.AffineRed: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke r37.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r34);

     label03:
        r36 = virtualinvoke r38.<org.apache.batik.ext.awt.image.rendered.AffineRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        goto label01;

     label04:
        $z0 = r36 instanceof org.apache.batik.ext.awt.image.rendered.TranslateRed;

        if $z0 == 0 goto label07;

        r39 = (org.apache.batik.ext.awt.image.rendered.TranslateRed) r36;

        $i62 = virtualinvoke r39.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int getDeltaX()>();

        $i63 = virtualinvoke r39.<org.apache.batik.ext.awt.image.rendered.TranslateRed: int getDeltaY()>();

        if r37 != null goto label05;

        $d5 = (double) $i62;

        $d4 = (double) $i63;

        r37 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d5, $d4);

        goto label06;

     label05:
        $d3 = (double) $i62;

        $d2 = (double) $i63;

        virtualinvoke r37.<java.awt.geom.AffineTransform: void translate(double,double)>($d3, $d2);

     label06:
        r36 = virtualinvoke r39.<org.apache.batik.ext.awt.image.rendered.TranslateRed: org.apache.batik.ext.awt.image.rendered.CachableRed getSource()>();

        goto label01;

     label07:
        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        if r37 == null goto label08;

        $z10 = virtualinvoke r37.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z10 == 0 goto label09;

     label08:
        r37 = $r1;

        goto label10;

     label09:
        virtualinvoke r37.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r1);

     label10:
        $r2 = interfaceinvoke r36.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel getDestinationColorModel(java.awt.Graphics2D)>(r0);

        r40 = null;

        if $r3 == null goto label11;

        r40 = virtualinvoke $r3.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

     label11:
        if r40 != null goto label12;

        r40 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

     label12:
        r41 = $r3;

        if $r3 == null goto label13;

        $z9 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z9 != 0 goto label14;

     label13:
        r41 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

     label14:
        $z12 = r36 instanceof org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        if $z12 == 0 goto label15;

        $r32 = virtualinvoke $r2.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $z7 = virtualinvoke r40.<java.lang.Object: boolean equals(java.lang.Object)>($r32);

        if $z7 == 0 goto label15;

        $z8 = virtualinvoke r41.<java.awt.image.ColorModel: boolean equals(java.lang.Object)>($r2);

        if $z8 == 0 goto label15;

        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>(r37);

        r42 = (org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed) r36;

        $r33 = virtualinvoke r42.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: java.awt.image.BufferedImage getBufferedImage()>();

        $i60 = virtualinvoke r42.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i61 = virtualinvoke r42.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        virtualinvoke r0.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r33, $i60, $i61, null);

        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        return;

     label15:
        $d6 = virtualinvoke r37.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $z13 = virtualinvoke r37.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z13 != 0 goto label17;

        $b54 = $d6 cmpg 1.0;

        $i75 = (int) $b54;

        if $i75 > 0 goto label17;

        $i55 = virtualinvoke r37.<java.awt.geom.AffineTransform: int getType()>();

        if $i55 == 1 goto label16;

        $r52 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        $r31 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        specialinvoke $r52.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>(r36, r37, $r31);

        r36 = $r52;

        goto label17;

     label16:
        $i56 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getMinX()>();

        $d0 = virtualinvoke r37.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $i57 = (int) $d0;

        i64 = $i56 + $i57;

        $i58 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getMinY()>();

        $d1 = virtualinvoke r37.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $i59 = (int) $d1;

        i65 = $i58 + $i59;

        $r53 = new org.apache.batik.ext.awt.image.rendered.TranslateRed;

        specialinvoke $r53.<org.apache.batik.ext.awt.image.rendered.TranslateRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,int,int)>(r36, i64, i65);

        r36 = $r53;

     label17:
        $r43 = virtualinvoke $r2.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        if r40 == $r43 goto label19;

        $r27 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        if r40 != $r27 goto label18;

        r36 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed convertTosRGB(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r36);

        goto label19;

     label18:
        $r28 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        if r40 != $r28 goto label19;

        r36 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed convertToLsRGB(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r36);

     label19:
        $r44 = interfaceinvoke r36.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z14 = virtualinvoke r41.<java.awt.image.ColorModel: boolean equals(java.lang.Object)>($r44);

        if $z14 != 0 goto label20;

        r36 = staticinvoke <org.apache.batik.ext.awt.image.rendered.FormatRed: org.apache.batik.ext.awt.image.rendered.CachableRed construct(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel)>(r36, r41);

     label20:
        $z1 = virtualinvoke r37.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z1 != 0 goto label21;

        $b53 = $d6 cmpl 1.0;

        $i76 = (int) $b53;

        if $i76 <= 0 goto label21;

        $r54 = new org.apache.batik.ext.awt.image.rendered.AffineRed;

        $r26 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        specialinvoke $r54.<org.apache.batik.ext.awt.image.rendered.AffineRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.geom.AffineTransform,java.awt.RenderingHints)>(r36, r37, $r26);

        r36 = $r54;

     label21:
        $r45 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.geom.AffineTransform IDENTITY>;

        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r45);

        $r46 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $r47 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_TRANSCODING>;

        $r48 = virtualinvoke r0.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r47);

        if $r48 != "Printing" goto label22;

        $r23 = <org.apache.batik.ext.awt.image.SVGComposite: org.apache.batik.ext.awt.image.SVGComposite OVER>;

        $z6 = virtualinvoke $r23.<org.apache.batik.ext.awt.image.SVGComposite: boolean equals(java.lang.Object)>($r46);

        if $z6 == 0 goto label22;

        $r24 = <org.apache.batik.ext.awt.image.SVGComposite: org.apache.batik.ext.awt.image.SVGComposite OVER>;

        virtualinvoke r0.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r24);

     label22:
        $r49 = interfaceinvoke r36.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r50 = virtualinvoke r0.<java.awt.Graphics: java.awt.Shape getClip()>();

     label23:
        if $r50 != null goto label24;

        r51 = $r49;

        goto label27;

     label24:
        $r4 = interfaceinvoke $r50.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $z2 = virtualinvoke $r4.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r49);

        if $z2 != 0 goto label26;

        goto label49;

     label25:
        return;

     label26:
        r51 = virtualinvoke $r4.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r49);

     label27:
        $r5 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Rectangle getDestinationBounds(java.awt.Graphics2D)>(r0);

        if $r5 == null goto label30;

        $z5 = virtualinvoke r51.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r5);

        if $z5 != 0 goto label29;

        goto label50;

     label28:
        return;

     label29:
        r51 = virtualinvoke r51.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r5);

     label30:
        z15 = 0;

        $r6 = interfaceinvoke r36.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r7 = interfaceinvoke r36.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r7.<java.awt.image.SampleModel: int getWidth()>();

        $i1 = virtualinvoke $r7.<java.awt.image.SampleModel: int getHeight()>();

        $i5 = $i0 * $i1;

        $i3 = r51.<java.awt.Rectangle: int width>;

        $i2 = r51.<java.awt.Rectangle: int height>;

        $i4 = $i3 * $i2;

        if $i5 < $i4 goto label31;

        z15 = 1;

     label31:
        $r8 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_AVOID_TILE_PAINTING>;

        $r9 = virtualinvoke r0.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r8);

        $r10 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.lang.Object VALUE_AVOID_TILE_PAINTING_ON>;

        if $r9 != $r10 goto label32;

        z15 = 1;

     label32:
        $r11 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.lang.Object VALUE_AVOID_TILE_PAINTING_OFF>;

        if $r9 != $r11 goto label33;

        z15 = 0;

     label33:
        if z15 == 0 goto label34;

        $r19 = interfaceinvoke r36.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>(r51);

        $r20 = (java.awt.image.WritableRaster) $r19;

        $i50 = r51.<java.awt.Rectangle: int x>;

        $i49 = r51.<java.awt.Rectangle: int y>;

        $i48 = r51.<java.awt.Rectangle: int width>;

        $i47 = r51.<java.awt.Rectangle: int height>;

        $r21 = virtualinvoke $r20.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i50, $i49, $i48, $i47, 0, 0, null);

        $r55 = new java.awt.image.BufferedImage;

        $z4 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r55.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r6, $r21, $z4, null);

        $i52 = r51.<java.awt.Rectangle: int x>;

        $i51 = r51.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r55, $i52, $i51, null);

        goto label44;

     label34:
        $r56 = new java.awt.Point;

        specialinvoke $r56.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r13 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r7, $r56);

        $r57 = new java.awt.image.BufferedImage;

        $z3 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r57.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r6, $r13, $z3, null);

        $i6 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getMinTileX()>();

        $i7 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getNumXTiles()>();

        i8 = $i6 + $i7;

        $i9 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getMinTileY()>();

        $i10 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getNumYTiles()>();

        i11 = $i9 + $i10;

        $i12 = virtualinvoke $r7.<java.awt.image.SampleModel: int getWidth()>();

        $i13 = virtualinvoke $r7.<java.awt.image.SampleModel: int getHeight()>();

        $r58 = new java.awt.Rectangle;

        specialinvoke $r58.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i12, $i13);

        $r59 = new java.awt.Rectangle;

        specialinvoke $r59.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $i14 = $i9 * $i13;

        $i15 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        i66 = $i14 + $i15;

        $i16 = r51.<java.awt.Rectangle: int y>;

        $i17 = $i16 - i66;

        i67 = $i17 / $i13;

        if i67 >= 0 goto label35;

        i67 = 0;

     label35:
        $i44 = $i9 + i67;

        $i18 = $i6 * $i12;

        $i19 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i45 = $i18 + $i19;

        $i20 = r51.<java.awt.Rectangle: int x>;

        $i21 = $i20 - $i45;

        $i46 = $i21 / $i12;

        i68 = $i46;

        if $i46 >= 0 goto label36;

        i68 = 0;

     label36:
        $i40 = $i6 + i68;

        $i23 = r51.<java.awt.Rectangle: int x>;

        $i22 = r51.<java.awt.Rectangle: int width>;

        $i24 = $i23 + $i22;

        $i41 = $i24 - 1;

        $i26 = r51.<java.awt.Rectangle: int y>;

        $i25 = r51.<java.awt.Rectangle: int height>;

        $i27 = $i26 + $i25;

        $i42 = $i27 - 1;

        $i28 = $i44 * $i13;

        $i29 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        i69 = $i28 + $i29;

        $i30 = $i40 * $i12;

        $i31 = interfaceinvoke r36.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i43 = $i30 + $i31;

        i70 = $i12;

        i71 = $i43;

        i72 = $i44;

        goto label43;

     label37:
        if i69 <= $i42 goto label38;

        goto label44;

     label38:
        i73 = $i40;

        goto label41;

     label39:
        if i71 < $i43 goto label42;

        if i71 <= $i41 goto label40;

        goto label42;

     label40:
        $r58.<java.awt.Rectangle: int x> = i71;

        $r58.<java.awt.Rectangle: int y> = i69;

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r49, $r58, $r59);

        $i35 = $r59.<java.awt.Rectangle: int width>;

        $i34 = $r59.<java.awt.Rectangle: int height>;

        $i33 = $r59.<java.awt.Rectangle: int x>;

        $i32 = $r59.<java.awt.Rectangle: int y>;

        $r17 = virtualinvoke $r13.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>(0, 0, $i35, $i34, $i33, $i32, null);

        interfaceinvoke r36.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r17);

        $i37 = $r59.<java.awt.Rectangle: int width>;

        $i36 = $r59.<java.awt.Rectangle: int height>;

        $r18 = virtualinvoke $r57.<java.awt.image.BufferedImage: java.awt.image.BufferedImage getSubimage(int,int,int,int)>(0, 0, $i37, $i36);

        $i39 = $r59.<java.awt.Rectangle: int x>;

        $i38 = $r59.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r18, $i39, $i38, null);

        i73 = i73 + 1;

        i71 = i71 + i70;

     label41:
        if i73 < i8 goto label39;

     label42:
        $i74 = neg i70;

        i70 = $i74;

        i71 = i71 + $i74;

        i72 = i72 + 1;

        i69 = i69 + $i13;

     label43:
        if i72 < i11 goto label37;

     label44:
        goto label51;

     label45:
        goto label48;

     label46:
        $r35 := @caughtexception;

        goto label52;

     label47:
        throw $r35;

     label48:
        return;

     label49:
        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke r0.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r46);

        goto label25;

     label50:
        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke r0.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r46);

        goto label28;

     label51:
        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke r0.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r46);

        goto label45;

     label52:
        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke r0.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r46);

        goto label47;

        catch java.lang.Throwable from label23 to label46 with label46;
    }

    public static void drawImage(java.awt.Graphics2D, java.awt.image.renderable.RenderableImage, java.awt.image.renderable.RenderContext)
    {
        java.awt.Shape $r2, $r5;
        java.awt.RenderingHints $r3, $r7;
        java.awt.geom.AffineTransform $r1, $r6;
        java.awt.image.renderable.RenderContext r4;
        java.awt.Graphics2D r0;
        java.awt.image.renderable.RenderableImage r8;

        r0 := @parameter0: java.awt.Graphics2D;

        r8 := @parameter1: java.awt.image.renderable.RenderableImage;

        r4 := @parameter2: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r2 = virtualinvoke r0.<java.awt.Graphics: java.awt.Shape getClip()>();

        $r3 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        $r5 = virtualinvoke r4.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        if $r5 == null goto label1;

        virtualinvoke r0.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r5);

     label1:
        $r6 = virtualinvoke r4.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke r0.<java.awt.Graphics2D: void transform(java.awt.geom.AffineTransform)>($r6);

        $r7 = virtualinvoke r4.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        virtualinvoke r0.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>($r7);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>(r0, r8);

        virtualinvoke r0.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke r0.<java.awt.Graphics: void setClip(java.awt.Shape)>($r2);

        virtualinvoke r0.<java.awt.Graphics2D: void setRenderingHints(java.util.Map)>($r3);

        return;
    }

    public static void drawImage(java.awt.Graphics2D, java.awt.image.renderable.RenderableImage)
    {
        java.awt.Shape $r4;
        java.awt.image.RenderedImage $r6;
        java.awt.RenderingHints $r5;
        java.awt.geom.AffineTransform $r2, $r7;
        java.awt.image.renderable.RenderContext $r3;
        org.apache.batik.ext.awt.image.renderable.PaintRable r9;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r8;
        java.awt.Graphics2D r1;
        java.awt.image.renderable.RenderableImage r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.image.renderable.RenderableImage;

        $z0 = r0 instanceof org.apache.batik.ext.awt.image.renderable.PaintRable;

        if $z0 == 0 goto label1;

        r9 = (org.apache.batik.ext.awt.image.renderable.PaintRable) r0;

        $z1 = interfaceinvoke r9.<org.apache.batik.ext.awt.image.renderable.PaintRable: boolean paintRable(java.awt.Graphics2D)>(r1);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r3 = new java.awt.image.renderable.RenderContext;

        $r4 = virtualinvoke r1.<java.awt.Graphics: java.awt.Shape getClip()>();

        $r5 = virtualinvoke r1.<java.awt.Graphics2D: java.awt.RenderingHints getRenderingHints()>();

        specialinvoke $r3.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r2, $r4, $r5);

        $r6 = interfaceinvoke r0.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r3);

        if $r6 != null goto label2;

        return;

     label2:
        $r7 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.geom.AffineTransform IDENTITY>;

        virtualinvoke r1.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r7);

        $r8 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r6);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1, $r8);

        virtualinvoke r1.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r2);

        return;
    }

    public static java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage, java.awt.RenderingHints)
    {
        java.awt.Rectangle $r5;
        java.awt.image.BufferedImage r0;
        java.awt.RenderingHints r2;
        java.awt.Graphics2D $r1;
        java.awt.RenderingHints$Key $r4;
        int $i0, $i1;
        java.lang.ref.WeakReference $r3;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.RenderingHints;

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        if r2 == null goto label1;

        virtualinvoke $r1.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>(r2);

     label1:
        $r4 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_BUFFERED_IMAGE>;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r4, $r3);

        $r5 = new java.awt.Rectangle;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r5.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke $r1.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r5);

        return $r1;
    }

    public static java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r4;
        java.awt.image.BufferedImage r0;
        java.awt.Graphics2D $r1;
        java.awt.RenderingHints$Key $r3;
        int $i0, $i1;
        java.lang.ref.WeakReference $r2;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r3 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_BUFFERED_IMAGE>;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r3, $r2);

        $r4 = new java.awt.Rectangle;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r4.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke $r1.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r4);

        return $r1;
    }

    public static java.awt.image.BufferedImage getDestination(java.awt.Graphics2D)
    {
        java.io.PrintStream $r7;
        java.awt.GraphicsConfiguration $r3;
        java.awt.image.BufferedImage $r10;
        java.awt.GraphicsDevice $r4;
        java.lang.ref.Reference $r8;
        java.awt.Graphics2D r0;
        java.awt.RenderingHints$Key $r1, $r5;
        int $i0;
        java.lang.Object $r2, $r6, $r9;
        boolean $z0;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_BUFFERED_IMAGE>;

        $r2 = virtualinvoke r0.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r1);

        if $r2 == null goto label1;

        $r8 = (java.lang.ref.Reference) $r2;

        $r9 = virtualinvoke $r8.<java.lang.ref.Reference: java.lang.Object get()>();

        $r10 = (java.awt.image.BufferedImage) $r9;

        return $r10;

     label1:
        $r3 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.GraphicsConfiguration getDeviceConfiguration()>();

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke $r3.<java.awt.GraphicsConfiguration: java.awt.GraphicsDevice getDevice()>();

        $z0 = <org.apache.batik.ext.awt.image.GraphicsUtil: boolean WARN_DESTINATION>;

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r4.<java.awt.GraphicsDevice: int getType()>();

        if $i0 != 2 goto label3;

        $r5 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_TRANSCODING>;

        $r6 = virtualinvoke r0.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r5);

        if $r6 == "Printing" goto label3;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Graphics2D from BufferedImage lacks BUFFERED_IMAGE hint");

     label3:
        return null;
    }

    public static java.awt.image.ColorModel getDestinationColorModel(java.awt.Graphics2D)
    {
        java.awt.GraphicsConfiguration $r2;
        java.awt.image.BufferedImage $r1;
        java.awt.GraphicsDevice $r3;
        java.awt.image.ColorModel $r4, $r7, $r8;
        java.awt.Graphics2D r0;
        int $i0;
        java.awt.RenderingHints$Key $r5;
        java.lang.Object $r6;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.BufferedImage getDestination(java.awt.Graphics2D)>(r0);

        if $r1 == null goto label1;

        $r8 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        return $r8;

     label1:
        $r2 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.GraphicsConfiguration getDeviceConfiguration()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = virtualinvoke $r2.<java.awt.GraphicsConfiguration: java.awt.GraphicsDevice getDevice()>();

        $i0 = virtualinvoke $r3.<java.awt.GraphicsDevice: int getType()>();

        if $i0 != 2 goto label4;

        $r5 = <org.apache.batik.ext.awt.RenderingHintsKeyExt: java.awt.RenderingHints$Key KEY_TRANSCODING>;

        $r6 = virtualinvoke r0.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r5);

        if $r6 != "Printing" goto label3;

        $r7 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre>;

        return $r7;

     label3:
        return null;

     label4:
        $r4 = virtualinvoke $r2.<java.awt.GraphicsConfiguration: java.awt.image.ColorModel getColorModel()>();

        return $r4;
    }

    public static java.awt.color.ColorSpace getDestinationColorSpace(java.awt.Graphics2D)
    {
        java.awt.image.ColorModel $r1;
        java.awt.Graphics2D r0;
        java.awt.color.ColorSpace $r2;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel getDestinationColorModel(java.awt.Graphics2D)>(r0);

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        return $r2;

     label1:
        return null;
    }

    public static java.awt.Rectangle getDestinationBounds(java.awt.Graphics2D)
    {
        java.awt.Rectangle $r4;
        java.awt.GraphicsConfiguration $r2;
        java.awt.image.BufferedImage $r1;
        java.awt.GraphicsDevice $r3;
        java.awt.Graphics2D r0;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.BufferedImage getDestination(java.awt.Graphics2D)>(r0);

        if $r1 == null goto label1;

        $r4 = new java.awt.Rectangle;

        $i1 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i2 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r4.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i1, $i2);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.GraphicsConfiguration getDeviceConfiguration()>();

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = virtualinvoke $r2.<java.awt.GraphicsConfiguration: java.awt.GraphicsDevice getDevice()>();

        $i0 = virtualinvoke $r3.<java.awt.GraphicsDevice: int getType()>();

        if $i0 != 2 goto label3;

        return null;

     label3:
        return null;
    }

    public static java.awt.image.ColorModel makeLinear_sRGBCM(boolean)
    {
        java.awt.image.ColorModel $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r0 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Pre>;

        goto label2;

     label1:
        $r0 = <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre>;

     label2:
        return $r0;
    }

    public static java.awt.image.BufferedImage makeLinearBufferedImage(int, int, boolean)
    {
        java.awt.image.ColorModel $r0;
        java.awt.image.BufferedImage $r2;
        int i0, i1;
        java.awt.image.WritableRaster $r1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel makeLinear_sRGBCM(boolean)>(z0);

        $r1 = virtualinvoke $r0.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>(i0, i1);

        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r0, $r1, z0, null);

        return $r2;
    }

    public static org.apache.batik.ext.awt.image.rendered.CachableRed convertToLsRGB(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1;
        java.awt.color.ColorSpace $r2, $r3;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r3 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        if $r2 != $r3 goto label1;

        return r0;

     label1:
        $r4 = new org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.rendered.Any2LsRGBRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r0);

        return $r4;
    }

    public static org.apache.batik.ext.awt.image.rendered.CachableRed convertTosRGB(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1;
        org.apache.batik.ext.awt.image.rendered.Any2sRGBRed $r4;
        java.awt.color.ColorSpace $r2, $r3;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r3 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        if $r2 != $r3 goto label1;

        return r0;

     label1:
        $r4 = new org.apache.batik.ext.awt.image.rendered.Any2sRGBRed;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.rendered.Any2sRGBRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r0);

        return $r4;
    }

    public static org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed $r4;
        java.awt.image.BufferedImage $r3;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed $r2;
        java.awt.image.RenderedImage r0;
        org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.image.RenderedImage;

        $z0 = r0 instanceof org.apache.batik.ext.awt.image.rendered.CachableRed;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.batik.ext.awt.image.rendered.CachableRed) r0;

        return $r4;

     label1:
        $z1 = r0 instanceof java.awt.image.BufferedImage;

        if $z1 == 0 goto label2;

        $r2 = new org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $r3 = (java.awt.image.BufferedImage) r0;

        specialinvoke $r2.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: void <init>(java.awt.image.BufferedImage)>($r3);

        return $r2;

     label2:
        $r1 = new org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed;

        specialinvoke $r1.<org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed: void <init>(java.awt.image.RenderedImage)>(r0);

        return $r1;
    }

    public static void copyData_INT_PACK(java.awt.image.Raster, java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r2, $r5;
        java.awt.image.DataBufferInt $r9, $r12;
        java.awt.image.Raster r1;
        java.awt.image.SinglePixelPackedSampleModel $r8, $r11;
        int[][] $r4, $r7;
        int[] $r10, $r13;
        java.awt.image.DataBuffer $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62;
        java.awt.image.WritableRaster r0;

        r1 := @parameter0: java.awt.image.Raster;

        r0 := @parameter1: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        i52 = $i0;

        $i1 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        if $i0 >= $i1 goto label01;

        i52 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

     label01:
        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        i53 = $i2;

        $i3 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        if $i2 >= $i3 goto label02;

        i53 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

     label02:
        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i6 = $i4 + $i5;

        $i51 = $i6 - 1;

        i54 = $i51;

        $i7 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i8 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i9 = $i7 + $i8;

        $i10 = $i9 - 1;

        if $i51 <= $i10 goto label03;

        $i47 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i48 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i49 = $i47 + $i48;

        i54 = $i49 - 1;

     label03:
        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i12 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i13 = $i11 + $i12;

        $i50 = $i13 - 1;

        i55 = $i50;

        $i14 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i15 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i16 = $i14 + $i15;

        $i17 = $i16 - 1;

        if $i50 <= $i17 goto label04;

        $i40 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i41 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i42 = $i40 + $i41;

        i55 = $i42 - 1;

     label04:
        $i18 = i54 - i52;

        $i43 = $i18 + 1;

        $i19 = i55 - i53;

        $i44 = $i19 + 1;

        $r2 = virtualinvoke r1.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r8 = (java.awt.image.SinglePixelPackedSampleModel) $r2;

        $i20 = virtualinvoke $r8.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r3 = virtualinvoke r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r9 = (java.awt.image.DataBufferInt) $r3;

        $r4 = virtualinvoke $r9.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        $r10 = $r4[0];

        $i21 = virtualinvoke $r9.<java.awt.image.DataBuffer: int getOffset()>();

        $i22 = virtualinvoke r1.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i23 = i52 - $i22;

        $i24 = virtualinvoke r1.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i25 = i53 - $i24;

        $i26 = virtualinvoke $r8.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i23, $i25);

        $i45 = $i21 + $i26;

        $r5 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r11 = (java.awt.image.SinglePixelPackedSampleModel) $r5;

        $i27 = virtualinvoke $r11.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r6 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r12 = (java.awt.image.DataBufferInt) $r6;

        $r7 = virtualinvoke $r12.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        $r13 = $r7[0];

        $i28 = virtualinvoke $r12.<java.awt.image.DataBuffer: int getOffset()>();

        $i29 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i30 = i52 - $i29;

        $i31 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i32 = i53 - $i31;

        $i33 = virtualinvoke $r11.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i30, $i32);

        $i46 = $i28 + $i33;

        if $i20 != $i27 goto label05;

        if $i20 != $i43 goto label05;

        $i39 = $i43 * $i44;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i45, $r13, $i46, $i39);

        goto label13;

     label05:
        if $i43 <= 128 goto label08;

        i56 = $i45;

        i57 = $i46;

        i58 = 0;

        goto label07;

     label06:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, i56, $r13, i57, $i43);

        i56 = i56 + $i20;

        i57 = i57 + $i27;

        i58 = i58 + 1;

     label07:
        if i58 < $i44 goto label06;

        goto label13;

     label08:
        i59 = 0;

        goto label12;

     label09:
        $i34 = i59 * $i20;

        i60 = $i45 + $i34;

        $i35 = i59 * $i27;

        i61 = $i46 + $i35;

        i62 = 0;

        goto label11;

     label10:
        $i36 = i61;

        i61 = i61 + 1;

        $i37 = i60;

        i60 = i60 + 1;

        $i38 = $r10[$i37];

        $r13[$i36] = $i38;

        i62 = i62 + 1;

     label11:
        if i62 < $i43 goto label10;

        i59 = i59 + 1;

     label12:
        if i59 < $i44 goto label09;

     label13:
        return;
    }

    public static void copyData_FALLBACK(java.awt.image.Raster, java.awt.image.WritableRaster)
    {
        int[] $r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32;
        java.awt.image.Raster r1;
        java.awt.image.WritableRaster r0;

        r1 := @parameter0: java.awt.image.Raster;

        r0 := @parameter1: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        i28 = $i0;

        $i1 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        if $i0 >= $i1 goto label1;

        i28 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

     label1:
        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        i29 = $i2;

        $i3 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        if $i2 >= $i3 goto label2;

        i29 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

     label2:
        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i6 = $i4 + $i5;

        $i27 = $i6 - 1;

        i30 = $i27;

        $i7 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i8 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i9 = $i7 + $i8;

        $i10 = $i9 - 1;

        if $i27 <= $i10 goto label3;

        $i23 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i24 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i25 = $i23 + $i24;

        i30 = $i25 - 1;

     label3:
        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i12 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $i13 = $i11 + $i12;

        $i26 = $i13 - 1;

        i31 = $i26;

        $i14 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i15 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i16 = $i14 + $i15;

        $i17 = $i16 - 1;

        if $i26 <= $i17 goto label4;

        $i19 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i20 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i21 = $i19 + $i20;

        i31 = $i21 - 1;

     label4:
        $i18 = i30 - i28;

        $i22 = $i18 + 1;

        r3 = null;

        i32 = i29;

        goto label6;

     label5:
        $r2 = virtualinvoke r1.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>(i28, i32, $i22, 1, r3);

        r3 = $r2;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>(i28, i32, $i22, 1, $r2);

        i32 = i32 + 1;

     label6:
        if i32 <= i31 goto label5;

        return;
    }

    public static void copyData(java.awt.image.Raster, java.awt.image.WritableRaster)
    {
        java.awt.image.Raster r0;
        java.awt.image.WritableRaster r2;
        java.awt.image.SampleModel $r1, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.image.Raster;

        r2 := @parameter1: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r1, 0);

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r2.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r3, 0);

        if $z1 == 0 goto label1;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>(r0, r2);

        return;

     label1:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>(r0, r2);

        return;
    }

    public static java.awt.image.WritableRaster copyRaster(java.awt.image.Raster)
    {
        java.awt.image.Raster r0;
        int $i0, $i1;
        java.awt.image.WritableRaster $r1;

        r0 := @parameter0: java.awt.image.Raster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.WritableRaster copyRaster(java.awt.image.Raster,int,int)>(r0, $i0, $i1);

        return $r1;
    }

    public static java.awt.image.WritableRaster copyRaster(java.awt.image.Raster, int, int)
    {
        byte[] $r14, $r15;
        java.awt.Point $r2;
        java.awt.image.DataBufferByte r17, r18;
        java.awt.image.DataBufferUShort r23, r24;
        java.awt.image.DataBufferShort r21, r22;
        java.awt.image.SampleModel $r1;
        int[] $r7, $r8, $r9;
        short[] $r10, $r11, $r12, $r13;
        java.awt.image.DataBuffer $r5, $r6;
        java.awt.image.DataBufferInt r19, r20;
        java.awt.image.Raster r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23;
        java.lang.IllegalArgumentException $r16;
        java.awt.image.WritableRaster $r3, $r4;

        r0 := @parameter0: java.awt.image.Raster;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r3 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r1, $r2);

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $r4 = virtualinvoke $r3.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i2, $i5, $i6, $i7, i8, i9, null);

        $r5 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r6 = virtualinvoke $r4.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i10 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getDataType()>();

        $i11 = virtualinvoke $r6.<java.awt.image.DataBuffer: int getDataType()>();

        if $i10 == $i11 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("New DataBuffer doesn\'t match original");

        throw $r16;

     label1:
        $i12 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getSize()>();

        $i13 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getNumBanks()>();

        $r7 = virtualinvoke $r5.<java.awt.image.DataBuffer: int[] getOffsets()>();

        i23 = 0;

        goto label8;

     label2:
        $i14 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getDataType()>();

        tableswitch($i14)
        {
            case 0: goto label3;
            case 1: goto label6;
            case 2: goto label5;
            case 3: goto label4;
            default: goto label7;
        };

     label3:
        r17 = (java.awt.image.DataBufferByte) $r5;

        r18 = (java.awt.image.DataBufferByte) $r6;

        $r14 = virtualinvoke r17.<java.awt.image.DataBufferByte: byte[] getData(int)>(i23);

        $i21 = $r7[i23];

        $r15 = virtualinvoke r18.<java.awt.image.DataBufferByte: byte[] getData(int)>(i23);

        $i22 = $r7[i23];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, $i21, $r15, $i22, $i12);

        goto label7;

     label4:
        r19 = (java.awt.image.DataBufferInt) $r5;

        r20 = (java.awt.image.DataBufferInt) $r6;

        $r8 = virtualinvoke r19.<java.awt.image.DataBufferInt: int[] getData(int)>(i23);

        $i15 = $r7[i23];

        $r9 = virtualinvoke r20.<java.awt.image.DataBufferInt: int[] getData(int)>(i23);

        $i16 = $r7[i23];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i15, $r9, $i16, $i12);

        goto label7;

     label5:
        r21 = (java.awt.image.DataBufferShort) $r5;

        r22 = (java.awt.image.DataBufferShort) $r6;

        $r10 = virtualinvoke r21.<java.awt.image.DataBufferShort: short[] getData(int)>(i23);

        $i17 = $r7[i23];

        $r11 = virtualinvoke r22.<java.awt.image.DataBufferShort: short[] getData(int)>(i23);

        $i18 = $r7[i23];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i17, $r11, $i18, $i12);

        goto label7;

     label6:
        r23 = (java.awt.image.DataBufferUShort) $r5;

        r24 = (java.awt.image.DataBufferUShort) $r6;

        $r12 = virtualinvoke r23.<java.awt.image.DataBufferUShort: short[] getData(int)>(i23);

        $i19 = $r7[i23];

        $r13 = virtualinvoke r24.<java.awt.image.DataBufferUShort: short[] getData(int)>(i23);

        $i20 = $r7[i23];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, $i19, $r13, $i20, $i12);

        goto label7;

     label7:
        i23 = i23 + 1;

     label8:
        if i23 < $i13 goto label2;

        return $r4;
    }

    public static java.awt.image.WritableRaster makeRasterWritable(java.awt.image.Raster)
    {
        java.awt.image.Raster r0;
        int $i0, $i1;
        java.awt.image.WritableRaster $r1;

        r0 := @parameter0: java.awt.image.Raster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.WritableRaster makeRasterWritable(java.awt.image.Raster,int,int)>(r0, $i0, $i1);

        return $r1;
    }

    public static java.awt.image.WritableRaster makeRasterWritable(java.awt.image.Raster, int, int)
    {
        java.awt.Point $r3;
        java.awt.image.SampleModel $r1;
        java.awt.image.Raster r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.awt.image.WritableRaster $r4, $r5;
        java.awt.image.DataBuffer $r2;

        r0 := @parameter0: java.awt.image.Raster;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $r2 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r3 = new java.awt.Point;

        specialinvoke $r3.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r4 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.image.DataBuffer,java.awt.Point)>($r1, $r2, $r3);

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        $r5 = virtualinvoke $r4.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i2, $i5, $i6, $i7, i8, i9, null);

        return $r5;
    }

    public static java.awt.image.ColorModel coerceColorModel(java.awt.image.ColorModel, boolean)
    {
        java.awt.image.ColorModel r0, $r2;
        java.awt.image.WritableRaster $r1;
        boolean $z0, z1;

        r0 := @parameter0: java.awt.image.ColorModel;

        z1 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 != z1 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>(1, 1);

        $r2 = virtualinvoke r0.<java.awt.image.ColorModel: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,boolean)>($r1, z1);

        return $r2;
    }

    public static java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster, java.awt.image.ColorModel, boolean)
    {
        java.awt.image.ColorModel r0, $r2;
        java.awt.image.WritableRaster r1;
        boolean $z0, $z1, z2;

        r1 := @parameter0: java.awt.image.WritableRaster;

        r0 := @parameter1: java.awt.image.ColorModel;

        z2 := @parameter2: boolean;

        $z0 = virtualinvoke r0.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $z1 = virtualinvoke r0.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z1 != z2 goto label2;

        return r0;

     label2:
        if z2 == 0 goto label3;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void multiplyAlpha(java.awt.image.WritableRaster)>(r1);

        goto label4;

     label3:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void divideAlpha(java.awt.image.WritableRaster)>(r1);

     label4:
        $r2 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceColorModel(java.awt.image.ColorModel,boolean)>(r0, z2);

        return $r2;
    }

    public static void multiplyAlpha(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r1, $r2;
        int[] $r3, r4;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, i8, $i9, $i10, $i11, i12, i13, i14;
        boolean $z0, $z1;
        float $f0, f1, $f2, $f3, $f4;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_BYTE_COMP_Data(java.awt.image.SampleModel)>($r1);

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void mult_BYTE_COMP_Data(java.awt.image.WritableRaster)>(r0);

        goto label10;

     label01:
        $r2 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r2, 1);

        if $z1 == 0 goto label02;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void mult_INT_PACK_Data(java.awt.image.WritableRaster)>(r0);

        goto label10;

     label02:
        r4 = null;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getNumBands()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        i3 = $i1 + $i2;

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        i6 = $i4 + $i5;

        i12 = $i4;

        goto label09;

     label03:
        i13 = $i1;

        goto label08;

     label04:
        $r3 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i13, i12, r4);

        r4 = $r3;

        $i7 = $i0 - 1;

        i8 = $r3[$i7];

        if i8 < 0 goto label07;

        if i8 >= 255 goto label07;

        $f0 = (float) i8;

        f1 = $f0 * 0.003921569F;

        i14 = 0;

        goto label06;

     label05:
        $i10 = $r3[i14];

        $f2 = (float) $i10;

        $f3 = $f2 * f1;

        $f4 = $f3 + 0.5F;

        $i11 = (int) $f4;

        $r3[i14] = $i11;

        i14 = i14 + 1;

     label06:
        $i9 = $i0 - 1;

        if i14 < $i9 goto label05;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i13, i12, $r3);

     label07:
        i13 = i13 + 1;

     label08:
        if i13 < i3 goto label04;

        i12 = i12 + 1;

     label09:
        if i12 < i6 goto label03;

     label10:
        return;
    }

    public static void divideAlpha(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r1, $r2;
        int[] $r3, r4;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, i8, $i9, $i10, $i11, i12, i13, i14;
        boolean $z0, $z1;
        float $f0, f1, $f2, $f3, $f4;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_BYTE_COMP_Data(java.awt.image.SampleModel)>($r1);

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void divide_BYTE_COMP_Data(java.awt.image.WritableRaster)>(r0);

        goto label10;

     label01:
        $r2 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z1 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r2, 1);

        if $z1 == 0 goto label02;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void divide_INT_PACK_Data(java.awt.image.WritableRaster)>(r0);

        goto label10;

     label02:
        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getNumBands()>();

        r4 = null;

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        i3 = $i1 + $i2;

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        i6 = $i4 + $i5;

        i12 = $i4;

        goto label09;

     label03:
        i13 = $i1;

        goto label08;

     label04:
        $r3 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixel(int,int,int[])>(i13, i12, r4);

        r4 = $r3;

        $i7 = $i0 - 1;

        i8 = $r3[$i7];

        if i8 <= 0 goto label07;

        if i8 >= 255 goto label07;

        $f0 = (float) i8;

        f1 = 255.0F / $f0;

        i14 = 0;

        goto label06;

     label05:
        $i10 = $r3[i14];

        $f2 = (float) $i10;

        $f3 = $f2 * f1;

        $f4 = $f3 + 0.5F;

        $i11 = (int) $f4;

        $r3[i14] = $i11;

        i14 = i14 + 1;

     label06:
        $i9 = $i0 - 1;

        if i14 < $i9 goto label05;

        virtualinvoke r0.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i13, i12, $r3);

     label07:
        i13 = i13 + 1;

     label08:
        if i13 < i3 goto label04;

        i12 = i12 + 1;

     label09:
        if i12 < i6 goto label03;

     label10:
        return;
    }

    public static void copyData(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r0;
        java.awt.image.BufferedImage r1, r2;
        int $i0, $i1;
        java.awt.Point $r3;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        $r3 = new java.awt.Point;

        specialinvoke $r3.<java.awt.Point: void <init>(int,int)>(0, 0);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.BufferedImage,java.awt.Rectangle,java.awt.image.BufferedImage,java.awt.Point)>(r1, $r0, r2, $r3);

        return;
    }

    public static void copyData(java.awt.image.BufferedImage, java.awt.Rectangle, java.awt.image.BufferedImage, java.awt.Point)
    {
        int[] $r9, $r10, $r11, $r12, r15, r16, r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i110, i111, i112, i113, i114, i115, i116, i117, i118, i119, i120, i121, i122, i123, i124, i125, $i127, $i129, $i131, $i133, $i135, $i137, $i139, $i141, $i143, $i145, $i147, $i149, $i151, $i153, $i155, $i157, $i159, $i161, $i163, $i165, $i167, $i169;
        java.awt.image.WritableRaster $r4, $r5, $r13, $r14;
        java.awt.Point r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.image.BufferedImage r0, r2;
        java.awt.Rectangle r7, $r18;
        java.awt.image.ColorModel $r1, $r3;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r7 := @parameter1: java.awt.Rectangle;

        r2 := @parameter2: java.awt.image.BufferedImage;

        r6 := @parameter3: java.awt.Point;

        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $r3 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $z1 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 != $z1 goto label02;

        if $z0 == 0 goto label01;

        $z5 = virtualinvoke r0.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        $z6 = virtualinvoke r2.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        if $z5 != $z6 goto label02;

     label01:
        $r13 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r14 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData(java.awt.image.Raster,java.awt.image.WritableRaster)>($r13, $r14);

        return;

     label02:
        r15 = null;

        $r4 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r5 = virtualinvoke r2.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $i0 = virtualinvoke $r5.<java.awt.image.Raster: int getNumBands()>();

        $i2 = r6.<java.awt.Point: int x>;

        $i1 = r7.<java.awt.Rectangle: int x>;

        $i81 = $i2 - $i1;

        $i4 = r6.<java.awt.Point: int y>;

        $i3 = r7.<java.awt.Rectangle: int y>;

        $i82 = $i4 - $i3;

        $i83 = r7.<java.awt.Rectangle: int width>;

        $i84 = r7.<java.awt.Rectangle: int x>;

        $i85 = r7.<java.awt.Rectangle: int y>;

        $i5 = r7.<java.awt.Rectangle: int height>;

        $i6 = $i85 + $i5;

        $i86 = $i6 - 1;

        if $z0 != 0 goto label16;

        $i67 = $i0 * $i83;

        r16 = newarray (int)[$i67];

        $i68 = $i83 * $i0;

        i87 = $i68 - 1;

        goto label04;

     label03:
        r16[i87] = 255;

        i87 = i87 - $i0;

     label04:
        if i87 >= 0 goto label03;

        i88 = $i85;

        goto label15;

     label05:
        $r12 = virtualinvoke $r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i84, i88, $i83, 1, r15);

        r15 = $r12;

        $i69 = $i0 - 1;

        $i70 = $i83 * $i69;

        i89 = $i70 - 1;

        $i71 = $i83 * $i0;

        i90 = $i71 - 2;

        lookupswitch($i0)
        {
            case 4: goto label06;
            default: goto label09;
        };

     label06:
        goto label08;

     label07:
        i91 = i90 - 1;

        i92 = i89 - 1;

        $i72 = $r12[i89];

        r16[i90] = $i72;

        i93 = i91 - 1;

        i94 = i92 - 1;

        $i73 = $r12[i92];

        r16[i91] = $i73;

        i95 = i93 - 1;

        i89 = i94 - 1;

        $i74 = $r12[i94];

        r16[i93] = $i74;

        $i127 = (int) -1;

        i90 = i95 + $i127;

     label08:
        if i89 >= 0 goto label07;

        goto label14;

     label09:
        goto label13;

     label10:
        i96 = 0;

        goto label12;

     label11:
        $i78 = i90;

        i90 = i90 - 1;

        $i79 = i89;

        i89 = i89 - 1;

        $i80 = $r12[$i79];

        r16[$i78] = $i80;

        i96 = i96 + 1;

     label12:
        $i77 = $i0 - 1;

        if i96 < $i77 goto label11;

        $i129 = (int) -1;

        i90 = i90 + $i129;

     label13:
        if i89 >= 0 goto label10;

     label14:
        $i76 = $i84 + $i81;

        $i75 = i88 + $i82;

        virtualinvoke $r5.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i76, $i75, $i83, 1, r16);

        i88 = i88 + 1;

     label15:
        if i88 <= $i86 goto label05;

        goto label62;

     label16:
        if $z1 == 0 goto label30;

        $z4 = virtualinvoke r2.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        if $z4 == 0 goto label30;

        i97 = $i85;

        goto label29;

     label17:
        $r11 = virtualinvoke $r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i84, i97, $i83, 1, r15);

        r15 = $r11;

        $i47 = $i0 * $i83;

        i98 = $i47 - 1;

        lookupswitch($i0)
        {
            case 4: goto label18;
            default: goto label22;
        };

     label18:
        goto label21;

     label19:
        i99 = $r11[i98];

        if i99 != 255 goto label20;

        $i131 = (int) -4;

        i98 = i98 + $i131;

        goto label21;

     label20:
        $i133 = (int) -1;

        i100 = i98 + $i133;

        i101 = 65793 * i99;

        $i48 = $r11[i100];

        $i49 = $i48 * i101;

        $i50 = $i49 + 8388608;

        $i51 = $i50 >>> 24;

        $r11[i100] = $i51;

        $i135 = (int) -1;

        i102 = i100 + $i135;

        $i52 = $r11[i102];

        $i53 = $i52 * i101;

        $i54 = $i53 + 8388608;

        $i55 = $i54 >>> 24;

        $r11[i102] = $i55;

        $i137 = (int) -1;

        i103 = i102 + $i137;

        $i56 = $r11[i103];

        $i57 = $i56 * i101;

        $i58 = $i57 + 8388608;

        $i59 = $i58 >>> 24;

        $r11[i103] = $i59;

        $i139 = (int) -1;

        i98 = i103 + $i139;

     label21:
        if i98 >= 0 goto label19;

        goto label28;

     label22:
        goto label27;

     label23:
        i104 = $r11[i98];

        if i104 != 255 goto label24;

        i98 = i98 - $i0;

        goto label27;

     label24:
        $i141 = (int) -1;

        i98 = i98 + $i141;

        i105 = 65793 * i104;

        i106 = 0;

        goto label26;

     label25:
        $i63 = $r11[i98];

        $i64 = $i63 * i105;

        $i65 = $i64 + 8388608;

        $i66 = $i65 >>> 24;

        $r11[i98] = $i66;

        $i143 = (int) -1;

        i98 = i98 + $i143;

        i106 = i106 + 1;

     label26:
        $i62 = $i0 - 1;

        if i106 < $i62 goto label25;

     label27:
        if i98 >= 0 goto label23;

     label28:
        $i61 = $i84 + $i81;

        $i60 = i97 + $i82;

        virtualinvoke $r5.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i61, $i60, $i83, 1, $r11);

        i97 = i97 + 1;

     label29:
        if i97 <= $i86 goto label17;

        goto label62;

     label30:
        if $z1 == 0 goto label46;

        $z3 = virtualinvoke r2.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        if $z3 != 0 goto label46;

        i107 = $i85;

        goto label45;

     label31:
        $r10 = virtualinvoke $r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i84, i107, $i83, 1, r15);

        r15 = $r10;

        $i27 = $i0 * $i83;

        i108 = $i27 - 1;

        lookupswitch($i0)
        {
            case 4: goto label32;
            default: goto label37;
        };

     label32:
        goto label36;

     label33:
        i109 = $r10[i108];

        if i109 <= 0 goto label34;

        if i109 < 255 goto label35;

     label34:
        $i145 = (int) -4;

        i108 = i108 + $i145;

        goto label36;

     label35:
        $i147 = (int) -1;

        i110 = i108 + $i147;

        i111 = 16711680 / i109;

        $i28 = $r10[i110];

        $i29 = $i28 * i111;

        $i149 = (int) 32768;

        $i30 = $i29 + $i149;

        $i31 = $i30 >>> 16;

        $r10[i110] = $i31;

        $i151 = (int) -1;

        i112 = i110 + $i151;

        $i32 = $r10[i112];

        $i33 = $i32 * i111;

        $i153 = (int) 32768;

        $i34 = $i33 + $i153;

        $i35 = $i34 >>> 16;

        $r10[i112] = $i35;

        $i155 = (int) -1;

        i113 = i112 + $i155;

        $i36 = $r10[i113];

        $i37 = $i36 * i111;

        $i157 = (int) 32768;

        $i38 = $i37 + $i157;

        $i39 = $i38 >>> 16;

        $r10[i113] = $i39;

        $i159 = (int) -1;

        i108 = i113 + $i159;

     label36:
        if i108 >= 0 goto label33;

        goto label44;

     label37:
        goto label43;

     label38:
        i114 = $r10[i108];

        if i114 <= 0 goto label39;

        if i114 < 255 goto label40;

     label39:
        i108 = i108 - $i0;

        goto label43;

     label40:
        $i161 = (int) -1;

        i108 = i108 + $i161;

        i115 = 16711680 / i114;

        i116 = 0;

        goto label42;

     label41:
        $i43 = $r10[i108];

        $i44 = $i43 * i115;

        $i163 = (int) 32768;

        $i45 = $i44 + $i163;

        $i46 = $i45 >>> 16;

        $r10[i108] = $i46;

        $i165 = (int) -1;

        i108 = i108 + $i165;

        i116 = i116 + 1;

     label42:
        $i42 = $i0 - 1;

        if i116 < $i42 goto label41;

     label43:
        if i108 >= 0 goto label38;

     label44:
        $i41 = $i84 + $i81;

        $i40 = i107 + $i82;

        virtualinvoke $r5.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i41, $i40, $i83, 1, $r10);

        i107 = i107 + 1;

     label45:
        if i107 <= $i86 goto label31;

        goto label62;

     label46:
        $z2 = virtualinvoke r0.<java.awt.image.BufferedImage: boolean isAlphaPremultiplied()>();

        if $z2 == 0 goto label59;

        $i11 = $i0 * $i83;

        r17 = newarray (int)[$i11];

        i117 = $i85;

        goto label58;

     label47:
        $r9 = virtualinvoke $r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i84, i117, $i83, 1, r15);

        r15 = $r9;

        $i12 = $i0 + 1;

        $i13 = $i12 * $i83;

        i118 = $i13 - 1;

        $i14 = $i0 * $i83;

        i119 = $i14 - 1;

        goto label57;

     label48:
        i120 = $r9[i118];

        $i167 = (int) -1;

        i118 = i118 + $i167;

        if i120 <= 0 goto label54;

        if i120 >= 255 goto label51;

        i121 = 16711680 / i120;

        i122 = 0;

        goto label50;

     label49:
        $i19 = i119;

        i119 = i119 - 1;

        $i20 = i118;

        i118 = i118 - 1;

        $i21 = $r9[$i20];

        $i22 = $i21 * i121;

        $i169 = (int) 32768;

        $i23 = $i22 + $i169;

        $i24 = $i23 >>> 16;

        r17[$i19] = $i24;

        i122 = i122 + 1;

     label50:
        if i122 < $i0 goto label49;

        goto label57;

     label51:
        i123 = 0;

        goto label53;

     label52:
        $i16 = i119;

        i119 = i119 - 1;

        $i17 = i118;

        i118 = i118 - 1;

        $i18 = $r9[$i17];

        r17[$i16] = $i18;

        i123 = i123 + 1;

     label53:
        if i123 < $i0 goto label52;

        goto label57;

     label54:
        i118 = i118 - $i0;

        i124 = 0;

        goto label56;

     label55:
        $i15 = i119;

        i119 = i119 - 1;

        r17[$i15] = 255;

        i124 = i124 + 1;

     label56:
        if i124 < $i0 goto label55;

     label57:
        if i118 >= 0 goto label48;

        $i26 = $i84 + $i81;

        $i25 = i117 + $i82;

        virtualinvoke $r5.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i26, $i25, $i83, 1, r17);

        i117 = i117 + 1;

     label58:
        if i117 <= $i86 goto label47;

        goto label62;

     label59:
        $r18 = new java.awt.Rectangle;

        $i10 = r6.<java.awt.Point: int x>;

        $i9 = r6.<java.awt.Point: int y>;

        $i8 = r7.<java.awt.Rectangle: int width>;

        $i7 = r7.<java.awt.Rectangle: int height>;

        specialinvoke $r18.<java.awt.Rectangle: void <init>(int,int,int,int)>($i10, $i9, $i8, $i7);

        i125 = 0;

        goto label61;

     label60:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyBand(java.awt.image.Raster,java.awt.Rectangle,int,java.awt.image.WritableRaster,java.awt.Rectangle,int)>($r4, r7, i125, $r5, $r18, i125);

        i125 = i125 + 1;

     label61:
        if i125 < $i0 goto label60;

     label62:
        return;
    }

    public static void copyBand(java.awt.image.Raster, int, java.awt.image.WritableRaster, int)
    {
        java.awt.Rectangle $r1, $r3, $r4;
        java.awt.image.Raster r0;
        int i0, i1;
        java.awt.image.WritableRaster r2;

        r0 := @parameter0: java.awt.image.Raster;

        i0 := @parameter1: int;

        r2 := @parameter2: java.awt.image.WritableRaster;

        i1 := @parameter3: int;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r3 = virtualinvoke r2.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r4 = virtualinvoke $r1.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r3);

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyBand(java.awt.image.Raster,java.awt.Rectangle,int,java.awt.image.WritableRaster,java.awt.Rectangle,int)>(r0, $r4, i0, r2, $r4, i1);

        return;
    }

    public static void copyBand(java.awt.image.Raster, java.awt.Rectangle, int, java.awt.image.WritableRaster, java.awt.Rectangle, int)
    {
        java.awt.Rectangle $r1, $r2, $r4, $r5, r7, r8;
        int[] $r6, r9;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, i15, $i16, $i17, i18, i19, i20;
        java.awt.image.Raster r0;
        java.awt.image.WritableRaster r3;

        r0 := @parameter0: java.awt.image.Raster;

        r7 := @parameter1: java.awt.Rectangle;

        i13 := @parameter2: int;

        r3 := @parameter3: java.awt.image.WritableRaster;

        r8 := @parameter4: java.awt.Rectangle;

        i15 := @parameter5: int;

        $i1 = r8.<java.awt.Rectangle: int y>;

        $i0 = r7.<java.awt.Rectangle: int y>;

        i2 = $i1 - $i0;

        $i4 = r8.<java.awt.Rectangle: int x>;

        $i3 = r7.<java.awt.Rectangle: int x>;

        i5 = $i4 - $i3;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r2 = virtualinvoke r7.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r1);

        $r4 = virtualinvoke r3.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r5 = virtualinvoke r8.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r4);

        $i7 = $r5.<java.awt.Rectangle: int width>;

        $i6 = $r2.<java.awt.Rectangle: int width>;

        if $i7 >= $i6 goto label1;

        i18 = $r5.<java.awt.Rectangle: int width>;

        goto label2;

     label1:
        i18 = $r2.<java.awt.Rectangle: int width>;

     label2:
        $i9 = $r5.<java.awt.Rectangle: int height>;

        $i8 = $r2.<java.awt.Rectangle: int height>;

        if $i9 >= $i8 goto label3;

        i19 = $r5.<java.awt.Rectangle: int height>;

        goto label4;

     label3:
        i19 = $r2.<java.awt.Rectangle: int height>;

     label4:
        $i10 = $r2.<java.awt.Rectangle: int x>;

        $i17 = $i10 + i5;

        r9 = null;

        i20 = $r2.<java.awt.Rectangle: int y>;

        goto label6;

     label5:
        $i14 = $r2.<java.awt.Rectangle: int x>;

        $r6 = virtualinvoke r0.<java.awt.image.Raster: int[] getSamples(int,int,int,int,int,int[])>($i14, i20, i18, 1, i13, r9);

        r9 = $r6;

        $i16 = i20 + i2;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setSamples(int,int,int,int,int,int[])>($i17, $i16, i18, 1, i15, $r6);

        i20 = i20 + 1;

     label6:
        $i11 = $r2.<java.awt.Rectangle: int y>;

        $i12 = $i11 + i19;

        if i20 < $i12 goto label5;

        return;
    }

    public static boolean is_INT_PACK_Data(java.awt.image.SampleModel, boolean)
    {
        java.awt.image.SampleModel r0;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.awt.image.SinglePixelPackedSampleModel r1;
        boolean $z0, z1;

        r0 := @parameter0: java.awt.image.SampleModel;

        z1 := @parameter1: boolean;

        $z0 = r0 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.awt.image.SampleModel: int getDataType()>();

        if $i0 == 3 goto label2;

        return 0;

     label2:
        r1 = (java.awt.image.SinglePixelPackedSampleModel) r0;

        $r2 = virtualinvoke r1.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        $i1 = lengthof $r2;

        if $i1 != 3 goto label3;

        if z1 == 0 goto label4;

        return 0;

     label3:
        $i2 = lengthof $r2;

        if $i2 == 4 goto label4;

        return 0;

     label4:
        $i3 = $r2[0];

        if $i3 == 16711680 goto label5;

        return 0;

     label5:
        $i4 = $r2[1];

        $i9 = (int) 65280;

        if $i4 == $i9 goto label6;

        return 0;

     label6:
        $i5 = $r2[2];

        if $i5 == 255 goto label7;

        return 0;

     label7:
        $i6 = lengthof $r2;

        if $i6 != 4 goto label8;

        $i7 = $r2[3];

        if $i7 == -16777216 goto label8;

        return 0;

     label8:
        return 1;
    }

    public static boolean is_BYTE_COMP_Data(java.awt.image.SampleModel)
    {
        int $i0;
        java.awt.image.SampleModel r0;
        boolean $z0;

        r0 := @parameter0: java.awt.image.SampleModel;

        $z0 = r0 instanceof java.awt.image.ComponentSampleModel;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.awt.image.SampleModel: int getDataType()>();

        if $i0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    protected static void divide_INT_PACK_Data(java.awt.image.WritableRaster)
    {
        int[][] $r5;
        java.awt.image.SampleModel $r1;
        int[] r6;
        java.awt.image.DataBuffer $r3;
        java.awt.image.DataBufferInt r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13, i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, $i37;
        java.awt.image.SinglePixelPackedSampleModel r2;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r3 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r4 = (java.awt.image.DataBufferInt) $r3;

        $i2 = virtualinvoke r4.<java.awt.image.DataBuffer: int getOffset()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i8 = $i6 - $i7;

        $i9 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i5, $i8);

        i10 = $i2 + $i9;

        $r5 = virtualinvoke r4.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r6 = $r5[0];

        i34 = 0;

        goto label6;

     label1:
        $i12 = i34 * $i1;

        i35 = i10 + $i12;

        i13 = i35 + $i0;

        goto label5;

     label2:
        i14 = r6[i35];

        i15 = i14 >>> 24;

        if i15 > 0 goto label3;

        r6[i35] = 16777215;

        goto label4;

     label3:
        if i15 >= 255 goto label4;

        i16 = 16711680 / i15;

        $i21 = i15 << 24;

        $i17 = i14 & 16711680;

        $i18 = $i17 >> 16;

        $i19 = $i18 * i16;

        $i20 = $i19 & 16711680;

        $i27 = $i21 | $i20;

        $i37 = (int) 65280;

        $i22 = i14 & $i37;

        $i23 = $i22 >> 8;

        $i24 = $i23 * i16;

        $i25 = $i24 & 16711680;

        $i26 = $i25 >> 8;

        $i32 = $i27 | $i26;

        $i28 = i14 & 255;

        $i29 = $i28 * i16;

        $i30 = $i29 & 16711680;

        $i31 = $i30 >> 16;

        $i33 = $i32 | $i31;

        r6[i35] = $i33;

     label4:
        i35 = i35 + 1;

     label5:
        if i35 < i13 goto label2;

        i34 = i34 + 1;

     label6:
        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        if i34 < $i11 goto label1;

        return;
    }

    protected static void mult_INT_PACK_Data(java.awt.image.WritableRaster)
    {
        int[][] $r5;
        java.awt.image.SampleModel $r1;
        int[] r6;
        java.awt.image.DataBuffer $r3;
        java.awt.image.DataBufferInt r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i13, i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, $i35, $i37;
        java.awt.image.SinglePixelPackedSampleModel r2;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.SinglePixelPackedSampleModel) $r1;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r3 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r4 = (java.awt.image.DataBufferInt) $r3;

        $i2 = virtualinvoke r4.<java.awt.image.DataBuffer: int getOffset()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i8 = $i6 - $i7;

        $i9 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i5, $i8);

        i10 = $i2 + $i9;

        $r5 = virtualinvoke r4.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r6 = $r5[0];

        i32 = 0;

        goto label5;

     label1:
        $i12 = i32 * $i1;

        i33 = i10 + $i12;

        i13 = i33 + $i0;

        goto label4;

     label2:
        i14 = r6[i33];

        i15 = i14 >>> 24;

        if i15 < 0 goto label3;

        if i15 >= 255 goto label3;

        $i20 = i15 << 24;

        $i16 = i14 & 16711680;

        $i17 = $i16 * i15;

        $i18 = $i17 >> 8;

        $i19 = $i18 & 16711680;

        $i25 = $i20 | $i19;

        $i35 = (int) 65280;

        $i21 = i14 & $i35;

        $i22 = $i21 * i15;

        $i23 = $i22 >> 8;

        $i37 = (int) 65280;

        $i24 = $i23 & $i37;

        $i30 = $i25 | $i24;

        $i26 = i14 & 255;

        $i27 = $i26 * i15;

        $i28 = $i27 >> 8;

        $i29 = $i28 & 255;

        $i31 = $i30 | $i29;

        r6[i33] = $i31;

     label3:
        i33 = i33 + 1;

     label4:
        if i33 < i13 goto label2;

        i32 = i32 + 1;

     label5:
        $i11 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        if i32 < $i11 goto label1;

        return;
    }

    protected static void divide_BYTE_COMP_Data(java.awt.image.WritableRaster)
    {
        byte[] r7;
        java.awt.image.DataBufferByte r5;
        java.awt.image.SampleModel $r1;
        byte $b22, $b26, $b30;
        int[] $r3;
        byte[][] $r6;
        java.awt.image.DataBuffer $r4;
        java.awt.image.ComponentSampleModel r2;
        short s23, $s27, $s38, $s41;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, $i15, i16, $i17, $i18, $i19, i20, $i21, $i24, i25, $i28, $i29, $i31, $i32, i33, i34, i35, i36, i37, $i39, $i40, $i42;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.ComponentSampleModel) $r1;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $i2 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        $r3 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $r4 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r5 = (java.awt.image.DataBufferByte) $r4;

        $i3 = virtualinvoke r5.<java.awt.image.DataBuffer: int getOffset()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i6 = $i4 - $i5;

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i8 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i9 = $i7 - $i8;

        $i10 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>($i6, $i9);

        i11 = $i3 + $i10;

        $i12 = lengthof $r3;

        $i13 = $i12 - 1;

        i14 = $r3[$i13];

        $i15 = lengthof $r3;

        i16 = $i15 - 1;

        $r6 = virtualinvoke r5.<java.awt.image.DataBufferByte: byte[][] getBankData()>();

        r7 = $r6[0];

        i33 = 0;

        goto label10;

     label01:
        $i18 = i33 * $i1;

        i34 = i11 + $i18;

        $i19 = $i0 * $i2;

        i20 = i34 + $i19;

        goto label09;

     label02:
        $i21 = i34 + i14;

        $b22 = r7[$i21];

        $s38 = (short) $b22;

        s23 = $s38 & 255;

        if s23 != 0 goto label05;

        i35 = 0;

        goto label04;

     label03:
        $i31 = $r3[i35];

        $i32 = i34 + $i31;

        r7[$i32] = -1;

        i35 = i35 + 1;

     label04:
        if i35 < i16 goto label03;

        goto label08;

     label05:
        $i39 = (int) s23;

        if $i39 >= 255 goto label08;

        $i40 = (int) s23;

        i36 = 16711680 / $i40;

        i37 = 0;

        goto label07;

     label06:
        $i24 = $r3[i37];

        i25 = i34 + $i24;

        $b26 = r7[i25];

        $s41 = (short) $b26;

        $s27 = $s41 & 255;

        $i42 = (int) $s27;

        $i28 = $i42 * i36;

        $i29 = $i28 >>> 16;

        $b30 = (byte) $i29;

        r7[i25] = $b30;

        i37 = i37 + 1;

     label07:
        if i37 < i16 goto label06;

     label08:
        i34 = i34 + $i2;

     label09:
        if i34 < i20 goto label02;

        i33 = i33 + 1;

     label10:
        $i17 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        if i33 < $i17 goto label01;

        return;
    }

    protected static void mult_BYTE_COMP_Data(java.awt.image.WritableRaster)
    {
        byte[] r7;
        java.awt.image.DataBufferByte r5;
        java.awt.image.SampleModel $r1;
        byte $b22, $b26, $b30;
        int[] $r3;
        byte[][] $r6;
        java.awt.image.DataBuffer $r4;
        java.awt.image.ComponentSampleModel r2;
        short s23, $s27, $s34, $s36;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, $i15, i16, $i17, $i18, $i19, i20, $i21, $i24, i25, $i28, $i29, i31, i32, i33, $i35, $i37, $i38;
        java.awt.image.WritableRaster r0;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r2 = (java.awt.image.ComponentSampleModel) $r1;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i1 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $i2 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        $r3 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $r4 = virtualinvoke r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r5 = (java.awt.image.DataBufferByte) $r4;

        $i3 = virtualinvoke r5.<java.awt.image.DataBuffer: int getOffset()>();

        $i4 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i6 = $i4 - $i5;

        $i7 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i8 = virtualinvoke r0.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i9 = $i7 - $i8;

        $i10 = virtualinvoke r2.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>($i6, $i9);

        i11 = $i3 + $i10;

        $i12 = lengthof $r3;

        $i13 = $i12 - 1;

        i14 = $r3[$i13];

        $i15 = lengthof $r3;

        i16 = $i15 - 1;

        $r6 = virtualinvoke r5.<java.awt.image.DataBufferByte: byte[][] getBankData()>();

        r7 = $r6[0];

        i31 = 0;

        goto label7;

     label1:
        $i18 = i31 * $i1;

        i32 = i11 + $i18;

        $i19 = $i0 * $i2;

        i20 = i32 + $i19;

        goto label6;

     label2:
        $i21 = i32 + i14;

        $b22 = r7[$i21];

        $s34 = (short) $b22;

        s23 = $s34 & 255;

        $i35 = (int) s23;

        if $i35 == 255 goto label5;

        i33 = 0;

        goto label4;

     label3:
        $i24 = $r3[i33];

        i25 = i32 + $i24;

        $b26 = r7[i25];

        $s36 = (short) $b26;

        $s27 = $s36 & 255;

        $i37 = (int) $s27;

        $i38 = (int) s23;

        $i28 = $i37 * $i38;

        $i29 = $i28 >> 8;

        $b30 = (byte) $i29;

        r7[i25] = $b30;

        i33 = i33 + 1;

     label4:
        if i33 < i16 goto label3;

     label5:
        i32 = i32 + $i2;

     label6:
        if i32 < i20 goto label2;

        i31 = i31 + 1;

     label7:
        $i17 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        if i31 < $i17 goto label1;

        return;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r3;
        java.awt.color.ColorSpace $r7, $r9, $r11, $r13, $r15, $r17;
        int $i1, $i3, $i5, $i7, $i9, $i11;
        java.lang.Boolean $r2;
        java.lang.SecurityException $r5;
        java.lang.String $r1;
        boolean $z0, z1;
        java.awt.image.DirectColorModel $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.NumberFormatException $r4;
        java.awt.geom.AffineTransform $r18;

        $r18 = new java.awt.geom.AffineTransform;

        specialinvoke $r18.<java.awt.geom.AffineTransform: void <init>()>();

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.geom.AffineTransform IDENTITY> = $r18;

        z1 = 1;

     label01:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.apache.batik.warn_destination", "true");

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        z1 = $z0;

     label02:
        goto label11;

     label03:
        goto label10;

     label04:
        $r5 := @caughtexception;

        goto label12;

     label05:
        goto label10;

     label06:
        $r4 := @caughtexception;

        goto label13;

     label07:
        goto label10;

     label08:
        $r3 := @caughtexception;

        goto label14;

     label09:
        throw $r3;

     label10:
        $r19 = new java.awt.image.DirectColorModel;

        $r7 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        $i1 = (int) 65280;

        specialinvoke $r19.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r7, 24, 16711680, $i1, 255, 0, 0, 3);

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB> = $r19;

        $r20 = new java.awt.image.DirectColorModel;

        $r9 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        $i3 = (int) 65280;

        specialinvoke $r20.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r9, 32, 16711680, $i3, 255, -16777216, 1, 3);

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Pre> = $r20;

        $r21 = new java.awt.image.DirectColorModel;

        $r11 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1004);

        $i5 = (int) 65280;

        specialinvoke $r21.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r11, 32, 16711680, $i5, 255, -16777216, 0, 3);

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel Linear_sRGB_Unpre> = $r21;

        $r22 = new java.awt.image.DirectColorModel;

        $r13 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $i7 = (int) 65280;

        specialinvoke $r22.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r13, 24, 16711680, $i7, 255, 0, 0, 3);

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB> = $r22;

        $r23 = new java.awt.image.DirectColorModel;

        $r15 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $i9 = (int) 65280;

        specialinvoke $r23.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r15, 32, 16711680, $i9, 255, -16777216, 1, 3);

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Pre> = $r23;

        $r24 = new java.awt.image.DirectColorModel;

        $r17 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000);

        $i11 = (int) 65280;

        specialinvoke $r24.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r17, 32, 16711680, $i11, 255, -16777216, 0, 3);

        <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel sRGB_Unpre> = $r24;

        return;

     label11:
        <org.apache.batik.ext.awt.image.GraphicsUtil: boolean WARN_DESTINATION> = $z0;

        goto label03;

     label12:
        <org.apache.batik.ext.awt.image.GraphicsUtil: boolean WARN_DESTINATION> = 1;

        goto label05;

     label13:
        <org.apache.batik.ext.awt.image.GraphicsUtil: boolean WARN_DESTINATION> = 1;

        goto label07;

     label14:
        <org.apache.batik.ext.awt.image.GraphicsUtil: boolean WARN_DESTINATION> = z1;

        goto label09;

        catch java.lang.SecurityException from label01 to label02 with label04;
        catch java.lang.NumberFormatException from label01 to label02 with label06;
        catch java.lang.Throwable from label01 to label08 with label08;
    }
}
