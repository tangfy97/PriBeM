public class org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter extends java.lang.Object
{
    private final org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask task;
    private final org.waveprotocol.wave.model.document.util.LocalDocument localDoc;
    private final org.waveprotocol.wave.model.document.indexed.LocationMapper mapper;
    private final org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser;
    private final org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView;
    private final org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView;
    private final org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations;
    private final org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry;
    private java.util.HashMap currentValues;
    private int startLocation;
    private int endLocation;
    private int chunkEnd;
    private org.waveprotocol.wave.model.document.AnnotationCursor cursor;
    private org.waveprotocol.wave.model.util.ReadableStringSet nextChangingKeys;
    private java.util.Map renderAttrs;
    private boolean dead;
    java.util.Map boundaryBefore;
    java.util.Map boundaryAfter;
    static final boolean $assertionsDisabled;

    private void <init>(org.waveprotocol.wave.model.document.util.DocumentContext, org.waveprotocol.wave.client.editor.content.PainterRegistry)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r8;
        org.waveprotocol.wave.model.document.util.LocalDocument $r3;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r6, $r7;
        org.waveprotocol.wave.model.document.util.DocumentContext r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1 $r1;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r4;
        org.waveprotocol.wave.client.editor.content.PainterRegistry r9;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        org.waveprotocol.wave.model.document.raw.TextNodeOrganiser $r5;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        r9 := @parameter1: org.waveprotocol.wave.client.editor.content.PainterRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1: void <init>(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)>(r0);

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask task> = $r1;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean dead> = 0;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.LocalDocument annotatableContent()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc> = $r3;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.indexed.LocationMapper locationMapper()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper> = $r4;

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser> = $r5;

        $r6 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView> = $r6;

        $r7 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView> = $r7;

        $r8 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.util.DocumentContext: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations> = $r8;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry> = r9;

        return;
    }

    private boolean doRun(int)
    {
        java.util.Map $r35, $r41, $r44;
        java.lang.StringBuilder $r67, $r70, $r71, $r72, $r101;
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r2, $r11, $r19, $r33, $r80;
        org.waveprotocol.wave.model.util.ConcurrentSet $r85;
        org.waveprotocol.wave.model.document.indexed.LocationMapper $r1, $r4, $r13, $r16, $r30, $r47, $r49, $r78, $r81;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        org.waveprotocol.wave.model.document.util.Point$El $r18, $r31, $r82;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i31, $i33;
        org.waveprotocol.wave.model.document.AnnotationCursor $r12;
        java.lang.Object $r6, $r7, $r22, $r26, $r28, $r39, $r40, $r43, $r45, $r51, $r53, $r57, $r58, $r61, $r75, $r77, r86, r87, r88, r89, $r90, r91, $r92, r93, $r94, r95, r96, r97, $r98;
        org.waveprotocol.wave.model.util.ReadableStringSet $r9;
        org.waveprotocol.wave.model.document.util.LocalDocument $r15, $r21, $r23, $r24, $r32, $r36, $r37, $r38, $r42, $r46, $r52, $r54, $r55, $r60, $r63, $r64, $r68;
        java.lang.AssertionError $r99, $r102;
        java.lang.String $r3, $r8, $r20, $r34, $r69, $r73, $r83;
        org.waveprotocol.wave.model.document.util.Point $r5, $r14, $r48, $r50;
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r17, $r25, $r27, $r29, $r56, $r59, $r62, $r74, $r76, $r79;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z9, $z10, $z11;
        java.util.HashMap $r100;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        i2 := @parameter0: int;

        $z0 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean dead>;

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int size()>();

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String access$100()>();

        $i1 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(0, $i0, $r3, null);

        $i31 = (int) -1;

        if $i1 != $i31 goto label02;

        $r85 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: org.waveprotocol.wave.model.util.ConcurrentSet access$200()>();

        virtualinvoke $r85.<org.waveprotocol.wave.model.util.ConcurrentSet: void remove(java.lang.Object)>(r0);

        return 0;

     label02:
        $r4 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i1);

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getCanonicalNode()>();

        $r7 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getAnnotatingElement(java.lang.Object)>($r6);

        if $r7 == null goto label04;

        $r74 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView>;

        $r75 = interfaceinvoke $r74.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getFirstChild(java.lang.Object)>($r7);

        $r76 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView>;

        $r77 = interfaceinvoke $r76.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getLastChild(java.lang.Object)>($r7);

        $z7 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean $assertionsDisabled>;

        if $z7 != 0 goto label03;

        if $r75 != null goto label03;

        $r99 = new java.lang.AssertionError;

        specialinvoke $r99.<java.lang.AssertionError: void <init>(java.lang.Object)>("We\'re supposed to be in this node, so it has at least one child");

        throw $r99;

     label03:
        $r78 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i22 = interfaceinvoke $r78.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(java.lang.Object)>($r75);

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation> = $i22;

        $r80 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        $i23 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation>;

        $r81 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r79 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView>;

        $r82 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r79, $r77);

        $i24 = interfaceinvoke $r81.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r82);

        $r83 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String access$100()>();

        interfaceinvoke $r80.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: void setAnnotation(int,int,java.lang.String,java.lang.Object)>($i23, $i24, $r83, "y");

        r86 = $r7;

        goto label05;

     label04:
        r86 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point)>($r5);

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation> = $i1;

     label05:
        r87 = r86;

        i25 = i2;

        $i3 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String access$100()>();

        $i4 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int getEnd(int,int,java.lang.String,java.lang.Object)>($i3, $i0, $r8, "y");

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int endLocation> = $i4;

        $r9 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.util.ReadableStringSet getKeys()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.util.ReadableStringSet nextChangingKeys> = $r9;

        $i5 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation>;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd> = $i5;

        $r100 = new java.util.HashMap;

        specialinvoke $r100.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.HashMap currentValues> = $r100;

        $r11 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        $i7 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation>;

        $i6 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int endLocation>;

        $r12 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>($i7, $i6, $r9);

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.AnnotationCursor cursor> = $r12;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: void progress()>();

        $r13 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i8 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i8);

        r88 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point)>($r14);

        r89 = null;

     label06:
        if r87 != null goto label07;

        $i26 = $i0;

        goto label08;

     label07:
        $r16 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r17 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView>;

        $r15 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r18 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r15, r87);

        $i26 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: int getFilteredLocation(org.waveprotocol.wave.model.document.indexed.LocationMapper,org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r16, $r17, $r18);

     label08:
        i9 = $i26;

     label09:
        $i27 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        if $i27 > i9 goto label23;

        $i15 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        $i14 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int endLocation>;

        if $i15 >= $i14 goto label23;

        $r47 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i16 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        $r48 = interfaceinvoke $r47.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i16);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: void progress()>();

        $r49 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $i17 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        $r50 = interfaceinvoke $r49.<org.waveprotocol.wave.model.document.indexed.LocationMapper: org.waveprotocol.wave.model.document.util.Point locate(int)>($i17);

        r88 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point)>($r50);

        $z5 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z5 == 0 goto label17;

        $r56 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView>;

        $r57 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r58 = interfaceinvoke $r56.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object asText(java.lang.Object)>($r57);

        $i18 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i18 != 0 goto label10;

        $z11 = 1;

        $z10 = 1;

        goto label11;

     label10:
        $z11 = 0;

        $z10 = 0;

     label11:
        z9 = $z10;

        $z6 = <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean $assertionsDisabled>;

        if $z6 != 0 goto label12;

        if $z11 != 0 goto label12;

        $i19 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r64 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $i20 = interfaceinvoke $r64.<org.waveprotocol.wave.model.document.util.LocalDocument: int getLength(java.lang.Object)>($r58);

        if $i19 == $i20 goto label12;

        $r102 = new java.lang.AssertionError;

        $r101 = new java.lang.StringBuilder;

        specialinvoke $r101.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Boundary point not at node boundary! ");

        $r68 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r69 = interfaceinvoke $r68.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.String getData(java.lang.Object)>($r58);

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i21 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r102.<java.lang.AssertionError: void <init>(java.lang.Object)>($r73);

        throw $r102;

     label12:
        $r60 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        if z9 == 0 goto label13;

        $r90 = $r58;

        goto label14;

     label13:
        $r59 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView>;

        $r90 = interfaceinvoke $r59.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getNextSibling(java.lang.Object)>($r58);

     label14:
        $r61 = interfaceinvoke $r60.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentSlice(java.lang.Object)>($r90);

        r91 = $r61;

        if $r61 == null goto label15;

        $r63 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r92 = interfaceinvoke $r63.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>($r61);

        goto label16;

     label15:
        $r62 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView>;

        $r92 = interfaceinvoke $r62.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getParentElement(java.lang.Object)>($r58);

     label16:
        r93 = $r92;

        goto label21;

     label17:
        $r51 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        r91 = $r51;

        if $r51 == null goto label18;

        $r55 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        r91 = interfaceinvoke $r55.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentSlice(java.lang.Object)>($r51);

     label18:
        if r91 == null goto label19;

        $r54 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r94 = interfaceinvoke $r54.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>(r91);

        goto label20;

     label19:
        $r52 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r53 = virtualinvoke $r48.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r94 = interfaceinvoke $r52.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object asElement(java.lang.Object)>($r53);

     label20:
        r93 = $r94;

     label21:
        r89 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getBoundaryElement(java.lang.Object,java.lang.Object)>(r93, r91);

        $i28 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        if $i28 != i9 goto label22;

        goto label23;

     label22:
        goto label09;

     label23:
        $i29 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int endLocation>;

        if i9 >= $i29 goto label24;

        if i25 > 0 goto label25;

     label24:
        $r19 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        $i10 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int startLocation>;

        $r20 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String access$100()>();

        interfaceinvoke $r19.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: void setAnnotation(int,int,java.lang.String,java.lang.Object)>($i10, i9, $r20, null);

        goto label40;

     label25:
        $r21 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object asElement(java.lang.Object)>(r87);

        if $r22 != null goto label32;

        r95 = r87;

        r96 = r87;

     label26:
        $r38 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r37 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r39 = interfaceinvoke $r37.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getNextSibling(java.lang.Object)>(r96);

        r96 = $r39;

        $r40 = interfaceinvoke $r38.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object asText(java.lang.Object)>($r39);

        if $r40 == null goto label27;

        $r46 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $z4 = interfaceinvoke $r46.<org.waveprotocol.wave.model.document.util.LocalDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>(r88, $r39);

        if $z4 == 0 goto label26;

        goto label27;

     label27:
        $r41 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map renderAttrs>;

        $i13 = interfaceinvoke $r41.<java.util.Map: int size()>();

        if $i13 <= 0 goto label28;

        $r44 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map renderAttrs>;

        $r45 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object wrap(java.util.Map,java.lang.Object,java.lang.Object)>($r44, r95, $r39);

        r97 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getNextNode(java.lang.Object)>($r45);

        goto label31;

     label28:
        if $r39 == null goto label29;

        $r98 = $r39;

        goto label30;

     label29:
        $r42 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r43 = interfaceinvoke $r42.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>(r87);

        $r98 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getNextNode(java.lang.Object)>($r43);

     label30:
        r97 = $r98;

     label31:
        goto label39;

     label32:
        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean isPaintElement(java.lang.Object)>($r22);

        if $z1 == 0 goto label37;

        $r25 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView>;

        $r26 = interfaceinvoke $r25.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getFirstChild(java.lang.Object)>($r22);

        if $r26 != null goto label33;

        r97 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getFirstNode(java.lang.Object)>($r22);

        $r36 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        interfaceinvoke $r36.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentUnwrap(java.lang.Object)>($r22);

        goto label36;

     label33:
        $r27 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView hardView>;

        $r28 = interfaceinvoke $r27.<org.waveprotocol.wave.model.document.util.ReadableDocumentView: java.lang.Object getLastChild(java.lang.Object)>($r22);

        $r30 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.indexed.LocationMapper mapper>;

        $r29 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.ReadableDocumentView persistentView>;

        $r31 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r29, $r28);

        $i11 = interfaceinvoke $r30.<org.waveprotocol.wave.model.document.indexed.LocationMapper: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r31);

        $i12 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        if $i11 > $i12 goto label34;

        $r35 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map renderAttrs>;

        $z3 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean rendersSame(java.util.Map,java.lang.Object)>($r35, $r22);

        if $z3 != 0 goto label35;

     label34:
        r97 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getFirstNode(java.lang.Object)>($r22);

        $r32 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        interfaceinvoke $r32.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentUnwrap(java.lang.Object)>($r22);

        $r33 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        $r34 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: java.lang.String access$100()>();

        interfaceinvoke $r33.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: void setAnnotation(int,int,java.lang.String,java.lang.Object)>(i9, $i11, $r34, "y");

        goto label36;

     label35:
        r97 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getNextNode(java.lang.Object)>($r22);

     label36:
        goto label39;

     label37:
        $z2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean isBoundaryElement(java.lang.Object)>($r22);

        if $z2 == 0 goto label38;

        r97 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.lang.Object getNextNode(java.lang.Object)>($r22);

        if $r22 == r89 goto label39;

        $r24 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        interfaceinvoke $r24.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentDeepRemove(java.lang.Object)>($r22);

        goto label39;

     label38:
        $r23 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        r97 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r23, $r22, null, 1);

     label39:
        r87 = r97;

        $i33 = (int) -1;

        i25 = i25 + $i33;

        goto label06;

     label40:
        return 1;
    }

    private void progress()
    {
        org.waveprotocol.wave.model.document.AnnotationCursor $r1, $r2, $r3;
        java.util.HashMap $r4, $r5;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2 $r6;
        org.waveprotocol.wave.model.util.ReadableStringSet $r7, r8;
        int i0, $i1, $i2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        i0 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.AnnotationCursor cursor>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.AnnotationCursor: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $i2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int endLocation>;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd> = $i2;

        r8 = null;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.AnnotationCursor cursor>;

        r8 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.AnnotationCursor: org.waveprotocol.wave.model.util.ReadableStringSet nextLocation()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.AnnotationCursor cursor>;

        $i1 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.AnnotationCursor: int currentLocation()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: int chunkEnd> = $i1;

     label2:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map boundaryBefore> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map boundaryAfter> = $r5;

        $r7 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.util.ReadableStringSet nextChangingKeys>;

        $r6 = new org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2;

        specialinvoke $r6.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$2: void <init>(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter,int)>(r0, i0);

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r6);

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.util.ReadableStringSet nextChangingKeys> = r8;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: void computeRenderAttrs()>();

        return;
    }

    private int getEnd(int, int, java.lang.String, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r3;
        int i0, i1, $i2, $i3, $i5;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.MutableAnnotationSet$Local: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        $i5 = (int) -1;

        if $i2 != $i5 goto label1;

        $i3 = i1;

        goto label2;

     label1:
        $i3 = $i2;

     label2:
        return $i3;
    }

    private boolean rendersSame(java.util.Map, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r3;
        java.util.Map r0, $r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r1;
        java.lang.Object r2;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r0 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.LocalDocument: java.util.Map getAttributes(java.lang.Object)>(r2);

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private java.lang.Object getNextNode(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r2, r1, null, 0);

        return $r3;
    }

    private java.lang.Object getFirstNode(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getNextNodeDepthFirst(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object,boolean)>($r2, r1, null, 1);

        return $r3;
    }

    private java.lang.Object ensureNodeBoundary(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r3;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r1;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.document.raw.TextNodeOrganiser $r2;
        org.waveprotocol.wave.model.document.util.Point r0;

        r1 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.raw.TextNodeOrganiser textNodeOrganiser>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object ensureNodeBoundaryReturnNextNode(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.raw.TextNodeOrganiser)>(r0, $r3, $r2);

        return $r4;
    }

    private java.lang.Object wrap(java.util.Map, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2, $r6, $r10;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r1;
        java.util.Map r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r5, $r7, $r8, r9;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r4 := @parameter0: java.util.Map;

        r5 := @parameter1: java.lang.Object;

        r9 := @parameter2: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r3 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.PainterRegistry: java.lang.String getPaintTagName()>();

        $r6 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>(r5);

        $r8 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentCreate(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>($r3, r4, $r7, r5);

        $r10 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        interfaceinvoke $r10.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r8, r5, r9, null);

        return $r8;
    }

    private boolean isPaintElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r1;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.content.PainterRegistry: java.lang.String getPaintTagName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    private boolean isBoundaryElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r1;
        java.lang.String $r3, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        $r4 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.content.PainterRegistry: java.lang.String getBoundaryTagName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    private java.lang.Object getAnnotatingElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2, $r3;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object r1, r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

     label1:
        if r4 == null goto label3;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean isPaintElement(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getParentElement(java.lang.Object)>(r4);

        goto label1;

     label3:
        return null;
    }

    private void computeRenderAttrs()
    {
        org.waveprotocol.wave.model.document.util.LocalDocument $r2;
        java.util.Iterator $r5;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction r7;
        java.util.Set $r4;
        java.util.HashMap $r1, $r8;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r3;
        java.util.Map $r9, $r10;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map renderAttrs> = $r1;

        $r2 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: boolean isEditing(org.waveprotocol.wave.model.document.util.LocalDocument)>($r2);

        $r3 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.PainterRegistry: java.util.Set getPaintFunctions()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction) $r6;

        $r9 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map renderAttrs>;

        $r8 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.HashMap currentValues>;

        $r10 = interfaceinvoke r7.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$PaintFunction: java.util.Map apply(java.util.Map,boolean)>($r8, $z0);

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r10);

        goto label1;

     label2:
        return;
    }

    private java.lang.Object getBoundaryElement(java.lang.Object, java.lang.Object)
    {
        java.util.Map $r8, $r9, $r15;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r1;
        java.lang.String $r14;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.util.LocalDocument $r2, $r10, $r13, $r17, $r18, $r20;
        java.util.Iterator $r5;
        java.util.Set $r4;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction r7;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r3, $r12;
        java.lang.Object r0, $r6, $r11, $r16, $r19, r21, r22, r23;

        r1 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r0 := @parameter0: java.lang.Object;

        r21 := @parameter1: java.lang.Object;

        r22 = r0;

        r23 = null;

        $r2 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter: boolean isEditing(org.waveprotocol.wave.model.document.util.LocalDocument)>($r2);

        $r3 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.content.PainterRegistry: java.util.Set getBoundaryFunctions()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction) $r6;

        $r10 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r9 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map boundaryBefore>;

        $r8 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.Map boundaryAfter>;

        $r11 = interfaceinvoke r7.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$BoundaryFunction: java.lang.Object apply(org.waveprotocol.wave.model.document.util.LocalDocument,java.lang.Object,java.lang.Object,java.util.Map,java.util.Map,boolean)>($r10, r22, r21, $r9, $r8, $z0);

        if $r11 == null goto label2;

        if r23 != null goto label2;

        $r13 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r12 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r14 = interfaceinvoke $r12.<org.waveprotocol.wave.client.editor.content.PainterRegistry: java.lang.String getBoundaryTagName()>();

        $r15 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r16 = interfaceinvoke $r13.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object transparentCreate(java.lang.String,java.util.Map,java.lang.Object,java.lang.Object)>($r14, $r15, r22, r21);

        r23 = $r16;

        r22 = $r16;

        r21 = null;

        $r18 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r17 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        $r19 = interfaceinvoke $r17.<org.waveprotocol.wave.model.document.util.LocalDocument: java.lang.Object getNextSibling(java.lang.Object)>($r11);

        interfaceinvoke $r18.<org.waveprotocol.wave.model.document.util.LocalDocument: void transparentMove(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r16, $r11, $r19, null);

        $r20 = r1.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.util.LocalDocument localDoc>;

        staticinvoke <org.waveprotocol.wave.model.document.util.PersistentContent: void makeDeepTransparent(org.waveprotocol.wave.model.document.util.ElementManager,java.lang.Object)>($r20, $r16);

     label2:
        goto label1;

     label3:
        return r23;
    }

    private org.waveprotocol.wave.model.util.ReadableStringSet getKeys()
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        org.waveprotocol.wave.model.util.ReadableStringSet $r2;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.editor.content.PainterRegistry paintRegistry>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.client.editor.content.PainterRegistry: org.waveprotocol.wave.model.util.ReadableStringSet getKeys()>();

        return $r2;
    }

    static boolean access$000(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter, int)
    {
        int i0;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean doRun(int)>(i0);

        return $z0;
    }

    static org.waveprotocol.wave.model.document.MutableAnnotationSet$Local access$300(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)
    {
        org.waveprotocol.wave.model.document.MutableAnnotationSet$Local $r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.model.document.MutableAnnotationSet$Local localAnnotations>;

        return $r1;
    }

    static java.util.HashMap access$400(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        java.util.HashMap $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: java.util.HashMap currentValues>;

        return $r1;
    }

    static org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask access$500(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask task>;

        return $r1;
    }

    void <init>(org.waveprotocol.wave.model.document.util.DocumentContext, org.waveprotocol.wave.client.editor.content.PainterRegistry, org.waveprotocol.wave.client.editor.content.AnnotationPainter$1)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$1 r3;
        org.waveprotocol.wave.client.editor.content.PainterRegistry r2;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        org.waveprotocol.wave.model.document.util.DocumentContext r1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentContext;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.content.PainterRegistry;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.content.AnnotationPainter$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: void <init>(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.client.editor.content.PainterRegistry)>(r1, r2);

        return;
    }

    static boolean access$702(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter, boolean)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean dead> = z0;

        return z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/content/AnnotationPainter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
