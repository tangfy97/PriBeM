class org.junit.internal.runners.MethodRoadie$1 extends java.lang.Object implements java.lang.Runnable
{
    final long val$timeout;
    final org.junit.internal.runners.MethodRoadie this$0;

    void <init>(org.junit.internal.runners.MethodRoadie, long)
    {
        long l0;
        org.junit.internal.runners.MethodRoadie$1 r0;
        org.junit.internal.runners.MethodRoadie r1;

        r0 := @this: org.junit.internal.runners.MethodRoadie$1;

        r1 := @parameter0: org.junit.internal.runners.MethodRoadie;

        l0 := @parameter1: long;

        r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0> = r1;

        r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout> = l0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.junit.internal.runners.MethodRoadie$1$1 $r1;
        java.lang.Object[] $r10;
        java.util.concurrent.TimeoutException $r8;
        long $l0, $l1;
        java.util.concurrent.Future $r3;
        java.lang.Long $r12;
        java.lang.String $r13;
        java.util.concurrent.ExecutorService $r0;
        boolean $z0;
        org.junit.internal.runners.MethodRoadie$1 r2;
        java.lang.Exception $r6, $r9;
        java.util.concurrent.TimeUnit $r4, $r5;
        org.junit.internal.runners.MethodRoadie $r7, $r11;

        r2 := @this: org.junit.internal.runners.MethodRoadie$1;

        $r0 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r1 = new org.junit.internal.runners.MethodRoadie$1$1;

        specialinvoke $r1.<org.junit.internal.runners.MethodRoadie$1$1: void <init>(org.junit.internal.runners.MethodRoadie$1)>(r2);

        $r3 = interfaceinvoke $r0.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r1);

        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: void shutdown()>();

     label1:
        $l0 = r2.<org.junit.internal.runners.MethodRoadie$1: long val$timeout>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = interfaceinvoke $r0.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r4);

        if $z0 != 0 goto label2;

        interfaceinvoke $r0.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label2:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r3.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(0L, $r5);

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        $r11 = r2.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0>;

        $r9 = new java.lang.Exception;

        $r10 = newarray (java.lang.Object)[1];

        $l1 = r2.<org.junit.internal.runners.MethodRoadie$1: long val$timeout>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("test timed out after %d milliseconds", $r10);

        specialinvoke $r9.<java.lang.Exception: void <init>(java.lang.String)>($r13);

        virtualinvoke $r11.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r9);

        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = r2.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0>;

        virtualinvoke $r7.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r6);

     label6:
        return;

        catch java.util.concurrent.TimeoutException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }
}
