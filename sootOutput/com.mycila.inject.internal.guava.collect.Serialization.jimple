final class com.mycila.inject.internal.guava.collect.Serialization extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Serialization r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Serialization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int readCount(java.io.ObjectInputStream) throws java.io.IOException
    {
        java.io.ObjectInputStream r0;
        int $i0;

        r0 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        return $i0;
    }

    static void writeMap(java.util.Map, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map r1;
        int $i0;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r4, $r6, $r7;
        boolean $z0;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: java.io.ObjectOutputStream;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    static void populateMap(java.util.Map, java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: java.io.ObjectInputStream;

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: void populateMap(java.util.Map,java.io.ObjectInputStream,int)>(r1, r0, $i0);

        return;
    }

    static void populateMap(java.util.Map, java.io.ObjectInputStream, int) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Map r3;
        int i0, i1;
        java.io.ObjectInputStream r0;
        java.lang.Object $r1, $r2;

        r3 := @parameter0: java.util.Map;

        r0 := @parameter1: java.io.ObjectInputStream;

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static void writeMultiset(com.mycila.inject.internal.guava.collect.Multiset, java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.mycila.inject.internal.guava.collect.Multiset r0;
        java.util.Iterator $r4;
        com.mycila.inject.internal.guava.collect.Multiset$Entry r6;
        java.util.Set $r1, $r3;
        int $i0, $i1;
        java.io.ObjectOutputStream r2;
        java.lang.Object $r5, $r7;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multiset;

        r2 := @parameter1: java.io.ObjectOutputStream;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        virtualinvoke r2.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r3 = interfaceinvoke r0.<com.mycila.inject.internal.guava.collect.Multiset: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.guava.collect.Multiset$Entry) $r5;

        $r7 = interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.Multiset$Entry: java.lang.Object getElement()>();

        virtualinvoke r2.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        $i1 = interfaceinvoke r6.<com.mycila.inject.internal.guava.collect.Multiset$Entry: int getCount()>();

        virtualinvoke r2.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        goto label1;

     label2:
        return;
    }

    static void populateMultiset(com.mycila.inject.internal.guava.collect.Multiset, java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        com.mycila.inject.internal.guava.collect.Multiset r1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multiset;

        r0 := @parameter1: java.io.ObjectInputStream;

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: void populateMultiset(com.mycila.inject.internal.guava.collect.Multiset,java.io.ObjectInputStream,int)>(r1, r0, $i0);

        return;
    }

    static void populateMultiset(com.mycila.inject.internal.guava.collect.Multiset, java.io.ObjectInputStream, int) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.mycila.inject.internal.guava.collect.Multiset r2;
        int i0, $i1, i2;
        java.io.ObjectInputStream r0;
        java.lang.Object $r1;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Multiset;

        r0 := @parameter1: java.io.ObjectInputStream;

        i0 := @parameter2: int;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $i1 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multiset: int add(java.lang.Object,int)>($r1, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    static void writeMultimap(com.mycila.inject.internal.guava.collect.Multimap, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map $r2, $r3;
        int $i0, $i1;
        java.io.ObjectOutputStream r0;
        boolean $z0, $z1;
        java.util.Map$Entry r7;
        java.util.Iterator $r5, $r13;
        java.util.Collection $r10, $r12;
        java.util.Set $r4;
        com.mycila.inject.internal.guava.collect.Multimap r1;
        java.lang.Object $r6, $r8, $r9, $r11, $r14;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r0 := @parameter1: java.io.ObjectOutputStream;

        $r2 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r3 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.Collection) $r9;

        $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.Collection) $r11;

        $r13 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r14);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    static void populateMultimap(com.mycila.inject.internal.guava.collect.Multimap, java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimap r1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r0 := @parameter1: java.io.ObjectInputStream;

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: void populateMultimap(com.mycila.inject.internal.guava.collect.Multimap,java.io.ObjectInputStream,int)>(r1, r0, $i0);

        return;
    }

    static void populateMultimap(com.mycila.inject.internal.guava.collect.Multimap, java.io.ObjectInputStream, int) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Collection $r3;
        java.io.ObjectInputStream r0;
        com.mycila.inject.internal.guava.collect.Multimap r2;
        int i0, $i1, i2, i3;
        java.lang.Object $r1, $r4;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        r0 := @parameter1: java.io.ObjectInputStream;

        i0 := @parameter2: int;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = interfaceinvoke r2.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection get(java.lang.Object)>($r1);

        $i1 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        i3 = 0;

     label2:
        if i3 >= $i1 goto label3;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    static com.mycila.inject.internal.guava.collect.Serialization$FieldSetter getFieldSetter(java.lang.Class, java.lang.String)
    {
        java.lang.NoSuchFieldException $r4;
        com.mycila.inject.internal.guava.collect.Serialization$FieldSetter $r3;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.AssertionError $r5;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        $r3 = new com.mycila.inject.internal.guava.collect.Serialization$FieldSetter;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.Serialization$FieldSetter: void <init>(java.lang.reflect.Field,com.mycila.inject.internal.guava.collect.Serialization$1)>($r2, null);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4);

        throw $r5;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }
}
