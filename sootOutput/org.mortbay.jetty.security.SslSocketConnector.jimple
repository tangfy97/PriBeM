public class org.mortbay.jetty.security.SslSocketConnector extends org.mortbay.jetty.bio.SocketConnector
{
    static final java.lang.String CACHED_INFO_ATTR;
    public static final java.lang.String DEFAULT_KEYSTORE;
    public static final java.lang.String KEYPASSWORD_PROPERTY;
    public static final java.lang.String PASSWORD_PROPERTY;
    private java.lang.String[] _excludeCipherSuites;
    private java.lang.String _keystore;
    private java.lang.String _keystoreType;
    private boolean _needClientAuth;
    private transient org.mortbay.jetty.security.Password _password;
    private transient org.mortbay.jetty.security.Password _keyPassword;
    private transient org.mortbay.jetty.security.Password _trustPassword;
    private java.lang.String _protocol;
    private java.lang.String _provider;
    private java.lang.String _secureRandomAlgorithm;
    private java.lang.String _sslKeyManagerFactoryAlgorithm;
    private java.lang.String _sslTrustManagerFactoryAlgorithm;
    private java.lang.String _truststore;
    private java.lang.String _truststoreType;
    private boolean _wantClientAuth;
    private int _handshakeTimeout;
    private boolean _allowRenegotiate;
    static java.lang.Class class$org$mortbay$jetty$security$SslSocketConnector$CachedInfo;

    private static java.security.cert.X509Certificate[] getCertChain(javax.net.ssl.SSLSession)
    {
        java.security.cert.X509Certificate $r8;
        javax.security.cert.X509Certificate[] $r1;
        byte[] $r5;
        java.security.cert.CertificateFactory $r3;
        javax.security.cert.X509Certificate $r4;
        java.lang.Exception $r9;
        javax.net.ssl.SSLSession r0;
        java.security.cert.Certificate $r7;
        java.io.ByteArrayInputStream $r6;
        int $i0, i1, i2;
        java.security.cert.X509Certificate[] r2;
        javax.net.ssl.SSLPeerUnverifiedException $r10;

        r0 := @parameter0: javax.net.ssl.SSLSession;

     label1:
        $r1 = interfaceinvoke r0.<javax.net.ssl.SSLSession: javax.security.cert.X509Certificate[] getPeerCertificateChain()>();

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label3;

     label2:
        return null;

     label3:
        i1 = lengthof $r1;

        r2 = newarray (java.security.cert.X509Certificate)[i1];

        $r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        $r4 = $r1[i2];

        $r5 = virtualinvoke $r4.<javax.security.cert.X509Certificate: byte[] getEncoded()>();

        $r6 = new java.io.ByteArrayInputStream;

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r7 = virtualinvoke $r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r6);

        $r8 = (java.security.cert.X509Certificate) $r7;

        r2[i2] = $r8;

        i2 = i2 + 1;

        goto label4;

     label5:
        return r2;

     label6:
        $r10 := @caughtexception;

        return null;

     label7:
        $r9 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Throwable)>("EXCEPTION ", $r9);

        return null;

        catch javax.net.ssl.SSLPeerUnverifiedException from label1 to label2 with label6;
        catch javax.net.ssl.SSLPeerUnverifiedException from label3 to label5 with label6;
        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label5 with label7;
    }

    public void <init>()
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        specialinvoke r0.<org.mortbay.jetty.bio.SocketConnector: void <init>()>();

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String[] _excludeCipherSuites> = null;

        $r1 = <org.mortbay.jetty.security.SslSocketConnector: java.lang.String DEFAULT_KEYSTORE>;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystore> = $r1;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystoreType> = "JKS";

        r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _needClientAuth> = 0;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _protocol> = "TLS";

        $r2 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

        if $r2 != null goto label1;

        $r4 = "SunX509";

        goto label2;

     label1:
        $r4 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

     label2:
        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslKeyManagerFactoryAlgorithm> = $r4;

        $r3 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

        if $r3 != null goto label3;

        $r5 = "SunX509";

        goto label4;

     label3:
        $r5 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

     label4:
        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslTrustManagerFactoryAlgorithm> = $r5;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststoreType> = "JKS";

        r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _wantClientAuth> = 0;

        r0.<org.mortbay.jetty.security.SslSocketConnector: int _handshakeTimeout> = 0;

        r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _allowRenegotiate> = 0;

        return;
    }

    public boolean isAllowRenegotiate()
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $z0 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _allowRenegotiate>;

        return $z0;
    }

    public void setAllowRenegotiate(boolean)
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _allowRenegotiate> = z0;

        return;
    }

    public void accept(int) throws java.io.IOException, java.lang.InterruptedException
    {
        java.lang.IllegalStateException $r5;
        java.net.Socket $r2;
        org.mortbay.jetty.security.SslSocketConnector$SslConnection $r3;
        java.lang.Exception $r4;
        java.net.ServerSocket $r1;
        javax.net.ssl.SSLException $r7;
        org.mortbay.jetty.security.SslSocketConnector r0;
        int i0;
        java.lang.String $r6;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.net.ServerSocket _serverSocket>;

        $r2 = virtualinvoke $r1.<java.net.ServerSocket: java.net.Socket accept()>();

        virtualinvoke r0.<org.mortbay.jetty.security.SslSocketConnector: void configure(java.net.Socket)>($r2);

        $r3 = new org.mortbay.jetty.security.SslSocketConnector$SslConnection;

        specialinvoke $r3.<org.mortbay.jetty.security.SslSocketConnector$SslConnection: void <init>(org.mortbay.jetty.security.SslSocketConnector,java.net.Socket)>(r0, $r2);

        virtualinvoke $r3.<org.mortbay.jetty.bio.SocketConnector$Connection: void dispatch()>();

     label2:
        goto label7;

     label3:
        $r7 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>($r7);

     label4:
        virtualinvoke r0.<org.mortbay.jetty.security.SslSocketConnector: void stop()>();

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.Throwable)>($r4);

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label7:
        return;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    protected void configure(java.net.Socket) throws java.io.IOException
    {
        java.net.Socket r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.net.Socket;

        specialinvoke r0.<org.mortbay.jetty.bio.SocketConnector: void configure(java.net.Socket)>(r1);

        return;
    }

    protected javax.net.ssl.SSLServerSocketFactory createFactory() throws java.lang.Exception
    {
        javax.net.ssl.SSLContext $r47;
        org.mortbay.jetty.security.Password $r5, $r6, $r10, $r11, $r17, $r18;
        java.security.SecureRandom $r45, r46;
        javax.net.ssl.TrustManagerFactory $r21;
        java.security.KeyStore $r4, $r16;
        javax.net.ssl.SSLServerSocketFactory $r28;
        java.lang.Throwable $r38, $r39;
        org.mortbay.jetty.security.SslSocketConnector r0;
        org.mortbay.resource.Resource $r32, $r35;
        java.lang.String $r1, $r2, $r3, $r7, $r8, $r12, $r14, $r15, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r29, $r31, $r34, $r36, $r37;
        javax.net.ssl.KeyManagerFactory $r9;
        javax.net.ssl.TrustManager[] $r22;
        char[] $r41, $r42, $r44;
        javax.net.ssl.KeyManager[] $r13;
        java.io.InputStream $r30, $r33, r40, r43;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststore>;

        if $r1 != null goto label01;

        $r36 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystore>;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststore> = $r36;

        $r37 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystoreType>;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststoreType> = $r37;

     label01:
        r40 = null;

     label02:
        $r2 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystore>;

        if $r2 == null goto label03;

        $r34 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystore>;

        $r35 = staticinvoke <org.mortbay.resource.Resource: org.mortbay.resource.Resource newResource(java.lang.String)>($r34);

        r40 = virtualinvoke $r35.<org.mortbay.resource.Resource: java.io.InputStream getInputStream()>();

     label03:
        $r3 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystoreType>;

        $r4 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r3);

        $r33 = r40;

        $r5 = r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _password>;

        if $r5 != null goto label04;

        $r41 = null;

        goto label05;

     label04:
        $r6 = r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _password>;

        $r7 = virtualinvoke $r6.<org.mortbay.jetty.security.Password: java.lang.String toString()>();

        $r41 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

     label05:
        virtualinvoke $r4.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r33, $r41);

        goto label24;

     label06:
        goto label09;

     label07:
        $r39 := @caughtexception;

        goto label26;

     label08:
        throw $r39;

     label09:
        $r8 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslKeyManagerFactoryAlgorithm>;

        $r9 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r8);

        $r10 = r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _keyPassword>;

        if $r10 != null goto label10;

        $r42 = null;

        goto label11;

     label10:
        $r11 = r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _keyPassword>;

        $r12 = virtualinvoke $r11.<org.mortbay.jetty.security.Password: java.lang.String toString()>();

        $r42 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

     label11:
        virtualinvoke $r9.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r4, $r42);

        $r13 = virtualinvoke $r9.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        r43 = null;

     label12:
        $r14 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststore>;

        if $r14 == null goto label13;

        $r31 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststore>;

        $r32 = staticinvoke <org.mortbay.resource.Resource: org.mortbay.resource.Resource newResource(java.lang.String)>($r31);

        r43 = virtualinvoke $r32.<org.mortbay.resource.Resource: java.io.InputStream getInputStream()>();

     label13:
        $r15 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststoreType>;

        $r16 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r15);

        $r30 = r43;

        $r17 = r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _trustPassword>;

        if $r17 != null goto label14;

        $r44 = null;

        goto label15;

     label14:
        $r18 = r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _trustPassword>;

        $r19 = virtualinvoke $r18.<org.mortbay.jetty.security.Password: java.lang.String toString()>();

        $r44 = virtualinvoke $r19.<java.lang.String: char[] toCharArray()>();

     label15:
        virtualinvoke $r16.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r30, $r44);

        goto label28;

     label16:
        goto label19;

     label17:
        $r38 := @caughtexception;

        goto label30;

     label18:
        throw $r38;

     label19:
        $r20 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslTrustManagerFactoryAlgorithm>;

        $r21 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r20);

        virtualinvoke $r21.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r16);

        $r22 = virtualinvoke $r21.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        $r23 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _secureRandomAlgorithm>;

        if $r23 != null goto label20;

        $r45 = null;

        goto label21;

     label20:
        $r24 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _secureRandomAlgorithm>;

        $r45 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>($r24);

     label21:
        r46 = $r45;

        $r25 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _provider>;

        if $r25 != null goto label22;

        $r29 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _protocol>;

        $r47 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r29);

        goto label23;

     label22:
        $r27 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _protocol>;

        $r26 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _provider>;

        $r47 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>($r27, $r26);

     label23:
        virtualinvoke $r47.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r13, $r22, r46);

        $r28 = virtualinvoke $r47.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

        return $r28;

     label24:
        if r40 == null goto label25;

        virtualinvoke r40.<java.io.InputStream: void close()>();

     label25:
        goto label06;

     label26:
        if r40 == null goto label27;

        virtualinvoke r40.<java.io.InputStream: void close()>();

     label27:
        goto label08;

     label28:
        if r43 == null goto label29;

        virtualinvoke r43.<java.io.InputStream: void close()>();

     label29:
        goto label16;

     label30:
        if r43 == null goto label31;

        virtualinvoke r43.<java.io.InputStream: void close()>();

     label31:
        goto label18;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void customize(org.mortbay.io.EndPoint, org.mortbay.jetty.Request) throws java.io.IOException
    {
        java.lang.IllegalStateException $r14;
        org.mortbay.io.bio.SocketEndPoint r3;
        javax.net.ssl.SSLSocket r5;
        org.mortbay.jetty.Request r2;
        java.lang.Integer $r10, r17;
        javax.net.ssl.SSLSession $r6;
        org.mortbay.jetty.security.SslSocketConnector r0;
        int $i0;
        java.lang.String $r7, $r8, $r13;
        boolean $z0;
        java.lang.Exception $r15;
        org.mortbay.io.EndPoint r1;
        org.mortbay.jetty.security.SslSocketConnector$CachedInfo $r12, r16;
        java.lang.Object $r4, $r9;
        java.security.cert.X509Certificate[] $r11, r18;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: org.mortbay.io.EndPoint;

        r2 := @parameter1: org.mortbay.jetty.Request;

        specialinvoke r0.<org.mortbay.jetty.bio.SocketConnector: void customize(org.mortbay.io.EndPoint,org.mortbay.jetty.Request)>(r1, r2);

        virtualinvoke r2.<org.mortbay.jetty.Request: void setScheme(java.lang.String)>("https");

        r3 = (org.mortbay.io.bio.SocketEndPoint) r1;

        $r4 = virtualinvoke r3.<org.mortbay.io.bio.SocketEndPoint: java.lang.Object getTransport()>();

        r5 = (javax.net.ssl.SSLSocket) $r4;

     label1:
        $r6 = virtualinvoke r5.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r7 = interfaceinvoke $r6.<javax.net.ssl.SSLSession: java.lang.String getCipherSuite()>();

        $r8 = <org.mortbay.jetty.security.SslSocketConnector: java.lang.String CACHED_INFO_ATTR>;

        $r9 = interfaceinvoke $r6.<javax.net.ssl.SSLSession: java.lang.Object getValue(java.lang.String)>($r8);

        r16 = (org.mortbay.jetty.security.SslSocketConnector$CachedInfo) $r9;

        if r16 == null goto label2;

        r17 = virtualinvoke r16.<org.mortbay.jetty.security.SslSocketConnector$CachedInfo: java.lang.Integer getKeySize()>();

        r18 = virtualinvoke r16.<org.mortbay.jetty.security.SslSocketConnector$CachedInfo: java.security.cert.X509Certificate[] getCerts()>();

        goto label3;

     label2:
        $r10 = new java.lang.Integer;

        $i0 = staticinvoke <org.mortbay.jetty.security.ServletSSL: int deduceKeyLength(java.lang.String)>($r7);

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i0);

        r17 = $r10;

        $r11 = staticinvoke <org.mortbay.jetty.security.SslSocketConnector: java.security.cert.X509Certificate[] getCertChain(javax.net.ssl.SSLSession)>($r6);

        r18 = $r11;

        $r12 = new org.mortbay.jetty.security.SslSocketConnector$CachedInfo;

        specialinvoke $r12.<org.mortbay.jetty.security.SslSocketConnector$CachedInfo: void <init>(org.mortbay.jetty.security.SslSocketConnector,java.lang.Integer,java.security.cert.X509Certificate[])>(r0, $r10, $r11);

        $r13 = <org.mortbay.jetty.security.SslSocketConnector: java.lang.String CACHED_INFO_ATTR>;

        interfaceinvoke $r6.<javax.net.ssl.SSLSession: void putValue(java.lang.String,java.lang.Object)>($r13, $r12);

     label3:
        if r18 == null goto label4;

        virtualinvoke r2.<org.mortbay.jetty.Request: void setAttribute(java.lang.String,java.lang.Object)>("javax.servlet.request.X509Certificate", r18);

        goto label5;

     label4:
        $z0 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _needClientAuth>;

        if $z0 == 0 goto label5;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no client auth");

        throw $r14;

     label5:
        virtualinvoke r2.<org.mortbay.jetty.Request: void setAttribute(java.lang.String,java.lang.Object)>("javax.servlet.request.cipher_suite", $r7);

        virtualinvoke r2.<org.mortbay.jetty.Request: void setAttribute(java.lang.String,java.lang.Object)>("javax.servlet.request.key_size", r17);

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String,java.lang.Throwable)>("EXCEPTION ", $r15);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public java.lang.String[] getExcludeCipherSuites()
    {
        java.lang.String[] $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String[] _excludeCipherSuites>;

        return $r1;
    }

    public java.lang.String getKeystore()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystore>;

        return $r1;
    }

    public java.lang.String getKeystoreType()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystoreType>;

        return $r1;
    }

    public boolean getNeedClientAuth()
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $z0 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _needClientAuth>;

        return $z0;
    }

    public java.lang.String getProtocol()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _protocol>;

        return $r1;
    }

    public java.lang.String getProvider()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _provider>;

        return $r1;
    }

    public java.lang.String getSecureRandomAlgorithm()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _secureRandomAlgorithm>;

        return $r1;
    }

    public java.lang.String getSslKeyManagerFactoryAlgorithm()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslKeyManagerFactoryAlgorithm>;

        return $r1;
    }

    public java.lang.String getSslTrustManagerFactoryAlgorithm()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslTrustManagerFactoryAlgorithm>;

        return $r1;
    }

    public java.lang.String getTruststore()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststore>;

        return $r1;
    }

    public java.lang.String getTruststoreType()
    {
        java.lang.String $r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $r1 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststoreType>;

        return $r1;
    }

    public boolean getWantClientAuth()
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $z0 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _wantClientAuth>;

        return $z0;
    }

    public boolean isConfidential(org.mortbay.jetty.Request)
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        int $i0, $i1;
        org.mortbay.jetty.Request r1;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: org.mortbay.jetty.Request;

        $i0 = virtualinvoke r0.<org.mortbay.jetty.security.SslSocketConnector: int getConfidentialPort()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.mortbay.jetty.Request: int getServerPort()>();

        if $i0 != $i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isIntegral(org.mortbay.jetty.Request)
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        int $i0, $i1;
        org.mortbay.jetty.Request r1;
        boolean $z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: org.mortbay.jetty.Request;

        $i0 = virtualinvoke r0.<org.mortbay.jetty.security.SslSocketConnector: int getIntegralPort()>();

        if $i0 == 0 goto label1;

        $i1 = virtualinvoke r1.<org.mortbay.jetty.Request: int getServerPort()>();

        if $i0 != $i1 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected java.net.ServerSocket newServerSocket(java.lang.String, int, int) throws java.io.IOException
    {
        java.net.InetAddress $r3;
        java.net.ServerSocket $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.net.ssl.SSLServerSocketFactory $r1;
        java.lang.Exception $r18;
        java.util.List $r7, $r10;
        javax.net.ssl.SSLServerSocket $r17;
        java.lang.Object[] $r13;
        java.lang.String[] $r4, $r5, $r6, $r8, $r12, $r14, r27;
        java.util.ArrayList $r9;
        org.mortbay.jetty.security.SslSocketConnector r0;
        java.lang.StringBuffer $r21, $r22, $r23;
        int i0, i1, $i2, $i3;
        java.lang.String r2, r16, $r19, $r24;
        java.util.Iterator $r11;
        java.io.IOException $r20, $r25;
        java.lang.Object $r15;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label01:
        $r1 = virtualinvoke r0.<org.mortbay.jetty.security.SslSocketConnector: javax.net.ssl.SSLServerSocketFactory createFactory()>();

        if r2 != null goto label02;

        $r26 = virtualinvoke $r1.<javax.net.ssl.SSLServerSocketFactory: java.net.ServerSocket createServerSocket(int,int)>(i0, i1);

        goto label03;

     label02:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r2);

        $r26 = virtualinvoke $r1.<javax.net.ssl.SSLServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)>(i0, i1, $r3);

     label03:
        $r17 = (javax.net.ssl.SSLServerSocket) $r26;

        $z0 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _wantClientAuth>;

        if $z0 == 0 goto label04;

        $z5 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _wantClientAuth>;

        virtualinvoke $r17.<javax.net.ssl.SSLServerSocket: void setWantClientAuth(boolean)>($z5);

     label04:
        $z1 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _needClientAuth>;

        if $z1 == 0 goto label05;

        $z4 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _needClientAuth>;

        virtualinvoke $r17.<javax.net.ssl.SSLServerSocket: void setNeedClientAuth(boolean)>($z4);

     label05:
        $r4 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String[] _excludeCipherSuites>;

        if $r4 == null goto label09;

        $r5 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String[] _excludeCipherSuites>;

        $i2 = lengthof $r5;

        if $i2 <= 0 goto label09;

        $r6 = r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String[] _excludeCipherSuites>;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r17.<javax.net.ssl.SSLServerSocket: java.lang.String[] getEnabledCipherSuites()>();

        $r9 = new java.util.ArrayList;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        $r11 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r15 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        $z3 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r16);

        if $z3 == 0 goto label07;

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>(r16);

     label07:
        goto label06;

     label08:
        $i3 = interfaceinvoke $r9.<java.util.List: int size()>();

        $r12 = newarray (java.lang.String)[$i3];

        $r13 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (java.lang.String[]) $r13;

        r27 = (java.lang.String[]) $r14;

        virtualinvoke $r17.<javax.net.ssl.SSLServerSocket: void setEnabledCipherSuites(java.lang.String[])>(r27);

     label09:
        goto label12;

     label10:
        $r25 := @caughtexception;

        throw $r25;

     label11:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<java.lang.Exception: java.lang.String toString()>();

        staticinvoke <org.mortbay.log.Log: void warn(java.lang.String)>($r19);

        staticinvoke <org.mortbay.log.Log: void debug(java.lang.Throwable)>($r18);

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("!JsseListener: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r18);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label12:
        return $r17;

        catch java.io.IOException from label01 to label09 with label10;
        catch java.lang.Exception from label01 to label09 with label11;
    }

    public void setExcludeCipherSuites(java.lang.String[])
    {
        java.lang.String[] r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String[];

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String[] _excludeCipherSuites> = r1;

        return;
    }

    public void setKeyPassword(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.Password $r2;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.mortbay.jetty.security.Password: org.mortbay.jetty.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>("jetty.ssl.keypassword", r1, null);

        r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _keyPassword> = $r2;

        return;
    }

    public void setKeystore(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystore> = r1;

        return;
    }

    public void setKeystoreType(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _keystoreType> = r1;

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _needClientAuth> = z0;

        return;
    }

    public void setPassword(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.Password $r2;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.mortbay.jetty.security.Password: org.mortbay.jetty.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>("jetty.ssl.password", r1, null);

        r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _password> = $r2;

        return;
    }

    public void setTrustPassword(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.Password $r2;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.mortbay.jetty.security.Password: org.mortbay.jetty.security.Password getPassword(java.lang.String,java.lang.String,java.lang.String)>("jetty.ssl.password", r1, null);

        r0.<org.mortbay.jetty.security.SslSocketConnector: org.mortbay.jetty.security.Password _trustPassword> = $r2;

        return;
    }

    public void setProtocol(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _protocol> = r1;

        return;
    }

    public void setProvider(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _provider> = r1;

        return;
    }

    public void setSecureRandomAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _secureRandomAlgorithm> = r1;

        return;
    }

    public void setSslKeyManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslKeyManagerFactoryAlgorithm> = r1;

        return;
    }

    public void setSslTrustManagerFactoryAlgorithm(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _sslTrustManagerFactoryAlgorithm> = r1;

        return;
    }

    public void setTruststore(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststore> = r1;

        return;
    }

    public void setTruststoreType(java.lang.String)
    {
        java.lang.String r1;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        r1 := @parameter0: java.lang.String;

        r0.<org.mortbay.jetty.security.SslSocketConnector: java.lang.String _truststoreType> = r1;

        return;
    }

    public void setWantClientAuth(boolean)
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean z0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        z0 := @parameter0: boolean;

        r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _wantClientAuth> = z0;

        return;
    }

    public void setHandshakeTimeout(int)
    {
        int i0;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        i0 := @parameter0: int;

        r0.<org.mortbay.jetty.security.SslSocketConnector: int _handshakeTimeout> = i0;

        return;
    }

    public int getHandshakeTimeout()
    {
        int $i0;
        org.mortbay.jetty.security.SslSocketConnector r0;

        r0 := @this: org.mortbay.jetty.security.SslSocketConnector;

        $i0 = r0.<org.mortbay.jetty.security.SslSocketConnector: int _handshakeTimeout>;

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static boolean access$100(org.mortbay.jetty.security.SslSocketConnector)
    {
        org.mortbay.jetty.security.SslSocketConnector r0;
        boolean $z0;

        r0 := @parameter0: org.mortbay.jetty.security.SslSocketConnector;

        $z0 = r0.<org.mortbay.jetty.security.SslSocketConnector: boolean _allowRenegotiate>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.StringBuffer $r2, $r4, $r6, $r7;
        java.lang.Class $r0, $r9;
        java.lang.String $r1, $r3, $r5, $r8;

        <org.mortbay.jetty.security.SslSocketConnector: java.lang.String PASSWORD_PROPERTY> = "jetty.ssl.password";

        <org.mortbay.jetty.security.SslSocketConnector: java.lang.String KEYPASSWORD_PROPERTY> = "jetty.ssl.keypassword";

        $r0 = <org.mortbay.jetty.security.SslSocketConnector: java.lang.Class class$org$mortbay$jetty$security$SslSocketConnector$CachedInfo>;

        if $r0 != null goto label1;

        $r9 = staticinvoke <org.mortbay.jetty.security.SslSocketConnector: java.lang.Class class$(java.lang.String)>("org.mortbay.jetty.security.SslSocketConnector$CachedInfo");

        <org.mortbay.jetty.security.SslSocketConnector: java.lang.Class class$org$mortbay$jetty$security$SslSocketConnector$CachedInfo> = $r9;

        goto label2;

     label1:
        $r9 = <org.mortbay.jetty.security.SslSocketConnector: java.lang.Class class$org$mortbay$jetty$security$SslSocketConnector$CachedInfo>;

     label2:
        $r1 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        <org.mortbay.jetty.security.SslSocketConnector: java.lang.String CACHED_INFO_ATTR> = $r1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".keystore");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        <org.mortbay.jetty.security.SslSocketConnector: java.lang.String DEFAULT_KEYSTORE> = $r8;

        return;
    }
}
