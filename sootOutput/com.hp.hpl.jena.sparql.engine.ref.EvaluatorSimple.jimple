public class com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple extends java.lang.Object implements com.hp.hpl.jena.sparql.engine.ref.Evaluator
{
    private com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt;
    public static boolean debug;

    public void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()
    {
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.algebra.Table basicPattern(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r4;
        com.hp.hpl.jena.sparql.algebra.Table $r6;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot $r3;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r5;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.main.QC: com.hp.hpl.jena.sparql.engine.QueryIterator executeDirect(com.hp.hpl.jena.sparql.core.BasicPattern,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, $r3, $r4);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r5);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Table pathPattern(com.hp.hpl.jena.sparql.core.TriplePath)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPath $r0;
        com.hp.hpl.jena.sparql.core.TriplePath r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r3, $r5;
        com.hp.hpl.jena.sparql.algebra.Table $r6;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot $r4;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r2;

        r2 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.TriplePath;

        $r0 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPath;

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3);

        $r5 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPath: void <init>(com.hp.hpl.jena.sparql.core.TriplePath,com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, $r4, $r5);

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r0);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Table procedure(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        com.hp.hpl.jena.sparql.procedure.Procedure $r4;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r3, $r6, $r8;
        com.hp.hpl.jena.sparql.algebra.Table r5, $r10;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r7, $r9;

        r2 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, r1, $r3);

        $r6 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r6);

        $r8 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.engine.QueryIterator eval(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.procedure.Procedure,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, $r4, $r8);

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r9);

        return $r10;
    }

    public com.hp.hpl.jena.sparql.algebra.Table propertyFunction(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r2;
        com.hp.hpl.jena.sparql.procedure.Procedure $r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4, $r7, $r9;
        com.hp.hpl.jena.sparql.algebra.Table r6, $r11;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8, $r10;

        r3 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r6 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r1 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter3: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r4 = r3.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.procedure.Procedure build(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.pfunction.PropFuncArg,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, r1, r2, $r4);

        $r7 = r3.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r8 = interfaceinvoke r6.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7);

        $r9 = r3.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r10 = staticinvoke <com.hp.hpl.jena.sparql.procedure.ProcEval: com.hp.hpl.jena.sparql.engine.QueryIterator eval(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.procedure.Procedure,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, $r5, $r9);

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table create(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r10);

        return $r11;
    }

    public com.hp.hpl.jena.sparql.algebra.Table join(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        java.io.PrintStream $r4;
        com.hp.hpl.jena.sparql.algebra.Table r1, r2, $r3;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $z0 = <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Join");

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r2);

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.algebra.Table joinWorker(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table,boolean,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2, 0, null);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Table leftJoin(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.io.PrintStream $r4, $r5;
        com.hp.hpl.jena.sparql.expr.ExprList r3;
        com.hp.hpl.jena.sparql.algebra.Table r1, r2, $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        r3 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        $z0 = <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Left Join");

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r2);

        if r3 == null goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>(r3);

     label1:
        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.algebra.Table joinWorker(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table,boolean,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2, 1, r3);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Table diff(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        java.io.PrintStream $r4;
        com.hp.hpl.jena.sparql.algebra.Table r1, r2, $r3;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $z0 = <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Diff");

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r2);

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.algebra.Table diffWorker(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Table minus(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        java.io.PrintStream $r4;
        com.hp.hpl.jena.sparql.algebra.Table r1, r2, $r3;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $z0 = <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Minus");

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r1);

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r2);

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.algebra.Table minusWorker(com.hp.hpl.jena.sparql.algebra.Table,com.hp.hpl.jena.sparql.algebra.Table)>(r1, r2);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Table filter(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.algebra.Table)
    {
        java.util.ArrayList $r4;
        com.hp.hpl.jena.sparql.expr.ExprList r10;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r8, $r11;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r6;
        java.io.PrintStream $r12, $r13;
        java.util.Iterator $r7;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r9;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r10 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r0 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $z0 = <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug>;

        if $z0 == 0 goto label1;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("Restriction");

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.Object)>(r10);

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r0);

     label1:
        $r2 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label2:
        $z2 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r9 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $r11 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $z1 = virtualinvoke r10.<com.hp.hpl.jena.sparql.expr.ExprList: boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r9, $r11);

        if $z1 == 0 goto label3;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        goto label2;

     label4:
        $r5 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        $r6 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r7 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r8 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7, $r8);

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r6);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Table union(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        java.io.PrintStream $r10;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r0;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r9;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r4, $r7;
        com.hp.hpl.jena.sparql.algebra.Table r3, r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r5, $r8;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $z0 = <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug>;

        if $z0 == 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Union");

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r3);

        staticinvoke <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: void dump(com.hp.hpl.jena.sparql.algebra.Table)>(r6);

     label1:
        $r0 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r5 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r4);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r5);

        $r7 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r8 = interfaceinvoke r6.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r8);

        $r9 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r0);

        return $r9;
    }

    public com.hp.hpl.jena.sparql.algebra.Table condition(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.algebra.Table r0, r1;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r2;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: void close()>();

        return r1;

     label1:
        interfaceinvoke r1.<com.hp.hpl.jena.sparql.algebra.Table: void close()>();

        return r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Table list(com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        return r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Table order(com.hp.hpl.jena.sparql.algebra.Table, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN $r7;
        java.util.List r5;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSort $r4;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r5 := @parameter1: java.util.List;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterSort;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterSort: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, r5, $r6);

        $r7 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r7;
    }

    public com.hp.hpl.jena.sparql.algebra.Table groupBy(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.core.VarExprList, java.util.List)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterGroup $r4;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r8;
        java.util.List r6;
        com.hp.hpl.jena.sparql.core.VarExprList r5;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r7;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r5 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        r6 := @parameter2: java.util.List;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterGroup;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterGroup: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.VarExprList,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, r5, r6, $r7);

        $r8 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r8;
    }

    public com.hp.hpl.jena.sparql.algebra.Table project(com.hp.hpl.jena.sparql.algebra.Table, java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN $r7;
        java.util.List r5;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject $r4;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r5 := @parameter1: java.util.List;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterProject: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,java.util.List,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, r5, $r6);

        $r7 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r7;
    }

    public com.hp.hpl.jena.sparql.algebra.Table reduced(com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterReduced $r4;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterReduced;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterReduced: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, $r5);

        $r6 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Table distinct(com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinct $r4;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinct;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterDistinct: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, $r5);

        $r6 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Table slice(com.hp.hpl.jena.sparql.algebra.Table, long, long)
    {
        long l0, l1;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r6;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice $r4;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r5;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterSlice: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,long,long,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, l0, l1, $r5);

        $r6 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r6;
    }

    public com.hp.hpl.jena.sparql.algebra.Table assign(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN $r7;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign $r4;
        com.hp.hpl.jena.sparql.core.VarExprList r5;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r5 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext,boolean)>($r3, r5, $r6, 0);

        $r7 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r7;
    }

    public com.hp.hpl.jena.sparql.algebra.Table extend(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN $r7;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign $r4;
        com.hp.hpl.jena.sparql.core.VarExprList r5;
        com.hp.hpl.jena.sparql.algebra.Table r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r6;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r5 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext getExecContext()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterAssign: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.sparql.core.VarExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext,boolean)>($r3, r5, $r6, 1);

        $r7 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r7;
    }

    public com.hp.hpl.jena.sparql.algebra.Table unit()
    {
        com.hp.hpl.jena.sparql.algebra.Table $r0;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.TableFactory: com.hp.hpl.jena.sparql.algebra.Table createUnit()>();

        return $r0;
    }

    private com.hp.hpl.jena.sparql.algebra.Table joinWorker(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table, boolean, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r4;
        com.hp.hpl.jena.sparql.algebra.table.TableN $r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r8;
        com.hp.hpl.jena.sparql.expr.ExprList r9;
        com.hp.hpl.jena.sparql.algebra.Table r0, r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2, $r5, $r10;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3, $r11;
        boolean z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        z0 := @parameter2: boolean;

        r9 := @parameter3: com.hp.hpl.jena.sparql.expr.ExprList;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        $r5 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r5);

     label1:
        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $r10 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r11 = interfaceinvoke r6.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator matchRightLeft(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r8, z0, r9, $r10);

        if $r11 != null goto label2;

        goto label1;

     label2:
        virtualinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r11);

        goto label1;

     label3:
        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: void close()>();

        interfaceinvoke r6.<com.hp.hpl.jena.sparql.algebra.Table: void close()>();

        $r7 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r4);

        return $r7;
    }

    private com.hp.hpl.jena.sparql.algebra.Table diffWorker(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r6;
        com.hp.hpl.jena.sparql.algebra.Table r0, r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r2;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r3;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r5 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $r2 = r1.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $z1 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.algebra.Table: boolean contains(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r6);

        if $z1 == 0 goto label2;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.algebra.table.TableN: void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r6);

     label2:
        goto label1;

     label3:
        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Table: void close()>();

        interfaceinvoke r5.<com.hp.hpl.jena.sparql.algebra.Table: void close()>();

        return $r4;
    }

    private com.hp.hpl.jena.sparql.algebra.Table minusWorker(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.algebra.Table)
    {
        com.hp.hpl.jena.sparql.algebra.table.TableN $r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r5, $r9;
        com.hp.hpl.jena.sparql.algebra.Table r1, r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r3, $r7;
        com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple r2;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r4, $r8;
        boolean $z0, $z1, $z2, z3, $z4;

        r2 := @this: com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r6 := @parameter1: com.hp.hpl.jena.sparql.algebra.Table;

        $r0 = new com.hp.hpl.jena.sparql.algebra.table.TableN;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: void <init>()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3);

     label1:
        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        z3 = 1;

        $r7 = r2.<com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: com.hp.hpl.jena.sparql.engine.ExecutionContext execCxt>;

        $r8 = interfaceinvoke r6.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r7);

     label2:
        $z4 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.engine.QueryIterator: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: boolean disjoint(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r5, $r9);

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $z2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Algebra: boolean compatible(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r5, $r9);

        if $z2 != 0 goto label4;

        goto label2;

     label4:
        z3 = 0;

        goto label5;

     label5:
        interfaceinvoke $r8.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        if z3 == 0 goto label6;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.algebra.table.TableN: void addBinding(com.hp.hpl.jena.sparql.engine.binding.Binding)>($r5);

     label6:
        goto label1;

     label7:
        interfaceinvoke $r4.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        return $r0;
    }

    private static void dump(com.hp.hpl.jena.sparql.algebra.Table)
    {
        java.io.PrintStream $r1;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r7;
        java.util.List $r8;
        java.lang.StringBuilder $r0, $r2, $r5;
        com.hp.hpl.jena.sparql.algebra.Table r3;
        java.lang.String $r4, $r6;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r9;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Table: ");

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        interfaceinvoke r3.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

        $r7 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r8 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVarNames()>();

        $r9 = interfaceinvoke r3.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

        specialinvoke $r7.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r8, null, $r9);

        staticinvoke <com.hp.hpl.jena.query.ResultSetFormatter: void out(com.hp.hpl.jena.query.ResultSet)>($r7);

        return;
    }

    static void <clinit>()
    {
        <com.hp.hpl.jena.sparql.engine.ref.EvaluatorSimple: boolean debug> = 0;

        return;
    }
}
