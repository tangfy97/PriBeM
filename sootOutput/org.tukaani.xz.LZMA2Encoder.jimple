class org.tukaani.xz.LZMA2Encoder extends org.tukaani.xz.LZMA2Coder implements org.tukaani.xz.FilterEncoder
{
    private final org.tukaani.xz.LZMA2Options options;
    private final byte[] props;

    void <init>(org.tukaani.xz.LZMA2Options)
    {
        byte[] $r1, $r3, $r4, $r7;
        org.tukaani.xz.LZMA2Options r2, $r6;
        byte $b6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r8;
        org.tukaani.xz.LZMA2Encoder r0;
        java.lang.Object $r5;

        r0 := @this: org.tukaani.xz.LZMA2Encoder;

        r2 := @parameter0: org.tukaani.xz.LZMA2Options;

        specialinvoke r0.<org.tukaani.xz.LZMA2Coder: void <init>()>();

        $r1 = newarray (byte)[1];

        r0.<org.tukaani.xz.LZMA2Encoder: byte[] props> = $r1;

        $r3 = virtualinvoke r2.<org.tukaani.xz.LZMA2Options: byte[] getPresetDict()>();

        if $r3 == null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("XZ doesn\'t support a preset dictionary for now");

        throw $r8;

     label1:
        $i0 = virtualinvoke r2.<org.tukaani.xz.LZMA2Options: int getMode()>();

        if $i0 != 0 goto label2;

        $r7 = r0.<org.tukaani.xz.LZMA2Encoder: byte[] props>;

        $r7[0] = 0;

        goto label3;

     label2:
        $i1 = virtualinvoke r2.<org.tukaani.xz.LZMA2Options: int getDictSize()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 4096);

        $r4 = r0.<org.tukaani.xz.LZMA2Encoder: byte[] props>;

        $i3 = $i2 - 1;

        $i4 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>($i3);

        $i5 = $i4 - 23;

        $b6 = (byte) $i5;

        $r4[0] = $b6;

     label3:
        $r5 = virtualinvoke r2.<org.tukaani.xz.LZMA2Options: java.lang.Object clone()>();

        $r6 = (org.tukaani.xz.LZMA2Options) $r5;

        r0.<org.tukaani.xz.LZMA2Encoder: org.tukaani.xz.LZMA2Options options> = $r6;

        return;
    }

    public long getFilterID()
    {
        org.tukaani.xz.LZMA2Encoder r0;

        r0 := @this: org.tukaani.xz.LZMA2Encoder;

        return 33L;
    }

    public byte[] getFilterProps()
    {
        byte[] $r1;
        org.tukaani.xz.LZMA2Encoder r0;

        r0 := @this: org.tukaani.xz.LZMA2Encoder;

        $r1 = r0.<org.tukaani.xz.LZMA2Encoder: byte[] props>;

        return $r1;
    }

    public boolean supportsFlushing()
    {
        org.tukaani.xz.LZMA2Encoder r0;

        r0 := @this: org.tukaani.xz.LZMA2Encoder;

        return 1;
    }

    public org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)
    {
        org.tukaani.xz.LZMA2Encoder r0;
        org.tukaani.xz.FinishableOutputStream r1, $r3;
        org.tukaani.xz.LZMA2Options $r2;

        r0 := @this: org.tukaani.xz.LZMA2Encoder;

        r1 := @parameter0: org.tukaani.xz.FinishableOutputStream;

        $r2 = r0.<org.tukaani.xz.LZMA2Encoder: org.tukaani.xz.LZMA2Options options>;

        $r3 = virtualinvoke $r2.<org.tukaani.xz.LZMA2Options: org.tukaani.xz.FinishableOutputStream getOutputStream(org.tukaani.xz.FinishableOutputStream)>(r1);

        return $r3;
    }
}
