public abstract class com.mycila.inject.internal.guava.collect.Sets$SetView extends java.util.AbstractSet
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Sets$SetView r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$SetView;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet immutableCopy()
    {
        com.mycila.inject.internal.guava.collect.Sets$SetView r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$SetView;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Collection)>(r0);

        return $r1;
    }

    public java.util.Set copyInto(java.util.Set)
    {
        java.util.Set r0;
        com.mycila.inject.internal.guava.collect.Sets$SetView r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Sets$SetView;

        r0 := @parameter0: java.util.Set;

        interfaceinvoke r0.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    void <init>(com.mycila.inject.internal.guava.collect.Sets$1)
    {
        com.mycila.inject.internal.guava.collect.Sets$SetView r0;
        com.mycila.inject.internal.guava.collect.Sets$1 r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Sets$SetView;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Sets$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Sets$SetView: void <init>()>();

        return;
    }
}
