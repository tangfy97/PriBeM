public abstract class org.codehaus.jackson.map.ClassIntrospector extends java.lang.Object
{

    protected void <init>()
    {
        org.codehaus.jackson.map.ClassIntrospector r0;

        r0 := @this: org.codehaus.jackson.map.ClassIntrospector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.codehaus.jackson.map.BeanDescription forSerialization(org.codehaus.jackson.map.SerializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver);

    public abstract org.codehaus.jackson.map.BeanDescription forDeserialization(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver);

    public abstract org.codehaus.jackson.map.BeanDescription forCreation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver);

    public abstract org.codehaus.jackson.map.BeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver);

    public abstract org.codehaus.jackson.map.BeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ClassIntrospector$MixInResolver);

    public org.codehaus.jackson.map.BeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig, java.lang.Class, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.ClassIntrospector r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r2;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.BeanDescription $r5;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r0 := @this: org.codehaus.jackson.map.ClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: java.lang.Class;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.type.JavaType constructType(java.lang.Class)>(r2);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forClassAnnotations(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, $r3, r4);

        return $r5;
    }

    public org.codehaus.jackson.map.BeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig, java.lang.Class, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        org.codehaus.jackson.map.ClassIntrospector r0;
        org.codehaus.jackson.type.JavaType $r3;
        java.lang.Class r2;
        org.codehaus.jackson.map.MapperConfig r1;
        org.codehaus.jackson.map.BeanDescription $r5;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r0 := @this: org.codehaus.jackson.map.ClassIntrospector;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r2 := @parameter1: java.lang.Class;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.type.JavaType constructType(java.lang.Class)>(r2);

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ClassIntrospector: org.codehaus.jackson.map.BeanDescription forDirectClassAnnotations(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.ClassIntrospector$MixInResolver)>(r1, $r3, r4);

        return $r5;
    }
}
