final class kodkod.engine.fol2sat.FileLogger$FileLog extends kodkod.engine.fol2sat.TranslationLog
{
    private final java.util.Set roots;
    private final kodkod.ast.Node[] original;
    private final kodkod.ast.Formula[] translated;
    private final kodkod.ast.Variable[][] freeVars;
    private final java.io.File file;
    private final kodkod.instance.Bounds bounds;

    void <init>(kodkod.util.nodes.AnnotatedNode, kodkod.util.collections.FixedMap, java.io.File, kodkod.instance.Bounds)
    {
        kodkod.ast.Variable[][] $r11, $r23;
        kodkod.instance.Bounds r2;
        kodkod.ast.Formula[] $r10, $r16;
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        int $i0, i1;
        kodkod.util.nodes.AnnotatedNode r3;
        boolean $z0;
        java.util.Map$Entry r15;
        java.util.Iterator $r13;
        kodkod.util.collections.FixedMap r7;
        kodkod.ast.Formula $r5, $r18;
        java.util.Set $r6, $r8, $r12;
        java.io.File r1;
        kodkod.ast.Node $r4, $r21, $r22;
        kodkod.ast.Variable[] $r25;
        java.lang.Object $r14, $r17, $r20, $r24;
        kodkod.ast.Node[] $r9, $r19;

        r0 := @this: kodkod.engine.fol2sat.FileLogger$FileLog;

        r3 := @parameter0: kodkod.util.nodes.AnnotatedNode;

        r7 := @parameter1: kodkod.util.collections.FixedMap;

        r1 := @parameter2: java.io.File;

        r2 := @parameter3: kodkod.instance.Bounds;

        specialinvoke r0.<kodkod.engine.fol2sat.TranslationLog: void <init>()>();

        r0.<kodkod.engine.fol2sat.FileLogger$FileLog: java.io.File file> = r1;

        r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.instance.Bounds bounds> = r2;

        $r4 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node node()>();

        $r5 = (kodkod.ast.Formula) $r4;

        $r6 = staticinvoke <kodkod.util.nodes.Nodes: java.util.Set conjuncts(kodkod.ast.Formula)>($r5);

        r0.<kodkod.engine.fol2sat.FileLogger$FileLog: java.util.Set roots> = $r6;

        $r8 = virtualinvoke r7.<kodkod.util.collections.FixedMap: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r8.<java.util.Set: int size()>();

        $r9 = newarray (kodkod.ast.Node)[$i0];

        r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Node[] original> = $r9;

        $r10 = newarray (kodkod.ast.Formula)[$i0];

        r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Formula[] translated> = $r10;

        $r11 = newmultiarray (kodkod.ast.Variable)[$i0][];

        r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Variable[][] freeVars> = $r11;

        i1 = 0;

        $r12 = virtualinvoke r7.<kodkod.util.collections.FixedMap: java.util.Set entrySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r14;

        $r16 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Formula[] translated>;

        $r17 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (kodkod.ast.Formula) $r17;

        $r16[i1] = $r18;

        $r19 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Node[] original>;

        $r20 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (kodkod.ast.Node) $r20;

        $r22 = virtualinvoke r3.<kodkod.util.nodes.AnnotatedNode: kodkod.ast.Node sourceOf(kodkod.ast.Node)>($r21);

        $r19[i1] = $r22;

        $r23 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Variable[][] freeVars>;

        $r24 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (kodkod.ast.Variable[]) $r24;

        $r23[i1] = $r25;

        i1 = i1 + 1;

     label2:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    protected final void finalize()
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        java.io.File $r1;

        r0 := @this: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: java.io.File file>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;
    }

    public java.util.Set roots()
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        java.util.Set $r1;

        r0 := @this: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: java.util.Set roots>;

        return $r1;
    }

    public kodkod.instance.Bounds bounds()
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        kodkod.instance.Bounds $r1;

        r0 := @this: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.instance.Bounds bounds>;

        return $r1;
    }

    public java.util.Iterator replay(kodkod.engine.fol2sat.RecordFilter)
    {
        kodkod.engine.fol2sat.FileLogger$FileLog$1 $r0;
        kodkod.engine.fol2sat.FileLogger$FileLog r1;
        kodkod.engine.fol2sat.RecordFilter r2;
        java.lang.RuntimeException $r4;
        java.io.FileNotFoundException $r3;

        r1 := @this: kodkod.engine.fol2sat.FileLogger$FileLog;

        r2 := @parameter0: kodkod.engine.fol2sat.RecordFilter;

     label1:
        $r0 = new kodkod.engine.fol2sat.FileLogger$FileLog$1;

        specialinvoke $r0.<kodkod.engine.fol2sat.FileLogger$FileLog$1: void <init>(kodkod.engine.fol2sat.FileLogger$FileLog,kodkod.engine.fol2sat.RecordFilter)>(r1, r2);

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    static kodkod.instance.Bounds access$0(kodkod.engine.fol2sat.FileLogger$FileLog)
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        kodkod.instance.Bounds $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.instance.Bounds bounds>;

        return $r1;
    }

    static java.io.File access$1(kodkod.engine.fol2sat.FileLogger$FileLog)
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        java.io.File $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: java.io.File file>;

        return $r1;
    }

    static kodkod.ast.Variable[][] access$2(kodkod.engine.fol2sat.FileLogger$FileLog)
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        kodkod.ast.Variable[][] $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Variable[][] freeVars>;

        return $r1;
    }

    static kodkod.ast.Node[] access$3(kodkod.engine.fol2sat.FileLogger$FileLog)
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        kodkod.ast.Node[] $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Node[] original>;

        return $r1;
    }

    static kodkod.ast.Formula[] access$4(kodkod.engine.fol2sat.FileLogger$FileLog)
    {
        kodkod.engine.fol2sat.FileLogger$FileLog r0;
        kodkod.ast.Formula[] $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.FileLogger$FileLog;

        $r1 = r0.<kodkod.engine.fol2sat.FileLogger$FileLog: kodkod.ast.Formula[] translated>;

        return $r1;
    }
}
