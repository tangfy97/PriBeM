abstract class com.mycila.inject.internal.guava.collect.Multimaps$Keys extends com.mycila.inject.internal.guava.collect.AbstractMultiset
{
    private java.util.Set entrySet;

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: void <init>()>();

        return;
    }

    abstract com.mycila.inject.internal.guava.collect.Multimap multimap();

    public java.util.Set entrySet()
    {
        java.util.Set $r1, $r2;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: java.util.Set createEntrySet()>();

        r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: java.util.Set entrySet> = $r2;

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: java.util.Set entrySet>;

     label2:
        return $r2;
    }

    java.util.Iterator entryIterator()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Keys$1 $r5;
        java.util.Iterator $r4;
        java.util.Map $r2;
        java.util.Set $r3;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = new com.mycila.inject.internal.guava.collect.Multimaps$Keys$1;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.Multimaps$Keys$1: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$Keys,java.util.Iterator)>(r0, $r4);

        return $r5;
    }

    int distinctElements()
    {
        java.util.Map $r2;
        int $i0;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    java.util.Set createEntrySet()
    {
        com.mycila.inject.internal.guava.collect.Multimaps$Keys$KeysEntrySet $r0;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r0 = new com.mycila.inject.internal.guava.collect.Multimaps$Keys$KeysEntrySet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys$KeysEntrySet: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$Keys)>(r1);

        return $r0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: boolean containsKey(java.lang.Object)>(r2);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r3, $r5;
        java.util.Collection $r2;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys$2 $r4;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Collection entries()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = new com.mycila.inject.internal.guava.collect.Multimaps$Keys$2;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Multimaps$Keys$2: void <init>(com.mycila.inject.internal.guava.collect.Multimaps$Keys)>(r0);

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: java.util.Iterator transform(java.util.Iterator,com.mycila.inject.internal.guava.base.Function)>($r3, $r4);

        return $r5;
    }

    public int count(java.lang.Object)
    {
        java.util.Collection r8;
        com.mycila.inject.internal.guava.collect.Multimap $r1, $r3;
        java.lang.ClassCastException $r7;
        java.lang.NullPointerException $r6;
        java.util.Map $r4;
        int $i0;
        java.lang.Object r2, $r5;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        r2 := @parameter0: java.lang.Object;

     label1:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r4 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (java.util.Collection) $r5;

        if r8 != null goto label2;

        $i0 = 0;

        goto label3;

     label2:
        $i0 = interfaceinvoke r8.<java.util.Collection: int size()>();

     label3:
        return $i0;

     label4:
        return 0;

     label5:
        $r7 := @caughtexception;

        return 0;

     label6:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label3 with label5;
        catch java.lang.NullPointerException from label1 to label3 with label6;
    }

    public int remove(java.lang.Object, int)
    {
        java.util.Iterator $r6;
        java.util.Collection r5;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        java.lang.ClassCastException $r8;
        java.lang.NullPointerException $r7;
        java.util.Map $r2;
        int i0, $i1, $i2, i3;
        java.lang.Object r3, $r4;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        if i0 != 0 goto label03;

        $i2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: int count(java.lang.Object)>(r3);

        return $i2;

     label03:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (java.util.Collection) $r4;

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

        return 0;

     label06:
        $r7 := @caughtexception;

        return 0;

     label07:
        if r5 != null goto label08;

        return 0;

     label08:
        $i1 = interfaceinvoke r5.<java.util.Collection: int size()>();

        if i0 < $i1 goto label09;

        interfaceinvoke r5.<java.util.Collection: void clear()>();

        goto label11;

     label09:
        $r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>();

        i3 = 0;

     label10:
        if i3 >= i0 goto label11;

        interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r6.<java.util.Iterator: void remove()>();

        i3 = i3 + 1;

        goto label10;

     label11:
        return $i1;

        catch java.lang.ClassCastException from label03 to label04 with label05;
        catch java.lang.NullPointerException from label03 to label04 with label06;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: void clear()>();

        return;
    }

    public java.util.Set elementSet()
    {
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Multimap $r1;
        com.mycila.inject.internal.guava.collect.Multimaps$Keys r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Multimaps$Keys;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Multimaps$Keys: com.mycila.inject.internal.guava.collect.Multimap multimap()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Set keySet()>();

        return $r2;
    }
}
