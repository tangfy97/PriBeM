public class org.apache.batik.ext.awt.geom.Polygon2D extends java.lang.Object implements java.awt.Shape, java.lang.Cloneable, java.io.Serializable
{
    public int npoints;
    public float[] xpoints;
    public float[] ypoints;
    protected java.awt.geom.Rectangle2D bounds;
    private java.awt.geom.GeneralPath path;
    private java.awt.geom.GeneralPath closedPath;

    public void <init>()
    {
        float[] $r1, $r2;
        org.apache.batik.ext.awt.geom.Polygon2D r0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (float)[4];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints> = $r1;

        $r2 = newarray (float)[4];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints> = $r2;

        return;
    }

    public void <init>(java.awt.geom.Rectangle2D)
    {
        java.lang.IndexOutOfBoundsException $r12;
        java.awt.geom.Rectangle2D r1;
        float[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r12 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("null Rectangle");

        throw $r12;

     label1:
        r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints> = 4;

        $r2 = newarray (float)[4];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints> = $r2;

        $r3 = newarray (float)[4];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints> = $r3;

        $r4 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $d0 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMinX()>();

        $f0 = (float) $d0;

        $r4[0] = $f0;

        $r5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $d1 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMinY()>();

        $f1 = (float) $d1;

        $r5[0] = $f1;

        $r6 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $d2 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMaxX()>();

        $f2 = (float) $d2;

        $r6[1] = $f2;

        $r7 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $d3 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMinY()>();

        $f3 = (float) $d3;

        $r7[1] = $f3;

        $r8 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $d4 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMaxX()>();

        $f4 = (float) $d4;

        $r8[2] = $f4;

        $r9 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $d5 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMaxY()>();

        $f5 = (float) $d5;

        $r9[2] = $f5;

        $r10 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $d6 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMinX()>();

        $f6 = (float) $d6;

        $r10[3] = $f6;

        $r11 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $d7 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getMaxY()>();

        $f7 = (float) $d7;

        $r11[3] = $f7;

        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void calculatePath()>();

        return;
    }

    public void <init>(java.awt.Polygon)
    {
        java.awt.Polygon r1;
        java.lang.IndexOutOfBoundsException $r8;
        float[] $r2, $r3, $r5, $r7;
        int[] $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        float $f0, $f1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.Polygon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("null Polygon");

        throw $r8;

     label1:
        $i0 = r1.<java.awt.Polygon: int npoints>;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints> = $i0;

        $i1 = r1.<java.awt.Polygon: int npoints>;

        $r2 = newarray (float)[$i1];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints> = $r2;

        $i2 = r1.<java.awt.Polygon: int npoints>;

        $r3 = newarray (float)[$i2];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints> = $r3;

        i6 = 0;

        goto label3;

     label2:
        $r5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $r4 = r1.<java.awt.Polygon: int[] xpoints>;

        $i4 = $r4[i6];

        $f0 = (float) $i4;

        $r5[i6] = $f0;

        $r7 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $r6 = r1.<java.awt.Polygon: int[] ypoints>;

        $i5 = $r6[i6];

        $f1 = (float) $i5;

        $r7[i6] = $f1;

        i6 = i6 + 1;

     label3:
        $i3 = r1.<java.awt.Polygon: int npoints>;

        if i6 < $i3 goto label2;

        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void calculatePath()>();

        return;
    }

    public void <init>(float[], float[], int)
    {
        java.lang.IndexOutOfBoundsException $r2;
        float[] r1, r3, $r4, $r5, $r6, $r7;
        int i0, $i1, $i2;
        org.apache.batik.ext.awt.geom.Polygon2D r0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: float[];

        r3 := @parameter1: float[];

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r1;

        if i0 > $i1 goto label1;

        $i2 = lengthof r3;

        if i0 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("npoints > xpoints.length || npoints > ypoints.length");

        throw $r2;

     label2:
        r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints> = i0;

        $r4 = newarray (float)[i0];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints> = $r4;

        $r5 = newarray (float)[i0];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints> = $r5;

        $r6 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r6, 0, i0);

        $r7 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r7, 0, i0);

        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void calculatePath()>();

        return;
    }

    public void <init>(int[], int[], int)
    {
        java.lang.IndexOutOfBoundsException $r2;
        float[] $r4, $r5, $r6, $r7;
        int[] r1, r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        float $f0, $f1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: int[];

        r3 := @parameter1: int[];

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r1;

        if i0 > $i1 goto label1;

        $i2 = lengthof r3;

        if i0 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("npoints > xpoints.length || npoints > ypoints.length");

        throw $r2;

     label2:
        r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints> = i0;

        $r4 = newarray (float)[i0];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints> = $r4;

        $r5 = newarray (float)[i0];

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints> = $r5;

        i5 = 0;

        goto label4;

     label3:
        $r6 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $i3 = r1[i5];

        $f0 = (float) $i3;

        $r6[i5] = $f0;

        $r7 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $i4 = r3[i5];

        $f1 = (float) $i4;

        $r7[i5] = $f1;

        i5 = i5 + 1;

     label4:
        if i5 < i0 goto label3;

        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void calculatePath()>();

        return;
    }

    public void reset()
    {
        java.awt.geom.GeneralPath $r1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints> = 0;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds> = null;

        $r1 = new java.awt.geom.GeneralPath;

        specialinvoke $r1.<java.awt.geom.GeneralPath: void <init>()>();

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path> = $r1;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath> = null;

        return;
    }

    public java.lang.Object clone()
    {
        float[] $r2, $r3;
        int $i0, i1;
        float $f0, $f1;
        org.apache.batik.ext.awt.geom.Polygon2D $r0, r1;

        r1 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $r0 = new org.apache.batik.ext.awt.geom.Polygon2D;

        specialinvoke $r0.<org.apache.batik.ext.awt.geom.Polygon2D: void <init>()>();

        i1 = 0;

        goto label2;

     label1:
        $r2 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $f1 = $r2[i1];

        $r3 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $f0 = $r3[i1];

        virtualinvoke $r0.<org.apache.batik.ext.awt.geom.Polygon2D: void addPoint(float,float)>($f1, $f0);

        i1 = i1 + 1;

     label2:
        $i0 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if i1 < $i0 goto label1;

        return $r0;
    }

    private void calculatePath()
    {
        java.awt.geom.Rectangle2D $r9;
        float[] $r2, $r3, $r5, $r6;
        int $i0, i1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.GeneralPath $r1, $r4, $r7, $r8;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $r1 = new java.awt.geom.GeneralPath;

        specialinvoke $r1.<java.awt.geom.GeneralPath: void <init>()>();

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path> = $r1;

        $r4 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $f1 = $r2[0];

        $r3 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $f0 = $r3[0];

        virtualinvoke $r4.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f1, $f0);

        i1 = 1;

        goto label2;

     label1:
        $r7 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        $r5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $f3 = $r5[i1];

        $r6 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $f2 = $r6[i1];

        virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f3, $f2);

        i1 = i1 + 1;

     label2:
        $i0 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if i1 < $i0 goto label1;

        $r8 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        $r9 = virtualinvoke $r8.<java.awt.geom.GeneralPath: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds> = $r9;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath> = null;

        return;
    }

    private void updatePath(float, float)
    {
        java.awt.geom.Rectangle2D $r3, $r4, $r5, $r6;
        java.awt.geom.Rectangle2D$Float $r12, $r13;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1, $d2, $d3;
        float f0, f1, f2, f3, f4, f5, $f6, $f7;
        java.awt.geom.GeneralPath $r1, $r2, $r8, $r11;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath> = null;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        if $r1 != null goto label1;

        $r11 = new java.awt.geom.GeneralPath;

        specialinvoke $r11.<java.awt.geom.GeneralPath: void <init>(int)>(0);

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path> = $r11;

        $r8 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        virtualinvoke $r8.<java.awt.geom.GeneralPath: void moveTo(float,float)>(f0, f1);

        $r12 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r12.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(f0, f1, 0.0F, 0.0F);

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds> = $r12;

        goto label6;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f0, f1);

        $r3 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $d0 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getMaxX()>();

        f2 = (float) $d0;

        $r4 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $d1 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getMaxY()>();

        f3 = (float) $d1;

        $r5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $d2 = virtualinvoke $r5.<java.awt.geom.RectangularShape: double getMinX()>();

        f4 = (float) $d2;

        $r6 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $d3 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getMinY()>();

        f5 = (float) $d3;

        $b0 = f0 cmpg f4;

        $i4 = (int) $b0;

        if $i4 >= 0 goto label2;

        f4 = f0;

        goto label3;

     label2:
        $b1 = f0 cmpl f2;

        $i5 = (int) $b1;

        if $i5 <= 0 goto label3;

        f2 = f0;

     label3:
        $b3 = f1 cmpg f5;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label4;

        f5 = f1;

        goto label5;

     label4:
        $b2 = f1 cmpl f3;

        $i7 = (int) $b2;

        if $i7 <= 0 goto label5;

        f3 = f1;

     label5:
        $r13 = new java.awt.geom.Rectangle2D$Float;

        $f6 = f2 - f4;

        $f7 = f3 - f5;

        specialinvoke $r13.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(f4, f5, $f6, $f7);

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds> = $r13;

     label6:
        return;
    }

    public org.apache.batik.ext.awt.geom.Polyline2D getPolyline2D()
    {
        float[] $r2, $r3, $r4, $r5;
        org.apache.batik.ext.awt.geom.Polyline2D $r0;
        int $i0;
        float $f0, $f1;
        org.apache.batik.ext.awt.geom.Polygon2D r1;

        r1 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $r0 = new org.apache.batik.ext.awt.geom.Polyline2D;

        $r3 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $r2 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $i0 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        specialinvoke $r0.<org.apache.batik.ext.awt.geom.Polyline2D: void <init>(float[],float[],int)>($r3, $r2, $i0);

        $r4 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $f1 = $r4[0];

        $r5 = r1.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $f0 = $r5[0];

        virtualinvoke $r0.<org.apache.batik.ext.awt.geom.Polyline2D: void addPoint(float,float)>($f1, $f0);

        return $r0;
    }

    public java.awt.Polygon getPolygon()
    {
        java.awt.Polygon $r5;
        float[] $r3, $r4;
        int[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        float $f0, $f1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $i0 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        r1 = newarray (int)[$i0];

        $i1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        r2 = newarray (int)[$i1];

        i6 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $f0 = $r3[i6];

        $i3 = (int) $f0;

        r1[i6] = $i3;

        $r4 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $f1 = $r4[i6];

        $i4 = (int) $f1;

        r2[i6] = $i4;

        i6 = i6 + 1;

     label2:
        $i2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if i6 < $i2 goto label1;

        $r5 = new java.awt.Polygon;

        $i5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        specialinvoke $r5.<java.awt.Polygon: void <init>(int[],int[],int)>(r1, r2, $i5);

        return $r5;
    }

    public void addPoint(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r1;
        float $f0, $f1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void addPoint(float,float)>($f0, $f1);

        return;
    }

    public void addPoint(float, float)
    {
        float[] $r1, $r2, $r3, $r4, $r5, r6, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        float f0, f1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $i1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $i6 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        $i7 = $i6 * 2;

        r6 = newarray (float)[$i7];

        $r4 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $i8 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r6, 0, $i8);

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints> = r6;

        $i9 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        $i10 = $i9 * 2;

        r7 = newarray (float)[$i10];

        $r5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $i11 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r7, 0, $i11);

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints> = r7;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] xpoints>;

        $i2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        $r2[$i2] = f0;

        $r3 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: float[] ypoints>;

        $i3 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        $r3[$i3] = f1;

        $i4 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        $i5 = $i4 + 1;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints> = $i5;

        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void updatePath(float,float)>(f0, f1);

        return;
    }

    public boolean contains(java.awt.Point)
    {
        int $i0, $i1;
        java.awt.Point r1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.Point;

        $i1 = r1.<java.awt.Point: int x>;

        $i0 = r1.<java.awt.Point: int y>;

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: boolean contains(int,int)>($i1, $i0);

        return $z0;
    }

    public boolean contains(int, int)
    {
        int i0, i1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $d1 = (double) i0;

        $d0 = (double) i1;

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: boolean contains(double,double)>($d1, $d0);

        return $z0;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        java.awt.geom.Rectangle2D $r1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        return $r1;
    }

    public java.awt.Rectangle getBounds()
    {
        java.awt.Rectangle $r3;
        java.awt.geom.Rectangle2D $r1, $r2;
        org.apache.batik.ext.awt.geom.Polygon2D r0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $r3 = virtualinvoke $r2.<java.awt.geom.RectangularShape: java.awt.Rectangle getBounds()>();

        return $r3;
    }

    public boolean contains(double, double)
    {
        java.awt.geom.Rectangle2D $r1;
        int $i0;
        java.awt.geom.GeneralPath $r2;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double d0, d1;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $i0 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if $i0 <= 2 goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $z0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: boolean contains(double,double)>(d0, d1);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void updateComputingPath()>();

        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        $z1 = virtualinvoke $r2.<java.awt.geom.GeneralPath: boolean contains(double,double)>(d0, d1);

        return $z1;
    }

    private void updateComputingPath()
    {
        int $i0;
        java.lang.Object $r3;
        java.awt.geom.GeneralPath $r1, $r2, $r4, $r5;
        org.apache.batik.ext.awt.geom.Polygon2D r0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        $i0 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if $i0 < 1 goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath path>;

        $r3 = virtualinvoke $r2.<java.awt.geom.GeneralPath: java.lang.Object clone()>();

        $r4 = (java.awt.geom.GeneralPath) $r3;

        r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath> = $r4;

        $r5 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        virtualinvoke $r5.<java.awt.geom.GeneralPath: void closePath()>();

     label1:
        return;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: boolean contains(double,double)>($d0, $d1);

        return $z0;
    }

    public boolean intersects(double, double, double, double)
    {
        java.awt.geom.Rectangle2D $r1;
        int $i0;
        java.awt.geom.GeneralPath $r2;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double d0, d1, d2, d3;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $i0 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $z0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: boolean intersects(double,double,double,double)>(d0, d1, d2, d3);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void updateComputingPath()>();

        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        $z1 = virtualinvoke $r2.<java.awt.geom.GeneralPath: boolean intersects(double,double,double,double)>(d0, d1, d2, d3);

        return $z1;
    }

    public boolean intersects(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D r1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        $d0 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getY()>();

        $d2 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d3 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: boolean intersects(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $z0;
    }

    public boolean contains(double, double, double, double)
    {
        java.awt.geom.Rectangle2D $r1;
        int $i0;
        java.awt.geom.GeneralPath $r2;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double d0, d1, d2, d3;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $i0 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: int npoints>;

        if $i0 <= 0 goto label1;

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.Rectangle2D bounds>;

        $z0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: boolean intersects(double,double,double,double)>(d0, d1, d2, d3);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void updateComputingPath()>();

        $r2 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        $z1 = virtualinvoke $r2.<java.awt.geom.GeneralPath: boolean contains(double,double,double,double)>(d0, d1, d2, d3);

        return $z1;
    }

    public boolean contains(java.awt.geom.Rectangle2D)
    {
        java.awt.geom.Rectangle2D r1;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        double $d0, $d1, $d2, $d3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        $d0 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getY()>();

        $d2 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $d3 = virtualinvoke r1.<java.awt.geom.RectangularShape: double getHeight()>();

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: boolean contains(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $z0;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)
    {
        java.awt.geom.GeneralPath $r1, $r3;
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        java.awt.geom.AffineTransform r2;
        java.awt.geom.PathIterator $r4;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        specialinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: void updateComputingPath()>();

        $r1 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.GeneralPath closedPath>;

        $r4 = virtualinvoke $r3.<java.awt.geom.GeneralPath: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(r2);

        return $r4;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform, double)
    {
        org.apache.batik.ext.awt.geom.Polygon2D r0;
        java.awt.geom.AffineTransform r1;
        java.awt.geom.PathIterator $r2;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.geom.Polygon2D;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        d0 := @parameter1: double;

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.geom.Polygon2D: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(r1);

        return $r2;
    }
}
