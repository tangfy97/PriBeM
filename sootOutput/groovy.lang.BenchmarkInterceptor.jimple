public class groovy.lang.BenchmarkInterceptor extends java.lang.Object implements groovy.lang.Interceptor
{
    protected java.util.Map calls;

    public void <init>()
    {
        groovy.lang.BenchmarkInterceptor r0;
        java.util.HashMap $r1;

        r0 := @this: groovy.lang.BenchmarkInterceptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls> = $r1;

        return;
    }

    public java.util.Map getCalls()
    {
        groovy.lang.BenchmarkInterceptor r0;
        java.util.Map $r1;

        r0 := @this: groovy.lang.BenchmarkInterceptor;

        $r1 = r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        return $r1;
    }

    public void reset()
    {
        groovy.lang.BenchmarkInterceptor r0;
        java.util.HashMap $r1;

        r0 := @this: groovy.lang.BenchmarkInterceptor;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls> = $r1;

        return;
    }

    public java.lang.Object beforeInvoke(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r10;
        long $l0;
        groovy.lang.BenchmarkInterceptor r0;
        java.util.List $r6;
        java.lang.Long $r5;
        java.util.Map $r2, $r3, $r8;
        java.lang.Object $r4, r9;
        java.lang.String r1;
        java.util.LinkedList $r7;
        boolean $z0;

        r0 := @this: groovy.lang.BenchmarkInterceptor;

        r9 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.Object[];

        $r2 = r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

     label1:
        $r3 = r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (java.util.List) $r4;

        $r5 = new java.lang.Long;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r5.<java.lang.Long: void <init>(long)>($l0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        return null;
    }

    public java.lang.Object afterInvoke(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r8;
        long $l0;
        groovy.lang.BenchmarkInterceptor r0;
        java.util.List $r5;
        java.lang.Long $r4;
        java.util.Map $r2;
        java.lang.Object $r3, r6, r7;
        java.lang.String r1;

        r0 := @this: groovy.lang.BenchmarkInterceptor;

        r7 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.Object[];

        r6 := @parameter3: java.lang.Object;

        $r2 = r0.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.util.List) $r3;

        $r4 = new java.lang.Long;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r4.<java.lang.Long: void <init>(long)>($l0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        return r6;
    }

    public boolean doInvoke()
    {
        groovy.lang.BenchmarkInterceptor r0;

        r0 := @this: groovy.lang.BenchmarkInterceptor;

        return 1;
    }

    public java.util.List statistic()
    {
        java.lang.Object[] r5;
        long $l2, $l3, $l4, $l5, $l6, $l7;
        java.lang.Integer $r11;
        java.lang.Long $r13, r15, r17;
        java.util.Map $r2, $r8;
        int $i0, $i1, i8;
        java.util.LinkedList $r0;
        boolean $z0, $z1;
        java.util.Iterator $r4, $r12;
        java.util.Set $r3;
        groovy.lang.BenchmarkInterceptor r1;
        java.util.List r10;
        java.lang.Object $r6, $r7, $r9, $r14, $r16;

        r1 := @this: groovy.lang.BenchmarkInterceptor;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = r1.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r5 = newarray (java.lang.Object)[3];

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5);

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r5[0] = $r6;

        $r8 = r1.<groovy.lang.BenchmarkInterceptor: java.util.Map calls>;

        $r7 = r5[0];

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r10 = (java.util.List) $r9;

        $r11 = new java.lang.Integer;

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        $i1 = $i0 / 2;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i1);

        r5[1] = $r11;

        i8 = 0;

        $r12 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r14 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.Long) $r14;

        $r16 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.Long) $r16;

        $l3 = (long) i8;

        $l4 = virtualinvoke r17.<java.lang.Long: long longValue()>();

        $l5 = virtualinvoke r15.<java.lang.Long: long longValue()>();

        $l6 = $l4 - $l5;

        $l7 = $l3 + $l6;

        i8 = (int) $l7;

        goto label2;

     label3:
        $r13 = new java.lang.Long;

        $l2 = (long) i8;

        specialinvoke $r13.<java.lang.Long: void <init>(long)>($l2);

        r5[2] = $r13;

        goto label1;

     label4:
        return $r0;
    }
}
