public class com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor extends com.google.gxp.compiler.base.DefaultingExpressionVisitor implements com.google.gxp.compiler.base.CallVisitor
{
    final com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0;

    protected void <init>(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker;

        r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0> = r1;

        specialinvoke r0.<com.google.gxp.compiler.base.DefaultingExpressionVisitor: void <init>()>();

        return;
    }

    public java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.Expression r1;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitAttrBundleReference(com.google.gxp.compiler.base.AttrBundleReference)
    {
        com.google.gxp.compiler.base.AttrBundleReference r0;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;
        java.lang.String $r1;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.AttrBundleReference;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.AttrBundleReference: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;
        com.google.gxp.compiler.base.Expression $r4;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r3, $r6;
        com.google.gxp.compiler.schema.Schema $r7;
        java.lang.StringBuilder $r0;
        java.lang.String $r5, $r8, $r9;
        com.google.gxp.compiler.base.EscapeExpression r2;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke r2.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.base.Expression getSubexpression()>();

        $r5 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1600(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.base.Expression)>($r3, $r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r7 = virtualinvoke r2.<com.google.gxp.compiler.base.EscapeExpression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r8 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.schema.Schema)>($r6, $r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(new goog.string.StringBuffer(), ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_context");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").toString()");

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.ExtractedMessage r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        java.lang.String $r3;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r3 = virtualinvoke $r2.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getEscapedString(com.google.gxp.compiler.base.Expression)>(r1);

        return $r3;
    }

    public java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r2;
        com.google.gxp.compiler.base.NativeExpression r5;
        com.google.gxp.compiler.base.OutputLanguage $r3;
        com.google.gxp.compiler.alerts.AlertSink $r4;
        java.lang.StringBuilder $r0;
        java.lang.String $r6, $r7;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r5 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r3 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage JAVASCRIPT>;

        $r2 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink access$3800(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker)>($r2);

        $r6 = virtualinvoke $r3.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String validateExpression(com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.NativeExpression)>($r4, r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String visitCall(com.google.gxp.compiler.base.Call)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        com.google.gxp.compiler.base.Call r0;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r0 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Call: java.lang.Object acceptCallVisitor(com.google.gxp.compiler.base.CallVisitor)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r2;
        com.google.gxp.compiler.base.UnexpectedNodeException $r0;
        com.google.gxp.compiler.base.UnboundCall r1;

        r2 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r0 = new com.google.gxp.compiler.base.UnexpectedNodeException;

        specialinvoke $r0.<com.google.gxp.compiler.base.UnexpectedNodeException: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        throw $r0;
    }

    public java.lang.String visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker $r3, $r5;
        com.google.gxp.compiler.schema.Schema $r6;
        java.lang.StringBuilder $r0;
        com.google.gxp.compiler.base.ValidatedCall r2;
        java.lang.String $r4, $r7, $r8;

        r1 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r2 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("gxp_context");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".getString(");

        $r3 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String getJavaScriptExpression(com.google.gxp.compiler.base.Expression)>(r2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = r1.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker this$0>;

        $r6 = virtualinvoke r2.<com.google.gxp.compiler.base.ValidatedCall: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r7 = staticinvoke <com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker: java.lang.String access$1700(com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker,com.google.gxp.compiler.schema.Schema)>($r5, $r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public volatile java.lang.Object visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.NativeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.NativeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitNativeExpression(com.google.gxp.compiler.base.NativeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.ExtractedMessage r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ExtractedMessage;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitExtractedMessage(com.google.gxp.compiler.base.ExtractedMessage)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.EscapeExpression r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.EscapeExpression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitEscapeExpression(com.google.gxp.compiler.base.EscapeExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitCall(com.google.gxp.compiler.base.Call)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        java.lang.String $r2;
        com.google.gxp.compiler.base.Call r1;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Call;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitCall(com.google.gxp.compiler.base.Call)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitAttrBundleReference(com.google.gxp.compiler.base.AttrBundleReference)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.AttrBundleReference r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.AttrBundleReference;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitAttrBundleReference(com.google.gxp.compiler.base.AttrBundleReference)>(r1);

        return $r2;
    }

    public volatile java.lang.Object defaultVisitExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.Expression r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String defaultVisitExpression(com.google.gxp.compiler.base.Expression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.ValidatedCall r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.ValidatedCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitValidatedCall(com.google.gxp.compiler.base.ValidatedCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitBoundCall(com.google.gxp.compiler.base.BoundCall)
    {
        com.google.gxp.compiler.base.BoundCall r1;
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.BoundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitBoundCall(com.google.gxp.compiler.base.BoundCall)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)
    {
        com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor r0;
        com.google.gxp.compiler.base.UnboundCall r1;
        java.lang.String $r2;

        r0 := @this: com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        r1 := @parameter0: com.google.gxp.compiler.base.UnboundCall;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.js.JavaScriptCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: java.lang.String visitUnboundCall(com.google.gxp.compiler.base.UnboundCall)>(r1);

        return $r2;
    }
}
