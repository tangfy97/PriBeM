public class com.hp.hpl.jena.sparql.expr.E_Regex extends com.hp.hpl.jena.sparql.expr.ExprFunctionN
{
    private static com.hp.hpl.jena.sparql.util.Symbol regexImpl;
    private static final java.lang.String name;
    private com.hp.hpl.jena.sparql.expr.RegexEngine regexEngine;

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r2, r3, r4;
        com.hp.hpl.jena.sparql.expr.E_Regex r0;
        com.hp.hpl.jena.sparql.expr.Expr[] $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Regex;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r4 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        $r1 = newarray (com.hp.hpl.jena.sparql.expr.Expr)[3];

        $r1[0] = r2;

        $r1[1] = r3;

        $r1[2] = r4;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.Expr[])>("regex", $r1);

        r0.<com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine regexEngine> = null;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_Regex: void init(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>(r3, r4);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr, java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r4, $r6;
        com.hp.hpl.jena.sparql.expr.Expr[] $r1;
        com.hp.hpl.jena.sparql.expr.Expr r2, $r7, $r8;
        com.hp.hpl.jena.sparql.expr.E_Regex r0;
        java.lang.String r3, r5;

        r0 := @this: com.hp.hpl.jena.sparql.expr.E_Regex;

        r2 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r3 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r1 = newarray (com.hp.hpl.jena.sparql.expr.Expr)[3];

        $r1[0] = r2;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>(r3);

        $r1[1] = $r4;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeString(java.lang.String)>(r5);

        $r1[2] = $r6;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.Expr[])>("regex", $r1);

        r0.<com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine regexEngine> = null;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.Expr getArg(int)>(2);

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.Expr getArg(int)>(3);

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.E_Regex: void init(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r7, $r8);

        return;
    }

    private void init(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1, $r4, $r6;
        com.hp.hpl.jena.sparql.expr.RegexEngine $r5;
        com.hp.hpl.jena.sparql.expr.Expr r0, r2;
        com.hp.hpl.jena.sparql.expr.E_Regex r3;
        boolean $z0, $z1, $z2;

        r3 := @this: com.hp.hpl.jena.sparql.expr.E_Regex;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $z0 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z1 == 0 goto label4;

        if r2 == null goto label1;

        $z2 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.expr.Expr: boolean isConstant()>();

        if $z2 == 0 goto label4;

     label1:
        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

        if r2 != null goto label2;

        $r6 = null;

        goto label3;

     label2:
        $r6 = interfaceinvoke r2.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue getConstant()>();

     label3:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine makeRegexEngine(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>($r4, $r6);

        r3.<com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine regexEngine> = $r5;

     label4:
        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r2, r5, $r10, $r12;
        com.hp.hpl.jena.graph.Node $r3;
        java.util.List r0;
        com.hp.hpl.jena.sparql.expr.RegexEngine $r9, r11;
        com.hp.hpl.jena.sparql.expr.E_Regex r7;
        int $i0;
        java.lang.Object $r1, $r4, $r6;
        java.lang.String $r8;
        boolean $z0;

        r7 := @this: com.hp.hpl.jena.sparql.expr.E_Regex;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r1;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: com.hp.hpl.jena.graph.Node checkAndGetStringLiteral(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue)>("REGEX", $r2);

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1);

        r5 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r4;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        $r10 = null;

        goto label2;

     label1:
        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(2);

        $r10 = (com.hp.hpl.jena.sparql.expr.NodeValue) $r6;

     label2:
        $r9 = r7.<com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine regexEngine>;

        r11 = $r9;

        if $r9 != null goto label3;

        r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine makeRegexEngine(com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.sparql.expr.NodeValue)>(r5, $r10);

     label3:
        $r8 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        $z0 = interfaceinvoke r11.<com.hp.hpl.jena.sparql.expr.RegexEngine: boolean match(java.lang.String)>($r8);

        if $z0 == 0 goto label4;

        $r12 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        goto label5;

     label4:
        $r12 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue FALSE>;

     label5:
        return $r12;
    }

    public static com.hp.hpl.jena.sparql.expr.RegexEngine makeRegexEngine(com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, r1;
        com.hp.hpl.jena.sparql.expr.RegexEngine $r3;
        java.lang.String $r2, $r8, $r13, $r14;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        com.hp.hpl.jena.sparql.expr.ExprException $r4, $r9;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z0 != 0 goto label1;

        $r9 = new com.hp.hpl.jena.sparql.expr.ExprException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REGEX: Pattern is not a string: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.expr.ExprException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isString()>();

        if $z1 != 0 goto label2;

        $r4 = new com.hp.hpl.jena.sparql.expr.ExprException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REGEX: Pattern flags are not a string: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.expr.ExprException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        if r1 != null goto label3;

        $r14 = null;

        goto label4;

     label3:
        $r14 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

     label4:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String getString()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.expr.RegexEngine makeRegexEngine(java.lang.String,java.lang.String)>($r2, $r14);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.RegexEngine makeRegexEngine(java.lang.String, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.RegexJava $r2;
        java.lang.String r3, r4;
        com.hp.hpl.jena.sparql.util.Symbol $r0, $r1;
        boolean $z0;
        com.hp.hpl.jena.sparql.expr.RegexXerces $r5;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        $r0 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol xercesRegex>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Symbol: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.expr.RegexXerces;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.RegexXerces: void <init>(java.lang.String,java.lang.String)>(r3, r4);

        return $r5;

     label1:
        $r2 = new com.hp.hpl.jena.sparql.expr.RegexJava;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.RegexJava: void <init>(java.lang.String,java.lang.String)>(r3, r4);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3, $r4, $r6, $r7;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        com.hp.hpl.jena.sparql.expr.E_Regex $r1, $r5, r8;
        int $i0;

        r8 := @this: com.hp.hpl.jena.sparql.expr.E_Regex;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if $i0 != 2 goto label1;

        $r5 = new com.hp.hpl.jena.sparql.expr.E_Regex;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(1);

        specialinvoke $r5.<com.hp.hpl.jena.sparql.expr.E_Regex: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r6, $r7, null);

        return $r5;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.expr.E_Regex;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(0);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(1);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(2);

        specialinvoke $r1.<com.hp.hpl.jena.sparql.expr.E_Regex: void <init>(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.expr.Expr)>($r2, $r3, $r4);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.String $r11;
        com.hp.hpl.jena.sparql.util.Symbol $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.util.Context $r0;
        java.lang.Object $r3;

        <com.hp.hpl.jena.sparql.expr.E_Regex: java.lang.String name> = "regex";

        <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl> = null;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r2 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        $r1 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol javaRegex>;

        $r3 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: java.lang.Object get(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r2, $r1);

        $z0 = $r3 instanceof com.hp.hpl.jena.sparql.util.Symbol;

        if $z0 == 0 goto label1;

        $r13 = (com.hp.hpl.jena.sparql.util.Symbol) $r3;

        <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl> = $r13;

     label1:
        $z1 = $r3 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $r11 = (java.lang.String) $r3;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.util.Symbol: com.hp.hpl.jena.sparql.util.Symbol create(java.lang.String)>($r11);

        <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl> = $r12;

     label2:
        $r4 = <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        if $r4 != null goto label3;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/E_Regex;", "Regex implementation some weird setting: default to Java");

        $r10 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol javaRegex>;

        <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl> = $r10;

     label3:
        $r6 = <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        $r5 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol javaRegex>;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.util.Symbol: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label4;

        $r8 = <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl>;

        $r7 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol xercesRegex>;

        $z3 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.util.Symbol: boolean equals(java.lang.Object)>($r7);

        if $z3 != 0 goto label4;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/sparql/expr/E_Regex;", "Regex implementation not recognized : default to Java");

        $r9 = <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Symbol javaRegex>;

        <com.hp.hpl.jena.sparql.expr.E_Regex: com.hp.hpl.jena.sparql.util.Symbol regexImpl> = $r9;

     label4:
        return;
    }
}
