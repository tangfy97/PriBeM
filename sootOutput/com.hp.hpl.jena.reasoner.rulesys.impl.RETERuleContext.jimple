public class com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.RuleContext
{
    protected com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment env;
    protected com.hp.hpl.jena.reasoner.rulesys.Rule rule;
    protected com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine engine;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI, com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine r2;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph> = r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine engine> = r2;

        return;
    }

    public com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment env>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.InfGraph getGraph()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine getEngine()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine engine>;

        return $r1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Rule getRule()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        return $r1;
    }

    public void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule> = r1;

        return;
    }

    public void setEnv(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment env> = r1;

        return;
    }

    public boolean contains(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4;
        com.hp.hpl.jena.graph.Triple r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: boolean contains(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4);

        return $z0;
    }

    public boolean contains(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.util.iterator.ClosableIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        interfaceinvoke $r4.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ClosableIterator find(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r4;
        com.hp.hpl.jena.graph.Node r1, r2, r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r5;
    }

    public void silentAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.SilentAddI: void silentAdd(com.hp.hpl.jena.graph.Triple)>(r1);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine $r4;
        com.hp.hpl.jena.graph.Graph $r2;
        com.hp.hpl.jena.graph.Triple r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI graph>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r3);

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine engine>;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void deleteTriple(com.hp.hpl.jena.graph.Triple,boolean)>(r3, 1);

        return;
    }

    public void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine $r2;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine engine>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void addTriple(com.hp.hpl.jena.graph.Triple,boolean)>(r1, 1);

        return;
    }

    public boolean shouldFire(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1, $r2;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r3;
        int $i0, i1;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r4, $r5;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        z1 := @parameter0: boolean;

        i1 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i1 >= $i0 goto label4;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i1);

        $z0 = $r3 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z0 == 0 goto label3;

        if z1 == 0 goto label2;

        $r5 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r3;

        $z3 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean evalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0);

        if $z3 != 0 goto label3;

        return 0;

     label2:
        $r4 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r3;

        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean safeEvalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 1;
    }

    public boolean shouldStillFire()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1, $r2;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r5;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r3;
        int $i0, i1;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext;

        i1 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i1 >= $i0 goto label3;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.RETERuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i1);

        $z0 = $r3 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z0 == 0 goto label2;

        $r4 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r3;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r5 == null goto label2;

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.Builtin: boolean isMonotonic()>();

        if $z1 != 0 goto label2;

        $r6 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r3;

        $z2 = virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean evalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }
}
