class com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker extends com.hp.hpl.jena.sparql.syntax.ElementVisitorBase
{

    private void <init>()
    {
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker r0;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker;

        specialinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementVisitorBase: void <init>()>();

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.syntax.ElementSubQuery)
    {
        com.hp.hpl.jena.query.Query $r1, $r2;
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker r3;
        com.hp.hpl.jena.sparql.syntax.ElementSubQuery r0;

        r3 := @this: com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementSubQuery;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementSubQuery: com.hp.hpl.jena.query.Query getQuery()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void access$100(com.hp.hpl.jena.query.Query)>($r1);

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.syntax.ElementSubQuery: com.hp.hpl.jena.query.Query getQuery()>();

        staticinvoke <com.hp.hpl.jena.sparql.lang.SyntaxVarScope: void check(com.hp.hpl.jena.query.Query)>($r2);

        return;
    }

    void <init>(com.hp.hpl.jena.sparql.lang.SyntaxVarScope$1)
    {
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker r0;
        com.hp.hpl.jena.sparql.lang.SyntaxVarScope$1 r1;

        r0 := @this: com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker;

        r1 := @parameter0: com.hp.hpl.jena.sparql.lang.SyntaxVarScope$1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.lang.SyntaxVarScope$SubQueryScopeChecker: void <init>()>();

        return;
    }
}
