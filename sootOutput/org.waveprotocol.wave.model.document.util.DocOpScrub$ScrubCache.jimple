public class org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber format;
    private final org.waveprotocol.wave.model.util.StringMap alreadyScrubbed;
    private final org.waveprotocol.wave.model.util.StringSet scrubbings;
    private int uniqueSuffix;

    public void <init>(org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber)
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache r0;
        org.waveprotocol.wave.model.util.StringSet $r2;
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber r3;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringMap alreadyScrubbed> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringSet scrubbings> = $r2;

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: int uniqueSuffix> = 0;

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber format> = r3;

        return;
    }

    java.lang.String scrubUniquely(java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache r0;
        org.waveprotocol.wave.model.util.StringSet $r5, $r7;
        org.waveprotocol.wave.model.util.StringMap $r2, $r6, $r12;
        org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber $r3;
        int $i0, $i1;
        java.lang.String r1, $r4, $r14, r15;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.Object $r13;

        r0 := @this: org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringMap alreadyScrubbed>;

        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r12 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringMap alreadyScrubbed>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r14 = (java.lang.String) $r13;

        return $r14;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber format>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.util.DocOpScrub$StringScrubber: java.lang.String scrub(java.lang.String)>(r1);

        r15 = $r4;

     label2:
        $r5 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringSet scrubbings>;

        $z1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>(r15);

        if $z1 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $i0 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: int uniqueSuffix>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: int uniqueSuffix> = $i1;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label3:
        $r6 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringMap alreadyScrubbed>;

        interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r1, r15);

        $r7 = r0.<org.waveprotocol.wave.model.document.util.DocOpScrub$ScrubCache: org.waveprotocol.wave.model.util.StringSet scrubbings>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r15);

        return r15;
    }
}
