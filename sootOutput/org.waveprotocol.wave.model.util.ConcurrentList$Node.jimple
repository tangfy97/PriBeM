final class org.waveprotocol.wave.model.util.ConcurrentList$Node extends java.lang.Object
{
    private boolean isDeleted;
    private org.waveprotocol.wave.model.util.ConcurrentList$Node prev;
    private org.waveprotocol.wave.model.util.ConcurrentList$Node next;
    private final java.lang.Object data;

    void <init>(org.waveprotocol.wave.model.util.ConcurrentList$Node, org.waveprotocol.wave.model.util.ConcurrentList$Node, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, r1, r2;
        java.lang.Object r3;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        r2 := @parameter1: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: boolean isDeleted> = 0;

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev> = r1;

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next> = r2;

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: java.lang.Object data> = r3;

        return;
    }

    org.waveprotocol.wave.model.util.ConcurrentList$Node prev()
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev>;

        return $r1;
    }

    org.waveprotocol.wave.model.util.ConcurrentList$Node next()
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next>;

        return $r1;
    }

    java.lang.Object data()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: java.lang.Object data>;

        return $r1;
    }

    boolean isDeleted()
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $z0 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: boolean isDeleted>;

        return $z0;
    }

    void remove()
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev>;

        if $r1 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev>;

        $r5 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next>;

        $r6.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next> = $r5;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next>;

        if $r2 == null goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next>;

        $r3 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev>;

        $r4.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev> = $r3;

     label2:
        r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: boolean isDeleted> = 1;

        return;
    }

    static org.waveprotocol.wave.model.util.ConcurrentList$Node access$200(org.waveprotocol.wave.model.util.ConcurrentList$Node)
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        $r1 = r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node next>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.ConcurrentList$Node access$302(org.waveprotocol.wave.model.util.ConcurrentList$Node, org.waveprotocol.wave.model.util.ConcurrentList$Node)
    {
        org.waveprotocol.wave.model.util.ConcurrentList$Node r0, r1;

        r0 := @parameter0: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ConcurrentList$Node;

        r0.<org.waveprotocol.wave.model.util.ConcurrentList$Node: org.waveprotocol.wave.model.util.ConcurrentList$Node prev> = r1;

        return r1;
    }
}
