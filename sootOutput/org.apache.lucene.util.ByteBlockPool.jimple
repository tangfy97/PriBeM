public final class org.apache.lucene.util.ByteBlockPool extends java.lang.Object
{
    public static final int BYTE_BLOCK_SHIFT;
    public static final int BYTE_BLOCK_SIZE;
    public static final int BYTE_BLOCK_MASK;
    public byte[][] buffers;
    private int bufferUpto;
    public int byteUpto;
    public byte[] buffer;
    public int byteOffset;
    private final org.apache.lucene.util.ByteBlockPool$Allocator allocator;
    public static final int[] NEXT_LEVEL_ARRAY;
    public static final int[] LEVEL_SIZE_ARRAY;
    public static final int FIRST_LEVEL_SIZE;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.util.ByteBlockPool$Allocator)
    {
        byte[][] $r1;
        org.apache.lucene.util.ByteBlockPool$Allocator r2;
        int $i1, $i3, $i5;
        org.apache.lucene.util.ByteBlockPool r0;

        r0 := @this: org.apache.lucene.util.ByteBlockPool;

        r2 := @parameter0: org.apache.lucene.util.ByteBlockPool$Allocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte[])[10];

        r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers> = $r1;

        $i1 = (int) -1;

        r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto> = $i1;

        $i3 = (int) 32768;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i3;

        $i5 = (int) -32768;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteOffset> = $i5;

        r0.<org.apache.lucene.util.ByteBlockPool: org.apache.lucene.util.ByteBlockPool$Allocator allocator> = r2;

        return;
    }

    public void reset()
    {
        org.apache.lucene.util.ByteBlockPool r0;

        r0 := @this: org.apache.lucene.util.ByteBlockPool;

        virtualinvoke r0.<org.apache.lucene.util.ByteBlockPool: void reset(boolean,boolean)>(1, 1);

        return;
    }

    public void reset(boolean, boolean)
    {
        byte[] $r5, $r7, $r9;
        org.apache.lucene.util.ByteBlockPool r0;
        byte $b10, $b11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i13, $i15, $i17, $i19;
        boolean z0, z1;
        org.apache.lucene.util.ByteBlockPool$Allocator $r2;
        byte[][] $r1, $r3, $r4, $r6, $r8;

        r0 := @this: org.apache.lucene.util.ByteBlockPool;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $i0 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $i13 = (int) -1;

        if $i0 == $i13 goto label9;

        if z0 == 0 goto label3;

        i9 = 0;

     label1:
        $i6 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        if i9 >= $i6 goto label2;

        $r8 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $r9 = $r8[i9];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r9, 0);

        i9 = i9 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i7 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $r7 = $r6[$i7];

        $i8 = r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r7, 0, $i8, 0);

     label3:
        $i1 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        if $i1 > 0 goto label4;

        if z1 != 0 goto label7;

     label4:
        if z1 == 0 goto label5;

        $b11 = 1;

        $b10 = 1;

        goto label6;

     label5:
        $b11 = 0;

        $b10 = 0;

     label6:
        $r2 = r0.<org.apache.lucene.util.ByteBlockPool: org.apache.lucene.util.ByteBlockPool$Allocator allocator>;

        $r1 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i2 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $i3 = 1 + $i2;

        virtualinvoke $r2.<org.apache.lucene.util.ByteBlockPool$Allocator: void recycleByteBlocks(byte[][],int,int)>($r1, $b11, $i3);

        $r3 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i4 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $i5 = 1 + $i4;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r3, $b10, $i5, null);

     label7:
        if z1 == 0 goto label8;

        r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto> = 0;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = 0;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteOffset> = 0;

        $r4 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $r5 = $r4[0];

        r0.<org.apache.lucene.util.ByteBlockPool: byte[] buffer> = $r5;

        goto label9;

     label8:
        $i15 = (int) -1;

        r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto> = $i15;

        $i17 = (int) 32768;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i17;

        $i19 = (int) -32768;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteOffset> = $i19;

        r0.<org.apache.lucene.util.ByteBlockPool: byte[] buffer> = null;

     label9:
        return;
    }

    public void nextBuffer()
    {
        byte[] $r4;
        org.apache.lucene.util.ByteBlockPool r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        org.apache.lucene.util.ByteBlockPool$Allocator $r2;
        byte[][] $r1, $r3, $r5, r6, $r7, $r8;

        r0 := @this: org.apache.lucene.util.ByteBlockPool;

        $i0 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $i2 = 1 + $i0;

        $r1 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        $r5 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i9 = lengthof $r5;

        $i11 = $i9 + 1;

        $i10 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i12 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i11, $i10);

        r6 = newarray (byte[])[$i12];

        $r8 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $r7 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i13 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r6, 0, $i13);

        r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers> = r6;

     label1:
        $r3 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i3 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $i4 = 1 + $i3;

        $r2 = r0.<org.apache.lucene.util.ByteBlockPool: org.apache.lucene.util.ByteBlockPool$Allocator allocator>;

        $r4 = virtualinvoke $r2.<org.apache.lucene.util.ByteBlockPool$Allocator: byte[] getByteBlock()>();

        $r3[$i4] = $r4;

        r0.<org.apache.lucene.util.ByteBlockPool: byte[] buffer> = $r4;

        $i5 = r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.util.ByteBlockPool: int bufferUpto> = $i6;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = 0;

        $i7 = r0.<org.apache.lucene.util.ByteBlockPool: int byteOffset>;

        $i15 = (int) 32768;

        $i8 = $i7 + $i15;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteOffset> = $i8;

        return;
    }

    public int newSlice(int)
    {
        byte[] $r1;
        org.apache.lucene.util.ByteBlockPool r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;

        r0 := @this: org.apache.lucene.util.ByteBlockPool;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i9 = (int) 32768;

        $i1 = $i9 - i0;

        if $i2 <= $i1 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.ByteBlockPool: void nextBuffer()>();

     label1:
        $i7 = r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i3 = r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i4 = $i3 + i0;

        r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i4;

        $r1 = r0.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i5 = r0.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i6 = $i5 - 1;

        $r1[$i6] = 16;

        return $i7;
    }

    public int allocSlice(byte[], int)
    {
        byte[] r0, $r4, $r5, $r6, $r7;
        byte $b1, b2, $b11, $b13, $b16, $b19, $b22, $b25, $b27, $b30;
        int[] $r1, $r2;
        org.apache.lucene.util.ByteBlockPool r3;
        int i0, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23, $i24, $i26, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i37;

        r3 := @this: org.apache.lucene.util.ByteBlockPool;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        b2 = $b1 & 15;

        $r1 = <org.apache.lucene.util.ByteBlockPool: int[] NEXT_LEVEL_ARRAY>;

        $i35 = (int) b2;

        i3 = $r1[$i35];

        $r2 = <org.apache.lucene.util.ByteBlockPool: int[] LEVEL_SIZE_ARRAY>;

        i4 = $r2[i3];

        $i6 = r3.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i37 = (int) 32768;

        $i5 = $i37 - i4;

        if $i6 <= $i5 goto label1;

        virtualinvoke r3.<org.apache.lucene.util.ByteBlockPool: void nextBuffer()>();

     label1:
        $i33 = r3.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i7 = r3.<org.apache.lucene.util.ByteBlockPool: int byteOffset>;

        $i34 = $i33 + $i7;

        $i8 = r3.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i9 = $i8 + i4;

        r3.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i9;

        $r4 = r3.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i10 = i0 - 3;

        $b11 = r0[$i10];

        $r4[$i33] = $b11;

        $r5 = r3.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i14 = $i33 + 1;

        $i12 = i0 - 2;

        $b13 = r0[$i12];

        $r5[$i14] = $b13;

        $r6 = r3.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i17 = $i33 + 2;

        $i15 = i0 - 1;

        $b16 = r0[$i15];

        $r6[$i17] = $b16;

        $i20 = i0 - 3;

        $i18 = $i34 >>> 24;

        $b19 = (byte) $i18;

        r0[$i20] = $b19;

        $i23 = i0 - 2;

        $i21 = $i34 >>> 16;

        $b22 = (byte) $i21;

        r0[$i23] = $b22;

        $i26 = i0 - 1;

        $i24 = $i34 >>> 8;

        $b25 = (byte) $i24;

        r0[$i26] = $b25;

        $b27 = (byte) $i34;

        r0[i0] = $b27;

        $r7 = r3.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i28 = r3.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i31 = $i28 - 1;

        $i29 = 16 | i3;

        $b30 = (byte) $i29;

        $r7[$i31] = $b30;

        $i32 = $i33 + 3;

        return $i32;
    }

    public void setBytesRef(org.apache.lucene.util.BytesRef, int)
    {
        byte[] $r3;
        java.lang.AssertionError $r5;
        org.apache.lucene.util.ByteBlockPool r1;
        short $s4, $s8, $s16, $s18;
        byte $b3, $b5, $b7, $b10, $b14;
        int i0, $i1, i2, $i6, $i9, $i11, $i12, $i13, $i15, $i17, $i19, $i20;
        boolean $z0;
        org.apache.lucene.util.BytesRef r0;
        byte[][] $r2;

        r1 := @this: org.apache.lucene.util.ByteBlockPool;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        i0 := @parameter1: int;

        $r2 = r1.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        $i1 = i0 >> 15;

        $r3 = $r2[$i1];

        r0.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r3;

        i2 = i0 & 32767;

        $b3 = $r3[i2];

        $s16 = (short) $b3;

        $s4 = $s16 & 128;

        if $s4 != 0 goto label1;

        $b14 = $r3[i2];

        $i17 = (int) $b14;

        r0.<org.apache.lucene.util.BytesRef: int length> = $i17;

        $i15 = i2 + 1;

        r0.<org.apache.lucene.util.BytesRef: int offset> = $i15;

        goto label2;

     label1:
        $b5 = $r3[i2];

        $b10 = $b5 & 127;

        $i6 = i2 + 1;

        $b7 = $r3[$i6];

        $s18 = (short) $b7;

        $s8 = $s18 & 255;

        $i19 = (int) $s8;

        $i9 = $i19 << 7;

        $i20 = (int) $b10;

        $i11 = $i20 + $i9;

        r0.<org.apache.lucene.util.BytesRef: int length> = $i11;

        $i12 = i2 + 2;

        r0.<org.apache.lucene.util.BytesRef: int offset> = $i12;

     label2:
        $z0 = <org.apache.lucene.util.ByteBlockPool: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $i13 = r0.<org.apache.lucene.util.BytesRef: int length>;

        if $i13 >= 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    public void append(org.apache.lucene.util.BytesRef)
    {
        byte[] $r2, $r3, $r4, $r5;
        org.apache.lucene.util.ByteBlockPool r1;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11, $i13;
        org.apache.lucene.util.BytesRef r0;

        r1 := @this: org.apache.lucene.util.ByteBlockPool;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        i7 = r0.<org.apache.lucene.util.BytesRef: int length>;

        if i7 != 0 goto label1;

        return;

     label1:
        i8 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i0 = r1.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i1 = i7 + $i0;

        $i11 = (int) 32768;

        i9 = $i1 - $i11;

     label2:
        if i9 > 0 goto label3;

        $r5 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r4 = r1.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i4 = r1.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i8, $r4, $i4, i7);

        $i5 = r1.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        $i6 = $i5 + i7;

        r1.<org.apache.lucene.util.ByteBlockPool: int byteUpto> = $i6;

        goto label5;

     label3:
        i2 = i7 - i9;

        if i2 <= 0 goto label4;

        $r3 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r2 = r1.<org.apache.lucene.util.ByteBlockPool: byte[] buffer>;

        $i3 = r1.<org.apache.lucene.util.ByteBlockPool: int byteUpto>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i8, $r2, $i3, i2);

        i8 = i8 + i2;

        i7 = i7 - i2;

     label4:
        virtualinvoke r1.<org.apache.lucene.util.ByteBlockPool: void nextBuffer()>();

        $i13 = (int) 32768;

        i9 = i9 - $i13;

        goto label2;

     label5:
        return;
    }

    public void readBytes(long, byte[], int, int)
    {
        byte[] r2, r4;
        long l2, $l3, $l4;
        org.apache.lucene.util.ByteBlockPool r0;
        int i0, i1, $i5, i6, i7, i8, i9, i10, i11, $i13, $i15;
        byte[][] $r1, $r3;

        r0 := @this: org.apache.lucene.util.ByteBlockPool;

        l2 := @parameter0: long;

        r2 := @parameter1: byte[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        if i0 != 0 goto label1;

        return;

     label1:
        i7 = i1;

        i8 = i0;

        $l3 = l2 >> 15;

        i9 = (int) $l3;

        $r1 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        r4 = $r1[i9];

        $l4 = l2 & 32767L;

        i10 = (int) $l4;

        $i5 = i10 + i0;

        $i13 = (int) 32768;

        i11 = $i5 - $i13;

     label2:
        if i11 > 0 goto label3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i10, r2, i7, i8);

        goto label4;

     label3:
        i6 = i0 - i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i10, r2, i7, i6);

        i10 = 0;

        i8 = i8 - i6;

        i7 = i7 + i6;

        $r3 = r0.<org.apache.lucene.util.ByteBlockPool: byte[][] buffers>;

        i9 = i9 + 1;

        r4 = $r3[i9];

        $i15 = (int) 32768;

        i11 = i11 - $i15;

        goto label2;

     label4:
        return;
    }

    static void <clinit>()
    {
        int[] $r1, $r2, $r3;
        int $i0;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.ByteBlockPool: int BYTE_BLOCK_MASK> = 32767;

        <org.apache.lucene.util.ByteBlockPool: int BYTE_BLOCK_SIZE> = 32768;

        <org.apache.lucene.util.ByteBlockPool: int BYTE_BLOCK_SHIFT> = 15;

        $r0 = class "Lorg/apache/lucene/util/ByteBlockPool;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.ByteBlockPool: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (int)[10];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 3;

        $r1[3] = 4;

        $r1[4] = 5;

        $r1[5] = 6;

        $r1[6] = 7;

        $r1[7] = 8;

        $r1[8] = 9;

        $r1[9] = 9;

        <org.apache.lucene.util.ByteBlockPool: int[] NEXT_LEVEL_ARRAY> = $r1;

        $r2 = newarray (int)[10];

        $r2[0] = 5;

        $r2[1] = 14;

        $r2[2] = 20;

        $r2[3] = 30;

        $r2[4] = 40;

        $r2[5] = 40;

        $r2[6] = 80;

        $r2[7] = 80;

        $r2[8] = 120;

        $r2[9] = 200;

        <org.apache.lucene.util.ByteBlockPool: int[] LEVEL_SIZE_ARRAY> = $r2;

        $r3 = <org.apache.lucene.util.ByteBlockPool: int[] LEVEL_SIZE_ARRAY>;

        $i0 = $r3[0];

        <org.apache.lucene.util.ByteBlockPool: int FIRST_LEVEL_SIZE> = $i0;

        return;
    }
}
