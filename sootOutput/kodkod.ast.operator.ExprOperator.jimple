public enum class kodkod.ast.operator.ExprOperator extends java.lang.Enum
{
    public static final enum kodkod.ast.operator.ExprOperator UNION;
    public static final enum kodkod.ast.operator.ExprOperator INTERSECTION;
    public static final enum kodkod.ast.operator.ExprOperator OVERRIDE;
    public static final enum kodkod.ast.operator.ExprOperator PRODUCT;
    public static final enum kodkod.ast.operator.ExprOperator DIFFERENCE;
    public static final enum kodkod.ast.operator.ExprOperator JOIN;
    public static final enum kodkod.ast.operator.ExprOperator TRANSPOSE;
    public static final enum kodkod.ast.operator.ExprOperator CLOSURE;
    public static final enum kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE;
    static final int unary;
    static final int binary;
    static final int nary;
    private static final kodkod.ast.operator.ExprOperator[] ENUM$VALUES;

    static void <clinit>()
    {
        kodkod.ast.operator.ExprOperator[] $r9;
        kodkod.ast.operator.ExprOperator $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        kodkod.ast.operator.ExprOperator$1 $r26;
        kodkod.ast.operator.ExprOperator$2 $r27;
        kodkod.ast.operator.ExprOperator$5 $r30;
        kodkod.ast.operator.ExprOperator$6 $r31;
        kodkod.ast.operator.ExprOperator$3 $r28;
        kodkod.ast.operator.ExprOperator$4 $r29;
        kodkod.ast.operator.ExprOperator$9 $r34;
        kodkod.ast.operator.ExprOperator$7 $r32;
        kodkod.ast.operator.ExprOperator$8 $r33;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;

        $r26 = new kodkod.ast.operator.ExprOperator$1;

        specialinvoke $r26.<kodkod.ast.operator.ExprOperator$1: void <init>(java.lang.String,int)>("UNION", 0);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION> = $r26;

        $r27 = new kodkod.ast.operator.ExprOperator$2;

        specialinvoke $r27.<kodkod.ast.operator.ExprOperator$2: void <init>(java.lang.String,int)>("INTERSECTION", 1);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION> = $r27;

        $r28 = new kodkod.ast.operator.ExprOperator$3;

        specialinvoke $r28.<kodkod.ast.operator.ExprOperator$3: void <init>(java.lang.String,int)>("OVERRIDE", 2);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE> = $r28;

        $r29 = new kodkod.ast.operator.ExprOperator$4;

        specialinvoke $r29.<kodkod.ast.operator.ExprOperator$4: void <init>(java.lang.String,int)>("PRODUCT", 3);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT> = $r29;

        $r30 = new kodkod.ast.operator.ExprOperator$5;

        specialinvoke $r30.<kodkod.ast.operator.ExprOperator$5: void <init>(java.lang.String,int)>("DIFFERENCE", 4);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE> = $r30;

        $r31 = new kodkod.ast.operator.ExprOperator$6;

        specialinvoke $r31.<kodkod.ast.operator.ExprOperator$6: void <init>(java.lang.String,int)>("JOIN", 5);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN> = $r31;

        $r32 = new kodkod.ast.operator.ExprOperator$7;

        specialinvoke $r32.<kodkod.ast.operator.ExprOperator$7: void <init>(java.lang.String,int)>("TRANSPOSE", 6);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE> = $r32;

        $r33 = new kodkod.ast.operator.ExprOperator$8;

        specialinvoke $r33.<kodkod.ast.operator.ExprOperator$8: void <init>(java.lang.String,int)>("CLOSURE", 7);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE> = $r33;

        $r34 = new kodkod.ast.operator.ExprOperator$9;

        specialinvoke $r34.<kodkod.ast.operator.ExprOperator$9: void <init>(java.lang.String,int)>("REFLEXIVE_CLOSURE", 8);

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE> = $r34;

        $r9 = newarray (kodkod.ast.operator.ExprOperator)[9];

        $r10 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $r9[0] = $r10;

        $r11 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $r9[1] = $r11;

        $r12 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $r9[2] = $r12;

        $r13 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $r9[3] = $r13;

        $r14 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE>;

        $r9[4] = $r14;

        $r15 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        $r9[5] = $r15;

        $r16 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $r9[6] = $r16;

        $r17 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $r9[7] = $r17;

        $r18 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $r9[8] = $r18;

        <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] ENUM$VALUES> = $r9;

        $r19 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $i0 = specialinvoke $r19.<kodkod.ast.operator.ExprOperator: int index()>();

        $r20 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $i1 = specialinvoke $r20.<kodkod.ast.operator.ExprOperator: int index()>();

        $i2 = $i0 | $i1;

        $r21 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $i3 = specialinvoke $r21.<kodkod.ast.operator.ExprOperator: int index()>();

        $i4 = $i2 | $i3;

        <kodkod.ast.operator.ExprOperator: int unary> = $i4;

        $i5 = <kodkod.ast.operator.ExprOperator: int unary>;

        $i15 = (int) -1;

        $i6 = $i5 ^ $i15;

        <kodkod.ast.operator.ExprOperator: int binary> = $i6;

        $r22 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $i7 = specialinvoke $r22.<kodkod.ast.operator.ExprOperator: int index()>();

        $r23 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $i8 = specialinvoke $r23.<kodkod.ast.operator.ExprOperator: int index()>();

        $i9 = $i7 | $i8;

        $r24 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $i10 = specialinvoke $r24.<kodkod.ast.operator.ExprOperator: int index()>();

        $i11 = $i9 | $i10;

        $r25 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $i12 = specialinvoke $r25.<kodkod.ast.operator.ExprOperator: int index()>();

        $i13 = $i11 | $i12;

        <kodkod.ast.operator.ExprOperator: int nary> = $i13;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        int i0;
        kodkod.ast.operator.ExprOperator r0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.ExprOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private final int index()
    {
        int $i0, $i1;
        kodkod.ast.operator.ExprOperator r0;

        r0 := @this: kodkod.ast.operator.ExprOperator;

        $i0 = virtualinvoke r0.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i1 = 1 << $i0;

        return $i1;
    }

    public final boolean unary()
    {
        kodkod.ast.operator.ExprOperator r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.operator.ExprOperator;

        $i0 = <kodkod.ast.operator.ExprOperator: int unary>;

        $i1 = specialinvoke r0.<kodkod.ast.operator.ExprOperator: int index()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean binary()
    {
        kodkod.ast.operator.ExprOperator r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.operator.ExprOperator;

        $i0 = <kodkod.ast.operator.ExprOperator: int binary>;

        $i1 = specialinvoke r0.<kodkod.ast.operator.ExprOperator: int index()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean nary()
    {
        kodkod.ast.operator.ExprOperator r0;
        int $i0, $i1, $i2;

        r0 := @this: kodkod.ast.operator.ExprOperator;

        $i0 = <kodkod.ast.operator.ExprOperator: int nary>;

        $i1 = specialinvoke r0.<kodkod.ast.operator.ExprOperator: int index()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static kodkod.ast.operator.ExprOperator[] values()
    {
        int $i0;
        kodkod.ast.operator.ExprOperator[] $r0, $r1;

        $r0 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] ENUM$VALUES>;

        $i0 = lengthof $r0;

        $r1 = newarray (kodkod.ast.operator.ExprOperator)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, 0, $i0);

        return $r1;
    }

    public static kodkod.ast.operator.ExprOperator valueOf(java.lang.String)
    {
        kodkod.ast.operator.ExprOperator[] $r0;
        java.lang.IllegalArgumentException $r5;
        kodkod.ast.operator.ExprOperator $r2;
        int i0, $i2;
        java.lang.String r1, $r3;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r0 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] ENUM$VALUES>;

        i0 = lengthof $r0;

        goto label2;

     label1:
        $r2 = $r0[i0];

        $r3 = virtualinvoke $r2.<kodkod.ast.operator.ExprOperator: java.lang.String name()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    void <init>(java.lang.String, int, kodkod.ast.operator.ExprOperator)
    {
        kodkod.ast.operator.ExprOperator r0, r2;
        int i0;
        java.lang.String r1;

        r0 := @this: kodkod.ast.operator.ExprOperator;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: kodkod.ast.operator.ExprOperator;

        specialinvoke r0.<kodkod.ast.operator.ExprOperator: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }
}
