public final enum class org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type extends java.lang.Enum
{
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LIST_ITEM;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type TEXT;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_END;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_START;
    public static final enum org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_END;
    private final org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group;
    private final int indent;
    private static final org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] $VALUES;
    static final boolean $assertionsDisabled;

    public static org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] values()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[]) $r1;

        return $r2;
    }

    public static org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/waveprotocol/wave/model/richtext/RichTextTokenizer$Type;", r0);

        $r2 = (org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)
    {
        int i0, $i2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup;

        $i2 = (int) -1;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup,int)>(r1, i0, r2, $i2);

        return;
    }

    private void <init>(java.lang.String, int, org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup, int)
    {
        int i0, i1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group> = r2;

        r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int indent> = i1;

        return;
    }

    int indent()
    {
        int $i0, $i1;
        java.lang.AssertionError $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $z0 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int indent>;

        if $i1 >= 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int indent>;

        return $i0;
    }

    org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup $r1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group>;

        return $r1;
    }

    boolean isStructural()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup $r1, $r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group>;

        $r1 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isBlockLevel()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group>;

        $r1 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK>;

        if $r2 == $r1 goto label1;

        $r4 = r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup group>;

        $r3 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK_RANGE>;

        if $r4 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] $r43;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42;
        java.lang.Class $r0;

        $r0 = class "Lorg/waveprotocol/wave/model/richtext/RichTextTokenizer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK_RANGE>;

        specialinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup,int)>("UNORDERED_LIST_START", 0, $r2, 1);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_START> = $r1;

        $r3 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r4 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK_RANGE>;

        specialinvoke $r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("UNORDERED_LIST_END", 1, $r4);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_END> = $r3;

        $r5 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r6 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK_RANGE>;

        specialinvoke $r5.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup,int)>("ORDERED_LIST_START", 2, $r6, 1);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_START> = $r5;

        $r7 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r8 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK_RANGE>;

        specialinvoke $r7.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("ORDERED_LIST_END", 3, $r8);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_END> = $r7;

        $r9 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r10 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK>;

        specialinvoke $r9.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("NEW_LINE", 4, $r10);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE> = $r9;

        $r11 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r12 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup BLOCK>;

        specialinvoke $r11.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("LIST_ITEM", 5, $r12);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LIST_ITEM> = $r11;

        $r13 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r14 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup TEXTUAL>;

        specialinvoke $r13.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("TEXT", 6, $r14);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type TEXT> = $r13;

        $r15 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r16 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r15.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_FONT_WEIGHT_START", 7, $r16);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_START> = $r15;

        $r17 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r18 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r17.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_FONT_WEIGHT_END", 8, $r18);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_END> = $r17;

        $r19 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r20 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r19.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_FONT_STYLE_START", 9, $r20);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_START> = $r19;

        $r21 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r22 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r21.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_FONT_STYLE_END", 10, $r22);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_END> = $r21;

        $r23 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r24 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r23.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_TEXT_DECORATION_START", 11, $r24);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_START> = $r23;

        $r25 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r26 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r25.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_TEXT_DECORATION_END", 12, $r26);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_END> = $r25;

        $r27 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r28 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r27.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_COLOR_START", 13, $r28);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_START> = $r27;

        $r29 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r30 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r29.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_COLOR_END", 14, $r30);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_END> = $r29;

        $r31 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r32 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r31.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_BG_COLOR_START", 15, $r32);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_START> = $r31;

        $r33 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r34 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r33.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_BG_COLOR_END", 16, $r34);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_END> = $r33;

        $r35 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r36 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r35.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_FONT_FAMILY_START", 17, $r36);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_START> = $r35;

        $r37 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r38 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r37.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("STYLE_FONT_FAMILY_END", 18, $r38);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_END> = $r37;

        $r39 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r40 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r39.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("LINK_START", 19, $r40);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_START> = $r39;

        $r41 = new org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r42 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup STYLE>;

        specialinvoke $r41.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: void <init>(java.lang.String,int,org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type$TypeGroup)>("LINK_END", 20, $r42);

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_END> = $r41;

        $r43 = newarray (org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)[21];

        $r44 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_START>;

        $r43[0] = $r44;

        $r45 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type UNORDERED_LIST_END>;

        $r43[1] = $r45;

        $r46 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_START>;

        $r43[2] = $r46;

        $r47 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type ORDERED_LIST_END>;

        $r43[3] = $r47;

        $r48 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type NEW_LINE>;

        $r43[4] = $r48;

        $r49 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LIST_ITEM>;

        $r43[5] = $r49;

        $r50 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type TEXT>;

        $r43[6] = $r50;

        $r51 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_START>;

        $r43[7] = $r51;

        $r52 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_WEIGHT_END>;

        $r43[8] = $r52;

        $r53 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_START>;

        $r43[9] = $r53;

        $r54 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_STYLE_END>;

        $r43[10] = $r54;

        $r55 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_START>;

        $r43[11] = $r55;

        $r56 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_TEXT_DECORATION_END>;

        $r43[12] = $r56;

        $r57 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_START>;

        $r43[13] = $r57;

        $r58 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_COLOR_END>;

        $r43[14] = $r58;

        $r59 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_START>;

        $r43[15] = $r59;

        $r60 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_BG_COLOR_END>;

        $r43[16] = $r60;

        $r61 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_START>;

        $r43[17] = $r61;

        $r62 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type STYLE_FONT_FAMILY_END>;

        $r43[18] = $r62;

        $r63 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_START>;

        $r43[19] = $r63;

        $r64 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LINK_END>;

        $r43[20] = $r64;

        <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type[] $VALUES> = $r43;

        return;
    }
}
