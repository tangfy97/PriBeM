public class com.hp.hpl.jena.tdb.TDBBackup extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.tdb.TDBBackup r0;

        r0 := @this: com.hp.hpl.jena.tdb.TDBBackup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void backup(com.hp.hpl.jena.tdb.base.file.Location, java.lang.String)
    {
        com.hp.hpl.jena.tdb.TDBException $r10;
        java.io.FileOutputStream $r0;
        java.io.IOException $r4;
        com.hp.hpl.jena.tdb.base.file.Location r3;
        java.io.FileNotFoundException $r5;
        java.io.BufferedOutputStream $r2;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r13;
        java.lang.String r1, $r9, $r14;

        r3 := @parameter0: com.hp.hpl.jena.tdb.base.file.Location;

        r1 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>(r1);

        $r2 = new java.io.BufferedOutputStream;

        specialinvoke $r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r0);

        staticinvoke <com.hp.hpl.jena.tdb.TDBBackup: void backup(com.hp.hpl.jena.tdb.base.file.Location,java.io.OutputStream)>(r3, $r2);

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not found: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Class,java.lang.String)>(class "Lcom/hp/hpl/jena/tdb/TDBBackup;", $r9);

        $r10 = new com.hp.hpl.jena.tdb.TDBException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not found: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label4:
        $r4 := @caughtexception;

        staticinvoke <org.apache.jena.atlas.io.IO: void exception(java.io.IOException)>($r4);

     label5:
        return;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public static void backup(com.hp.hpl.jena.tdb.base.file.Location, java.io.OutputStream)
    {
        java.io.OutputStream r4;
        org.apache.jena.riot.Lang $r5;
        com.hp.hpl.jena.query.ReadWrite $r2;
        com.hp.hpl.jena.tdb.base.file.Location r0;
        com.hp.hpl.jena.tdb.StoreConnection $r1;
        com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn $r3;

        r0 := @parameter0: com.hp.hpl.jena.tdb.base.file.Location;

        r4 := @parameter1: java.io.OutputStream;

        staticinvoke <com.hp.hpl.jena.tdb.TDBFactory: com.hp.hpl.jena.query.Dataset createDataset(com.hp.hpl.jena.tdb.base.file.Location)>(r0);

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.StoreConnection: com.hp.hpl.jena.tdb.StoreConnection make(com.hp.hpl.jena.tdb.base.file.Location)>(r0);

        $r2 = <com.hp.hpl.jena.query.ReadWrite: com.hp.hpl.jena.query.ReadWrite READ>;

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.StoreConnection: com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn begin(com.hp.hpl.jena.query.ReadWrite,java.lang.String)>($r2, "backup");

        $r5 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang NQUADS>;

        staticinvoke <org.apache.jena.riot.RDFDataMgr: void write(java.io.OutputStream,com.hp.hpl.jena.sparql.core.DatasetGraph,org.apache.jena.riot.Lang)>(r4, $r3, $r5);

        virtualinvoke $r3.<com.hp.hpl.jena.tdb.transaction.DatasetGraphTxn: void end()>();

        return;
    }
}
