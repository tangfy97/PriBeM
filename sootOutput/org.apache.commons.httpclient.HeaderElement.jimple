public class org.apache.commons.httpclient.HeaderElement extends org.apache.commons.httpclient.NameValuePair
{
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.commons.httpclient.NameValuePair[] parameters;
    static java.lang.Class class$org$apache$commons$httpclient$HeaderElement;

    public void <init>()
    {
        org.apache.commons.httpclient.HeaderElement r0;

        r0 := @this: org.apache.commons.httpclient.HeaderElement;

        specialinvoke r0.<org.apache.commons.httpclient.HeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.commons.httpclient.NameValuePair[])>(null, null, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.commons.httpclient.HeaderElement r0;

        r0 := @this: org.apache.commons.httpclient.HeaderElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.HeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.commons.httpclient.NameValuePair[])>(r1, r2, null);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, org.apache.commons.httpclient.NameValuePair[])
    {
        org.apache.commons.httpclient.NameValuePair[] r3;
        java.lang.String r1, r2;
        org.apache.commons.httpclient.HeaderElement r0;

        r0 := @this: org.apache.commons.httpclient.HeaderElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.commons.httpclient.NameValuePair[];

        specialinvoke r0.<org.apache.commons.httpclient.NameValuePair: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] parameters> = null;

        r0.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] parameters> = r3;

        return;
    }

    public void <init>(char[], int, int)
    {
        java.lang.Object[] $r9;
        org.apache.commons.httpclient.NameValuePair[] $r8, $r10, $r11;
        org.apache.commons.httpclient.HeaderElement r0;
        org.apache.commons.httpclient.NameValuePair r5;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r6, $r7;
        java.util.List $r3;
        char[] r1;
        java.lang.Object $r4;
        org.apache.commons.httpclient.util.ParameterParser $r2;

        r0 := @this: org.apache.commons.httpclient.HeaderElement;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.httpclient.HeaderElement: void <init>()>();

        if r1 != null goto label1;

        return;

     label1:
        $r2 = new org.apache.commons.httpclient.util.ParameterParser;

        specialinvoke $r2.<org.apache.commons.httpclient.util.ParameterParser: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.util.ParameterParser: java.util.List parse(char[],int,int,char)>(r1, i0, i1, 59);

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i2 <= 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>(0);

        r5 = (org.apache.commons.httpclient.NameValuePair) $r4;

        $r6 = virtualinvoke r5.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        virtualinvoke r0.<org.apache.commons.httpclient.HeaderElement: void setName(java.lang.String)>($r6);

        $r7 = virtualinvoke r5.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        virtualinvoke r0.<org.apache.commons.httpclient.HeaderElement: void setValue(java.lang.String)>($r7);

        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i3 <= 0 goto label2;

        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r8 = newarray (org.apache.commons.httpclient.NameValuePair)[$i4];

        $r9 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (org.apache.commons.httpclient.NameValuePair[]) $r9;

        $r11 = (org.apache.commons.httpclient.NameValuePair[]) $r10;

        r0.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] parameters> = $r11;

     label2:
        return;
    }

    public void <init>(char[])
    {
        int $i0;
        char[] r1;
        org.apache.commons.httpclient.HeaderElement r0;

        r0 := @this: org.apache.commons.httpclient.HeaderElement;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public org.apache.commons.httpclient.NameValuePair[] getParameters()
    {
        org.apache.commons.httpclient.HeaderElement r0;
        org.apache.commons.httpclient.NameValuePair[] $r1;

        r0 := @this: org.apache.commons.httpclient.HeaderElement;

        $r1 = r0.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] parameters>;

        return $r1;
    }

    public static final org.apache.commons.httpclient.HeaderElement[] parseElements(char[])
    {
        java.lang.Object[] $r4;
        org.apache.commons.httpclient.HeaderElement r11, $r13, $r14;
        java.util.ArrayList $r12;
        int i0, $i1, $i3, i4, i5, $i6, $i7;
        java.lang.String $r7;
        org.apache.commons.httpclient.HeaderElement[] $r3, $r5, $r6, $r10;
        boolean z0, $z1;
        char c2;
        char[] r1;
        org.apache.commons.logging.Log $r0;

        r1 := @parameter0: char[];

        $r0 = <org.apache.commons.httpclient.HeaderElement: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderElement.parseElements(char[])");

        if r1 != null goto label1;

        $r10 = newarray (org.apache.commons.httpclient.HeaderElement)[0];

        return $r10;

     label1:
        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        i4 = 0;

        i5 = 0;

        i0 = lengthof r1;

        z0 = 0;

     label2:
        if i4 >= i0 goto label9;

        c2 = r1[i4];

        $i6 = (int) c2;

        if $i6 != 34 goto label5;

        if z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

     label5:
        r11 = null;

        if z0 != 0 goto label6;

        $i7 = (int) c2;

        if $i7 != 44 goto label6;

        $r13 = new org.apache.commons.httpclient.HeaderElement;

        specialinvoke $r13.<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>(r1, i5, i4);

        r11 = $r13;

        i5 = i4 + 1;

        goto label7;

     label6:
        $i3 = i0 - 1;

        if i4 != $i3 goto label7;

        $r14 = new org.apache.commons.httpclient.HeaderElement;

        specialinvoke $r14.<org.apache.commons.httpclient.HeaderElement: void <init>(char[],int,int)>(r1, i5, i0);

        r11 = $r14;

     label7:
        if r11 == null goto label8;

        $r7 = virtualinvoke r11.<org.apache.commons.httpclient.HeaderElement: java.lang.String getName()>();

        if $r7 == null goto label8;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r11);

     label8:
        i4 = i4 + 1;

        goto label2;

     label9:
        $i1 = interfaceinvoke $r12.<java.util.List: int size()>();

        $r3 = newarray (org.apache.commons.httpclient.HeaderElement)[$i1];

        $r4 = interfaceinvoke $r12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.commons.httpclient.HeaderElement[]) $r4;

        $r6 = (org.apache.commons.httpclient.HeaderElement[]) $r5;

        return $r6;
    }

    public static final org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)
    {
        char[] $r2;
        org.apache.commons.logging.Log $r0;
        java.lang.String r1;
        org.apache.commons.httpclient.HeaderElement[] $r3, $r4;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HeaderElement: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderElement.parseElements(String)");

        if r1 != null goto label1;

        $r4 = newarray (org.apache.commons.httpclient.HeaderElement)[0];

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>($r2);

        return $r3;
    }

    public static final org.apache.commons.httpclient.HeaderElement[] parse(java.lang.String) throws org.apache.commons.httpclient.HttpException
    {
        char[] $r2;
        org.apache.commons.logging.Log $r0;
        java.lang.String r1;
        org.apache.commons.httpclient.HeaderElement[] $r3, $r4;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HeaderElement: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderElement.parse(String)");

        if r1 != null goto label1;

        $r4 = newarray (org.apache.commons.httpclient.HeaderElement)[0];

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r3 = staticinvoke <org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(char[])>($r2);

        return $r3;
    }

    public org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)
    {
        org.apache.commons.httpclient.NameValuePair[] $r3;
        java.lang.IllegalArgumentException $r6;
        org.apache.commons.httpclient.HeaderElement r2;
        org.apache.commons.httpclient.NameValuePair r4, r7;
        int $i0, i1;
        org.apache.commons.logging.Log $r0;
        java.lang.String r1, $r5;
        boolean $z0;

        r2 := @this: org.apache.commons.httpclient.HeaderElement;

        r1 := @parameter0: java.lang.String;

        $r0 = <org.apache.commons.httpclient.HeaderElement: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HeaderElement.getParameterByName(String)");

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name may not be null");

        throw $r6;

     label1:
        r7 = null;

        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair[] getParameters()>();

        if $r3 == null goto label4;

        i1 = 0;

     label2:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        r4 = $r3[i1];

        $r5 = virtualinvoke r4.<org.apache.commons.httpclient.NameValuePair: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        r7 = r4;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return r7;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.HeaderElement: java.lang.Class class$org$apache$commons$httpclient$HeaderElement>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.HeaderElement: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HeaderElement");

        <org.apache.commons.httpclient.HeaderElement: java.lang.Class class$org$apache$commons$httpclient$HeaderElement> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.HeaderElement: java.lang.Class class$org$apache$commons$httpclient$HeaderElement>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HeaderElement: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
