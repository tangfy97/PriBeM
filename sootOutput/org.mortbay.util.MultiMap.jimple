public class org.mortbay.util.MultiMap extends java.util.HashMap implements java.lang.Cloneable
{

    public void <init>()
    {
        org.mortbay.util.MultiMap r0;

        r0 := @this: org.mortbay.util.MultiMap;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.mortbay.util.MultiMap r0;

        r0 := @this: org.mortbay.util.MultiMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>(i0);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.mortbay.util.MultiMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = $i0 * 3;

        $i2 = $i1 / 2;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>($i2);

        virtualinvoke r0.<org.mortbay.util.MultiMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public java.util.List getValues(java.lang.Object)
    {
        java.util.List $r3;
        org.mortbay.util.MultiMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.mortbay.util.LazyList: java.util.List getList(java.lang.Object,boolean)>($r2, 1);

        return $r3;
    }

    public java.lang.Object getValue(java.lang.Object, int)
    {
        org.mortbay.util.MultiMap r0;
        int i0, $i1;
        java.lang.Object r1, $r2, $r3;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if i0 != 0 goto label1;

        $i1 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>($r2);

        if $i1 != 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r2, i0);

        return $r3;
    }

    public java.lang.String getString(java.lang.Object)
    {
        java.lang.Throwable $r8;
        org.mortbay.util.MultiMap r0;
        java.lang.StringBuffer $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Object r1, $r2, $r3, $r6;
        java.lang.String $r5, $r7, $r9;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $i0 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>($r2);

        lookupswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            default: goto label05;
        };

     label01:
        return null;

     label02:
        $r3 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r2, 0);

        if $r3 != null goto label03;

        $r9 = null;

        goto label04;

     label03:
        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label04:
        return $r9;

     label05:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>(128);

        entermonitor $r4;

     label06:
        i3 = 0;

     label07:
        $i1 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>($r2);

        if i3 >= $i1 goto label10;

        $r6 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r2, i3);

        if $r6 == null goto label09;

        $i2 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if $i2 <= 0 goto label08;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label08:
        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label09:
        i3 = i3 + 1;

        goto label07;

     label10:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        exitmonitor $r4;

     label11:
        return $r5;

     label12:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label13:
        throw $r8;

        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.List $r4;
        org.mortbay.util.MultiMap r0;
        int $i0;
        java.lang.Object r1, $r2, $r3;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $i0 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>($r2);

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        return null;

     label2:
        $r3 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object get(java.lang.Object,int)>($r2, 0);

        return $r3;

     label3:
        $r4 = staticinvoke <org.mortbay.util.LazyList: java.util.List getList(java.lang.Object,boolean)>($r2, 1);

        return $r4;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.mortbay.util.MultiMap r0;
        java.lang.Object r1, r2, $r3, $r4;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(null, r2);

        $r4 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return $r4;
    }

    public java.lang.Object putValues(java.lang.Object, java.util.List)
    {
        java.util.List r2;
        org.mortbay.util.MultiMap r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.List;

        $r3 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.Object putValues(java.lang.Object, java.lang.String[])
    {
        org.mortbay.util.MultiMap r1;
        java.lang.String[] r0;
        int $i0, i1;
        java.lang.Object r2, $r3, r5;
        java.lang.String $r4;

        r1 := @this: org.mortbay.util.MultiMap;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String[];

        r5 = null;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r4 = r0[i1];

        r5 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(r5, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.mortbay.util.MultiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5);

        return $r3;
    }

    public void add(java.lang.Object, java.lang.Object)
    {
        org.mortbay.util.MultiMap r0;
        java.lang.Object r1, $r2, r3, $r4;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>($r2, r3);

        if $r2 == $r4 goto label1;

        specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return;
    }

    public void addValues(java.lang.Object, java.util.List)
    {
        java.util.List r3;
        org.mortbay.util.MultiMap r0;
        java.lang.Object r1, $r2, $r4;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.util.List;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object addCollection(java.lang.Object,java.util.Collection)>($r2, r3);

        if $r2 == $r4 goto label1;

        specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return;
    }

    public void addValues(java.lang.Object, java.lang.String[])
    {
        java.util.List $r4;
        org.mortbay.util.MultiMap r0;
        java.lang.Object r1, $r2, $r5;
        java.lang.String[] r3;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String[];

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3);

        $r5 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object addCollection(java.lang.Object,java.util.Collection)>($r2, $r4);

        if $r2 == $r5 goto label1;

        specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        return;
    }

    public boolean removeValue(java.lang.Object, java.lang.Object)
    {
        org.mortbay.util.MultiMap r0;
        int $i0, $i1;
        java.lang.Object r1, $r2, r3, $r4, r5;
        boolean $z0;

        r0 := @this: org.mortbay.util.MultiMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = $r2;

        $i0 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>($r2);

        if $i0 <= 0 goto label2;

        $r4 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r2, r3);

        r5 = $r4;

        if $r4 != null goto label1;

        specialinvoke r0.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label2:
        $i1 = staticinvoke <org.mortbay.util.LazyList: int size(java.lang.Object)>(r5);

        if $i1 == $i0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        org.mortbay.util.MultiMap r5;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r7, $r8, $r9, $r10;
        boolean z0, $z1;

        r5 := @this: org.mortbay.util.MultiMap;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        z0 = r0 instanceof org.mortbay.util.MultiMap;

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        if z0 == 0 goto label2;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object clone(java.lang.Object)>($r9);

        specialinvoke r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        goto label3;

     label2:
        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<org.mortbay.util.MultiMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label3:
        goto label1;

     label4:
        return;
    }

    public java.util.Map toStringArrayMap()
    {
        java.util.Map$Entry r5;
        org.mortbay.util.MultiMap r1;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r0;
        java.lang.String[] $r7;
        int $i0, $i1, $i2;
        java.lang.Object $r4, $r6, $r8;
        boolean $z0;

        r1 := @this: org.mortbay.util.MultiMap;

        $r0 = new java.util.HashMap;

        $i0 = virtualinvoke r1.<org.mortbay.util.MultiMap: int size()>();

        $i1 = $i0 * 3;

        $i2 = $i1 / 2;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>($i2);

        $r2 = specialinvoke r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = staticinvoke <org.mortbay.util.LazyList: java.lang.String[] toStringArray(java.lang.Object)>($r6);

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r7);

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.Object clone()
    {
        java.util.Map$Entry r6;
        org.mortbay.util.MultiMap r0, r2;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.lang.Object $r1, $r5, $r7, $r8;
        boolean $z0;

        r0 := @this: org.mortbay.util.MultiMap;

        $r1 = specialinvoke r0.<java.util.HashMap: java.lang.Object clone()>();

        r2 = (org.mortbay.util.MultiMap) $r1;

        $r3 = virtualinvoke r2.<org.mortbay.util.MultiMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = staticinvoke <org.mortbay.util.LazyList: java.lang.Object clone(java.lang.Object)>($r7);

        interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r8);

        goto label1;

     label2:
        return r2;
    }
}
