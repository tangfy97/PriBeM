public class org.jdesktop.swingx.JXDatePicker extends javax.swing.JComponent
{
    private static final java.util.logging.Logger LOG;
    public static final java.lang.String uiClassID;
    public static final java.lang.String EDITOR;
    public static final java.lang.String MONTH_VIEW;
    public static final java.lang.String LINK_PANEL;
    public static final java.lang.String COMMIT_KEY;
    public static final java.lang.String CANCEL_KEY;
    public static final java.lang.String HOME_NAVIGATE_KEY;
    public static final java.lang.String HOME_COMMIT_KEY;
    private static final java.text.DateFormat[] EMPTY_DATE_FORMATS;
    private javax.swing.JFormattedTextField _dateField;
    private javax.swing.JPanel _linkPanel;
    private java.text.MessageFormat _linkFormat;
    private java.util.Date linkDate;
    private org.jdesktop.swingx.JXMonthView _monthView;
    private boolean editable;
    private org.jdesktop.swingx.event.EventListenerMap listenerMap;
    protected boolean lightWeightPopupEnabled;
    private java.util.Date date;
    private java.beans.PropertyChangeListener monthViewListener;

    public void <init>()
    {
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void <init>(java.util.Date,java.util.Locale)>(null, null);

        return;
    }

    public void <init>(java.util.Date)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Date r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.util.Date;

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void <init>(java.util.Date,java.util.Locale)>(r1, null);

        return;
    }

    public void <init>(java.util.Locale)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Locale r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void <init>(java.util.Date,java.util.Locale)>(null, r1);

        return;
    }

    public void <init>(java.util.Date, java.util.Locale)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Locale r1;
        java.util.Date r2;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r2 := @parameter0: java.util.Date;

        r1 := @parameter1: java.util.Locale;

        specialinvoke r0.<javax.swing.JComponent: void <init>()>();

        r0.<org.jdesktop.swingx.JXDatePicker: boolean editable> = 1;

        $z0 = staticinvoke <javax.swing.JPopupMenu: boolean getDefaultLightWeightPopupEnabled()>();

        r0.<org.jdesktop.swingx.JXDatePicker: boolean lightWeightPopupEnabled> = $z0;

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void init()>();

        if r1 == null goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setLocale(java.util.Locale)>(r1);

     label1:
        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void updateUI()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setDate(java.util.Date)>(r2);

        return;
    }

    public void setDate(java.util.Date)
    {
        org.jdesktop.swingx.plaf.DatePickerUI $r1;
        java.beans.PropertyVetoException $r5;
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Date $r2, $r3, $r4, r6;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r6 := @parameter0: java.util.Date;

     label1:
        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.plaf.DatePickerUI getUI()>();

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.plaf.DatePickerUI: java.util.Date getSelectableDate(java.util.Date)>(r6);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        return;

     label4:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date getDate()>();

        r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date date> = $r2;

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date getDate()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("date", $r3, $r4);

        return;

        catch java.beans.PropertyVetoException from label1 to label2 with label3;
    }

    public java.util.Date getDate()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Date $r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date date>;

        return $r1;
    }

    private void init()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r2;
        org.jdesktop.swingx.event.EventListenerMap $r1;
        java.util.Date $r3;
        org.jdesktop.swingx.JXDatePicker$TodayPanel $r4;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = new org.jdesktop.swingx.event.EventListenerMap;

        specialinvoke $r1.<org.jdesktop.swingx.event.EventListenerMap: void <init>()>();

        r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.event.EventListenerMap listenerMap> = $r1;

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void initMonthView()>();

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void updateLinkFormat()>();

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: java.util.Date getToday()>();

        r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date linkDate> = $r3;

        $r4 = new org.jdesktop.swingx.JXDatePicker$TodayPanel;

        specialinvoke $r4.<org.jdesktop.swingx.JXDatePicker$TodayPanel: void <init>(org.jdesktop.swingx.JXDatePicker)>(r0);

        r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JPanel _linkPanel> = $r4;

        return;
    }

    private void initMonthView()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r1, $r2, $r3;
        java.beans.PropertyChangeListener $r4;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = new org.jdesktop.swingx.JXMonthView;

        specialinvoke $r1.<org.jdesktop.swingx.JXMonthView: void <init>()>();

        r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView> = $r1;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: void setTraversable(boolean)>(1);

        $r3 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        $r4 = specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.beans.PropertyChangeListener getMonthViewListener()>();

        virtualinvoke $r3.<org.jdesktop.swingx.JXMonthView: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r4);

        return;
    }

    private java.beans.PropertyChangeListener getMonthViewListener()
    {
        org.jdesktop.swingx.JXDatePicker$1 $r3;
        org.jdesktop.swingx.JXDatePicker r0;
        java.beans.PropertyChangeListener $r1, $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: java.beans.PropertyChangeListener monthViewListener>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.JXDatePicker$1;

        specialinvoke $r3.<org.jdesktop.swingx.JXDatePicker$1: void <init>(org.jdesktop.swingx.JXDatePicker)>(r0);

        r0.<org.jdesktop.swingx.JXDatePicker: java.beans.PropertyChangeListener monthViewListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: java.beans.PropertyChangeListener monthViewListener>;

        return $r2;
    }

    protected void updateTimeZone(java.util.TimeZone, java.util.TimeZone)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.TimeZone r1, r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.TimeZone;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("timeZone", r1, r2);

        return;
    }

    public org.jdesktop.swingx.plaf.DatePickerUI getUI()
    {
        org.jdesktop.swingx.plaf.DatePickerUI $r2;
        javax.swing.plaf.ComponentUI $r1;
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.plaf.ComponentUI ui>;

        $r2 = (org.jdesktop.swingx.plaf.DatePickerUI) $r1;

        return $r2;
    }

    public void setUI(org.jdesktop.swingx.plaf.DatePickerUI)
    {
        org.jdesktop.swingx.plaf.DatePickerUI r1;
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: org.jdesktop.swingx.plaf.DatePickerUI;

        specialinvoke r0.<javax.swing.JComponent: void setUI(javax.swing.plaf.ComponentUI)>(r1);

        return;
    }

    public void updateUI()
    {
        org.jdesktop.swingx.plaf.DatePickerUI $r2;
        javax.swing.plaf.ComponentUI $r1;
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r3;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = staticinvoke <org.jdesktop.swingx.plaf.LookAndFeelAddons: javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent,java.lang.Class)>(r0, class "Lorg/jdesktop/swingx/plaf/DatePickerUI;");

        $r2 = (org.jdesktop.swingx.plaf.DatePickerUI) $r1;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setUI(org.jdesktop.swingx.plaf.DatePickerUI)>($r2);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView getMonthView()>();

        staticinvoke <javax.swing.SwingUtilities: void updateComponentTreeUI(java.awt.Component)>($r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void invalidate()>();

        return;
    }

    public java.lang.String getUIClassID()
    {
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        return "DatePickerUI";
    }

    public transient void setFormats(java.lang.String[])
    {
        org.jdesktop.swingx.JXDatePicker r1;
        java.text.DateFormat[] r5;
        java.text.SimpleDateFormat $r6;
        java.lang.String[] r0;
        java.util.Locale $r4;
        int $i0, $i1, i2, $i4;
        java.lang.String $r3;

        r1 := @this: org.jdesktop.swingx.JXDatePicker;

        r0 := @parameter0: java.lang.String[];

        r5 = null;

        if r0 == null goto label2;

        staticinvoke <org.jdesktop.swingx.util.Contract: java.lang.Object asNotNull(java.lang.Object,java.lang.String)>(r0, "the array of format strings must not must not contain null elements");

        $i0 = lengthof r0;

        r5 = newarray (java.text.DateFormat)[$i0];

        $i1 = lengthof r0;

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label2;

        $r6 = new java.text.SimpleDateFormat;

        $r3 = r0[i2];

        $r4 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.util.Locale getLocale()>();

        specialinvoke $r6.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r3, $r4);

        r5[i2] = $r6;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label2:
        virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: void setFormats(java.text.DateFormat[])>(r5);

        return;
    }

    public transient void setFormats(java.text.DateFormat[])
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter $r4;
        javax.swing.JFormattedTextField $r5;
        org.jdesktop.swingx.JXDatePicker r1;
        java.text.DateFormat[] r0, $r2, $r7;
        javax.swing.text.DefaultFormatterFactory $r3;
        java.util.Locale $r6;

        r1 := @this: org.jdesktop.swingx.JXDatePicker;

        r0 := @parameter0: java.text.DateFormat[];

        if r0 == null goto label1;

        staticinvoke <org.jdesktop.swingx.util.Contract: java.lang.Object asNotNull(java.lang.Object,java.lang.String)>(r0, "the array of formats must not contain null elements");

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.text.DateFormat[] getFormats()>();

        $r5 = r1.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        $r3 = new javax.swing.text.DefaultFormatterFactory;

        $r4 = new org.jdesktop.swingx.calendar.DatePickerFormatter;

        $r6 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.util.Locale getLocale()>();

        specialinvoke $r4.<org.jdesktop.swingx.calendar.DatePickerFormatter: void <init>(java.text.DateFormat[],java.util.Locale)>(r0, $r6);

        specialinvoke $r3.<javax.swing.text.DefaultFormatterFactory: void <init>(javax.swing.JFormattedTextField$AbstractFormatter)>($r4);

        virtualinvoke $r5.<javax.swing.JFormattedTextField: void setFormatterFactory(javax.swing.JFormattedTextField$AbstractFormatterFactory)>($r3);

        $r7 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.text.DateFormat[] getFormats()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("formats", $r2, $r7);

        return;
    }

    public java.text.DateFormat[] getFormats()
    {
        org.jdesktop.swingx.calendar.DatePickerFormatter $r6;
        javax.swing.JFormattedTextField $r1, $r4;
        org.jdesktop.swingx.JXDatePicker r0;
        java.text.DateFormat[] $r3, $r7;
        javax.swing.JFormattedTextField$AbstractFormatterFactory $r2;
        javax.swing.JFormattedTextField$AbstractFormatter $r5;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        $r2 = virtualinvoke $r1.<javax.swing.JFormattedTextField: javax.swing.JFormattedTextField$AbstractFormatterFactory getFormatterFactory()>();

        if $r2 == null goto label1;

        $r4 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        $r5 = virtualinvoke $r2.<javax.swing.JFormattedTextField$AbstractFormatterFactory: javax.swing.JFormattedTextField$AbstractFormatter getFormatter(javax.swing.JFormattedTextField)>($r4);

        $z0 = $r5 instanceof org.jdesktop.swingx.calendar.DatePickerFormatter;

        if $z0 == 0 goto label1;

        $r6 = (org.jdesktop.swingx.calendar.DatePickerFormatter) $r5;

        $r7 = virtualinvoke $r6.<org.jdesktop.swingx.calendar.DatePickerFormatter: java.text.DateFormat[] getFormats()>();

        return $r7;

     label1:
        $r3 = <org.jdesktop.swingx.JXDatePicker: java.text.DateFormat[] EMPTY_DATE_FORMATS>;

        return $r3;
    }

    public org.jdesktop.swingx.JXMonthView getMonthView()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        return $r1;
    }

    public void setMonthView(org.jdesktop.swingx.JXMonthView)
    {
        org.jdesktop.swingx.JXMonthView r0, $r2, $r5, $r7;
        org.jdesktop.swingx.JXDatePicker r1;
        java.util.TimeZone $r3, $r8;
        java.beans.PropertyChangeListener $r4, $r6;

        r1 := @this: org.jdesktop.swingx.JXDatePicker;

        r0 := @parameter0: org.jdesktop.swingx.JXMonthView;

        staticinvoke <org.jdesktop.swingx.util.Contract: java.lang.Object asNotNull(java.lang.Object,java.lang.String)>(r0, "monthView must not be null");

        $r2 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView getMonthView()>();

        $r3 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.util.TimeZone getTimeZone()>();

        $r4 = specialinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.beans.PropertyChangeListener getMonthViewListener()>();

        virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: void removePropertyChangeListener(java.beans.PropertyChangeListener)>($r4);

        r1.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView> = r0;

        $r5 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView getMonthView()>();

        $r6 = specialinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.beans.PropertyChangeListener getMonthViewListener()>();

        virtualinvoke $r5.<org.jdesktop.swingx.JXMonthView: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r6);

        $r7 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView getMonthView()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("monthView", $r2, $r7);

        $r8 = virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: java.util.TimeZone getTimeZone()>();

        virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("timeZone", $r3, $r8);

        return;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r1;
        java.util.TimeZone $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXMonthView: java.util.TimeZone getTimeZone()>();

        return $r2;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r2;
        java.util.TimeZone r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.util.TimeZone;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: void setTimeZone(java.util.TimeZone)>(r1);

        return;
    }

    public java.util.Date getLinkDay()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Date $r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date linkDate>;

        return $r1;
    }

    public void setLinkDay(java.util.Date, java.lang.String)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Date r3;
        java.lang.String r2;
        java.text.MessageFormat $r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r3 := @parameter0: java.util.Date;

        r2 := @parameter1: java.lang.String;

        $r1 = new java.text.MessageFormat;

        specialinvoke $r1.<java.text.MessageFormat: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setLinkFormat(java.text.MessageFormat)>($r1);

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setLinkDay(java.util.Date)>(r3);

        return;
    }

    public void setLinkDay(java.util.Date)
    {
        java.text.Format r5;
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Date r1;
        java.util.TimeZone $r7;
        org.jdesktop.swingx.JXDatePicker$TodayPanel $r4;
        java.text.MessageFormat $r2;
        java.text.Format[] $r3;
        int i0, i1;
        java.text.DateFormat $r6;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.util.Date;

        r0.<org.jdesktop.swingx.JXDatePicker: java.util.Date linkDate> = r1;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.text.MessageFormat getLinkFormat()>();

        $r3 = virtualinvoke $r2.<java.text.MessageFormat: java.text.Format[] getFormatsByArgumentIndex()>();

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = $r3[i1];

        $z0 = r5 instanceof java.text.DateFormat;

        if $z0 == 0 goto label2;

        $r6 = (java.text.DateFormat) r5;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.util.TimeZone getTimeZone()>();

        virtualinvoke $r6.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r7);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = new org.jdesktop.swingx.JXDatePicker$TodayPanel;

        specialinvoke $r4.<org.jdesktop.swingx.JXDatePicker$TodayPanel: void <init>(org.jdesktop.swingx.JXDatePicker)>(r0);

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setLinkPanel(javax.swing.JPanel)>($r4);

        return;
    }

    protected void setLinkFormat(java.text.MessageFormat)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.text.MessageFormat r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.text.MessageFormat;

        r0.<org.jdesktop.swingx.JXDatePicker: java.text.MessageFormat _linkFormat> = r1;

        return;
    }

    protected java.text.MessageFormat getLinkFormat()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.text.MessageFormat $r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: java.text.MessageFormat _linkFormat>;

        return $r1;
    }

    private void updateLinkFormat()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        java.util.Locale $r1;
        java.lang.String $r2;
        java.text.MessageFormat $r3, $r4;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.util.Locale getLocale()>();

        $r2 = staticinvoke <org.jdesktop.swingx.plaf.UIManagerExt: java.lang.String getString(java.lang.Object,java.util.Locale)>("JXDatePicker.linkFormat", $r1);

        if $r2 == null goto label1;

        $r4 = new java.text.MessageFormat;

        specialinvoke $r4.<java.text.MessageFormat: void <init>(java.lang.String)>($r2);

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setLinkFormat(java.text.MessageFormat)>($r4);

        goto label2;

     label1:
        $r3 = new java.text.MessageFormat;

        specialinvoke $r3.<java.text.MessageFormat: void <init>(java.lang.String)>("{0,date, dd MMMM yyyy}");

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void setLinkFormat(java.text.MessageFormat)>($r3);

     label2:
        return;
    }

    public javax.swing.JPanel getLinkPanel()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        javax.swing.JPanel $r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JPanel _linkPanel>;

        return $r1;
    }

    public void setLinkPanel(javax.swing.JPanel)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        javax.swing.JPanel r1, r2, $r3;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r2 := @parameter0: javax.swing.JPanel;

        r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JPanel _linkPanel>;

        r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JPanel _linkPanel> = r2;

        $r3 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JPanel _linkPanel>;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("linkPanel", r1, $r3);

        return;
    }

    public javax.swing.JFormattedTextField getEditor()
    {
        javax.swing.JFormattedTextField $r1;
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        return $r1;
    }

    public void setEditor(javax.swing.JFormattedTextField)
    {
        javax.swing.JFormattedTextField r0, r2, $r3;
        org.jdesktop.swingx.JXDatePicker r1;

        r1 := @this: org.jdesktop.swingx.JXDatePicker;

        r0 := @parameter0: javax.swing.JFormattedTextField;

        staticinvoke <org.jdesktop.swingx.util.Contract: java.lang.Object asNotNull(java.lang.Object,java.lang.String)>(r0, "editor must not be null");

        r2 = r1.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        r1.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField> = r0;

        $r3 = r1.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        virtualinvoke r1.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("editor", r2, $r3);

        return;
    }

    public void setComponentOrientation(java.awt.ComponentOrientation)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r2;
        java.awt.ComponentOrientation r1;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.awt.ComponentOrientation;

        specialinvoke r0.<javax.swing.JComponent: void setComponentOrientation(java.awt.ComponentOrientation)>(r1);

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: void setComponentOrientation(java.awt.ComponentOrientation)>(r1);

        return;
    }

    public boolean isEditValid()
    {
        javax.swing.JFormattedTextField $r1;
        org.jdesktop.swingx.JXDatePicker r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        $z0 = virtualinvoke $r1.<javax.swing.JFormattedTextField: boolean isEditValid()>();

        return $z0;
    }

    public void commitEdit() throws java.text.ParseException
    {
        javax.swing.JFormattedTextField $r1;
        org.jdesktop.swingx.JXDatePicker r0;
        java.text.ParseException $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

     label1:
        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        virtualinvoke $r1.<javax.swing.JFormattedTextField: void commitEdit()>();

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void fireActionPerformed(java.lang.String)>("datePickerCommit");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        throw $r2;

     label4:
        return;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public void cancelEdit()
    {
        javax.swing.JFormattedTextField $r1, $r2;
        org.jdesktop.swingx.JXDatePicker r0;
        java.lang.Object $r3;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField _dateField>;

        $r3 = virtualinvoke $r1.<javax.swing.JFormattedTextField: java.lang.Object getValue()>();

        virtualinvoke $r2.<javax.swing.JFormattedTextField: void setValue(java.lang.Object)>($r3);

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void fireActionPerformed(java.lang.String)>("datePickerCancel");

        return;
    }

    public void setEditable(boolean)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        boolean $z0, z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: boolean isEditable()>();

        r0.<org.jdesktop.swingx.JXDatePicker: boolean editable> = z1;

        $z2 = r0.<org.jdesktop.swingx.JXDatePicker: boolean editable>;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,boolean,boolean)>("editable", $z0, $z2);

        $z3 = r0.<org.jdesktop.swingx.JXDatePicker: boolean editable>;

        if $z3 == $z0 goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void repaint()>();

     label1:
        return;
    }

    public boolean isEditable()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $z0 = r0.<org.jdesktop.swingx.JXDatePicker: boolean editable>;

        return $z0;
    }

    public java.awt.Font getFont()
    {
        javax.swing.JFormattedTextField $r1;
        org.jdesktop.swingx.JXDatePicker r0;
        java.awt.Font $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField getEditor()>();

        $r2 = virtualinvoke $r1.<javax.swing.JFormattedTextField: java.awt.Font getFont()>();

        return $r2;
    }

    public void setFont(java.awt.Font)
    {
        javax.swing.JFormattedTextField $r1;
        org.jdesktop.swingx.JXDatePicker r0;
        java.awt.Font r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r2 := @parameter0: java.awt.Font;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.JFormattedTextField getEditor()>();

        virtualinvoke $r1.<javax.swing.JFormattedTextField: void setFont(java.awt.Font)>(r2);

        return;
    }

    public void setLightWeightPopupEnabled(boolean)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        boolean z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        z1 := @parameter0: boolean;

        z0 = r0.<org.jdesktop.swingx.JXDatePicker: boolean lightWeightPopupEnabled>;

        r0.<org.jdesktop.swingx.JXDatePicker: boolean lightWeightPopupEnabled> = z1;

        $z2 = r0.<org.jdesktop.swingx.JXDatePicker: boolean lightWeightPopupEnabled>;

        virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: void firePropertyChange(java.lang.String,boolean,boolean)>("lightWeightPopupEnabled", z0, $z2);

        return;
    }

    public boolean isLightWeightPopupEnabled()
    {
        org.jdesktop.swingx.JXDatePicker r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $z0 = r0.<org.jdesktop.swingx.JXDatePicker: boolean lightWeightPopupEnabled>;

        return $z0;
    }

    public int getBaseline(int, int)
    {
        org.jdesktop.swingx.plaf.DatePickerUI $r2;
        javax.swing.plaf.ComponentUI $r1;
        org.jdesktop.swingx.JXDatePicker r0;
        int i0, i1, $i2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: javax.swing.plaf.ComponentUI ui>;

        $r2 = (org.jdesktop.swingx.plaf.DatePickerUI) $r1;

        $i2 = virtualinvoke $r2.<org.jdesktop.swingx.plaf.DatePickerUI: int getBaseline(int,int)>(i0, i1);

        return $i2;
    }

    public void addActionListener(java.awt.event.ActionListener)
    {
        java.awt.event.ActionListener r1;
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.event.EventListenerMap $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.awt.event.ActionListener;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.event.EventListenerMap listenerMap>;

        virtualinvoke $r2.<org.jdesktop.swingx.event.EventListenerMap: void add(java.lang.Class,java.util.EventListener)>(class "Ljava/awt/event/ActionListener;", r1);

        return;
    }

    public void removeActionListener(java.awt.event.ActionListener)
    {
        java.awt.event.ActionListener r1;
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.event.EventListenerMap $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.awt.event.ActionListener;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.event.EventListenerMap listenerMap>;

        virtualinvoke $r2.<org.jdesktop.swingx.event.EventListenerMap: void remove(java.lang.Class,java.util.EventListener)>(class "Ljava/awt/event/ActionListener;", r1);

        return;
    }

    public java.util.EventListener[] getListeners(java.lang.Class)
    {
        java.util.EventListener[] $r5, r7, r8;
        java.lang.Object[] $r6;
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.event.EventListenerMap $r2;
        java.util.List $r3;
        int $i0;
        java.lang.Class r1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.event.EventListenerMap listenerMap>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.event.EventListenerMap: java.util.List getListeners(java.lang.Class)>(r1);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, $i0);

        $r5 = (java.util.EventListener[]) $r4;

        r7 = (java.util.EventListener[]) $r5;

        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r7);

        r8 = (java.util.EventListener[]) $r6;

        goto label2;

     label1:
        r8 = specialinvoke r0.<javax.swing.JComponent: java.util.EventListener[] getListeners(java.lang.Class)>(r1);

     label2:
        return r8;
    }

    protected void fireActionPerformed(java.lang.String)
    {
        java.util.EventListener[] $r1;
        java.awt.event.ActionListener r3;
        org.jdesktop.swingx.JXDatePicker r0;
        java.awt.event.ActionEvent $r4, r6;
        int i0, i1;
        java.lang.String r5;
        java.awt.event.ActionListener[] r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r5 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.util.EventListener[] getListeners(java.lang.Class)>(class "Ljava/awt/event/ActionListener;");

        r2 = (java.awt.event.ActionListener[]) $r1;

        r6 = null;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        if r6 != null goto label2;

        $r4 = new java.awt.event.ActionEvent;

        specialinvoke $r4.<java.awt.event.ActionEvent: void <init>(java.lang.Object,int,java.lang.String)>(r0, 1001, r5);

        r6 = $r4;

     label2:
        interfaceinvoke r3.<java.awt.event.ActionListener: void actionPerformed(java.awt.event.ActionEvent)>(r6);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void addPopupMenuListener(javax.swing.event.PopupMenuListener)
    {
        javax.swing.event.PopupMenuListener r1;
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.event.EventListenerMap $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: javax.swing.event.PopupMenuListener;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.event.EventListenerMap listenerMap>;

        virtualinvoke $r2.<org.jdesktop.swingx.event.EventListenerMap: void add(java.lang.Class,java.util.EventListener)>(class "Ljavax/swing/event/PopupMenuListener;", r1);

        return;
    }

    public void removePopupMenuListener(javax.swing.event.PopupMenuListener)
    {
        javax.swing.event.PopupMenuListener r1;
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.event.EventListenerMap $r2;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        r1 := @parameter0: javax.swing.event.PopupMenuListener;

        $r2 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.event.EventListenerMap listenerMap>;

        virtualinvoke $r2.<org.jdesktop.swingx.event.EventListenerMap: void remove(java.lang.Class,java.util.EventListener)>(class "Ljavax/swing/event/PopupMenuListener;", r1);

        return;
    }

    public javax.swing.event.PopupMenuListener[] getPopupMenuListeners()
    {
        java.util.EventListener[] $r1;
        javax.swing.event.PopupMenuListener[] $r2;
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @this: org.jdesktop.swingx.JXDatePicker;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXDatePicker: java.util.EventListener[] getListeners(java.lang.Class)>(class "Ljavax/swing/event/PopupMenuListener;");

        $r2 = (javax.swing.event.PopupMenuListener[]) $r1;

        return $r2;
    }

    static void access$100(org.jdesktop.swingx.JXDatePicker)
    {
        org.jdesktop.swingx.JXDatePicker r0;

        r0 := @parameter0: org.jdesktop.swingx.JXDatePicker;

        specialinvoke r0.<org.jdesktop.swingx.JXDatePicker: void updateLinkFormat()>();

        return;
    }

    static org.jdesktop.swingx.JXMonthView access$200(org.jdesktop.swingx.JXDatePicker)
    {
        org.jdesktop.swingx.JXDatePicker r0;
        org.jdesktop.swingx.JXMonthView $r1;

        r0 := @parameter0: org.jdesktop.swingx.JXDatePicker;

        $r1 = r0.<org.jdesktop.swingx.JXDatePicker: org.jdesktop.swingx.JXMonthView _monthView>;

        return $r1;
    }

    static void <clinit>()
    {
        org.jdesktop.swingx.plaf.DatePickerAddon $r3;
        java.text.DateFormat[] $r4;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.jdesktop.swingx.JXDatePicker: java.lang.String HOME_COMMIT_KEY> = "commitHome";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String HOME_NAVIGATE_KEY> = "navigateHome";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String CANCEL_KEY> = "datePickerCancel";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String COMMIT_KEY> = "datePickerCommit";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String LINK_PANEL> = "linkPanel";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String MONTH_VIEW> = "monthView";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String EDITOR> = "editor";

        <org.jdesktop.swingx.JXDatePicker: java.lang.String uiClassID> = "DatePickerUI";

        $r0 = class "Lorg/jdesktop/swingx/JXDatePicker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.JXDatePicker: java.util.logging.Logger LOG> = $r2;

        $r3 = new org.jdesktop.swingx.plaf.DatePickerAddon;

        specialinvoke $r3.<org.jdesktop.swingx.plaf.DatePickerAddon: void <init>()>();

        staticinvoke <org.jdesktop.swingx.plaf.LookAndFeelAddons: void contribute(org.jdesktop.swingx.plaf.ComponentAddon)>($r3);

        $r4 = newarray (java.text.DateFormat)[0];

        <org.jdesktop.swingx.JXDatePicker: java.text.DateFormat[] EMPTY_DATE_FORMATS> = $r4;

        return;
    }
}
