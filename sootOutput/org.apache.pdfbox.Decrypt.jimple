public class org.apache.pdfbox.Decrypt extends java.lang.Object
{
    private static final java.lang.String ALIAS;
    private static final java.lang.String PASSWORD;
    private static final java.lang.String KEYSTORE;

    private void <init>()
    {
        org.apache.pdfbox.Decrypt r0;

        r0 := @this: org.apache.pdfbox.Decrypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.pdfbox.Decrypt $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.pdfbox.Decrypt;

        specialinvoke $r0.<org.apache.pdfbox.Decrypt: void <init>()>();

        specialinvoke $r0.<org.apache.pdfbox.Decrypt: void decrypt(java.lang.String[])>(r1);

        return;
    }

    private void decrypt(java.lang.String[]) throws java.lang.Exception
    {
        org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial r21;
        org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.pdfbox.pdmodel.encryption.AccessPermission $r4;
        org.apache.pdfbox.pdmodel.PDDocument $r1, r20;
        java.security.KeyStore $r6;
        org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial $r3;
        java.lang.Throwable $r13;
        org.apache.pdfbox.Decrypt r14;
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r10, $r11, $r12, r15, r16, r17, r18, r19;
        java.io.PrintStream $r2;
        java.io.IOException $r5;
        java.io.FileInputStream $r7;
        char[] $r8;

        r14 := @this: org.apache.pdfbox.Decrypt;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 < 2 goto label01;

        $i1 = lengthof r0;

        if $i1 <= 5 goto label02;

     label01:
        staticinvoke <org.apache.pdfbox.Decrypt: void usage()>();

        goto label27;

     label02:
        r15 = null;

        r16 = null;

        r17 = null;

        r18 = null;

        r19 = null;

        i6 = 0;

     label03:
        $i2 = lengthof r0;

        if i6 >= $i2 goto label13;

        $r10 = r0[i6];

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("-alias");

        if $z2 == 0 goto label05;

        i6 = i6 + 1;

        $i5 = lengthof r0;

        if i6 < $i5 goto label04;

        staticinvoke <org.apache.pdfbox.Decrypt: void usage()>();

     label04:
        r18 = r0[i6];

        goto label12;

     label05:
        $r11 = r0[i6];

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("-keyStore");

        if $z3 == 0 goto label07;

        i6 = i6 + 1;

        $i4 = lengthof r0;

        if i6 < $i4 goto label06;

        staticinvoke <org.apache.pdfbox.Decrypt: void usage()>();

     label06:
        r19 = r0[i6];

        goto label12;

     label07:
        $r12 = r0[i6];

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("-password");

        if $z4 == 0 goto label09;

        i6 = i6 + 1;

        $i3 = lengthof r0;

        if i6 < $i3 goto label08;

        staticinvoke <org.apache.pdfbox.Decrypt: void usage()>();

     label08:
        r15 = r0[i6];

        goto label12;

     label09:
        if r16 != null goto label10;

        r16 = r0[i6];

        goto label12;

     label10:
        if r17 != null goto label11;

        r17 = r0[i6];

        goto label12;

     label11:
        staticinvoke <org.apache.pdfbox.Decrypt: void usage()>();

     label12:
        i6 = i6 + 1;

        goto label03;

     label13:
        if r16 != null goto label14;

        staticinvoke <org.apache.pdfbox.Decrypt: void usage()>();

     label14:
        if r17 != null goto label15;

        r17 = r16;

     label15:
        if r15 != null goto label16;

        r15 = "";

     label16:
        r20 = null;

     label17:
        $r1 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.lang.String)>(r16);

        r20 = $r1;

        $z0 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>();

        if $z0 == 0 goto label22;

        if r19 == null goto label18;

        $r6 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("PKCS12");

        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.lang.String)>(r19);

        $r8 = virtualinvoke r15.<java.lang.String: char[] toCharArray()>();

        virtualinvoke $r6.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r7, $r8);

        $r9 = new org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial;

        specialinvoke $r9.<org.apache.pdfbox.pdmodel.encryption.PublicKeyDecryptionMaterial: void <init>(java.security.KeyStore,java.lang.String,java.lang.String)>($r6, r18, r15);

        r21 = $r9;

        goto label19;

     label18:
        $r3 = new org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial: void <init>(java.lang.String)>(r15);

        r21 = $r3;

     label19:
        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void openProtection(org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial)>(r21);

        $r4 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.AccessPermission getCurrentAccessPermission()>();

        $z1 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: boolean isOwnerPermission()>();

        if $z1 == 0 goto label20;

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void setAllSecurityToBeRemoved(boolean)>(1);

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void save(java.lang.String)>(r17);

        goto label21;

     label20:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Error: You are only allowed to decrypt a document with the owner password.");

        throw $r5;

     label21:
        goto label23;

     label22:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Error: Document is not encrypted.");

     label23:
        goto label28;

     label24:
        goto label27;

     label25:
        $r13 := @caughtexception;

        goto label30;

     label26:
        throw $r13;

     label27:
        return;

     label28:
        if $r1 == null goto label29;

        virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label29:
        goto label24;

     label30:
        if r20 == null goto label31;

        virtualinvoke r20.<org.apache.pdfbox.pdmodel.PDDocument: void close()>();

     label31:
        goto label26;

        catch java.lang.Throwable from label17 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    private static void usage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3;
        int $i1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: java -jar pdfbox-app-x.y.z.jar Decrypt [options] <inputfile> [outputfile]");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("-alias      The alias of the key in the certificate file (mandatory if several keys are available)");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("-password   The password to open the certificate and extract the private key from it.");

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("-keyStore   The KeyStore that holds the certificate.");

        $i1 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.pdfbox.Decrypt: java.lang.String KEYSTORE> = "-keyStore";

        <org.apache.pdfbox.Decrypt: java.lang.String PASSWORD> = "-password";

        <org.apache.pdfbox.Decrypt: java.lang.String ALIAS> = "-alias";

        return;
    }
}
