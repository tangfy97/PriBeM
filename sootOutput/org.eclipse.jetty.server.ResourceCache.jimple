public class org.eclipse.jetty.server.ResourceCache extends java.lang.Object
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private final java.util.concurrent.ConcurrentMap _cache;
    private final java.util.concurrent.atomic.AtomicInteger _cachedSize;
    private final java.util.concurrent.atomic.AtomicInteger _cachedFiles;
    private final org.eclipse.jetty.util.resource.ResourceFactory _factory;
    private final org.eclipse.jetty.server.ResourceCache _parent;
    private final org.eclipse.jetty.http.MimeTypes _mimeTypes;
    private final boolean _etags;
    private boolean _useFileMappedBuffer;
    private int _maxCachedFileSize;
    private int _maxCachedFiles;
    private int _maxCacheSize;

    public void <init>(org.eclipse.jetty.server.ResourceCache, org.eclipse.jetty.util.resource.ResourceFactory, org.eclipse.jetty.http.MimeTypes, boolean, boolean)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        org.eclipse.jetty.util.resource.ResourceFactory r1;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        org.eclipse.jetty.server.ResourceCache r0, r6;
        org.eclipse.jetty.http.MimeTypes r5;
        boolean z0, z1;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        r6 := @parameter0: org.eclipse.jetty.server.ResourceCache;

        r1 := @parameter1: org.eclipse.jetty.util.resource.ResourceFactory;

        r5 := @parameter2: org.eclipse.jetty.http.MimeTypes;

        z1 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jetty.server.ResourceCache: boolean _useFileMappedBuffer> = 1;

        r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFileSize> = 4194304;

        r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFiles> = 2048;

        r0.<org.eclipse.jetty.server.ResourceCache: int _maxCacheSize> = 33554432;

        r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.resource.ResourceFactory _factory> = r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedSize> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedFiles> = $r4;

        r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.http.MimeTypes _mimeTypes> = r5;

        r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.server.ResourceCache _parent> = r6;

        r0.<org.eclipse.jetty.server.ResourceCache: boolean _etags> = z0;

        r0.<org.eclipse.jetty.server.ResourceCache: boolean _useFileMappedBuffer> = z1;

        return;
    }

    public int getCachedSize()
    {
        int $i0;
        org.eclipse.jetty.server.ResourceCache r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedSize>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public int getCachedFiles()
    {
        int $i0;
        org.eclipse.jetty.server.ResourceCache r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedFiles>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i0;
    }

    public int getMaxCachedFileSize()
    {
        int $i0;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $i0 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFileSize>;

        return $i0;
    }

    public void setMaxCachedFileSize(int)
    {
        int i0;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFileSize> = i0;

        specialinvoke r0.<org.eclipse.jetty.server.ResourceCache: void shrinkCache()>();

        return;
    }

    public int getMaxCacheSize()
    {
        int $i0;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $i0 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCacheSize>;

        return $i0;
    }

    public void setMaxCacheSize(int)
    {
        int i0;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.ResourceCache: int _maxCacheSize> = i0;

        specialinvoke r0.<org.eclipse.jetty.server.ResourceCache: void shrinkCache()>();

        return;
    }

    public int getMaxCachedFiles()
    {
        int $i0;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $i0 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFiles>;

        return $i0;
    }

    public void setMaxCachedFiles(int)
    {
        int i0;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        i0 := @parameter0: int;

        r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFiles> = i0;

        specialinvoke r0.<org.eclipse.jetty.server.ResourceCache: void shrinkCache()>();

        return;
    }

    public boolean isUseFileMappedBuffer()
    {
        org.eclipse.jetty.server.ResourceCache r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $z0 = r0.<org.eclipse.jetty.server.ResourceCache: boolean _useFileMappedBuffer>;

        return $z0;
    }

    public void setUseFileMappedBuffer(boolean)
    {
        org.eclipse.jetty.server.ResourceCache r0;
        boolean z0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        z0 := @parameter0: boolean;

        r0.<org.eclipse.jetty.server.ResourceCache: boolean _useFileMappedBuffer> = z0;

        return;
    }

    public void flushCache()
    {
        java.util.Iterator $r5;
        java.util.Set $r4;
        java.util.concurrent.ConcurrentMap $r1, $r2, $r3, $r8;
        org.eclipse.jetty.server.ResourceCache$Content r10;
        int $i0;
        java.lang.Object $r6, $r9;
        java.lang.String r7;
        org.eclipse.jetty.server.ResourceCache r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        if $r1 == null goto label5;

     label1:
        $r2 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $i0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: int size()>();

        if $i0 <= 0 goto label5;

        $r3 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r8 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(r7);

        r10 = (org.eclipse.jetty.server.ResourceCache$Content) $r9;

        if r10 == null goto label3;

        virtualinvoke r10.<org.eclipse.jetty.server.ResourceCache$Content: void invalidate()>();

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    public org.eclipse.jetty.http.HttpContent lookup(java.lang.String) throws java.io.IOException
    {
        org.eclipse.jetty.http.HttpContent $r7, $r10;
        org.eclipse.jetty.util.resource.ResourceFactory $r5;
        java.util.concurrent.ConcurrentMap $r2;
        org.eclipse.jetty.server.ResourceCache$Content r4;
        org.eclipse.jetty.util.resource.Resource $r6;
        java.lang.Object $r3;
        java.lang.String r1;
        org.eclipse.jetty.server.ResourceCache r0, $r8, $r9;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.eclipse.jetty.server.ResourceCache$Content) $r3;

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<org.eclipse.jetty.server.ResourceCache$Content: boolean isValid()>();

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $r5 = r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.resource.ResourceFactory _factory>;

        $r6 = interfaceinvoke $r5.<org.eclipse.jetty.util.resource.ResourceFactory: org.eclipse.jetty.util.resource.Resource getResource(java.lang.String)>(r1);

        $r7 = specialinvoke r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.http.HttpContent load(java.lang.String,org.eclipse.jetty.util.resource.Resource)>(r1, $r6);

        if $r7 == null goto label2;

        return $r7;

     label2:
        $r8 = r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.server.ResourceCache _parent>;

        if $r8 == null goto label3;

        $r9 = r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.server.ResourceCache _parent>;

        $r10 = virtualinvoke $r9.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.http.HttpContent lookup(java.lang.String)>(r1);

        if $r10 == null goto label3;

        return $r10;

     label3:
        return null;
    }

    protected boolean isCacheable(org.eclipse.jetty.util.resource.Resource)
    {
        long $l0, $l3, $l6;
        byte $b1, $b4, $b7;
        org.eclipse.jetty.util.resource.Resource r0;
        int $i2, $i5, $i8, $i9, $i10;
        org.eclipse.jetty.server.ResourceCache r1;
        boolean $z0;

        r1 := @this: org.eclipse.jetty.server.ResourceCache;

        r0 := @parameter0: org.eclipse.jetty.util.resource.Resource;

        $l0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: long length()>();

        $b1 = $l0 cmp 0L;

        $i8 = (int) $b1;

        if $i8 <= 0 goto label1;

        $i2 = r1.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFileSize>;

        $l3 = (long) $i2;

        $b4 = $l0 cmp $l3;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label1;

        $i5 = r1.<org.eclipse.jetty.server.ResourceCache: int _maxCacheSize>;

        $l6 = (long) $i5;

        $b7 = $l0 cmp $l6;

        $i10 = (int) $b7;

        if $i10 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private org.eclipse.jetty.http.HttpContent load(java.lang.String, org.eclipse.jetty.util.resource.Resource) throws java.io.IOException
    {
        org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent $r1;
        java.util.concurrent.ConcurrentMap $r8;
        int $i0;
        java.lang.String $r4, r7;
        org.eclipse.jetty.io.Buffer $r5;
        boolean $z0, $z1, $z2, $z3;
        org.eclipse.jetty.server.ResourceCache$Content $r6, r10, r11;
        org.eclipse.jetty.util.resource.Resource r0;
        java.lang.Object $r9;
        org.eclipse.jetty.server.ResourceCache r2;
        org.eclipse.jetty.http.MimeTypes $r3;

        r2 := @this: org.eclipse.jetty.server.ResourceCache;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: org.eclipse.jetty.util.resource.Resource;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: boolean exists()>();

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        $z1 = virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: boolean isDirectory()>();

        if $z1 != 0 goto label4;

        $z3 = virtualinvoke r2.<org.eclipse.jetty.server.ResourceCache: boolean isCacheable(org.eclipse.jetty.util.resource.Resource)>(r0);

        if $z3 == 0 goto label4;

        $r6 = new org.eclipse.jetty.server.ResourceCache$Content;

        specialinvoke $r6.<org.eclipse.jetty.server.ResourceCache$Content: void <init>(org.eclipse.jetty.server.ResourceCache,java.lang.String,org.eclipse.jetty.util.resource.Resource)>(r2, r7, r0);

        r11 = $r6;

        specialinvoke r2.<org.eclipse.jetty.server.ResourceCache: void shrinkCache()>();

        $r8 = r2.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $r9 = interfaceinvoke $r8.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r7, $r6);

        r10 = (org.eclipse.jetty.server.ResourceCache$Content) $r9;

        if r10 == null goto label3;

        virtualinvoke $r6.<org.eclipse.jetty.server.ResourceCache$Content: void invalidate()>();

        r11 = r10;

     label3:
        return r11;

     label4:
        $r1 = new org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent;

        $r3 = r2.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.http.MimeTypes _mimeTypes>;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<org.eclipse.jetty.http.MimeTypes: org.eclipse.jetty.io.Buffer getMimeByExtension(java.lang.String)>($r4);

        $i0 = virtualinvoke r2.<org.eclipse.jetty.server.ResourceCache: int getMaxCachedFileSize()>();

        $z2 = r2.<org.eclipse.jetty.server.ResourceCache: boolean _etags>;

        specialinvoke $r1.<org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent: void <init>(org.eclipse.jetty.util.resource.Resource,org.eclipse.jetty.io.Buffer,int,boolean)>(r0, $r5, $i0, $z2);

        return $r1;
    }

    private void shrinkCache()
    {
        org.eclipse.jetty.server.ResourceCache$1 $r4;
        java.util.TreeSet $r3;
        java.util.concurrent.ConcurrentMap $r1, $r5, $r11;
        java.util.concurrent.atomic.AtomicInteger $r2, $r10, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.util.Iterator $r7, $r8;
        java.util.Collection $r6;
        org.eclipse.jetty.server.ResourceCache$Content r17, r18;
        java.lang.Object $r9, $r13, $r15;
        org.eclipse.jetty.server.ResourceCache r0;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

     label1:
        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: int size()>();

        if $i0 <= 0 goto label9;

        $r2 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedFiles>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFiles>;

        if $i1 > $i2 goto label2;

        $r16 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedSize>;

        $i7 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i8 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCacheSize>;

        if $i7 <= $i8 goto label9;

     label2:
        $r3 = new java.util.TreeSet;

        $r4 = new org.eclipse.jetty.server.ResourceCache$1;

        specialinvoke $r4.<org.eclipse.jetty.server.ResourceCache$1: void <init>(org.eclipse.jetty.server.ResourceCache)>(r0);

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

        $r5 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.eclipse.jetty.server.ResourceCache$Content) $r15;

        interfaceinvoke $r3.<java.util.SortedSet: boolean add(java.lang.Object)>(r17);

        goto label3;

     label4:
        $r8 = interfaceinvoke $r3.<java.util.SortedSet: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.eclipse.jetty.server.ResourceCache$Content) $r9;

        $r10 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedFiles>;

        $i3 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i4 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCachedFiles>;

        if $i3 > $i4 goto label6;

        $r14 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedSize>;

        $i5 = virtualinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i6 = r0.<org.eclipse.jetty.server.ResourceCache: int _maxCacheSize>;

        if $i5 > $i6 goto label6;

        goto label8;

     label6:
        $r11 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        $r12 = virtualinvoke r18.<org.eclipse.jetty.server.ResourceCache$Content: java.lang.String getKey()>();

        $r13 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r12);

        if r18 != $r13 goto label7;

        virtualinvoke r18.<org.eclipse.jetty.server.ResourceCache$Content: void invalidate()>();

     label7:
        goto label5;

     label8:
        goto label1;

     label9:
        return;
    }

    protected org.eclipse.jetty.io.Buffer getIndirectBuffer(org.eclipse.jetty.util.resource.Resource)
    {
        java.lang.Object[] $r11;
        long $l0;
        org.eclipse.jetty.io.nio.IndirectNIOBuffer $r1;
        int i1;
        java.lang.String $r6, $r10;
        java.io.IOException $r12;
        org.eclipse.jetty.util.resource.Resource r0;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r9;
        org.eclipse.jetty.util.log.Logger $r4, $r13;
        org.eclipse.jetty.server.ResourceCache r14;
        java.io.InputStream $r2;

        r14 := @this: org.eclipse.jetty.server.ResourceCache;

        r0 := @parameter0: org.eclipse.jetty.util.resource.Resource;

     label1:
        $l0 = virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: long length()>();

        i1 = (int) $l0;

        if i1 >= 0 goto label3;

        $r4 = <org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.log.Logger LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid resource: ");

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = newarray (java.lang.Object)[0];

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>($r10, $r11);

     label2:
        return null;

     label3:
        $r1 = new org.eclipse.jetty.io.nio.IndirectNIOBuffer;

        specialinvoke $r1.<org.eclipse.jetty.io.nio.IndirectNIOBuffer: void <init>(int)>(i1);

        $r2 = virtualinvoke r0.<org.eclipse.jetty.util.resource.Resource: java.io.InputStream getInputStream()>();

        interfaceinvoke $r1.<org.eclipse.jetty.io.Buffer: int readFrom(java.io.InputStream,int)>($r2, i1);

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        return $r1;

     label5:
        $r12 := @caughtexception;

        $r13 = <org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r13.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.Throwable)>($r12);

        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected org.eclipse.jetty.io.Buffer getDirectBuffer(org.eclipse.jetty.util.resource.Resource)
    {
        java.lang.Object[] $r12;
        long $l0;
        int $i1;
        java.lang.String $r7, $r11;
        boolean $z0;
        java.io.IOException $r16;
        java.io.File $r13, $r15;
        org.eclipse.jetty.util.resource.Resource r1;
        java.lang.StringBuilder $r4, $r6, $r8, $r9, $r10;
        org.eclipse.jetty.util.log.Logger $r5, $r17;
        org.eclipse.jetty.io.nio.DirectNIOBuffer $r2, $r14;
        org.eclipse.jetty.server.ResourceCache r0;
        java.io.InputStream $r3;

        r0 := @this: org.eclipse.jetty.server.ResourceCache;

        r1 := @parameter0: org.eclipse.jetty.util.resource.Resource;

     label1:
        $z0 = r0.<org.eclipse.jetty.server.ResourceCache: boolean _useFileMappedBuffer>;

        if $z0 == 0 goto label3;

        $r13 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: java.io.File getFile()>();

        if $r13 == null goto label3;

        $r14 = new org.eclipse.jetty.io.nio.DirectNIOBuffer;

        $r15 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: java.io.File getFile()>();

        specialinvoke $r14.<org.eclipse.jetty.io.nio.DirectNIOBuffer: void <init>(java.io.File)>($r15);

     label2:
        return $r14;

     label3:
        $l0 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: long length()>();

        $i1 = (int) $l0;

        if $i1 >= 0 goto label5;

        $r5 = <org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.log.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid resource: ");

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = newarray (java.lang.Object)[0];

        interfaceinvoke $r5.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.String,java.lang.Object[])>($r11, $r12);

     label4:
        return null;

     label5:
        $r2 = new org.eclipse.jetty.io.nio.DirectNIOBuffer;

        specialinvoke $r2.<org.eclipse.jetty.io.nio.DirectNIOBuffer: void <init>(int)>($i1);

        $r3 = virtualinvoke r1.<org.eclipse.jetty.util.resource.Resource: java.io.InputStream getInputStream()>();

        interfaceinvoke $r2.<org.eclipse.jetty.io.Buffer: int readFrom(java.io.InputStream,int)>($r3, $i1);

        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label6:
        return $r2;

     label7:
        $r16 := @caughtexception;

        $r17 = <org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r17.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.Throwable)>($r16);

        return null;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public java.lang.String toString()
    {
        org.eclipse.jetty.util.resource.ResourceFactory $r6;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r9;
        java.lang.String $r10;
        org.eclipse.jetty.server.ResourceCache r2, $r3;

        r2 := @this: org.eclipse.jetty.server.ResourceCache;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ResourceCache[");

        $r3 = r2.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.server.ResourceCache _parent>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r6 = r2.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.resource.ResourceFactory _factory>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]@");

        $i0 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    static org.eclipse.jetty.http.MimeTypes access$000(org.eclipse.jetty.server.ResourceCache)
    {
        org.eclipse.jetty.server.ResourceCache r0;
        org.eclipse.jetty.http.MimeTypes $r1;

        r0 := @parameter0: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.http.MimeTypes _mimeTypes>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$100(org.eclipse.jetty.server.ResourceCache)
    {
        org.eclipse.jetty.server.ResourceCache r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedSize>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$200(org.eclipse.jetty.server.ResourceCache)
    {
        org.eclipse.jetty.server.ResourceCache r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.atomic.AtomicInteger _cachedFiles>;

        return $r1;
    }

    static boolean access$300(org.eclipse.jetty.server.ResourceCache)
    {
        org.eclipse.jetty.server.ResourceCache r0;
        boolean $z0;

        r0 := @parameter0: org.eclipse.jetty.server.ResourceCache;

        $z0 = r0.<org.eclipse.jetty.server.ResourceCache: boolean _etags>;

        return $z0;
    }

    static java.util.concurrent.ConcurrentMap access$400(org.eclipse.jetty.server.ResourceCache)
    {
        org.eclipse.jetty.server.ResourceCache r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @parameter0: org.eclipse.jetty.server.ResourceCache;

        $r1 = r0.<org.eclipse.jetty.server.ResourceCache: java.util.concurrent.ConcurrentMap _cache>;

        return $r1;
    }

    static org.eclipse.jetty.util.log.Logger access$500()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = <org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.log.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/server/ResourceCache;");

        <org.eclipse.jetty.server.ResourceCache: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
