public class org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException extends org.springframework.aop.framework.AopConfigException
{
    private java.lang.Class nonAspectClass;

    public void <init>(java.lang.Class)
    {
        org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException r0;
        java.lang.StringBuilder $r1, $r5;
        java.lang.Class r2;
        java.lang.String $r3, $r4, $r6;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException;

        r2 := @parameter0: java.lang.Class;

        $r1 = new java.lang.StringBuilder;

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an @AspectJ aspect");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.aop.framework.AopConfigException: void <init>(java.lang.String)>($r6);

        r0.<org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException: java.lang.Class nonAspectClass> = r2;

        return;
    }

    public java.lang.Class getNonAspectClass()
    {
        java.lang.Class $r1;
        org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.NotAnAtAspectException: java.lang.Class nonAspectClass>;

        return $r1;
    }
}
