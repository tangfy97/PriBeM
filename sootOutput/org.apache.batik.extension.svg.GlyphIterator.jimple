public class org.apache.batik.extension.svg.GlyphIterator extends java.lang.Object
{
    public static final java.text.AttributedCharacterIterator$Attribute PREFORMATTED;
    public static final java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK;
    public static final java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID;
    public static final java.text.AttributedCharacterIterator$Attribute GVT_FONT;
    public static final char SOFT_HYPHEN;
    public static final char ZERO_WIDTH_SPACE;
    public static final char ZERO_WIDTH_JOINER;
    int idx;
    int chIdx;
    int lineIdx;
    int aciIdx;
    int charCount;
    float adv;
    float adj;
    int runLimit;
    int lineBreakRunLimit;
    int lineBreakCount;
    org.apache.batik.gvt.font.GVTFont font;
    int fontStart;
    float maxAscent;
    float maxDescent;
    float maxFontSize;
    float width;
    char ch;
    int numGlyphs;
    java.text.AttributedCharacterIterator aci;
    org.apache.batik.gvt.font.GVTGlyphVector gv;
    float[] gp;
    java.awt.font.FontRenderContext frc;
    int[] leftShiftIdx;
    float[] leftShiftAmt;
    int leftShift;
    java.awt.geom.Point2D gvBase;

    public void <init>(java.text.AttributedCharacterIterator, org.apache.batik.gvt.font.GVTGlyphVector)
    {
        byte $b11;
        java.util.Map $r17;
        java.text.AttributedCharacterIterator r1;
        float $f0, $f1, $f2, $f3;
        float[] $r12, $r14, $r15;
        org.apache.batik.gvt.font.GVTFont $r6, $r7;
        java.text.AttributedCharacterIterator$Attribute $r4, $r8, $r9, $r10;
        org.apache.batik.gvt.font.GVTGlyphVector r2;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i15, $i17, $i19, $i21;
        org.apache.batik.gvt.font.AWTGVTFont $r18;
        org.apache.batik.extension.svg.GlyphIterator r0;
        char $c4;
        java.awt.font.FontRenderContext $r3;
        java.awt.geom.Point2D$Float $r19;
        java.lang.Object $r5, $r11;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        r2 := @parameter1: org.apache.batik.gvt.font.GVTGlyphVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i13 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int idx> = $i13;

        $i15 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx> = $i15;

        $i17 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineIdx> = $i17;

        $i19 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx> = $i19;

        $i21 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount> = $i21;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adv> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int runLimit> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float width> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: char ch> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int leftShift> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D gvBase> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci> = r1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv> = r2;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int idx> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineIdx> = 0;

        $i0 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();

        r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx> = $i0;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i3 = interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>($i2, $i1);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount> = $i3;

        $c4 = interfaceinvoke r1.<java.text.CharacterIterator: char first()>();

        r0.<org.apache.batik.extension.svg.GlyphIterator: char ch> = $c4;

        $r3 = interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.font.FontRenderContext getFontRenderContext()>();

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.font.FontRenderContext frc> = $r3;

        $r4 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $r5 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r4);

        $r6 = (org.apache.batik.gvt.font.GVTFont) $r5;

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = $r6;

        $r7 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font>;

        if $r7 != null goto label1;

        $r18 = new org.apache.batik.gvt.font.AWTGVTFont;

        $r17 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>();

        specialinvoke $r18.<org.apache.batik.gvt.font.AWTGVTFont: void <init>(java.util.Map)>($r17);

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = $r18;

     label1:
        $i5 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = $i5;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize> = -3.4028235E38F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent> = -3.4028235E38F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent> = -3.4028235E38F;

        $r8 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $i6 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r8);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int runLimit> = $i6;

        $r9 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $i7 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r9);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit> = $i7;

        $r10 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $r11 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r10);

        if $r11 != null goto label2;

        $b11 = 0;

        goto label3;

     label2:
        $b11 = 1;

     label3:
        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount> = $b11;

        $i8 = interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs> = $i8;

        $i9 = r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs>;

        $i10 = $i9 + 1;

        $r12 = interfaceinvoke r2.<org.apache.batik.gvt.font.GVTGlyphVector: float[] getGlyphPositions(int,int,float[])>(0, $i10, null);

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp> = $r12;

        $r19 = new java.awt.geom.Point2D$Float;

        $r14 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        $f1 = $r14[0];

        $r15 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        $f0 = $r15[1];

        specialinvoke $r19.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D gvBase> = $r19;

        $f2 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharWidth()>();

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adv> = $f2;

        $f3 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharAdvance()>();

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = $f3;

        return;
    }

    public void <init>(org.apache.batik.extension.svg.GlyphIterator)
    {
        int $i1, $i3, $i5, $i7, $i9;
        org.apache.batik.extension.svg.GlyphIterator r0, r1;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        r1 := @parameter0: org.apache.batik.extension.svg.GlyphIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int idx> = $i1;

        $i3 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx> = $i3;

        $i5 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineIdx> = $i5;

        $i7 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx> = $i7;

        $i9 = (int) -1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount> = $i9;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adv> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int runLimit> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float width> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: char ch> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int leftShift> = 0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D gvBase> = null;

        virtualinvoke r1.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)>(r0);

        return;
    }

    public org.apache.batik.extension.svg.GlyphIterator copy()
    {
        org.apache.batik.extension.svg.GlyphIterator $r0, r1;

        r1 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $r0 = new org.apache.batik.extension.svg.GlyphIterator;

        specialinvoke $r0.<org.apache.batik.extension.svg.GlyphIterator: void <init>(org.apache.batik.extension.svg.GlyphIterator)>(r1);

        return $r0;
    }

    public org.apache.batik.extension.svg.GlyphIterator copy(org.apache.batik.extension.svg.GlyphIterator)
    {
        java.awt.geom.Point2D $r3;
        float[] $r2, $r7;
        org.apache.batik.gvt.font.GVTFont $r5;
        int[] $r6;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10;
        org.apache.batik.extension.svg.GlyphIterator r0, r1, $r8;
        char $c5;
        java.awt.font.FontRenderContext $r4;
        float $f0, $f1, $f2, $f3, $f4;

        r1 := @this: org.apache.batik.extension.svg.GlyphIterator;

        r0 := @parameter0: org.apache.batik.extension.svg.GlyphIterator;

        if r0 != null goto label1;

        $r8 = new org.apache.batik.extension.svg.GlyphIterator;

        specialinvoke $r8.<org.apache.batik.extension.svg.GlyphIterator: void <init>(org.apache.batik.extension.svg.GlyphIterator)>(r1);

        return $r8;

     label1:
        $i0 = r1.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int idx> = $i0;

        $i1 = r1.<org.apache.batik.extension.svg.GlyphIterator: int chIdx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx> = $i1;

        $i2 = r1.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx> = $i2;

        $i3 = r1.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount> = $i3;

        $f0 = r1.<org.apache.batik.extension.svg.GlyphIterator: float adv>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adv> = $f0;

        $f1 = r1.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = $f1;

        $i4 = r1.<org.apache.batik.extension.svg.GlyphIterator: int runLimit>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int runLimit> = $i4;

        $c5 = r1.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: char ch> = $c5;

        $i6 = r1.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs> = $i6;

        $r2 = r1.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp> = $r2;

        $r3 = r1.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D gvBase>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D gvBase> = $r3;

        $i7 = r1.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit> = $i7;

        $i8 = r1.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount> = $i8;

        $r4 = r1.<org.apache.batik.extension.svg.GlyphIterator: java.awt.font.FontRenderContext frc>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.font.FontRenderContext frc> = $r4;

        $r5 = r1.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = $r5;

        $i9 = r1.<org.apache.batik.extension.svg.GlyphIterator: int fontStart>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = $i9;

        $f2 = r1.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent> = $f2;

        $f3 = r1.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent> = $f3;

        $f4 = r1.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize> = $f4;

        $i10 = r1.<org.apache.batik.extension.svg.GlyphIterator: int leftShift>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int leftShift> = $i10;

        $r6 = r1.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx> = $r6;

        $r7 = r1.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt> = $r7;

        return r0;
    }

    public int getGlyphIndex()
    {
        int $i0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        return $i0;
    }

    public char getChar()
    {
        char $c0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $c0 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        return $c0;
    }

    public int getACIIndex()
    {
        int $i0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        return $i0;
    }

    public float getAdv()
    {
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $f0 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adv>;

        return $f0;
    }

    public java.awt.geom.Point2D getOrigin()
    {
        java.awt.geom.Point2D $r1;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.geom.Point2D gvBase>;

        return $r1;
    }

    public float getAdj()
    {
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $f0 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        return $f0;
    }

    public float getMaxFontSize()
    {
        int $i0, $i1, $i2, $i3, i4;
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart>;

        if $i1 < $i0 goto label1;

        $i3 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        i4 = $i3 + $i2;

        virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: void updateLineMetrics(int)>(i4);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = i4;

     label1:
        $f0 = r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize>;

        return $f0;
    }

    public float getMaxAscent()
    {
        int $i0, $i1, $i2, $i3, i4;
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart>;

        if $i1 < $i0 goto label1;

        $i3 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        i4 = $i3 + $i2;

        virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: void updateLineMetrics(int)>(i4);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = i4;

     label1:
        $f0 = r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent>;

        return $f0;
    }

    public float getMaxDescent()
    {
        int $i0, $i1, $i2, $i3, i4;
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart>;

        if $i1 < $i0 goto label1;

        $i3 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        i4 = $i3 + $i2;

        virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: void updateLineMetrics(int)>(i4);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = i4;

     label1:
        $f0 = r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent>;

        return $f0;
    }

    public boolean isLastChar()
    {
        int $i0, $i1, $i2;
        org.apache.batik.extension.svg.GlyphIterator r0;
        boolean $z0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs>;

        $i1 = $i0 - 1;

        if $i2 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean done()
    {
        int $i0, $i1;
        org.apache.batik.extension.svg.GlyphIterator r0;
        boolean $z0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBreakChar()
    {
        int $i1;
        char $c0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $c0 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 9: goto label4;
            case 32: goto label4;
            case 173: goto label3;
            case 8203: goto label1;
            case 8205: goto label2;
            default: goto label5;
        };

     label1:
        return 1;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        return 1;

     label5:
        return 0;
    }

    protected boolean isPrinting(char)
    {
        int $i2;
        char $c0, c1;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        c1 := @parameter0: char;

        $c0 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i2 = (int) $c0;

        lookupswitch($i2)
        {
            case 9: goto label4;
            case 32: goto label4;
            case 173: goto label3;
            case 8203: goto label1;
            case 8205: goto label2;
            default: goto label5;
        };

     label1:
        return 0;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        return 1;
    }

    public int getLineBreaks()
    {
        java.text.AttributedCharacterIterator$Attribute $r2, $r5;
        byte $b10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.batik.extension.svg.GlyphIterator r0;
        java.text.AttributedCharacterIterator $r1, $r3, $r4, $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        i9 = 0;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        $i3 = $i1 + $i0;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit>;

        if $i3 < $i2 goto label3;

        i9 = r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount>;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $i5 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i4 = r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        $i6 = $i5 + $i4;

        interfaceinvoke $r1.<java.text.CharacterIterator: char setIndex(int)>($i6);

        $r3 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r2 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $i7 = interfaceinvoke $r3.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r2);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakRunLimit> = $i7;

        $r4 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $i8 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        interfaceinvoke $r4.<java.text.CharacterIterator: char setIndex(int)>($i8);

        $r6 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r5 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK>;

        $r7 = interfaceinvoke $r6.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r5);

        if $r7 != null goto label1;

        $b10 = 0;

        goto label2;

     label1:
        $b10 = 1;

     label2:
        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineBreakCount> = $b10;

     label3:
        return i9;
    }

    public void nextChar()
    {
        java.util.Map $r10;
        boolean $z0;
        java.text.AttributedCharacterIterator $r2, $r4, $r9, $r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        org.apache.batik.gvt.font.GVTFont $r6, $r7;
        java.text.AttributedCharacterIterator$Attribute $r1, $r3;
        org.apache.batik.gvt.font.GVTGlyphVector $r11, $r13;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        org.apache.batik.gvt.font.AWTGVTFont $r14;
        org.apache.batik.extension.svg.GlyphIterator r0;
        char $c0, $c7, $c8, $c15;
        java.lang.Object $r5;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $c0 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i23 = (int) $c0;

        if $i23 == 173 goto label1;

        $c7 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i24 = (int) $c7;

        if $i24 == 8203 goto label1;

        $c8 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i25 = (int) $c8;

        if $i25 != 8205 goto label2;

     label1:
        $r11 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $i9 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        interfaceinvoke $r11.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>($i9, 0);

        $f4 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharAdvance()>();

        $f5 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        $f6 = $f5 - $f4;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = $f6;

        $i10 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: void addLeftShift(int,float)>($i10, $f4);

     label2:
        $i11 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i12 = r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount>;

        $i13 = $i11 + $i12;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx> = $i13;

        $r12 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $i14 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $c15 = interfaceinvoke $r12.<java.text.CharacterIterator: char setIndex(int)>($i14);

        r0.<org.apache.batik.extension.svg.GlyphIterator: char ch> = $c15;

        $i16 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i17 = $i16 + 1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int idx> = $i17;

        $r13 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $i18 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i19 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i20 = interfaceinvoke $r13.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>($i18, $i19);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int charCount> = $i20;

        $i21 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $i22 = r0.<org.apache.batik.extension.svg.GlyphIterator: int numGlyphs>;

        if $i21 != $i22 goto label3;

        return;

     label3:
        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int runLimit>;

        if $i2 < $i1 goto label5;

        $i4 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: void updateLineMetrics(int)>($i4);

        $r2 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r1 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $i5 = interfaceinvoke $r2.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r1);

        r0.<org.apache.batik.extension.svg.GlyphIterator: int runLimit> = $i5;

        $r4 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r3 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute GVT_FONT>;

        $r5 = interfaceinvoke $r4.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r3);

        $r6 = (org.apache.batik.gvt.font.GVTFont) $r5;

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = $r6;

        $r7 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font>;

        if $r7 != null goto label4;

        $r14 = new org.apache.batik.gvt.font.AWTGVTFont;

        $r9 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r10 = interfaceinvoke $r9.<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>();

        specialinvoke $r14.<org.apache.batik.gvt.font.AWTGVTFont: void <init>(java.util.Map)>($r10);

        r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font> = $r14;

     label4:
        $i6 = r0.<org.apache.batik.extension.svg.GlyphIterator: int aciIdx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart> = $i6;

     label5:
        $f7 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharAdvance()>();

        $f8 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        $f9 = $f8 + $f7;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = $f9;

        $z0 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: boolean isPrinting()>();

        if $z0 == 0 goto label6;

        $i3 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx> = $i3;

        $f0 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharWidth()>();

        $f2 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        $f1 = $f7 - $f0;

        $f3 = $f2 - $f1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adv> = $f3;

     label6:
        return;
    }

    protected void addLeftShift(int, float)
    {
        float[] $r7, r8, $r9, $r10, $r11, $r14, $r15;
        int[] $r1, $r2, r3, $r4, $r5, $r6, $r12, $r13;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.batik.extension.svg.GlyphIterator r0;
        float f0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        i3 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        if $r1 != null goto label1;

        $r12 = newarray (int)[1];

        r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx> = $r12;

        $r13 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        $r13[0] = i3;

        $r14 = newarray (float)[1];

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt> = $r14;

        $r15 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        $r15[0] = f0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        r3 = newarray (int)[$i1];

        $r5 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        $r4 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i2);

        $r6 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        $i4 = lengthof $r6;

        r3[$i4] = i3;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx> = r3;

        $r7 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        $i5 = lengthof $r7;

        $i6 = $i5 + 1;

        r8 = newarray (float)[$i6];

        $r10 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        $r9 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        $i7 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r8, 0, $i7);

        $r11 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        $i8 = lengthof $r11;

        r8[$i8] = f0;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt> = r8;

     label2:
        return;
    }

    protected void updateLineMetrics(int)
    {
        org.apache.batik.gvt.font.GVTFont $r3, $r5;
        byte $b2, $b3, $b4;
        int i0, $i1, $i5, $i6, $i7;
        org.apache.batik.gvt.font.GVTLineMetrics $r4;
        org.apache.batik.extension.svg.GlyphIterator r0;
        java.awt.font.FontRenderContext $r1;
        java.text.AttributedCharacterIterator $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        i0 := @parameter0: int;

        $r3 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font>;

        $r2 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int fontStart>;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.awt.font.FontRenderContext frc>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTFont: org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>($r2, $i1, i0, $r1);

        $f0 = virtualinvoke $r4.<org.apache.batik.gvt.font.GVTLineMetrics: float getAscent()>();

        $f1 = virtualinvoke $r4.<org.apache.batik.gvt.font.GVTLineMetrics: float getDescent()>();

        $r5 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTFont font>;

        $f2 = interfaceinvoke $r5.<org.apache.batik.gvt.font.GVTFont: float getSize()>();

        $f3 = r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent>;

        $b2 = $f0 cmpl $f3;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label1;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent> = $f0;

     label1:
        $f4 = r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent>;

        $b3 = $f1 cmpl $f4;

        $i6 = (int) $b3;

        if $i6 <= 0 goto label2;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent> = $f1;

     label2:
        $f5 = r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize>;

        $b4 = $f2 cmpl $f5;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label3;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize> = $f2;

     label3:
        return;
    }

    public org.apache.batik.extension.svg.LineInfo newLine(java.awt.geom.Point2D$Float, float, boolean, java.awt.geom.Point2D$Float)
    {
        float[] $r2, $r16, $r17;
        org.apache.batik.extension.svg.LineInfo $r19;
        java.awt.geom.Point2D$Float r8, r9, $r18;
        int[] $r1, $r3, $r4, $r12;
        boolean $z0, z1, $z2, $z3;
        java.text.AttributedCharacterIterator $r11;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8, $f9, f10, f11;
        org.apache.batik.gvt.font.GVTGlyphVector $r5, $r6, $r10, $r13, $r14;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, i17, i18, i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, $i28, $i29, $i30;
        org.apache.batik.extension.svg.GlyphIterator r0;
        char $c0, $c10, $c15;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        r8 := @parameter0: java.awt.geom.Point2D$Float;

        f4 := @parameter1: float;

        z1 := @parameter2: boolean;

        r9 := @parameter3: java.awt.geom.Point2D$Float;

        $c0 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i28 = (int) $c0;

        if $i28 != 173 goto label01;

        $r13 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $i16 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        interfaceinvoke $r13.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>($i16, 1);

     label01:
        i17 = 0;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        if $r1 == null goto label02;

        $r12 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        i18 = $r12[0];

        goto label03;

     label02:
        $i1 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        i18 = $i1 + 1;

     label03:
        i19 = r0.<org.apache.batik.extension.svg.GlyphIterator: int lineIdx>;

        goto label06;

     label04:
        if i19 != i18 goto label05;

        $i2 = r0.<org.apache.batik.extension.svg.GlyphIterator: int leftShift>;

        $f1 = (float) $i2;

        $r2 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt>;

        $i3 = i17;

        i17 = i17 + 1;

        $f0 = $r2[$i3];

        $f2 = $f1 + $f0;

        $i4 = (int) $f2;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int leftShift> = $i4;

        $r3 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        $i5 = lengthof $r3;

        if i17 >= $i5 goto label05;

        $r4 = r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx>;

        i18 = $r4[i17];

     label05:
        $r14 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $r18 = new java.awt.geom.Point2D$Float;

        $r16 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        $i20 = 2 * i19;

        $f6 = $r16[$i20];

        $i21 = r0.<org.apache.batik.extension.svg.GlyphIterator: int leftShift>;

        $f7 = (float) $i21;

        $f8 = $f6 - $f7;

        $r17 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        $i22 = 2 * i19;

        $i23 = $i22 + 1;

        $f9 = $r17[$i23];

        specialinvoke $r18.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f8, $f9);

        interfaceinvoke $r14.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>(i19, $r18);

        i19 = i19 + 1;

     label06:
        $i24 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        if i19 <= $i24 goto label04;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int[] leftShiftIdx> = null;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float[] leftShiftAmt> = null;

        $i6 = r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx>;

        if $i6 != 0 goto label07;

        $z2 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: boolean isPrinting()>();

        if $z2 == 0 goto label08;

     label07:
        $i7 = r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx>;

        f10 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharWidth(int)>($i7);

        $i8 = r0.<org.apache.batik.extension.svg.GlyphIterator: int chIdx>;

        i25 = $i8 + 1;

        goto label09;

     label08:
        f10 = 0.0F;

        i25 = 0;

     label09:
        $i9 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        i26 = $i9 + 1;

        $f5 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adv>;

        f11 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        goto label14;

     label10:
        r0.<org.apache.batik.extension.svg.GlyphIterator: float adv> = 0.0F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float adj> = 0.0F;

        $c10 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i29 = (int) $c10;

        if $i29 == 8203 goto label11;

        $c15 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $i30 = (int) $c15;

        if $i30 != 8205 goto label12;

     label11:
        $r5 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $i11 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        interfaceinvoke $r5.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>($i11, 0);

     label12:
        r0.<org.apache.batik.extension.svg.GlyphIterator: char ch> = 0;

        virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: void nextChar()>();

        $z3 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: boolean isPrinting()>();

        if $z3 == 0 goto label13;

        goto label15;

     label13:
        $i12 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        i26 = $i12 + 1;

        $f3 = r0.<org.apache.batik.extension.svg.GlyphIterator: float adj>;

        f11 = f11 + $f3;

     label14:
        $z0 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: boolean done()>();

        if $z0 == 0 goto label10;

     label15:
        i27 = i25;

        goto label17;

     label16:
        $r6 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        interfaceinvoke $r6.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>(i27, 0);

        i27 = i27 + 1;

     label17:
        if i27 < i26 goto label16;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxAscent> = -3.4028235E38F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxDescent> = -3.4028235E38F;

        r0.<org.apache.batik.extension.svg.GlyphIterator: float maxFontSize> = -3.4028235E38F;

        $r19 = new org.apache.batik.extension.svg.LineInfo;

        $r11 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r10 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $i13 = r0.<org.apache.batik.extension.svg.GlyphIterator: int lineIdx>;

        specialinvoke $r19.<org.apache.batik.extension.svg.LineInfo: void <init>(java.awt.geom.Point2D$Float,java.text.AttributedCharacterIterator,org.apache.batik.gvt.font.GVTGlyphVector,int,int,float,float,float,float,boolean,java.awt.geom.Point2D$Float)>(r8, $r11, $r10, $i13, i26, f11, $f5, f10, f4, z1, r9);

        $i14 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        r0.<org.apache.batik.extension.svg.GlyphIterator: int lineIdx> = $i14;

        return $r19;
    }

    public boolean isPrinting()
    {
        java.text.AttributedCharacterIterator$Attribute $r1;
        java.text.AttributedCharacterIterator $r2;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        char $c0;
        org.apache.batik.extension.svg.GlyphIterator r0;
        boolean $z0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $r2 = r0.<org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator aci>;

        $r1 = <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute PREFORMATTED>;

        $r3 = interfaceinvoke $r2.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r1);

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        if $r3 != $r4 goto label1;

        return 1;

     label1:
        $c0 = r0.<org.apache.batik.extension.svg.GlyphIterator: char ch>;

        $z0 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: boolean isPrinting(char)>($c0);

        return $z0;
    }

    public float getCharAdvance()
    {
        int $i0;
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $f0 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharAdvance(int)>($i0);

        return $f0;
    }

    public float getCharWidth()
    {
        int $i0;
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        $i0 = r0.<org.apache.batik.extension.svg.GlyphIterator: int idx>;

        $f0 = virtualinvoke r0.<org.apache.batik.extension.svg.GlyphIterator: float getCharWidth(int)>($i0);

        return $f0;
    }

    protected float getCharAdvance(int)
    {
        float[] $r1, $r2;
        int i0, $i1, $i2, $i3;
        float $f0, $f1, $f2;
        org.apache.batik.extension.svg.GlyphIterator r0;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        $i1 = 2 * i0;

        $i2 = $i1 + 2;

        $f1 = $r1[$i2];

        $r2 = r0.<org.apache.batik.extension.svg.GlyphIterator: float[] gp>;

        $i3 = 2 * i0;

        $f0 = $r2[$i3];

        $f2 = $f1 - $f0;

        return $f2;
    }

    protected float getCharWidth(int)
    {
        java.awt.Shape $r2;
        java.awt.geom.Point2D $r5;
        java.awt.geom.Rectangle2D $r3;
        org.apache.batik.gvt.font.GVTGlyphVector $r1, $r4;
        int i0;
        float $f0;
        org.apache.batik.extension.svg.GlyphIterator r0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.batik.extension.svg.GlyphIterator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getGlyphVisualBounds(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r4 = r0.<org.apache.batik.extension.svg.GlyphIterator: org.apache.batik.gvt.font.GVTGlyphVector gv>;

        $r5 = interfaceinvoke $r4.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>(i0);

        $d0 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getX()>();

        $d1 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $d2 = $d0 + $d1;

        $d3 = virtualinvoke $r5.<java.awt.geom.Point2D: double getX()>();

        $d4 = $d2 - $d3;

        $f0 = (float) $d4;

        return $f0;
    }

    static void <clinit>()
    {
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r0, $r1, $r2, $r3;

        <org.apache.batik.extension.svg.GlyphIterator: char ZERO_WIDTH_JOINER> = 8205;

        <org.apache.batik.extension.svg.GlyphIterator: char ZERO_WIDTH_SPACE> = 8203;

        <org.apache.batik.extension.svg.GlyphIterator: char SOFT_HYPHEN> = 173;

        $r0 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PREFORMATTED>;

        <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute PREFORMATTED> = $r0;

        $r1 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute FLOW_LINE_BREAK>;

        <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute FLOW_LINE_BREAK> = $r1;

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXT_COMPOUND_ID>;

        <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID> = $r2;

        $r3 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute GVT_FONT>;

        <org.apache.batik.extension.svg.GlyphIterator: java.text.AttributedCharacterIterator$Attribute GVT_FONT> = $r3;

        return;
    }
}
