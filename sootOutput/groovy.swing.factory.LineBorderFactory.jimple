public class groovy.swing.factory.LineBorderFactory extends groovy.swing.factory.SwingBorderFactory
{
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697211;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$javax$swing$border$LineBorder;
    static java.lang.Class class$java$lang$RuntimeException;

    public void <init>()
    {
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void <init>()>();

        $r1 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.LineBorderFactory");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        java.lang.Integer $r29;
        groovy.swing.factory.LineBorderFactory r37;
        java.util.Map r3;
        boolean $z0, $z1, $z2, $z3;
        groovy.util.FactoryBuilderSupport r6;
        org.codehaus.groovy.runtime.GStringImpl $r22, $r32;
        java.lang.Throwable $r28, $r36;
        java.lang.Object[] $r4, $r8, $r10, $r12, $r15, $r21, $r23, $r31, $r33;
        java.lang.String[] $r26, $r34;
        java.lang.Class $r0, r1, $r2, $r14, $r17, $r20, $r30, $r39, $r40, $r41, $r44, $r45, $r46;
        java.lang.Object $r5, $r7, $r9, $r11, $r13, $r16, $r18, $r19, r24, $r25, $r27, $r35, r38, r42, r43;

        r37 := @this: groovy.swing.factory.LineBorderFactory;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r24 := @parameter1: java.lang.Object;

        r38 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r39 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.LineBorderFactory");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0> = $r39;

        goto label02;

     label01:
        $r39 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r39;

        $r2 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r40 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r40;

        goto label04;

     label03:
        $r40 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "parent";

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r4);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r6, "context");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r5, r1, $r7, "applyBorderToParent");

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "color";

        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r8);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r9, null);

        if $z0 == 0 goto label07;

        $r30 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r30 != null goto label05;

        $r41 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r41;

        goto label06;

     label05:
        $r41 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label06:
        $r31 = newarray (java.lang.Object)[1];

        $r32 = new org.codehaus.groovy.runtime.GStringImpl;

        $r33 = newarray (java.lang.Object)[1];

        $r33[0] = r24;

        $r34 = newarray (java.lang.String)[2];

        $r34[0] = "color: is a required attribute for ";

        $r34[1] = "";

        specialinvoke $r32.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r33, $r34);

        $r31[0] = $r32;

        $r35 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r41, $r31);

        $r36 = (java.lang.Throwable) $r35;

        throw $r36;

     label07:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "thickness";

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r10);

        r42 = $r11;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r11, null);

        if $z1 == 0 goto label08;

        $r29 = new java.lang.Integer;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>(1);

        r42 = $r29;

        goto label08;

     label08:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "roundedCorners";

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r12);

        r43 = $r13;

        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r13, null);

        if $z2 == 0 goto label09;

        r43 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        goto label09;

     label09:
        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r3);

        if $z3 == 0 goto label12;

        $r20 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r20 != null goto label10;

        $r44 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r44;

        goto label11;

     label10:
        $r44 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label11:
        $r21 = newarray (java.lang.Object)[1];

        $r22 = new org.codehaus.groovy.runtime.GStringImpl;

        $r23 = newarray (java.lang.Object)[2];

        $r23[0] = r24;

        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r3, "keySet");

        $r23[1] = $r25;

        $r26 = newarray (java.lang.String)[3];

        $r26[0] = "";

        $r26[1] = " does not know how to handle the remaining attibutes: ";

        $r26[2] = "";

        specialinvoke $r22.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r23, $r26);

        $r21[0] = $r22;

        $r27 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r44, $r21);

        $r28 = (java.lang.Throwable) $r27;

        throw $r28;

     label12:
        $r14 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$javax$swing$border$LineBorder>;

        if $r14 != null goto label13;

        $r45 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.LineBorder");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$javax$swing$border$LineBorder> = $r45;

        goto label14;

     label13:
        $r45 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$javax$swing$border$LineBorder>;

     label14:
        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = $r9;

        $r15[1] = r42;

        $r15[2] = r43;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r45, $r15);

        $r17 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r17 != null goto label15;

        $r46 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$Object> = $r46;

        goto label16;

     label15:
        $r46 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$java$lang$Object>;

     label16:
        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r16, $r46);

        $r19 = (java.lang.Object) $r18;

        return $r19;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.LineBorderFactory");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.LineBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.LineBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697211L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.LineBorderFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.LineBorderFactory: java.lang.Long __timeStamp__239_neverHappen1239119697211> = $r5;

        return;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        java.lang.Object $r2;
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.String $r1;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.LineBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$3$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.lang.MetaClass $r1;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r1;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$3$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        groovy.swing.factory.LineBorderFactory r0;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.swing.factory.LineBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.LineBorderFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.LineBorderFactory r0;

        r0 := @this: groovy.swing.factory.LineBorderFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
