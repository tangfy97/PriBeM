public class org.aspectj.runtime.reflect.FieldSignatureImpl extends org.aspectj.runtime.reflect.MemberSignatureImpl implements org.aspectj.lang.reflect.FieldSignature
{
    java.lang.Class fieldType;
    private java.lang.reflect.Field field;

    void <init>(int, java.lang.String, java.lang.Class, java.lang.Class)
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl r0;
        int i0;
        java.lang.Class r2, r3;
        java.lang.String r1;

        r0 := @this: org.aspectj.runtime.reflect.FieldSignatureImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class;

        specialinvoke r0.<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(int,java.lang.String,java.lang.Class)>(i0, r1, r2);

        r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.Class fieldType> = r3;

        return;
    }

    void <init>(java.lang.String)
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl r0;
        java.lang.String r1;

        r0 := @this: org.aspectj.runtime.reflect.FieldSignatureImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.aspectj.runtime.reflect.MemberSignatureImpl: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.Class getFieldType()
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl r0;
        java.lang.Class $r1, $r2, $r3;

        r0 := @this: org.aspectj.runtime.reflect.FieldSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.Class fieldType>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class extractType(int)>(3);

        r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.Class fieldType> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.Class fieldType>;

        return $r2;
    }

    protected java.lang.String createToString(org.aspectj.runtime.reflect.StringMaker)
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl r2;
        org.aspectj.runtime.reflect.StringMaker r1;
        java.lang.StringBuffer $r0;
        int $i0;
        java.lang.Class $r4, $r9;
        java.lang.String $r3, $r5, $r6, $r7, $r8, $r10;
        boolean $z0, $z1;

        r2 := @this: org.aspectj.runtime.reflect.FieldSignatureImpl;

        r1 := @parameter0: org.aspectj.runtime.reflect.StringMaker;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i0 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: int getModifiers()>();

        $r3 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makeModifiersString(int)>($i0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $z0 = r1.<org.aspectj.runtime.reflect.StringMaker: boolean includeArgs>;

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r2.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.Class getFieldType()>();

        $r10 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makeTypeName(java.lang.Class)>($r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label1:
        $z1 = r1.<org.aspectj.runtime.reflect.StringMaker: boolean includeArgs>;

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label2:
        $r4 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

        $r5 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getDeclaringTypeName()>();

        $r6 = virtualinvoke r1.<org.aspectj.runtime.reflect.StringMaker: java.lang.String makePrimaryTypeName(java.lang.Class,java.lang.String)>($r4, $r5);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.reflect.Field getField()
    {
        org.aspectj.runtime.reflect.FieldSignatureImpl r0;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.reflect.Field $r1, $r4, $r6;
        java.lang.Exception $r5;

        r0 := @this: org.aspectj.runtime.reflect.FieldSignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.reflect.Field field>;

        if $r1 != null goto label4;

     label1:
        $r2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3);

        r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.reflect.Field field> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = r0.<org.aspectj.runtime.reflect.FieldSignatureImpl: java.lang.reflect.Field field>;

        return $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
