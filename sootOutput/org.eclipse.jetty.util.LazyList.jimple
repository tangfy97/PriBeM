public class org.eclipse.jetty.util.LazyList extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final java.lang.String[] __EMTPY_STRING_ARRAY;

    private void <init>()
    {
        org.eclipse.jetty.util.LazyList r0;

        r0 := @this: org.eclipse.jetty.util.LazyList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object add(java.lang.Object, java.lang.Object)
    {
        java.util.List $r3;
        java.lang.Object r0, r2;
        boolean $z0, $z1;
        java.util.ArrayList $r1, $r4;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r0 != null goto label3;

        $z1 = r2 instanceof java.util.List;

        if $z1 != 0 goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        return $r4;

     label2:
        return r2;

     label3:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) r0;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return r0;

     label4:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        return $r1;
    }

    public static java.lang.Object add(java.lang.Object, int, java.lang.Object)
    {
        java.util.ArrayList $r1, $r4;
        java.util.List $r3;
        int i0;
        java.lang.Object r0, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        if r0 != null goto label3;

        if i0 > 0 goto label1;

        $z1 = r2 instanceof java.util.List;

        if $z1 != 0 goto label1;

        if r2 != null goto label2;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.List: void add(int,java.lang.Object)>(i0, r2);

        return $r4;

     label2:
        return r2;

     label3:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label4;

        $r3 = (java.util.List) r0;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(i0, r2);

        return r0;

     label4:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        interfaceinvoke $r1.<java.util.List: void add(int,java.lang.Object)>(i0, r2);

        return $r1;
    }

    public static java.lang.Object addCollection(java.lang.Object, java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2, r3;
        boolean $z0;

        r3 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(r3, $r2);

        goto label1;

     label2:
        return r3;
    }

    public static java.lang.Object addArray(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.Object $r1, r2;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object[];

        i1 = 0;

     label1:
        if r0 == null goto label2;

        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r1 = r0[i1];

        r2 = staticinvoke <org.eclipse.jetty.util.LazyList: java.lang.Object add(java.lang.Object,java.lang.Object)>(r2, $r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.Object ensureSize(java.lang.Object, int)
    {
        java.util.ArrayList $r1, $r2, $r3, r4;
        int i0, $i1;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        return $r3;

     label1:
        $z0 = r0 instanceof java.util.ArrayList;

        if $z0 == 0 goto label3;

        r4 = (java.util.ArrayList) r0;

        $i1 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        if $i1 <= i0 goto label2;

        return r4;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(i0);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r4);

        return $r2;

     label3:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        java.util.List r2;
        int $i0;
        java.lang.Object r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        r2 = (java.util.List) r0;

        interfaceinvoke r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        return r0;

     label3:
        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        return null;

     label4:
        return r0;
    }

    public static java.lang.Object remove(java.lang.Object, int)
    {
        java.util.List r1;
        int i0, $i1;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        r1 = (java.util.List) r0;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i0);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

        return null;

     label2:
        return r0;

     label3:
        if i0 != 0 goto label4;

        return null;

     label4:
        return r0;
    }

    public static java.util.List getList(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.List $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.eclipse.jetty.util.LazyList: java.util.List getList(java.lang.Object,boolean)>(r0, 0);

        return $r1;
    }

    public static java.util.List getList(java.lang.Object, boolean)
    {
        java.util.List $r1, $r2, $r3;
        java.lang.Object r0;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        if r0 != null goto label2;

        if z1 == 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label2:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label3;

        $r2 = (java.util.List) r0;

        return $r2;

     label3:
        $r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r0);

        return $r1;
    }

    public static java.lang.String[] toStringArray(java.lang.Object)
    {
        java.lang.String[] $r1, r4, $r7;
        java.util.List r3;
        int $i0, $i1, i2, $i4;
        java.lang.Object r0, $r5;
        java.lang.String $r2, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r7 = <org.eclipse.jetty.util.LazyList: java.lang.String[] __EMTPY_STRING_ARRAY>;

        return $r7;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label5;

        r3 = (java.util.List) r0;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        r4 = newarray (java.lang.String)[$i0];

        i2 = interfaceinvoke r3.<java.util.List: int size()>();

     label2:
        $i1 = i2;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        if $i1 <= 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i2);

        if $r5 == null goto label3;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        r4[i2] = $r6;

     label3:
        goto label2;

     label4:
        return r4;

     label5:
        $r1 = newarray (java.lang.String)[1];

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r1[0] = $r2;

        return $r1;
    }

    public static java.lang.Object toArray(java.lang.Object, java.lang.Class)
    {
        java.lang.Object[] $r4, $r5, $r6;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        java.util.List r10;
        java.lang.Object r0, $r2, $r3, $r7, $r8, $r9;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, 0);

        return $r9;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label5;

        r10 = (java.util.List) r0;

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label4;

        $i1 = interfaceinvoke r10.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, $i1);

        i3 = 0;

     label2:
        $i2 = interfaceinvoke r10.<java.util.List: int size()>();

        if i3 >= $i2 goto label3;

        $r8 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i3);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r7, i3, $r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r7;

     label4:
        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, $i0);

        $r4 = (java.lang.Object[]) $r3;

        $r5 = (java.lang.Object[]) $r4;

        $r6 = interfaceinvoke r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        return $r6;

     label5:
        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, 1);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r2, 0, r0);

        return $r2;
    }

    public static int size(java.lang.Object)
    {
        java.util.List $r1;
        int $i0;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r1 = (java.util.List) r0;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;

     label2:
        return 1;
    }

    public static java.lang.Object get(java.lang.Object, int)
    {
        java.lang.IndexOutOfBoundsException $r1, $r4;
        java.util.List $r2;
        int i0;
        java.lang.Object r0, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r2 = (java.util.List) r0;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        return $r3;

     label2:
        if i0 != 0 goto label3;

        return r0;

     label3:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public static boolean contains(java.lang.Object, java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r2 = (java.util.List) r0;

        $z2 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z2;

     label2:
        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public static java.lang.Object clone(java.lang.Object)
    {
        java.util.List $r2;
        java.lang.Object r0;
        boolean $z0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r1 = new java.util.ArrayList;

        $r2 = (java.util.List) r0;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r1;

     label2:
        return r0;
    }

    public static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "[]";

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r6;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.util.Iterator iterator(java.lang.Object)
    {
        java.util.Iterator $r2, $r4, $r6;
        java.util.List $r1, $r3, $r5;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        return $r6;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r3 = (java.util.List) r0;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        return $r4;

     label2:
        $r1 = staticinvoke <org.eclipse.jetty.util.LazyList: java.util.List getList(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public static java.util.ListIterator listIterator(java.lang.Object)
    {
        java.util.ListIterator $r2, $r4, $r6;
        java.util.List $r1, $r3, $r5;
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator()>();

        return $r6;

     label1:
        $z0 = r0 instanceof java.util.List;

        if $z0 == 0 goto label2;

        $r3 = (java.util.List) r0;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.ListIterator listIterator()>();

        return $r4;

     label2:
        $r1 = staticinvoke <org.eclipse.jetty.util.LazyList: java.util.List getList(java.lang.Object)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public static java.util.List array2List(java.lang.Object[])
    {
        java.util.List $r3;
        java.lang.Object[] r0;
        int $i0;
        java.util.ArrayList $r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;

     label2:
        $r2 = new java.util.ArrayList;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r2;
    }

    public static java.lang.Object[] addToArray(java.lang.Object[], java.lang.Object, java.lang.Class)
    {
        java.lang.Object[] r0, $r4, r5, $r9, $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r1, $r2, r7;
        java.lang.Object $r3, r6, $r8;

        r0 := @parameter0: java.lang.Object[];

        r6 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.Class;

        if r0 != null goto label2;

        if r7 != null goto label1;

        if r6 == null goto label1;

        r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r7, 1);

        $r9 = (java.lang.Object[]) $r8;

        $r10 = (java.lang.Object[]) $r9;

        $r10[0] = r6;

        return $r10;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $i1 = $i0 + 1;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r2, $i1);

        $r4 = (java.lang.Object[]) $r3;

        r5 = (java.lang.Object[]) $r4;

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r5, 0, $i2);

        $i3 = lengthof r0;

        r5[$i3] = r6;

        return r5;
    }

    public static java.lang.Object[] removeFromArray(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r1, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        boolean $z0;
        java.lang.Object r0, $r2, $r4;
        java.lang.Class $r3, $r7;

        r1 := @parameter0: java.lang.Object[];

        r0 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return r1;

     label2:
        i9 = lengthof r1;

     label3:
        $i0 = i9;

        $i11 = (int) -1;

        i9 = i9 + $i11;

        if $i0 <= 0 goto label8;

        $r2 = r1[i9];

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        if r1 != null goto label4;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        goto label5;

     label4:
        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

     label5:
        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        $i2 = $i1 - 1;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r7, $i2);

        $r5 = (java.lang.Object[]) $r4;

        $r6 = (java.lang.Object[]) $r5;

        if i9 <= 0 goto label6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r6, 0, i9);

     label6:
        $i4 = i9 + 1;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label7;

        $i8 = i9 + 1;

        $i6 = lengthof r1;

        $i5 = i9 + 1;

        $i7 = $i6 - $i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i8, $r6, i9, $i7);

     label7:
        return $r6;

     label8:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[0];

        <org.eclipse.jetty.util.LazyList: java.lang.String[] __EMTPY_STRING_ARRAY> = $r0;

        return;
    }
}
