public class com.hp.hpl.jena.sparql.graph.GraphReadOnly extends com.hp.hpl.jena.graph.impl.WrappedGraph
{

    public void <init>(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r0;
        com.hp.hpl.jena.graph.Graph r1;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.graph.impl.WrappedGraph: void <init>(com.hp.hpl.jena.graph.Graph)>(r1);

        return;
    }

    public void add(com.hp.hpl.jena.graph.Triple) throws com.hp.hpl.jena.shared.AddDeniedException
    {
        com.hp.hpl.jena.shared.AddDeniedException $r0;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r1;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.shared.AddDeniedException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.AddDeniedException: void <init>(java.lang.String)>("read-only graph");

        throw $r0;
    }

    public void performAdd(com.hp.hpl.jena.graph.Triple) throws com.hp.hpl.jena.shared.AddDeniedException
    {
        com.hp.hpl.jena.shared.AddDeniedException $r0;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r1;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.shared.AddDeniedException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.AddDeniedException: void <init>(java.lang.String)>("read-only graph");

        throw $r0;
    }

    public void delete(com.hp.hpl.jena.graph.Triple) throws com.hp.hpl.jena.shared.DeleteDeniedException
    {
        com.hp.hpl.jena.shared.DeleteDeniedException $r0;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r1;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.shared.DeleteDeniedException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.DeleteDeniedException: void <init>(java.lang.String)>("read-only graph");

        throw $r0;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple) throws com.hp.hpl.jena.shared.DeleteDeniedException
    {
        com.hp.hpl.jena.shared.DeleteDeniedException $r0;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r1;
        com.hp.hpl.jena.graph.Triple r2;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.shared.DeleteDeniedException;

        specialinvoke $r0.<com.hp.hpl.jena.shared.DeleteDeniedException: void <init>(java.lang.String)>("read-only graph");

        throw $r0;
    }

    public com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()
    {
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r1;
        com.hp.hpl.jena.graph.impl.SimpleTransactionHandler $r0;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        $r0 = new com.hp.hpl.jena.graph.impl.SimpleTransactionHandler;

        specialinvoke $r0.<com.hp.hpl.jena.graph.impl.SimpleTransactionHandler: void <init>()>();

        return $r0;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler $r0;
        com.hp.hpl.jena.sparql.graph.GraphReadOnly r1;

        r1 := @this: com.hp.hpl.jena.sparql.graph.GraphReadOnly;

        $r0 = new com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler;

        specialinvoke $r0.<com.hp.hpl.jena.graph.impl.SimpleBulkUpdateHandler: void <init>(com.hp.hpl.jena.graph.impl.GraphWithPerform)>(r1);

        return $r0;
    }
}
