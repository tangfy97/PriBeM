public class org.codehaus.groovy.classgen.CompileStack extends java.lang.Object implements groovyjarjarasm.asm.Opcodes
{
    private boolean clear;
    private org.codehaus.groovy.ast.VariableScope scope;
    private groovyjarjarasm.asm.Label continueLabel;
    private groovyjarjarasm.asm.Label breakLabel;
    private java.util.Map stackVariables;
    private int currentVariableIndex;
    private int nextVariableIndex;
    private final java.util.LinkedList temporaryVariables;
    private final java.util.LinkedList usedVariables;
    private java.util.Map superBlockNamedLabels;
    private java.util.Map currentBlockNamedLabels;
    private java.util.LinkedList finallyBlocks;
    private final java.util.List visitedBlocks;
    private groovyjarjarasm.asm.Label thisStartLabel;
    private groovyjarjarasm.asm.Label thisEndLabel;
    private int currentClassIndex;
    private int currentMetaClassIndex;
    private groovyjarjarasm.asm.MethodVisitor mv;
    private org.codehaus.groovy.classgen.BytecodeHelper helper;
    private final java.util.LinkedList stateStack;
    private int localVariableOffset;
    private final java.util.Map namedLoopBreakLabel;
    private final java.util.Map namedLoopContinueLabel;
    private java.lang.String className;

    public void <init>()
    {
        java.util.HashMap $r1, $r4, $r5, $r9, $r10;
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r2, $r3, $r6, $r7, $r8;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: boolean clear> = 1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables> = $r1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex> = 1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = 1;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList temporaryVariables> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList usedVariables> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks> = $r6;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.List visitedBlocks> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopBreakLabel> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopContinueLabel> = $r10;

        return;
    }

    protected void pushState()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r4;
        java.util.HashMap $r3;
        java.util.LinkedList $r2, $r5, $r6;
        org.codehaus.groovy.classgen.CompileStack$StateStackElement $r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $r1 = new org.codehaus.groovy.classgen.CompileStack$StateStackElement;

        specialinvoke $r1.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: void <init>(org.codehaus.groovy.classgen.CompileStack)>(r0);

        virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

        $r3 = new java.util.HashMap;

        $r4 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        specialinvoke $r3.<java.util.HashMap: void <init>(java.util.Map)>($r4);

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables> = $r3;

        $r5 = new java.util.LinkedList;

        $r6 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        specialinvoke $r5.<java.util.LinkedList: void <init>(java.util.Collection)>($r6);

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks> = $r5;

        return;
    }

    private void popState()
    {
        org.codehaus.groovy.ast.VariableScope $r5;
        org.codehaus.groovy.classgen.CompileStack$StateStackElement r4;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.GroovyBugError $r10;
        java.util.Map $r8;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.util.LinkedList $r1, $r2, $r9;
        groovyjarjarasm.asm.Label $r6, $r7;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 != 0 goto label1;

        $r10 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r10.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("Tried to do a pop on the compile stack without push.");

        throw $r10;

     label1:
        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object removeLast()>();

        r4 = (org.codehaus.groovy.classgen.CompileStack$StateStackElement) $r3;

        $r5 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: org.codehaus.groovy.ast.VariableScope scope>;

        r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope scope> = $r5;

        $r6 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: groovyjarjarasm.asm.Label continueLabel>;

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label continueLabel> = $r6;

        $r7 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: groovyjarjarasm.asm.Label breakLabel>;

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel> = $r7;

        $i1 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: int lastVariableIndex>;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex> = $i1;

        $r8 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: java.util.Map stackVariables>;

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables> = $r8;

        $i2 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: int nextVariableIndex>;

        r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = $i2;

        $r9 = r4.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: java.util.LinkedList finallyBlocks>;

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks> = $r9;

        return;
    }

    public groovyjarjarasm.asm.Label getContinueLabel()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        groovyjarjarasm.asm.Label $r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label continueLabel>;

        return $r1;
    }

    public groovyjarjarasm.asm.Label getBreakLabel()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        groovyjarjarasm.asm.Label $r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel>;

        return $r1;
    }

    public void removeVar(int)
    {
        java.util.Iterator $r2;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.GroovyBugError $r3;
        org.codehaus.groovy.classgen.Variable r5;
        int $i0, i1;
        java.lang.Object $r4;
        java.util.LinkedList $r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        i1 := @parameter0: int;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList temporaryVariables>;

        $r2 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.classgen.Variable) $r4;

        $i0 = virtualinvoke r5.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        if $i0 != i1 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

        return;

     label2:
        goto label1;

     label3:
        $r3 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r3.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("CompileStack#removeVar: tried to remove a temporary variable with a non existent index");

        throw $r3;
    }

    private void setEndLabels()
    {
        java.util.Iterator $r5;
        java.util.Collection $r4;
        groovyjarjarasm.asm.MethodVisitor $r2;
        org.codehaus.groovy.classgen.CompileStack r1;
        org.codehaus.groovy.classgen.Variable r7;
        java.util.Map $r3;
        java.lang.Object $r6;
        groovyjarjarasm.asm.Label $r0;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r0 = new groovyjarjarasm.asm.Label;

        specialinvoke $r0.<groovyjarjarasm.asm.Label: void <init>()>();

        $r2 = r1.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r0);

        $r3 = r1.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.codehaus.groovy.classgen.Variable) $r6;

        virtualinvoke r7.<org.codehaus.groovy.classgen.Variable: void setEndLabel(groovyjarjarasm.asm.Label)>($r0);

        goto label1;

     label2:
        r1.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisEndLabel> = $r0;

        return;
    }

    public void pop()
    {
        org.codehaus.groovy.classgen.CompileStack r0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void setEndLabels()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void popState()>();

        return;
    }

    public org.codehaus.groovy.ast.VariableScope getScope()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.VariableScope $r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope scope>;

        return $r1;
    }

    public int defineTemporaryVariable(org.codehaus.groovy.ast.Variable, boolean)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.Variable r1;
        org.codehaus.groovy.ast.ClassNode $r3;
        int $i0;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: org.codehaus.groovy.ast.Variable;

        z0 := @parameter1: boolean;

        $r2 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r3 = interfaceinvoke r1.<org.codehaus.groovy.ast.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $i0 = virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>($r2, $r3, z0);

        return $i0;
    }

    public org.codehaus.groovy.classgen.Variable getVariable(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.lang.String r1;
        org.codehaus.groovy.classgen.Variable $r2;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable getVariable(java.lang.String,boolean)>(r1, 1);

        return $r2;
    }

    public org.codehaus.groovy.classgen.Variable getVariable(java.lang.String, boolean)
    {
        org.codehaus.groovy.classgen.Variable r13, $r15, $r16, r17;
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        java.util.Map $r2;
        java.lang.String r0, $r9, $r14;
        java.util.LinkedList $r10;
        boolean $z0, $z1, z2, $z3, $z4;
        java.util.Iterator $r11;
        org.codehaus.groovy.classgen.CompileStack r1;
        org.codehaus.groovy.GroovyBugError $r4;
        java.lang.Object $r3, $r12;

        r1 := @this: org.codehaus.groovy.classgen.CompileStack;

        r0 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z0 == 0 goto label1;

        $r16 = <org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.classgen.Variable THIS_VARIABLE>;

        return $r16;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z1 == 0 goto label2;

        $r15 = <org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.classgen.Variable SUPER_VARIABLE>;

        return $r15;

     label2:
        $r2 = r1.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r17 = (org.codehaus.groovy.classgen.Variable) $r3;

        if r17 != null goto label5;

        $r10 = r1.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList temporaryVariables>;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.codehaus.groovy.classgen.Variable) $r12;

        $r14 = virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: java.lang.String getName()>();

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label4;

        r17 = r13;

        goto label5;

     label4:
        goto label3;

     label5:
        if r17 != null goto label6;

        if z2 == 0 goto label6;

        $r4 = new org.codehaus.groovy.GroovyBugError;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("tried to get a variable with the name ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" as stack variable, but a variable with this name was not created");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r9);

        throw $r4;

     label6:
        return r17;
    }

    public int defineTemporaryVariable(java.lang.String, boolean)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.ClassNode $r2;
        int $i0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: int defineTemporaryVariable(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>(r1, $r2, z0);

        return $i0;
    }

    public int defineTemporaryVariable(java.lang.String, org.codehaus.groovy.ast.ClassNode, boolean)
    {
        org.codehaus.groovy.ast.ClassNode r2;
        groovyjarjarasm.asm.MethodVisitor $r6;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.classgen.Variable $r3;
        int $i0, $i1;
        java.lang.String r1;
        java.util.LinkedList $r4, $r5;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter2: boolean;

        $r3 = specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVar(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>(r1, r2, 0);

        $r4 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList temporaryVariables>;

        virtualinvoke $r4.<java.util.LinkedList: void addFirst(java.lang.Object)>($r3);

        $r5 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList usedVariables>;

        virtualinvoke $r5.<java.util.LinkedList: java.lang.Object removeLast()>();

        if z0 == 0 goto label1;

        $r6 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        $i1 = r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex>;

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(58, $i1);

     label1:
        $i0 = virtualinvoke $r3.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        return $i0;
    }

    private void resetVariableIndex(boolean)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex> = 1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = 1;

        goto label2;

     label1:
        r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex> = 0;

        r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = 0;

     label2:
        return;
    }

    public void clear()
    {
        groovyjarjarasm.asm.MethodVisitor $r18, $r23;
        org.codehaus.groovy.classgen.Variable r13;
        java.util.Map $r6, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.GroovyBugError $r25;
        org.codehaus.groovy.ast.VariableScope $r3;
        java.lang.StringBuffer $r26, $r27, $r28, $r29, $r30, $r31;
        int $i0, $i1, $i2, i3;
        java.lang.String $r15, $r19, $r22, $r32, $r33;
        java.util.LinkedList $r1, $r4, $r7, $r24;
        groovyjarjarasm.asm.Label $r2, $r16, $r17, $r20, $r21;
        java.util.Iterator $r5;
        org.codehaus.groovy.ast.ClassNode $r14;
        java.lang.Object $r12;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i0 <= 1 goto label3;

        $r24 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $i2 = virtualinvoke $r24.<java.util.LinkedList: int size()>();

        i3 = $i2 - 1;

        $r25 = new org.codehaus.groovy.GroovyBugError;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("the compile stack contains ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" more push instruction");

        if i3 != 1 goto label1;

        $r33 = "";

        goto label2;

     label1:
        $r33 = "s";

     label2:
        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" than pops.");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r25.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r32);

        throw $r25;

     label3:
        r0.<org.codehaus.groovy.classgen.CompileStack: boolean clear> = 1;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisEndLabel>;

        if $r2 != null goto label4;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void setEndLabels()>();

     label4:
        $r3 = r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope scope>;

        $z0 = virtualinvoke $r3.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        if $z0 != 0 goto label5;

        $r23 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        $r22 = r0.<org.codehaus.groovy.classgen.CompileStack: java.lang.String className>;

        $r21 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisStartLabel>;

        $r20 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisEndLabel>;

        interfaceinvoke $r23.<groovyjarjarasm.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,int)>("this", $r22, null, $r21, $r20, 0);

     label5:
        $r4 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList usedVariables>;

        $r5 = virtualinvoke $r4.<java.util.LinkedList: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r12 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.codehaus.groovy.classgen.Variable) $r12;

        $r14 = virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $r15 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>($r14);

        $r16 = virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: groovyjarjarasm.asm.Label getStartLabel()>();

        $r17 = virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: groovyjarjarasm.asm.Label getEndLabel()>();

        $r18 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        $r19 = virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: java.lang.String getName()>();

        $i1 = virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        interfaceinvoke $r18.<groovyjarjarasm.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,groovyjarjarasm.asm.Label,groovyjarjarasm.asm.Label,int)>($r19, $r15, null, $r16, $r17, $i1);

        goto label6;

     label7:
        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pop()>();

        $r6 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList usedVariables>;

        virtualinvoke $r7.<java.util.LinkedList: void clear()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope scope> = null;

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv> = null;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void resetVariableIndex(boolean)>(0);

        $r8 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels>;

        interfaceinvoke $r8.<java.util.Map: void clear()>();

        $r9 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        $r10 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopBreakLabel>;

        interfaceinvoke $r10.<java.util.Map: void clear()>();

        $r11 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopContinueLabel>;

        interfaceinvoke $r11.<java.util.Map: void clear()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label continueLabel> = null;

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel> = null;

        r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.BytecodeHelper helper> = null;

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisStartLabel> = null;

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisEndLabel> = null;

        return;
    }

    protected void init(org.codehaus.groovy.ast.VariableScope, org.codehaus.groovy.ast.Parameter[], groovyjarjarasm.asm.MethodVisitor, org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.VariableScope r1;
        org.codehaus.groovy.ast.ClassNode r5;
        org.codehaus.groovy.classgen.BytecodeHelper $r9;
        groovyjarjarasm.asm.MethodVisitor r2;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.GroovyBugError $r8;
        org.codehaus.groovy.ast.Parameter[] r4;
        int $i1, $i3;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        r4 := @parameter1: org.codehaus.groovy.ast.Parameter[];

        r2 := @parameter2: groovyjarjarasm.asm.MethodVisitor;

        r5 := @parameter3: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0.<org.codehaus.groovy.classgen.CompileStack: boolean clear>;

        if $z0 != 0 goto label1;

        $r8 = new org.codehaus.groovy.GroovyBugError;

        specialinvoke $r8.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>("CompileStack#init called without calling clear before");

        throw $r8;

     label1:
        r0.<org.codehaus.groovy.classgen.CompileStack: boolean clear> = 0;

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushVariableScope(org.codehaus.groovy.ast.VariableScope)>(r1);

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv> = r2;

        $r9 = new org.codehaus.groovy.classgen.BytecodeHelper;

        specialinvoke $r9.<org.codehaus.groovy.classgen.BytecodeHelper: void <init>(groovyjarjarasm.asm.MethodVisitor)>(r2);

        r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.BytecodeHelper helper> = $r9;

        $z1 = virtualinvoke r1.<org.codehaus.groovy.ast.VariableScope: boolean isInStaticContext()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void defineMethodVariables(org.codehaus.groovy.ast.Parameter[],boolean)>(r4, $z1);

        $r6 = staticinvoke <org.codehaus.groovy.classgen.BytecodeHelper: java.lang.String getTypeDescription(org.codehaus.groovy.ast.ClassNode)>(r5);

        r0.<org.codehaus.groovy.classgen.CompileStack: java.lang.String className> = $r6;

        $i1 = (int) -1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentClassIndex> = $i1;

        $i3 = (int) -1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentMetaClassIndex> = $i3;

        return;
    }

    protected void pushVariableScope(org.codehaus.groovy.ast.VariableScope)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.VariableScope r1;
        java.util.Map $r3, $r4, $r5;
        java.util.HashMap $r2, $r6;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushState()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope scope> = r1;

        $r2 = new java.util.HashMap;

        $r3 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels>;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>($r3);

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels> = $r2;

        $r5 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels>;

        $r4 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r4);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels> = $r6;

        return;
    }

    protected void pushLoop(org.codehaus.groovy.ast.VariableScope, java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.VariableScope r1;
        java.lang.String r2;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: org.codehaus.groovy.ast.VariableScope;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushVariableScope(org.codehaus.groovy.ast.VariableScope)>(r1);

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void initLoopLabels(java.lang.String)>(r2);

        return;
    }

    private void initLoopLabels(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r5, $r7;
        java.lang.String r3;
        groovyjarjarasm.asm.Label $r1, $r2, $r4, $r6;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r3 := @parameter0: java.lang.String;

        $r1 = new groovyjarjarasm.asm.Label;

        specialinvoke $r1.<groovyjarjarasm.asm.Label: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label continueLabel> = $r1;

        $r2 = new groovyjarjarasm.asm.Label;

        specialinvoke $r2.<groovyjarjarasm.asm.Label: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel> = $r2;

        if r3 == null goto label1;

        $r5 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopBreakLabel>;

        $r4 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4);

        $r7 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopContinueLabel>;

        $r6 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label continueLabel>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

     label1:
        return;
    }

    protected void pushLoop(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushState()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void initLoopLabels(java.lang.String)>(r1);

        return;
    }

    protected groovyjarjarasm.asm.Label getNamedBreakLabel(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        groovyjarjarasm.asm.Label r4, r5;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        r4 = virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getBreakLabel()>();

        r5 = null;

        if r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopBreakLabel>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (groovyjarjarasm.asm.Label) $r3;

     label1:
        if r5 == null goto label2;

        r4 = r5;

     label2:
        return r4;
    }

    protected groovyjarjarasm.asm.Label getNamedContinueLabel(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        groovyjarjarasm.asm.Label r4, r5;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        r4 = virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label getLabel(java.lang.String)>(r1);

        r5 = null;

        if r1 == null goto label1;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map namedLoopContinueLabel>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (groovyjarjarasm.asm.Label) $r3;

     label1:
        if r5 == null goto label2;

        r4 = r5;

     label2:
        return r4;
    }

    protected groovyjarjarasm.asm.Label pushSwitch()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        groovyjarjarasm.asm.Label $r1, $r2;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushState()>();

        $r1 = new groovyjarjarasm.asm.Label;

        specialinvoke $r1.<groovyjarjarasm.asm.Label: void <init>()>();

        r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel> = $r1;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel>;

        return $r2;
    }

    protected void pushBooleanExpression()
    {
        org.codehaus.groovy.classgen.CompileStack r0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushState()>();

        return;
    }

    private org.codehaus.groovy.classgen.Variable defineVar(java.lang.String, org.codehaus.groovy.ast.ClassNode, boolean)
    {
        org.codehaus.groovy.ast.ClassNode r4;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.classgen.Variable $r1;
        int $i0, $i1, i2;
        java.lang.String r2;
        java.util.LinkedList $r3;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void makeNextVariableID(org.codehaus.groovy.ast.ClassNode)>(r4);

        i2 = r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex>;

        if z0 == 0 goto label1;

        $i0 = r0.<org.codehaus.groovy.classgen.CompileStack: int localVariableOffset>;

        $i1 = $i0 + 1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int localVariableOffset> = $i1;

        i2 = $i0;

        r4 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode getWrapper(org.codehaus.groovy.ast.ClassNode)>(r4);

     label1:
        $r1 = new org.codehaus.groovy.classgen.Variable;

        specialinvoke $r1.<org.codehaus.groovy.classgen.Variable: void <init>(int,org.codehaus.groovy.ast.ClassNode,java.lang.String)>(i2, r4, r2);

        $r3 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList usedVariables>;

        virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1);

        virtualinvoke $r1.<org.codehaus.groovy.classgen.Variable: void setHolder(boolean)>(z0);

        return $r1;
    }

    private void makeLocalVariablesOffset(org.codehaus.groovy.ast.Parameter[], boolean)
    {
        org.codehaus.groovy.ast.Parameter $r2;
        org.codehaus.groovy.ast.ClassNode $r3;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.Parameter[] r1;
        int $i0, $i1, i2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void resetVariableIndex(boolean)>(z0);

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $r2 = r1[i2];

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void makeNextVariableID(org.codehaus.groovy.ast.ClassNode)>($r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex>;

        r0.<org.codehaus.groovy.classgen.CompileStack: int localVariableOffset> = $i1;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void resetVariableIndex(boolean)>(z0);

        return;
    }

    private void defineMethodVariables(org.codehaus.groovy.ast.Parameter[], boolean)
    {
        org.codehaus.groovy.classgen.BytecodeHelper $r11, $r12;
        groovyjarjarasm.asm.MethodVisitor $r2;
        org.codehaus.groovy.classgen.Variable $r10, r13;
        java.util.Map $r9;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5;
        groovyjarjarasm.asm.Label $r0;
        boolean z0, $z1, z2;
        org.codehaus.groovy.ast.Parameter $r4, $r6, $r8;
        org.codehaus.groovy.ast.ClassNode $r7;
        org.codehaus.groovy.classgen.CompileStack r1;
        org.codehaus.groovy.ast.Parameter[] r3;

        r1 := @this: org.codehaus.groovy.classgen.CompileStack;

        r3 := @parameter0: org.codehaus.groovy.ast.Parameter[];

        z0 := @parameter1: boolean;

        $r0 = new groovyjarjarasm.asm.Label;

        specialinvoke $r0.<groovyjarjarasm.asm.Label: void <init>()>();

        r1.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label thisStartLabel> = $r0;

        $r2 = r1.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r0);

        specialinvoke r1.<org.codehaus.groovy.classgen.CompileStack: void makeLocalVariablesOffset(org.codehaus.groovy.ast.Parameter[],boolean)>(r3, z0);

        z2 = 0;

        i3 = 0;

     label1:
        $i0 = lengthof r3;

        if i3 >= $i0 goto label4;

        $r4 = r3[i3];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: java.lang.String getName()>();

        $r6 = r3[i3];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r8 = r3[i3];

        $z1 = virtualinvoke $r8.<org.codehaus.groovy.ast.Parameter: boolean isClosureSharedVariable()>();

        if $z1 == 0 goto label2;

        $r10 = specialinvoke r1.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVar(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>($r5, $r7, 1);

        r13 = $r10;

        $r11 = r1.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        $i2 = r1.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex>;

        virtualinvoke $r11.<org.codehaus.groovy.classgen.BytecodeHelper: void load(org.codehaus.groovy.ast.ClassNode,int)>($r7, $i2);

        $r12 = r1.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.BytecodeHelper helper>;

        virtualinvoke $r12.<org.codehaus.groovy.classgen.BytecodeHelper: void box(org.codehaus.groovy.ast.ClassNode)>($r7);

        specialinvoke r1.<org.codehaus.groovy.classgen.CompileStack: void createReference(org.codehaus.groovy.classgen.Variable)>($r10);

        z2 = 1;

        goto label3;

     label2:
        r13 = specialinvoke r1.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVar(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>($r5, $r7, 0);

     label3:
        virtualinvoke r13.<org.codehaus.groovy.classgen.Variable: void setStartLabel(groovyjarjarasm.asm.Label)>($r0);

        $r9 = r1.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r13);

        i3 = i3 + 1;

        goto label1;

     label4:
        if z2 == 0 goto label5;

        $i1 = r1.<org.codehaus.groovy.classgen.CompileStack: int localVariableOffset>;

        r1.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = $i1;

     label5:
        return;
    }

    private void createReference(org.codehaus.groovy.classgen.Variable)
    {
        groovyjarjarasm.asm.MethodVisitor $r1, $r2, $r3, $r4, $r6;
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.classgen.Variable r5;
        int $i0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r5 := @parameter0: org.codehaus.groovy.classgen.Variable;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<groovyjarjarasm.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, "groovy/lang/Reference");

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(90);

        $r3 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(95);

        $r4 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<groovyjarjarasm.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "groovy/lang/Reference", "<init>", "(Ljava/lang/Object;)V");

        $r6 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r5.<org.codehaus.groovy.classgen.Variable: int getIndex()>();

        interfaceinvoke $r6.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(58, $i0);

        return;
    }

    public org.codehaus.groovy.classgen.Variable defineVariable(org.codehaus.groovy.ast.Variable, boolean)
    {
        org.codehaus.groovy.ast.ClassNode $r3;
        groovyjarjarasm.asm.MethodVisitor $r7, $r8, $r9, $r10;
        org.codehaus.groovy.classgen.CompileStack r2;
        org.codehaus.groovy.ast.Variable r0;
        org.codehaus.groovy.classgen.Variable $r4;
        java.util.Map $r5;
        int $i0;
        java.lang.String $r1;
        boolean $z0, $z1, z2;
        groovyjarjarasm.asm.Label $r6;

        r2 := @this: org.codehaus.groovy.classgen.CompileStack;

        r0 := @parameter0: org.codehaus.groovy.ast.Variable;

        z2 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<org.codehaus.groovy.ast.Variable: java.lang.String getName()>();

        $r3 = interfaceinvoke r0.<org.codehaus.groovy.ast.Variable: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = specialinvoke r2.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.classgen.Variable defineVar(java.lang.String,org.codehaus.groovy.ast.ClassNode,boolean)>($r1, $r3, 0);

        $z0 = interfaceinvoke r0.<org.codehaus.groovy.ast.Variable: boolean isClosureSharedVariable()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r4.<org.codehaus.groovy.classgen.Variable: void setHolder(boolean)>(1);

     label1:
        $r5 = r2.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        $r6 = new groovyjarjarasm.asm.Label;

        specialinvoke $r6.<groovyjarjarasm.asm.Label: void <init>()>();

        virtualinvoke $r4.<org.codehaus.groovy.classgen.Variable: void setStartLabel(groovyjarjarasm.asm.Label)>($r6);

        $z1 = virtualinvoke $r4.<org.codehaus.groovy.classgen.Variable: boolean isHolder()>();

        if $z1 == 0 goto label3;

        if z2 != 0 goto label2;

        $r9 = r2.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r9.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(1);

     label2:
        specialinvoke r2.<org.codehaus.groovy.classgen.CompileStack: void createReference(org.codehaus.groovy.classgen.Variable)>($r4);

        goto label5;

     label3:
        if z2 != 0 goto label4;

        $r8 = r2.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r8.<groovyjarjarasm.asm.MethodVisitor: void visitInsn(int)>(1);

     label4:
        $r7 = r2.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        $i0 = r2.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex>;

        interfaceinvoke $r7.<groovyjarjarasm.asm.MethodVisitor: void visitVarInsn(int,int)>(58, $i0);

     label5:
        $r10 = r2.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.MethodVisitor mv>;

        interfaceinvoke $r10.<groovyjarjarasm.asm.MethodVisitor: void visitLabel(groovyjarjarasm.asm.Label)>($r6);

        return $r4;
    }

    public boolean containsVariable(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    private void makeNextVariableID(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ClassNode r1, $r2, $r3;
        org.codehaus.groovy.classgen.CompileStack r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $i0 = r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex>;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex> = $i0;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode long_TYPE>;

        if r1 == $r2 goto label1;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode double_TYPE>;

        if r1 != $r3 goto label2;

     label1:
        $i1 = r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex>;

        $i2 = $i1 + 1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = $i2;

     label2:
        $i3 = r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex> = $i4;

        return;
    }

    public groovyjarjarasm.asm.Label getLabel(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r0;
        groovyjarjarasm.asm.Label r4;

        r1 := @this: org.codehaus.groovy.classgen.CompileStack;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (groovyjarjarasm.asm.Label) $r3;

        if r4 != null goto label2;

        r4 = virtualinvoke r1.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label createLocalLabel(java.lang.String)>(r0);

     label2:
        return r4;
    }

    public groovyjarjarasm.asm.Label createLocalLabel(java.lang.String)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r2, $r5;
        java.lang.Object $r3;
        java.lang.String r1;
        groovyjarjarasm.asm.Label $r4, r6;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (groovyjarjarasm.asm.Label) $r3;

        if r6 != null goto label1;

        $r4 = new groovyjarjarasm.asm.Label;

        specialinvoke $r4.<groovyjarjarasm.asm.Label: void <init>()>();

        r6 = $r4;

        $r5 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public int getCurrentClassIndex()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        int $i0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $i0 = r0.<org.codehaus.groovy.classgen.CompileStack: int currentClassIndex>;

        return $i0;
    }

    public void setCurrentClassIndex(int)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        int i0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        i0 := @parameter0: int;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentClassIndex> = i0;

        return;
    }

    public int getCurrentMetaClassIndex()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        int $i0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $i0 = r0.<org.codehaus.groovy.classgen.CompileStack: int currentMetaClassIndex>;

        return $i0;
    }

    public void setCurrentMetaClassIndex(int)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        int i0;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        i0 := @parameter0: int;

        r0.<org.codehaus.groovy.classgen.CompileStack: int currentMetaClassIndex> = i0;

        return;
    }

    public void applyFinallyBlocks(groovyjarjarasm.asm.Label, boolean)
    {
        java.util.ListIterator $r3;
        java.util.ArrayList $r4;
        org.codehaus.groovy.classgen.CompileStack$StateStackElement r12, r13;
        java.util.Map $r7;
        int $i0;
        java.util.LinkedList $r1, $r2, $r5;
        boolean $z0, $z1, z2;
        groovyjarjarasm.asm.Label r9, $r10, $r11;
        java.util.Collection $r8;
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.List r14;
        java.lang.Object $r6;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r9 := @parameter0: groovyjarjarasm.asm.Label;

        z2 := @parameter1: boolean;

        r12 = null;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList stateStack>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.util.ListIterator listIterator(int)>($i0);

     label1:
        $z0 = interfaceinvoke $r3.<java.util.ListIterator: boolean hasPrevious()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r3.<java.util.ListIterator: java.lang.Object previous()>();

        r13 = (org.codehaus.groovy.classgen.CompileStack$StateStackElement) $r6;

        $r7 = r13.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: java.util.Map currentBlockNamedLabels>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        $z1 = interfaceinvoke $r8.<java.util.Collection: boolean contains(java.lang.Object)>(r9);

        if $z1 != 0 goto label3;

        if z2 == 0 goto label2;

        $r11 = r13.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: groovyjarjarasm.asm.Label breakLabel>;

        if $r11 == r9 goto label2;

        r12 = r13;

        goto label4;

     label2:
        if z2 != 0 goto label3;

        $r10 = r13.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: groovyjarjarasm.asm.Label continueLabel>;

        if $r10 == r9 goto label3;

        r12 = r13;

        goto label4;

     label3:
        goto label1;

     label4:
        if r12 != null goto label5;

        r14 = <java.util.Collections: java.util.List EMPTY_LIST>;

        goto label6;

     label5:
        r14 = r12.<org.codehaus.groovy.classgen.CompileStack$StateStackElement: java.util.LinkedList finallyBlocks>;

     label6:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        virtualinvoke $r4.<java.util.ArrayList: boolean removeAll(java.util.Collection)>(r14);

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void applyFinallyBlocks(java.util.List)>($r4);

        return;
    }

    private void applyFinallyBlocks(java.util.List)
    {
        java.util.Iterator $r1;
        java.lang.Runnable r3;
        org.codehaus.groovy.classgen.CompileStack r4;
        java.util.List r0, $r5;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r4 := @this: org.codehaus.groovy.classgen.CompileStack;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Runnable) $r2;

        $r5 = r4.<org.codehaus.groovy.classgen.CompileStack: java.util.List visitedBlocks>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        interfaceinvoke r3.<java.lang.Runnable: void run()>();

        goto label1;

     label3:
        return;
    }

    public void applyFinallyBlocks()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void applyFinallyBlocks(java.util.List)>($r1);

        return;
    }

    public boolean hasFinallyBlocks()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void pushFinallyBlock(java.lang.Runnable)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r2;
        java.lang.Runnable r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);

        virtualinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void pushState()>();

        return;
    }

    public void popFinallyBlock()
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        specialinvoke r0.<org.codehaus.groovy.classgen.CompileStack: void popState()>();

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        virtualinvoke $r1.<java.util.LinkedList: java.lang.Object removeFirst()>();

        return;
    }

    public void pushFinallyBlockVisit(java.lang.Runnable)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.List $r2;
        java.lang.Runnable r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.List visitedBlocks>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void popFinallyBlockVisit(java.lang.Runnable)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.List $r2;
        java.lang.Runnable r1;

        r0 := @this: org.codehaus.groovy.classgen.CompileStack;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.List visitedBlocks>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    static org.codehaus.groovy.ast.VariableScope access$000(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        org.codehaus.groovy.ast.VariableScope $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: org.codehaus.groovy.ast.VariableScope scope>;

        return $r1;
    }

    static groovyjarjarasm.asm.Label access$100(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        groovyjarjarasm.asm.Label $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label continueLabel>;

        return $r1;
    }

    static groovyjarjarasm.asm.Label access$200(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        groovyjarjarasm.asm.Label $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: groovyjarjarasm.asm.Label breakLabel>;

        return $r1;
    }

    static int access$300(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        int $i0;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $i0 = r0.<org.codehaus.groovy.classgen.CompileStack: int currentVariableIndex>;

        return $i0;
    }

    static java.util.Map access$400(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map stackVariables>;

        return $r1;
    }

    static java.util.LinkedList access$500(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList temporaryVariables>;

        return $r1;
    }

    static int access$600(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        int $i0;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $i0 = r0.<org.codehaus.groovy.classgen.CompileStack: int nextVariableIndex>;

        return $i0;
    }

    static java.util.Map access$700(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map superBlockNamedLabels>;

        return $r1;
    }

    static java.util.Map access$800(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.Map $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.Map currentBlockNamedLabels>;

        return $r1;
    }

    static java.util.LinkedList access$900(org.codehaus.groovy.classgen.CompileStack)
    {
        org.codehaus.groovy.classgen.CompileStack r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: org.codehaus.groovy.classgen.CompileStack;

        $r1 = r0.<org.codehaus.groovy.classgen.CompileStack: java.util.LinkedList finallyBlocks>;

        return $r1;
    }
}
