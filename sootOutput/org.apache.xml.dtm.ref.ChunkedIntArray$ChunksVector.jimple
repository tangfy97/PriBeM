class org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector extends java.lang.Object
{
    final int BLOCKSIZE;
    int[][] m_map;
    int m_mapSize;
    int pos;
    private final org.apache.xml.dtm.ref.ChunkedIntArray this$0;

    void <init>(org.apache.xml.dtm.ref.ChunkedIntArray)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector r0;
        int[][] $r2;
        org.apache.xml.dtm.ref.ChunkedIntArray r1;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        r1 := @parameter0: org.apache.xml.dtm.ref.ChunkedIntArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int BLOCKSIZE> = 64;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: org.apache.xml.dtm.ref.ChunkedIntArray this$0> = r1;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int BLOCKSIZE> = 64;

        $r2 = newarray (int[])[64];

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[][] m_map> = $r2;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize> = 64;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos> = 0;

        return;
    }

    final int size()
    {
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector r0;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos>;

        return $i0;
    }

    void addElement(int[])
    {
        int[][] $r2, r3, $r4;
        int[] r1;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector r0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        r1 := @parameter0: int[];

        $i1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos>;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize>;

        if $i1 < $i0 goto label3;

        i5 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize>;

        goto label2;

     label1:
        $i8 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize>;

        $i9 = $i8 + 64;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize> = $i9;

     label2:
        $i7 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos>;

        $i6 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize>;

        if $i7 >= $i6 goto label1;

        $i10 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int m_mapSize>;

        r3 = newarray (int[])[$i10];

        $r4 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[][] m_map>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, i5);

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[][] m_map> = r3;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[][] m_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos>;

        $r2[$i2] = r1;

        $i3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos>;

        $i4 = $i3 + 1;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int pos> = $i4;

        return;
    }

    final int[] elementAt(int)
    {
        int[][] $r1;
        int[] $r2;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[][] m_map>;

        $r2 = $r1[i0];

        return $r2;
    }
}
