public class org.apache.batik.ext.awt.image.renderable.PadRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractRable implements org.apache.batik.ext.awt.image.renderable.PadRable, org.apache.batik.ext.awt.image.renderable.PaintRable
{
    org.apache.batik.ext.awt.image.PadMode padMode;
    java.awt.geom.Rectangle2D padRect;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, java.awt.geom.Rectangle2D, org.apache.batik.ext.awt.image.PadMode)
    {
        org.apache.batik.ext.awt.image.PadMode r3;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        java.awt.geom.Rectangle2D r2;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r2 := @parameter1: java.awt.geom.Rectangle2D;

        r3 := @parameter2: org.apache.batik.ext.awt.image.PadMode;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D padRect> = r2;

        r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.PadMode padMode> = r3;

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector srcs>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        java.awt.geom.Rectangle2D $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D padRect>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public void setPadRect(java.awt.geom.Rectangle2D)
    {
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        java.awt.geom.Rectangle2D r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        r1 := @parameter0: java.awt.geom.Rectangle2D;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D padRect> = r1;

        return;
    }

    public java.awt.geom.Rectangle2D getPadRect()
    {
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        java.awt.geom.Rectangle2D $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D padRect>;

        $r2 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r3 = (java.awt.geom.Rectangle2D) $r2;

        return $r3;
    }

    public void setPadMode(org.apache.batik.ext.awt.image.PadMode)
    {
        org.apache.batik.ext.awt.image.PadMode r1;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.PadMode;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.PadMode padMode> = r1;

        return;
    }

    public org.apache.batik.ext.awt.image.PadMode getPadMode()
    {
        org.apache.batik.ext.awt.image.PadMode $r1;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.PadMode padMode>;

        return $r1;
    }

    public boolean paintRable(java.awt.Graphics2D)
    {
        java.awt.Shape $r7;
        java.awt.Composite $r1;
        java.awt.geom.Rectangle2D $r6;
        org.apache.batik.ext.awt.image.renderable.Filter $r8;
        org.apache.batik.ext.awt.image.SVGComposite $r2;
        org.apache.batik.ext.awt.image.PadMode $r4, $r5;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r3;
        java.awt.Graphics2D r0;
        boolean $z0;

        r3 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        r0 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.Composite getComposite()>();

        $r2 = <org.apache.batik.ext.awt.image.SVGComposite: org.apache.batik.ext.awt.image.SVGComposite OVER>;

        $z0 = virtualinvoke $r2.<org.apache.batik.ext.awt.image.SVGComposite: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.PadMode getPadMode()>();

        $r5 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        if $r4 == $r5 goto label2;

        return 0;

     label2:
        $r6 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D getPadRect()>();

        $r7 = virtualinvoke r0.<java.awt.Graphics: java.awt.Shape getClip()>();

        virtualinvoke r0.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r6);

        $r8 = virtualinvoke r3.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,java.awt.image.renderable.RenderableImage)>(r0, $r8);

        virtualinvoke r0.<java.awt.Graphics: void setClip(java.awt.Shape)>($r7);

        return 1;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.Rectangle $r13;
        org.apache.batik.ext.awt.image.rendered.PadRed $r12;
        java.awt.geom.Rectangle2D $r6, $r7, $r8, $r11, r22;
        java.awt.RenderingHints $r1, $r18, r19;
        org.apache.batik.ext.awt.image.PadMode $r14;
        boolean $z0, $z1;
        java.awt.Shape $r4, $r10, r20;
        java.awt.image.BufferedImage $r15;
        java.awt.image.RenderedImage r21;
        java.awt.geom.AffineTransform $r5;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;
        java.awt.image.renderable.RenderContext r0, $r17;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r9;
        java.lang.Object $r16;

        r2 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r19 = $r1;

        if $r1 != null goto label1;

        $r18 = new java.awt.RenderingHints;

        specialinvoke $r18.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r19 = $r18;

     label1:
        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r4 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r20 = $r4;

        if $r4 != null goto label2;

        r20 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

     label2:
        $r5 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r6 = interfaceinvoke $r3.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $r7 = virtualinvoke r2.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $r8 = interfaceinvoke r20.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r7);

        if $z0 != 0 goto label3;

        return null;

     label3:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r8, $r7, $r8);

        r21 = null;

        $z1 = virtualinvoke $r8.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r6);

        if $z1 == 0 goto label4;

        $r16 = virtualinvoke $r6.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r22 = (java.awt.geom.Rectangle2D) $r16;

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r22, $r8, r22);

        $r17 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r17.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r5, r22, r19);

        r21 = interfaceinvoke $r3.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r17);

     label4:
        if r21 != null goto label5;

        $r15 = new java.awt.image.BufferedImage;

        specialinvoke $r15.<java.awt.image.BufferedImage: void <init>(int,int,int)>(1, 1, 2);

        r21 = $r15;

     label5:
        $r9 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>(r21);

        $r10 = virtualinvoke $r5.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r8);

        $r11 = interfaceinvoke $r10.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r12 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r13 = virtualinvoke $r11.<java.awt.geom.RectangularShape: java.awt.Rectangle getBounds()>();

        $r14 = r2.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.PadMode padMode>;

        specialinvoke $r12.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r9, $r13, $r14, r19);

        return $r12;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.lang.IndexOutOfBoundsException $r7;
        java.awt.geom.Rectangle2D $r2, r3, $r4;
        java.awt.geom.Rectangle2D$Float $r5, $r6;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.geom.Rectangle2D;

        if i0 == 0 goto label1;

        $r7 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Affine only has one input");

        throw $r7;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r2.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>(r3);

        if $z0 != 0 goto label2;

        $r6 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r6.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r6;

     label2:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r2, r3, $r2);

        $r4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $z1 = virtualinvoke $r2.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r4);

        if $z1 != 0 goto label3;

        $r5 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r5.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r5;

     label3:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r2, $r4, $r2);

        return $r2;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.geom.Rectangle2D)
    {
        java.lang.IndexOutOfBoundsException $r4;
        java.awt.geom.Rectangle2D $r2, r5, r6;
        java.awt.geom.Rectangle2D$Float $r3;
        org.apache.batik.ext.awt.image.renderable.PadRable8Bit r1;
        int i0;
        java.lang.Object $r0;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.renderable.PadRable8Bit;

        i0 := @parameter0: int;

        r5 := @parameter1: java.awt.geom.Rectangle2D;

        if i0 == 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Affine only has one input");

        throw $r4;

     label1:
        $r0 = virtualinvoke r5.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r6 = (java.awt.geom.Rectangle2D) $r0;

        $r2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.renderable.PadRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke r6.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r2);

        if $z0 != 0 goto label2;

        $r3 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Float: void <init>()>();

        return $r3;

     label2:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r6, $r2, r6);

        return r6;
    }
}
