class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator extends org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r1);

        return;
    }

    public int potential()
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator;

        return 0;
    }

    org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent generate(boolean)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r8;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r2, $r4, $r11, $r18;
        boolean $z0, z1, $z2, $z3, $z4;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1 $r21;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r9, $r16;
        java.lang.AssertionError $r14, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r1, $r3, $r6, $r7, $r10, $r15, $r17;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r5, $r12, $r13, $r19;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxSkipDistance()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r4 = $r3.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSkip(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(1, null);

        $z0 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        if z1 == 0 goto label3;

        $r15 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r16 = $r15.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i5 = $i0 + 1;

        $i6 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r16, 1, $i5);

        i7 = $i6;

        $z3 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $r17 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r18 = $r17.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r19 = virtualinvoke $r18.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSkip(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($i6, null);

        $z4 = virtualinvoke $r19.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z4 != 0 goto label4;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label3:
        $r6 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r9 = $r6.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i1 = $i0 + 1;

        $r7 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r8 = $r7.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i2 = virtualinvoke $r8.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxSkipAfterEnd()>();

        $i3 = $i0 + $i2;

        $i4 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r9, $i1, $i3);

        i7 = $i4;

        $z2 = <org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label4;

        $r10 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r11 = $r10.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkSkip(int,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>($i4, null);

        $r13 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult INVALID_DOCUMENT>;

        if $r12 == $r13 goto label4;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label4:
        $r21 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1;

        specialinvoke $r21.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator,int)>(r0, i7);

        return $r21;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/testing/RandomNindoGenerator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$SkipGenerator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
