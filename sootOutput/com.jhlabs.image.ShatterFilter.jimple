public class com.jhlabs.image.ShatterFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private float centreX;
    private float centreY;
    private float distance;
    private float transition;
    private float rotation;
    private float zoom;
    private float startAlpha;
    private float endAlpha;
    private int iterations;
    private int tile;

    public void <init>()
    {
        com.jhlabs.image.ShatterFilter r0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.ShatterFilter: float centreX> = 0.5F;

        r0.<com.jhlabs.image.ShatterFilter: float centreY> = 0.5F;

        r0.<com.jhlabs.image.ShatterFilter: float startAlpha> = 1.0F;

        r0.<com.jhlabs.image.ShatterFilter: float endAlpha> = 1.0F;

        r0.<com.jhlabs.image.ShatterFilter: int iterations> = 5;

        return;
    }

    public void setTransition(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float transition> = f0;

        return;
    }

    public float getTransition()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float transition>;

        return $f0;
    }

    public void setDistance(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float distance> = f0;

        return;
    }

    public float getDistance()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float distance>;

        return $f0;
    }

    public void setRotation(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float rotation> = f0;

        return;
    }

    public float getRotation()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float rotation>;

        return $f0;
    }

    public void setZoom(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float zoom> = f0;

        return;
    }

    public float getZoom()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float zoom>;

        return $f0;
    }

    public void setStartAlpha(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float startAlpha> = f0;

        return;
    }

    public float getStartAlpha()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float startAlpha>;

        return $f0;
    }

    public void setEndAlpha(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float endAlpha> = f0;

        return;
    }

    public float getEndAlpha()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float endAlpha>;

        return $f0;
    }

    public void setCentreX(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float centreX> = f0;

        return;
    }

    public float getCentreX()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float centreX>;

        return $f0;
    }

    public void setCentreY(float)
    {
        com.jhlabs.image.ShatterFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.ShatterFilter: float centreY> = f0;

        return;
    }

    public float getCentreY()
    {
        com.jhlabs.image.ShatterFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $f0 = r0.<com.jhlabs.image.ShatterFilter: float centreY>;

        return $f0;
    }

    public void setCentre(java.awt.geom.Point2D)
    {
        com.jhlabs.image.ShatterFilter r0;
        java.awt.geom.Point2D r1;
        float $f0, $f1;
        double $d0, $d1;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke r1.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        r0.<com.jhlabs.image.ShatterFilter: float centreX> = $f0;

        $d1 = virtualinvoke r1.<java.awt.geom.Point2D: double getY()>();

        $f1 = (float) $d1;

        r0.<com.jhlabs.image.ShatterFilter: float centreY> = $f1;

        return;
    }

    public java.awt.geom.Point2D getCentre()
    {
        com.jhlabs.image.ShatterFilter r1;
        java.awt.geom.Point2D$Float $r0;
        float $f0, $f1;

        r1 := @this: com.jhlabs.image.ShatterFilter;

        $r0 = new java.awt.geom.Point2D$Float;

        $f1 = r1.<com.jhlabs.image.ShatterFilter: float centreX>;

        $f0 = r1.<com.jhlabs.image.ShatterFilter: float centreY>;

        specialinvoke $r0.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f1, $f0);

        return $r0;
    }

    public void setIterations(int)
    {
        com.jhlabs.image.ShatterFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.ShatterFilter: int iterations> = i0;

        return;
    }

    public int getIterations()
    {
        com.jhlabs.image.ShatterFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $i0 = r0.<com.jhlabs.image.ShatterFilter: int iterations>;

        return $i0;
    }

    public void setTile(int)
    {
        com.jhlabs.image.ShatterFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.ShatterFilter: int tile> = i0;

        return;
    }

    public int getTile()
    {
        com.jhlabs.image.ShatterFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        $i0 = r0.<com.jhlabs.image.ShatterFilter: int tile>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.Color $r6;
        java.awt.geom.AffineTransform $r5;
        com.jhlabs.image.ShatterFilter r1;
        com.jhlabs.image.ShatterFilter$Tile $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, r23;
        float[] $r19, $r20, $r21;
        java.util.Random $r3;
        java.awt.Shape $r4, $r7, $r8;
        java.awt.image.BufferedImage r0, r22;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, f48, f49, f50;
        java.awt.Rectangle $r9;
        com.jhlabs.image.ShatterFilter$Tile[] $r18;
        java.awt.Graphics2D $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, $i34, i35, i36, i37, i38, i39, i40, i41;
        double $d0, $d1, $d2, $d3, $d4, d5;

        r1 := @this: com.jhlabs.image.ShatterFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r22 := @parameter1: java.awt.image.BufferedImage;

        if r22 != null goto label1;

        r22 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $f44 = (float) $i0;

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $f45 = (float) $i1;

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $f1 = (float) $i2;

        $f0 = r1.<com.jhlabs.image.ShatterFilter: float centreX>;

        $f46 = $f1 * $f0;

        $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $f3 = (float) $i3;

        $f2 = r1.<com.jhlabs.image.ShatterFilter: float centreY>;

        $f47 = $f3 * $f2;

        $f5 = $f46 * $f46;

        $f4 = $f47 * $f47;

        $f6 = $f5 + $f4;

        $d0 = (double) $f6;

        staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $i5 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        $i4 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        $i32 = $i5 * $i4;

        $r18 = newarray (com.jhlabs.image.ShatterFilter$Tile)[$i32];

        $r19 = newarray (float)[$i32];

        $r20 = newarray (float)[$i32];

        $r21 = newarray (float)[$i32];

        $r2 = virtualinvoke r22.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>(long)>(0L);

        i33 = 0;

     label2:
        $i34 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        if i33 >= $i34 goto label5;

        $i6 = (int) $f45;

        $i8 = $i6 * i33;

        $i7 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        i35 = $i8 / $i7;

        $i10 = (int) $f45;

        $i9 = i33 + 1;

        $i12 = $i10 * $i9;

        $i11 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        i36 = $i12 / $i11;

        i37 = 0;

     label3:
        $i13 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        if i37 >= $i13 goto label4;

        $i14 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        $i15 = i33 * $i14;

        i38 = $i15 + i37;

        $i16 = (int) $f44;

        $i18 = $i16 * i37;

        $i17 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        i39 = $i18 / $i17;

        $i20 = (int) $f44;

        $i19 = i37 + 1;

        $i22 = $i20 * $i19;

        $i21 = r1.<com.jhlabs.image.ShatterFilter: int iterations>;

        i40 = $i22 / $i21;

        $i23 = r1.<com.jhlabs.image.ShatterFilter: int tile>;

        $f21 = (float) $i23;

        $f22 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f23 = $f21 * $f22;

        $r19[i38] = $f23;

        $i24 = r1.<com.jhlabs.image.ShatterFilter: int tile>;

        $f24 = (float) $i24;

        $f25 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f26 = $f24 * $f25;

        $r20[i38] = $f26;

        $r19[i38] = 0.0F;

        $r20[i38] = 0.0F;

        $i25 = r1.<com.jhlabs.image.ShatterFilter: int tile>;

        $f27 = (float) $i25;

        $f28 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f29 = 2.0F * $f28;

        $f30 = $f29 - 1.0F;

        $f31 = $f27 * $f30;

        $r21[i38] = $f31;

        $r9 = new java.awt.Rectangle;

        $i27 = i40 - i39;

        $i26 = i36 - i35;

        specialinvoke $r9.<java.awt.Rectangle: void <init>(int,int,int,int)>(i39, i35, $i27, $i26);

        $r10 = new com.jhlabs.image.ShatterFilter$Tile;

        specialinvoke $r10.<com.jhlabs.image.ShatterFilter$Tile: void <init>()>();

        $r18[i38] = $r10;

        $r11 = $r18[i38];

        $r11.<com.jhlabs.image.ShatterFilter$Tile: java.awt.Shape shape> = $r9;

        $r12 = $r18[i38];

        $i28 = i39 + i40;

        $f32 = (float) $i28;

        $f33 = $f32 * 0.5F;

        $r12.<com.jhlabs.image.ShatterFilter$Tile: float x> = $f33;

        $r13 = $r18[i38];

        $i29 = i35 + i36;

        $f34 = (float) $i29;

        $f35 = $f34 * 0.5F;

        $r13.<com.jhlabs.image.ShatterFilter$Tile: float y> = $f35;

        $r14 = $r18[i38];

        $f36 = (float) i37;

        $f37 = $f46 - $f36;

        $f38 = $f44 - $f37;

        $r14.<com.jhlabs.image.ShatterFilter$Tile: float vx> = $f38;

        $r15 = $r18[i38];

        $f39 = (float) i33;

        $f40 = $f47 - $f39;

        $f41 = $f45 - $f40;

        $r15.<com.jhlabs.image.ShatterFilter$Tile: float vy> = $f41;

        $r16 = $r18[i38];

        $i30 = i40 - i39;

        $f42 = (float) $i30;

        $r16.<com.jhlabs.image.ShatterFilter$Tile: float w> = $f42;

        $r17 = $r18[i38];

        $i31 = i36 - i35;

        $f43 = (float) $i31;

        $r17.<com.jhlabs.image.ShatterFilter$Tile: float h> = $f43;

        i37 = i37 + 1;

        goto label3;

     label4:
        i33 = i33 + 1;

        goto label2;

     label5:
        i41 = 0;

     label6:
        if i41 >= $i32 goto label7;

        $f8 = (float) i41;

        $f7 = (float) $i32;

        f48 = $f8 / $f7;

        $f9 = f48 * 2.0F;

        $d1 = (double) $f9;

        d5 = $d1 * 3.141592653589793;

        staticinvoke <java.lang.Math: double cos(double)>(d5);

        staticinvoke <java.lang.Math: double sin(double)>(d5);

        r23 = $r18[i41];

        $r4 = r23.<com.jhlabs.image.ShatterFilter$Tile: java.awt.Shape shape>;

        interfaceinvoke $r4.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $r5 = virtualinvoke $r2.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $f13 = r23.<com.jhlabs.image.ShatterFilter$Tile: float x>;

        $f11 = r1.<com.jhlabs.image.ShatterFilter: float transition>;

        $f10 = r23.<com.jhlabs.image.ShatterFilter$Tile: float vx>;

        $f12 = $f11 * $f10;

        f49 = $f13 + $f12;

        $f17 = r23.<com.jhlabs.image.ShatterFilter$Tile: float y>;

        $f15 = r1.<com.jhlabs.image.ShatterFilter: float transition>;

        $f14 = r23.<com.jhlabs.image.ShatterFilter$Tile: float vy>;

        $f16 = $f15 * $f14;

        f50 = $f17 + $f16;

        $d3 = (double) f49;

        $d2 = (double) f50;

        virtualinvoke $r2.<java.awt.Graphics2D: void translate(double,double)>($d3, $d2);

        $f19 = r1.<com.jhlabs.image.ShatterFilter: float transition>;

        $f18 = $r21[i41];

        $f20 = $f19 * $f18;

        $d4 = (double) $f20;

        virtualinvoke $r2.<java.awt.Graphics2D: void rotate(double)>($d4);

        $r6 = staticinvoke <java.awt.Color: java.awt.Color getHSBColor(float,float,float)>(f48, 1.0F, 1.0F);

        virtualinvoke $r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r6);

        $r7 = virtualinvoke $r2.<java.awt.Graphics: java.awt.Shape getClip()>();

        $r8 = r23.<com.jhlabs.image.ShatterFilter$Tile: java.awt.Shape shape>;

        virtualinvoke $r2.<java.awt.Graphics2D: void clip(java.awt.Shape)>($r8);

        virtualinvoke $r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

        virtualinvoke $r2.<java.awt.Graphics: void setClip(java.awt.Shape)>($r7);

        virtualinvoke $r2.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r5);

        i41 = i41 + 1;

        goto label6;

     label7:
        virtualinvoke $r2.<java.awt.Graphics: void dispose()>();

        return r22;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.ShatterFilter r0;

        r0 := @this: com.jhlabs.image.ShatterFilter;

        return "Transition/Shatter...";
    }
}
