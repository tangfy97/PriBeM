public abstract class org.apache.batik.svggen.SwingSVGPrettyPrint extends java.lang.Object implements org.apache.batik.svggen.SVGSyntax
{

    public void <init>()
    {
        org.apache.batik.svggen.SwingSVGPrettyPrint r0;

        r0 := @this: org.apache.batik.svggen.SwingSVGPrettyPrint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void print(javax.swing.JComponent, org.apache.batik.svggen.SVGGraphics2D)
    {
        java.awt.Color $r4;
        java.awt.Rectangle $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.svggen.SVGIDGenerator $r10;
        java.lang.String $r12, $r13;
        org.apache.batik.svggen.SVGGraphics2D r1, r3;
        boolean $z0, $z1;
        javax.swing.JComponent r0;
        java.awt.Font $r5;
        org.w3c.dom.Element $r6, $r8;
        org.apache.batik.svggen.SVGGeneratorContext $r9;
        java.awt.Graphics $r2;
        java.lang.Class $r11;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: org.apache.batik.svggen.SVGGraphics2D;

        $z0 = r0 instanceof javax.swing.JComboBox;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof javax.swing.JScrollBar;

        if $z1 == 0 goto label2;

     label1:
        staticinvoke <org.apache.batik.svggen.SwingSVGPrettyPrint: void printHack(javax.swing.JComponent,org.apache.batik.svggen.SVGGraphics2D)>(r0, r1);

        return;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Graphics create()>();

        r3 = (org.apache.batik.svggen.SVGGraphics2D) $r2;

        $r4 = virtualinvoke r0.<java.awt.Component: java.awt.Color getForeground()>();

        virtualinvoke r3.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setColor(java.awt.Color)>($r4);

        $r5 = virtualinvoke r0.<java.awt.Component: java.awt.Font getFont()>();

        virtualinvoke r3.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setFont(java.awt.Font)>($r5);

        $r6 = virtualinvoke r3.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getTopLevelGroup()>();

        $i0 = virtualinvoke r0.<javax.swing.JComponent: int getWidth()>();

        if $i0 <= 0 goto label3;

        $i1 = virtualinvoke r0.<javax.swing.JComponent: int getHeight()>();

        if $i1 > 0 goto label4;

     label3:
        return;

     label4:
        $r7 = virtualinvoke r3.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Rectangle getClipBounds()>();

        if $r7 != null goto label5;

        $i2 = virtualinvoke r0.<javax.swing.JComponent: int getWidth()>();

        $i3 = virtualinvoke r0.<javax.swing.JComponent: int getHeight()>();

        virtualinvoke r3.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setClip(int,int,int,int)>(0, 0, $i2, $i3);

     label5:
        staticinvoke <org.apache.batik.svggen.SwingSVGPrettyPrint: void paintComponent(javax.swing.JComponent,org.apache.batik.svggen.SVGGraphics2D)>(r0, r3);

        staticinvoke <org.apache.batik.svggen.SwingSVGPrettyPrint: void paintBorder(javax.swing.JComponent,org.apache.batik.svggen.SVGGraphics2D)>(r0, r3);

        staticinvoke <org.apache.batik.svggen.SwingSVGPrettyPrint: void paintChildren(javax.swing.JComponent,org.apache.batik.svggen.SVGGraphics2D)>(r0, r3);

        $r8 = virtualinvoke r3.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getTopLevelGroup()>();

        $r9 = virtualinvoke r1.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r10 = $r9.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.SVGIDGenerator idGenerator>;

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<org.apache.batik.svggen.SVGIDGenerator: java.lang.String generateID(java.lang.String)>($r12);

        interfaceinvoke $r8.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "id", $r13);

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        virtualinvoke r1.<org.apache.batik.svggen.SVGGraphics2D: void setTopLevelGroup(org.w3c.dom.Element)>($r6);

        return;
    }

    private static void printHack(javax.swing.JComponent, org.apache.batik.svggen.SVGGraphics2D)
    {
        java.awt.Color $r4;
        java.awt.Rectangle $r7;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.svggen.SVGIDGenerator $r10;
        java.lang.String $r12, $r13;
        org.apache.batik.svggen.SVGGraphics2D r0, r2;
        javax.swing.JComponent r3;
        java.awt.Font $r5;
        org.w3c.dom.Element $r6, $r8;
        org.apache.batik.svggen.SVGGeneratorContext $r9;
        java.awt.Graphics $r1;
        java.lang.Class $r11;

        r3 := @parameter0: javax.swing.JComponent;

        r0 := @parameter1: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: java.awt.Graphics create()>();

        r2 = (org.apache.batik.svggen.SVGGraphics2D) $r1;

        $r4 = virtualinvoke r3.<java.awt.Component: java.awt.Color getForeground()>();

        virtualinvoke r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setColor(java.awt.Color)>($r4);

        $r5 = virtualinvoke r3.<java.awt.Component: java.awt.Font getFont()>();

        virtualinvoke r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setFont(java.awt.Font)>($r5);

        $r6 = virtualinvoke r2.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getTopLevelGroup()>();

        $i0 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        if $i1 > 0 goto label2;

     label1:
        return;

     label2:
        $r7 = virtualinvoke r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: java.awt.Rectangle getClipBounds()>();

        if $r7 != null goto label3;

        $i2 = virtualinvoke r3.<javax.swing.JComponent: int getWidth()>();

        $i3 = virtualinvoke r3.<javax.swing.JComponent: int getHeight()>();

        virtualinvoke r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setClip(int,int,int,int)>(0, 0, $i2, $i3);

     label3:
        virtualinvoke r3.<javax.swing.JComponent: void paint(java.awt.Graphics)>(r2);

        $r8 = virtualinvoke r2.<org.apache.batik.svggen.SVGGraphics2D: org.w3c.dom.Element getTopLevelGroup()>();

        $r9 = virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext()>();

        $r10 = $r9.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.SVGIDGenerator idGenerator>;

        $r11 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<org.apache.batik.svggen.SVGIDGenerator: java.lang.String generateID(java.lang.String)>($r12);

        interfaceinvoke $r8.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "id", $r13);

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        virtualinvoke r0.<org.apache.batik.svggen.SVGGraphics2D: void setTopLevelGroup(org.w3c.dom.Element)>($r6);

        return;
    }

    private static void paintComponent(javax.swing.JComponent, org.apache.batik.svggen.SVGGraphics2D)
    {
        javax.swing.JComponent r0;
        javax.swing.plaf.ComponentUI $r1;
        org.apache.batik.svggen.SVGGraphics2D r2;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = staticinvoke <javax.swing.UIManager: javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent)>(r0);

        if $r1 == null goto label1;

        virtualinvoke $r1.<javax.swing.plaf.ComponentUI: void installUI(javax.swing.JComponent)>(r0);

        virtualinvoke $r1.<javax.swing.plaf.ComponentUI: void update(java.awt.Graphics,javax.swing.JComponent)>(r2, r0);

     label1:
        return;
    }

    private static void paintBorder(javax.swing.JComponent, org.apache.batik.svggen.SVGGraphics2D)
    {
        javax.swing.border.Border $r1;
        int $i0, $i1, $i2, $i3;
        javax.swing.AbstractButton $r7;
        javax.swing.JProgressBar $r2;
        org.apache.batik.svggen.SVGGraphics2D r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        javax.swing.JComponent r0;
        javax.swing.JMenuBar $r4;
        javax.swing.JToolBar $r5;
        javax.swing.JPopupMenu $r6;

        r0 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: org.apache.batik.svggen.SVGGraphics2D;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        if $r1 == null goto label8;

        $z0 = r0 instanceof javax.swing.AbstractButton;

        if $z0 != 0 goto label1;

        $z10 = r0 instanceof javax.swing.JPopupMenu;

        if $z10 != 0 goto label1;

        $z11 = r0 instanceof javax.swing.JToolBar;

        if $z11 != 0 goto label1;

        $z12 = r0 instanceof javax.swing.JMenuBar;

        if $z12 != 0 goto label1;

        $z13 = r0 instanceof javax.swing.JProgressBar;

        if $z13 == 0 goto label7;

     label1:
        $z14 = r0 instanceof javax.swing.AbstractButton;

        if $z14 == 0 goto label2;

        $r7 = (javax.swing.AbstractButton) r0;

        $z9 = virtualinvoke $r7.<javax.swing.AbstractButton: boolean isBorderPainted()>();

        if $z9 != 0 goto label6;

     label2:
        $z1 = r0 instanceof javax.swing.JPopupMenu;

        if $z1 == 0 goto label3;

        $r6 = (javax.swing.JPopupMenu) r0;

        $z8 = virtualinvoke $r6.<javax.swing.JPopupMenu: boolean isBorderPainted()>();

        if $z8 != 0 goto label6;

     label3:
        $z2 = r0 instanceof javax.swing.JToolBar;

        if $z2 == 0 goto label4;

        $r5 = (javax.swing.JToolBar) r0;

        $z7 = virtualinvoke $r5.<javax.swing.JToolBar: boolean isBorderPainted()>();

        if $z7 != 0 goto label6;

     label4:
        $z3 = r0 instanceof javax.swing.JMenuBar;

        if $z3 == 0 goto label5;

        $r4 = (javax.swing.JMenuBar) r0;

        $z6 = virtualinvoke $r4.<javax.swing.JMenuBar: boolean isBorderPainted()>();

        if $z6 != 0 goto label6;

     label5:
        $z4 = r0 instanceof javax.swing.JProgressBar;

        if $z4 == 0 goto label8;

        $r2 = (javax.swing.JProgressBar) r0;

        $z5 = virtualinvoke $r2.<javax.swing.JProgressBar: boolean isBorderPainted()>();

        if $z5 == 0 goto label8;

     label6:
        $i2 = virtualinvoke r0.<javax.swing.JComponent: int getWidth()>();

        $i3 = virtualinvoke r0.<javax.swing.JComponent: int getHeight()>();

        interfaceinvoke $r1.<javax.swing.border.Border: void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)>(r0, r3, 0, 0, $i2, $i3);

        goto label8;

     label7:
        $i0 = virtualinvoke r0.<javax.swing.JComponent: int getWidth()>();

        $i1 = virtualinvoke r0.<javax.swing.JComponent: int getHeight()>();

        interfaceinvoke $r1.<javax.swing.border.Border: void paintBorder(java.awt.Component,java.awt.Graphics,int,int,int,int)>(r0, r3, 0, 0, $i0, $i1);

     label8:
        return;
    }

    private static void paintChildren(javax.swing.JComponent, org.apache.batik.svggen.SVGGraphics2D)
    {
        java.awt.Color $r6;
        java.awt.Rectangle r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11;
        org.apache.batik.svggen.SVGGraphics2D r3, r5;
        boolean $z0, $z1, z2, $z3, $z4;
        javax.swing.JComponent r0, $r8, $r9;
        java.awt.Font $r7;
        java.awt.Component $r2;
        java.awt.Graphics $r4;

        r0 := @parameter0: javax.swing.JComponent;

        r3 := @parameter1: org.apache.batik.svggen.SVGGraphics2D;

        $i0 = virtualinvoke r0.<java.awt.Container: int getComponentCount()>();

        i9 = $i0 - 1;

        $r11 = new java.awt.Rectangle;

        specialinvoke $r11.<java.awt.Rectangle: void <init>()>();

        goto label6;

     label1:
        $r2 = virtualinvoke r0.<java.awt.Container: java.awt.Component getComponent(int)>(i9);

        if $r2 == null goto label5;

        $z0 = staticinvoke <javax.swing.JComponent: boolean isLightweightComponent(java.awt.Component)>($r2);

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke $r2.<java.awt.Component: boolean isVisible()>();

        if $z1 == 0 goto label5;

        z2 = $r2 instanceof javax.swing.JComponent;

        if z2 == 0 goto label2;

        r10 = $r11;

        $r9 = (javax.swing.JComponent) $r2;

        virtualinvoke $r9.<javax.swing.JComponent: java.awt.Rectangle getBounds(java.awt.Rectangle)>($r11);

        goto label3;

     label2:
        r10 = virtualinvoke $r2.<java.awt.Component: java.awt.Rectangle getBounds()>();

     label3:
        $i4 = r10.<java.awt.Rectangle: int x>;

        $i3 = r10.<java.awt.Rectangle: int y>;

        $i2 = r10.<java.awt.Rectangle: int width>;

        $i1 = r10.<java.awt.Rectangle: int height>;

        $z3 = virtualinvoke r3.<java.awt.Graphics: boolean hitClip(int,int,int,int)>($i4, $i3, $i2, $i1);

        if $z3 == 0 goto label5;

        $i8 = r10.<java.awt.Rectangle: int x>;

        $i7 = r10.<java.awt.Rectangle: int y>;

        $i6 = r10.<java.awt.Rectangle: int width>;

        $i5 = r10.<java.awt.Rectangle: int height>;

        $r4 = virtualinvoke r3.<java.awt.Graphics: java.awt.Graphics create(int,int,int,int)>($i8, $i7, $i6, $i5);

        r5 = (org.apache.batik.svggen.SVGGraphics2D) $r4;

        $r6 = virtualinvoke $r2.<java.awt.Component: java.awt.Color getForeground()>();

        virtualinvoke r5.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setColor(java.awt.Color)>($r6);

        $r7 = virtualinvoke $r2.<java.awt.Component: java.awt.Font getFont()>();

        virtualinvoke r5.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void setFont(java.awt.Font)>($r7);

        $z4 = $r2 instanceof javax.swing.JComponent;

        if $z4 == 0 goto label4;

        $r8 = (javax.swing.JComponent) $r2;

        staticinvoke <org.apache.batik.svggen.SwingSVGPrettyPrint: void print(javax.swing.JComponent,org.apache.batik.svggen.SVGGraphics2D)>($r8, r5);

        goto label5;

     label4:
        virtualinvoke $r2.<java.awt.Component: void paint(java.awt.Graphics)>(r5);

     label5:
        $i11 = (int) -1;

        i9 = i9 + $i11;

     label6:
        if i9 >= 0 goto label1;

        return;
    }
}
