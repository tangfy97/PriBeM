public final class test.translator.A4Solution extends java.lang.Object
{
    static final kodkod.ast.Relation KK_MIN;
    static final kodkod.ast.Relation KK_ZERO;
    static final kodkod.ast.Relation KK_MAX;
    static final kodkod.ast.Relation KK_NEXT;
    static final kodkod.ast.Relation KK_SEQIDX;
    static final kodkod.ast.Relation KK_STRING;
    private final test.translator.A4Options originalOptions;
    private final java.lang.String originalCommand;
    private final int bitwidth;
    private final int maxseq;
    private final int unrolls;
    private final edu.mit.csail.sdg.alloy4.ConstList kAtoms;
    private final kodkod.instance.TupleFactory factory;
    private final kodkod.instance.TupleSet sigintBounds;
    private final kodkod.instance.TupleSet seqidxBounds;
    private final kodkod.instance.TupleSet stringBounds;
    private final kodkod.engine.Solver solver;
    private boolean solved;
    private kodkod.instance.Bounds bounds;
    private java.util.ArrayList formulas;
    private edu.mit.csail.sdg.alloy4.SafeList sigs;
    private edu.mit.csail.sdg.alloy4.SafeList skolems;
    private edu.mit.csail.sdg.alloy4.SafeList atoms;
    private java.util.Map atom2name;
    private java.util.Map atom2sig;
    private kodkod.engine.Evaluator eval;
    private java.util.Iterator kEnumerator;
    private kodkod.engine.Solution currentSolution;
    private java.util.Map a2k;
    private final edu.mit.csail.sdg.alloy4.ConstMap s2k;
    private java.util.Map k2pos;
    private java.util.Map rel2type;
    private java.util.Map decl2type;
    private java.util.Map evalCache;
    private edu.mit.csail.sdg.alloy4.Pair cachedPAIR;
    private java.lang.String toStringCache;
    private test.translator.A4Solution nextCache;
    private java.util.LinkedHashSet lCore;
    private java.util.Set lCoreCache;
    private java.util.LinkedHashSet hCore;
    private edu.mit.csail.sdg.alloy4.Pair hCoreCache;
    private static int[] $SWITCH_TABLE$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op;

    static void <clinit>()
    {
        kodkod.ast.Relation $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("Int/min");

        <test.translator.A4Solution: kodkod.ast.Relation KK_MIN> = $r0;

        $r1 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("Int/zero");

        <test.translator.A4Solution: kodkod.ast.Relation KK_ZERO> = $r1;

        $r2 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("Int/max");

        <test.translator.A4Solution: kodkod.ast.Relation KK_MAX> = $r2;

        $r3 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>("Int/next");

        <test.translator.A4Solution: kodkod.ast.Relation KK_NEXT> = $r3;

        $r4 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("seq/Int");

        <test.translator.A4Solution: kodkod.ast.Relation KK_SEQIDX> = $r4;

        $r5 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("String");

        <test.translator.A4Solution: kodkod.ast.Relation KK_STRING> = $r5;

        return;
    }

    void <init>(java.lang.String, int, int, java.util.Set, java.util.Collection, edu.mit.csail.sdg.alloy4.A4Reporter, test.translator.A4Options, int) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ConstMap $r93;
        kodkod.engine.satlab.SATFactory $r111, $r114, $r119, $r122, $r155;
        edu.mit.csail.sdg.alloy4.SafeList $r166, $r167, $r171;
        java.lang.StringBuilder $r54, $r69, $r72, $r129, $r130, $r133, $r134, $r135, $r178, $r182, $r183, $r184, $r187;
        java.lang.Object[] $r51, $r66, $r87;
        java.util.LinkedHashMap $r30, $r168, $r169, $r170, $r172, $r173, $r174;
        edu.mit.csail.sdg.alloy4.ConstList $r36, $r39;
        kodkod.instance.Tuple $r56, $r74, $r89;
        java.io.IOException $r140;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r189;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig[] $r9;
        edu.mit.csail.sdg.alloy4.ErrorSyntax $r175, $r176, $r177, $r179;
        edu.mit.csail.sdg.alloy4.A4Reporter r142;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr[] $r16;
        java.util.Collection r35;
        kodkod.ast.Expression $r24, $r25, $r26, $r29;
        kodkod.ast.Relation $r23, $r27, $r28, $r60, $r62, $r64, $r77, $r80, $r86, $r96;
        test.translator.A4Options $r7, r143;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, i7, $i8, $i10, $i12, i13, $i14, $i15, i16, $i17, $i18;
        test.translator.A4Options$SatSolver $r101, $r103, $r104, $r105, $r106, $r107, $r108, $r123, $r153;
        kodkod.instance.TupleFactory $r42, $r43, $r45, $r47, $r49, $r53, $r57, $r68, $r88, $r90;
        kodkod.instance.TupleSet $r44, $r46, $r48, $r50, $r58, $r75, $r76, $r79, $r92, $r94, $r95;
        java.lang.Object $r85;
        java.util.Set r83;
        kodkod.engine.config.Options $r100, $r110, $r113, $r116, $r118, $r121, $r151, $r157, $r159, $r161, $r163;
        java.util.ArrayList $r165;
        java.lang.String r34, $r55, $r70, $r73, $r102, $r124, $r125, $r127, $r128, $r136, $r144, r145, r146, $r148, $r152;
        java.io.File $r149, $r188;
        test.translator.A4Solution r0;
        kodkod.instance.Bounds $r40, $r59, $r61, $r63, $r65, $r78, $r81, $r91, $r97, $r181;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r15;
        kodkod.ast.Expression[] $r22;
        java.lang.String[] $r154;
        java.util.HashMap $r185;
        kodkod.instance.Universe $r41, $r180;
        java.util.Iterator $r84;
        char $c9, $c11;
        kodkod.engine.Solver $r99, $r109, $r112, $r115, $r117, $r120, $r150, $r156, $r158, $r160, $r162, $r186;
        kodkod.engine.config.Options$IntEncoding $r164;

        r0 := @this: test.translator.A4Solution;

        r34 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r83 := @parameter3: java.util.Set;

        r35 := @parameter4: java.util.Collection;

        r142 := @parameter5: edu.mit.csail.sdg.alloy4.A4Reporter;

        r143 := @parameter6: test.translator.A4Options;

        i7 := @parameter7: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<test.translator.A4Solution: boolean solved> = 0;

        $r165 = new java.util.ArrayList;

        specialinvoke $r165.<java.util.ArrayList: void <init>()>();

        r0.<test.translator.A4Solution: java.util.ArrayList formulas> = $r165;

        $r166 = new edu.mit.csail.sdg.alloy4.SafeList;

        specialinvoke $r166.<edu.mit.csail.sdg.alloy4.SafeList: void <init>()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems> = $r166;

        $r167 = new edu.mit.csail.sdg.alloy4.SafeList;

        specialinvoke $r167.<edu.mit.csail.sdg.alloy4.SafeList: void <init>()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms> = $r167;

        $r168 = new java.util.LinkedHashMap;

        specialinvoke $r168.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map atom2name> = $r168;

        $r169 = new java.util.LinkedHashMap;

        specialinvoke $r169.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map atom2sig> = $r169;

        r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval> = null;

        r0.<test.translator.A4Solution: java.util.Iterator kEnumerator> = null;

        $r170 = new java.util.LinkedHashMap;

        specialinvoke $r170.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map evalCache> = $r170;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair cachedPAIR> = null;

        r0.<test.translator.A4Solution: java.lang.String toStringCache> = null;

        r0.<test.translator.A4Solution: test.translator.A4Solution nextCache> = null;

        r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore> = null;

        r0.<test.translator.A4Solution: java.util.Set lCoreCache> = null;

        r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore> = null;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair hCoreCache> = null;

        $r7 = virtualinvoke r143.<test.translator.A4Options: test.translator.A4Options dup()>();

        r0.<test.translator.A4Solution: kodkod.engine.Solution currentSolution> = null;

        $i0 = $r7.<test.translator.A4Options: int unrolls>;

        r0.<test.translator.A4Solution: int unrolls> = $i0;

        $r171 = new edu.mit.csail.sdg.alloy4.SafeList;

        $r9 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig)[5];

        $r10 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig UNIV>;

        $r9[0] = $r10;

        $r11 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SIGINT>;

        $r9[1] = $r11;

        $r12 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SEQIDX>;

        $r9[2] = $r12;

        $r13 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig STRING>;

        $r9[3] = $r13;

        $r14 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig NONE>;

        $r9[4] = $r14;

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        specialinvoke $r171.<edu.mit.csail.sdg.alloy4.SafeList: void <init>(java.util.Collection)>($r15);

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs> = $r171;

        $r16 = newarray (edu.mit.csail.sdg.alloy4compiler.ast.Expr)[5];

        $r17 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig UNIV>;

        $r16[0] = $r17;

        $r18 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SIGINT>;

        $r16[1] = $r18;

        $r19 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SEQIDX>;

        $r16[2] = $r19;

        $r20 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig STRING>;

        $r16[3] = $r20;

        $r21 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig NONE>;

        $r16[4] = $r21;

        $r22 = newarray (kodkod.ast.Expression)[5];

        $r24 = <kodkod.ast.Relation: kodkod.ast.Expression INTS>;

        $r23 = <test.translator.A4Solution: kodkod.ast.Relation KK_STRING>;

        $r25 = virtualinvoke $r24.<kodkod.ast.Expression: kodkod.ast.Expression union(kodkod.ast.Expression)>($r23);

        $r22[0] = $r25;

        $r26 = <kodkod.ast.Relation: kodkod.ast.Expression INTS>;

        $r22[1] = $r26;

        $r27 = <test.translator.A4Solution: kodkod.ast.Relation KK_SEQIDX>;

        $r22[2] = $r27;

        $r28 = <test.translator.A4Solution: kodkod.ast.Relation KK_STRING>;

        $r22[3] = $r28;

        $r29 = <kodkod.ast.Relation: kodkod.ast.Expression NONE>;

        $r22[4] = $r29;

        $r30 = staticinvoke <minalloy.Util: java.util.LinkedHashMap asMap(java.lang.Object[],java.lang.Object[])>($r16, $r22);

        r0.<test.translator.A4Solution: java.util.Map a2k> = $r30;

        $r172 = new java.util.LinkedHashMap;

        specialinvoke $r172.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map k2pos> = $r172;

        $r173 = new java.util.LinkedHashMap;

        specialinvoke $r173.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map rel2type> = $r173;

        $r174 = new java.util.LinkedHashMap;

        specialinvoke $r174.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map decl2type> = $r174;

        r0.<test.translator.A4Solution: test.translator.A4Options originalOptions> = $r7;

        if r34 != null goto label01;

        $r144 = "";

        goto label02;

     label01:
        $r144 = r34;

     label02:
        r0.<test.translator.A4Solution: java.lang.String originalCommand> = $r144;

        r0.<test.translator.A4Solution: int bitwidth> = i1;

        r0.<test.translator.A4Solution: int maxseq> = i2;

        if i1 >= 1 goto label03;

        $r175 = new edu.mit.csail.sdg.alloy4.ErrorSyntax;

        specialinvoke $r175.<edu.mit.csail.sdg.alloy4.ErrorSyntax: void <init>(java.lang.String)>("Cannot specify a bitwidth less than 1");

        throw $r175;

     label03:
        if i1 <= 30 goto label04;

        $r176 = new edu.mit.csail.sdg.alloy4.ErrorSyntax;

        specialinvoke $r176.<edu.mit.csail.sdg.alloy4.ErrorSyntax: void <init>(java.lang.String)>("Cannot specify a bitwidth greater than 30");

        throw $r176;

     label04:
        if i2 >= 0 goto label05;

        $r177 = new edu.mit.csail.sdg.alloy4.ErrorSyntax;

        specialinvoke $r177.<edu.mit.csail.sdg.alloy4.ErrorSyntax: void <init>(java.lang.String)>("The maximum sequence length cannot be negative.");

        throw $r177;

     label05:
        $i3 = virtualinvoke r0.<test.translator.A4Solution: int max()>();

        if i2 <= $i3 goto label06;

        $r179 = new edu.mit.csail.sdg.alloy4.ErrorSyntax;

        $r178 = new java.lang.StringBuilder;

        specialinvoke $r178.<java.lang.StringBuilder: void <init>(java.lang.String)>("With integer bitwidth of ");

        $r133 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", you cannot have sequence length longer than ");

        $i12 = virtualinvoke r0.<test.translator.A4Solution: int max()>();

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r136 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r179.<edu.mit.csail.sdg.alloy4.ErrorSyntax: void <init>(java.lang.String)>($r136);

        throw $r179;

     label06:
        $r36 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstList: edu.mit.csail.sdg.alloy4.ConstList make(java.lang.Iterable)>(r35);

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstList kAtoms> = $r36;

        $r181 = new kodkod.instance.Bounds;

        $r180 = new kodkod.instance.Universe;

        $r39 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstList kAtoms>;

        specialinvoke $r180.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r39);

        specialinvoke $r181.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r180);

        r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds> = $r181;

        $r40 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r41 = virtualinvoke $r40.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r42 = virtualinvoke $r41.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory> = $r42;

        $r43 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r44 = virtualinvoke $r43.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r45 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r46 = virtualinvoke $r45.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r47 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r48 = virtualinvoke $r47.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r49 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r50 = virtualinvoke $r49.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(2);

        $i4 = virtualinvoke r0.<test.translator.A4Solution: int min()>();

        $i5 = virtualinvoke r0.<test.translator.A4Solution: int max()>();

        i13 = $i4;

        goto label13;

     label07:
        $r53 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r51 = newarray (java.lang.Object)[1];

        $r182 = new java.lang.StringBuilder;

        specialinvoke $r182.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51[0] = $r55;

        $r56 = virtualinvoke $r53.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(java.lang.Object[])>($r51);

        $r57 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r58 = virtualinvoke $r57.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet range(kodkod.instance.Tuple,kodkod.instance.Tuple)>($r56, $r56);

        $r59 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        virtualinvoke $r59.<kodkod.instance.Bounds: void boundExactly(int,kodkod.instance.TupleSet)>(i13, $r58);

        virtualinvoke $r44.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>($r56);

        if i13 < 0 goto label08;

        if i13 >= i2 goto label08;

        virtualinvoke $r46.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>($r56);

     label08:
        $i14 = i13 + 1;

        if $i14 > $i5 goto label09;

        $r68 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r66 = newarray (java.lang.Object)[2];

        $r183 = new java.lang.StringBuilder;

        specialinvoke $r183.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66[0] = $r70;

        $r184 = new java.lang.StringBuilder;

        specialinvoke $r184.<java.lang.StringBuilder: void <init>()>();

        $i6 = i13 + 1;

        $r72 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66[1] = $r73;

        $r74 = virtualinvoke $r68.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(java.lang.Object[])>($r66);

        virtualinvoke $r50.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>($r74);

     label09:
        if i13 != $i4 goto label10;

        $r65 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r64 = <test.translator.A4Solution: kodkod.ast.Relation KK_MIN>;

        virtualinvoke $r65.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r64, $r58);

     label10:
        if i13 != $i5 goto label11;

        $r63 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r62 = <test.translator.A4Solution: kodkod.ast.Relation KK_MAX>;

        virtualinvoke $r63.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r62, $r58);

     label11:
        if i13 != 0 goto label12;

        $r61 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r60 = <test.translator.A4Solution: kodkod.ast.Relation KK_ZERO>;

        virtualinvoke $r61.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r60, $r58);

     label12:
        i13 = i13 + 1;

     label13:
        if i13 <= $i5 goto label07;

        $r75 = virtualinvoke $r44.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        r0.<test.translator.A4Solution: kodkod.instance.TupleSet sigintBounds> = $r75;

        $r76 = virtualinvoke $r46.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        r0.<test.translator.A4Solution: kodkod.instance.TupleSet seqidxBounds> = $r76;

        $r78 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r77 = <test.translator.A4Solution: kodkod.ast.Relation KK_NEXT>;

        virtualinvoke $r78.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r77, $r50);

        $r81 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r80 = <test.translator.A4Solution: kodkod.ast.Relation KK_SEQIDX>;

        $r79 = r0.<test.translator.A4Solution: kodkod.instance.TupleSet seqidxBounds>;

        virtualinvoke $r81.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r80, $r79);

        $r185 = new java.util.HashMap;

        specialinvoke $r185.<java.util.HashMap: void <init>()>();

        $r84 = interfaceinvoke r83.<java.util.Set: java.util.Iterator iterator()>();

        goto label15;

     label14:
        $r85 = interfaceinvoke $r84.<java.util.Iterator: java.lang.Object next()>();

        r145 = (java.lang.String) $r85;

        $r86 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("");

        $r88 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r87 = newarray (java.lang.Object)[1];

        $r87[0] = r145;

        $r89 = virtualinvoke $r88.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(java.lang.Object[])>($r87);

        interfaceinvoke $r185.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r145, $r86);

        $r91 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r90 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r92 = virtualinvoke $r90.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet range(kodkod.instance.Tuple,kodkod.instance.Tuple)>($r89, $r89);

        virtualinvoke $r91.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r86, $r92);

        virtualinvoke $r48.<kodkod.instance.TupleSet: boolean add(kodkod.instance.Tuple)>($r89);

     label15:
        $z0 = interfaceinvoke $r84.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label14;

        $r93 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r185);

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstMap s2k> = $r93;

        $r94 = virtualinvoke $r48.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        r0.<test.translator.A4Solution: kodkod.instance.TupleSet stringBounds> = $r94;

        $r97 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r96 = <test.translator.A4Solution: kodkod.ast.Relation KK_STRING>;

        $r95 = r0.<test.translator.A4Solution: kodkod.instance.TupleSet stringBounds>;

        virtualinvoke $r97.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r96, $r95);

        if i7 != 1 goto label16;

        $i15 = 0;

        goto label17;

     label16:
        $i15 = $r7.<test.translator.A4Options: int symmetry>;

     label17:
        i16 = $i15;

        $r186 = new kodkod.engine.Solver;

        specialinvoke $r186.<kodkod.engine.Solver: void <init>()>();

        r0.<test.translator.A4Solution: kodkod.engine.Solver solver> = $r186;

        $r99 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r100 = virtualinvoke $r99.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r100.<kodkod.engine.config.Options: void setFlatten(boolean)>(0);

        $r101 = $r7.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r102 = virtualinvoke $r101.<test.translator.A4Options$SatSolver: java.lang.String external()>();

        if $r102 == null goto label21;

        $r123 = $r7.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r124 = virtualinvoke $r123.<test.translator.A4Options$SatSolver: java.lang.String external()>();

        r146 = $r124;

        $r125 = $r7.<test.translator.A4Options: java.lang.String solverDirectory>;

        $i8 = virtualinvoke $r125.<java.lang.String: int length()>();

        if $i8 <= 0 goto label18;

        $c9 = <java.io.File: char separatorChar>;

        $i18 = (int) $c9;

        $i10 = virtualinvoke $r124.<java.lang.String: int indexOf(int)>($i18);

        if $i10 >= 0 goto label18;

        $r187 = new java.lang.StringBuilder;

        $r127 = $r7.<test.translator.A4Options: java.lang.String solverDirectory>;

        $r128 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r127);

        specialinvoke $r187.<java.lang.StringBuilder: void <init>(java.lang.String)>($r128);

        $c11 = <java.io.File: char separatorChar>;

        $r129 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r124);

        r146 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>();

     label18:
        $r188 = new java.io.File;

        $r148 = $r7.<test.translator.A4Options: java.lang.String tempDirectory>;

        specialinvoke $r188.<java.io.File: void <init>(java.lang.String)>($r148);

        $r149 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("tmp", ".cnf", $r188);

        virtualinvoke $r149.<java.io.File: void deleteOnExit()>();

        $r150 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r151 = virtualinvoke $r150.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r152 = virtualinvoke $r149.<java.io.File: java.lang.String getAbsolutePath()>();

        $r153 = $r7.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r154 = virtualinvoke $r153.<test.translator.A4Options$SatSolver: java.lang.String[] options()>();

        $r155 = staticinvoke <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory externalFactory(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(r146, $r152, "", $r154);

        virtualinvoke $r151.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r155);

     label19:
        goto label25;

     label20:
        $r140 := @caughtexception;

        $r189 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r189.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String,java.lang.Throwable)>("Cannot create temporary directory.", $r140);

        throw $r189;

     label21:
        $r104 = $r7.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r103 = <test.translator.A4Options$SatSolver: test.translator.A4Options$SatSolver ZChaffJNI>;

        $z1 = virtualinvoke $r104.<java.lang.Object: boolean equals(java.lang.Object)>($r103);

        if $z1 == 0 goto label22;

        $r120 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r121 = virtualinvoke $r120.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r122 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory ZChaff>;

        virtualinvoke $r121.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r122);

        goto label25;

     label22:
        $r106 = $r7.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r105 = <test.translator.A4Options$SatSolver: test.translator.A4Options$SatSolver MiniSatJNI>;

        $z2 = virtualinvoke $r106.<java.lang.Object: boolean equals(java.lang.Object)>($r105);

        if $z2 == 0 goto label23;

        $r117 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r118 = virtualinvoke $r117.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r119 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory MiniSat>;

        virtualinvoke $r118.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r119);

        goto label25;

     label23:
        $r108 = $r7.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r107 = <test.translator.A4Options$SatSolver: test.translator.A4Options$SatSolver MiniSatProverJNI>;

        $z3 = virtualinvoke $r108.<java.lang.Object: boolean equals(java.lang.Object)>($r107);

        if $z3 == 0 goto label24;

        i16 = 20;

        $r112 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r113 = virtualinvoke $r112.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r114 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory MiniSatProver>;

        virtualinvoke $r113.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r114);

        $r115 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r116 = virtualinvoke $r115.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r116.<kodkod.engine.config.Options: void setLogTranslation(int)>(2);

        goto label25;

     label24:
        $r109 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r110 = virtualinvoke $r109.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r111 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory DefaultSAT4J>;

        virtualinvoke $r110.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r111);

     label25:
        $r156 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r157 = virtualinvoke $r156.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r157.<kodkod.engine.config.Options: void setSymmetryBreaking(int)>(i16);

        $r158 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r159 = virtualinvoke $r158.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $i17 = $r7.<test.translator.A4Options: int skolemDepth>;

        virtualinvoke $r159.<kodkod.engine.config.Options: void setSkolemDepth(int)>($i17);

        $r160 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r161 = virtualinvoke $r160.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r161.<kodkod.engine.config.Options: void setBitwidth(int)>(i1);

        $r162 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r163 = virtualinvoke $r162.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r164 = <kodkod.engine.config.Options$IntEncoding: kodkod.engine.config.Options$IntEncoding TWOSCOMPLEMENT>;

        virtualinvoke $r163.<kodkod.engine.config.Options: void setIntEncoding(kodkod.engine.config.Options$IntEncoding)>($r164);

        return;

        catch java.io.IOException from label18 to label19 with label20;
    }

    private void <init>(test.translator.A4Solution) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ConstMap $r32, $r36, $r38, $r56;
        java.util.Map $r27, $r28, $r29, $r31, $r35, $r37, $r43, $r48, $r55;
        edu.mit.csail.sdg.alloy4.UniqueNameGenerator $r54;
        edu.mit.csail.sdg.alloy4.SafeList $r2, $r3, $r25, $r30, $r33, $r34;
        java.util.Set $r44;
        kodkod.engine.config.Options $r41;
        java.util.ArrayList $r1, $r24;
        java.util.LinkedHashMap $r4, $r5, $r6, $r42;
        java.lang.String $r16;
        java.util.Map$Entry r60;
        edu.mit.csail.sdg.alloy4.ConstList $r17;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr $r50;
        test.translator.A4Solution r0, r7;
        kodkod.instance.Bounds $r23;
        boolean $z0, $z1, $z2, $z3;
        kodkod.ast.Expression $r52;
        kodkod.instance.Instance $r14;
        test.translator.A4Options $r15;
        int $i0, $i1, $i2;
        kodkod.instance.TupleFactory $r18;
        kodkod.instance.TupleSet $r19, $r20, $r21;
        kodkod.engine.Evaluator $r9, $r39;
        java.util.Iterator $r8, $r10, $r26, $r45;
        kodkod.engine.Solution $r12, $r13;
        edu.mit.csail.sdg.alloy4.ErrorAPI $r57, $r58, $r59;
        kodkod.engine.Solver $r22, $r40;
        java.lang.Object $r11, $r46, $r47, $r49, $r51, $r53;

        r0 := @this: test.translator.A4Solution;

        r7 := @parameter0: test.translator.A4Solution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<test.translator.A4Solution: boolean solved> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<test.translator.A4Solution: java.util.ArrayList formulas> = $r1;

        $r2 = new edu.mit.csail.sdg.alloy4.SafeList;

        specialinvoke $r2.<edu.mit.csail.sdg.alloy4.SafeList: void <init>()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems> = $r2;

        $r3 = new edu.mit.csail.sdg.alloy4.SafeList;

        specialinvoke $r3.<edu.mit.csail.sdg.alloy4.SafeList: void <init>()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms> = $r3;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map atom2name> = $r4;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map atom2sig> = $r5;

        r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval> = null;

        r0.<test.translator.A4Solution: java.util.Iterator kEnumerator> = null;

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map evalCache> = $r6;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair cachedPAIR> = null;

        r0.<test.translator.A4Solution: java.lang.String toStringCache> = null;

        r0.<test.translator.A4Solution: test.translator.A4Solution nextCache> = null;

        r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore> = null;

        r0.<test.translator.A4Solution: java.util.Set lCoreCache> = null;

        r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore> = null;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair hCoreCache> = null;

        $z0 = r7.<test.translator.A4Solution: boolean solved>;

        if $z0 != 0 goto label1;

        $r59 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r59.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is not yet solved, so next() is not allowed.");

        throw $r59;

     label1:
        $r8 = r7.<test.translator.A4Solution: java.util.Iterator kEnumerator>;

        if $r8 != null goto label2;

        $r58 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r58.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution was not generated by an incremental SAT solver.\nSolution enumeration is currently only implemented for MiniSat and SAT4J.");

        throw $r58;

     label2:
        $r9 = r7.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r9 != null goto label3;

        $r57 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r57.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is already unsatisfiable, so you cannot call next() to get the next solution.");

        throw $r57;

     label3:
        $r10 = r7.<test.translator.A4Solution: java.util.Iterator kEnumerator>;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (kodkod.engine.Solution) $r11;

        r0.<test.translator.A4Solution: kodkod.engine.Solution currentSolution> = $r12;

        $r13 = r0.<test.translator.A4Solution: kodkod.engine.Solution currentSolution>;

        $r14 = virtualinvoke $r13.<kodkod.engine.Solution: kodkod.instance.Instance instance()>();

        $i0 = r7.<test.translator.A4Solution: int unrolls>;

        r0.<test.translator.A4Solution: int unrolls> = $i0;

        $r15 = r7.<test.translator.A4Solution: test.translator.A4Options originalOptions>;

        r0.<test.translator.A4Solution: test.translator.A4Options originalOptions> = $r15;

        $r16 = r7.<test.translator.A4Solution: java.lang.String originalCommand>;

        r0.<test.translator.A4Solution: java.lang.String originalCommand> = $r16;

        $i1 = r7.<test.translator.A4Solution: int bitwidth>;

        r0.<test.translator.A4Solution: int bitwidth> = $i1;

        $i2 = r7.<test.translator.A4Solution: int maxseq>;

        r0.<test.translator.A4Solution: int maxseq> = $i2;

        $r17 = r7.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstList kAtoms>;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstList kAtoms> = $r17;

        $r18 = r7.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory> = $r18;

        $r19 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet sigintBounds>;

        r0.<test.translator.A4Solution: kodkod.instance.TupleSet sigintBounds> = $r19;

        $r20 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet seqidxBounds>;

        r0.<test.translator.A4Solution: kodkod.instance.TupleSet seqidxBounds> = $r20;

        $r21 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet stringBounds>;

        r0.<test.translator.A4Solution: kodkod.instance.TupleSet stringBounds> = $r21;

        $r22 = r7.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        r0.<test.translator.A4Solution: kodkod.engine.Solver solver> = $r22;

        $r23 = r7.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds> = $r23;

        $r24 = r7.<test.translator.A4Solution: java.util.ArrayList formulas>;

        r0.<test.translator.A4Solution: java.util.ArrayList formulas> = $r24;

        $r25 = r7.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs> = $r25;

        $r26 = r7.<test.translator.A4Solution: java.util.Iterator kEnumerator>;

        r0.<test.translator.A4Solution: java.util.Iterator kEnumerator> = $r26;

        $r27 = r7.<test.translator.A4Solution: java.util.Map k2pos>;

        r0.<test.translator.A4Solution: java.util.Map k2pos> = $r27;

        $r28 = r7.<test.translator.A4Solution: java.util.Map rel2type>;

        r0.<test.translator.A4Solution: java.util.Map rel2type> = $r28;

        $r29 = r7.<test.translator.A4Solution: java.util.Map decl2type>;

        r0.<test.translator.A4Solution: java.util.Map decl2type> = $r29;

        if $r14 == null goto label7;

        $r39 = new kodkod.engine.Evaluator;

        $r40 = r7.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r41 = virtualinvoke $r40.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        specialinvoke $r39.<kodkod.engine.Evaluator: void <init>(kodkod.instance.Instance,kodkod.engine.config.Options)>($r14, $r41);

        r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval> = $r39;

        $r42 = new java.util.LinkedHashMap;

        specialinvoke $r42.<java.util.LinkedHashMap: void <init>()>();

        r0.<test.translator.A4Solution: java.util.Map a2k> = $r42;

        $r43 = r7.<test.translator.A4Solution: java.util.Map a2k>;

        $r44 = interfaceinvoke $r43.<java.util.Map: java.util.Set entrySet()>();

        $r45 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label4:
        $r46 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.util.Map$Entry) $r46;

        $r47 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = $r47 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig;

        if $z1 != 0 goto label5;

        $r53 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = $r53 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

        if $z2 == 0 goto label6;

     label5:
        $r48 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r49 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r50 = (edu.mit.csail.sdg.alloy4compiler.ast.Expr) $r49;

        $r51 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r52 = (kodkod.ast.Expression) $r51;

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r52);

     label6:
        $z3 = interfaceinvoke $r45.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label4;

        $r54 = new edu.mit.csail.sdg.alloy4.UniqueNameGenerator;

        specialinvoke $r54.<edu.mit.csail.sdg.alloy4.UniqueNameGenerator: void <init>()>();

        staticinvoke <test.translator.A4Solution: void rename(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig,java.util.Map,edu.mit.csail.sdg.alloy4.UniqueNameGenerator)>(r0, null, null, $r54);

        $r55 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r56 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r55);

        r0.<test.translator.A4Solution: java.util.Map a2k> = $r56;

        goto label8;

     label7:
        $r30 = r7.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems>;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems> = $r30;

        r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval> = null;

        $r31 = r7.<test.translator.A4Solution: java.util.Map a2k>;

        r0.<test.translator.A4Solution: java.util.Map a2k> = $r31;

     label8:
        $r32 = r7.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstMap s2k>;

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstMap s2k> = $r32;

        $r33 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms>;

        $r34 = virtualinvoke $r33.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms> = $r34;

        $r35 = r0.<test.translator.A4Solution: java.util.Map atom2name>;

        $r36 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r35);

        r0.<test.translator.A4Solution: java.util.Map atom2name> = $r36;

        $r37 = r0.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r38 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r37);

        r0.<test.translator.A4Solution: java.util.Map atom2sig> = $r38;

        r0.<test.translator.A4Solution: boolean solved> = 1;

        return;
    }

    private void solved()
    {
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4.ConstMap $r11, $r13, $r15, $r17, $r19, $r21;
        kodkod.instance.Bounds $r1, $r2, $r3;
        java.util.Map $r10, $r12, $r14, $r16, $r18, $r20;
        boolean $z0;
        edu.mit.csail.sdg.alloy4.SafeList $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: test.translator.A4Solution;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r2 = virtualinvoke $r1.<kodkod.instance.Bounds: kodkod.instance.Bounds clone()>();

        $r3 = virtualinvoke $r2.<kodkod.instance.Bounds: kodkod.instance.Bounds unmodifiableView()>();

        r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds> = $r3;

        $r4 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        $r5 = virtualinvoke $r4.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs> = $r5;

        $r6 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems>;

        $r7 = virtualinvoke $r6.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems> = $r7;

        $r8 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms>;

        $r9 = virtualinvoke $r8.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms> = $r9;

        $r10 = r0.<test.translator.A4Solution: java.util.Map atom2name>;

        $r11 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r10);

        r0.<test.translator.A4Solution: java.util.Map atom2name> = $r11;

        $r12 = r0.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r13 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r12);

        r0.<test.translator.A4Solution: java.util.Map atom2sig> = $r13;

        $r14 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r15 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r14);

        r0.<test.translator.A4Solution: java.util.Map a2k> = $r15;

        $r16 = r0.<test.translator.A4Solution: java.util.Map k2pos>;

        $r17 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r16);

        r0.<test.translator.A4Solution: java.util.Map k2pos> = $r17;

        $r18 = r0.<test.translator.A4Solution: java.util.Map rel2type>;

        $r19 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r18);

        r0.<test.translator.A4Solution: java.util.Map rel2type> = $r19;

        $r20 = r0.<test.translator.A4Solution: java.util.Map decl2type>;

        $r21 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r20);

        r0.<test.translator.A4Solution: java.util.Map decl2type> = $r21;

        r0.<test.translator.A4Solution: boolean solved> = 1;

        return;
    }

    public int getBitwidth()
    {
        int $i0;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $i0 = r0.<test.translator.A4Solution: int bitwidth>;

        return $i0;
    }

    public int getMaxSeq()
    {
        int $i0;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $i0 = r0.<test.translator.A4Solution: int maxseq>;

        return $i0;
    }

    public int max()
    {
        int $i0, $i1, $i2, $i3;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $i0 = r0.<test.translator.A4Solution: int bitwidth>;

        $i1 = $i0 - 1;

        $i2 = 1 << $i1;

        $i3 = $i2 - 1;

        return $i3;
    }

    public int min()
    {
        int $i0, $i1, $i2, $i3;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $i0 = r0.<test.translator.A4Solution: int bitwidth>;

        $i1 = $i0 - 1;

        $i2 = 1 << $i1;

        $i3 = 0 - $i2;

        return $i3;
    }

    public int unrolls()
    {
        int $i0;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $i0 = r0.<test.translator.A4Solution: int unrolls>;

        return $i0;
    }

    public kodkod.engine.Solution getCurrentSolution()
    {
        test.translator.A4Solution r0;
        kodkod.engine.Solution $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: kodkod.engine.Solution currentSolution>;

        return $r1;
    }

    public java.lang.String getOriginalFilename()
    {
        test.translator.A4Solution r0;
        test.translator.A4Options $r1;
        java.lang.String $r2;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: test.translator.A4Options originalOptions>;

        $r2 = $r1.<test.translator.A4Options: java.lang.String originalFilename>;

        return $r2;
    }

    public java.lang.String getOriginalCommand()
    {
        test.translator.A4Solution r0;
        java.lang.String $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: java.lang.String originalCommand>;

        return $r1;
    }

    public java.lang.String debugExtractKInput()
    {
        test.translator.A4Solution r0;
        java.util.ArrayList $r1, $r7;
        kodkod.instance.Bounds $r3, $r5, $r10;
        java.util.Map $r9;
        int $i0, $i1;
        java.lang.String $r6, $r12;
        boolean $z0;
        edu.mit.csail.sdg.alloy4.ConstList $r4, $r11;
        kodkod.ast.Formula $r2, $r8;

        r0 := @this: test.translator.A4Solution;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r7 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r8 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r7);

        $i1 = r0.<test.translator.A4Solution: int bitwidth>;

        $r11 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstList kAtoms>;

        $r10 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r9 = r0.<test.translator.A4Solution: java.util.Map atom2name>;

        $r12 = staticinvoke <test.translator.TranslateKodkodToJava: java.lang.String convert(kodkod.ast.Formula,int,java.lang.Iterable,kodkod.instance.Bounds,java.util.Map)>($r8, $i1, $r11, $r10, $r9);

        return $r12;

     label1:
        $r1 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r2 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r1);

        $i0 = r0.<test.translator.A4Solution: int bitwidth>;

        $r4 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstList kAtoms>;

        $r3 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r5 = virtualinvoke $r3.<kodkod.instance.Bounds: kodkod.instance.Bounds unmodifiableView()>();

        $r6 = staticinvoke <test.translator.TranslateKodkodToJava: java.lang.String convert(kodkod.ast.Formula,int,java.lang.Iterable,kodkod.instance.Bounds,java.util.Map)>($r2, $i0, $r4, $r5, null);

        return $r6;
    }

    kodkod.instance.TupleFactory getFactory()
    {
        test.translator.A4Solution r0;
        kodkod.instance.TupleFactory $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        return $r1;
    }

    public kodkod.instance.Bounds getBounds()
    {
        test.translator.A4Solution r0;
        kodkod.instance.Bounds $r1, $r2;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r2 = virtualinvoke $r1.<kodkod.instance.Bounds: kodkod.instance.Bounds clone()>();

        return $r2;
    }

    kodkod.ast.Relation addRel(java.lang.String, kodkod.instance.TupleSet, kodkod.instance.TupleSet) throws edu.mit.csail.sdg.alloy4.ErrorFatal
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r6, $r13;
        test.translator.A4Solution r0;
        kodkod.instance.Bounds $r5, $r11, $r12;
        int $i0, $i1, $i2;
        java.lang.String r1, $r10;
        boolean $z0;
        kodkod.instance.TupleSet r2, r4;
        java.lang.StringBuilder $r7, $r8, $r9;
        kodkod.ast.Relation $r3;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: kodkod.instance.TupleSet;

        r2 := @parameter2: kodkod.instance.TupleSet;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r13 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r13.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot add a Kodkod relation since solve() has completed.");

        throw $r13;

     label1:
        $i0 = virtualinvoke r2.<kodkod.instance.TupleSet: int arity()>();

        $r3 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation nary(java.lang.String,int)>(r1, $i0);

        if r4 != r2 goto label2;

        $r12 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        virtualinvoke $r12.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r3, r2);

        goto label5;

     label2:
        if r4 != null goto label3;

        $r11 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        virtualinvoke $r11.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r3, r2);

        goto label5;

     label3:
        $i1 = virtualinvoke r4.<kodkod.instance.TupleSet: int arity()>();

        $i2 = virtualinvoke r2.<kodkod.instance.TupleSet: int arity()>();

        if $i1 == $i2 goto label4;

        $r6 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Relation ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have same arity for lowerbound and upperbound.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r5 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        virtualinvoke $r5.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r3, r4, r2);

     label5:
        return $r3;
    }

    void addSig(edu.mit.csail.sdg.alloy4compiler.ast.Sig, kodkod.ast.Expression) throws edu.mit.csail.sdg.alloy4.ErrorFatal
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r13, $r18;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig r2;
        test.translator.A4Solution r0;
        java.util.Map $r3, $r4, $r7, $r8;
        int $i0;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig $r6, $r9;
        java.lang.String $r17;
        boolean $z0, $z1, $z2;
        edu.mit.csail.sdg.alloy4.SafeList $r5;
        kodkod.ast.Expression r1, $r11, $r12;
        java.lang.Object $r10;
        java.lang.StringBuilder $r14, $r15, $r16;

        r0 := @this: test.translator.A4Solution;

        r2 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Sig;

        r1 := @parameter1: kodkod.ast.Expression;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r18 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r18.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot add an additional sig since solve() has completed.");

        throw $r18;

     label1:
        $i0 = virtualinvoke r1.<kodkod.ast.Expression: int arity()>();

        if $i0 == 1 goto label2;

        $r13 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Sig ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be associated with a unary relational value.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r17);

        throw $r13;

     label2:
        $r3 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r4 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        $r5 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        virtualinvoke $r5.<edu.mit.csail.sdg.alloy4.SafeList: boolean add(java.lang.Object)>(r2);

        $z2 = virtualinvoke r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: boolean isTopLevel()>();

        if $z2 == 0 goto label4;

        $r8 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r9 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig UNIV>;

        $r7 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r6 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig UNIV>;

        $r10 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r11 = (kodkod.ast.Expression) $r10;

        $r12 = virtualinvoke $r11.<kodkod.ast.Expression: kodkod.ast.Expression union(kodkod.ast.Expression)>(r1);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

     label4:
        return;
    }

    void addField(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field, kodkod.ast.Expression) throws edu.mit.csail.sdg.alloy4.ErrorFatal
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r6, $r14;
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r3, $r10;
        test.translator.A4Solution r0;
        java.util.Map $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.String $r13;
        boolean $z0, $z1;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field r2;
        kodkod.ast.Expression r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12;

        r0 := @this: test.translator.A4Solution;

        r2 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

        r1 := @parameter1: kodkod.ast.Expression;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r14 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r14.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot add an additional field since solve() has completed.");

        throw $r14;

     label1:
        $i0 = virtualinvoke r1.<kodkod.ast.Expression: int arity()>();

        $r3 = virtualinvoke r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $i1 = virtualinvoke $r3.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        if $i0 == $i1 goto label2;

        $r6 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Field ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be associated with an ");

        $r10 = virtualinvoke r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $i2 = virtualinvoke $r10.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-ary relational value.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r13);

        throw $r6;

     label2:
        $r4 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r5 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    private edu.mit.csail.sdg.alloy4compiler.ast.ExprVar addSkolem(java.lang.String, edu.mit.csail.sdg.alloy4compiler.ast.Type, kodkod.ast.Expression) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r8, $r15, $r20;
        edu.mit.csail.sdg.alloy4compiler.ast.Type r1;
        test.translator.A4Solution r0;
        java.util.Map $r6;
        int $i0, $i1;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprVar $r5;
        java.lang.String r3, $r14, $r19;
        boolean $z0;
        edu.mit.csail.sdg.alloy4.SafeList $r7;
        kodkod.ast.Expression r2;
        edu.mit.csail.sdg.alloy4.Pos $r4;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r18;

        r0 := @this: test.translator.A4Solution;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Type;

        r2 := @parameter2: kodkod.ast.Expression;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r20 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r20.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot add an additional skolem since solve() has completed.");

        throw $r20;

     label1:
        $i0 = virtualinvoke r1.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        if $i0 >= 1 goto label2;

        $r15 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skolem ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be associated with a relational value.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r19);

        throw $r15;

     label2:
        $i1 = virtualinvoke r2.<kodkod.ast.Expression: int arity()>();

        if $i0 == $i1 goto label3;

        $r8 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skolem ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be associated with an ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-ary relational value.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r14);

        throw $r8;

     label3:
        $r4 = <edu.mit.csail.sdg.alloy4.Pos: edu.mit.csail.sdg.alloy4.Pos UNKNOWN>;

        $r5 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: edu.mit.csail.sdg.alloy4compiler.ast.ExprVar make(edu.mit.csail.sdg.alloy4.Pos,java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Type)>($r4, r3, r1);

        $r6 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r2);

        $r7 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems>;

        virtualinvoke $r7.<edu.mit.csail.sdg.alloy4.SafeList: boolean add(java.lang.Object)>($r5);

        return $r5;
    }

    edu.mit.csail.sdg.alloy4.ConstMap a2k()
    {
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4.ConstMap $r2;
        java.util.Map $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r2 = staticinvoke <edu.mit.csail.sdg.alloy4.ConstMap: edu.mit.csail.sdg.alloy4.ConstMap make(java.util.Map)>($r1);

        return $r2;
    }

    edu.mit.csail.sdg.alloy4.ConstMap s2k()
    {
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4.ConstMap $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstMap s2k>;

        return $r1;
    }

    kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Sig r1;
        java.util.Map $r2;
        test.translator.A4Solution r0;
        kodkod.ast.Expression $r4;
        java.lang.Object $r3;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Sig;

        $r2 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.ast.Expression) $r3;

        return $r4;
    }

    kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field r1;
        java.util.Map $r2;
        test.translator.A4Solution r0;
        kodkod.ast.Expression $r4;
        java.lang.Object $r3;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

        $r2 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.ast.Expression) $r3;

        return $r4;
    }

    kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.ExprVar)
    {
        java.util.Map $r2;
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprVar r1;
        kodkod.ast.Expression $r4;
        java.lang.Object $r3;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;

        $r2 = r0.<test.translator.A4Solution: java.util.Map a2k>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.ast.Expression) $r3;

        return $r4;
    }

    kodkod.ast.Expression a2k(java.lang.String)
    {
        test.translator.A4Solution r0;
        kodkod.ast.Expression $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        edu.mit.csail.sdg.alloy4.ConstMap $r2;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstMap s2k>;

        $r3 = virtualinvoke $r2.<edu.mit.csail.sdg.alloy4.ConstMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.ast.Expression) $r3;

        return $r4;
    }

    kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr) throws edu.mit.csail.sdg.alloy4.ErrorFatal
    {
        edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op $r1, $r2, $r4, $r5;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr r8, r10, r37;
        test.translator.A4Solution r6;
        edu.mit.csail.sdg.alloy4.ConstMap $r28;
        int[] $r11;
        java.util.Map $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary $r0, $r3, $r35, $r36;
        kodkod.ast.Expression $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r30, $r34, $r40;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary $r7, $r9, $r12;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant $r23, $r26, $r31;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op $r13;
        int $i0, $i1;
        java.lang.String $r27;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op $r24, $r25, $r32, $r33;
        java.lang.Object $r29, $r39;

        r6 := @this: test.translator.A4Solution;

        r37 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        goto label03;

     label01:
        $r0 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary) r37;

        $r2 = $r0.<edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary: edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op op>;

        $r1 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op NOOP>;

        if $r2 != $r1 goto label02;

        $r36 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary) r37;

        r37 = $r36.<edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary: edu.mit.csail.sdg.alloy4compiler.ast.Expr sub>;

        goto label03;

     label02:
        $r3 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary) r37;

        $r5 = $r3.<edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary: edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op op>;

        $r4 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary$Op EXACTLYOF>;

        if $r5 != $r4 goto label04;

        $r35 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary) r37;

        r37 = $r35.<edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary: edu.mit.csail.sdg.alloy4compiler.ast.Expr sub>;

     label03:
        $z6 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;

        if $z6 != 0 goto label01;

     label04:
        $z0 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;

        if $z0 == 0 goto label05;

        $r31 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant) r37;

        $r33 = $r31.<edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant: edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op op>;

        $r32 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op EMPTYNESS>;

        if $r33 != $r32 goto label05;

        $r34 = <kodkod.ast.Expression: kodkod.ast.Expression NONE>;

        return $r34;

     label05:
        $z1 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;

        if $z1 == 0 goto label06;

        $r23 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant) r37;

        $r25 = $r23.<edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant: edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op op>;

        $r24 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant$Op STRING>;

        if $r25 != $r24 goto label06;

        $r28 = r6.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.ConstMap s2k>;

        $r26 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant) r37;

        $r27 = $r26.<edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant: java.lang.String string>;

        $r29 = virtualinvoke $r28.<edu.mit.csail.sdg.alloy4.ConstMap: java.lang.Object get(java.lang.Object)>($r27);

        $r30 = (kodkod.ast.Expression) $r29;

        return $r30;

     label06:
        $z2 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig;

        if $z2 != 0 goto label07;

        $z3 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

        if $z3 != 0 goto label07;

        $z4 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;

        if $z4 == 0 goto label08;

     label07:
        $r38 = r6.<test.translator.A4Solution: java.util.Map a2k>;

        $r39 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>(r37);

        $r40 = (kodkod.ast.Expression) $r39;

        return $r40;

     label08:
        $z5 = r37 instanceof edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;

        if $z5 == 0 goto label12;

        $r7 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary) r37;

        r8 = $r7.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4compiler.ast.Expr left>;

        $r9 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary) r37;

        r10 = $r9.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4compiler.ast.Expr right>;

        $r11 = staticinvoke <test.translator.A4Solution: int[] $SWITCH_TABLE$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op()>();

        $r12 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary) r37;

        $r13 = $r12.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op op>;

        $i0 = virtualinvoke $r13.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        $i1 = $r11[$i0];

        lookupswitch($i1)
        {
            case 1: goto label09;
            case 23: goto label10;
            case 24: goto label11;
            default: goto label12;
        };

     label09:
        $r20 = virtualinvoke r6.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r8);

        $r21 = virtualinvoke r6.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r10);

        $r22 = virtualinvoke $r20.<kodkod.ast.Expression: kodkod.ast.Expression product(kodkod.ast.Expression)>($r21);

        return $r22;

     label10:
        $r17 = virtualinvoke r6.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r8);

        $r18 = virtualinvoke r6.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r10);

        $r19 = virtualinvoke $r17.<kodkod.ast.Expression: kodkod.ast.Expression union(kodkod.ast.Expression)>($r18);

        return $r19;

     label11:
        $r14 = virtualinvoke r6.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r8);

        $r15 = virtualinvoke r6.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r10);

        $r16 = virtualinvoke $r14.<kodkod.ast.Expression: kodkod.ast.Expression difference(kodkod.ast.Expression)>($r15);

        return $r16;

     label12:
        return null;
    }

    kodkod.instance.TupleSet approximate(kodkod.ast.Expression)
    {
        kodkod.engine.config.Options $r5;
        kodkod.util.ints.IntSet $r7;
        test.translator.A4Solution r0;
        kodkod.ast.Expression r1;
        kodkod.engine.bool.BooleanMatrix $r6;
        kodkod.instance.Bounds $r4;
        int $i0;
        kodkod.engine.Solver $r3;
        kodkod.instance.TupleFactory $r2;
        kodkod.instance.TupleSet $r8;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Expression;

        $r2 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $i0 = virtualinvoke r1.<kodkod.ast.Expression: int arity()>();

        $r4 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r3 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r5 = virtualinvoke $r3.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r6 = staticinvoke <kodkod.engine.fol2sat.Translator: kodkod.engine.bool.BooleanMatrix approximate(kodkod.ast.Expression,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r1, $r4, $r5);

        $r7 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: kodkod.util.ints.IntSet denseIndices()>();

        $r8 = virtualinvoke $r2.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(int,kodkod.util.ints.IntSet)>($i0, $r7);

        return $r8;
    }

    kodkod.instance.TupleSet query(boolean, kodkod.ast.Expression, boolean) throws edu.mit.csail.sdg.alloy4.ErrorFatal
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r27;
        test.translator.A4Solution r7;
        kodkod.instance.Bounds $r13, $r15;
        boolean $z0, $z1, z2, z3;
        kodkod.ast.Expression r0, $r1, $r2, $r8, $r10;
        kodkod.ast.operator.ExprOperator $r5, $r6;
        java.lang.StringBuilder $r28, $r29;
        kodkod.ast.Relation $r3, $r4, $r12, $r14;
        kodkod.ast.BinaryExpression r26;
        java.lang.String $r30;
        kodkod.instance.TupleFactory $r19;
        kodkod.instance.TupleSet $r9, $r11, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25;

        r7 := @this: test.translator.A4Solution;

        z2 := @parameter0: boolean;

        r0 := @parameter1: kodkod.ast.Expression;

        z3 := @parameter2: boolean;

        $r1 = <kodkod.ast.Relation: kodkod.ast.Expression NONE>;

        if r0 != $r1 goto label01;

        $r19 = r7.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r20 = virtualinvoke $r19.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        return $r20;

     label01:
        $r2 = <kodkod.ast.Relation: kodkod.ast.Expression INTS>;

        if r0 != $r2 goto label04;

        if z3 == 0 goto label02;

        $r18 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet sigintBounds>;

        $r21 = virtualinvoke $r18.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        goto label03;

     label02:
        $r21 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet sigintBounds>;

     label03:
        return $r21;

     label04:
        $r3 = <test.translator.A4Solution: kodkod.ast.Relation KK_SEQIDX>;

        if r0 != $r3 goto label07;

        if z3 == 0 goto label05;

        $r17 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet seqidxBounds>;

        $r22 = virtualinvoke $r17.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        goto label06;

     label05:
        $r22 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet seqidxBounds>;

     label06:
        return $r22;

     label07:
        $r4 = <test.translator.A4Solution: kodkod.ast.Relation KK_STRING>;

        if r0 != $r4 goto label10;

        if z3 == 0 goto label08;

        $r16 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet stringBounds>;

        $r23 = virtualinvoke $r16.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        goto label09;

     label08:
        $r23 = r7.<test.translator.A4Solution: kodkod.instance.TupleSet stringBounds>;

     label09:
        return $r23;

     label10:
        $z0 = r0 instanceof kodkod.ast.Relation;

        if $z0 == 0 goto label15;

        if z2 == 0 goto label11;

        $r15 = r7.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r14 = (kodkod.ast.Relation) r0;

        $r24 = virtualinvoke $r15.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>($r14);

        goto label12;

     label11:
        $r13 = r7.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r12 = (kodkod.ast.Relation) r0;

        $r24 = virtualinvoke $r13.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>($r12);

     label12:
        if $r24 == null goto label16;

        if z3 == 0 goto label13;

        $r25 = virtualinvoke $r24.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        goto label14;

     label13:
        $r25 = $r24;

     label14:
        return $r25;

     label15:
        $z1 = r0 instanceof kodkod.ast.BinaryExpression;

        if $z1 == 0 goto label16;

        r26 = (kodkod.ast.BinaryExpression) r0;

        $r5 = virtualinvoke r26.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r6 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        if $r5 != $r6 goto label16;

        $r8 = virtualinvoke r26.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r9 = virtualinvoke r7.<test.translator.A4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(z2, $r8, 1);

        $r10 = virtualinvoke r26.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r11 = virtualinvoke r7.<test.translator.A4Solution: kodkod.instance.TupleSet query(boolean,kodkod.ast.Expression,boolean)>(z2, $r10, 0);

        virtualinvoke $r9.<kodkod.instance.TupleSet: boolean addAll(java.util.Collection)>($r11);

        return $r9;

     label16:
        $r27 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown expression encountered during bounds computation: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>($r30);

        throw $r27;
    }

    void shrink(kodkod.ast.Relation, kodkod.instance.TupleSet, kodkod.instance.TupleSet) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r9;
        test.translator.A4Solution r0;
        kodkod.instance.Bounds $r2, $r4, $r8;
        java.lang.String $r13;
        boolean $z0, $z1, $z2, $z3;
        kodkod.instance.TupleSet $r3, $r5, r6, r7;
        edu.mit.csail.sdg.alloy4.ErrorAPI $r10;
        java.lang.StringBuilder $r11, $r12;
        kodkod.ast.Relation r1;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Relation;

        r7 := @parameter1: kodkod.instance.TupleSet;

        r6 := @parameter2: kodkod.instance.TupleSet;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r9 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r9.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot shrink a Kodkod relation since solve() has completed.");

        throw $r9;

     label1:
        $r2 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r3 = virtualinvoke $r2.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r1);

        $r4 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r5 = virtualinvoke $r4.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r1);

        $z1 = virtualinvoke $r5.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r6);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r6.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r7);

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r7.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>($r3);

        if $z3 == 0 goto label2;

        $r8 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        virtualinvoke $r8.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>(r1, r7, r6);

        goto label3;

     label2:
        $r10 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Inconsistent bounds shrinking on relation: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>($r13);

        throw $r10;

     label3:
        return;
    }

    public boolean satisfiable()
    {
        test.translator.A4Solution r0;
        kodkod.engine.Evaluator $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public edu.mit.csail.sdg.alloy4.SafeList getAllReachableSigs()
    {
        edu.mit.csail.sdg.alloy4.SafeList $r1, $r2;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        $r2 = virtualinvoke $r1.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        return $r2;
    }

    public java.lang.Iterable getAllSkolems()
    {
        edu.mit.csail.sdg.alloy4.SafeList $r1, $r2;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems>;

        $r2 = virtualinvoke $r1.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        return $r2;
    }

    public java.lang.Iterable getAllAtoms()
    {
        edu.mit.csail.sdg.alloy4.SafeList $r1, $r2;
        test.translator.A4Solution r0;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms>;

        $r2 = virtualinvoke $r1.<edu.mit.csail.sdg.alloy4.SafeList: edu.mit.csail.sdg.alloy4.SafeList dup()>();

        return $r2;
    }

    java.lang.String atom2name(java.lang.Object)
    {
        java.util.Map $r2;
        test.translator.A4Solution r0;
        java.lang.Object r1, $r3;
        java.lang.String r4, $r5;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<test.translator.A4Solution: java.util.Map atom2name>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 != null goto label1;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        goto label2;

     label1:
        $r5 = r4;

     label2:
        return $r5;
    }

    edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig atom2sig(java.lang.Object)
    {
        java.util.Map $r2;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig r4, $r5;
        test.translator.A4Solution r0;
        java.lang.Object r1, $r3;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig) $r3;

        if r4 != null goto label1;

        $r5 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig UNIV>;

        goto label2;

     label1:
        $r5 = r4;

     label2:
        return $r5;
    }

    public test.translator.A4TupleSet eval(edu.mit.csail.sdg.alloy4compiler.ast.Sig)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Sig r5;
        test.translator.A4Solution r0;
        java.util.Map $r6, $r13;
        edu.mit.csail.sdg.alloy4.Err $r14;
        kodkod.instance.TupleFactory $r2, $r16;
        boolean $z0;
        kodkod.instance.TupleSet $r3, $r11, $r17;
        kodkod.engine.Evaluator $r4, $r8;
        test.translator.A4TupleSet $r1, $r12, $r15, r18;
        kodkod.ast.Expression $r10;
        java.lang.Object $r7, $r9;

        r0 := @this: test.translator.A4Solution;

        r5 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Sig;

     label1:
        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label2;

        $r4 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r4 != null goto label4;

     label2:
        $r1 = new test.translator.A4TupleSet;

        $r2 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r3 = virtualinvoke $r2.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        specialinvoke $r1.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r3, r0);

     label3:
        return $r1;

     label4:
        $r6 = r0.<test.translator.A4Solution: java.util.Map evalCache>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r18 = (test.translator.A4TupleSet) $r7;

        if r18 == null goto label6;

     label5:
        return r18;

     label6:
        $r8 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r9 = staticinvoke <test.translator.TranslateAlloyToKodkod: java.lang.Object alloy2kodkod(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r0, r5);

        $r10 = (kodkod.ast.Expression) $r9;

        $r11 = virtualinvoke $r8.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r10);

        $r12 = new test.translator.A4TupleSet;

        specialinvoke $r12.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r11, r0);

        $r13 = r0.<test.translator.A4Solution: java.util.Map evalCache>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r12);

     label7:
        return $r12;

     label8:
        $r14 := @caughtexception;

        $r15 = new test.translator.A4TupleSet;

        $r16 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r17 = virtualinvoke $r16.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        specialinvoke $r15.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r17, r0);

        return $r15;

        catch edu.mit.csail.sdg.alloy4.Err from label1 to label3 with label8;
        catch edu.mit.csail.sdg.alloy4.Err from label4 to label5 with label8;
        catch edu.mit.csail.sdg.alloy4.Err from label6 to label7 with label8;
    }

    public test.translator.A4TupleSet eval(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r4, $r18;
        test.translator.A4Solution r0;
        java.util.Map $r7, $r14;
        edu.mit.csail.sdg.alloy4.Err $r15;
        int $i0, $i1;
        kodkod.instance.TupleFactory $r3, $r17;
        boolean $z0;
        kodkod.instance.TupleSet $r5, $r12, $r19;
        kodkod.engine.Evaluator $r6, $r9;
        test.translator.A4TupleSet $r1, $r13, $r16, r20;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field r2;
        kodkod.ast.Expression $r11;
        java.lang.Object $r8, $r10;

        r0 := @this: test.translator.A4Solution;

        r2 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

     label1:
        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label2;

        $r6 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r6 != null goto label4;

     label2:
        $r1 = new test.translator.A4TupleSet;

        $r3 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r4 = virtualinvoke r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $i0 = virtualinvoke $r4.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        $r5 = virtualinvoke $r3.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>($i0);

        specialinvoke $r1.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r5, r0);

     label3:
        return $r1;

     label4:
        $r7 = r0.<test.translator.A4Solution: java.util.Map evalCache>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r20 = (test.translator.A4TupleSet) $r8;

        if r20 == null goto label6;

     label5:
        return r20;

     label6:
        $r9 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r10 = staticinvoke <test.translator.TranslateAlloyToKodkod: java.lang.Object alloy2kodkod(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r0, r2);

        $r11 = (kodkod.ast.Expression) $r10;

        $r12 = virtualinvoke $r9.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r11);

        $r13 = new test.translator.A4TupleSet;

        specialinvoke $r13.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r12, r0);

        $r14 = r0.<test.translator.A4Solution: java.util.Map evalCache>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r13);

     label7:
        return $r13;

     label8:
        $r15 := @caughtexception;

        $r16 = new test.translator.A4TupleSet;

        $r17 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r18 = virtualinvoke r2.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $i1 = virtualinvoke $r18.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        $r19 = virtualinvoke $r17.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>($i1);

        specialinvoke $r16.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r19, r0);

        return $r16;

        catch edu.mit.csail.sdg.alloy4.Err from label1 to label3 with label8;
        catch edu.mit.csail.sdg.alloy4.Err from label4 to label5 with label8;
        catch edu.mit.csail.sdg.alloy4.Err from label6 to label7 with label8;
    }

    public java.lang.Object eval(edu.mit.csail.sdg.alloy4compiler.ast.Expr) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r3;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr r27;
        test.translator.A4Solution r0;
        java.lang.Integer $r13;
        kodkod.engine.CapacityExceededException $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field $r21;
        kodkod.ast.Expression $r5;
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r18;
        edu.mit.csail.sdg.alloy4.ErrorType $r26;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig $r23;
        edu.mit.csail.sdg.alloy4.JoinableList $r14, $r17, $r28;
        edu.mit.csail.sdg.alloy4.Err $r16;
        int $i0;
        java.lang.Boolean $r10;
        kodkod.instance.TupleSet $r7;
        kodkod.engine.Evaluator $r1, $r6, $r9, $r12;
        kodkod.ast.IntExpression $r11;
        test.translator.A4TupleSet $r4, $r22, $r24;
        kodkod.ast.Formula $r8;
        edu.mit.csail.sdg.alloy4.ErrorAPI $r19, $r20;
        java.lang.Object $r2, $r15;

        r0 := @this: test.translator.A4Solution;

        r27 := @parameter0: edu.mit.csail.sdg.alloy4compiler.ast.Expr;

     label01:
        $z0 = r27 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig;

        if $z0 == 0 goto label03;

        $r23 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) r27;

        $r24 = virtualinvoke r0.<test.translator.A4Solution: test.translator.A4TupleSet eval(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r23);

     label02:
        return $r24;

     label03:
        $z1 = r27 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field;

        if $z1 == 0 goto label05;

        $r21 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field) r27;

        $r22 = virtualinvoke r0.<test.translator.A4Solution: test.translator.A4TupleSet eval(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)>($r21);

     label04:
        return $r22;

     label05:
        $z2 = r0.<test.translator.A4Solution: boolean solved>;

        if $z2 != 0 goto label06;

        $r20 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r20.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is not yet solved, so eval() is not allowed.");

        throw $r20;

     label06:
        $r1 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r1 != null goto label07;

        $r19 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r19.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is unsatisfiable, so eval() is not allowed.");

        throw $r19;

     label07:
        $z3 = r27.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: boolean ambiguous>;

        if $z3 == 0 goto label08;

        $r17 = r27.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.JoinableList errors>;

        $z8 = virtualinvoke $r17.<edu.mit.csail.sdg.alloy4.JoinableList: boolean isEmpty()>();

        if $z8 != 0 goto label08;

        $r18 = virtualinvoke r27.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        r27 = virtualinvoke r27.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4compiler.ast.Expr resolve(edu.mit.csail.sdg.alloy4compiler.ast.Type,java.util.Collection)>($r18, null);

     label08:
        $r28 = r27.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.JoinableList errors>;

        $z9 = virtualinvoke $r28.<edu.mit.csail.sdg.alloy4.JoinableList: boolean isEmpty()>();

        if $z9 != 0 goto label09;

        $r14 = r27.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.JoinableList errors>;

        $r15 = virtualinvoke $r14.<edu.mit.csail.sdg.alloy4.JoinableList: java.lang.Object pick()>();

        $r16 = (edu.mit.csail.sdg.alloy4.Err) $r15;

        throw $r16;

     label09:
        $r2 = staticinvoke <test.translator.TranslateAlloyToKodkod: java.lang.Object alloy2kodkod(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r0, r27);

        $z4 = $r2 instanceof kodkod.ast.IntExpression;

        if $z4 == 0 goto label11;

        $r12 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r11 = (kodkod.ast.IntExpression) $r2;

        $i0 = virtualinvoke $r12.<kodkod.engine.Evaluator: int evaluate(kodkod.ast.IntExpression)>($r11);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label10:
        return $r13;

     label11:
        $z5 = $r2 instanceof kodkod.ast.Formula;

        if $z5 == 0 goto label13;

        $r9 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r8 = (kodkod.ast.Formula) $r2;

        $z7 = virtualinvoke $r9.<kodkod.engine.Evaluator: boolean evaluate(kodkod.ast.Formula)>($r8);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

     label12:
        return $r10;

     label13:
        $z6 = $r2 instanceof kodkod.ast.Expression;

        if $z6 == 0 goto label15;

        $r4 = new test.translator.A4TupleSet;

        $r6 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r5 = (kodkod.ast.Expression) $r2;

        $r7 = virtualinvoke $r6.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r5);

        specialinvoke $r4.<test.translator.A4TupleSet: void <init>(kodkod.instance.TupleSet,test.translator.A4Solution)>($r7, r0);

     label14:
        return $r4;

     label15:
        $r3 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r3.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Unknown internal error encountered in the evaluator.");

        throw $r3;

     label16:
        $r25 := @caughtexception;

        $r26 = staticinvoke <test.translator.TranslateAlloyToKodkod: edu.mit.csail.sdg.alloy4.ErrorType rethrow(kodkod.engine.CapacityExceededException)>($r25);

        throw $r26;

        catch kodkod.engine.CapacityExceededException from label01 to label02 with label16;
        catch kodkod.engine.CapacityExceededException from label03 to label04 with label16;
        catch kodkod.engine.CapacityExceededException from label05 to label10 with label16;
        catch kodkod.engine.CapacityExceededException from label11 to label12 with label16;
        catch kodkod.engine.CapacityExceededException from label13 to label14 with label16;
        catch kodkod.engine.CapacityExceededException from label15 to label16 with label16;
    }

    public kodkod.instance.Instance debugExtractKInstance() throws edu.mit.csail.sdg.alloy4.Err
    {
        kodkod.engine.Evaluator $r1, $r2;
        test.translator.A4Solution r0;
        kodkod.instance.Instance $r3, $r4;
        edu.mit.csail.sdg.alloy4.ErrorAPI $r5, $r6;
        boolean $z0;

        r0 := @this: test.translator.A4Solution;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 != 0 goto label1;

        $r6 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r6.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is not yet solved, so instance() is not allowed.");

        throw $r6;

     label1:
        $r1 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r1 != null goto label2;

        $r5 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is unsatisfiable, so instance() is not allowed.");

        throw $r5;

     label2:
        $r2 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r3 = virtualinvoke $r2.<kodkod.engine.Evaluator: kodkod.instance.Instance instance()>();

        $r4 = virtualinvoke $r3.<kodkod.instance.Instance: kodkod.instance.Instance unmodifiableView()>();

        return $r4;
    }

    java.lang.Object k2pos(kodkod.ast.Node)
    {
        java.util.Map $r2;
        test.translator.A4Solution r0;
        java.lang.Object $r3;
        kodkod.ast.Node r1;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<test.translator.A4Solution: java.util.Map k2pos>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    kodkod.ast.Formula k2pos(kodkod.ast.Formula, edu.mit.csail.sdg.alloy4compiler.ast.Expr) throws edu.mit.csail.sdg.alloy4.Err
    {
        kodkod.ast.BinaryFormula r5;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r10;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr r2;
        kodkod.ast.Formula r1, $r8, $r9;
        test.translator.A4Solution r0;
        java.util.Map $r3, $r4;
        kodkod.ast.operator.FormulaOperator $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r10 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r10.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot alter the k->pos mapping since solve() has completed.");

        throw $r10;

     label1:
        if r1 == null goto label2;

        if r2 == null goto label2;

        $r3 = r0.<test.translator.A4Solution: java.util.Map k2pos>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

     label2:
        return r1;

     label3:
        $r4 = r0.<test.translator.A4Solution: java.util.Map k2pos>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $z2 = r1 instanceof kodkod.ast.BinaryFormula;

        if $z2 == 0 goto label4;

        r5 = (kodkod.ast.BinaryFormula) r1;

        $r6 = virtualinvoke r5.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r7 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r6 != $r7 goto label4;

        $r8 = virtualinvoke r5.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke r0.<test.translator.A4Solution: kodkod.ast.Formula k2pos(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>($r8, r2);

        $r9 = virtualinvoke r5.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke r0.<test.translator.A4Solution: kodkod.ast.Formula k2pos(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>($r9, r2);

     label4:
        return r1;
    }

    kodkod.ast.Formula k2pos(kodkod.ast.Formula, edu.mit.csail.sdg.alloy4.Pos) throws edu.mit.csail.sdg.alloy4.Err
    {
        kodkod.ast.BinaryFormula r6;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r11;
        kodkod.ast.Formula r1, $r9, $r10;
        test.translator.A4Solution r0;
        java.util.Map $r4, $r5;
        kodkod.ast.operator.FormulaOperator $r7, $r8;
        edu.mit.csail.sdg.alloy4.Pos r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Formula;

        r2 := @parameter1: edu.mit.csail.sdg.alloy4.Pos;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r11 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r11.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot alter the k->pos mapping since solve() has completed.");

        throw $r11;

     label1:
        if r1 == null goto label2;

        if r2 == null goto label2;

        $r3 = <edu.mit.csail.sdg.alloy4.Pos: edu.mit.csail.sdg.alloy4.Pos UNKNOWN>;

        if r2 == $r3 goto label2;

        $r4 = r0.<test.translator.A4Solution: java.util.Map k2pos>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

     label2:
        return r1;

     label3:
        $r5 = r0.<test.translator.A4Solution: java.util.Map k2pos>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $z2 = r1 instanceof kodkod.ast.BinaryFormula;

        if $z2 == 0 goto label4;

        r6 = (kodkod.ast.BinaryFormula) r1;

        $r7 = virtualinvoke r6.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r8 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r7 != $r8 goto label4;

        $r9 = virtualinvoke r6.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke r0.<test.translator.A4Solution: kodkod.ast.Formula k2pos(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4.Pos)>($r9, r2);

        $r10 = virtualinvoke r6.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke r0.<test.translator.A4Solution: kodkod.ast.Formula k2pos(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4.Pos)>($r10, r2);

     label4:
        return r1;
    }

    void kr2type(kodkod.ast.Relation, edu.mit.csail.sdg.alloy4compiler.ast.Type) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r5;
        edu.mit.csail.sdg.alloy4compiler.ast.Type r3;
        test.translator.A4Solution r0;
        java.util.Map $r2, $r4;
        kodkod.ast.Relation r1;
        boolean $z0, $z1;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Relation;

        r3 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Type;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r5 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot alter the k->type mapping since solve() has completed.");

        throw $r5;

     label1:
        $r2 = r0.<test.translator.A4Solution: java.util.Map rel2type>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $r4 = r0.<test.translator.A4Solution: java.util.Map rel2type>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label2:
        return;
    }

    void kr2typeCLEAR() throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r2;
        java.util.Map $r1;
        test.translator.A4Solution r0;
        boolean $z0;

        r0 := @this: test.translator.A4Solution;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r2 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r2.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot clear the k->type mapping since solve() has completed.");

        throw $r2;

     label1:
        $r1 = r0.<test.translator.A4Solution: java.util.Map rel2type>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    edu.mit.csail.sdg.alloy4.Pair kv2typepos(kodkod.ast.Variable)
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r9;
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4.Pair r4, $r5, $r6, $r7;
        kodkod.ast.Variable r1;
        java.util.Map $r2;
        edu.mit.csail.sdg.alloy4.Pos $r8;
        java.lang.Object $r3;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = r0.<test.translator.A4Solution: java.util.Map decl2type>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (edu.mit.csail.sdg.alloy4.Pair) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair cachedPAIR>;

        if $r5 != null goto label2;

        $r7 = new edu.mit.csail.sdg.alloy4.Pair;

        $r9 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

        $r8 = <edu.mit.csail.sdg.alloy4.Pos: edu.mit.csail.sdg.alloy4.Pos UNKNOWN>;

        specialinvoke $r7.<edu.mit.csail.sdg.alloy4.Pair: void <init>(java.lang.Object,java.lang.Object)>($r9, $r8);

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair cachedPAIR> = $r7;

     label2:
        $r6 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair cachedPAIR>;

        return $r6;
    }

    void kv2typepos(kodkod.ast.Variable, edu.mit.csail.sdg.alloy4compiler.ast.Type, edu.mit.csail.sdg.alloy4.Pos) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r5;
        edu.mit.csail.sdg.alloy4compiler.ast.Type r6;
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4.Pair $r3;
        kodkod.ast.Variable r1;
        java.util.Map $r2, $r4;
        edu.mit.csail.sdg.alloy4.Pos r7;
        boolean $z0, $z1;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: kodkod.ast.Variable;

        r6 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Type;

        r7 := @parameter2: edu.mit.csail.sdg.alloy4.Pos;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r5 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot alter the k->type mapping since solve() has completed.");

        throw $r5;

     label1:
        if r6 != null goto label2;

        r6 = <edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type EMPTY>;

     label2:
        if r7 != null goto label3;

        r7 = <edu.mit.csail.sdg.alloy4.Pos: edu.mit.csail.sdg.alloy4.Pos UNKNOWN>;

     label3:
        $r2 = r0.<test.translator.A4Solution: java.util.Map decl2type>;

        $z1 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label4;

        $r4 = r0.<test.translator.A4Solution: java.util.Map decl2type>;

        $r3 = new edu.mit.csail.sdg.alloy4.Pair;

        specialinvoke $r3.<edu.mit.csail.sdg.alloy4.Pair: void <init>(java.lang.Object,java.lang.Object)>(r6, r7);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label4:
        return;
    }

    void addFormula(kodkod.ast.Formula, edu.mit.csail.sdg.alloy4.Pos) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r11;
        kodkod.ast.Formula r2, $r3, $r10;
        test.translator.A4Solution r0;
        java.util.ArrayList $r1, $r4, $r7, $r8;
        int $i0;
        edu.mit.csail.sdg.alloy4.Pos r5, $r6;
        java.lang.Object $r9;
        boolean $z0;

        r0 := @this: test.translator.A4Solution;

        r2 := @parameter0: kodkod.ast.Formula;

        r5 := @parameter1: edu.mit.csail.sdg.alloy4.Pos;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r11 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r11.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot add an additional formula since solve() has completed.");

        throw $r11;

     label1:
        $r1 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label2;

        $r8 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r10 = <kodkod.ast.Formula: kodkod.ast.Formula FALSE>;

        if $r9 != $r10 goto label2;

        return;

     label2:
        $r3 = <kodkod.ast.Formula: kodkod.ast.Formula FALSE>;

        if r2 != $r3 goto label3;

        $r7 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

     label3:
        $r4 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        if r5 == null goto label4;

        $r6 = <edu.mit.csail.sdg.alloy4.Pos: edu.mit.csail.sdg.alloy4.Pos UNKNOWN>;

        if r5 == $r6 goto label4;

        virtualinvoke r0.<test.translator.A4Solution: kodkod.ast.Formula k2pos(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4.Pos)>(r2, r5);

     label4:
        return;
    }

    void addFormula(kodkod.ast.Formula, edu.mit.csail.sdg.alloy4compiler.ast.Expr) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.ErrorFatal $r10;
        edu.mit.csail.sdg.alloy4compiler.ast.Expr r5;
        kodkod.ast.Formula r2, $r3, $r9;
        test.translator.A4Solution r0;
        java.util.ArrayList $r1, $r4, $r6, $r7;
        int $i0;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: test.translator.A4Solution;

        r2 := @parameter0: kodkod.ast.Formula;

        r5 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label1;

        $r10 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r10.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Cannot add an additional formula since solve() has completed.");

        throw $r10;

     label1:
        $r1 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label2;

        $r7 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r9 = <kodkod.ast.Formula: kodkod.ast.Formula FALSE>;

        if $r8 != $r9 goto label2;

        return;

     label2:
        $r3 = <kodkod.ast.Formula: kodkod.ast.Formula FALSE>;

        if r2 != $r3 goto label3;

        $r6 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        virtualinvoke $r6.<java.util.ArrayList: void clear()>();

     label3:
        $r4 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        if r5 == null goto label4;

        virtualinvoke r0.<test.translator.A4Solution: kodkod.ast.Formula k2pos(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r2, r5);

     label4:
        return;
    }

    private static java.util.List isOrder(kodkod.instance.TupleSet, kodkod.instance.TupleSet)
    {
        java.lang.Object[] $r13;
        java.util.ArrayList $r1, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        kodkod.instance.Universe $r6;
        kodkod.instance.TupleFactory $r7;
        kodkod.instance.TupleSet r0, r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        kodkod.instance.Tuple r10, r15, r16, r17;
        java.util.Iterator $r4, $r8;
        java.lang.Object $r5, $r9, $r11, $r12, $r14;

        r2 := @parameter0: kodkod.instance.TupleSet;

        r0 := @parameter1: kodkod.instance.TupleSet;

        $i0 = virtualinvoke r0.<kodkod.instance.TupleSet: int size()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = virtualinvoke r2.<kodkod.instance.TupleSet: int size()>();

        if $i1 != 0 goto label01;

        if $i0 > 1 goto label01;

        return $r1;

     label01:
        $i2 = virtualinvoke r2.<kodkod.instance.TupleSet: int size()>();

        $i3 = $i0 - 1;

        if $i2 == $i3 goto label02;

        return null;

     label02:
        r15 = null;

        $r3 = virtualinvoke r2.<kodkod.instance.TupleSet: kodkod.instance.TupleSet project(int)>(1);

        $r4 = virtualinvoke r0.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label04;

     label03:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r16 = (kodkod.instance.Tuple) $r5;

        $z1 = virtualinvoke $r3.<kodkod.instance.TupleSet: boolean contains(java.lang.Object)>(r16);

        if $z1 != 0 goto label04;

        r15 = r16;

        goto label05;

     label04:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

     label05:
        if r15 != null goto label06;

        return null;

     label06:
        $r6 = virtualinvoke r15.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r7 = virtualinvoke $r6.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r15);

     label07:
        r17 = null;

        $r8 = virtualinvoke r2.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label09;

     label08:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (kodkod.instance.Tuple) $r9;

        $r11 = virtualinvoke r10.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $r12 = virtualinvoke r15.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        if $r11 != $r12 goto label09;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = virtualinvoke r10.<kodkod.instance.Tuple: java.lang.Object atom(int)>(1);

        $r13[0] = $r14;

        r17 = virtualinvoke $r7.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(java.lang.Object[])>($r13);

        goto label10;

     label09:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label08;

     label10:
        if r17 != null goto label13;

        $i5 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i5 != $i0 goto label11;

        $r18 = $r1;

        goto label12;

     label11:
        $r18 = null;

     label12:
        return $r18;

     label13:
        $i4 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i4 == $i0 goto label14;

        $z3 = virtualinvoke r0.<kodkod.instance.TupleSet: boolean contains(java.lang.Object)>(r17);

        if $z3 != 0 goto label15;

     label14:
        return null;

     label15:
        r15 = r17;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r17);

        goto label07;
    }

    private static void rename(test.translator.A4Solution, edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig, java.util.Map, edu.mit.csail.sdg.alloy4.UniqueNameGenerator) throws edu.mit.csail.sdg.alloy4.Err
    {
        edu.mit.csail.sdg.alloy4.UniqueNameGenerator r5;
        java.util.LinkedHashMap $r222;
        kodkod.ast.Expression $r10, $r71, $r74, $r88, $r93, $r94, $r95, $r116, $r119, $r120, $r134, $r139, $r140, $r141, $r142, $r147, $r176;
        edu.mit.csail.sdg.alloy4.Pos $r81, $r127;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, i25, i26, $i27, i28, $i29, $i30;
        kodkod.instance.TupleFactory $r30;
        java.util.ArrayList $r221, $r225;
        java.lang.String $r6, $r7, $r19, $r22, $r37, $r41, $r53, $r61, $r106, $r186, $r192, $r193, r201, r213, $r215;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field r203, r206;
        java.util.List $r63, $r76, $r97, $r108, $r122, $r144, r204, r207, r216, r218;
        kodkod.engine.Evaluator $r9, $r33, $r48, $r68, $r73, $r85, $r90, $r113, $r118, $r131, $r136, $r148, $r156, $r164, $r177;
        java.util.Map $r16, $r23, $r25, $r35, $r43, $r152, $r160, $r168, $r182, $r184, r196;
        edu.mit.csail.sdg.alloy4.SafeList $r1, $r36, $r38, $r55, $r58, $r100, $r103, $r171;
        java.lang.StringBuilder $r20, $r21, $r185, $r191, $r223, $r224, $r226;
        kodkod.instance.Tuple r208, r209, r210, r212, r217, r220;
        kodkod.ast.Relation $r32, $r155, $r163, $r195, r199;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig $r70, $r78, $r87, $r92, $r99, $r115, $r124, $r133, $r138, $r146, r202, r205, r211;
        kodkod.instance.Instance $r34, $r49;
        kodkod.instance.TupleSet $r11, $r31, $r72, $r75, $r89, $r96, $r117, $r121, $r135, $r143, $r149, $r157, $r165, $r178;
        java.lang.Object $r3, $r13, $r14, $r15, $r17, $r24, $r26, $r40, $r46, $r47, $r50, $r57, $r60, $r64, $r65, $r66, $r67, $r69, $r77, $r79, $r82, $r83, $r84, $r86, $r91, $r98, $r102, $r105, $r109, $r110, $r111, $r112, $r114, $r123, $r125, $r128, $r129, $r130, $r132, $r137, $r145, $r151, $r153, $r159, $r161, $r167, $r169, $r173, $r180, $r181, $r187, $r188, $r189;
        java.util.Set $r44;
        java.util.Map$Entry r198;
        test.translator.A4Solution r4;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig r0, $r51, $r80, $r126, $r154, $r162, $r170, $r174, $r175, r214;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprVar $r28, r197;
        edu.mit.csail.sdg.alloy4compiler.ast.Type $r27, $r52, $r62, $r107, $r194, r200;
        kodkod.instance.Universe $r29;
        java.util.Iterator $r2, $r12, $r39, $r45, $r56, $r59, $r101, $r104, $r150, $r158, $r166, $r172, $r179, $r219;
        char $c7, $c22;

        r4 := @parameter0: test.translator.A4Solution;

        r0 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig;

        r196 := @parameter2: java.util.Map;

        r5 := @parameter3: edu.mit.csail.sdg.alloy4.UniqueNameGenerator;

        if r0 != null goto label40;

        $r38 = r4.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems>;

        $r39 = virtualinvoke $r38.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r197 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r40;

        $r41 = r197.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: java.lang.String label>;

        virtualinvoke r5.<edu.mit.csail.sdg.alloy4.UniqueNameGenerator: java.lang.String seen(java.lang.String)>($r41);

     label02:
        $z5 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label01;

        $r221 = new java.util.ArrayList;

        specialinvoke $r221.<java.util.ArrayList: void <init>()>();

        $r43 = r4.<test.translator.A4Solution: java.util.Map rel2type>;

        $r44 = interfaceinvoke $r43.<java.util.Map: java.util.Set entrySet()>();

        $r45 = interfaceinvoke $r44.<java.util.Set: java.util.Iterator iterator()>();

        goto label10;

     label03:
        $r46 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        r198 = (java.util.Map$Entry) $r46;

        $r47 = interfaceinvoke r198.<java.util.Map$Entry: java.lang.Object getKey()>();

        r199 = (kodkod.ast.Relation) $r47;

        $r48 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r49 = virtualinvoke $r48.<kodkod.engine.Evaluator: kodkod.instance.Instance instance()>();

        $z6 = virtualinvoke $r49.<kodkod.instance.Instance: boolean contains(kodkod.ast.Relation)>(r199);

        if $z6 != 0 goto label04;

        goto label10;

     label04:
        $r50 = interfaceinvoke r198.<java.util.Map$Entry: java.lang.Object getValue()>();

        r200 = (edu.mit.csail.sdg.alloy4compiler.ast.Type) $r50;

        $i2 = virtualinvoke r200.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        $i3 = virtualinvoke r199.<kodkod.ast.Relation: int arity()>();

        if $i2 <= $i3 goto label06;

        goto label10;

     label05:
        $r51 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig UNIV>;

        $r52 = virtualinvoke $r51.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        r200 = virtualinvoke $r52.<edu.mit.csail.sdg.alloy4compiler.ast.Type: edu.mit.csail.sdg.alloy4compiler.ast.Type product(edu.mit.csail.sdg.alloy4compiler.ast.Type)>(r200);

     label06:
        $i4 = virtualinvoke r200.<edu.mit.csail.sdg.alloy4compiler.ast.Type: int arity()>();

        $i5 = virtualinvoke r199.<kodkod.ast.Relation: int arity()>();

        if $i4 < $i5 goto label05;

        $r53 = virtualinvoke r199.<kodkod.ast.Relation: java.lang.String name()>();

        r201 = staticinvoke <minalloy.Util: java.lang.String tail(java.lang.String)>($r53);

        goto label08;

     label07:
        r201 = virtualinvoke r201.<java.lang.String: java.lang.String substring(int)>(1);

     label08:
        $i6 = virtualinvoke r201.<java.lang.String: int length()>();

        if $i6 <= 0 goto label09;

        $c7 = virtualinvoke r201.<java.lang.String: char charAt(int)>(0);

        $i29 = (int) $c7;

        if $i29 == 36 goto label07;

     label09:
        interfaceinvoke $r221.<java.util.List: boolean add(java.lang.Object)>(r201);

        interfaceinvoke $r221.<java.util.List: boolean add(java.lang.Object)>(r200);

        interfaceinvoke $r221.<java.util.List: boolean add(java.lang.Object)>(r199);

     label10:
        $z20 = interfaceinvoke $r45.<java.util.Iterator: boolean hasNext()>();

        if $z20 != 0 goto label03;

        $r222 = new java.util.LinkedHashMap;

        specialinvoke $r222.<java.util.LinkedHashMap: void <init>()>();

        $r55 = r4.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        $r56 = virtualinvoke $r55.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label17;

     label11:
        $r57 = interfaceinvoke $r56.<java.util.Iterator: java.lang.Object next()>();

        r202 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r57;

        $r58 = virtualinvoke r202.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4.SafeList getFields()>();

        $r59 = virtualinvoke $r58.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label16;

     label12:
        $r60 = interfaceinvoke $r59.<java.util.Iterator: java.lang.Object next()>();

        r203 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field) $r60;

        $r61 = r203.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: java.lang.String label>;

        $i8 = virtualinvoke $r61.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("next");

        if $i8 != 0 goto label16;

        $r62 = virtualinvoke r203.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r63 = virtualinvoke $r62.<edu.mit.csail.sdg.alloy4compiler.ast.Type: java.util.List fold()>();

        $i9 = interfaceinvoke $r63.<java.util.List: int size()>();

        if $i9 != 1 goto label16;

        $r64 = interfaceinvoke $r63.<java.util.List: java.lang.Object get(int)>(0);

        r204 = (java.util.List) $r64;

        $i10 = interfaceinvoke r204.<java.util.List: int size()>();

        if $i10 != 3 goto label14;

        $r79 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(0);

        $r80 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig) $r79;

        $r81 = $r80.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4.Pos isOne>;

        if $r81 == null goto label14;

        $r82 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(1);

        $r83 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(2);

        if $r82 != $r83 goto label14;

        $r84 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(1);

        $z9 = interfaceinvoke $r222.<java.util.Map: boolean containsKey(java.lang.Object)>($r84);

        if $z9 != 0 goto label14;

        $r85 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r86 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(1);

        $r87 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r86;

        $r88 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r87);

        $r89 = virtualinvoke $r85.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r88);

        $i12 = virtualinvoke $r89.<kodkod.instance.TupleSet: int size()>();

        if $i12 > 1 goto label13;

        goto label16;

     label13:
        $r90 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r91 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(0);

        $r92 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r91;

        $r93 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r92);

        $r94 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)>(r203);

        $r95 = virtualinvoke $r93.<kodkod.ast.Expression: kodkod.ast.Expression join(kodkod.ast.Expression)>($r94);

        $r96 = virtualinvoke $r90.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r95);

        $r97 = staticinvoke <test.translator.A4Solution: java.util.List isOrder(kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r96, $r89);

        if $r97 == null goto label16;

        $r98 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(1);

        $r99 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r98;

        interfaceinvoke $r222.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r99, $r97);

        goto label16;

     label14:
        $i23 = interfaceinvoke r204.<java.util.List: int size()>();

        if $i23 != 2 goto label16;

        $r65 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(0);

        $r66 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(1);

        if $r65 != $r66 goto label16;

        $r67 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(0);

        $z8 = interfaceinvoke $r222.<java.util.Map: boolean containsKey(java.lang.Object)>($r67);

        if $z8 != 0 goto label16;

        $r68 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r69 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(0);

        $r70 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r69;

        $r71 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r70);

        $r72 = virtualinvoke $r68.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r71);

        $i11 = virtualinvoke $r72.<kodkod.instance.TupleSet: int size()>();

        if $i11 > 1 goto label15;

        goto label16;

     label15:
        $r73 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r74 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)>(r203);

        $r75 = virtualinvoke $r73.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r74);

        $r76 = staticinvoke <test.translator.A4Solution: java.util.List isOrder(kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r75, $r72);

        if $r76 == null goto label16;

        $r77 = interfaceinvoke r204.<java.util.List: java.lang.Object get(int)>(1);

        $r78 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r77;

        interfaceinvoke $r222.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r78, $r76);

     label16:
        $z21 = interfaceinvoke $r59.<java.util.Iterator: boolean hasNext()>();

        if $z21 != 0 goto label12;

     label17:
        $z7 = interfaceinvoke $r56.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label11;

        $r100 = r4.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        $r101 = virtualinvoke $r100.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label24;

     label18:
        $r102 = interfaceinvoke $r101.<java.util.Iterator: java.lang.Object next()>();

        r205 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r102;

        $r103 = virtualinvoke r205.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4.SafeList getFields()>();

        $r104 = virtualinvoke $r103.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label23;

     label19:
        $r105 = interfaceinvoke $r104.<java.util.Iterator: java.lang.Object next()>();

        r206 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field) $r105;

        $r106 = r206.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: java.lang.String label>;

        $i13 = virtualinvoke $r106.<java.lang.String: int compareToIgnoreCase(java.lang.String)>("prev");

        if $i13 != 0 goto label23;

        $r107 = virtualinvoke r206.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r108 = virtualinvoke $r107.<edu.mit.csail.sdg.alloy4compiler.ast.Type: java.util.List fold()>();

        $i14 = interfaceinvoke $r108.<java.util.List: int size()>();

        if $i14 != 1 goto label23;

        $r109 = interfaceinvoke $r108.<java.util.List: java.lang.Object get(int)>(0);

        r207 = (java.util.List) $r109;

        $i15 = interfaceinvoke r207.<java.util.List: int size()>();

        if $i15 != 3 goto label21;

        $r125 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(0);

        $r126 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig) $r125;

        $r127 = $r126.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4.Pos isOne>;

        if $r127 == null goto label21;

        $r128 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(1);

        $r129 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(2);

        if $r128 != $r129 goto label21;

        $r130 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(1);

        $z12 = interfaceinvoke $r222.<java.util.Map: boolean containsKey(java.lang.Object)>($r130);

        if $z12 != 0 goto label21;

        $r131 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r132 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(1);

        $r133 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r132;

        $r134 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r133);

        $r135 = virtualinvoke $r131.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r134);

        $i17 = virtualinvoke $r135.<kodkod.instance.TupleSet: int size()>();

        if $i17 > 1 goto label20;

        goto label23;

     label20:
        $r136 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r137 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(0);

        $r138 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r137;

        $r139 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r138);

        $r140 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)>(r206);

        $r141 = virtualinvoke $r139.<kodkod.ast.Expression: kodkod.ast.Expression join(kodkod.ast.Expression)>($r140);

        $r142 = virtualinvoke $r141.<kodkod.ast.Expression: kodkod.ast.Expression transpose()>();

        $r143 = virtualinvoke $r136.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r142);

        $r144 = staticinvoke <test.translator.A4Solution: java.util.List isOrder(kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r143, $r135);

        if $r144 == null goto label23;

        $r145 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(1);

        $r146 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r145;

        interfaceinvoke $r222.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r146, $r144);

        goto label23;

     label21:
        $i24 = interfaceinvoke r207.<java.util.List: int size()>();

        if $i24 != 2 goto label23;

        $r110 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(0);

        $r111 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(1);

        if $r110 != $r111 goto label23;

        $r112 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(0);

        $z11 = interfaceinvoke $r222.<java.util.Map: boolean containsKey(java.lang.Object)>($r112);

        if $z11 != 0 goto label23;

        $r113 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r114 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(0);

        $r115 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r114;

        $r116 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>($r115);

        $r117 = virtualinvoke $r113.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r116);

        $i16 = virtualinvoke $r117.<kodkod.instance.TupleSet: int size()>();

        if $i16 > 1 goto label22;

        goto label23;

     label22:
        $r118 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r119 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)>(r206);

        $r120 = virtualinvoke $r119.<kodkod.ast.Expression: kodkod.ast.Expression transpose()>();

        $r121 = virtualinvoke $r118.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r120);

        $r122 = staticinvoke <test.translator.A4Solution: java.util.List isOrder(kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r121, $r117);

        if $r122 == null goto label23;

        $r123 = interfaceinvoke r207.<java.util.List: java.lang.Object get(int)>(1);

        $r124 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r123;

        interfaceinvoke $r222.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r124, $r122);

     label23:
        $z22 = interfaceinvoke $r104.<java.util.Iterator: boolean hasNext()>();

        if $z22 != 0 goto label19;

     label24:
        $z10 = interfaceinvoke $r101.<java.util.Iterator: boolean hasNext()>();

        if $z10 != 0 goto label18;

        $r148 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r147 = <kodkod.ast.Relation: kodkod.ast.Expression INTS>;

        $r149 = virtualinvoke $r148.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r147);

        $r150 = virtualinvoke $r149.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label26;

     label25:
        $r151 = interfaceinvoke $r150.<java.util.Iterator: java.lang.Object next()>();

        r208 = (kodkod.instance.Tuple) $r151;

        $r152 = r4.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r153 = virtualinvoke r208.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $r154 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SIGINT>;

        interfaceinvoke $r152.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r153, $r154);

     label26:
        $z13 = interfaceinvoke $r150.<java.util.Iterator: boolean hasNext()>();

        if $z13 != 0 goto label25;

        $r156 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r155 = <test.translator.A4Solution: kodkod.ast.Relation KK_SEQIDX>;

        $r157 = virtualinvoke $r156.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r155);

        $r158 = virtualinvoke $r157.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label28;

     label27:
        $r159 = interfaceinvoke $r158.<java.util.Iterator: java.lang.Object next()>();

        r209 = (kodkod.instance.Tuple) $r159;

        $r160 = r4.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r161 = virtualinvoke r209.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $r162 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig SEQIDX>;

        interfaceinvoke $r160.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r161, $r162);

     label28:
        $z14 = interfaceinvoke $r158.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label27;

        $r164 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r163 = <test.translator.A4Solution: kodkod.ast.Relation KK_STRING>;

        $r165 = virtualinvoke $r164.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r163);

        $r166 = virtualinvoke $r165.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label30;

     label29:
        $r167 = interfaceinvoke $r166.<java.util.Iterator: java.lang.Object next()>();

        r210 = (kodkod.instance.Tuple) $r167;

        $r168 = r4.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r169 = virtualinvoke r210.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $r170 = <edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig STRING>;

        interfaceinvoke $r168.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r169, $r170);

     label30:
        $z15 = interfaceinvoke $r166.<java.util.Iterator: boolean hasNext()>();

        if $z15 != 0 goto label29;

        $r171 = r4.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        $r172 = virtualinvoke $r171.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label32;

     label31:
        $r173 = interfaceinvoke $r172.<java.util.Iterator: java.lang.Object next()>();

        r211 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r173;

        $z16 = r211 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig;

        if $z16 == 0 goto label32;

        $z17 = r211.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: boolean builtin>;

        if $z17 != 0 goto label32;

        $r174 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig) r211;

        $z18 = virtualinvoke $r174.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: boolean isTopLevel()>();

        if $z18 == 0 goto label32;

        $r175 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig) r211;

        staticinvoke <test.translator.A4Solution: void rename(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig,java.util.Map,edu.mit.csail.sdg.alloy4.UniqueNameGenerator)>(r4, $r175, $r222, r5);

     label32:
        $z23 = interfaceinvoke $r172.<java.util.Iterator: boolean hasNext()>();

        if $z23 != 0 goto label31;

        i25 = 0;

        $r177 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r176 = <kodkod.ast.Relation: kodkod.ast.Expression UNIV>;

        $r178 = virtualinvoke $r177.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r176);

        $r179 = virtualinvoke $r178.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label34;

     label33:
        $r180 = interfaceinvoke $r179.<java.util.Iterator: java.lang.Object next()>();

        r212 = (kodkod.instance.Tuple) $r180;

        $r181 = virtualinvoke r212.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $r182 = r4.<test.translator.A4Solution: java.util.Map atom2sig>;

        $z19 = interfaceinvoke $r182.<java.util.Map: boolean containsKey(java.lang.Object)>($r181);

        if $z19 != 0 goto label34;

        $r184 = r4.<test.translator.A4Solution: java.util.Map atom2name>;

        $r223 = new java.lang.StringBuilder;

        specialinvoke $r223.<java.lang.StringBuilder: void <init>(java.lang.String)>("unused");

        $r185 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r184.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r181, $r186);

        i25 = i25 + 1;

     label34:
        $z24 = interfaceinvoke $r179.<java.util.Iterator: boolean hasNext()>();

        if $z24 != 0 goto label33;

        $i18 = interfaceinvoke $r221.<java.util.List: int size()>();

        i26 = 0;

        goto label39;

     label35:
        $r187 = interfaceinvoke $r221.<java.util.List: java.lang.Object get(int)>(i26);

        r213 = (java.lang.String) $r187;

        goto label37;

     label36:
        r213 = virtualinvoke r213.<java.lang.String: java.lang.String substring(int)>(1);

     label37:
        $i19 = virtualinvoke r213.<java.lang.String: int length()>();

        if $i19 <= 0 goto label38;

        $c22 = virtualinvoke r213.<java.lang.String: char charAt(int)>(0);

        $i30 = (int) $c22;

        if $i30 == 36 goto label36;

     label38:
        $i20 = i26 + 1;

        $r188 = interfaceinvoke $r221.<java.util.List: java.lang.Object get(int)>($i20);

        $r194 = (edu.mit.csail.sdg.alloy4compiler.ast.Type) $r188;

        $i21 = i26 + 2;

        $r189 = interfaceinvoke $r221.<java.util.List: java.lang.Object get(int)>($i21);

        $r195 = (kodkod.ast.Relation) $r189;

        $r224 = new java.lang.StringBuilder;

        specialinvoke $r224.<java.lang.StringBuilder: void <init>(java.lang.String)>("$");

        $r191 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r213);

        $r192 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.String toString()>();

        $r193 = virtualinvoke r5.<edu.mit.csail.sdg.alloy4.UniqueNameGenerator: java.lang.String make(java.lang.String)>($r192);

        specialinvoke r4.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4compiler.ast.ExprVar addSkolem(java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Type,kodkod.ast.Expression)>($r193, $r194, $r195);

        i26 = i26 + 3;

     label39:
        $i27 = $i18 - 2;

        if i26 < $i27 goto label35;

        return;

     label40:
        $r1 = virtualinvoke r0.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4.SafeList children()>();

        $r2 = virtualinvoke $r1.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label42;

     label41:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r214 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig) $r3;

        staticinvoke <test.translator.A4Solution: void rename(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig,java.util.Map,edu.mit.csail.sdg.alloy4.UniqueNameGenerator)>(r4, r214, r196, r5);

     label42:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label41;

        $r6 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: java.lang.String label>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("this/");

        if $z1 == 0 goto label43;

        $r37 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: java.lang.String label>;

        $r215 = virtualinvoke $r37.<java.lang.String: java.lang.String substring(int)>(5);

        goto label44;

     label43:
        $r215 = r0.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: java.lang.String label>;

     label44:
        $r7 = virtualinvoke r5.<edu.mit.csail.sdg.alloy4.UniqueNameGenerator: java.lang.String make(java.lang.String)>($r215);

        $r225 = new java.util.ArrayList;

        specialinvoke $r225.<java.util.ArrayList: void <init>()>();

        r216 = $r225;

        $r9 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r10 = virtualinvoke r4.<test.translator.A4Solution: kodkod.ast.Expression a2k(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>(r0);

        $r11 = virtualinvoke $r9.<kodkod.engine.Evaluator: kodkod.instance.TupleSet evaluate(kodkod.ast.Expression)>($r10);

        $r12 = virtualinvoke $r11.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label46;

     label45:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r217 = (kodkod.instance.Tuple) $r13;

        interfaceinvoke $r225.<java.util.List: boolean add(java.lang.Object)>(r217);

     label46:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label45;

        $r14 = interfaceinvoke r196.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r218 = (java.util.List) $r14;

        if r218 == null goto label47;

        $i0 = interfaceinvoke r218.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r225.<java.util.List: int size()>();

        if $i0 != $i1 goto label47;

        $z4 = interfaceinvoke r218.<java.util.List: boolean containsAll(java.util.Collection)>($r225);

        if $z4 == 0 goto label47;

        r216 = r218;

     label47:
        i28 = 0;

        $r219 = interfaceinvoke r216.<java.util.List: java.util.Iterator iterator()>();

        goto label50;

     label48:
        $r15 = interfaceinvoke $r219.<java.util.Iterator: java.lang.Object next()>();

        r220 = (kodkod.instance.Tuple) $r15;

        $r16 = r4.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r17 = virtualinvoke r220.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $z3 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>($r17);

        if $z3 == 0 goto label49;

        goto label50;

     label49:
        $r226 = new java.lang.StringBuilder;

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r226.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        i28 = i28 + 1;

        $r23 = r4.<test.translator.A4Solution: java.util.Map atom2sig>;

        $r24 = virtualinvoke r220.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r0);

        $r25 = r4.<test.translator.A4Solution: java.util.Map atom2name>;

        $r26 = virtualinvoke r220.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r22);

        $r27 = virtualinvoke r0.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig: edu.mit.csail.sdg.alloy4compiler.ast.Type type()>();

        $r28 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: edu.mit.csail.sdg.alloy4compiler.ast.ExprVar make(edu.mit.csail.sdg.alloy4.Pos,java.lang.String,edu.mit.csail.sdg.alloy4compiler.ast.Type)>(null, $r22, $r27);

        $r29 = virtualinvoke r220.<kodkod.instance.Tuple: kodkod.instance.Universe universe()>();

        $r30 = virtualinvoke $r29.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r31 = virtualinvoke $r30.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet range(kodkod.instance.Tuple,kodkod.instance.Tuple)>(r220, r220);

        $r32 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>($r22);

        $r33 = r4.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r34 = virtualinvoke $r33.<kodkod.engine.Evaluator: kodkod.instance.Instance instance()>();

        virtualinvoke $r34.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>($r32, $r31);

        $r35 = r4.<test.translator.A4Solution: java.util.Map a2k>;

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r32);

        $r36 = r4.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList atoms>;

        virtualinvoke $r36.<edu.mit.csail.sdg.alloy4.SafeList: boolean add(java.lang.Object)>($r28);

     label50:
        $z25 = interfaceinvoke $r219.<java.util.Iterator: boolean hasNext()>();

        if $z25 != 0 goto label48;

        return;
    }

    test.translator.A4Solution solve(edu.mit.csail.sdg.alloy4.A4Reporter, edu.mit.csail.sdg.alloy4compiler.ast.Command, test.translator.Simplifier, boolean) throws edu.mit.csail.sdg.alloy4.Err, java.io.IOException
    {
        test.translator.A4Solution$1 $r126;
        java.util.Map $r37, $r42, $r135;
        edu.mit.csail.sdg.alloy4.UniqueNameGenerator $r23, $r103;
        kodkod.engine.satlab.SATFactory $r15, $r16, $r26, $r27, $r51, $r64;
        kodkod.engine.ucore.RCEStrategy $r45;
        kodkod.engine.ucore.HybridStrategy $r43;
        java.lang.StringBuilder $r87, $r89;
        java.lang.Object[] $r86;
        kodkod.engine.fol2sat.TranslationLog $r44, $r46;
        long $l0, $l1, $l2;
        kodkod.engine.Proof $r29;
        kodkod.instance.Tuple $r91;
        kodkod.ast.Formula $r6, $r8, $r35, $r82, $r118;
        boolean[] $r123;
        test.translator.WriteCNF$WriteCNFCompleted $r107;
        edu.mit.csail.sdg.alloy4.A4Reporter r2, $r129;
        java.util.Collection $r41;
        kodkod.engine.config.Reporter $r122;
        edu.mit.csail.sdg.alloy4.Pos $r81;
        kodkod.ast.Relation r109, r133;
        kodkod.instance.Instance $r17, $r68, $r83;
        test.translator.A4Options r110;
        int $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13;
        test.translator.A4Options$SatSolver $r10, $r12, $r75, $r111, $r127;
        kodkod.instance.TupleFactory $r88, $r92;
        kodkod.instance.TupleSet $r93, $r99;
        test.translator.Simplifier r3;
        kodkod.engine.Solution $r67, r119;
        kodkod.ast.Node $r34;
        java.lang.Object $r4, $r32, $r57, $r97;
        edu.mit.csail.sdg.alloy4compiler.ast.Command r1;
        java.util.Set $r39, $r95, $r131;
        kodkod.engine.Solution$Outcome $r30, $r31;
        kodkod.engine.config.Options $r14, $r19, $r22, $r25, $r50, $r63, $r102, $r114, $r116, $r121, $r125;
        java.lang.Throwable $r104, $r105, $r106, $r108;
        java.util.ArrayList $r5, $r7, $r79, $r80, $r117;
        kodkod.engine.fol2sat.TranslationRecord $r33;
        java.lang.String $r59, $r61, $r70, $r72, $r73, $r76, $r77, $r90, $r112, $r134;
        java.util.LinkedHashSet $r28, $r36, $r38, $r40;
        java.io.File $r58, $r60, $r69, $r71;
        test.translator.A4Solution$Peeker $r52;
        test.translator.A4Solution r0;
        kodkod.instance.Bounds $r47, $r53, $r65, $r84, $r94, $r98, $r130;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver $r9, $r11, $r74, $r128;
        kodkod.instance.Universe $r85;
        kodkod.engine.Evaluator $r20, $r100;
        java.util.Iterator $r55, $r56, $r96, $r132, $r136;
        kodkod.engine.Solver $r13, $r18, $r21, $r24, $r48, $r49, $r54, $r62, $r66, $r78, $r101, $r113, $r115, $r120, $r124;

        r0 := @this: test.translator.A4Solution;

        r2 := @parameter0: edu.mit.csail.sdg.alloy4.A4Reporter;

        r1 := @parameter1: edu.mit.csail.sdg.alloy4compiler.ast.Command;

        r3 := @parameter2: test.translator.Simplifier;

        z7 := @parameter3: boolean;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 == 0 goto label01;

        return r0;

     label01:
        if r1 != null goto label06;

        $r83 = new kodkod.instance.Instance;

        $r84 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r85 = virtualinvoke $r84.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        specialinvoke $r83.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe)>($r85);

        $i6 = virtualinvoke r0.<test.translator.A4Solution: int max()>();

        i7 = virtualinvoke r0.<test.translator.A4Solution: int min()>();

        goto label03;

     label02:
        $r88 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r86 = newarray (java.lang.Object)[1];

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        $r86[0] = $r90;

        $r91 = virtualinvoke $r88.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(java.lang.Object[])>($r86);

        $r92 = r0.<test.translator.A4Solution: kodkod.instance.TupleFactory factory>;

        $r93 = virtualinvoke $r92.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet range(kodkod.instance.Tuple,kodkod.instance.Tuple)>($r91, $r91);

        virtualinvoke $r83.<kodkod.instance.Instance: void add(int,kodkod.instance.TupleSet)>(i7, $r93);

        i7 = i7 + 1;

     label03:
        if i7 <= $i6 goto label02;

        $r94 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r95 = virtualinvoke $r94.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r96 = interfaceinvoke $r95.<java.util.Set: java.util.Iterator iterator()>();

        goto label05;

     label04:
        $r97 = interfaceinvoke $r96.<java.util.Iterator: java.lang.Object next()>();

        r109 = (kodkod.ast.Relation) $r97;

        $r98 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r99 = virtualinvoke $r98.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r109);

        virtualinvoke $r83.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r109, $r99);

     label05:
        $z11 = interfaceinvoke $r96.<java.util.Iterator: boolean hasNext()>();

        if $z11 != 0 goto label04;

        $r100 = new kodkod.engine.Evaluator;

        $r101 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r102 = virtualinvoke $r101.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        specialinvoke $r100.<kodkod.engine.Evaluator: void <init>(kodkod.instance.Instance,kodkod.engine.config.Options)>($r83, $r102);

        r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval> = $r100;

        $r103 = new edu.mit.csail.sdg.alloy4.UniqueNameGenerator;

        specialinvoke $r103.<edu.mit.csail.sdg.alloy4.UniqueNameGenerator: void <init>()>();

        staticinvoke <test.translator.A4Solution: void rename(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig,java.util.Map,edu.mit.csail.sdg.alloy4.UniqueNameGenerator)>(r0, null, null, $r103);

        specialinvoke r0.<test.translator.A4Solution: void solved()>();

        return r0;

     label06:
        r110 = r0.<test.translator.A4Solution: test.translator.A4Options originalOptions>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>("Simplifying the bounds...\n");

        if r3 == null goto label07;

        $r79 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $i5 = virtualinvoke $r79.<java.util.ArrayList: int size()>();

        if $i5 <= 0 goto label07;

        $r80 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $z10 = virtualinvoke r3.<test.translator.Simplifier: boolean simplify(edu.mit.csail.sdg.alloy4.A4Reporter,test.translator.A4Solution,java.util.List)>(r2, r0, $r80);

        if $z10 != 0 goto label07;

        $r82 = <kodkod.ast.Formula: kodkod.ast.Formula FALSE>;

        $r81 = <edu.mit.csail.sdg.alloy4.Pos: edu.mit.csail.sdg.alloy4.Pos UNKNOWN>;

        virtualinvoke r0.<test.translator.A4Solution: void addFormula(kodkod.ast.Formula,edu.mit.csail.sdg.alloy4.Pos)>($r82, $r81);

     label07:
        $r111 = r110.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r112 = virtualinvoke $r111.<test.translator.A4Options$SatSolver: java.lang.String id()>();

        $i8 = r0.<test.translator.A4Solution: int bitwidth>;

        $i9 = r0.<test.translator.A4Solution: int maxseq>;

        $r113 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r114 = virtualinvoke $r113.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $i10 = virtualinvoke $r114.<kodkod.engine.config.Options: int skolemDepth()>();

        $r115 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r116 = virtualinvoke $r115.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $i11 = virtualinvoke $r116.<kodkod.engine.config.Options: int symmetryBreaking()>();

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void translate(java.lang.String,int,int,int,int)>($r112, $i8, $i9, $i10, $i11);

        $r117 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r118 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r117);

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>("Generating the solution...\n");

        r0.<test.translator.A4Solution: java.util.Iterator kEnumerator> = null;

        r119 = null;

        $r120 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r121 = virtualinvoke $r120.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r122 = virtualinvoke $r121.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $r123 = newarray (boolean)[1];

        $r123[0] = 1;

        $r124 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r125 = virtualinvoke $r124.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r126 = new test.translator.A4Solution$1;

        specialinvoke $r126.<test.translator.A4Solution$1: void <init>(test.translator.A4Solution,boolean[],edu.mit.csail.sdg.alloy4.A4Reporter)>(r0, $r123, r2);

        virtualinvoke $r125.<kodkod.engine.config.Options: void setReporter(kodkod.engine.config.Reporter)>($r126);

        $r127 = r110.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r128 = <edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver: edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver CNF>;

        $z12 = virtualinvoke $r127.<java.lang.Object: boolean equals(java.lang.Object)>($r128);

        if $z12 != 0 goto label12;

        $r75 = r110.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r74 = <edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver: edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver KK>;

        $z6 = virtualinvoke $r75.<java.lang.Object: boolean equals(java.lang.Object)>($r74);

        if $z6 != 0 goto label12;

        if z7 == 0 goto label12;

        $r76 = "yes";

        $r77 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("debug");

        $z8 = virtualinvoke $r76.<java.lang.String: boolean equals(java.lang.Object)>($r77);

        if $z8 == 0 goto label08;

        $r129 = r2;

        goto label09;

     label08:
        $r129 = null;

     label09:
        $r78 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $z9 = r1.<edu.mit.csail.sdg.alloy4compiler.ast.Command: boolean check>;

        r119 = staticinvoke <test.translator.BookExamples: kodkod.engine.Solution trial(edu.mit.csail.sdg.alloy4.A4Reporter,test.translator.A4Solution,kodkod.ast.Formula,kodkod.engine.Solver,boolean)>($r129, r0, $r118, $r78, $z9);

     label10:
        goto label12;

     label11:
        $r108 := @caughtexception;

        r119 = null;

     label12:
        $r123[0] = 0;

        $r130 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r131 = virtualinvoke $r130.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r132 = interfaceinvoke $r131.<java.util.Set: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r4 = interfaceinvoke $r132.<java.util.Iterator: java.lang.Object next()>();

        r133 = (kodkod.ast.Relation) $r4;

        $r5 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r6 = virtualinvoke r133.<kodkod.ast.Relation: kodkod.ast.Formula eq(kodkod.ast.Expression)>(r133);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label14:
        $z1 = interfaceinvoke $r132.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label13;

        $r7 = r0.<test.translator.A4Solution: java.util.ArrayList formulas>;

        $r8 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula and(java.util.Collection)>($r7);

        $r10 = r110.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r9 = <edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver: edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver KK>;

        $z2 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label15;

        $r69 = new java.io.File;

        $r70 = r110.<test.translator.A4Options: java.lang.String tempDirectory>;

        specialinvoke $r69.<java.io.File: void <init>(java.lang.String)>($r70);

        $r71 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("tmp", ".java", $r69);

        $r72 = virtualinvoke $r71.<java.io.File: java.lang.String getAbsolutePath()>();

        $r73 = virtualinvoke r0.<test.translator.A4Solution: java.lang.String debugExtractKInput()>();

        staticinvoke <minalloy.Util: long writeAll(java.lang.String,java.lang.String)>($r72, $r73);

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void resultCNF(java.lang.String)>($r72);

        return null;

     label15:
        $r12 = r110.<test.translator.A4Options: test.translator.A4Options$SatSolver solver>;

        $r11 = <edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver: edu.mit.csail.sdg.alloy4compiler.translator.A4Options$SatSolver CNF>;

        $z3 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label22;

        $r58 = new java.io.File;

        $r59 = r110.<test.translator.A4Options: java.lang.String tempDirectory>;

        specialinvoke $r58.<java.io.File: void <init>(java.lang.String)>($r59);

        $r60 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("tmp", ".cnf", $r58);

        $r61 = virtualinvoke $r60.<java.io.File: java.lang.String getAbsolutePath()>();

        $r62 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r63 = virtualinvoke $r62.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r64 = staticinvoke <test.translator.WriteCNF: kodkod.engine.satlab.SATFactory factory(java.lang.String)>($r61);

        virtualinvoke $r63.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r64);

     label16:
        $r66 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r65 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r67 = virtualinvoke $r66.<kodkod.engine.Solver: kodkod.engine.Solution solve(kodkod.ast.Formula,kodkod.instance.Bounds)>($r8, $r65);

     label17:
        goto label19;

     label18:
        $r107 := @caughtexception;

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void resultCNF(java.lang.String)>($r61);

        return null;

     label19:
        $r68 = virtualinvoke $r67.<kodkod.engine.Solution: kodkod.instance.Instance instance()>();

        if $r68 == null goto label20;

        $r134 = "p cnf 1 1\n1 0\n";

        goto label21;

     label20:
        $r134 = "p cnf 1 2\n1 0\n-1 0\n";

     label21:
        staticinvoke <minalloy.Util: long writeAll(java.lang.String,java.lang.String)>($r61, $r134);

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void resultCNF(java.lang.String)>($r61);

        return null;

     label22:
        $r13 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r14 = virtualinvoke $r13.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r15 = virtualinvoke $r14.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver()>();

        $r16 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory ZChaff>;

        if $r15 == $r16 goto label23;

        $r49 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r50 = virtualinvoke $r49.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r51 = virtualinvoke $r50.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver()>();

        $z5 = virtualinvoke $r51.<kodkod.engine.satlab.SATFactory: boolean incremental()>();

        if $z5 != 0 goto label25;

     label23:
        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>("Begin solve()\n");

        if r119 != null goto label24;

        $r48 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r47 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        r119 = virtualinvoke $r48.<kodkod.engine.Solver: kodkod.engine.Solution solve(kodkod.ast.Formula,kodkod.instance.Bounds)>($r8, $r47);

     label24:
        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>("End solve()\n");

        goto label27;

     label25:
        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>("Begin solveAll()\n");

        $r52 = new test.translator.A4Solution$Peeker;

        $r54 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r53 = r0.<test.translator.A4Solution: kodkod.instance.Bounds bounds>;

        $r55 = virtualinvoke $r54.<kodkod.engine.Solver: java.util.Iterator solveAll(kodkod.ast.Formula,kodkod.instance.Bounds)>($r8, $r53);

        specialinvoke $r52.<test.translator.A4Solution$Peeker: void <init>(java.util.Iterator,test.translator.A4Solution$Peeker)>($r55, null);

        r0.<test.translator.A4Solution: java.util.Iterator kEnumerator> = $r52;

        if r119 != null goto label26;

        $r56 = r0.<test.translator.A4Solution: java.util.Iterator kEnumerator>;

        $r57 = interfaceinvoke $r56.<java.util.Iterator: java.lang.Object next()>();

        r119 = (kodkod.engine.Solution) $r57;

     label26:
        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void debug(java.lang.String)>("End solveAll()\n");

     label27:
        r0.<test.translator.A4Solution: kodkod.engine.Solution currentSolution> = r119;

        $z13 = $r123[0];

        if $z13 != 0 goto label28;

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void solve(int,int,int)>(0, 0, 0);

     label28:
        $r17 = virtualinvoke r119.<kodkod.engine.Solution: kodkod.instance.Instance instance()>();

        $r18 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r19 = virtualinvoke $r18.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r19.<kodkod.engine.config.Options: void setReporter(kodkod.engine.config.Reporter)>($r122);

        if $r17 != null goto label43;

        $r24 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r25 = virtualinvoke $r24.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        $r26 = virtualinvoke $r25.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver()>();

        $r27 = <kodkod.engine.satlab.SATFactory: kodkod.engine.satlab.SATFactory MiniSatProver>;

        if $r26 != $r27 goto label43;

     label29:
        $r28 = new java.util.LinkedHashSet;

        specialinvoke $r28.<java.util.LinkedHashSet: void <init>()>();

        r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore> = $r28;

        $r29 = virtualinvoke r119.<kodkod.engine.Solution: kodkod.engine.Proof proof()>();

        $r30 = virtualinvoke r119.<kodkod.engine.Solution: kodkod.engine.Solution$Outcome outcome()>();

        $r31 = <kodkod.engine.Solution$Outcome: kodkod.engine.Solution$Outcome UNSATISFIABLE>;

        if $r30 != $r31 goto label38;

        $r42 = virtualinvoke $r29.<kodkod.engine.Proof: java.util.Map highLevelCore()>();

        $i3 = interfaceinvoke $r42.<java.util.Map: int size()>();

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void minimizing(java.lang.Object,int)>(r1, $i3);

        $i4 = r110.<test.translator.A4Options: int coreMinimization>;

        if $i4 != 0 goto label33;

     label30:
        $r45 = new kodkod.engine.ucore.RCEStrategy;

        $r46 = virtualinvoke $r29.<kodkod.engine.Proof: kodkod.engine.fol2sat.TranslationLog log()>();

        specialinvoke $r45.<kodkod.engine.ucore.RCEStrategy: void <init>(kodkod.engine.fol2sat.TranslationLog)>($r46);

        virtualinvoke $r29.<kodkod.engine.Proof: void minimize(kodkod.engine.satlab.ReductionStrategy)>($r45);

     label31:
        goto label33;

     label32:
        $r106 := @caughtexception;

     label33:
        $i12 = r110.<test.translator.A4Options: int coreMinimization>;

        if $i12 != 1 goto label37;

     label34:
        $r43 = new kodkod.engine.ucore.HybridStrategy;

        $r44 = virtualinvoke $r29.<kodkod.engine.Proof: kodkod.engine.fol2sat.TranslationLog log()>();

        specialinvoke $r43.<kodkod.engine.ucore.HybridStrategy: void <init>(kodkod.engine.fol2sat.TranslationLog)>($r44);

        virtualinvoke $r29.<kodkod.engine.Proof: void minimize(kodkod.engine.satlab.ReductionStrategy)>($r43);

     label35:
        goto label37;

     label36:
        $r105 := @caughtexception;

     label37:
        $r135 = virtualinvoke $r29.<kodkod.engine.Proof: java.util.Map highLevelCore()>();

        $i13 = interfaceinvoke $r135.<java.util.Map: int size()>();

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void minimized(java.lang.Object,int,int)>(r1, $i3, $i13);

     label38:
        $r136 = virtualinvoke $r29.<kodkod.engine.Proof: java.util.Iterator core()>();

        goto label40;

     label39:
        $r32 = interfaceinvoke $r136.<java.util.Iterator: java.lang.Object next()>();

        $r33 = (kodkod.engine.fol2sat.TranslationRecord) $r32;

        $r34 = virtualinvoke $r33.<kodkod.engine.fol2sat.TranslationRecord: kodkod.ast.Node node()>();

        $z4 = $r34 instanceof kodkod.ast.Formula;

        if $z4 == 0 goto label40;

        $r36 = r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore>;

        $r35 = (kodkod.ast.Formula) $r34;

        virtualinvoke $r36.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r35);

     label40:
        $z14 = interfaceinvoke $r136.<java.util.Iterator: boolean hasNext()>();

        if $z14 != 0 goto label39;

        $r37 = virtualinvoke $r29.<kodkod.engine.Proof: java.util.Map highLevelCore()>();

        $r38 = new java.util.LinkedHashSet;

        $r39 = interfaceinvoke $r37.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r38.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r39);

        r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore> = $r38;

        $r40 = r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore>;

        $r41 = interfaceinvoke $r37.<java.util.Map: java.util.Collection values()>();

        virtualinvoke $r40.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r41);

     label41:
        goto label43;

     label42:
        $r104 := @caughtexception;

        r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore> = null;

        r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore> = null;

     label43:
        if $r17 == null goto label44;

        $r20 = new kodkod.engine.Evaluator;

        $r21 = r0.<test.translator.A4Solution: kodkod.engine.Solver solver>;

        $r22 = virtualinvoke $r21.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        specialinvoke $r20.<kodkod.engine.Evaluator: void <init>(kodkod.instance.Instance,kodkod.engine.config.Options)>($r17, $r22);

        r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval> = $r20;

        $r23 = new edu.mit.csail.sdg.alloy4.UniqueNameGenerator;

        specialinvoke $r23.<edu.mit.csail.sdg.alloy4.UniqueNameGenerator: void <init>()>();

        staticinvoke <test.translator.A4Solution: void rename(test.translator.A4Solution,edu.mit.csail.sdg.alloy4compiler.ast.Sig$PrimSig,java.util.Map,edu.mit.csail.sdg.alloy4.UniqueNameGenerator)>(r0, null, null, $r23);

     label44:
        specialinvoke r0.<test.translator.A4Solution: void solved()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - $l0;

        if $r17 == null goto label45;

        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void resultSAT(java.lang.Object,long,java.lang.Object)>(r1, $l2, r0);

        goto label46;

     label45:
        virtualinvoke r2.<edu.mit.csail.sdg.alloy4.A4Reporter: void resultUNSAT(java.lang.Object,long,java.lang.Object)>(r1, $l2, r0);

     label46:
        return r0;

        catch java.lang.Throwable from label09 to label10 with label11;
        catch test.translator.WriteCNF$WriteCNFCompleted from label16 to label17 with label18;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label29 to label41 with label42;
    }

    public java.lang.String toString()
    {
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprVar r53;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        edu.mit.csail.sdg.alloy4.SafeList $r16, $r24, $r35;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field r52;
        java.lang.StringBuilder $r5, $r20, $r21, $r23, $r28, $r29, $r31, $r32, $r34, $r38, $r40, $r41, $r43, $r46, $r47, $r48;
        edu.mit.csail.sdg.alloy4compiler.ast.Sig r51;
        kodkod.instance.Instance $r4;
        edu.mit.csail.sdg.alloy4.Err $r45;
        kodkod.util.ints.IndexedEntry r50;
        java.lang.String r2, $r15, $r19, $r27, $r30, $r39, $r44, $r49;
        kodkod.instance.TupleSet $r10;
        kodkod.engine.Evaluator $r1, $r3;
        kodkod.instance.Tuple $r13;
        java.util.Iterator $r7, $r11, $r17, $r25, $r36;
        test.translator.A4TupleSet $r22, $r33;
        kodkod.util.ints.SparseSequence $r6;
        java.lang.Object $r8, $r9, $r12, $r14, $r18, $r26, $r37, $r42;

        r0 := @this: test.translator.A4Solution;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 != 0 goto label01;

        return "---OUTCOME---\nUnknown.\n";

     label01:
        $r1 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r1 != null goto label02;

        return "---OUTCOME---\nUnsatisfiable.\n";

     label02:
        r2 = r0.<test.translator.A4Solution: java.lang.String toStringCache>;

        if r2 == null goto label03;

        return r2;

     label03:
        $r3 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        $r4 = virtualinvoke $r3.<kodkod.engine.Evaluator: kodkod.instance.Instance instance()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---INSTANCE---\nintegers={");

        z4 = 1;

        $r6 = virtualinvoke $r4.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence intTuples()>();

        $r7 = interfaceinvoke $r6.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label07;

     label04:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r50 = (kodkod.util.ints.IndexedEntry) $r8;

        if z4 == 0 goto label05;

        z4 = 0;

        goto label06;

     label05:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label06:
        $r9 = interfaceinvoke r50.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r10 = (kodkod.instance.TupleSet) $r9;

        $r11 = virtualinvoke $r10.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (kodkod.instance.Tuple) $r12;

        $r14 = virtualinvoke $r13.<kodkod.instance.Tuple: java.lang.Object atom(int)>(0);

        $r15 = virtualinvoke r0.<test.translator.A4Solution: java.lang.String atom2name(java.lang.Object)>($r14);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label07:
        $z5 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label04;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

     label08:
        $r16 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList sigs>;

        $r17 = virtualinvoke $r16.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label12;

     label09:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r51 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig) $r18;

        $r19 = r51.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: java.lang.String label>;

        $r20 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r22 = virtualinvoke r0.<test.translator.A4Solution: test.translator.A4TupleSet eval(edu.mit.csail.sdg.alloy4compiler.ast.Sig)>(r51);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r24 = virtualinvoke r51.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: edu.mit.csail.sdg.alloy4.SafeList getFields()>();

        $r25 = virtualinvoke $r24.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label11;

     label10:
        $r26 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r52 = (edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field) $r26;

        $r27 = r51.<edu.mit.csail.sdg.alloy4compiler.ast.Sig: java.lang.String label>;

        $r28 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<:");

        $r30 = r52.<edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field: java.lang.String label>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r33 = virtualinvoke r0.<test.translator.A4Solution: test.translator.A4TupleSet eval(edu.mit.csail.sdg.alloy4compiler.ast.Sig$Field)>(r52);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label11:
        $z2 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label10;

     label12:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label09;

        $r35 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.SafeList skolems>;

        $r36 = virtualinvoke $r35.<edu.mit.csail.sdg.alloy4.SafeList: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r37 = interfaceinvoke $r36.<java.util.Iterator: java.lang.Object next()>();

        r53 = (edu.mit.csail.sdg.alloy4compiler.ast.ExprVar) $r37;

        $r38 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skolem ");

        $r39 = r53.<edu.mit.csail.sdg.alloy4compiler.ast.ExprVar: java.lang.String label>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r42 = virtualinvoke r0.<test.translator.A4Solution: java.lang.Object eval(edu.mit.csail.sdg.alloy4compiler.ast.Expr)>(r53);

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label14:
        $z3 = interfaceinvoke $r36.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label13;

        $r44 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<test.translator.A4Solution: java.lang.String toStringCache> = $r44;

     label15:
        return $r44;

     label16:
        $r45 := @caughtexception;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("<Evaluator error occurred: ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<test.translator.A4Solution: java.lang.String toStringCache> = $r49;

        return $r49;

        catch edu.mit.csail.sdg.alloy4.Err from label08 to label15 with label16;
    }

    public test.translator.A4Solution next() throws edu.mit.csail.sdg.alloy4.Err
    {
        kodkod.engine.Evaluator $r1;
        edu.mit.csail.sdg.alloy4.ErrorAPI $r5;
        test.translator.A4Solution r0, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: test.translator.A4Solution;

        $z0 = r0.<test.translator.A4Solution: boolean solved>;

        if $z0 != 0 goto label1;

        $r5 = new edu.mit.csail.sdg.alloy4.ErrorAPI;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorAPI: void <init>(java.lang.String)>("This solution is not yet solved, so next() is not allowed.");

        throw $r5;

     label1:
        $r1 = r0.<test.translator.A4Solution: kodkod.engine.Evaluator eval>;

        if $r1 != null goto label2;

        return r0;

     label2:
        $r2 = r0.<test.translator.A4Solution: test.translator.A4Solution nextCache>;

        if $r2 != null goto label3;

        $r4 = new test.translator.A4Solution;

        specialinvoke $r4.<test.translator.A4Solution: void <init>(test.translator.A4Solution)>(r0);

        r0.<test.translator.A4Solution: test.translator.A4Solution nextCache> = $r4;

     label3:
        $r3 = r0.<test.translator.A4Solution: test.translator.A4Solution nextCache>;

        return $r3;
    }

    public boolean isIncremental()
    {
        test.translator.A4Solution r0;
        java.util.Iterator $r1;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: java.util.Iterator kEnumerator>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set lowLevelCore()
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Expr $r10;
        test.translator.A4Solution r0;
        java.util.LinkedHashSet $r2, $r3, $r5;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r6;
        java.util.Set $r1, $r4, $r13;
        kodkod.ast.Node r8;
        edu.mit.csail.sdg.alloy4.Pos $r11, $r12;
        java.lang.Object $r7, $r9;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: java.util.Set lCoreCache>;

        if $r1 == null goto label1;

        $r13 = r0.<test.translator.A4Solution: java.util.Set lCoreCache>;

        return $r13;

     label1:
        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore>;

        if $r3 == null goto label5;

        $r5 = r0.<test.translator.A4Solution: java.util.LinkedHashSet lCore>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (kodkod.ast.Node) $r7;

        $r9 = virtualinvoke r0.<test.translator.A4Solution: java.lang.Object k2pos(kodkod.ast.Node)>(r8);

        $z0 = $r9 instanceof edu.mit.csail.sdg.alloy4.Pos;

        if $z0 == 0 goto label3;

        $r12 = (edu.mit.csail.sdg.alloy4.Pos) $r9;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r12);

        goto label4;

     label3:
        $z1 = $r9 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        if $z1 == 0 goto label4;

        $r10 = (edu.mit.csail.sdg.alloy4compiler.ast.Expr) $r9;

        $r11 = virtualinvoke $r10.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label4:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

     label5:
        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        r0.<test.translator.A4Solution: java.util.Set lCoreCache> = $r4;

        return $r4;
    }

    public edu.mit.csail.sdg.alloy4.Pair highLevelCore()
    {
        edu.mit.csail.sdg.alloy4compiler.ast.Expr r13, $r14, $r20;
        test.translator.A4Solution r0;
        edu.mit.csail.sdg.alloy4.Pair $r1, $r5, $r23;
        java.lang.Iterable $r16;
        edu.mit.csail.sdg.alloy4compiler.ast.Func r19;
        java.util.LinkedHashSet $r2, $r3, $r4, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r9, $r17;
        java.util.Set $r6, $r7;
        kodkod.ast.Node r11;
        edu.mit.csail.sdg.alloy4.Pos $r15, $r21, $r22;
        java.lang.Object $r10, $r12, $r18;

        r0 := @this: test.translator.A4Solution;

        $r1 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair hCoreCache>;

        if $r1 == null goto label1;

        $r23 = r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair hCoreCache>;

        return $r23;

     label1:
        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        $r3 = new java.util.LinkedHashSet;

        specialinvoke $r3.<java.util.LinkedHashSet: void <init>()>();

        $r4 = r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore>;

        if $r4 == null goto label7;

        $r8 = r0.<test.translator.A4Solution: java.util.LinkedHashSet hCore>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

        goto label6;

     label2:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kodkod.ast.Node) $r10;

        $r12 = virtualinvoke r0.<test.translator.A4Solution: java.lang.Object k2pos(kodkod.ast.Node)>(r11);

        $z0 = $r12 instanceof edu.mit.csail.sdg.alloy4.Pos;

        if $z0 == 0 goto label3;

        $r22 = (edu.mit.csail.sdg.alloy4.Pos) $r12;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r22);

        goto label6;

     label3:
        $z1 = $r12 instanceof edu.mit.csail.sdg.alloy4compiler.ast.Expr;

        if $z1 == 0 goto label6;

        r13 = (edu.mit.csail.sdg.alloy4compiler.ast.Expr) $r12;

        $r14 = (edu.mit.csail.sdg.alloy4compiler.ast.Expr) $r12;

        $r15 = virtualinvoke $r14.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r15);

        $r16 = virtualinvoke r13.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: java.lang.Iterable findAllFunctions()>();

        $r17 = interfaceinvoke $r16.<java.lang.Iterable: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r19 = (edu.mit.csail.sdg.alloy4compiler.ast.Func) $r18;

        $r20 = virtualinvoke r19.<edu.mit.csail.sdg.alloy4compiler.ast.Func: edu.mit.csail.sdg.alloy4compiler.ast.Expr getBody()>();

        $r21 = virtualinvoke $r20.<edu.mit.csail.sdg.alloy4compiler.ast.Expr: edu.mit.csail.sdg.alloy4.Pos span()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r21);

     label5:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label4;

     label6:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label2;

     label7:
        $r5 = new edu.mit.csail.sdg.alloy4.Pair;

        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.Pair: void <init>(java.lang.Object,java.lang.Object)>($r6, $r7);

        r0.<test.translator.A4Solution: edu.mit.csail.sdg.alloy4.Pair hCoreCache> = $r5;

        return $r5;
    }

    public void writeXML(java.lang.String) throws edu.mit.csail.sdg.alloy4.Err
    {
        test.translator.A4Solution r0;
        java.lang.String r1;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<test.translator.A4Solution: void writeXML(java.lang.String,java.lang.Iterable,java.util.Map)>(r1, null, null);

        return;
    }

    public void writeXML(java.lang.String, java.lang.Iterable) throws edu.mit.csail.sdg.alloy4.Err
    {
        test.translator.A4Solution r0;
        java.lang.String r1;
        java.lang.Iterable r2;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Iterable;

        virtualinvoke r0.<test.translator.A4Solution: void writeXML(java.lang.String,java.lang.Iterable,java.util.Map)>(r1, r2, null);

        return;
    }

    public void writeXML(java.lang.String, java.lang.Iterable, java.util.Map) throws edu.mit.csail.sdg.alloy4.Err
    {
        java.io.PrintWriter $r0, r8;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r5, $r7;
        test.translator.A4Solution r2;
        java.io.IOException $r6;
        java.lang.Iterable r3;
        java.util.Map r4;
        java.lang.String r1;
        boolean $z0;

        r2 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Iterable;

        r4 := @parameter2: java.util.Map;

        r8 = null;

     label1:
        $r0 = new java.io.PrintWriter;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>(r1, "UTF-8");

        r8 = $r0;

        virtualinvoke r2.<test.translator.A4Solution: void writeXML(java.io.PrintWriter,java.lang.Iterable,java.util.Map)>($r0, r3, r4);

        $z0 = staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>($r0);

        if $z0 != 0 goto label3;

        $r5 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Error writing the solution XML file.");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>(r8);

        $r7 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r7.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String,java.lang.Throwable)>("Error writing the solution XML file.", $r6);

        throw $r7;

     label3:
        return;

        catch java.io.IOException from label1 to label2 with label2;
    }

    public void writeXML(edu.mit.csail.sdg.alloy4.A4Reporter, java.lang.String, java.lang.Iterable, java.util.Map) throws edu.mit.csail.sdg.alloy4.Err
    {
        java.io.PrintWriter $r0, r9;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r6, $r8;
        test.translator.A4Solution r2;
        java.io.IOException $r7;
        java.lang.Iterable r4;
        java.util.Map r5;
        java.lang.String r1;
        edu.mit.csail.sdg.alloy4.A4Reporter r3;
        boolean $z0;

        r2 := @this: test.translator.A4Solution;

        r3 := @parameter0: edu.mit.csail.sdg.alloy4.A4Reporter;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Iterable;

        r5 := @parameter3: java.util.Map;

        r9 = null;

     label1:
        $r0 = new java.io.PrintWriter;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>(r1, "UTF-8");

        r9 = $r0;

        virtualinvoke r2.<test.translator.A4Solution: void writeXML(edu.mit.csail.sdg.alloy4.A4Reporter,java.io.PrintWriter,java.lang.Iterable,java.util.Map)>(r3, $r0, r4, r5);

        $z0 = staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>($r0);

        if $z0 != 0 goto label3;

        $r6 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r6.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Error writing the solution XML file.");

        throw $r6;

     label2:
        $r7 := @caughtexception;

        staticinvoke <minalloy.Util: boolean close(java.io.Closeable)>(r9);

        $r8 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r8.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String,java.lang.Throwable)>("Error writing the solution XML file.", $r7);

        throw $r8;

     label3:
        return;

        catch java.io.IOException from label1 to label2 with label2;
    }

    public void writeXML(java.io.PrintWriter, java.lang.Iterable, java.util.Map) throws edu.mit.csail.sdg.alloy4.Err
    {
        java.io.PrintWriter r1;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r4;
        java.util.Map r3;
        test.translator.A4Solution r0;
        java.lang.Iterable r2;
        boolean $z0;

        r0 := @this: test.translator.A4Solution;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.Iterable;

        r3 := @parameter2: java.util.Map;

        staticinvoke <test.translator.A4SolutionWriter: void writeInstance(edu.mit.csail.sdg.alloy4.A4Reporter,test.translator.A4Solution,java.io.PrintWriter,java.lang.Iterable,java.util.Map)>(null, r0, r1, r2, r3);

        $z0 = virtualinvoke r1.<java.io.PrintWriter: boolean checkError()>();

        if $z0 == 0 goto label1;

        $r4 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r4.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Error writing the solution XML file.");

        throw $r4;

     label1:
        return;
    }

    public void writeXML(edu.mit.csail.sdg.alloy4.A4Reporter, java.io.PrintWriter, java.lang.Iterable, java.util.Map) throws edu.mit.csail.sdg.alloy4.Err
    {
        java.io.PrintWriter r2;
        edu.mit.csail.sdg.alloy4.ErrorFatal $r5;
        java.util.Map r4;
        test.translator.A4Solution r1;
        edu.mit.csail.sdg.alloy4.A4Reporter r0;
        java.lang.Iterable r3;
        boolean $z0;

        r1 := @this: test.translator.A4Solution;

        r0 := @parameter0: edu.mit.csail.sdg.alloy4.A4Reporter;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.Iterable;

        r4 := @parameter3: java.util.Map;

        staticinvoke <test.translator.A4SolutionWriter: void writeInstance(edu.mit.csail.sdg.alloy4.A4Reporter,test.translator.A4Solution,java.io.PrintWriter,java.lang.Iterable,java.util.Map)>(r0, r1, r2, r3, r4);

        $z0 = virtualinvoke r2.<java.io.PrintWriter: boolean checkError()>();

        if $z0 == 0 goto label1;

        $r5 = new edu.mit.csail.sdg.alloy4.ErrorFatal;

        specialinvoke $r5.<edu.mit.csail.sdg.alloy4.ErrorFatal: void <init>(java.lang.String)>("Error writing the solution XML file.");

        throw $r5;

     label1:
        return;
    }

    static int[] $SWITCH_TABLE$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op()
    {
        java.lang.NoSuchFieldError $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94;
        int[] $r0, r2;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46;
        edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48;

        $r0 = <test.translator.A4Solution: int[] $SWITCH_TABLE$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op>;

        if $r0 == null goto label001;

        return $r0;

     label001:
        $r1 = staticinvoke <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label002:
        $r3 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op AND>;

        $i1 = virtualinvoke $r3.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i1] = 44;

     label003:
        goto label005;

     label004:
        $r94 := @caughtexception;

     label005:
        $r4 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_LONE>;

        $i2 = virtualinvoke $r4.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i2] = 4;

     label006:
        goto label008;

     label007:
        $r93 := @caughtexception;

     label008:
        $r5 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_ONE>;

        $i3 = virtualinvoke $r5.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i3] = 3;

     label009:
        goto label011;

     label010:
        $r92 := @caughtexception;

     label011:
        $r6 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ANY_ARROW_SOME>;

        $i4 = virtualinvoke $r6.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i4] = 2;

     label012:
        goto label014;

     label013:
        $r91 := @caughtexception;

     label014:
        $r7 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ARROW>;

        $i5 = virtualinvoke $r7.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i5] = 1;

     label015:
        goto label017;

     label016:
        $r90 := @caughtexception;

     label017:
        $r8 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DIV>;

        $i6 = virtualinvoke $r8.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i6] = 26;

     label018:
        goto label020;

     label019:
        $r89 := @caughtexception;

     label020:
        $r9 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op DOMAIN>;

        $i7 = virtualinvoke $r9.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i7] = 19;

     label021:
        goto label023;

     label022:
        $r88 := @caughtexception;

     label023:
        $r10 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op EQUALS>;

        $i8 = virtualinvoke $r10.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i8] = 28;

     label024:
        goto label026;

     label025:
        $r87 := @caughtexception;

     label026:
        $r11 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GT>;

        $i9 = virtualinvoke $r11.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i9] = 33;

     label027:
        goto label029;

     label028:
        $r86 := @caughtexception;

     label029:
        $r12 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op GTE>;

        $i10 = virtualinvoke $r12.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i10] = 34;

     label030:
        goto label032;

     label031:
        $r85 := @caughtexception;

     label032:
        $r13 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IFF>;

        $i11 = virtualinvoke $r13.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i11] = 46;

     label033:
        goto label035;

     label034:
        $r84 := @caughtexception;

     label035:
        $r14 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IMPLIES>;

        $i12 = virtualinvoke $r14.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i12] = 30;

     label036:
        goto label038;

     label037:
        $r83 := @caughtexception;

     label038:
        $r15 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op IN>;

        $i13 = virtualinvoke $r15.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i13] = 42;

     label039:
        goto label041;

     label040:
        $r82 := @caughtexception;

     label041:
        $r16 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op INTERSECT>;

        $i14 = virtualinvoke $r16.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i14] = 21;

     label042:
        goto label044;

     label043:
        $r81 := @caughtexception;

     label044:
        $r17 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ISSEQ_ARROW_LONE>;

        $i15 = virtualinvoke $r17.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i15] = 17;

     label045:
        goto label047;

     label046:
        $r80 := @caughtexception;

     label047:
        $r18 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op JOIN>;

        $i16 = virtualinvoke $r18.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i16] = 18;

     label048:
        goto label050;

     label049:
        $r79 := @caughtexception;

     label050:
        $r19 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ANY>;

        $i17 = virtualinvoke $r19.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i17] = 13;

     label051:
        goto label053;

     label052:
        $r78 := @caughtexception;

     label053:
        $r20 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_LONE>;

        $i18 = virtualinvoke $r20.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i18] = 16;

     label054:
        goto label056;

     label055:
        $r77 := @caughtexception;

     label056:
        $r21 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_ONE>;

        $i19 = virtualinvoke $r21.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i19] = 15;

     label057:
        goto label059;

     label058:
        $r76 := @caughtexception;

     label059:
        $r22 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LONE_ARROW_SOME>;

        $i20 = virtualinvoke $r22.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i20] = 14;

     label060:
        goto label062;

     label061:
        $r75 := @caughtexception;

     label062:
        $r23 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LT>;

        $i21 = virtualinvoke $r23.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i21] = 31;

     label063:
        goto label065;

     label064:
        $r74 := @caughtexception;

     label065:
        $r24 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op LTE>;

        $i22 = virtualinvoke $r24.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i22] = 32;

     label066:
        goto label068;

     label067:
        $r73 := @caughtexception;

     label068:
        $r25 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MINUS>;

        $i23 = virtualinvoke $r25.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i23] = 24;

     label069:
        goto label071;

     label070:
        $r72 := @caughtexception;

     label071:
        $r26 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op MUL>;

        $i24 = virtualinvoke $r26.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i24] = 25;

     label072:
        goto label074;

     label073:
        $r71 := @caughtexception;

     label074:
        $r27 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_EQUALS>;

        $i25 = virtualinvoke $r27.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i25] = 29;

     label075:
        goto label077;

     label076:
        $r70 := @caughtexception;

     label077:
        $r28 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GT>;

        $i26 = virtualinvoke $r28.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i26] = 37;

     label078:
        goto label080;

     label079:
        $r69 := @caughtexception;

     label080:
        $r29 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_GTE>;

        $i27 = virtualinvoke $r29.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i27] = 38;

     label081:
        goto label083;

     label082:
        $r68 := @caughtexception;

     label083:
        $r30 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_IN>;

        $i28 = virtualinvoke $r30.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i28] = 43;

     label084:
        goto label086;

     label085:
        $r67 := @caughtexception;

     label086:
        $r31 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LT>;

        $i29 = virtualinvoke $r31.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i29] = 35;

     label087:
        goto label089;

     label088:
        $r66 := @caughtexception;

     label089:
        $r32 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op NOT_LTE>;

        $i30 = virtualinvoke $r32.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i30] = 36;

     label090:
        goto label092;

     label091:
        $r65 := @caughtexception;

     label092:
        $r33 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ANY>;

        $i31 = virtualinvoke $r33.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i31] = 9;

     label093:
        goto label095;

     label094:
        $r64 := @caughtexception;

     label095:
        $r34 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_LONE>;

        $i32 = virtualinvoke $r34.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i32] = 12;

     label096:
        goto label098;

     label097:
        $r63 := @caughtexception;

     label098:
        $r35 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_ONE>;

        $i33 = virtualinvoke $r35.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i33] = 11;

     label099:
        goto label101;

     label100:
        $r62 := @caughtexception;

     label101:
        $r36 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op ONE_ARROW_SOME>;

        $i34 = virtualinvoke $r36.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i34] = 10;

     label102:
        goto label104;

     label103:
        $r61 := @caughtexception;

     label104:
        $r37 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op OR>;

        $i35 = virtualinvoke $r37.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i35] = 45;

     label105:
        goto label107;

     label106:
        $r60 := @caughtexception;

     label107:
        $r38 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUS>;

        $i36 = virtualinvoke $r38.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i36] = 23;

     label108:
        goto label110;

     label109:
        $r59 := @caughtexception;

     label110:
        $r39 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op PLUSPLUS>;

        $i37 = virtualinvoke $r39.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i37] = 22;

     label111:
        goto label113;

     label112:
        $r58 := @caughtexception;

     label113:
        $r40 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op RANGE>;

        $i38 = virtualinvoke $r40.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i38] = 20;

     label114:
        goto label116;

     label115:
        $r57 := @caughtexception;

     label116:
        $r41 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op REM>;

        $i39 = virtualinvoke $r41.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i39] = 27;

     label117:
        goto label119;

     label118:
        $r56 := @caughtexception;

     label119:
        $r42 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHA>;

        $i40 = virtualinvoke $r42.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i40] = 40;

     label120:
        goto label122;

     label121:
        $r55 := @caughtexception;

     label122:
        $r43 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHL>;

        $i41 = virtualinvoke $r43.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i41] = 39;

     label123:
        goto label125;

     label124:
        $r54 := @caughtexception;

     label125:
        $r44 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SHR>;

        $i42 = virtualinvoke $r44.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i42] = 41;

     label126:
        goto label128;

     label127:
        $r53 := @caughtexception;

     label128:
        $r45 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ANY>;

        $i43 = virtualinvoke $r45.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i43] = 5;

     label129:
        goto label131;

     label130:
        $r52 := @caughtexception;

     label131:
        $r46 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_LONE>;

        $i44 = virtualinvoke $r46.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i44] = 8;

     label132:
        goto label134;

     label133:
        $r51 := @caughtexception;

     label134:
        $r47 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_ONE>;

        $i45 = virtualinvoke $r47.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i45] = 7;

     label135:
        goto label137;

     label136:
        $r50 := @caughtexception;

     label137:
        $r48 = <edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op SOME_ARROW_SOME>;

        $i46 = virtualinvoke $r48.<edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary$Op: int ordinal()>();

        r2[$i46] = 6;

     label138:
        goto label140;

     label139:
        $r49 := @caughtexception;

     label140:
        <test.translator.A4Solution: int[] $SWITCH_TABLE$edu$mit$csail$sdg$alloy4compiler$ast$ExprBinary$Op> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label002 to label003 with label004;
        catch java.lang.NoSuchFieldError from label005 to label006 with label007;
        catch java.lang.NoSuchFieldError from label008 to label009 with label010;
        catch java.lang.NoSuchFieldError from label011 to label012 with label013;
        catch java.lang.NoSuchFieldError from label014 to label015 with label016;
        catch java.lang.NoSuchFieldError from label017 to label018 with label019;
        catch java.lang.NoSuchFieldError from label020 to label021 with label022;
        catch java.lang.NoSuchFieldError from label023 to label024 with label025;
        catch java.lang.NoSuchFieldError from label026 to label027 with label028;
        catch java.lang.NoSuchFieldError from label029 to label030 with label031;
        catch java.lang.NoSuchFieldError from label032 to label033 with label034;
        catch java.lang.NoSuchFieldError from label035 to label036 with label037;
        catch java.lang.NoSuchFieldError from label038 to label039 with label040;
        catch java.lang.NoSuchFieldError from label041 to label042 with label043;
        catch java.lang.NoSuchFieldError from label044 to label045 with label046;
        catch java.lang.NoSuchFieldError from label047 to label048 with label049;
        catch java.lang.NoSuchFieldError from label050 to label051 with label052;
        catch java.lang.NoSuchFieldError from label053 to label054 with label055;
        catch java.lang.NoSuchFieldError from label056 to label057 with label058;
        catch java.lang.NoSuchFieldError from label059 to label060 with label061;
        catch java.lang.NoSuchFieldError from label062 to label063 with label064;
        catch java.lang.NoSuchFieldError from label065 to label066 with label067;
        catch java.lang.NoSuchFieldError from label068 to label069 with label070;
        catch java.lang.NoSuchFieldError from label071 to label072 with label073;
        catch java.lang.NoSuchFieldError from label074 to label075 with label076;
        catch java.lang.NoSuchFieldError from label077 to label078 with label079;
        catch java.lang.NoSuchFieldError from label080 to label081 with label082;
        catch java.lang.NoSuchFieldError from label083 to label084 with label085;
        catch java.lang.NoSuchFieldError from label086 to label087 with label088;
        catch java.lang.NoSuchFieldError from label089 to label090 with label091;
        catch java.lang.NoSuchFieldError from label092 to label093 with label094;
        catch java.lang.NoSuchFieldError from label095 to label096 with label097;
        catch java.lang.NoSuchFieldError from label098 to label099 with label100;
        catch java.lang.NoSuchFieldError from label101 to label102 with label103;
        catch java.lang.NoSuchFieldError from label104 to label105 with label106;
        catch java.lang.NoSuchFieldError from label107 to label108 with label109;
        catch java.lang.NoSuchFieldError from label110 to label111 with label112;
        catch java.lang.NoSuchFieldError from label113 to label114 with label115;
        catch java.lang.NoSuchFieldError from label116 to label117 with label118;
        catch java.lang.NoSuchFieldError from label119 to label120 with label121;
        catch java.lang.NoSuchFieldError from label122 to label123 with label124;
        catch java.lang.NoSuchFieldError from label125 to label126 with label127;
        catch java.lang.NoSuchFieldError from label128 to label129 with label130;
        catch java.lang.NoSuchFieldError from label131 to label132 with label133;
        catch java.lang.NoSuchFieldError from label134 to label135 with label136;
        catch java.lang.NoSuchFieldError from label137 to label138 with label139;
    }
}
