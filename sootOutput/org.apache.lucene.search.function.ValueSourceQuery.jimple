public class org.apache.lucene.search.function.ValueSourceQuery extends org.apache.lucene.search.Query
{
    org.apache.lucene.search.function.ValueSource valSrc;

    public void <init>(org.apache.lucene.search.function.ValueSource)
    {
        org.apache.lucene.search.function.ValueSourceQuery r0;
        org.apache.lucene.search.function.ValueSource r1;

        r0 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        r1 := @parameter0: org.apache.lucene.search.function.ValueSource;

        specialinvoke r0.<org.apache.lucene.search.Query: void <init>()>();

        r0.<org.apache.lucene.search.function.ValueSourceQuery: org.apache.lucene.search.function.ValueSource valSrc> = r1;

        return;
    }

    public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException
    {
        org.apache.lucene.search.function.ValueSourceQuery r0;
        org.apache.lucene.index.IndexReader r1;

        r0 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        return r0;
    }

    public void extractTerms(java.util.Set)
    {
        java.util.Set r1;
        org.apache.lucene.search.function.ValueSourceQuery r0;

        r0 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        r1 := @parameter0: java.util.Set;

        return;
    }

    public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)
    {
        org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight $r0;
        org.apache.lucene.search.function.ValueSourceQuery r1;
        org.apache.lucene.search.Searcher r2;

        r1 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        r2 := @parameter0: org.apache.lucene.search.Searcher;

        $r0 = new org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight;

        specialinvoke $r0.<org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight: void <init>(org.apache.lucene.search.function.ValueSourceQuery,org.apache.lucene.search.Searcher)>(r1, r2);

        return $r0;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.apache.lucene.search.function.ValueSource $r2;
        org.apache.lucene.search.function.ValueSourceQuery r1;
        float $f0;
        java.lang.StringBuilder $r0, $r4, $r6;
        java.lang.String $r3, $r5, $r7, r8;

        r1 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        r8 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.apache.lucene.search.function.ValueSourceQuery: org.apache.lucene.search.function.ValueSource valSrc>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.search.function.ValueSource: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $f0 = virtualinvoke r1.<org.apache.lucene.search.function.ValueSourceQuery: float getBoost()>();

        $r5 = staticinvoke <org.apache.lucene.util.ToStringUtils: java.lang.String boost(float)>($f0);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.function.ValueSource $r5, $r6;
        org.apache.lucene.search.function.ValueSourceQuery r0, r4;
        byte $b0;
        float $f0, $f1;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = specialinvoke r0.<org.apache.lucene.search.Query: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        r4 = (org.apache.lucene.search.function.ValueSourceQuery) r1;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.function.ValueSourceQuery: float getBoost()>();

        $f1 = virtualinvoke r4.<org.apache.lucene.search.function.ValueSourceQuery: float getBoost()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label4;

        $r6 = r0.<org.apache.lucene.search.function.ValueSourceQuery: org.apache.lucene.search.function.ValueSource valSrc>;

        $r5 = r4.<org.apache.lucene.search.function.ValueSourceQuery: org.apache.lucene.search.function.ValueSource valSrc>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.search.function.ValueSource: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.lucene.search.function.ValueSource $r2;
        org.apache.lucene.search.function.ValueSourceQuery r0;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0;
        java.lang.Class $r1;

        r0 := @this: org.apache.lucene.search.function.ValueSourceQuery;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<org.apache.lucene.search.function.ValueSourceQuery: org.apache.lucene.search.function.ValueSource valSrc>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.search.function.ValueSource: int hashCode()>();

        $i2 = $i0 + $i1;

        $f0 = virtualinvoke r0.<org.apache.lucene.search.function.ValueSourceQuery: float getBoost()>();

        $i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i4 = $i2 ^ $i3;

        return $i4;
    }
}
