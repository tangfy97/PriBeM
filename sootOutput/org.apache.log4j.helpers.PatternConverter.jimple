public abstract class org.apache.log4j.helpers.PatternConverter extends java.lang.Object
{
    public org.apache.log4j.helpers.PatternConverter next;
    int min;
    int max;
    boolean leftAlign;
    static java.lang.String[] SPACES;

    protected void <init>()
    {
        int $i1;
        org.apache.log4j.helpers.PatternConverter r0;

        r0 := @this: org.apache.log4j.helpers.PatternConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.apache.log4j.helpers.PatternConverter: int min> = $i1;

        r0.<org.apache.log4j.helpers.PatternConverter: int max> = 2147483647;

        r0.<org.apache.log4j.helpers.PatternConverter: boolean leftAlign> = 0;

        return;
    }

    protected void <init>(org.apache.log4j.helpers.FormattingInfo)
    {
        org.apache.log4j.helpers.PatternConverter r0;
        int $i0, $i1, $i3;
        org.apache.log4j.helpers.FormattingInfo r1;
        boolean $z0;

        r0 := @this: org.apache.log4j.helpers.PatternConverter;

        r1 := @parameter0: org.apache.log4j.helpers.FormattingInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i3 = (int) -1;

        r0.<org.apache.log4j.helpers.PatternConverter: int min> = $i3;

        r0.<org.apache.log4j.helpers.PatternConverter: int max> = 2147483647;

        r0.<org.apache.log4j.helpers.PatternConverter: boolean leftAlign> = 0;

        $i0 = r1.<org.apache.log4j.helpers.FormattingInfo: int min>;

        r0.<org.apache.log4j.helpers.PatternConverter: int min> = $i0;

        $i1 = r1.<org.apache.log4j.helpers.FormattingInfo: int max>;

        r0.<org.apache.log4j.helpers.PatternConverter: int max> = $i1;

        $z0 = r1.<org.apache.log4j.helpers.FormattingInfo: boolean leftAlign>;

        r0.<org.apache.log4j.helpers.PatternConverter: boolean leftAlign> = $z0;

        return;
    }

    protected abstract java.lang.String convert(org.apache.log4j.spi.LoggingEvent);

    public void format(java.lang.StringBuffer, org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.PatternConverter r0;
        java.lang.StringBuffer r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r2, $r4;
        boolean $z0;
        org.apache.log4j.spi.LoggingEvent r1;

        r0 := @this: org.apache.log4j.helpers.PatternConverter;

        r3 := @parameter0: java.lang.StringBuffer;

        r1 := @parameter1: org.apache.log4j.spi.LoggingEvent;

        $r2 = virtualinvoke r0.<org.apache.log4j.helpers.PatternConverter: java.lang.String convert(org.apache.log4j.spi.LoggingEvent)>(r1);

        if $r2 != null goto label2;

        $i9 = r0.<org.apache.log4j.helpers.PatternConverter: int min>;

        if 0 >= $i9 goto label1;

        $i10 = r0.<org.apache.log4j.helpers.PatternConverter: int min>;

        virtualinvoke r0.<org.apache.log4j.helpers.PatternConverter: void spacePad(java.lang.StringBuffer,int)>(r3, $i10);

     label1:
        return;

     label2:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = r0.<org.apache.log4j.helpers.PatternConverter: int max>;

        if $i0 <= $i1 goto label3;

        $i7 = r0.<org.apache.log4j.helpers.PatternConverter: int max>;

        $i8 = $i0 - $i7;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i8);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        goto label6;

     label3:
        $i2 = r0.<org.apache.log4j.helpers.PatternConverter: int min>;

        if $i0 >= $i2 goto label5;

        $z0 = r0.<org.apache.log4j.helpers.PatternConverter: boolean leftAlign>;

        if $z0 == 0 goto label4;

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $i5 = r0.<org.apache.log4j.helpers.PatternConverter: int min>;

        $i6 = $i5 - $i0;

        virtualinvoke r0.<org.apache.log4j.helpers.PatternConverter: void spacePad(java.lang.StringBuffer,int)>(r3, $i6);

        goto label6;

     label4:
        $i3 = r0.<org.apache.log4j.helpers.PatternConverter: int min>;

        $i4 = $i3 - $i0;

        virtualinvoke r0.<org.apache.log4j.helpers.PatternConverter: void spacePad(java.lang.StringBuffer,int)>(r3, $i4);

        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        goto label6;

     label5:
        virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label6:
        return;
    }

    public void spacePad(java.lang.StringBuffer, int)
    {
        org.apache.log4j.helpers.PatternConverter r5;
        java.lang.String[] $r1, $r3;
        java.lang.StringBuffer r0;
        int $i0, $i1, i2, i3, $i5, $i7;
        java.lang.String $r2, $r4;

        r5 := @this: org.apache.log4j.helpers.PatternConverter;

        r0 := @parameter0: java.lang.StringBuffer;

        i2 := @parameter1: int;

     label1:
        if i2 < 32 goto label2;

        $r3 = <org.apache.log4j.helpers.PatternConverter: java.lang.String[] SPACES>;

        $r4 = $r3[5];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $i5 = (int) -32;

        i2 = i2 + $i5;

        goto label1;

     label2:
        i3 = 4;

     label3:
        if i3 < 0 goto label5;

        $i0 = 1 << i3;

        $i1 = i2 & $i0;

        if $i1 == 0 goto label4;

        $r1 = <org.apache.log4j.helpers.PatternConverter: java.lang.String[] SPACES>;

        $r2 = $r1[i3];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label4:
        $i7 = (int) -1;

        i3 = i3 + $i7;

        goto label3;

     label5:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[6];

        $r0[0] = " ";

        $r0[1] = "  ";

        $r0[2] = "    ";

        $r0[3] = "        ";

        $r0[4] = "                ";

        $r0[5] = "                                ";

        <org.apache.log4j.helpers.PatternConverter: java.lang.String[] SPACES> = $r0;

        return;
    }
}
