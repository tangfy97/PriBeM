public final class kodkod.util.ints.ArrayIntSet extends kodkod.util.ints.AbstractIntSet
{
    private final int[] ints;
    private final int hashcode;

    public void <init>(int[])
    {
        int $i0;
        kodkod.util.ints.ArrayIntSet r0;
        int[] r1;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        r1 := @parameter0: int[];

        specialinvoke r0.<kodkod.util.ints.AbstractIntSet: void <init>()>();

        r0.<kodkod.util.ints.ArrayIntSet: int[] ints> = r1;

        $i0 = staticinvoke <kodkod.util.ints.Ints: int superFastHash(int[])>(r1);

        r0.<kodkod.util.ints.ArrayIntSet: int hashcode> = $i0;

        return;
    }

    public void <init>(kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.ArrayIntSet r0;
        int[] $r2;
        kodkod.util.ints.IntSet r1;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        r1 := @parameter0: kodkod.util.ints.IntSet;

        $r2 = interfaceinvoke r1.<kodkod.util.ints.IntSet: int[] toArray()>();

        specialinvoke r0.<kodkod.util.ints.ArrayIntSet: void <init>(int[])>($r2);

        return;
    }

    public kodkod.util.ints.IntIterator iterator(int, int)
    {
        kodkod.util.ints.ArrayIntSet$AscendingIntArrayIterator $r2;
        int i0, i1;
        kodkod.util.ints.ArrayIntSet r0;
        kodkod.util.ints.ArrayIntSet$DescendingIntArrayIterator $r3;
        kodkod.util.ints.IntIterator $r1;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new kodkod.util.ints.ArrayIntSet$AscendingIntArrayIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.ArrayIntSet$AscendingIntArrayIterator: void <init>(kodkod.util.ints.ArrayIntSet,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.ArrayIntSet$DescendingIntArrayIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.ArrayIntSet$DescendingIntArrayIterator: void <init>(kodkod.util.ints.ArrayIntSet,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.ArrayIntSet r0;
        int[] $r1;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int ceil(int)
    {
        int[] $r1, $r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        kodkod.util.ints.ArrayIntSet r0;
        java.util.NoSuchElementException $r5;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, i0);

        $r2 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i2 = lengthof $r2;

        $i3 = neg $i2;

        $i4 = $i3 - 1;

        if $i1 != $i4 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        if $i1 < 0 goto label2;

        $r4 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i7 = $r4[$i1];

        goto label3;

     label2:
        $r3 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i5 = neg $i1;

        $i6 = $i5 - 1;

        $i7 = $r3[$i6];

     label3:
        return $i7;
    }

    public int floor(int)
    {
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i6;
        kodkod.util.ints.ArrayIntSet r0;
        java.util.NoSuchElementException $r5;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, i0);

        $i6 = (int) -1;

        if $i1 != $i6 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        if $i1 < 0 goto label2;

        $r3 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i4 = $r3[$i1];

        goto label3;

     label2:
        $r2 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i2 = neg $i1;

        $i3 = $i2 - 2;

        $i4 = $r2[$i3];

     label3:
        return $i4;
    }

    public boolean contains(int)
    {
        int[] $r1;
        int i0, $i1;
        kodkod.util.ints.ArrayIntSet r0;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, i0);

        if $i1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int max()
    {
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        kodkod.util.ints.ArrayIntSet r0;
        java.util.NoSuchElementException $r4;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r4 = new java.util.NoSuchElementException;

        specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>();

        throw $r4;

     label1:
        $r3 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $r2 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        $i3 = $r3[$i2];

        return $i3;
    }

    public int min()
    {
        int[] $r1, $r2;
        int $i0, $i1;
        kodkod.util.ints.ArrayIntSet r0;
        java.util.NoSuchElementException $r3;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i1 = $r2[0];

        return $i1;
    }

    public int[] toArray()
    {
        int[] $r1, r2, $r3, $r4;
        int $i0, $i1;
        kodkod.util.ints.ArrayIntSet r0;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        $r4 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $r3 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    public int[] toArray(int[])
    {
        int[] $r1, $r2, $r3, r4;
        int $i0, $i1, $i2, $i3;
        kodkod.util.ints.ArrayIntSet r0;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        r4 := @parameter0: int[];

        $i0 = lengthof r4;

        $i1 = virtualinvoke r0.<kodkod.util.ints.ArrayIntSet: int size()>();

        if $i0 >= $i1 goto label1;

        $r3 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i3 = lengthof $r3;

        r4 = newarray (int)[$i3];

     label1:
        $r2 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $i2 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r4, 0, $i2);

        return r4;
    }

    public int hashCode()
    {
        int $i0;
        kodkod.util.ints.ArrayIntSet r0;

        r0 := @this: kodkod.util.ints.ArrayIntSet;

        $i0 = r0.<kodkod.util.ints.ArrayIntSet: int hashcode>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        int[] $r3, $r4;
        kodkod.util.ints.ArrayIntSet r1, $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: kodkod.util.ints.ArrayIntSet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof kodkod.util.ints.ArrayIntSet;

        if $z0 == 0 goto label1;

        $r4 = r1.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $r2 = (kodkod.util.ints.ArrayIntSet) r0;

        $r3 = $r2.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r4, $r3);

        goto label2;

     label1:
        $z1 = specialinvoke r1.<kodkod.util.ints.AbstractIntSet: boolean equals(java.lang.Object)>(r0);

     label2:
        return $z1;
    }

    static int[] access$0(kodkod.util.ints.ArrayIntSet)
    {
        kodkod.util.ints.ArrayIntSet r0;
        int[] $r1;

        r0 := @parameter0: kodkod.util.ints.ArrayIntSet;

        $r1 = r0.<kodkod.util.ints.ArrayIntSet: int[] ints>;

        return $r1;
    }
}
