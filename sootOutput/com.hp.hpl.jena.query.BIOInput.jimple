public class com.hp.hpl.jena.query.BIOInput extends java.lang.Object
{
    private static com.hp.hpl.jena.rdf.model.Model m;

    public void <init>()
    {
        com.hp.hpl.jena.query.BIOInput r0;

        r0 := @this: com.hp.hpl.jena.query.BIOInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.query.ResultSet fromBIO(java.io.InputStream)
    {
        java.util.ArrayList $r2, $r3;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r4;
        java.util.Iterator $r5, $r11;
        com.hp.hpl.jena.sparql.core.Var r13;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r6;
        java.util.List $r7, $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r9;
        com.hp.hpl.jena.rdf.model.Model $r8;
        com.hp.hpl.jena.sparql.engine.binding.BindingInputStream $r0;
        java.lang.Object $r12;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = new com.hp.hpl.jena.sparql.engine.binding.BindingInputStream;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingInputStream: void <init>(java.io.InputStream)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingInputStream: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingInputStream: com.hp.hpl.jena.sparql.engine.binding.Binding next()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingInputStream: java.util.List vars()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.sparql.core.Var) $r12;

        $z2 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r13);

        if $z2 != 0 goto label3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r13);

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $r4 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator)>($r5);

        $r6 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: java.util.List varNames(java.util.Collection)>($r3);

        $r8 = <com.hp.hpl.jena.query.BIOInput: com.hp.hpl.jena.rdf.model.Model m>;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r7, $r8, $r4);

        return $r6;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.rdf.model.Model $r0;

        $r0 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        <com.hp.hpl.jena.query.BIOInput: com.hp.hpl.jena.rdf.model.Model m> = $r0;

        return;
    }
}
