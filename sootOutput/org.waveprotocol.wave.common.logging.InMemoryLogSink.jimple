public final class org.waveprotocol.wave.common.logging.InMemoryLogSink extends org.waveprotocol.wave.common.logging.LogSink
{
    private static final int MAX_ENTRIES;
    private final org.waveprotocol.wave.common.logging.CircularBuffer buffer;
    private final java.util.Set sinks;

    public void <init>()
    {
        java.util.HashSet $r2;
        org.waveprotocol.wave.common.logging.CircularBuffer $r1;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r0;

        r0 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        specialinvoke r0.<org.waveprotocol.wave.common.logging.LogSink: void <init>()>();

        $r1 = new org.waveprotocol.wave.common.logging.CircularBuffer;

        specialinvoke $r1.<org.waveprotocol.wave.common.logging.CircularBuffer: void <init>(int)>(2000);

        r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: org.waveprotocol.wave.common.logging.CircularBuffer buffer> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: java.util.Set sinks> = $r2;

        return;
    }

    public void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.String)
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.common.logging.LogSink r6;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r7;
        java.util.Set $r3;
        org.waveprotocol.wave.common.logging.CircularBuffer $r2;
        java.lang.Object $r5;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        r7 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: org.waveprotocol.wave.common.logging.CircularBuffer buffer>;

        virtualinvoke $r2.<org.waveprotocol.wave.common.logging.CircularBuffer: void add(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: java.util.Set sinks>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.common.logging.LogSink) $r5;

        virtualinvoke r6.<org.waveprotocol.wave.common.logging.LogSink: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.String)>(r7, r1);

        goto label1;

     label2:
        return;
    }

    public transient void lazyLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.Object[])
    {
        java.lang.Object[] r1;
        java.util.Iterator $r5;
        org.waveprotocol.wave.common.logging.LogSink r7;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r8;
        java.util.Set $r3, $r4;
        org.waveprotocol.wave.common.logging.CircularBuffer $r2;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        r8 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r1 := @parameter1: java.lang.Object[];

        $r2 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: org.waveprotocol.wave.common.logging.CircularBuffer buffer>;

        virtualinvoke $r2.<org.waveprotocol.wave.common.logging.CircularBuffer: void add(java.lang.Object)>(r1);

        $r3 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: java.util.Set sinks>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: java.util.Set sinks>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.common.logging.LogSink) $r6;

        virtualinvoke r7.<org.waveprotocol.wave.common.logging.LogSink: void lazyLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.Object[])>(r8, r1);

        goto label1;

     label2:
        return;
    }

    public java.util.List showAll()
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r1;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.common.logging.CircularBuffer $r2, $r3;
        int $i0;
        java.lang.Object $r5;
        java.lang.String $r6;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.waveprotocol.wave.common.logging.InMemoryLogSink: org.waveprotocol.wave.common.logging.CircularBuffer buffer>;

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.common.logging.CircularBuffer: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = r1.<org.waveprotocol.wave.common.logging.InMemoryLogSink: org.waveprotocol.wave.common.logging.CircularBuffer buffer>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.common.logging.CircularBuffer: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = staticinvoke <org.waveprotocol.wave.common.logging.LogUtils: java.lang.String stringifyLogObject(java.lang.Object)>($r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public void clear()
    {
        org.waveprotocol.wave.common.logging.CircularBuffer $r1;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r0;

        r0 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        $r1 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: org.waveprotocol.wave.common.logging.CircularBuffer buffer>;

        virtualinvoke $r1.<org.waveprotocol.wave.common.logging.CircularBuffer: void clear()>();

        return;
    }

    public void addLogSink_DO_NOT_USE(org.waveprotocol.wave.common.logging.LogSink)
    {
        java.util.Set $r2;
        org.waveprotocol.wave.common.logging.LogSink r1;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r0;

        r0 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.LogSink;

        $r2 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: java.util.Set sinks>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeLogSink(org.waveprotocol.wave.common.logging.LogSink)
    {
        java.util.Set $r2;
        org.waveprotocol.wave.common.logging.LogSink r1;
        org.waveprotocol.wave.common.logging.InMemoryLogSink r0;

        r0 := @this: org.waveprotocol.wave.common.logging.InMemoryLogSink;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.LogSink;

        $r2 = r0.<org.waveprotocol.wave.common.logging.InMemoryLogSink: java.util.Set sinks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.common.logging.InMemoryLogSink: int MAX_ENTRIES> = 2000;

        return;
    }
}
