public class nu.xom.Element extends nu.xom.ParentNode
{
    private java.lang.String localName;
    private java.lang.String prefix;
    private java.lang.String URI;
    private nu.xom.Attribute[] attributes;
    private int numAttributes;
    nu.xom.Namespaces namespaces;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Element: void <init>(java.lang.String,java.lang.String)>(r1, "");

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        nu.xom.Element r0;
        int $i0, $i1;
        java.lang.String r1, r2, r4, r5;
        nu.xom.IllegalNameException $r3;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<nu.xom.ParentNode: void <init>()>();

        r0.<nu.xom.Element: nu.xom.Attribute[] attributes> = null;

        r0.<nu.xom.Element: int numAttributes> = 0;

        r0.<nu.xom.Element: nu.xom.Namespaces namespaces> = null;

        r4 = "";

        r5 = r1;

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label1;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        specialinvoke r0.<nu.xom.Element: void _setNamespacePrefix(java.lang.String)>(r4);

        specialinvoke r0.<nu.xom.Element: void _setNamespaceURI(java.lang.String)>(r2);

     label2:
        specialinvoke r0.<nu.xom.Element: void _setLocalName(java.lang.String)>(r5);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        virtualinvoke $r3.<nu.xom.IllegalNameException: void setData(java.lang.String)>(r1);

        throw $r3;

     label5:
        return;

        catch nu.xom.IllegalNameException from label2 to label3 with label4;
    }

    private void <init>()
    {
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        specialinvoke r0.<nu.xom.ParentNode: void <init>()>();

        r0.<nu.xom.Element: nu.xom.Attribute[] attributes> = null;

        r0.<nu.xom.Element: int numAttributes> = 0;

        r0.<nu.xom.Element: nu.xom.Namespaces namespaces> = null;

        return;
    }

    static nu.xom.Element build(java.lang.String, java.lang.String, java.lang.String)
    {
        nu.xom.Element $r0;
        int $i0;
        java.lang.String r1, r2, r3, $r4, r5;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r0 = new nu.xom.Element;

        specialinvoke $r0.<nu.xom.Element: void <init>()>();

        r5 = "";

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r0.<nu.xom.Element: java.lang.String prefix> = r5;

        $r0.<nu.xom.Element: java.lang.String localName> = r2;

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        staticinvoke <nu.xom.Verifier: void checkAbsoluteURIReference(java.lang.String)>(r3);

     label2:
        $r0.<nu.xom.Element: java.lang.String URI> = r3;

        return $r0;
    }

    public void <init>(nu.xom.Element)
    {
        nu.xom.Attribute[] $r6, $r8;
        nu.xom.Element r0, r1;
        nu.xom.Namespaces $r5, $r9, $r10;
        int $i0;
        java.lang.String $r2, $r3, $r4, $r7;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: nu.xom.Element;

        specialinvoke r0.<nu.xom.ParentNode: void <init>()>();

        r0.<nu.xom.Element: nu.xom.Attribute[] attributes> = null;

        r0.<nu.xom.Element: int numAttributes> = 0;

        r0.<nu.xom.Element: nu.xom.Namespaces namespaces> = null;

        $r2 = r1.<nu.xom.Element: java.lang.String prefix>;

        r0.<nu.xom.Element: java.lang.String prefix> = $r2;

        $r3 = r1.<nu.xom.Element: java.lang.String localName>;

        r0.<nu.xom.Element: java.lang.String localName> = $r3;

        $r4 = r1.<nu.xom.Element: java.lang.String URI>;

        r0.<nu.xom.Element: java.lang.String URI> = $r4;

        $r5 = r1.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r5 == null goto label1;

        $r9 = r1.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r10 = virtualinvoke $r9.<nu.xom.Namespaces: nu.xom.Namespaces copy()>();

        r0.<nu.xom.Element: nu.xom.Namespaces namespaces> = $r10;

     label1:
        $r6 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r6 == null goto label2;

        $r8 = specialinvoke r1.<nu.xom.Element: nu.xom.Attribute[] copyAttributes(nu.xom.Element)>(r0);

        r0.<nu.xom.Element: nu.xom.Attribute[] attributes> = $r8;

        $i0 = r1.<nu.xom.Element: int numAttributes>;

        r0.<nu.xom.Element: int numAttributes> = $i0;

     label2:
        $r7 = virtualinvoke r1.<nu.xom.Element: java.lang.String findActualBaseURI()>();

        r0.<nu.xom.Element: java.lang.String actualBaseURI> = $r7;

        staticinvoke <nu.xom.Element: void copyChildren(nu.xom.Element,nu.xom.Element)>(r1, r0);

        return;
    }

    private nu.xom.Attribute[] copyAttributes(nu.xom.Element)
    {
        nu.xom.Attribute[] r1, $r2;
        nu.xom.Element r0, r6;
        nu.xom.Node $r4;
        nu.xom.Attribute $r3, $r5, $r7;
        int $i0, $i1, $i2, i3;

        r0 := @this: nu.xom.Element;

        r6 := @parameter0: nu.xom.Element;

        $i0 = r0.<nu.xom.Element: int numAttributes>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = r0.<nu.xom.Element: int numAttributes>;

        r1 = newarray (nu.xom.Attribute)[$i1];

        i3 = 0;

     label2:
        $i2 = r0.<nu.xom.Element: int numAttributes>;

        if i3 >= $i2 goto label3;

        $r2 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $r3 = $r2[i3];

        $r4 = virtualinvoke $r3.<nu.xom.Attribute: nu.xom.Node copy()>();

        $r5 = (nu.xom.Attribute) $r4;

        r1[i3] = $r5;

        $r7 = r1[i3];

        virtualinvoke $r7.<nu.xom.Attribute: void setParent(nu.xom.ParentNode)>(r6);

        i3 = i3 + 1;

        goto label2;

     label3:
        return r1;
    }

    private static nu.xom.Element copyTag(nu.xom.Element)
    {
        nu.xom.Attribute[] $r3, $r5;
        nu.xom.Element r0, $r1;
        nu.xom.Namespaces $r2, $r6, $r7;
        int $i0;
        java.lang.String $r4;

        r0 := @parameter0: nu.xom.Element;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Element shallowCopy()>();

        $r2 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r2 == null goto label1;

        $r6 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r7 = virtualinvoke $r6.<nu.xom.Namespaces: nu.xom.Namespaces copy()>();

        $r1.<nu.xom.Element: nu.xom.Namespaces namespaces> = $r7;

     label1:
        $r3 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r3 == null goto label2;

        $r5 = specialinvoke r0.<nu.xom.Element: nu.xom.Attribute[] copyAttributes(nu.xom.Element)>($r1);

        $r1.<nu.xom.Element: nu.xom.Attribute[] attributes> = $r5;

        $i0 = r0.<nu.xom.Element: int numAttributes>;

        $r1.<nu.xom.Element: int numAttributes> = $i0;

     label2:
        $r4 = virtualinvoke r0.<nu.xom.Element: java.lang.String findActualBaseURI()>();

        $r1.<nu.xom.Element: java.lang.String actualBaseURI> = $r4;

        return $r1;
    }

    private static void copyChildren(nu.xom.Element, nu.xom.Element)
    {
        nu.xom.Element r0, r1, $r4, $r5, r8;
        int[] $r7, r10;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        nu.xom.ParentNode $r2, $r6;
        boolean $z0, z1;
        nu.xom.Node $r3, r9;

        r0 := @parameter0: nu.xom.Element;

        r1 := @parameter1: nu.xom.Element;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        r8 = r1;

        r9 = r0;

        i5 = 0;

        r10 = newarray (int)[10];

        i6 = 0;

        r10[0] = 0;

        z1 = 0;

     label2:
        if z1 != 0 goto label3;

        $i4 = virtualinvoke r9.<nu.xom.Node: int getChildCount()>();

        if $i4 <= 0 goto label3;

        r9 = virtualinvoke r9.<nu.xom.Node: nu.xom.Node getChild(int)>(0);

        i5 = 0;

        i6 = i6 + 1;

        $r7 = staticinvoke <nu.xom.Element: int[] grow(int[],int)>(r10, i6);

        r10 = $r7;

        $r7[i6] = 0;

        goto label6;

     label3:
        z1 = 0;

        $r2 = virtualinvoke r9.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        $i1 = virtualinvoke $r2.<nu.xom.ParentNode: int getChildCount()>();

        $i2 = $i1 - 1;

        if $i2 != i5 goto label5;

        r9 = $r2;

        $i8 = (int) -1;

        i6 = i6 + $i8;

        if $r2 != r0 goto label4;

        goto label9;

     label4:
        $r6 = virtualinvoke r8.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        r8 = (nu.xom.Element) $r6;

        i5 = r10[i6];

        z1 = 1;

        goto label2;

     label5:
        i5 = i5 + 1;

        r10[i6] = i5;

        r9 = virtualinvoke $r2.<nu.xom.ParentNode: nu.xom.Node getChild(int)>(i5);

     label6:
        $z0 = virtualinvoke r9.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label8;

        $r4 = (nu.xom.Element) r9;

        $r5 = staticinvoke <nu.xom.Element: nu.xom.Element copyTag(nu.xom.Element)>($r4);

        virtualinvoke r8.<nu.xom.ParentNode: void appendChild(nu.xom.Node)>($r5);

        $i3 = virtualinvoke r9.<nu.xom.Node: int getChildCount()>();

        if $i3 <= 0 goto label7;

        r8 = $r5;

     label7:
        goto label2;

     label8:
        $r3 = virtualinvoke r9.<nu.xom.Node: nu.xom.Node copy()>();

        virtualinvoke r8.<nu.xom.ParentNode: void appendChild(nu.xom.Node)>($r3);

        goto label2;

     label9:
        return;
    }

    private static int[] grow(int[], int)
    {
        int[] r0, r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label1;

        return r0;

     label1:
        $i2 = lengthof r0;

        $i3 = $i2 * 2;

        r1 = newarray (int)[$i3];

        $i4 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i4);

        return r1;
    }

    public final nu.xom.Elements getChildElements(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Elements $r2;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<nu.xom.Element: nu.xom.Elements getChildElements(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public final nu.xom.Elements getChildElements(java.lang.String, java.lang.String)
    {
        nu.xom.Element r1, r3;
        nu.xom.Node $r2;
        int $i0, i1, $i2;
        java.lang.String $r4, $r5, r6, r7;
        nu.xom.Elements $r0;
        boolean $z0, $z1, $z2;

        r1 := @this: nu.xom.Element;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        if r7 != null goto label1;

        r7 = "";

     label1:
        if r6 != null goto label2;

        r6 = "";

     label2:
        $r0 = new nu.xom.Elements;

        specialinvoke $r0.<nu.xom.Elements: void <init>()>();

        i1 = 0;

     label3:
        $i2 = virtualinvoke r1.<nu.xom.Element: int getChildCount()>();

        if i1 >= $i2 goto label6;

        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r2.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label5;

        r3 = (nu.xom.Element) $r2;

        $r4 = virtualinvoke r3.<nu.xom.Element: java.lang.String getLocalName()>();

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label4;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label5;

     label4:
        $r5 = virtualinvoke r3.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label5;

        virtualinvoke $r0.<nu.xom.Elements: void add(nu.xom.Element)>(r3);

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        return $r0;
    }

    public final nu.xom.Elements getChildElements()
    {
        nu.xom.Element r1, r3;
        int $i0, i1;
        nu.xom.Elements $r0;
        nu.xom.Node $r2;
        boolean $z0;

        r1 := @this: nu.xom.Element;

        $r0 = new nu.xom.Elements;

        specialinvoke $r0.<nu.xom.Elements: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<nu.xom.Element: int getChildCount()>();

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r1.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r2.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label2;

        r3 = (nu.xom.Element) $r2;

        virtualinvoke $r0.<nu.xom.Elements: void add(nu.xom.Element)>(r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    public final nu.xom.Element getFirstChildElement(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element r0, $r2;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<nu.xom.Element: nu.xom.Element getFirstChildElement(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public final nu.xom.Element getFirstChildElement(java.lang.String, java.lang.String)
    {
        nu.xom.Element r0, r2;
        nu.xom.Node $r1;
        int $i0, i1;
        java.lang.String r3, $r4, r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: nu.xom.Element;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r1.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label2;

        r2 = (nu.xom.Element) $r1;

        $r4 = virtualinvoke r2.<nu.xom.Element: java.lang.String getLocalName()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r2.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    public void addAttribute(nu.xom.Attribute)
    {
        nu.xom.Attribute[] $r7, $r34;
        nu.xom.Namespaces $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.MultipleParentException $r33;
        nu.xom.Element r3;
        java.lang.StringBuffer $r17, $r18, $r19, $r20, $r25, $r26, $r28, $r29, $r31;
        int $i0;
        nu.xom.ParentNode $r1;
        java.lang.String $r2, $r4, $r5, $r8, $r9, $r10, $r13, $r14, $r15, $r21, $r22, $r23, $r27, $r30, $r32;
        nu.xom.Attribute r0, $r6;
        nu.xom.NamespaceConflictException $r16, $r24;

        r3 := @this: nu.xom.Element;

        r0 := @parameter0: nu.xom.Attribute;

        $r1 = virtualinvoke r0.<nu.xom.Attribute: nu.xom.ParentNode getParent()>();

        if $r1 == null goto label1;

        $r33 = new nu.xom.MultipleParentException;

        specialinvoke $r33.<nu.xom.MultipleParentException: void <init>(java.lang.String)>("Attribute already has a parent");

        throw $r33;

     label1:
        $r2 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        $r8 = "xml";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        $r9 = r3.<nu.xom.Element: java.lang.String prefix>;

        $r10 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        $r22 = virtualinvoke r3.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        $r23 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z3 != 0 goto label2;

        $r24 = new nu.xom.NamespaceConflictException;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Prefix of ");

        $r27 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with element prefix ");

        $r30 = r3.<nu.xom.Element: java.lang.String prefix>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r32);

        throw $r24;

     label2:
        $r11 = r3.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r11 == null goto label3;

        $r12 = r3.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r13 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $r14 = virtualinvoke $r12.<nu.xom.Namespaces: java.lang.String getURI(java.lang.String)>($r13);

        if $r14 == null goto label3;

        $r15 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label3;

        $r16 = new nu.xom.NamespaceConflictException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute prefix  ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with namespace declaration.");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label3:
        $r34 = r3.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r34 != null goto label4;

        $r7 = newarray (nu.xom.Attribute)[1];

        r3.<nu.xom.Element: nu.xom.Attribute[] attributes> = $r7;

     label4:
        specialinvoke r3.<nu.xom.Element: void checkPrefixConflict(nu.xom.Attribute)>(r0);

        $r4 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $r5 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $r6 = virtualinvoke r3.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>($r4, $r5);

        if $r6 == null goto label5;

        specialinvoke r3.<nu.xom.Element: boolean remove(nu.xom.Attribute)>($r6);

     label5:
        specialinvoke r3.<nu.xom.Element: void add(nu.xom.Attribute)>(r0);

        virtualinvoke r0.<nu.xom.Attribute: void setParent(nu.xom.ParentNode)>(r3);

        return;
    }

    private void add(nu.xom.Attribute)
    {
        nu.xom.Attribute[] $r1, $r3, $r4, r5, $r6;
        nu.xom.Element r0;
        nu.xom.Attribute r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: nu.xom.Element;

        r2 := @parameter0: nu.xom.Attribute;

        $i1 = r0.<nu.xom.Element: int numAttributes>;

        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r4 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i5 = lengthof $r4;

        $i6 = $i5 * 2;

        r5 = newarray (nu.xom.Attribute)[$i6];

        $r6 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i7 = r0.<nu.xom.Element: int numAttributes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r5, 0, $i7);

        r0.<nu.xom.Element: nu.xom.Attribute[] attributes> = r5;

     label1:
        $r3 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i2 = r0.<nu.xom.Element: int numAttributes>;

        $r3[$i2] = r2;

        $i3 = r0.<nu.xom.Element: int numAttributes>;

        $i4 = $i3 + 1;

        r0.<nu.xom.Element: int numAttributes> = $i4;

        return;
    }

    private boolean remove(nu.xom.Attribute)
    {
        nu.xom.Attribute[] $r1, $r2, $r3, $r4, $r5;
        nu.xom.Element r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i11, $i13;
        nu.xom.Attribute r6, $r7;

        r0 := @this: nu.xom.Element;

        r6 := @parameter0: nu.xom.Attribute;

        $i11 = (int) -1;

        i7 = $i11;

        i8 = 0;

     label1:
        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i0 = lengthof $r1;

        if i8 >= $i0 goto label3;

        $r5 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $r7 = $r5[i8];

        if $r7 != r6 goto label2;

        i7 = i8;

        goto label3;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        $i13 = (int) -1;

        if i7 != $i13 goto label4;

        return 0;

     label4:
        $i1 = r0.<nu.xom.Element: int numAttributes>;

        $i2 = $i1 - i7;

        i9 = $i2 - 1;

        if i9 <= 0 goto label5;

        $r4 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i6 = i7 + 1;

        $r3 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i6, $r3, i7, i9);

     label5:
        $i3 = r0.<nu.xom.Element: int numAttributes>;

        $i4 = $i3 - 1;

        r0.<nu.xom.Element: int numAttributes> = $i4;

        $r2 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $i5 = r0.<nu.xom.Element: int numAttributes>;

        $r2[$i5] = null;

        return 1;
    }

    void fastAddAttribute(nu.xom.Attribute)
    {
        nu.xom.Attribute r2;
        nu.xom.Attribute[] $r1, $r3;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r2 := @parameter0: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r1 != null goto label1;

        $r3 = newarray (nu.xom.Attribute)[1];

        r0.<nu.xom.Element: nu.xom.Attribute[] attributes> = $r3;

     label1:
        specialinvoke r0.<nu.xom.Element: void add(nu.xom.Attribute)>(r2);

        virtualinvoke r2.<nu.xom.Attribute: void setParent(nu.xom.ParentNode)>(r0);

        return;
    }

    public nu.xom.Attribute removeAttribute(nu.xom.Attribute)
    {
        nu.xom.Attribute[] $r1;
        nu.xom.Element r0;
        java.lang.NullPointerException $r10;
        java.lang.StringBuffer $r4, $r5, $r7, $r8, $r12, $r13, $r15, $r16;
        java.lang.String $r6, $r9, $r14, $r17;
        boolean $z0;
        nu.xom.Attribute r2;
        nu.xom.NoSuchAttributeException $r3, $r11;

        r0 := @this: nu.xom.Element;

        r2 := @parameter0: nu.xom.Attribute;

        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r1 != null goto label1;

        $r11 = new nu.xom.NoSuchAttributeException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tried to remove attribute ");

        $r14 = virtualinvoke r2.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from non-parent element");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<nu.xom.NoSuchAttributeException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        if r2 != null goto label2;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("Tried to remove null attribute");

        throw $r10;

     label2:
        $z0 = specialinvoke r0.<nu.xom.Element: boolean remove(nu.xom.Attribute)>(r2);

        if $z0 == 0 goto label3;

        virtualinvoke r2.<nu.xom.Attribute: void setParent(nu.xom.ParentNode)>(null);

        return r2;

     label3:
        $r3 = new nu.xom.NoSuchAttributeException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tried to remove attribute ");

        $r6 = virtualinvoke r2.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from non-parent element");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<nu.xom.NoSuchAttributeException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public final nu.xom.Attribute getAttribute(java.lang.String)
    {
        nu.xom.Attribute $r2;
        java.lang.String r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public final nu.xom.Attribute getAttribute(java.lang.String, java.lang.String)
    {
        nu.xom.Attribute[] $r1, $r2;
        nu.xom.Element r0;
        nu.xom.Attribute r3;
        int $i0, i1;
        java.lang.String $r4, r5, $r6, r7;
        boolean $z0, $z1;

        r0 := @this: nu.xom.Element;

        r5 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r1 != null goto label1;

        return null;

     label1:
        i1 = 0;

     label2:
        $i0 = r0.<nu.xom.Element: int numAttributes>;

        if i1 >= $i0 goto label4;

        $r2 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<nu.xom.Attribute: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r3.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

        return r3;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public final java.lang.String getAttributeValue(java.lang.String)
    {
        java.lang.String r1, $r2;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<nu.xom.Element: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(r1, "");

        return $r2;
    }

    public final int getAttributeCount()
    {
        int $i0;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        $i0 = r0.<nu.xom.Element: int numAttributes>;

        return $i0;
    }

    public final nu.xom.Attribute getAttribute(int)
    {
        nu.xom.Attribute $r3;
        java.lang.IndexOutOfBoundsException $r4;
        nu.xom.Attribute[] $r1, $r2;
        nu.xom.Element r0;
        int i0;

        r0 := @this: nu.xom.Element;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r1 != null goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Element does not have any attributes");

        throw $r4;

     label1:
        $r2 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        $r3 = $r2[i0];

        return $r3;
    }

    public final java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        nu.xom.Attribute $r3;
        nu.xom.Element r0;
        java.lang.String r1, r2, $r4;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<nu.xom.Attribute: java.lang.String getValue()>();

        return $r4;
    }

    public final java.lang.String getLocalName()
    {
        java.lang.String $r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        $r1 = r0.<nu.xom.Element: java.lang.String localName>;

        return $r1;
    }

    public final java.lang.String getQualifiedName()
    {
        nu.xom.Element r0;
        java.lang.StringBuffer $r2, $r4, $r5, $r7;
        int $i0;
        java.lang.String $r1, $r3, $r6, $r8, $r9;

        r0 := @this: nu.xom.Element;

        $r1 = r0.<nu.xom.Element: java.lang.String prefix>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r9 = r0.<nu.xom.Element: java.lang.String localName>;

        return $r9;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<nu.xom.Element: java.lang.String prefix>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = r0.<nu.xom.Element: java.lang.String localName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public final java.lang.String getNamespacePrefix()
    {
        java.lang.String $r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        $r1 = r0.<nu.xom.Element: java.lang.String prefix>;

        return $r1;
    }

    public final java.lang.String getNamespaceURI()
    {
        java.lang.String $r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        $r1 = r0.<nu.xom.Element: java.lang.String URI>;

        return $r1;
    }

    public final java.lang.String getNamespaceURI(java.lang.String)
    {
        nu.xom.Element r0, r4;
        java.lang.String r1, $r2, r5;
        nu.xom.ParentNode $r3;
        boolean $z0, $z1;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        r4 = r0;

        r5 = virtualinvoke r0.<nu.xom.Element: java.lang.String getLocalNamespaceURI(java.lang.String)>(r1);

     label1:
        if r5 != null goto label3;

        $r3 = virtualinvoke r4.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<nu.xom.ParentNode: boolean isDocument()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        r4 = (nu.xom.Element) $r3;

        r5 = virtualinvoke r4.<nu.xom.Element: java.lang.String getLocalNamespaceURI(java.lang.String)>(r1);

        goto label1;

     label3:
        if r5 != null goto label4;

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        r5 = "";

     label4:
        return r5;
    }

    final java.lang.String getLocalNamespaceURI(java.lang.String)
    {
        nu.xom.Attribute[] $r6, $r7;
        nu.xom.Element r1;
        nu.xom.Namespaces $r5, $r11;
        int $i0, $i1, i2;
        java.lang.String r0, $r2, $r3, $r4, $r9, $r10, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.Attribute r8;

        r1 := @this: nu.xom.Element;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<nu.xom.Element: java.lang.String prefix>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r13 = r1.<nu.xom.Element: java.lang.String URI>;

        return $r13;

     label1:
        $r3 = "xml";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return "http://www.w3.org/XML/1998/namespace";

     label2:
        $r4 = "xmlns";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        return "";

     label3:
        $r5 = r1.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r5 == null goto label4;

        $r11 = r1.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r12 = virtualinvoke $r11.<nu.xom.Namespaces: java.lang.String getURI(java.lang.String)>(r0);

        if $r12 == null goto label4;

        return $r12;

     label4:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label7;

        $r6 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r6 == null goto label7;

        i2 = 0;

     label5:
        $i1 = r1.<nu.xom.Element: int numAttributes>;

        if i2 >= $i1 goto label7;

        $r7 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r8 = $r7[i2];

        $r9 = virtualinvoke r8.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label6;

        $r10 = virtualinvoke r8.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        return $r10;

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        return null;
    }

    public void setLocalName(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Element: void _setLocalName(java.lang.String)>(r1);

        return;
    }

    private void _setLocalName(java.lang.String)
    {
        java.lang.String r0;
        nu.xom.Element r1;

        r1 := @this: nu.xom.Element;

        r0 := @parameter0: java.lang.String;

        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>(r0);

        r1.<nu.xom.Element: java.lang.String localName> = r0;

        return;
    }

    public void setNamespaceURI(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Element: void _setNamespaceURI(java.lang.String)>(r1);

        return;
    }

    private void _setNamespaceURI(java.lang.String)
    {
        nu.xom.Attribute[] $r21, $r22;
        nu.xom.Namespaces $r2, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        nu.xom.Element r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r15, $r16, $r18, $r19, $r28, $r29, $r30, $r31, $r33;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r1, $r3, $r4, $r5, $r11, $r12, $r13, $r17, $r20, $r24, $r25, $r26, $r32, $r34, $r35, $r37, $r39, r41, $r42;
        nu.xom.Attribute r23;
        nu.xom.NamespaceConflictException $r6, $r14, $r27, $r38, $r40;

        r0 := @this: nu.xom.Element;

        r41 := @parameter0: java.lang.String;

        if r41 != null goto label01;

        r41 = "";

     label01:
        $r1 = r0.<nu.xom.Element: java.lang.String URI>;

        $z0 = virtualinvoke r41.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label02;

        return;

     label02:
        $i0 = virtualinvoke r41.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        $r39 = r0.<nu.xom.Element: java.lang.String prefix>;

        $i4 = virtualinvoke $r39.<java.lang.String: int length()>();

        if $i4 == 0 goto label04;

        $r40 = new nu.xom.NamespaceConflictException;

        specialinvoke $r40.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>("Prefixed elements must have namespace URIs.");

        throw $r40;

     label03:
        staticinvoke <nu.xom.Verifier: void checkAbsoluteURIReference(java.lang.String)>(r41);

     label04:
        $r2 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r2 == null goto label05;

        $r36 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r35 = r0.<nu.xom.Element: java.lang.String prefix>;

        $r37 = virtualinvoke $r36.<nu.xom.Namespaces: java.lang.String getURI(java.lang.String)>($r35);

        if $r37 == null goto label05;

        $r38 = new nu.xom.NamespaceConflictException;

        specialinvoke $r38.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>("new URI conflicts with existing prefix");

        throw $r38;

     label05:
        $i1 = virtualinvoke r41.<java.lang.String: int length()>();

        if $i1 <= 0 goto label09;

        $r21 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r21 == null goto label09;

        i5 = 0;

     label06:
        $i2 = r0.<nu.xom.Element: int numAttributes>;

        if i5 >= $i2 goto label09;

        $r22 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r23 = $r22[i5];

        $r24 = virtualinvoke r23.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $i3 = virtualinvoke $r24.<java.lang.String: int length()>();

        if $i3 != 0 goto label07;

        goto label08;

     label07:
        $r25 = virtualinvoke r23.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $r26 = r0.<nu.xom.Element: java.lang.String prefix>;

        $z4 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z4 == 0 goto label08;

        $r27 = new nu.xom.NamespaceConflictException;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("new element URI ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r41);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with attribute ");

        $r32 = virtualinvoke r23.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r34);

        throw $r27;

     label08:
        i5 = i5 + 1;

        goto label06;

     label09:
        $r42 = "http://www.w3.org/XML/1998/namespace";

        $z5 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r41);

        if $z5 == 0 goto label10;

        $r13 = "xml";

        $r12 = r0.<nu.xom.Element: java.lang.String prefix>;

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 != 0 goto label10;

        $r14 = new nu.xom.NamespaceConflictException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong prefix ");

        $r17 = r0.<nu.xom.Element: java.lang.String prefix>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for the http://www.w3.org/XML/1998/namespace namespace URI");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label10:
        $r4 = "xml";

        $r3 = r0.<nu.xom.Element: java.lang.String prefix>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label11;

        $r5 = "http://www.w3.org/XML/1998/namespace";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r41);

        if $z2 != 0 goto label11;

        $r6 = new nu.xom.NamespaceConflictException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong namespace URI ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r41);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for the xml prefix");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label11:
        r0.<nu.xom.Element: java.lang.String URI> = r41;

        return;
    }

    public void setNamespacePrefix(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<nu.xom.Element: void _setNamespacePrefix(java.lang.String)>(r1);

        return;
    }

    private void _setNamespacePrefix(java.lang.String)
    {
        nu.xom.Element r0;
        java.lang.StringBuffer $r9, $r10, $r11;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4, $r6, $r7, $r12, r13;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.NamespaceConflictException $r5, $r8;

        r0 := @this: nu.xom.Element;

        r13 := @parameter0: java.lang.String;

        if r13 != null goto label1;

        r13 = "";

     label1:
        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>(r13);

     label2:
        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getLocalNamespaceURI(java.lang.String)>(r13);

        if $r1 == null goto label3;

        $r6 = r0.<nu.xom.Element: java.lang.String URI>;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 != 0 goto label4;

        $r7 = "xml";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z3 != 0 goto label4;

        $r8 = new nu.xom.NamespaceConflictException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with existing prefix");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $r3 = "";

        $r2 = r0.<nu.xom.Element: java.lang.String URI>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label4;

        $r4 = "";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 != 0 goto label4;

        $r5 = new nu.xom.NamespaceConflictException;

        specialinvoke $r5.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>("Cannot assign prefix to element in no namespace");

        throw $r5;

     label4:
        r0.<nu.xom.Element: java.lang.String prefix> = r13;

        return;
    }

    void insertionAllowed(nu.xom.Node, int)
    {
        nu.xom.Element r10;
        java.lang.NullPointerException $r17;
        java.lang.StringBuffer $r3, $r4, $r7, $r8, $r12, $r14, $r15;
        int i0;
        nu.xom.IllegalAddException $r2;
        nu.xom.ParentNode $r1;
        java.lang.String $r6, $r9, $r13, $r16;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.Node r0;
        nu.xom.MultipleParentException $r11;
        java.lang.Class $r5;

        r10 := @this: nu.xom.Element;

        r0 := @parameter0: nu.xom.Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("Tried to insert a null child in the tree");

        throw $r17;

     label1:
        $r1 = virtualinvoke r0.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        if $r1 == null goto label2;

        $r11 = new nu.xom.MultipleParentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" child already has a parent.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<nu.xom.MultipleParentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label2:
        $z0 = virtualinvoke r0.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label3;

        staticinvoke <nu.xom.Element: void checkCycle(nu.xom.Node,nu.xom.ParentNode)>(r0, r10);

        return;

     label3:
        $z1 = virtualinvoke r0.<nu.xom.Node: boolean isText()>();

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r0.<nu.xom.Node: boolean isProcessingInstruction()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r0.<nu.xom.Node: boolean isComment()>();

        if $z3 == 0 goto label5;

     label4:
        return;

     label5:
        $r2 = new nu.xom.IllegalAddException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot add a ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to an Element.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<nu.xom.IllegalAddException: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    private static void checkCycle(nu.xom.Node, nu.xom.ParentNode)
    {
        int $i0;
        nu.xom.ParentNode $r1, r4;
        nu.xom.CycleException $r2, $r3;
        nu.xom.Node r0;

        r0 := @parameter0: nu.xom.Node;

        r4 := @parameter1: nu.xom.ParentNode;

        if r0 != r4 goto label1;

        $r3 = new nu.xom.CycleException;

        specialinvoke $r3.<nu.xom.CycleException: void <init>(java.lang.String)>("Cannot add a node to itself");

        throw $r3;

     label1:
        $i0 = virtualinvoke r0.<nu.xom.Node: int getChildCount()>();

        if $i0 != 0 goto label2;

        return;

     label2:
        $r1 = virtualinvoke r4.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        r4 = $r1;

        if $r1 == null goto label3;

        if $r1 != r0 goto label2;

        $r2 = new nu.xom.CycleException;

        specialinvoke $r2.<nu.xom.CycleException: void <init>(java.lang.String)>("Cannot add an ancestor as a child");

        throw $r2;

     label3:
        return;
    }

    public void insertChild(java.lang.String, int)
    {
        nu.xom.Element r1;
        int i0;
        java.lang.String r0;
        nu.xom.Text $r2;
        java.lang.NullPointerException $r3;

        r1 := @this: nu.xom.Element;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Inserted null string");

        throw $r3;

     label1:
        $r2 = new nu.xom.Text;

        specialinvoke $r2.<nu.xom.Text: void <init>(java.lang.String)>(r0);

        specialinvoke r1.<nu.xom.ParentNode: void fastInsertChild(nu.xom.Node,int)>($r2, i0);

        return;
    }

    public void appendChild(java.lang.String)
    {
        nu.xom.Element r0;
        int $i0;
        java.lang.String r2;
        nu.xom.Text $r1;

        r0 := @this: nu.xom.Element;

        r2 := @parameter0: java.lang.String;

        $r1 = new nu.xom.Text;

        specialinvoke $r1.<nu.xom.Text: void <init>(java.lang.String)>(r2);

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        virtualinvoke r0.<nu.xom.Element: void insertChild(nu.xom.Node,int)>($r1, $i0);

        return;
    }

    public nu.xom.Nodes removeChildren()
    {
        nu.xom.Element r0, $r3;
        int $i0, i1;
        nu.xom.Nodes $r1;
        nu.xom.Node $r2;
        boolean $z0;

        r0 := @this: nu.xom.Element;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        $r1 = new nu.xom.Nodes;

        specialinvoke $r1.<nu.xom.Nodes: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(i1);

        $z0 = virtualinvoke $r2.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label2;

        $r3 = (nu.xom.Element) $r2;

        virtualinvoke r0.<nu.xom.Element: void fillInBaseURI(nu.xom.Element)>($r3);

     label2:
        virtualinvoke $r2.<nu.xom.Node: void setParent(nu.xom.ParentNode)>(null);

        virtualinvoke $r1.<nu.xom.Nodes: void append(nu.xom.Node)>($r2);

        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<nu.xom.Element: nu.xom.Node[] children> = null;

        r0.<nu.xom.Element: int childCount> = 0;

        return $r1;
    }

    public void addNamespaceDeclaration(java.lang.String, java.lang.String)
    {
        nu.xom.Namespaces $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        nu.xom.Element r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r23, $r24, $r25;
        int $i0, $i1;
        java.lang.String $r21, $r26, r28, r29, $r30, r31;
        nu.xom.NamespaceConflictException $r11, $r17, $r22, $r27;

        r0 := @this: nu.xom.Element;

        r28 := @parameter0: java.lang.String;

        r29 := @parameter1: java.lang.String;

        if r28 != null goto label01;

        r28 = "";

     label01:
        if r29 != null goto label02;

        r29 = "";

     label02:
        $z0 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z0 == 0 goto label04;

        $z6 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 == 0 goto label03;

        return;

     label03:
        $r27 = new nu.xom.NamespaceConflictException;

        specialinvoke $r27.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>("The xmlns prefix cannot bound to any URI");

        throw $r27;

     label04:
        $z1 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z1 == 0 goto label06;

        $z5 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z5 == 0 goto label05;

        return;

     label05:
        $r22 = new nu.xom.NamespaceConflictException;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong namespace URI for xml prefix: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label06:
        $z2 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/1998/namespace");

        if $z2 == 0 goto label07;

        $r17 = new nu.xom.NamespaceConflictException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong prefix for http://www.w3.org/XML/1998/namespace namespace: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r28);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label07:
        $i0 = virtualinvoke r28.<java.lang.String: int length()>();

        if $i0 == 0 goto label08;

        staticinvoke <nu.xom.Verifier: void checkNCName(java.lang.String)>(r28);

        staticinvoke <nu.xom.Verifier: void checkAbsoluteURIReference(java.lang.String)>(r29);

        goto label09;

     label08:
        $i1 = virtualinvoke r29.<java.lang.String: int length()>();

        if $i1 == 0 goto label09;

        staticinvoke <nu.xom.Verifier: void checkAbsoluteURIReference(java.lang.String)>(r29);

     label09:
        $r30 = virtualinvoke r0.<nu.xom.Element: java.lang.String getLocalNamespaceURI(java.lang.String)>(r28);

        if $r30 == null goto label12;

        $z3 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r29);

        if $z3 != 0 goto label12;

        $z4 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 == 0 goto label10;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Additional namespace ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with existing default namespace ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        r31 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label11;

     label10:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Additional namespace ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r29);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for the prefix ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r28);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with existing namespace binding ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        r31 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label11:
        $r11 = new nu.xom.NamespaceConflictException;

        specialinvoke $r11.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>(r31);

        throw $r11;

     label12:
        $r1 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r1 != null goto label13;

        $r3 = new nu.xom.Namespaces;

        specialinvoke $r3.<nu.xom.Namespaces: void <init>()>();

        r0.<nu.xom.Element: nu.xom.Namespaces namespaces> = $r3;

     label13:
        $r2 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        virtualinvoke $r2.<nu.xom.Namespaces: void put(java.lang.String,java.lang.String)>(r28, r29);

        return;
    }

    public void removeNamespaceDeclaration(java.lang.String)
    {
        nu.xom.Element r0;
        nu.xom.Namespaces $r1, $r3;
        java.lang.String r2;

        r0 := @this: nu.xom.Element;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r1 == null goto label1;

        $r3 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        virtualinvoke $r3.<nu.xom.Namespaces: void remove(java.lang.String)>(r2);

     label1:
        return;
    }

    public final int getNamespaceDeclarationCount()
    {
        nu.xom.Attribute[] $r4;
        nu.xom.Element r0;
        java.util.ArrayList $r13;
        java.util.HashSet $r8, $r10, $r11, r15;
        nu.xom.Namespaces $r1, $r12;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r3, $r6, $r7, $r9, $r14;
        boolean $z0, $z1;
        nu.xom.Attribute r5;

        r0 := @this: nu.xom.Element;

        r15 = null;

        $r1 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r1 == null goto label1;

        $r11 = new java.util.HashSet;

        $r12 = r0.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r13 = virtualinvoke $r12.<nu.xom.Namespaces: java.util.ArrayList getPrefixes()>();

        specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>($r13);

        r15 = $r11;

        $r14 = r0.<nu.xom.Element: java.lang.String prefix>;

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>($r14);

     label1:
        $r3 = "xml";

        $r2 = r0.<nu.xom.Element: java.lang.String prefix>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r15 = $r10;

     label2:
        $i0 = virtualinvoke r0.<nu.xom.Element: int getAttributeCount()>();

        i3 = 0;

     label3:
        if i3 >= $i0 goto label6;

        $r4 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r5 = $r4[i3];

        $r6 = virtualinvoke r5.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 == 0 goto label5;

        $r7 = "xml";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label5;

        if r15 != null goto label4;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r15 = $r8;

        $r9 = r0.<nu.xom.Element: java.lang.String prefix>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label4:
        interfaceinvoke r15.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        if r15 != null goto label7;

        return 1;

     label7:
        $i1 = interfaceinvoke r15.<java.util.Set: int size()>();

        return $i1;
    }

    java.util.Map getNamespacePrefixesInScope()
    {
        nu.xom.Attribute[] $r4, $r10;
        nu.xom.Element r1, r14;
        java.util.HashMap $r0;
        nu.xom.Namespaces $r5, $r7, $r8;
        int $i0, $i1, i2, i3, i4;
        java.lang.String $r2, $r3, $r9, $r11, $r12, $r13;
        nu.xom.ParentNode $r6;
        boolean $z0, $z1, $z2, $z3;
        nu.xom.Attribute r15;

        r1 := @this: nu.xom.Element;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        r14 = r1;

     label1:
        $r3 = "xml";

        $r2 = r14.<nu.xom.Element: java.lang.String prefix>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r13 = r14.<nu.xom.Element: java.lang.String prefix>;

        specialinvoke r1.<nu.xom.Element: void addPrefixIfNotAlreadyPresent(java.util.HashMap,nu.xom.Element,java.lang.String)>($r0, r14, $r13);

     label2:
        $r4 = r14.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r4 == null goto label5;

        i2 = r14.<nu.xom.Element: int numAttributes>;

        i3 = 0;

     label3:
        if i3 >= i2 goto label5;

        $r10 = r14.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r15 = $r10[i3];

        $r11 = virtualinvoke r15.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i1 == 0 goto label4;

        $r12 = "xml";

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label4;

        specialinvoke r1.<nu.xom.Element: void addPrefixIfNotAlreadyPresent(java.util.HashMap,nu.xom.Element,java.lang.String)>($r0, r14, $r11);

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $r5 = r14.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r5 == null goto label7;

        $r7 = r14.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $i0 = virtualinvoke $r7.<nu.xom.Namespaces: int size()>();

        i4 = 0;

     label6:
        if i4 >= $i0 goto label7;

        $r8 = r14.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r9 = virtualinvoke $r8.<nu.xom.Namespaces: java.lang.String getPrefix(int)>(i4);

        specialinvoke r1.<nu.xom.Element: void addPrefixIfNotAlreadyPresent(java.util.HashMap,nu.xom.Element,java.lang.String)>($r0, r14, $r9);

        i4 = i4 + 1;

        goto label6;

     label7:
        $r6 = virtualinvoke r14.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        if $r6 == null goto label9;

        $z1 = virtualinvoke $r6.<nu.xom.ParentNode: boolean isDocument()>();

        if $z1 != 0 goto label9;

        $z2 = virtualinvoke $r6.<nu.xom.ParentNode: boolean isDocumentFragment()>();

        if $z2 == 0 goto label8;

        goto label9;

     label8:
        r14 = (nu.xom.Element) $r6;

        goto label1;

     label9:
        return $r0;
    }

    private void addPrefixIfNotAlreadyPresent(java.util.HashMap, nu.xom.Element, java.lang.String)
    {
        nu.xom.Element r2, r4;
        java.util.HashMap r0;
        java.lang.String r1, $r3;
        boolean $z0;

        r4 := @this: nu.xom.Element;

        r0 := @parameter0: java.util.HashMap;

        r2 := @parameter1: nu.xom.Element;

        r1 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<nu.xom.Element: java.lang.String getLocalNamespaceURI(java.lang.String)>(r1);

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return;
    }

    public final java.lang.String getNamespacePrefix(int)
    {
        java.lang.IndexOutOfBoundsException $r8, $r14;
        nu.xom.Element r0;
        java.lang.StringBuffer $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        int i0, i1;
        java.lang.String $r4, $r5, $r6, $r7, $r12, $r19;
        java.util.NoSuchElementException $r13;
        boolean $z0;
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.lang.Object $r3;

        r0 := @this: nu.xom.Element;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Negative prefix number ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        if i0 != 0 goto label2;

        $r6 = "xml";

        $r5 = r0.<nu.xom.Element: java.lang.String prefix>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r7 = r0.<nu.xom.Element: java.lang.String prefix>;

        return $r7;

     label2:
        $r1 = specialinvoke r0.<nu.xom.Element: java.util.Set getNamespacePrefixes()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        i1 = i1 + 1;

        goto label4;

     label5:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.String) $r3;

     label6:
        return $r4;

     label7:
        $r13 := @caughtexception;

        $r14 = new java.lang.IndexOutOfBoundsException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("th namespace");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r19);

        throw $r14;

        catch java.util.NoSuchElementException from label3 to label6 with label7;
    }

    private java.util.Set getNamespacePrefixes()
    {
        nu.xom.Attribute[] $r5, $r6;
        nu.xom.Element r1;
        java.util.ArrayList $r11;
        nu.xom.Namespaces $r4, $r10;
        int $i0, $i1, i2;
        java.lang.String $r2, $r3, $r8, $r9, $r12;
        java.util.LinkedHashSet $r0;
        boolean $z0, $z1;
        nu.xom.Attribute r7;

        r1 := @this: nu.xom.Element;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r3 = "xml";

        $r2 = r1.<nu.xom.Element: java.lang.String prefix>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r12 = r1.<nu.xom.Element: java.lang.String prefix>;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label1:
        $r4 = r1.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        if $r4 == null goto label2;

        $r10 = r1.<nu.xom.Element: nu.xom.Namespaces namespaces>;

        $r11 = virtualinvoke $r10.<nu.xom.Namespaces: java.util.ArrayList getPrefixes()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

     label2:
        $r5 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r5 == null goto label5;

        $i0 = virtualinvoke r1.<nu.xom.Element: int getAttributeCount()>();

        i2 = 0;

     label3:
        if i2 >= $i0 goto label5;

        $r6 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r7 = $r6[i2];

        $r8 = virtualinvoke r7.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 == 0 goto label4;

        $r9 = "xml";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return $r0;
    }

    public void setBaseURI(java.lang.String)
    {
        java.lang.String r1;
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<nu.xom.Element: void setActualBaseURI(java.lang.String)>(r1);

        return;
    }

    public java.lang.String getBaseURI()
    {
        nu.xom.Element r0, $r3;
        int $i0;
        java.lang.String $r1, $r2, $r5, $r6, $r7, $r8, r9;
        nu.xom.ParentNode r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        nu.xom.Attribute $r4;

        r0 := @this: nu.xom.Element;

        r9 = "";

        $r1 = virtualinvoke r0.<nu.xom.Element: java.lang.String getActualBaseURI()>();

        r10 = r0;

     label01:
        $r2 = virtualinvoke r10.<nu.xom.ParentNode: java.lang.String getActualBaseURI()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label02;

        $z6 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z6 != 0 goto label02;

        r9 = staticinvoke <nu.xom.URIUtil: java.lang.String absolutize(java.lang.String,java.lang.String)>($r1, r9);

        goto label10;

     label02:
        $z0 = virtualinvoke r10.<nu.xom.ParentNode: boolean isDocument()>();

        if $z0 == 0 goto label03;

        r9 = staticinvoke <nu.xom.URIUtil: java.lang.String absolutize(java.lang.String,java.lang.String)>($r2, r9);

        goto label10;

     label03:
        $r3 = (nu.xom.Element) r10;

        $r4 = virtualinvoke $r3.<nu.xom.Element: nu.xom.Attribute getAttribute(java.lang.String,java.lang.String)>("base", "http://www.w3.org/XML/1998/namespace");

        if $r4 == null goto label08;

        $r5 = virtualinvoke $r4.<nu.xom.Attribute: java.lang.String getValue()>();

        $r6 = staticinvoke <nu.xom.URIUtil: java.lang.String toURI(java.lang.String)>($r5);

        $r7 = "";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label04;

        r9 = specialinvoke r0.<nu.xom.Element: java.lang.String getEntityURI()>();

        goto label10;

     label04:
        $z2 = specialinvoke r0.<nu.xom.Element: boolean legalURI(java.lang.String)>($r6);

        if $z2 == 0 goto label08;

        $r8 = "";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z3 == 0 goto label05;

        r9 = $r6;

        goto label07;

     label05:
        $z4 = staticinvoke <nu.xom.URIUtil: boolean isOpaque(java.lang.String)>($r6);

        if $z4 == 0 goto label06;

        goto label10;

     label06:
        r9 = staticinvoke <nu.xom.URIUtil: java.lang.String absolutize(java.lang.String,java.lang.String)>($r6, r9);

     label07:
        $z5 = staticinvoke <nu.xom.URIUtil: boolean isAbsolute(java.lang.String)>($r6);

        if $z5 == 0 goto label08;

        goto label10;

     label08:
        $r11 = virtualinvoke r10.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        r10 = $r11;

        if $r11 != null goto label09;

        r9 = staticinvoke <nu.xom.URIUtil: java.lang.String absolutize(java.lang.String,java.lang.String)>($r2, r9);

        goto label10;

     label09:
        goto label01;

     label10:
        $z7 = staticinvoke <nu.xom.URIUtil: boolean isAbsolute(java.lang.String)>(r9);

        if $z7 == 0 goto label11;

        return r9;

     label11:
        return "";
    }

    private java.lang.String getEntityURI()
    {
        nu.xom.Element r0;
        int $i0;
        java.lang.String $r1, $r2, $r3;
        nu.xom.ParentNode r4;

        r0 := @this: nu.xom.Element;

        r4 = r0;

     label1:
        if r4 == null goto label3;

        $r1 = r4.<nu.xom.ParentNode: java.lang.String actualBaseURI>;

        if $r1 == null goto label2;

        $r2 = r4.<nu.xom.ParentNode: java.lang.String actualBaseURI>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r3 = r4.<nu.xom.ParentNode: java.lang.String actualBaseURI>;

        return $r3;

     label2:
        r4 = virtualinvoke r4.<nu.xom.ParentNode: nu.xom.ParentNode getParent()>();

        goto label1;

     label3:
        return "";
    }

    private boolean legalURI(java.lang.String)
    {
        nu.xom.MalformedURIException $r1;
        java.lang.String r0;
        nu.xom.Element r2;

        r2 := @this: nu.xom.Element;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <nu.xom.Verifier: void checkURIReference(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch nu.xom.MalformedURIException from label1 to label2 with label3;
    }

    public final java.lang.String toXML()
    {
        nu.xom.Element r1, $r3, $r5, $r6;
        int[] $r7, r9;
        java.lang.StringBuffer $r11;
        int $i0, i1, i2, $i3, $i4, $i6, $i8, $i10;
        java.lang.String $r2, $r4;
        nu.xom.ParentNode $r10;
        boolean $z0, z1, z2, z3;
        nu.xom.Node r8;

        r1 := @this: nu.xom.Element;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(int)>(1024);

        r8 = r1;

        z1 = 0;

        z3 = 0;

        z2 = 0;

        $i6 = (int) -1;

        i1 = $i6;

        r9 = newarray (int)[10];

        i2 = 0;

        $i8 = (int) -1;

        r9[0] = $i8;

     label1:
        if z3 != 0 goto label2;

        $i0 = virtualinvoke r8.<nu.xom.Node: int getChildCount()>();

        if $i0 <= 0 goto label2;

        $r6 = (nu.xom.Element) r8;

        staticinvoke <nu.xom.Element: void writeStartTag(nu.xom.Element,java.lang.StringBuffer)>($r6, $r11);

        r8 = virtualinvoke r8.<nu.xom.Node: nu.xom.Node getChild(int)>(0);

        i1 = 0;

        i2 = i2 + 1;

        $r7 = staticinvoke <nu.xom.Element: int[] grow(int[],int)>(r9, i2);

        r9 = $r7;

        $r7[i2] = 0;

        goto label1;

     label2:
        if z2 == 0 goto label3;

        $r5 = (nu.xom.Element) r8;

        staticinvoke <nu.xom.Element: void writeEndTag(nu.xom.Element,java.lang.StringBuffer)>($r5, $r11);

        if r8 != r1 goto label5;

        goto label9;

     label3:
        $z0 = virtualinvoke r8.<nu.xom.Node: boolean isElement()>();

        if $z0 == 0 goto label4;

        $r3 = (nu.xom.Element) r8;

        staticinvoke <nu.xom.Element: void writeStartTag(nu.xom.Element,java.lang.StringBuffer)>($r3, $r11);

        if r8 != r1 goto label5;

        goto label9;

     label4:
        $r2 = virtualinvoke r8.<nu.xom.Node: java.lang.String toXML()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label5:
        z1 = 0;

        z3 = 0;

        z2 = 0;

        $r10 = virtualinvoke r8.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        $i3 = virtualinvoke $r10.<nu.xom.ParentNode: int getChildCount()>();

        $i4 = $i3 - 1;

        if $i4 != i1 goto label7;

        r8 = $r10;

        $i10 = (int) -1;

        i2 = i2 + $i10;

        if $r10 == r1 goto label6;

        i1 = r9[i2];

     label6:
        z1 = 1;

        z3 = 1;

        z2 = 1;

        goto label8;

     label7:
        i1 = i1 + 1;

        r9[i2] = i1;

        r8 = virtualinvoke $r10.<nu.xom.ParentNode: nu.xom.Node getChild(int)>(i1);

     label8:
        goto label1;

     label9:
        $r4 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private static void writeStartTag(nu.xom.Element, java.lang.StringBuffer)
    {
        nu.xom.Attribute[] $r4, $r5;
        nu.xom.Element r1, r10;
        java.lang.StringBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r2, $r6, $r7, $r8, $r9, $r11;
        nu.xom.ParentNode $r3;
        boolean $z0, $z1;
        nu.xom.Attribute r12;

        r1 := @parameter0: nu.xom.Element;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        $r2 = virtualinvoke r1.<nu.xom.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r3 = virtualinvoke r1.<nu.xom.Element: nu.xom.ParentNode getParent()>();

        i5 = 0;

     label01:
        $i0 = virtualinvoke r1.<nu.xom.Element: int getNamespaceDeclarationCount()>();

        if i5 >= $i0 goto label07;

        $r7 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespacePrefix(int)>(i5);

        $r8 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r7);

        if $r3 == null goto label03;

        $z0 = virtualinvoke $r3.<nu.xom.ParentNode: boolean isElement()>();

        if $z0 == 0 goto label03;

        r10 = (nu.xom.Element) $r3;

        $r11 = virtualinvoke r10.<nu.xom.Element: java.lang.String getNamespaceURI(java.lang.String)>($r7);

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label02;

        goto label06;

     label02:
        goto label04;

     label03:
        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i3 != 0 goto label04;

        goto label06;

     label04:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" xmlns");

        $i4 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i4 <= 0 goto label05;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label05:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r9 = staticinvoke <nu.xom.Element: java.lang.String escape(java.lang.String)>($r8);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

     label06:
        i5 = i5 + 1;

        goto label01;

     label07:
        $r4 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        if $r4 == null goto label09;

        i6 = 0;

     label08:
        $i2 = r1.<nu.xom.Element: int numAttributes>;

        if i6 >= $i2 goto label09;

        $r5 = r1.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r12 = $r5[i6];

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r6 = virtualinvoke r12.<nu.xom.Attribute: java.lang.String toXML()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        i6 = i6 + 1;

        goto label08;

     label09:
        $i1 = virtualinvoke r1.<nu.xom.Element: int getChildCount()>();

        if $i1 <= 0 goto label10;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        goto label11;

     label10:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" />");

     label11:
        return;
    }

    private static java.lang.String escape(java.lang.String)
    {
        char $c2;
        java.lang.StringBuffer $r3;
        int $i0, $i1, i3, $i4;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = new java.lang.StringBuffer;

        $i1 = $i0 + 12;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i1);

        i3 = 0;

     label1:
        if i3 >= $i0 goto label4;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 != 38 goto label2;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label3;

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    private static void writeEndTag(nu.xom.Element, java.lang.StringBuffer)
    {
        java.lang.String $r2;
        java.lang.StringBuffer r0;
        nu.xom.Element r1;

        r1 := @parameter0: nu.xom.Element;

        r0 := @parameter1: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</");

        $r2 = virtualinvoke r1.<nu.xom.Element: java.lang.String getQualifiedName()>();

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        return;
    }

    public final java.lang.String getValue()
    {
        nu.xom.Element r0;
        int[] $r6, $r7, r10;
        java.lang.StringBuffer $r11;
        int $i0, $i1, $i2, $i3, i4, i5, $i7;
        nu.xom.ParentNode $r3;
        java.lang.String $r4, $r5, $r8;
        boolean $z0, $z1, z2;
        nu.xom.Node $r1, r9;

        r0 := @this: nu.xom.Element;

        $i0 = virtualinvoke r0.<nu.xom.Element: int getChildCount()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<nu.xom.Element: nu.xom.Node getChild(int)>(0);

        r9 = $r1;

        if $i0 != 1 goto label2;

        $z1 = virtualinvoke $r1.<nu.xom.Node: boolean isText()>();

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke $r1.<nu.xom.Node: java.lang.String getValue()>();

        return $r8;

     label2:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        i4 = 0;

        $r7 = newarray (int)[10];

        r10 = $r7;

        i5 = 0;

        $r7[0] = 0;

        z2 = 0;

     label3:
        if z2 != 0 goto label4;

        $i3 = virtualinvoke r9.<nu.xom.Node: int getChildCount()>();

        if $i3 <= 0 goto label4;

        r9 = virtualinvoke r9.<nu.xom.Node: nu.xom.Node getChild(int)>(0);

        i4 = 0;

        i5 = i5 + 1;

        $r6 = staticinvoke <nu.xom.Element: int[] grow(int[],int)>(r10, i5);

        r10 = $r6;

        $r6[i5] = 0;

        goto label3;

     label4:
        z2 = 0;

        $z0 = virtualinvoke r9.<nu.xom.Node: boolean isText()>();

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r9.<nu.xom.Node: java.lang.String getValue()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label5:
        $r3 = virtualinvoke r9.<nu.xom.Node: nu.xom.ParentNode getParent()>();

        $i1 = virtualinvoke $r3.<nu.xom.ParentNode: int getChildCount()>();

        $i2 = $i1 - 1;

        if $i2 != i4 goto label7;

        r9 = $r3;

        $i7 = (int) -1;

        i5 = i5 + $i7;

        if $r3 != r0 goto label6;

        goto label9;

     label6:
        i4 = r10[i5];

        z2 = 1;

        goto label8;

     label7:
        i4 = i4 + 1;

        r10[i5] = i4;

        r9 = virtualinvoke $r3.<nu.xom.ParentNode: nu.xom.Node getChild(int)>(i4);

     label8:
        goto label3;

     label9:
        $r4 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public nu.xom.Node copy()
    {
        nu.xom.Element r0, $r1;

        r0 := @this: nu.xom.Element;

        $r1 = staticinvoke <nu.xom.Element: nu.xom.Element copyTag(nu.xom.Element)>(r0);

        staticinvoke <nu.xom.Element: void copyChildren(nu.xom.Element,nu.xom.Element)>(r0, $r1);

        return $r1;
    }

    protected nu.xom.Element shallowCopy()
    {
        nu.xom.Element $r0, r1;
        java.lang.String $r2, $r3;

        r1 := @this: nu.xom.Element;

        $r0 = new nu.xom.Element;

        $r2 = virtualinvoke r1.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r3 = virtualinvoke r1.<nu.xom.Element: java.lang.String getNamespaceURI()>();

        specialinvoke $r0.<nu.xom.Element: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r0;
    }

    public java.lang.String toString()
    {
        nu.xom.Element r2;
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r8, $r9;
        java.lang.Class $r3;
        java.lang.String $r4, $r7, $r10;

        r2 := @this: nu.xom.Element;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r7 = virtualinvoke r2.<nu.xom.Element: java.lang.String getQualifiedName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    boolean isElement()
    {
        nu.xom.Element r0;

        r0 := @this: nu.xom.Element;

        return 1;
    }

    private void checkPrefixConflict(nu.xom.Attribute)
    {
        nu.xom.Attribute[] $r4;
        nu.xom.Element r3;
        java.lang.StringBuffer $r9, $r10, $r12, $r13, $r15;
        int $i0, i1;
        java.lang.String $r1, $r2, $r6, $r7, $r11, $r14, $r16;
        boolean $z0, $z1;
        nu.xom.Attribute r0, r5;
        nu.xom.NamespaceConflictException $r8;

        r3 := @this: nu.xom.Element;

        r0 := @parameter0: nu.xom.Attribute;

        $r1 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $r2 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        i1 = 0;

     label1:
        $i0 = r3.<nu.xom.Element: int numAttributes>;

        if i1 >= $i0 goto label4;

        $r4 = r3.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<nu.xom.Attribute: java.lang.String getNamespacePrefix()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r5.<nu.xom.Attribute: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r8 = new nu.xom.NamespaceConflictException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Prefix of ");

        $r11 = virtualinvoke r0.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" conflicts with ");

        $r14 = virtualinvoke r5.<nu.xom.Attribute: java.lang.String getQualifiedName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<nu.xom.NamespaceConflictException: void <init>(java.lang.String)>($r16);

        throw $r8;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    java.util.Iterator attributeIterator()
    {
        nu.xom.Element$1 $r0;
        nu.xom.Element r1;

        r1 := @this: nu.xom.Element;

        $r0 = new nu.xom.Element$1;

        specialinvoke $r0.<nu.xom.Element$1: void <init>(nu.xom.Element)>(r1);

        return $r0;
    }

    static int access$000(nu.xom.Element)
    {
        int $i0;
        nu.xom.Element r0;

        r0 := @parameter0: nu.xom.Element;

        $i0 = r0.<nu.xom.Element: int numAttributes>;

        return $i0;
    }

    static nu.xom.Attribute[] access$100(nu.xom.Element)
    {
        nu.xom.Attribute[] $r1;
        nu.xom.Element r0;

        r0 := @parameter0: nu.xom.Element;

        $r1 = r0.<nu.xom.Element: nu.xom.Attribute[] attributes>;

        return $r1;
    }
}
