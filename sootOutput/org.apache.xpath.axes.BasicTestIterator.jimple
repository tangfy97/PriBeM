public abstract class org.apache.xpath.axes.BasicTestIterator extends org.apache.xpath.axes.LocPathIterator
{

    protected void <init>()
    {
        org.apache.xpath.axes.BasicTestIterator r0;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>()>();

        return;
    }

    protected void <init>(org.apache.xml.utils.PrefixResolver)
    {
        org.apache.xml.utils.PrefixResolver r1;
        org.apache.xpath.axes.BasicTestIterator r0;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        r1 := @parameter0: org.apache.xml.utils.PrefixResolver;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xml.utils.PrefixResolver)>(r1);

        return;
    }

    protected void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xpath.axes.BasicTestIterator r0;
        int i0, i1, $i2, $i3, $i4, $i6;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, 0);

        $i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        $i3 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>($i2);

        $i4 = $i3 & 4163;

        if 0 == $i4 goto label1;

        $i6 = (int) -1;

        if $i3 != $i6 goto label2;

     label1:
        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i3);

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: java.lang.String getStepNS(int)>($i2);

        $r3 = virtualinvoke r1.<org.apache.xpath.compiler.OpMap: java.lang.String getStepLocalName(int)>($i2);

        virtualinvoke r0.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int,java.lang.String,java.lang.String)>($i3, $r2, $r3);

     label3:
        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void initPredicateInfo(org.apache.xpath.compiler.Compiler,int)>(r1, $i2);

        return;
    }

    protected void <init>(org.apache.xpath.compiler.Compiler, int, int, boolean) throws javax.xml.transform.TransformerException
    {
        int i0, i1;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xpath.axes.BasicTestIterator r0;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, z0);

        return;
    }

    protected abstract int getNextNode();

    public int nextNode()
    {
        java.lang.Throwable $r3;
        short $s6;
        org.apache.xpath.VariableStack $r2, r4;
        org.apache.xpath.XPathContext $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, i9, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32;
        boolean $z0;
        org.apache.xpath.axes.BasicTestIterator r0;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z0 == 0 goto label01;

        $i12 = (int) -1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched> = $i12;

        $i14 = (int) -1;

        return $i14;

     label01:
        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_lastFetched>;

        $i16 = (int) -1;

        if $i16 != $i0 goto label02;

        virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: void resetProximityPositions()>();

     label02:
        $i1 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i18 = (int) -1;

        if $i18 == $i1 goto label03;

        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        r4 = $r2;

        i9 = virtualinvoke $r2.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i7 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        virtualinvoke $r2.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i7);

        goto label04;

     label03:
        r4 = null;

        i9 = 0;

     label04:
        $i10 = virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: int getNextNode()>();

        $i20 = (int) -1;

        if $i20 == $i10 goto label06;

        $s6 = virtualinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: short acceptNode(int)>($i10);

        if 1 != $s6 goto label05;

        goto label06;

     label05:
        $i22 = (int) -1;

        if $i10 != $i22 goto label04;

     label06:
        $i24 = (int) -1;

        if $i24 == $i10 goto label08;

        $i3 = r0.<org.apache.xpath.axes.LocPathIterator: int m_pos>;

        $i4 = $i3 + 1;

        r0.<org.apache.xpath.axes.LocPathIterator: int m_pos> = $i4;

        goto label12;

     label07:
        return $i10;

     label08:
        r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast> = 1;

        goto label14;

     label09:
        $i26 = (int) -1;

        return $i26;

     label10:
        $r3 := @caughtexception;

        goto label16;

     label11:
        throw $r3;

     label12:
        $i5 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i28 = (int) -1;

        if $i28 == $i5 goto label13;

        virtualinvoke r4.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i9);

     label13:
        goto label07;

     label14:
        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i30 = (int) -1;

        if $i30 == $i2 goto label15;

        virtualinvoke r4.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i9);

     label15:
        goto label09;

     label16:
        $i8 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i32 = (int) -1;

        if $i32 == $i8 goto label17;

        virtualinvoke r4.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i9);

     label17:
        goto label11;

        catch java.lang.Throwable from label04 to label10 with label10;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.dtm.DTMIterator $r1;
        org.apache.xpath.axes.BasicTestIterator r0;
        org.apache.xpath.axes.ChildTestIterator r2;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r2 = (org.apache.xpath.axes.ChildTestIterator) $r1;

        virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: void resetProximityPositions()>();

        return r2;
    }
}
