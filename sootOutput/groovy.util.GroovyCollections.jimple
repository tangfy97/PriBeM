public class groovy.util.GroovyCollections extends java.lang.Object
{
    static java.lang.Class class$java$util$List;

    public void <init>()
    {
        groovy.util.GroovyCollections r0;

        r0 := @this: groovy.util.GroovyCollections;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List combinations(java.lang.Object[])
    {
        java.util.List $r1, $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <groovy.util.GroovyCollections: java.util.List combinations(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.util.List combinations(java.util.Collection)
    {
        java.util.ArrayList $r0, $r5, $r6, $r10, $r14, r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r2, $r7, $r9, $r13;
        java.util.Collection r1, $r4;
        java.util.List $r12;
        java.lang.Object $r3, $r8, $r11, $r15;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r16 = $r0;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.util.Collection asCollection(java.lang.Object)>($r3);

        $z1 = interfaceinvoke r16.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label04;

        $r13 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label03;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label02;

     label03:
        goto label09;

     label04:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>(r16);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label08;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r10 = new java.util.ArrayList;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.util.List) $r11;

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r12);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r8);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label06;

     label07:
        goto label05;

     label08:
        r16 = $r6;

     label09:
        goto label01;

     label10:
        return r16;
    }

    public static java.util.List transpose(java.lang.Object[])
    {
        java.util.List $r1, $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <groovy.util.GroovyCollections: java.util.List transpose(java.util.List)>($r1);

        return $r2;
    }

    public static java.util.List transpose(java.util.List)
    {
        java.util.ArrayList $r0, $r11;
        int $i0, $i1, i2, i3, i4;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r2, $r3;
        java.util.List r1, r8, $r10, $r15;
        java.lang.Object $r4, $r6, $r7, $r9, $r12, $r14;
        java.lang.Class $r5, $r13, $r16, $r17;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 0 goto label02;

     label01:
        return $r0;

     label02:
        i2 = 2147483647;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r12 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r13 = <groovy.util.GroovyCollections: java.lang.Class class$java$util$List>;

        if $r13 != null goto label04;

        $r16 = staticinvoke <groovy.util.GroovyCollections: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.util.GroovyCollections: java.lang.Class class$java$util$List> = $r16;

        goto label05;

     label04:
        $r16 = <groovy.util.GroovyCollections: java.lang.Class class$java$util$List>;

     label05:
        $r14 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r12, $r16);

        $r15 = (java.util.List) $r14;

        $i1 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i1 >= i2 goto label06;

        i2 = interfaceinvoke $r15.<java.util.List: int size()>();

     label06:
        goto label03;

     label07:
        if i2 != 0 goto label08;

        return $r0;

     label08:
        i3 = 0;

     label09:
        if i3 >= i2 goto label10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        i3 = i3 + 1;

        goto label09;

     label10:
        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = <groovy.util.GroovyCollections: java.lang.Class class$java$util$List>;

        if $r5 != null goto label12;

        $r17 = staticinvoke <groovy.util.GroovyCollections: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.util.GroovyCollections: java.lang.Class class$java$util$List> = $r17;

        goto label13;

     label12:
        $r17 = <groovy.util.GroovyCollections: java.lang.Class class$java$util$List>;

     label13:
        $r6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r17);

        $r10 = (java.util.List) $r6;

        i4 = 0;

     label14:
        if i4 >= i2 goto label15;

        $r7 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i4);

        r8 = (java.util.List) $r7;

        $r9 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i4);

        interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        i4 = i4 + 1;

        goto label14;

     label15:
        goto label11;

     label16:
        return $r0;
    }

    public static java.lang.Object min(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <groovy.util.GroovyCollections: java.lang.Object min(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object min(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2, r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r3 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 == null goto label3;

        if r3 == null goto label2;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareLessThan(java.lang.Object,java.lang.Object)>($r2, r3);

        if $z1 == 0 goto label3;

     label2:
        r3 = $r2;

     label3:
        goto label1;

     label4:
        return r3;
    }

    public static java.lang.Object max(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <groovy.util.GroovyCollections: java.lang.Object max(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object max(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2, r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r3 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 == null goto label3;

        if r3 == null goto label2;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareGreaterThan(java.lang.Object,java.lang.Object)>($r2, r3);

        if $z1 == 0 goto label3;

     label2:
        r3 = $r2;

     label3:
        goto label1;

     label4:
        return r3;
    }

    public static java.lang.Object sum(java.lang.Object[])
    {
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection)>($r1);

        return $r2;
    }

    public static java.lang.Object sum(java.util.Collection)
    {
        java.lang.Object $r1;
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.DefaultGroovyMethods: java.lang.Object sum(java.util.Collection)>(r0);

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
