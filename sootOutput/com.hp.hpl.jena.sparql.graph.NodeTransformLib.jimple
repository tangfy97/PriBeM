public class com.hp.hpl.jena.sparql.graph.NodeTransformLib extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.graph.NodeTransformLib r0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.NodeTransformLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransformOp $r0;
        com.hp.hpl.jena.sparql.algebra.Op r2, $r3;
        com.hp.hpl.jena.sparql.graph.NodeTransform r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new com.hp.hpl.jena.sparql.graph.NodeTransformOp;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.graph.NodeTransformOp: void <init>(com.hp.hpl.jena.sparql.graph.NodeTransform)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.algebra.Op)>($r0, null, r2);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.core.BasicPattern transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.BasicPattern $r0, r1;
        com.hp.hpl.jena.graph.Triple r4, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransform r5;
        java.lang.Object $r3;
        boolean $z0, z1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r0 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        z1 = 0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.graph.Triple) $r3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.graph.Triple transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.graph.Triple)>(r5, r4);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r6);

        if $r6 == r4 goto label2;

        z1 = 1;

     label2:
        goto label1;

     label3:
        if z1 != 0 goto label4;

        return r1;

     label4:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.QuadPattern transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.core.QuadPattern)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.QuadPattern $r0, r1;
        com.hp.hpl.jena.sparql.core.Quad r4, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransform r5;
        java.lang.Object $r3;
        boolean $z0, z1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.QuadPattern;

        $r0 = new com.hp.hpl.jena.sparql.core.QuadPattern;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.QuadPattern: void <init>()>();

        z1 = 0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.QuadPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Quad) $r3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.Quad transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.Quad)>(r5, r4);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.QuadPattern: void add(com.hp.hpl.jena.sparql.core.Quad)>($r6);

        if $r6 == r4 goto label2;

        z1 = 1;

     label2:
        goto label1;

     label3:
        if z1 != 0 goto label4;

        return r1;

     label4:
        return $r0;
    }

    public static com.hp.hpl.jena.graph.Triple transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r5, $r6, $r7, r9, r10, r11;
        com.hp.hpl.jena.graph.Triple r0, $r8;
        com.hp.hpl.jena.sparql.graph.NodeTransform r4;
        boolean z0;

        r4 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        z0 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        r9 = $r1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        r10 = $r2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        r11 = $r3;

        $r5 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r1);

        if $r5 == $r1 goto label1;

        z0 = 1;

        r9 = $r5;

     label1:
        $r6 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        if $r6 == $r2 goto label2;

        z0 = 1;

        r10 = $r6;

     label2:
        $r7 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r3);

        if $r7 == $r3 goto label3;

        z0 = 1;

        r11 = $r7;

     label3:
        if z0 != 0 goto label4;

        return r0;

     label4:
        $r8 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r8.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r9, r10, r11);

        return $r8;
    }

    public static com.hp.hpl.jena.sparql.core.Quad transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r4, $r6, $r7, $r8, $r9, r11, r12, r13, r14;
        boolean z0;
        com.hp.hpl.jena.sparql.core.Quad r0, $r10;
        com.hp.hpl.jena.sparql.graph.NodeTransform r5;

        r5 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r0 := @parameter1: com.hp.hpl.jena.sparql.core.Quad;

        z0 = 0;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        r11 = $r1;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        r12 = $r2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        r13 = $r3;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        r14 = $r4;

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r4);

        if $r6 == $r4 goto label1;

        z0 = 1;

        r14 = $r6;

     label1:
        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r1);

        if $r7 == $r1 goto label2;

        z0 = 1;

        r11 = $r7;

     label2:
        $r8 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        if $r8 == $r2 goto label3;

        z0 = 1;

        r12 = $r8;

     label3:
        $r9 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r3);

        if $r9 == $r3 goto label4;

        z0 = 1;

        r13 = $r9;

     label4:
        if z0 != 0 goto label5;

        return r0;

     label5:
        $r10 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r14, r11, r12, r13);

        return $r10;
    }

    public static com.hp.hpl.jena.sparql.algebra.Table transform(com.hp.hpl.jena.sparql.algebra.Table, com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.graph.NodeTransform r0;
        java.util.ArrayList $r5;
        com.hp.hpl.jena.sparql.algebra.table.TableData $r6;
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8, $r9;
        java.lang.Object $r7;
        com.hp.hpl.jena.sparql.algebra.Table r1;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Table;

        r0 := @parameter1: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVars()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: java.util.List transformVars(com.hp.hpl.jena.sparql.graph.NodeTransform,java.util.List)>(r0, $r2);

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.algebra.Table: java.util.Iterator rows()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.sparql.engine.binding.Binding) $r7;

        $r9 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.engine.binding.Binding transform(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.graph.NodeTransform)>(r8, r0);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r6 = new com.hp.hpl.jena.sparql.algebra.table.TableData;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.table.TableData: void <init>(java.util.List,java.util.List)>($r3, $r5);

        return $r6;
    }

    public static com.hp.hpl.jena.sparql.engine.binding.Binding transform(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        java.util.Iterator $r2, $r4;
        com.hp.hpl.jena.graph.Node $r8, $r10;
        com.hp.hpl.jena.sparql.core.Var r6, r9;
        com.hp.hpl.jena.sparql.graph.NodeTransform r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r0;
        java.lang.Object $r5;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r7 := @parameter1: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: java.util.Iterator vars()>();

        $r3 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.util.Iterator)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Var) $r5;

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>(r6);

        r9 = (com.hp.hpl.jena.sparql.core.Var) $r8;

        $r10 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r6);

        interfaceinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r9, $r10);

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.List transformQuads(com.hp.hpl.jena.sparql.graph.NodeTransform, java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.core.Quad r4, $r6;
        com.hp.hpl.jena.sparql.graph.NodeTransform r5;
        java.util.List r1;
        java.lang.Object $r3;
        boolean $z0, z1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        z1 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Quad) $r3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.core.Quad transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.core.Quad)>(r5, r4);

        if r4 == $r6 goto label2;

        z1 = 1;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label1;

     label3:
        if z1 != 0 goto label4;

        return r1;

     label4:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.core.VarExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.core.VarExprList)
    {
        com.hp.hpl.jena.graph.Node $r8;
        com.hp.hpl.jena.sparql.expr.Expr $r6, r10, $r11;
        com.hp.hpl.jena.sparql.core.VarExprList $r0, r1;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.Var r5, r9;
        com.hp.hpl.jena.sparql.graph.NodeTransform r7;
        java.util.List $r2;
        java.lang.Object $r4;

        r7 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.VarExprList;

        $r0 = new com.hp.hpl.jena.sparql.core.VarExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.VarExprList: void <init>()>();

        z3 = 0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r5);

        $r8 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>(r5);

        r9 = (com.hp.hpl.jena.sparql.core.Var) $r8;

        if $r6 == null goto label2;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.Expr)>(r7, $r6);

        goto label3;

     label2:
        $r11 = null;

     label3:
        r10 = $r11;

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>(r5, r9);

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r11);

        if $z2 != 0 goto label5;

     label4:
        z3 = 1;

     label5:
        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.VarExprList: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r9, r10);

        goto label1;

     label6:
        if z3 != 0 goto label7;

        return r1;

     label7:
        return $r0;
    }

    public static java.util.List transformVars(com.hp.hpl.jena.sparql.graph.NodeTransform, java.util.List)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.Var r4, r7;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform r5;
        java.util.List r1;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1, z2;

        r5 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        z2 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.core.Var) $r3;

        $r6 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.graph.NodeTransform: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>(r4);

        r7 = (com.hp.hpl.jena.sparql.core.Var) $r6;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r7);

        $z1 = staticinvoke <org.apache.jena.atlas.lib.Lib: boolean equal(java.lang.Object,java.lang.Object)>(r4, r7);

        if $z1 != 0 goto label2;

        z2 = 1;

     label2:
        goto label1;

     label3:
        if z2 != 0 goto label4;

        return r1;

     label4:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprList transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.graph.NodeTransform r5;
        com.hp.hpl.jena.sparql.expr.Expr r4, $r6;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r1;
        java.lang.Object $r3;
        boolean $z0, z1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        z1 = 0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.Expr)>(r5, r4);

        if r4 == $r6 goto label2;

        z1 = 1;

     label2:
        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r6);

        goto label1;

     label3:
        if z1 != 0 goto label4;

        return r1;

     label4:
        return $r0;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.graph.NodeTransform, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r0, $r2;
        com.hp.hpl.jena.sparql.graph.NodeTransform r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)>(r1);

        return $r2;
    }

    public static java.util.List transform(com.hp.hpl.jena.sparql.graph.NodeTransform, java.util.List)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.query.SortCondition r4, $r8;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.graph.NodeTransform r6;
        java.util.List r1;
        com.hp.hpl.jena.sparql.expr.Expr $r5, $r7;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, z1;

        r6 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        r1 := @parameter1: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        z1 = 1;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.query.SortCondition) $r3;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.query.SortCondition: com.hp.hpl.jena.sparql.expr.Expr getExpression()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.graph.NodeTransformLib: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.graph.NodeTransform,com.hp.hpl.jena.sparql.expr.Expr)>(r6, $r5);

        if $r5 == $r7 goto label2;

        z1 = 0;

     label2:
        $r8 = new com.hp.hpl.jena.query.SortCondition;

        $i0 = virtualinvoke r4.<com.hp.hpl.jena.query.SortCondition: int getDirection()>();

        specialinvoke $r8.<com.hp.hpl.jena.query.SortCondition: void <init>(com.hp.hpl.jena.sparql.expr.Expr,int)>($r7, $i0);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label3:
        if z1 == 0 goto label4;

        return r1;

     label4:
        return $r0;
    }
}
