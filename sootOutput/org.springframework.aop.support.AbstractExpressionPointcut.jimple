public abstract class org.springframework.aop.support.AbstractExpressionPointcut extends java.lang.Object implements org.springframework.aop.support.ExpressionPointcut, java.io.Serializable
{
    private java.lang.String location;
    private java.lang.String expression;

    public void <init>()
    {
        org.springframework.aop.support.AbstractExpressionPointcut r0;

        r0 := @this: org.springframework.aop.support.AbstractExpressionPointcut;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setLocation(java.lang.String)
    {
        org.springframework.aop.support.AbstractExpressionPointcut r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.support.AbstractExpressionPointcut;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.support.AbstractExpressionPointcut: java.lang.String location> = r1;

        return;
    }

    public java.lang.String getLocation()
    {
        org.springframework.aop.support.AbstractExpressionPointcut r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.aop.support.AbstractExpressionPointcut;

        $r1 = r0.<org.springframework.aop.support.AbstractExpressionPointcut: java.lang.String location>;

        return $r1;
    }

    public void setExpression(java.lang.String)
    {
        java.lang.IllegalArgumentException $r2, $r4;
        org.springframework.aop.support.AbstractExpressionPointcut r0;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String r1, $r3, $r6, $r10;

        r0 := @this: org.springframework.aop.support.AbstractExpressionPointcut;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.aop.support.AbstractExpressionPointcut: java.lang.String expression> = r1;

     label1:
        virtualinvoke r0.<org.springframework.aop.support.AbstractExpressionPointcut: void onSetExpression(java.lang.String)>(r1);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        $r3 = r0.<org.springframework.aop.support.AbstractExpressionPointcut: java.lang.String location>;

        if $r3 == null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid expression at location [");

        $r6 = r0.<org.springframework.aop.support.AbstractExpressionPointcut: java.lang.String location>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected void onSetExpression(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.springframework.aop.support.AbstractExpressionPointcut r0;
        java.lang.String r1;

        r0 := @this: org.springframework.aop.support.AbstractExpressionPointcut;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public java.lang.String getExpression()
    {
        org.springframework.aop.support.AbstractExpressionPointcut r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.aop.support.AbstractExpressionPointcut;

        $r1 = r0.<org.springframework.aop.support.AbstractExpressionPointcut: java.lang.String expression>;

        return $r1;
    }
}
