public abstract class org.apache.lucene.queryparser.surround.query.ComposedQuery extends org.apache.lucene.queryparser.surround.query.SrndQuery
{
    protected java.lang.String opName;
    protected java.util.List queries;
    private boolean operatorInfix;

    public void <init>(java.util.List, boolean, java.lang.String)
    {
        java.util.List r1;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.SrndQuery: void <init>()>();

        virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void recompose(java.util.List)>(r1);

        r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: boolean operatorInfix> = z0;

        r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String opName> = r2;

        return;
    }

    protected void recompose(java.util.List)
    {
        java.util.List r0;
        int $i0;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r1;
        java.lang.AssertionError $r2;

        r1 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("Too few subqueries");

        throw $r2;

     label1:
        r1.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.List queries> = r0;

        return;
    }

    public java.lang.String getOperatorName()
    {
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String opName>;

        return $r1;
    }

    public java.util.Iterator getSubQueriesIterator()
    {
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.List queries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public int getNrSubQueries()
    {
        int $i0;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.util.List $r1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.List queries>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.apache.lucene.queryparser.surround.query.SrndQuery getSubQuery(int)
    {
        java.util.List $r1;
        org.apache.lucene.queryparser.surround.query.SrndQuery $r3;
        int i0;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.List queries>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r2;

        return $r3;
    }

    public boolean isOperatorInfix()
    {
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        $z0 = r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: boolean operatorInfix>;

        return $z0;
    }

    public java.util.List makeLuceneSubQueriesField(java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.search.Query $r7;
        org.apache.lucene.queryparser.surround.query.SrndQuery $r6;
        java.util.Iterator $r2;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r5;
        java.util.ArrayList $r0;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r1;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.Iterator getSubQueriesIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r3;

        $r7 = virtualinvoke $r6.<org.apache.lucene.queryparser.surround.query.SrndQuery: org.apache.lucene.search.Query makeLuceneQueryField(java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r4, r5);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r1;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.ComposedQuery: boolean isOperatorInfix()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void infixToString(java.lang.StringBuilder)>($r0);

        goto label2;

     label1:
        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void prefixToString(java.lang.StringBuilder)>($r0);

     label2:
        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void weightToString(java.lang.StringBuilder)>($r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected java.lang.String getPrefixSeparator()
    {
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        return ", ";
    }

    protected java.lang.String getBracketOpen()
    {
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        return "(";
    }

    protected java.lang.String getBracketClose()
    {
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        return ")";
    }

    protected void infixToString(java.lang.StringBuilder)
    {
        org.apache.lucene.queryparser.surround.query.SrndQuery $r6, $r10;
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.lang.StringBuilder r2;
        java.lang.Object $r5, $r9;
        java.lang.String $r3, $r4, $r7, $r8, $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        r2 := @parameter0: java.lang.StringBuilder;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.Iterator getSubQueriesIterator()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getBracketOpen()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r5;

        $r7 = virtualinvoke $r6.<org.apache.lucene.queryparser.surround.query.SrndQuery: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getOperatorName()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r9;

        $r11 = virtualinvoke $r10.<org.apache.lucene.queryparser.surround.query.SrndQuery: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getBracketClose()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return;
    }

    protected void prefixToString(java.lang.StringBuilder)
    {
        org.apache.lucene.queryparser.surround.query.SrndQuery $r7, $r11;
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.lang.StringBuilder r2;
        java.lang.Object $r6, $r10;
        java.lang.String $r3, $r4, $r5, $r8, $r9, $r12;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        r2 := @parameter0: java.lang.StringBuilder;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.Iterator getSubQueriesIterator()>();

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getOperatorName()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getBracketOpen()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r6;

        $r8 = virtualinvoke $r7.<org.apache.lucene.queryparser.surround.query.SrndQuery: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label1:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getPrefixSeparator()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r10;

        $r12 = virtualinvoke $r11.<org.apache.lucene.queryparser.surround.query.SrndQuery: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label1;

     label2:
        $r5 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.lang.String getBracketClose()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        return;
    }

    public boolean isFieldsSubQueryAcceptable()
    {
        org.apache.lucene.queryparser.surround.query.SrndQuery $r3;
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.surround.query.ComposedQuery r0;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.ComposedQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: java.util.Iterator getSubQueriesIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.apache.lucene.queryparser.surround.query.SrndQuery) $r2;

        $z1 = virtualinvoke $r3.<org.apache.lucene.queryparser.surround.query.SrndQuery: boolean isFieldsSubQueryAcceptable()>();

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }
}
