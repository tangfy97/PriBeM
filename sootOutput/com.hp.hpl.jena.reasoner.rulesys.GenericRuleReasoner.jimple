public class com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner extends com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner
{
    protected com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore bRuleStore;
    protected com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode;
    protected static final boolean cachePreload;
    protected boolean enableTGCCaching;
    protected boolean enableOWLTranslation;
    protected java.util.HashSet preprocessorHooks;
    public boolean filterFunctors;
    private static final com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook owlTranslator;
    public static final com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD;
    public static final com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD_RETE;
    public static final com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode BACKWARD;
    public static final com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID;

    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List)>(r1);

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableOWLTranslation> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors> = 1;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory, com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r2;
        com.hp.hpl.jena.reasoner.ReasonerFactory r1;
        com.hp.hpl.jena.rdf.model.Resource r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.ReasonerFactory;

        r3 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(com.hp.hpl.jena.reasoner.ReasonerFactory)>(r1);

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableOWLTranslation> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.rdf.model.Resource configuration> = r3;

        if r3 == null goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void loadConfiguration(com.hp.hpl.jena.rdf.model.Resource)>(r3);

     label1:
        return;
    }

    public void <init>(java.util.List, com.hp.hpl.jena.reasoner.ReasonerFactory)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r3;
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.hp.hpl.jena.reasoner.ReasonerFactory;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>(r1, r2);

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableOWLTranslation> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors> = 1;

        return;
    }

    protected void <init>(java.util.List, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.reasoner.ReasonerFactory, com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode r4;
        com.hp.hpl.jena.reasoner.ReasonerFactory r2;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r2 := @parameter2: com.hp.hpl.jena.reasoner.ReasonerFactory;

        r4 := @parameter3: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.reasoner.ReasonerFactory)>(r1, r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph> = r3;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = r4;

        return;
    }

    public void setMode(com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode r2;
        com.hp.hpl.jena.reasoner.ReasonerException $r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 == null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Can\'t change mode of a reasoner bound to a schema");

        throw $r3;

     label1:
        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore bRuleStore> = null;

        return;
    }

    public void setRules(java.util.List)
    {
        java.util.List r1;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: void setRules(java.util.List)>(r1);

        return;
    }

    public void setOWLTranslation(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r3, $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook $r1, $r2;
        com.hp.hpl.jena.reasoner.ReasonerException $r5;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        if $r4 == $r3 goto label1;

        $r5 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Can only enable OWL rule translation in HYBRID mode");

        throw $r5;

     label1:
        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableOWLTranslation> = z0;

        if z0 == 0 goto label2;

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook owlTranslator>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r2);

        goto label3;

     label2:
        $r1 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook owlTranslator>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void removePreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r1);

     label3:
        return;
    }

    public void setTransitiveClosureCaching(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching> = z0;

        return;
    }

    public void setFunctorFiltering(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors> = z0;

        return;
    }

    public void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)
    {
        java.util.HashSet $r1, $r3, $r4;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        if $r1 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks> = $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        return;
    }

    public void removePreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)
    {
        java.util.HashSet $r1, $r3;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        if $r1 == null goto label1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        virtualinvoke $r3.<java.util.HashSet: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    protected boolean doSetResourceParameter(com.hp.hpl.jena.rdf.model.Property, com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.List $r4;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.rdf.model.Property r1;
        java.lang.String $r3;
        com.hp.hpl.jena.rdf.model.Resource r2;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r2 := @parameter1: com.hp.hpl.jena.rdf.model.Resource;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean isRuleSetURL(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List rulesFromURL(java.lang.String)>($r3);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner addRules(java.util.List)>($r4);

        goto label3;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean isRuleSet(com.hp.hpl.jena.rdf.model.Property)>(r1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addRulesFromURLs(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addRulesFromStrings(com.hp.hpl.jena.rdf.model.Resource)>(r2);

        goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    private void addRulesFromStrings(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        java.lang.String $r5;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.Iterator getHasRuleStatements(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.hp.hpl.jena.rdf.model.Statement) $r3;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: java.lang.String getString()>();

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addRuleFromString(java.lang.String)>($r5);

        goto label1;

     label2:
        return;
    }

    private void addRuleFromString(java.lang.String)
    {
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List parseRules(java.lang.String)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner addRules(java.util.List)>($r2);

        return;
    }

    private void addRulesFromURLs(com.hp.hpl.jena.rdf.model.Resource)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.rdf.model.Statement $r4;
        com.hp.hpl.jena.rdf.model.Resource r1, $r5;
        java.util.List $r7;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        java.lang.Object $r3;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r2 = specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.Iterator getRuleSetURLStatements(com.hp.hpl.jena.rdf.model.Resource)>(r1);

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.hp.hpl.jena.rdf.model.Statement) $r3;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getResource()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: java.lang.String getURI()>();

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Rule: java.util.List rulesFromURL(java.lang.String)>($r6);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner addRules(java.util.List)>($r7);

        goto label1;

     label2:
        return;
    }

    private java.util.Iterator getHasRuleStatements(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r3;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property hasRule>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

        return $r2;
    }

    private java.util.Iterator getRuleSetURLStatements(com.hp.hpl.jena.rdf.model.Resource)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r3;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r1;
        com.hp.hpl.jena.rdf.model.Resource r0;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Resource;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property ruleSetURL>;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.rdf.model.StmtIterator listProperties(com.hp.hpl.jena.rdf.model.Property)>($r1);

        return $r2;
    }

    private boolean isHasRule(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r2;
        com.hp.hpl.jena.rdf.model.Property r0, $r1;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property hasRule>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    private boolean isRuleSet(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r2;
        com.hp.hpl.jena.rdf.model.Property r0, $r1;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property ruleSet>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    private boolean isRuleSetURL(com.hp.hpl.jena.rdf.model.Property)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r2;
        com.hp.hpl.jena.rdf.model.Property r0, $r1;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property ruleSetURL>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    protected boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property, java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r2;
        com.hp.hpl.jena.rdf.model.Property r0, $r1, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.util.List $r15;
        java.lang.StringBuilder $r9, $r10, $r12, $r25, $r26, $r27;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r16, $r18, $r20, $r22, $r29, $r30, $r31, $r32;
        java.lang.String $r13, $r14, $r17, $r19, $r21, $r23, $r28, $r35;
        com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook $r33, $r34;
        com.hp.hpl.jena.reasoner.IllegalParameterException $r8, $r24;
        java.lang.Object r7;
        java.lang.Class $r11;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.Property;

        r7 := @parameter1: java.lang.Object;

        $r1 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPenableFunctorFiltering>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        $z15 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r7);

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors> = $z15;

        goto label13;

     label01:
        $z1 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean isHasRule(com.hp.hpl.jena.rdf.model.Property)>(r0);

        if $z1 == 0 goto label02;

        $r35 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addRuleFromString(java.lang.String)>($r35);

        goto label13;

     label02:
        $r3 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPenableOWLTranslation>;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label04;

        $z13 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r7);

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableOWLTranslation> = $z13;

        $z14 = r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableOWLTranslation>;

        if $z14 == 0 goto label03;

        $r34 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook owlTranslator>;

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r34);

        goto label13;

     label03:
        $r33 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook owlTranslator>;

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void removePreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r33);

        goto label13;

     label04:
        $r4 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPenableTGCCaching>;

        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label05;

        $z12 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: boolean convertBooleanPredicateArg(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r7);

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching> = $z12;

        goto label13;

     label05:
        $r5 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPruleMode>;

        $z4 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label10;

        $r16 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD>;

        $r17 = $r16.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: java.lang.String name>;

        $z8 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r17);

        if $z8 == 0 goto label06;

        $r32 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r32;

        goto label13;

     label06:
        $r18 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD_RETE>;

        $r19 = $r18.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: java.lang.String name>;

        $z9 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r19);

        if $z9 == 0 goto label07;

        $r31 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD_RETE>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r31;

        goto label13;

     label07:
        $r20 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode BACKWARD>;

        $r21 = $r20.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: java.lang.String name>;

        $z10 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r21);

        if $z10 == 0 goto label08;

        $r30 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode BACKWARD>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r30;

        goto label13;

     label08:
        $r22 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        $r23 = $r22.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: java.lang.String name>;

        $z11 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>($r23);

        if $z11 == 0 goto label09;

        $r29 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode> = $r29;

        goto label13;

     label09:
        $r24 = new com.hp.hpl.jena.reasoner.IllegalParameterException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROPruleMode can only be \'forward\'m \'forwardRETE\', \'backward\', \'hybrid\', not ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<com.hp.hpl.jena.reasoner.IllegalParameterException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label10:
        $r6 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property PROPruleSet>;

        $z5 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z5 == 0 goto label12;

        $z7 = r7 instanceof java.lang.String;

        if $z7 == 0 goto label11;

        $r14 = (java.lang.String) r7;

        $r15 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List loadRules(java.lang.String)>($r14);

        virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner addRules(java.util.List)>($r15);

        goto label13;

     label11:
        $r8 = new com.hp.hpl.jena.reasoner.IllegalParameterException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PROPruleSet value should be a URI string. Was a ");

        $r11 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.IllegalParameterException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label12:
        $z6 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: boolean doSetParameter(com.hp.hpl.jena.rdf.model.Property,java.lang.Object)>(r0, r7);

        return $z6;

     label13:
        return 1;
    }

    public com.hp.hpl.jena.reasoner.Reasoner bindSchema(com.hp.hpl.jena.graph.Graph) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r8, $r11, $r16;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r18, $r21, r25, $r27;
        com.hp.hpl.jena.reasoner.rulesys.RETERuleInfGraph $r17;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r2, $r3, $r4, $r5, $r6, $r7, $r29;
        com.hp.hpl.jena.reasoner.InfGraph $r9, $r19, $r22;
        java.util.HashSet $r12, $r30;
        com.hp.hpl.jena.reasoner.ReasonerException $r23;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook $r15;
        com.hp.hpl.jena.graph.Graph $r1, r10, r24;
        java.util.Iterator $r13;
        com.hp.hpl.jena.reasoner.ReasonerFactory $r28;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph $r20;
        java.lang.Object $r14;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r10 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 == null goto label1;

        $r23 = new com.hp.hpl.jena.reasoner.ReasonerException;

        specialinvoke $r23.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>("Can only bind one schema at a time to a GenericRuleReasoner");

        throw $r23;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD>;

        if $r3 != $r2 goto label2;

        $r20 = new com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $r21 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        specialinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, $r21, null, r10);

        r24 = $r20;

        $r22 = (com.hp.hpl.jena.reasoner.InfGraph) $r20;

        interfaceinvoke $r22.<com.hp.hpl.jena.reasoner.InfGraph: void prepare()>();

        goto label6;

     label2:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD_RETE>;

        if $r5 != $r4 goto label3;

        $r17 = new com.hp.hpl.jena.reasoner.rulesys.RETERuleInfGraph;

        $r18 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        specialinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.RETERuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, $r18, null, r10);

        r24 = $r17;

        $r19 = (com.hp.hpl.jena.reasoner.InfGraph) $r17;

        interfaceinvoke $r19.<com.hp.hpl.jena.reasoner.InfGraph: void prepare()>();

        goto label6;

     label3:
        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r6 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode BACKWARD>;

        if $r7 != $r6 goto label4;

        r24 = r10;

        goto label6;

     label4:
        r25 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        $r8 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph getPreload()>();

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, r25, $r9, r10);

        r24 = $r8;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching>;

        if $z0 == 0 goto label5;

        $r16 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r8;

        virtualinvoke $r16.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setUseTGCCache()>();

     label5:
        $r11 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r8;

        virtualinvoke $r11.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void prepare()>();

     label6:
        $r26 = new com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        $r27 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        $r28 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.ReasonerFactory factory>;

        $r29 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        specialinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void <init>(java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.reasoner.ReasonerFactory,com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode)>($r27, r24, $r28, $r29);

        $z2 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean recordDerivations>;

        virtualinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void setDerivationLogging(boolean)>($z2);

        $z3 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean traceOn>;

        virtualinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void setTraceOn(boolean)>($z3);

        $z4 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching>;

        virtualinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void setTransitiveClosureCaching(boolean)>($z4);

        $z5 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors>;

        virtualinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void setFunctorFiltering(boolean)>($z5);

        $r30 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        if $r30 == null goto label8;

        $r12 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        $r13 = virtualinvoke $r12.<java.util.HashSet: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r14;

        virtualinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r15);

        goto label7;

     label8:
        return $r26;
    }

    public com.hp.hpl.jena.reasoner.InfGraph bind(com.hp.hpl.jena.graph.Graph) throws com.hp.hpl.jena.reasoner.ReasonerException
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r8, $r10;
        com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph $r17, $r19;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.BaseInfGraph r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r18;
        java.util.List $r9, $r21, $r25;
        com.hp.hpl.jena.reasoner.rulesys.RETERuleInfGraph $r20;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r2, $r3, $r4, $r5, $r6, $r7;
        java.util.HashSet $r11, $r13;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook $r16;
        com.hp.hpl.jena.graph.Graph $r1, r12, $r27;
        java.util.Iterator $r14;
        com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph $r22, $r23, $r24, $r26;
        java.lang.Object $r15;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        r12 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 != null goto label1;

        $r27 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph getPreload()>();

        goto label2;

     label1:
        $r27 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.graph.Graph schemaGraph>;

     label2:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD>;

        if $r3 != $r2 goto label3;

        $r24 = new com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph;

        $r25 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        specialinvoke $r24.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r0, $r25, $r27);

        r28 = $r24;

        $r26 = (com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph) $r24;

        $z7 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean traceOn>;

        virtualinvoke $r26.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void setTraceOn(boolean)>($z7);

        goto label8;

     label3:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD_RETE>;

        if $r5 != $r4 goto label4;

        $r20 = new com.hp.hpl.jena.reasoner.rulesys.RETERuleInfGraph;

        $r21 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        specialinvoke $r20.<com.hp.hpl.jena.reasoner.rulesys.RETERuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r0, $r21, $r27);

        r28 = $r20;

        $r22 = (com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph) $r20;

        $z5 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean traceOn>;

        virtualinvoke $r22.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void setTraceOn(boolean)>($z5);

        $r23 = (com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph) $r20;

        $z6 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors>;

        virtualinvoke $r23.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void setFunctorFiltering(boolean)>($z6);

        goto label8;

     label4:
        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r6 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode BACKWARD>;

        if $r7 != $r6 goto label5;

        $r17 = new com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph;

        $r18 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore getBruleStore()>();

        specialinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, $r18, r12, $r27);

        r28 = $r17;

        $r19 = (com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph) $r17;

        $z4 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean traceOn>;

        virtualinvoke $r19.<com.hp.hpl.jena.reasoner.rulesys.LPBackwardRuleInfGraph: void setTraceOn(boolean)>($z4);

        goto label8;

     label5:
        $r8 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r27;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List getRules()>();

        $r10 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        specialinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r0, $r9, $r27);

        r28 = $r10;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching>;

        if $z0 == 0 goto label6;

        virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setUseTGCCache()>();

     label6:
        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean traceOn>;

        virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setTraceOn(boolean)>($z1);

        $z2 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean filterFunctors>;

        virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setFunctorFiltering(boolean)>($z2);

        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        if $r11 == null goto label8;

        $r13 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.HashSet preprocessorHooks>;

        $r14 = virtualinvoke $r13.<java.util.HashSet: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r15;

        virtualinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)>($r16);

        goto label7;

     label8:
        $z8 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean recordDerivations>;

        interfaceinvoke r28.<com.hp.hpl.jena.reasoner.InfGraph: void setDerivationLogging(boolean)>($z8);

        interfaceinvoke r28.<com.hp.hpl.jena.reasoner.InfGraph: void rebind(com.hp.hpl.jena.graph.Graph)>(r12);

        return r28;
    }

    protected synchronized com.hp.hpl.jena.reasoner.InfGraph getPreload()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph $r4, $r9;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r2, $r3;
        com.hp.hpl.jena.reasoner.InfGraph $r1, $r7, $r8, $r10;
        java.util.List $r5;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.graph.Graph $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        if $r1 != null goto label2;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode mode>;

        $r2 = <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID>;

        if $r3 != $r2 goto label2;

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        $r6 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createDefaultGraph()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r0, $r5, null, $r6);

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload> = $r4;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean enableTGCCaching>;

        if $z0 == 0 goto label1;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        $r9 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r8;

        virtualinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setUseTGCCache()>();

     label1:
        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        interfaceinvoke $r7.<com.hp.hpl.jena.reasoner.InfGraph: void prepare()>();

     label2:
        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.InfGraph preload>;

        return $r10;
    }

    protected com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore getBruleStore()
    {
        java.util.List $r4;
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r1, $r2, $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore bRuleStore>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: java.util.List rules>;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void <init>(java.util.List)>($r4);

        r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore bRuleStore> = $r3;

     label1:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore bRuleStore>;

        return $r2;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode $r1, $r2, $r3, $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook $r0;

        <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: boolean cachePreload> = 1;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook: void <init>()>();

        <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.impl.OWLRuleTranslationHook owlTranslator> = $r0;

        $r1 = new com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: void <init>(java.lang.String)>("forward");

        <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD> = $r1;

        $r2 = new com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: void <init>(java.lang.String)>("forwardRETE");

        <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode FORWARD_RETE> = $r2;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: void <init>(java.lang.String)>("backward");

        <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode BACKWARD> = $r3;

        $r4 = new com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode: void <init>(java.lang.String)>("hybrid");

        <com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner: com.hp.hpl.jena.reasoner.rulesys.GenericRuleReasoner$RuleMode HYBRID> = $r4;

        return;
    }
}
