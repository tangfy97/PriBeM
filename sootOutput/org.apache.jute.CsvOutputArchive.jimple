public class org.apache.jute.CsvOutputArchive extends java.lang.Object implements org.apache.jute.OutputArchive
{
    private java.io.PrintStream stream;
    private boolean isFirst;

    static org.apache.jute.CsvOutputArchive getArchive(java.io.OutputStream) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r1;
        org.apache.jute.CsvOutputArchive $r0;

        r1 := @parameter0: java.io.OutputStream;

        $r0 = new org.apache.jute.CsvOutputArchive;

        specialinvoke $r0.<org.apache.jute.CsvOutputArchive: void <init>(java.io.OutputStream)>(r1);

        return $r0;
    }

    private void throwExceptionOnError(java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String r5, $r7;
        boolean $z0;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        $z0 = virtualinvoke $r1.<java.io.PrintStream: boolean checkError()>();

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error serializing ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    private void printCommaUnlessFirst()
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        boolean $z0;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        $z0 = r0.<org.apache.jute.CsvOutputArchive: boolean isFirst>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>(",");

     label1:
        r0.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 0;

        return;
    }

    public void <init>(java.io.OutputStream) throws java.io.UnsupportedEncodingException
    {
        java.io.PrintStream $r1;
        java.io.OutputStream r2;
        org.apache.jute.CsvOutputArchive r0;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r2 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 1;

        $r1 = new java.io.PrintStream;

        specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>(r2, 1, "UTF-8");

        r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream> = $r1;

        return;
    }

    public void writeByte(byte, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.CsvOutputArchive r0;
        byte b0;
        long $l1;
        java.lang.String r1;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        b0 := @parameter0: byte;

        r1 := @parameter1: java.lang.String;

        $l1 = (long) b0;

        virtualinvoke r0.<org.apache.jute.CsvOutputArchive: void writeLong(long,java.lang.String)>($l1, r1);

        return;
    }

    public void writeBool(boolean, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.lang.String r2, $r3;
        boolean z0;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        z0 := @parameter0: boolean;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        if z0 == 0 goto label1;

        $r3 = "T";

        goto label2;

     label1:
        $r3 = "F";

     label2:
        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r3);

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void throwExceptionOnError(java.lang.String)>(r2);

        return;
    }

    public void writeInt(int, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.CsvOutputArchive r0;
        int i0;
        long $l1;
        java.lang.String r1;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $l1 = (long) i0;

        virtualinvoke r0.<org.apache.jute.CsvOutputArchive: void writeLong(long,java.lang.String)>($l1, r1);

        return;
    }

    public void writeLong(long, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        long l0;
        java.lang.String r2;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        l0 := @parameter0: long;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(long)>(l0);

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void throwExceptionOnError(java.lang.String)>(r2);

        return;
    }

    public void writeFloat(float, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.CsvOutputArchive r0;
        float f0;
        java.lang.String r1;
        double $d0;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        f0 := @parameter0: float;

        r1 := @parameter1: java.lang.String;

        $d0 = (double) f0;

        virtualinvoke r0.<org.apache.jute.CsvOutputArchive: void writeDouble(double,java.lang.String)>($d0, r1);

        return;
    }

    public void writeDouble(double, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.lang.String r2;
        double d0;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        d0 := @parameter0: double;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(double)>(d0);

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void throwExceptionOnError(java.lang.String)>(r2);

        return;
    }

    public void writeString(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2;
        org.apache.jute.CsvOutputArchive r0;
        java.lang.String r1, $r3, r4;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r2 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        $r3 = staticinvoke <org.apache.jute.Utils: java.lang.String toCSVString(java.lang.String)>(r1);

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r3);

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void throwExceptionOnError(java.lang.String)>(r4);

        return;
    }

    public void writeBuffer(byte[], java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2;
        byte[] r1;
        org.apache.jute.CsvOutputArchive r0;
        java.lang.String $r3, r4;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r1 := @parameter0: byte[];

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r2 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        $r3 = staticinvoke <org.apache.jute.Utils: java.lang.String toCSVBuffer(byte[])>(r1);

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r3);

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void throwExceptionOnError(java.lang.String)>(r4);

        return;
    }

    public void writeRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.Record r0;
        org.apache.jute.CsvOutputArchive r1;
        java.lang.String r2;

        r1 := @this: org.apache.jute.CsvOutputArchive;

        r0 := @parameter0: org.apache.jute.Record;

        r2 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        interfaceinvoke r0.<org.apache.jute.Record: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r1, r2);

        return;
    }

    public void startRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r3;
        org.apache.jute.CsvOutputArchive r2;
        org.apache.jute.Record r4;
        java.lang.String r0, $r1;
        boolean $z0;

        r2 := @this: org.apache.jute.CsvOutputArchive;

        r4 := @parameter0: org.apache.jute.Record;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        specialinvoke r2.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r3 = r2.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("s{");

        r2.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 1;

     label1:
        return;
    }

    public void endRecord(org.apache.jute.Record, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r2, $r4;
        org.apache.jute.CsvOutputArchive r1;
        org.apache.jute.Record r5;
        java.lang.String r0, $r3;
        boolean $z0;

        r1 := @this: org.apache.jute.CsvOutputArchive;

        r5 := @parameter0: org.apache.jute.Record;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r3 = "";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $r2 = r1.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>("\n");

        r1.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 1;

        goto label3;

     label2:
        $r4 = r1.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>("}");

        r1.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 0;

     label3:
        return;
    }

    public void startVector(java.util.List, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.util.List r2;
        java.lang.String r3;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("v{");

        r0.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 1;

        return;
    }

    public void endVector(java.util.List, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.util.List r2;
        java.lang.String r3;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("}");

        r0.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 0;

        return;
    }

    public void startMap(java.util.TreeMap, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.util.TreeMap r2;
        java.lang.String r3;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r2 := @parameter0: java.util.TreeMap;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jute.CsvOutputArchive: void printCommaUnlessFirst()>();

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("m{");

        r0.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 1;

        return;
    }

    public void endMap(java.util.TreeMap, java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1;
        org.apache.jute.CsvOutputArchive r0;
        java.util.TreeMap r2;
        java.lang.String r3;

        r0 := @this: org.apache.jute.CsvOutputArchive;

        r2 := @parameter0: java.util.TreeMap;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.jute.CsvOutputArchive: java.io.PrintStream stream>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("}");

        r0.<org.apache.jute.CsvOutputArchive: boolean isFirst> = 0;

        return;
    }
}
