public class org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl extends java.lang.Object implements org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax
{
    private static final char[] wildcardChars;
    private static final java.lang.String[] escapableTermExtraFirstChars;
    private static final java.lang.String[] escapableTermChars;
    private static final java.lang.String[] escapableQuotedChars;
    private static final java.lang.String[] escapableWhiteChars;
    private static final java.lang.String[] escapableWordTokens;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final java.lang.CharSequence escapeChar(java.lang.CharSequence, java.util.Locale)
    {
        java.lang.String[] $r1, $r2, $r3, $r10;
        java.util.Locale r11;
        int $i0, $i1, $i2, $i6, i7, i8, $i9, $i10;
        java.lang.String $r4, $r12, $r13;
        java.lang.CharSequence r0, $r8, r14;
        char $c3, $c4, $c5;
        java.lang.StringBuilder $r6, $r7, $r9, $r15;

        r0 := @parameter0: java.lang.CharSequence;

        r11 := @parameter1: java.util.Locale;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        r14 = r0;

        i7 = 0;

     label3:
        $r1 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermChars>;

        $i1 = lengthof $r1;

        if i7 >= $i1 goto label4;

        $r10 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermChars>;

        $r12 = $r10[i7];

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r11);

        r14 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence replaceIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.util.Locale)>(r14, $r13, "\\", r11);

        i7 = i7 + 1;

        goto label3;

     label4:
        i8 = 0;

     label5:
        $r2 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermExtraFirstChars>;

        $i2 = lengthof $r2;

        if i8 >= $i2 goto label7;

        $c3 = interfaceinvoke r14.<java.lang.CharSequence: char charAt(int)>(0);

        $r3 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermExtraFirstChars>;

        $r4 = $r3[i8];

        $c4 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i9 = (int) $c3;

        $i10 = (int) $c4;

        if $i9 != $i10 goto label6;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $c5 = interfaceinvoke r14.<java.lang.CharSequence: char charAt(int)>(0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $i6 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        $r8 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, $i6);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        i8 = i8 + 1;

        goto label5;

     label7:
        return r14;
    }

    private final java.lang.CharSequence escapeQuoted(java.lang.CharSequence, java.util.Locale)
    {
        java.lang.CharSequence r0, r7;
        org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl r6;
        java.lang.String[] $r1, $r2;
        java.util.Locale r3;
        int $i0, $i1, i2;
        java.lang.String $r4, $r5;

        r6 := @this: org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl;

        r0 := @parameter0: java.lang.CharSequence;

        r3 := @parameter1: java.util.Locale;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        r7 = r0;

        i2 = 0;

     label3:
        $r1 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableQuotedChars>;

        $i1 = lengthof $r1;

        if i2 >= $i1 goto label4;

        $r2 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermChars>;

        $r4 = $r2[i2];

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r3);

        r7 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence replaceIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.util.Locale)>(r7, $r5, "\\", r3);

        i2 = i2 + 1;

        goto label3;

     label4:
        return r7;
    }

    private static final java.lang.CharSequence escapeTerm(java.lang.CharSequence, java.util.Locale)
    {
        java.lang.CharSequence $r1, $r2, r11;
        java.lang.String[] $r3, $r4;
        java.util.Locale r0;
        int $i0, i1;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r5, $r6, $r10;
        boolean $z0;

        r11 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: java.util.Locale;

        if r11 != null goto label1;

        return r11;

     label1:
        $r1 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence escapeChar(java.lang.CharSequence,java.util.Locale)>(r11, r0);

        $r2 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence escapeWhiteChar(java.lang.CharSequence,java.util.Locale)>($r1, r0);

        i1 = 0;

     label2:
        $r3 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableWordTokens>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        $r4 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableWordTokens>;

        $r5 = $r4[i1];

        $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return $r2;
    }

    private static java.lang.CharSequence replaceIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, java.util.Locale)
    {
        java.lang.NullPointerException $r19;
        java.util.Locale r8;
        boolean z0;
        java.lang.CharSequence r0, r1, r2;
        java.lang.StringBuilder $r20, $r21;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, i15, i16, i17, i18, $i19, $i20, $i22, $i23, $i24;
        java.lang.String $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17;
        char $c2, $c9, $c10, $c14;

        r2 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        r0 := @parameter2: java.lang.CharSequence;

        r8 := @parameter3: java.util.Locale;

        if r0 == null goto label01;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>()>();

        throw $r19;

     label02:
        $i0 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label05;

        $r20 = new java.lang.StringBuilder;

        $i11 = $i0 + 1;

        $i12 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i13 = $i11 * $i12;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(int)>($i13);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

        i15 = 0;

     label03:
        if i15 >= $i0 goto label04;

        $c14 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i15);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

        i15 = i15 + 1;

        goto label03;

     label04:
        $r17 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label05:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

        i16 = 0;

        i17 = 0;

     label06:
        if i16 >= $i0 goto label14;

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r8);

        $i20 = (int) $c2;

        $i3 = virtualinvoke $r9.<java.lang.String: int indexOf(int,int)>($i20, i16);

        $i22 = (int) -1;

        if $i3 != $i22 goto label07;

        goto label14;

     label07:
        z0 = 1;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i4 <= 1 goto label11;

        $i7 = $i3 + $i1;

        if $i7 <= $i0 goto label08;

        goto label14;

     label08:
        i18 = 1;

     label09:
        if i18 >= $i1 goto label11;

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r8);

        $i8 = $i3 + i18;

        $c9 = virtualinvoke $r15.<java.lang.String: char charAt(int)>($i8);

        $c10 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i18);

        $i23 = (int) $c9;

        $i24 = (int) $c10;

        if $i23 == $i24 goto label10;

        z0 = 0;

        goto label11;

     label10:
        i18 = i18 + 1;

        goto label09;

     label11:
        if z0 == 0 goto label12;

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(i17, $i3);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

        $r12 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $i5 = $i3 + $i1;

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>($i3, $i5);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $i6 = $i3 + $i1;

        i16 = $i6;

        i17 = $i6;

        goto label13;

     label12:
        i16 = $i3 + 1;

     label13:
        goto label06;

     label14:
        $i19 = virtualinvoke $r21.<java.lang.StringBuilder: int length()>();

        if $i19 != 0 goto label15;

        if i17 != 0 goto label15;

        return r2;

     label15:
        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>(i17);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static final java.lang.CharSequence escapeWhiteChar(java.lang.CharSequence, java.util.Locale)
    {
        java.lang.CharSequence r0, r6;
        java.lang.String[] $r1, $r2;
        java.util.Locale r3;
        int $i0, $i1, i2;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r3 := @parameter1: java.util.Locale;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        r6 = r0;

        i2 = 0;

     label3:
        $r1 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableWhiteChars>;

        $i1 = lengthof $r1;

        if i2 >= $i1 goto label4;

        $r2 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableWhiteChars>;

        $r4 = $r2[i2];

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r3);

        r6 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence replaceIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.util.Locale)>(r6, $r5, "\\", r3);

        i2 = i2 + 1;

        goto label3;

     label4:
        return r6;
    }

    public java.lang.CharSequence escape(java.lang.CharSequence, java.util.Locale, org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type)
    {
        java.lang.CharSequence $r5, $r7, r10;
        org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type r2, $r3;
        org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl r6;
        org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence $r0, $r9;
        java.util.Locale r4;
        int $i0;
        char[] $r1, $r8;
        java.lang.String r11;
        boolean $z0;

        r6 := @this: org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl;

        r10 := @parameter0: java.lang.CharSequence;

        r4 := @parameter1: java.util.Locale;

        r2 := @parameter2: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type;

        if r10 == null goto label1;

        $i0 = interfaceinvoke r10.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r10;

     label2:
        $z0 = r10 instanceof org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;

        if $z0 == 0 goto label3;

        $r9 = (org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence) r10;

        $r8 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: char[] wildcardChars>;

        r11 = virtualinvoke $r9.<org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: java.lang.String toStringEscaped(char[])>($r8);

        goto label4;

     label3:
        $r0 = new org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;

        specialinvoke $r0.<org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: void <init>(java.lang.CharSequence)>(r10);

        $r1 = <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: char[] wildcardChars>;

        r11 = virtualinvoke $r0.<org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: java.lang.String toStringEscaped(char[])>($r1);

     label4:
        $r3 = <org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type: org.apache.lucene.queryparser.flexible.core.parser.EscapeQuerySyntax$Type STRING>;

        if r2 != $r3 goto label5;

        $r7 = specialinvoke r6.<org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence escapeQuoted(java.lang.CharSequence,java.util.Locale)>(r11, r4);

        return $r7;

     label5:
        $r5 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.CharSequence escapeTerm(java.lang.CharSequence,java.util.Locale)>(r11, r4);

        return $r5;
    }

    public static org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence discardEscapeChar(java.lang.CharSequence) throws org.apache.lucene.queryparser.flexible.standard.parser.ParseException
    {
        int $i0, $i1, $i2, $i4, $i5, $i6, i8, i9, i10, i11, $i12, $i13;
        java.lang.String $r6, $r9;
        boolean z0, z1, z2;
        java.lang.CharSequence r0;
        boolean[] r2;
        char $c3, $c7;
        org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence $r14;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r10, $r12;
        org.apache.lucene.queryparser.flexible.standard.parser.ParseException $r11, $r13;
        char[] r1;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r1 = newarray (char)[$i0];

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r2 = newarray (boolean)[$i1];

        i8 = 0;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i9 = 0;

        i10 = 0;

        i11 = 0;

     label01:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i11 >= $i2 goto label08;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i11);

        if i9 <= 0 goto label02;

        $i4 = staticinvoke <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: int hexToInt(char)>($c3);

        $i5 = $i4 * i9;

        i10 = i10 + $i5;

        i9 = i9 >>> 4;

        if i9 != 0 goto label07;

        $i6 = i8;

        i8 = i8 + 1;

        $c7 = (char) i10;

        r1[$i6] = $c7;

        i10 = 0;

        goto label07;

     label02:
        if z1 == 0 goto label05;

        $i12 = (int) $c3;

        if $i12 != 117 goto label03;

        i9 = 4096;

        goto label04;

     label03:
        r1[i8] = $c3;

        r2[i8] = 1;

        i8 = i8 + 1;

     label04:
        z0 = 0;

        z2 = 0;

        z1 = 0;

        goto label07;

     label05:
        $i13 = (int) $c3;

        if $i13 != 92 goto label06;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label07;

     label06:
        r1[i8] = $c3;

        i8 = i8 + 1;

     label07:
        i11 = i11 + 1;

        goto label01;

     label08:
        if i9 <= 0 goto label09;

        $r11 = new org.apache.lucene.queryparser.flexible.standard.parser.ParseException;

        $r10 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r9 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION>;

        specialinvoke $r10.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String)>($r9);

        specialinvoke $r11.<org.apache.lucene.queryparser.flexible.standard.parser.ParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r10);

        throw $r11;

     label09:
        if z2 == 0 goto label10;

        $r13 = new org.apache.lucene.queryparser.flexible.standard.parser.ParseException;

        $r12 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r6 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String INVALID_SYNTAX_ESCAPE_CHARACTER>;

        specialinvoke $r12.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String)>($r6);

        specialinvoke $r13.<org.apache.lucene.queryparser.flexible.standard.parser.ParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r12);

        throw $r13;

     label10:
        $r14 = new org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence;

        specialinvoke $r14.<org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: void <init>(char[],boolean[],int,int)>(r1, r2, 0, i8);

        return $r14;
    }

    private static final int hexToInt(char) throws org.apache.lucene.queryparser.flexible.standard.parser.ParseException
    {
        java.lang.Object[] $r2;
        java.lang.Character $r4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r3;
        char c0;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r5;
        org.apache.lucene.queryparser.flexible.standard.parser.ParseException $r6;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if 48 > $i6 goto label1;

        $i7 = (int) c0;

        if $i7 > 57 goto label1;

        $i8 = (int) c0;

        $i5 = $i8 - 48;

        return $i5;

     label1:
        $i9 = (int) c0;

        if 97 > $i9 goto label2;

        $i10 = (int) c0;

        if $i10 > 102 goto label2;

        $i11 = (int) c0;

        $i3 = $i11 - 97;

        $i4 = $i3 + 10;

        return $i4;

     label2:
        $i12 = (int) c0;

        if 65 > $i12 goto label3;

        $i13 = (int) c0;

        if $i13 > 70 goto label3;

        $i14 = (int) c0;

        $i1 = $i14 - 65;

        $i2 = $i1 + 10;

        return $i2;

     label3:
        $r6 = new org.apache.lucene.queryparser.flexible.standard.parser.ParseException;

        $r5 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r3 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r2[0] = $r4;

        specialinvoke $r5.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r3, $r2);

        specialinvoke $r6.<org.apache.lucene.queryparser.flexible.standard.parser.ParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r5);

        throw $r6;
    }

    static void <clinit>()
    {
        char[] $r0;
        java.lang.String[] $r1, $r2, $r3, $r4, $r5;

        $r0 = newarray (char)[2];

        $r0[0] = 42;

        $r0[1] = 63;

        <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: char[] wildcardChars> = $r0;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "+";

        $r1[1] = "-";

        $r1[2] = "@";

        <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermExtraFirstChars> = $r1;

        $r2 = newarray (java.lang.String)[15];

        $r2[0] = "\"";

        $r2[1] = "<";

        $r2[2] = ">";

        $r2[3] = "=";

        $r2[4] = "!";

        $r2[5] = "(";

        $r2[6] = ")";

        $r2[7] = "^";

        $r2[8] = "[";

        $r2[9] = "{";

        $r2[10] = ":";

        $r2[11] = "]";

        $r2[12] = "}";

        $r2[13] = "~";

        $r2[14] = "/";

        <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableTermChars> = $r2;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "\"";

        <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableQuotedChars> = $r3;

        $r4 = newarray (java.lang.String)[7];

        $r4[0] = " ";

        $r4[1] = "\t";

        $r4[2] = "\n";

        $r4[3] = "\r";

        $r4[4] = "\f";

        $r4[5] = "\u0008";

        $r4[6] = "\u3000";

        <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableWhiteChars> = $r4;

        $r5 = newarray (java.lang.String)[8];

        $r5[0] = "AND";

        $r5[1] = "OR";

        $r5[2] = "NOT";

        $r5[3] = "TO";

        $r5[4] = "WITHIN";

        $r5[5] = "SENTENCE";

        $r5[6] = "PARAGRAPH";

        $r5[7] = "INORDER";

        <org.apache.lucene.queryparser.flexible.standard.parser.EscapeQuerySyntaxImpl: java.lang.String[] escapableWordTokens> = $r5;

        return;
    }
}
