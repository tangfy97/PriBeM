public class org.springframework.core.convert.support.PropertyTypeDescriptor extends org.springframework.core.convert.TypeDescriptor
{
    private final java.beans.PropertyDescriptor propertyDescriptor;
    private java.lang.'annotation'.Annotation[] cachedAnnotations;

    public void <init>(java.beans.PropertyDescriptor, org.springframework.core.MethodParameter)
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor r0;
        java.beans.PropertyDescriptor r2;
        org.springframework.core.MethodParameter r1;

        r0 := @this: org.springframework.core.convert.support.PropertyTypeDescriptor;

        r2 := @parameter0: java.beans.PropertyDescriptor;

        r1 := @parameter1: org.springframework.core.MethodParameter;

        specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>(r1);

        r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor> = r2;

        return;
    }

    public void <init>(java.beans.PropertyDescriptor, org.springframework.core.MethodParameter, java.lang.Class)
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor r0;
        java.beans.PropertyDescriptor r3;
        org.springframework.core.MethodParameter r1;
        java.lang.Class r2;

        r0 := @this: org.springframework.core.convert.support.PropertyTypeDescriptor;

        r3 := @parameter0: java.beans.PropertyDescriptor;

        r1 := @parameter1: org.springframework.core.MethodParameter;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter,java.lang.Class)>(r1, r2);

        r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor> = r3;

        return;
    }

    public java.beans.PropertyDescriptor getPropertyDescriptor()
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor r0;
        java.beans.PropertyDescriptor $r1;

        r0 := @this: org.springframework.core.convert.support.PropertyTypeDescriptor;

        $r1 = r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor>;

        return $r1;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor r0;
        java.beans.PropertyDescriptor $r2, $r43, $r45;
        java.lang.StringBuilder $r25, $r30, $r33, $r38;
        java.lang.Object[] $r10;
        java.util.LinkedHashMap $r1;
        java.lang.String $r3, $r26, $r27, $r28, $r29, $r31, $r34, $r35, $r36, $r37, $r39;
        java.lang.reflect.Field $r22, $r32, r41;
        org.springframework.core.MethodParameter $r5, $r11, $r15, $r19, $r49;
        java.lang.reflect.Method $r12, $r16, $r20, $r44, $r46;
        boolean $z0;
        java.util.Collection $r8;
        java.lang.'annotation'.Annotation r42, r47, r48, r51, r52;
        java.lang.'annotation'.Annotation[] $r6, $r9, $r13, $r17, $r23, r40, $r50;
        int $i0, i1, i2, i3, i4, i5, i6, $i7, i8, i9, i10;
        java.lang.Class $r4, $r7, $r14, $r18, $r21, $r24;

        r0 := @this: org.springframework.core.convert.support.PropertyTypeDescriptor;

        r40 = r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.lang.'annotation'.Annotation[] cachedAnnotations>;

        if r40 != null goto label15;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor>;

        $r3 = virtualinvoke $r2.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r3);

        if $z0 == 0 goto label04;

        $r19 = virtualinvoke r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        $r20 = virtualinvoke $r19.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        $r21 = virtualinvoke $r20.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r22 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String)>($r21, $r3);

        r41 = $r22;

        if $r22 != null goto label01;

        $r25 = new java.lang.StringBuilder;

        $r26 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String toLowerCase()>();

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String)>($r21, $r31);

        r41 = $r32;

        if $r32 != null goto label01;

        $r33 = new java.lang.StringBuilder;

        $r34 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r35 = virtualinvoke $r34.<java.lang.String: java.lang.String toUpperCase()>();

        $r36 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r35);

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>($r36);

        $r37 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(1);

        $r38 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r41 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Field findField(java.lang.Class,java.lang.String)>($r21, $r39);

     label01:
        if r41 == null goto label04;

        $r23 = virtualinvoke r41.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i1 = lengthof $r23;

        i2 = 0;

        goto label03;

     label02:
        r42 = $r23[i2];

        $r24 = interfaceinvoke r42.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r42);

        i2 = i2 + 1;

     label03:
        if i2 < i1 goto label02;

     label04:
        $r43 = r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor>;

        $r44 = virtualinvoke $r43.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        $r45 = r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor>;

        $r46 = virtualinvoke $r45.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if $r44 == null goto label07;

        $r15 = virtualinvoke r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        $r16 = virtualinvoke $r15.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        if $r44 == $r16 goto label07;

        $r17 = virtualinvoke $r44.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i3 = lengthof $r17;

        i4 = 0;

        goto label06;

     label05:
        r47 = $r17[i4];

        $r18 = interfaceinvoke r47.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r47);

        i4 = i4 + 1;

     label06:
        if i4 < i3 goto label05;

     label07:
        if $r46 == null goto label10;

        $r11 = virtualinvoke r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        $r12 = virtualinvoke $r11.<org.springframework.core.MethodParameter: java.lang.reflect.Method getMethod()>();

        if $r46 == $r12 goto label10;

        $r13 = virtualinvoke $r46.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i5 = lengthof $r13;

        i6 = 0;

        goto label09;

     label08:
        r48 = $r13[i6];

        $r14 = interfaceinvoke r48.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r48);

        i6 = i6 + 1;

     label09:
        if i6 < i5 goto label08;

     label10:
        $r49 = virtualinvoke r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        $r50 = virtualinvoke $r49.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getMethodAnnotations()>();

        $i7 = lengthof $r50;

        i8 = 0;

        goto label12;

     label11:
        r51 = $r50[i8];

        $r4 = interfaceinvoke r51.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r51);

        i8 = i8 + 1;

     label12:
        if i8 < $i7 goto label11;

        $r5 = virtualinvoke r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        $r6 = virtualinvoke $r5.<org.springframework.core.MethodParameter: java.lang.'annotation'.Annotation[] getParameterAnnotations()>();

        i9 = lengthof $r6;

        i10 = 0;

        goto label14;

     label13:
        r52 = $r6[i10];

        $r7 = interfaceinvoke r52.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r52);

        i10 = i10 + 1;

     label14:
        if i10 < i9 goto label13;

        $r8 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        $r9 = newarray (java.lang.'annotation'.Annotation)[$i0];

        $r10 = interfaceinvoke $r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r40 = (java.lang.'annotation'.Annotation[]) $r10;

        r0.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.lang.'annotation'.Annotation[] cachedAnnotations> = r40;

     label15:
        return r40;
    }

    public org.springframework.core.convert.TypeDescriptor forElementType(java.lang.Class)
    {
        org.springframework.core.convert.support.PropertyTypeDescriptor r1, $r3;
        org.springframework.core.convert.TypeDescriptor $r2;
        java.beans.PropertyDescriptor $r4;
        org.springframework.core.MethodParameter $r5;
        java.lang.Class r0;

        r1 := @this: org.springframework.core.convert.support.PropertyTypeDescriptor;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r3 = new org.springframework.core.convert.support.PropertyTypeDescriptor;

        $r4 = r1.<org.springframework.core.convert.support.PropertyTypeDescriptor: java.beans.PropertyDescriptor propertyDescriptor>;

        $r5 = virtualinvoke r1.<org.springframework.core.convert.support.PropertyTypeDescriptor: org.springframework.core.MethodParameter getMethodParameter()>();

        specialinvoke $r3.<org.springframework.core.convert.support.PropertyTypeDescriptor: void <init>(java.beans.PropertyDescriptor,org.springframework.core.MethodParameter,java.lang.Class)>($r4, $r5, r0);

        return $r3;

     label1:
        $r2 = specialinvoke r1.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forElementType(java.lang.Class)>(null);

        return $r2;
    }
}
