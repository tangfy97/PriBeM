public final class org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation extends java.lang.Object
{

    private void <init>()
    {
        org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final org.apache.lucene.queryparser.flexible.core.nodes.QueryNode logicalAnd(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode $r12;
        java.lang.CloneNotSupportedException $r13;
        java.util.ArrayList $r9;
        int[] $r16;
        int $i0, $i1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, r1, $r2, $r3, $r5, $r6, $r7, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.apache.lucene.queryparser.flexible.core.QueryNodeError $r14;
        java.util.List $r4;
        org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation r15;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r1 := @parameter1: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        if r0 != null goto label01;

        return r1;

     label01:
        if r1 != null goto label02;

        return r0;

     label02:
        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z0 == 0 goto label03;

        $z3 = r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z3 == 0 goto label03;

        r15 = <org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation: org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation BOTH>;

        goto label06;

     label03:
        $z1 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z1 == 0 goto label04;

        r15 = <org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation: org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation Q1>;

        goto label06;

     label04:
        $z2 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        if $z2 == 0 goto label05;

        r15 = <org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation: org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation Q2>;

        goto label06;

     label05:
        r15 = <org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation: org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation NONE>;

     label06:
        $r16 = <org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$1: int[] $SwitchMap$org$apache$lucene$queryparser$flexible$core$util$QueryNodeOperation$ANDOperation>;

        $i0 = virtualinvoke r15.<org.apache.lucene.queryparser.flexible.core.util.QueryNodeOperation$ANDOperation: int ordinal()>();

        $i1 = $r16[$i0];

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label09;
            case 3: goto label11;
            case 4: goto label13;
            default: goto label15;
        };

     label07:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = interfaceinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = new org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode;

        specialinvoke $r12.<org.apache.lucene.queryparser.flexible.core.nodes.AndQueryNode: void <init>(java.util.List)>($r9);

     label08:
        return $r12;

     label09:
        $r7 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        $r8 = interfaceinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        interfaceinvoke $r7.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r8);

     label10:
        return $r7;

     label11:
        $r5 = interfaceinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        $r6 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        interfaceinvoke $r5.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r6);

     label12:
        return $r5;

     label13:
        $r2 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        $r3 = interfaceinvoke r1.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        $r4 = interfaceinvoke $r3.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        interfaceinvoke $r2.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void add(java.util.List)>($r4);

     label14:
        return $r2;

     label15:
        goto label17;

     label16:
        $r13 := @caughtexception;

        $r14 = new org.apache.lucene.queryparser.flexible.core.QueryNodeError;

        specialinvoke $r14.<org.apache.lucene.queryparser.flexible.core.QueryNodeError: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label17:
        return null;

        catch java.lang.CloneNotSupportedException from label06 to label08 with label16;
        catch java.lang.CloneNotSupportedException from label09 to label10 with label16;
        catch java.lang.CloneNotSupportedException from label11 to label12 with label16;
        catch java.lang.CloneNotSupportedException from label13 to label14 with label16;
    }
}
