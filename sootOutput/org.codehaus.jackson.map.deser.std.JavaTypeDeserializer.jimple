public class org.codehaus.jackson.map.deser.std.JavaTypeDeserializer extends org.codehaus.jackson.map.deser.std.StdScalarDeserializer
{

    public void <init>()
    {
        org.codehaus.jackson.map.deser.std.JavaTypeDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.deser.std.JavaTypeDeserializer;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Lorg/codehaus/jackson/type/JavaType;");

        return;
    }

    public org.codehaus.jackson.type.JavaType deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3;
        org.codehaus.jackson.map.deser.std.JavaTypeDeserializer r5;
        org.codehaus.jackson.map.DeserializationContext r4;
        org.codehaus.jackson.map.type.TypeFactory $r12;
        org.codehaus.jackson.map.JsonMappingException $r7;
        int $i0;
        org.codehaus.jackson.type.JavaType $r9, $r13, $r15;
        java.lang.String $r10, $r11;
        org.codehaus.jackson.JsonParser r0;
        java.lang.Class $r6;
        java.lang.Object $r8, $r14;

        r5 := @this: org.codehaus.jackson.map.deser.std.JavaTypeDeserializer;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r4 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label2;

        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r14 = virtualinvoke r5.<org.codehaus.jackson.map.deser.std.JavaTypeDeserializer: java.lang.Object getEmptyValue()>();

        $r15 = (org.codehaus.jackson.type.JavaType) $r14;

        return $r15;

     label1:
        $r12 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType constructFromCanonical(java.lang.String)>($r11);

        return $r13;

     label2:
        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r1 != $r3 goto label3;

        $r8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        $r9 = (org.codehaus.jackson.type.JavaType) $r8;

        return $r9;

     label3:
        $r6 = r5.<org.codehaus.jackson.map.deser.std.JavaTypeDeserializer: java.lang.Class _valueClass>;

        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.DeserializationContext: org.codehaus.jackson.map.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r7;
    }

    public volatile java.lang.Object deserialize(org.codehaus.jackson.JsonParser, org.codehaus.jackson.map.DeserializationContext) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.deser.std.JavaTypeDeserializer r0;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.JsonParser r1;
        org.codehaus.jackson.map.DeserializationContext r2;

        r0 := @this: org.codehaus.jackson.map.deser.std.JavaTypeDeserializer;

        r1 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.map.DeserializationContext;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.deser.std.JavaTypeDeserializer: org.codehaus.jackson.type.JavaType deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)>(r1, r2);

        return $r3;
    }
}
