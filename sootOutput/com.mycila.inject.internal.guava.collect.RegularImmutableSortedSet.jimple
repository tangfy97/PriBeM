final class com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet extends com.mycila.inject.internal.guava.collect.ImmutableSortedSet
{
    private final transient com.mycila.inject.internal.guava.collect.ImmutableList elements;

    void <init>(com.mycila.inject.internal.guava.collect.ImmutableList, java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.util.Comparator r1;
        com.mycila.inject.internal.guava.collect.ImmutableList r2;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableList;

        r1 := @parameter1: java.util.Comparator;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: void <init>(java.util.Comparator)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements> = r2;

        $z0 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z1);

        return;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r2;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        return 0;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r1;
        int $i0;
        java.lang.Object r0;
        java.lang.ClassCastException $r2;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int binarySearch(java.lang.Object)>(r0);

        if $i0 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label1 to label3 with label4;
    }

    public boolean containsAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.util.Iterator $r4;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r3;
        java.util.Collection r2;
        java.lang.ClassCastException $r6;
        java.lang.NullPointerException $r7;
        int $i0, $i1;
        java.lang.Object $r5, r8;
        java.util.Comparator $r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r2 := @parameter0: java.util.Collection;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator()>();

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>($r1, r2);

        if $z0 == 0 goto label01;

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        if $i0 > 1 goto label02;

     label01:
        $z1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: boolean containsAll(java.util.Collection)>(r2);

        return $z1;

     label02:
        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        $r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

        r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

     label03:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $i1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int unsafeCompare(java.lang.Object,java.lang.Object)>($r5, r8);

        if $i1 != 0 goto label06;

        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label05;

     label04:
        return 1;

     label05:
        r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        goto label08;

     label06:
        if $i1 <= 0 goto label08;

     label07:
        return 0;

     label08:
        goto label03;

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

        return 0;

     label11:
        $r6 := @caughtexception;

        return 0;

     label12:
        return 0;

        catch java.lang.NullPointerException from label03 to label04 with label10;
        catch java.lang.NullPointerException from label05 to label07 with label10;
        catch java.lang.NullPointerException from label08 to label09 with label10;
        catch java.lang.ClassCastException from label03 to label04 with label11;
        catch java.lang.ClassCastException from label05 to label07 with label11;
        catch java.lang.ClassCastException from label08 to label09 with label11;
    }

    private int binarySearch(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        int $i0;
        java.lang.Object r2;
        java.util.Comparator r1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r2 := @parameter0: java.lang.Object;

        r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator>;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>($r3, r2, r1);

        return $i0;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isPartialView()>();

        return $z0;
    }

    public java.lang.Object[] toArray()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.lang.Object[] r1, $r3;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r5;
        java.lang.ClassCastException $r9;
        int $i0, $i1, $i2;
        java.util.NoSuchElementException $r8;
        boolean $z0, $z1, $z2, $z3;
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r1;
        java.util.Iterator $r4;
        java.util.Set r2;
        java.lang.Object r0, $r6, $r7;
        java.util.Comparator $r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r0 instanceof java.util.Set;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (java.util.Set) r0;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Set: int size()>();

        if $i0 == $i1 goto label03;

        return 0;

     label03:
        $r3 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator>;

        $z1 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedIterables: boolean hasSameComparator(java.util.Comparator,java.lang.Iterable)>($r3, r2);

        if $z1 == 0 goto label11;

        $r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $r5 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

     label05:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r7 == null goto label06;

        $i2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int unsafeCompare(java.lang.Object,java.lang.Object)>($r6, $r7);

        if $i2 == 0 goto label07;

     label06:
        return 0;

     label07:
        goto label05;

     label08:
        return 1;

     label09:
        $r9 := @caughtexception;

        return 0;

     label10:
        $r8 := @caughtexception;

        return 0;

     label11:
        $z2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: boolean containsAll(java.util.Collection)>(r2);

        return $z2;

        catch java.lang.ClassCastException from label04 to label06 with label09;
        catch java.lang.ClassCastException from label07 to label08 with label09;
        catch java.util.NoSuchElementException from label04 to label06 with label10;
        catch java.util.NoSuchElementException from label07 to label08 with label10;
    }

    public java.lang.Object first()
    {
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>(0);

        return $r2;
    }

    public java.lang.Object last()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        int $i0, $i1;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int size()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>($i1);

        return $r2;
    }

    com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSetImpl(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior $r5, $r11;
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r7;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2, $r8;
        int i0;
        java.lang.Object r1, $r3, $r9;
        java.util.Comparator $r4, $r10;
        com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior $r6, $r12;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator()>();

        $r12 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior FIRST_AFTER>;

        $r11 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER>;

        i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedLists: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior,com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior)>($r8, $r9, $r10, $r12, $r11);

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator()>();

        $r6 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT>;

        $r5 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER>;

        i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedLists: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior,com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior)>($r2, $r3, $r4, $r6, $r5);

     label2:
        $r7 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet createSubset(int,int)>(0, i0);

        return $r7;
    }

    com.mycila.inject.internal.guava.collect.ImmutableSortedSet subSetImpl(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.lang.Object r1, r3;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2, $r4;
        boolean z0, z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r3 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSetImpl(java.lang.Object,boolean)>(r1, z0);

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet headSetImpl(java.lang.Object,boolean)>(r3, z1);

        return $r4;
    }

    com.mycila.inject.internal.guava.collect.ImmutableSortedSet tailSetImpl(java.lang.Object, boolean)
    {
        com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior $r5, $r11;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r7;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2, $r8;
        int $i0, i1;
        boolean z0;
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.lang.Object r1, $r3, $r9;
        java.util.Comparator $r4, $r10;
        com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior $r6, $r12;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r10 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator()>();

        $r12 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior FIRST_PRESENT>;

        $r11 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER>;

        i1 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedLists: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior,com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior)>($r8, $r9, $r10, $r12, $r11);

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator()>();

        $r6 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior FIRST_AFTER>;

        $r5 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior NEXT_HIGHER>;

        i1 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedLists: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior,com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior)>($r2, $r3, $r4, $r6, $r5);

     label2:
        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int size()>();

        $r7 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet createSubset(int,int)>(i1, $i0);

        return $r7;
    }

    java.util.Comparator unsafeComparator()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        java.util.Comparator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator>;

        return $r1;
    }

    private com.mycila.inject.internal.guava.collect.ImmutableSortedSet createSubset(int, int)
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0, $r3;
        com.mycila.inject.internal.guava.collect.ImmutableSortedSet $r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r4, $r5;
        int i0, i1, $i2;
        java.util.Comparator $r1, $r6;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        $i2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: int size()>();

        if i1 != $i2 goto label1;

        return r0;

     label1:
        if i0 >= i1 goto label2;

        $r3 = new com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r4 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList subList(int,int)>(i0, i1);

        $r6 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator>;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: void <init>(com.mycila.inject.internal.guava.collect.ImmutableList,java.util.Comparator)>($r5, $r6);

        return $r3;

     label2:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator>;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableSortedSet emptySet(java.util.Comparator)>($r1);

        return $r2;
    }

    int indexOf(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior $r4;
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2, $r6;
        java.lang.ClassCastException $r8;
        int $i0, $i1, $i3, $i5, $i7;
        java.lang.Object r0, $r7;
        java.util.Comparator $r3;
        com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior $r5;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: java.util.Comparator comparator()>();

        $r5 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior ANY_PRESENT>;

        $r4 = <com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior: com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior INVERTED_INSERTION_INDEX>;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.SortedLists: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator,com.mycila.inject.internal.guava.collect.SortedLists$KeyPresentBehavior,com.mycila.inject.internal.guava.collect.SortedLists$KeyAbsentBehavior)>($r2, r0, $r3, $r5, $r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $i5 = (int) -1;

        return $i5;

     label4:
        if $i0 < 0 goto label5;

        $r6 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object get(int)>($i0);

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label5;

        $i1 = $i0;

        goto label6;

     label5:
        $i7 = (int) -1;

        $i1 = $i7;

     label6:
        return $i1;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    com.mycila.inject.internal.guava.collect.ImmutableList createAsList()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedAsList $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSortedAsList;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.ImmutableList elements>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedAsList: void <init>(com.mycila.inject.internal.guava.collect.ImmutableSortedSet,com.mycila.inject.internal.guava.collect.ImmutableList)>(r1, $r2);

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.RegularImmutableSortedSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }
}
