public class com.google.inject.servlet.ServletScopes extends java.lang.Object
{
    public static final com.google.inject.Scope REQUEST;
    public static final com.google.inject.Scope SESSION;
    private static final java.lang.ThreadLocal requestScopeContext;

    private void <init>()
    {
        com.google.inject.servlet.ServletScopes r0;

        r0 := @this: com.google.inject.servlet.ServletScopes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.Callable continueRequest(java.util.concurrent.Callable, java.util.Map)
    {
        com.google.inject.Key $r10, $r14;
        java.util.concurrent.Callable r6;
        javax.servlet.http.HttpServletRequest $r2;
        java.util.Map r0;
        java.lang.String $r15;
        boolean $z0, $z1;
        java.util.Map$Entry r8;
        java.util.Iterator $r4;
        com.google.inject.servlet.ContinuingHttpServletRequest $r1;
        java.util.Set $r3;
        java.lang.Object $r7, $r9, $r11, $r12, $r13;
        com.google.inject.servlet.ServletScopes$3 $r5;

        r6 := @parameter0: java.util.concurrent.Callable;

        r0 := @parameter1: java.util.Map;

        if null == r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Seed map cannot be null, try passing in Collections.emptyMap() instead.");

        $r1 = new com.google.inject.servlet.ContinuingHttpServletRequest;

        $r2 = staticinvoke <com.google.inject.servlet.GuiceFilter: javax.servlet.http.HttpServletRequest getRequest()>();

        specialinvoke $r1.<com.google.inject.servlet.ContinuingHttpServletRequest: void <init>(javax.servlet.http.HttpServletRequest)>($r2);

        $r3 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (com.google.inject.Key) $r9;

        $r11 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = staticinvoke <com.google.inject.servlet.ServletScopes: java.lang.Object validateAndCanonicalizeValue(com.google.inject.Key,java.lang.Object)>($r10, $r11);

        $r13 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (com.google.inject.Key) $r13;

        $r15 = virtualinvoke $r14.<com.google.inject.Key: java.lang.String toString()>();

        virtualinvoke $r1.<com.google.inject.servlet.ContinuingHttpServletRequest: void setAttribute(java.lang.String,java.lang.Object)>($r15, $r12);

        goto label3;

     label4:
        $r5 = new com.google.inject.servlet.ServletScopes$3;

        specialinvoke $r5.<com.google.inject.servlet.ServletScopes$3: void <init>(com.google.inject.servlet.ContinuingHttpServletRequest,java.util.concurrent.Callable)>($r1, r6);

        return $r5;
    }

    public static java.util.concurrent.Callable scopeRequest(java.util.concurrent.Callable, java.util.Map)
    {
        com.google.inject.Key $r9, $r13;
        java.util.HashMap $r1;
        java.util.concurrent.Callable r5;
        java.util.Map r0;
        java.lang.String $r14;
        boolean $z0, $z1;
        java.util.Map$Entry r7;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r6, $r8, $r10, $r11, $r12;
        com.google.inject.servlet.ServletScopes$4 $r4;

        r5 := @parameter0: java.util.concurrent.Callable;

        r0 := @parameter1: java.util.Map;

        if null == r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.inject.internal.util.$Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Seed map cannot be null, try passing in Collections.emptyMap() instead.");

        $r1 = staticinvoke <com.google.inject.internal.util.$Maps: java.util.HashMap newHashMap()>();

        $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (com.google.inject.Key) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = staticinvoke <com.google.inject.servlet.ServletScopes: java.lang.Object validateAndCanonicalizeValue(com.google.inject.Key,java.lang.Object)>($r9, $r10);

        $r12 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (com.google.inject.Key) $r12;

        $r14 = virtualinvoke $r13.<com.google.inject.Key: java.lang.String toString()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r11);

        goto label3;

     label4:
        $r4 = new com.google.inject.servlet.ServletScopes$4;

        specialinvoke $r4.<com.google.inject.servlet.ServletScopes$4: void <init>(java.util.Map,java.util.concurrent.Callable)>($r1, r5);

        return $r4;
    }

    private static java.lang.Object validateAndCanonicalizeValue(com.google.inject.Key, java.lang.Object)
    {
        com.google.inject.Key r3;
        java.lang.String $r12, $r17;
        com.google.inject.servlet.ServletScopes$NullObject $r1, $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object r0;
        java.lang.Class $r5, $r11;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16;
        com.google.inject.TypeLiteral $r4;

        r3 := @parameter0: com.google.inject.Key;

        r0 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $r2 = <com.google.inject.servlet.ServletScopes$NullObject: com.google.inject.servlet.ServletScopes$NullObject INSTANCE>;

        if r0 != $r2 goto label2;

     label1:
        $r1 = <com.google.inject.servlet.ServletScopes$NullObject: com.google.inject.servlet.ServletScopes$NullObject INSTANCE>;

        return $r1;

     label2:
        $r4 = virtualinvoke r3.<com.google.inject.Key: com.google.inject.TypeLiteral getTypeLiteral()>();

        $r5 = virtualinvoke $r4.<com.google.inject.TypeLiteral: java.lang.Class getRawType()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 != 0 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of type[");

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not compatible with key[");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r6;

     label3:
        return r0;
    }

    static java.lang.ThreadLocal access$000()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <com.google.inject.servlet.ServletScopes: java.lang.ThreadLocal requestScopeContext>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r2;
        com.google.inject.servlet.ServletScopes$1 $r0;
        com.google.inject.servlet.ServletScopes$2 $r1;

        $r0 = new com.google.inject.servlet.ServletScopes$1;

        specialinvoke $r0.<com.google.inject.servlet.ServletScopes$1: void <init>()>();

        <com.google.inject.servlet.ServletScopes: com.google.inject.Scope REQUEST> = $r0;

        $r1 = new com.google.inject.servlet.ServletScopes$2;

        specialinvoke $r1.<com.google.inject.servlet.ServletScopes$2: void <init>()>();

        <com.google.inject.servlet.ServletScopes: com.google.inject.Scope SESSION> = $r1;

        $r2 = new java.lang.ThreadLocal;

        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();

        <com.google.inject.servlet.ServletScopes: java.lang.ThreadLocal requestScopeContext> = $r2;

        return;
    }
}
