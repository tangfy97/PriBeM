class org.springframework.util.xml.StaxStreamXMLReader extends org.springframework.util.xml.AbstractStaxXMLReader
{
    private static final java.lang.String DEFAULT_XML_VERSION;
    private final javax.xml.stream.XMLStreamReader reader;
    private java.lang.String xmlVersion;
    private java.lang.String encoding;

    void <init>(javax.xml.stream.XMLStreamReader)
    {
        java.lang.IllegalStateException $r2;
        javax.xml.stream.XMLStreamReader r1;
        int $i0;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        specialinvoke r0.<org.springframework.util.xml.AbstractStaxXMLReader: void <init>()>();

        r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String xmlVersion> = "1.0";

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "\'reader\' must not be null");

        $i0 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if $i0 == 7 goto label1;

        if $i0 == 1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("XMLEventReader not at start of document or element");

        throw $r2;

     label1:
        r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader> = r1;

        return;
    }

    protected void parseInternal() throws org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader $r1, $r2, $r3;
        int i0, i1, $i3;
        org.springframework.util.xml.StaxStreamXMLReader r0;
        boolean z0, z1, $z2;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        z0 = 0;

        z1 = 0;

        i0 = 0;

        $r1 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        i1 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

     label01:
        if i1 == 7 goto label02;

        if i1 == 8 goto label02;

        if z0 != 0 goto label02;

        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleStartDocument()>();

        z0 = 1;

     label02:
        tableswitch(i1)
        {
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label09;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label10;
            case 12: goto label06;
            default: goto label12;
        };

     label03:
        i0 = i0 + 1;

        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleStartElement()>();

        goto label12;

     label04:
        $i3 = (int) -1;

        i0 = i0 + $i3;

        if i0 < 0 goto label12;

        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleEndElement()>();

        goto label12;

     label05:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleProcessingInstruction()>();

        goto label12;

     label06:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleCharacters()>();

        goto label12;

     label07:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleStartDocument()>();

        z0 = 1;

        goto label12;

     label08:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleEndDocument()>();

        z1 = 1;

        goto label12;

     label09:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleComment()>();

        goto label12;

     label10:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleDtd()>();

        goto label12;

     label11:
        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleEntityReference()>();

     label12:
        $r3 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $z2 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z2 == 0 goto label13;

        if i0 < 0 goto label13;

        $r2 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        i1 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label01;

     label13:
        if z1 != 0 goto label14;

        specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void handleEndDocument()>();

     label14:
        return;
    }

    private void handleStartDocument() throws org.xml.sax.SAXException
    {
        javax.xml.stream.XMLStreamReader $r1, $r2, $r7, $r8, $r9, $r11;
        int $i0;
        org.xml.sax.ContentHandler $r4, $r6, $r13;
        java.lang.String $r10, $r12;
        org.springframework.util.xml.StaxStreamXMLReader r0;
        boolean $z0, $z1, $z2;
        org.springframework.util.xml.StaxStreamXMLReader$1 $r5;
        javax.xml.stream.Location $r3;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 7 != $i0 goto label2;

        $r9 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r10 = interfaceinvoke $r9.<javax.xml.stream.XMLStreamReader: java.lang.String getVersion()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r10);

        if $z2 == 0 goto label1;

        r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String xmlVersion> = $r10;

     label1:
        $r11 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r12 = interfaceinvoke $r11.<javax.xml.stream.XMLStreamReader: java.lang.String getCharacterEncodingScheme()>();

        r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String encoding> = $r12;

     label2:
        $r13 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r13 == null goto label3;

        $r2 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r4 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = new org.springframework.util.xml.StaxStreamXMLReader$1;

        specialinvoke $r5.<org.springframework.util.xml.StaxStreamXMLReader$1: void <init>(org.springframework.util.xml.StaxStreamXMLReader,javax.xml.stream.Location)>(r0, $r3);

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void setDocumentLocator(org.xml.sax.Locator)>($r5);

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void startDocument()>();

        $r7 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: boolean standaloneSet()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $z1 = interfaceinvoke $r8.<javax.xml.stream.XMLStreamReader: boolean isStandalone()>();

        virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void setStandalone(boolean)>($z1);

     label3:
        return;
    }

    private void handleStartElement() throws org.xml.sax.SAXException
    {
        javax.xml.stream.XMLStreamReader $r2, $r7, $r8, $r10, $r12, $r14, $r21;
        org.xml.sax.Attributes $r6, $r20;
        int $i0, i1, i2, $i3;
        org.xml.sax.ContentHandler $r1, $r4, $r16;
        java.lang.String $r5, $r9, $r11, $r13, $r15, $r17, $r18, $r19;
        org.springframework.util.xml.StaxStreamXMLReader r0;
        boolean $z0, $z1;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label7;

        $r2 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: boolean hasNamespacesFeature()>();

        if $z0 == 0 goto label6;

        i1 = 0;

        goto label2;

     label1:
        $r8 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r9 = interfaceinvoke $r8.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i1);

        $r10 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r11 = interfaceinvoke $r10.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i1);

        virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void startPrefixMapping(java.lang.String,java.lang.String)>($r9, $r11);

        i1 = i1 + 1;

     label2:
        $r7 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        if i1 < $i0 goto label1;

        i2 = 0;

        goto label5;

     label3:
        $r12 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r13 = interfaceinvoke $r12.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i2);

        $r14 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r15 = interfaceinvoke $r14.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i2);

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r15);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void startPrefixMapping(java.lang.String,java.lang.String)>($r13, $r15);

     label4:
        i2 = i2 + 1;

     label5:
        $r21 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i3 = interfaceinvoke $r21.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        if i2 < $i3 goto label3;

        $r16 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r17 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r18 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r19 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        $r20 = specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.Attributes getAttributes()>();

        interfaceinvoke $r16.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r17, $r18, $r19, $r20);

        goto label7;

     label6:
        $r4 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        $r6 = specialinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.Attributes getAttributes()>();

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>("", "", $r5, $r6);

     label7:
        return;
    }

    private void handleEndElement() throws org.xml.sax.SAXException
    {
        javax.xml.stream.XMLStreamReader $r2, $r10, $r13;
        int i0, $i1;
        org.xml.sax.ContentHandler $r1, $r4, $r6;
        java.lang.String $r5, $r7, $r8, $r9, $r11, r12;
        org.springframework.util.xml.StaxStreamXMLReader r0;
        boolean $z0;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label5;

        $r2 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

        $z0 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: boolean hasNamespacesFeature()>();

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r7 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r7, $r8, $r9);

        i0 = 0;

        goto label3;

     label1:
        $r10 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r11 = interfaceinvoke $r10.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i0);

        r12 = $r11;

        if $r11 != null goto label2;

        r12 = "";

     label2:
        virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: void endPrefixMapping(java.lang.String)>(r12);

        i0 = i0 + 1;

     label3:
        $r13 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i1 = interfaceinvoke $r13.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        if i0 < $i1 goto label1;

        goto label5;

     label4:
        $r4 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r5 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r3);

        interfaceinvoke $r4.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>("", "", $r5);

     label5:
        return;
    }

    private void handleCharacters() throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r4, $r5, $r11, $r12;
        javax.xml.stream.XMLStreamReader $r2, $r3, $r7, $r9, $r10, $r13, $r15, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.xml.sax.ContentHandler $r1, $r6, $r14, $r19;
        org.springframework.util.xml.StaxStreamXMLReader r0;
        boolean $z0;
        char[] $r8, $r16;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label1;

        $r13 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $z0 = interfaceinvoke $r13.<javax.xml.stream.XMLStreamReader: boolean isWhiteSpace()>();

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r15 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r16 = interfaceinvoke $r15.<javax.xml.stream.XMLStreamReader: char[] getTextCharacters()>();

        $r17 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i4 = interfaceinvoke $r17.<javax.xml.stream.XMLStreamReader: int getTextStart()>();

        $r18 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i5 = interfaceinvoke $r18.<javax.xml.stream.XMLStreamReader: int getTextLength()>();

        interfaceinvoke $r14.<org.xml.sax.ContentHandler: void ignorableWhitespace(char[],int,int)>($r16, $i4, $i5);

        return;

     label1:
        $r2 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 12 != $i0 goto label2;

        $r11 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r11 == null goto label2;

        $r12 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r12.<org.xml.sax.ext.LexicalHandler: void startCDATA()>();

     label2:
        $r19 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r19 == null goto label3;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r7 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r8 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: char[] getTextCharacters()>();

        $r9 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i2 = interfaceinvoke $r9.<javax.xml.stream.XMLStreamReader: int getTextStart()>();

        $r10 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i3 = interfaceinvoke $r10.<javax.xml.stream.XMLStreamReader: int getTextLength()>();

        interfaceinvoke $r6.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r8, $i2, $i3);

     label3:
        $r3 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i1 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if 12 != $i1 goto label4;

        $r4 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r5.<org.xml.sax.ext.LexicalHandler: void endCDATA()>();

     label4:
        return;
    }

    private void handleComment() throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r1, $r2;
        javax.xml.stream.XMLStreamReader $r3, $r5, $r6;
        int $i0, $i1;
        char[] $r4;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r3 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: char[] getTextCharacters()>();

        $r5 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i0 = interfaceinvoke $r5.<javax.xml.stream.XMLStreamReader: int getTextStart()>();

        $r6 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i1 = interfaceinvoke $r6.<javax.xml.stream.XMLStreamReader: int getTextLength()>();

        interfaceinvoke $r2.<org.xml.sax.ext.LexicalHandler: void comment(char[],int,int)>($r4, $i0, $i1);

     label1:
        return;
    }

    private void handleDtd() throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r1, $r2, $r3, $r6;
        javax.xml.stream.XMLStreamReader $r4;
        javax.xml.stream.Location $r5;
        java.lang.String $r7, $r8;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r1 == null goto label1;

        $r4 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r7 = interfaceinvoke $r5.<javax.xml.stream.Location: java.lang.String getPublicId()>();

        $r8 = interfaceinvoke $r5.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        interfaceinvoke $r6.<org.xml.sax.ext.LexicalHandler: void startDTD(java.lang.String,java.lang.String,java.lang.String)>(null, $r7, $r8);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endDTD()>();

     label2:
        return;
    }

    private void handleEntityReference() throws org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler $r1, $r2, $r3, $r6;
        javax.xml.stream.XMLStreamReader $r4, $r7;
        java.lang.String $r5, $r8;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r1 == null goto label1;

        $r6 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r7 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r8 = interfaceinvoke $r7.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        interfaceinvoke $r6.<org.xml.sax.ext.LexicalHandler: void startEntity(java.lang.String)>($r8);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ext.LexicalHandler getLexicalHandler()>();

        $r4 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        interfaceinvoke $r3.<org.xml.sax.ext.LexicalHandler: void endEntity(java.lang.String)>($r5);

     label2:
        return;
    }

    private void handleEndDocument() throws org.xml.sax.SAXException
    {
        org.xml.sax.ContentHandler $r1, $r2;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void endDocument()>();

     label1:
        return;
    }

    private void handleProcessingInstruction() throws org.xml.sax.SAXException
    {
        javax.xml.stream.XMLStreamReader $r3, $r5;
        org.xml.sax.ContentHandler $r1, $r2;
        java.lang.String $r4, $r6;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<org.springframework.util.xml.StaxStreamXMLReader: org.xml.sax.ContentHandler getContentHandler()>();

        $r3 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r5 = r0.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r6 = interfaceinvoke $r5.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        interfaceinvoke $r2.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>($r4, $r6);

     label1:
        return;
    }

    private org.xml.sax.Attributes getAttributes()
    {
        javax.xml.stream.XMLStreamReader $r2, $r4, $r6, $r9, $r11, $r13, $r18, $r21, $r23;
        int i0, $i1, i2, $i3;
        java.lang.String $r3, $r5, $r8, $r10, $r12, $r14, r17, $r19, r20, r22;
        org.springframework.util.xml.StaxStreamXMLReader r1;
        boolean $z0, $z1, $z2;
        org.xml.sax.helpers.AttributesImpl $r0;
        java.lang.StringBuilder $r15, $r16;
        javax.xml.namespace.QName $r7;

        r1 := @this: org.springframework.util.xml.StaxStreamXMLReader;

        $r0 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r0.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        i0 = 0;

        goto label05;

     label01:
        $r2 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i0);

        r17 = $r3;

        if $r3 == null goto label02;

        $z0 = virtualinvoke r1.<org.springframework.util.xml.StaxStreamXMLReader: boolean hasNamespacesFeature()>();

        if $z0 != 0 goto label03;

     label02:
        r17 = "";

     label03:
        $r18 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r19 = interfaceinvoke $r18.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeType(int)>(i0);

        r20 = $r19;

        if $r19 != null goto label04;

        r20 = "CDATA";

     label04:
        $r4 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i0);

        $r6 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r7 = interfaceinvoke $r6.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getAttributeName(int)>(i0);

        $r8 = virtualinvoke r1.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String toQualifiedName(javax.xml.namespace.QName)>($r7);

        $r9 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r10 = interfaceinvoke $r9.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i0);

        virtualinvoke $r0.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r17, $r5, $r8, r20, $r10);

        i0 = i0 + 1;

     label05:
        $r21 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i1 = interfaceinvoke $r21.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        if i0 < $i1 goto label01;

        $z1 = virtualinvoke r1.<org.springframework.util.xml.StaxStreamXMLReader: boolean hasNamespacePrefixesFeature()>();

        if $z1 == 0 goto label10;

        i2 = 0;

        goto label09;

     label06:
        $r11 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r12 = interfaceinvoke $r11.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i2);

        $r13 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $r14 = interfaceinvoke $r13.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i2);

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r12);

        if $z2 == 0 goto label07;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("xmlns:");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        r22 = "xmlns";

     label08:
        virtualinvoke $r0.<org.xml.sax.helpers.AttributesImpl: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "", r22, "CDATA", $r14);

        i2 = i2 + 1;

     label09:
        $r23 = r1.<org.springframework.util.xml.StaxStreamXMLReader: javax.xml.stream.XMLStreamReader reader>;

        $i3 = interfaceinvoke $r23.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        if i2 < $i3 goto label06;

     label10:
        return $r0;
    }

    static java.lang.String access$0(org.springframework.util.xml.StaxStreamXMLReader)
    {
        java.lang.String $r1;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @parameter0: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String xmlVersion>;

        return $r1;
    }

    static java.lang.String access$1(org.springframework.util.xml.StaxStreamXMLReader)
    {
        java.lang.String $r1;
        org.springframework.util.xml.StaxStreamXMLReader r0;

        r0 := @parameter0: org.springframework.util.xml.StaxStreamXMLReader;

        $r1 = r0.<org.springframework.util.xml.StaxStreamXMLReader: java.lang.String encoding>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.util.xml.StaxStreamXMLReader: java.lang.String DEFAULT_XML_VERSION> = "1.0";

        return;
    }
}
