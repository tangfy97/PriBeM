class org.jdesktop.swingx.table.StrictNumberFormatter extends javax.swing.text.NumberFormatter
{
    private java.math.BigDecimal maxAsBig;
    private java.math.BigDecimal minAsBig;

    public void <init>(java.text.NumberFormat)
    {
        org.jdesktop.swingx.table.StrictNumberFormatter r0;
        java.text.NumberFormat r1;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.text.NumberFormat;

        specialinvoke r0.<javax.swing.text.NumberFormatter: void <init>(java.text.NumberFormat)>(r1);

        return;
    }

    public void setValueClass(java.lang.Class)
    {
        java.lang.Class r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<javax.swing.text.NumberFormatter: void setValueClass(java.lang.Class)>(r1);

        specialinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: void updateMinMax()>();

        return;
    }

    private void updateMinMax()
    {
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.Comparable r7, r8;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r7 = null;

        r8 = null;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        if $r1 != class "Ljava/lang/Integer;" goto label1;

        r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        goto label6;

     label1:
        $r2 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        if $r2 != class "Ljava/lang/Long;" goto label2;

        r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        goto label6;

     label2:
        $r3 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        if $r3 != class "Ljava/lang/Short;" goto label3;

        r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(32767);

        r7 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(-32768);

        goto label6;

     label3:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        if $r4 != class "Ljava/lang/Byte;" goto label4;

        r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        goto label6;

     label4:
        $r5 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        if $r5 != class "Ljava/lang/Float;" goto label5;

        r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.4028235E38F);

        r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        goto label6;

     label5:
        $r6 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        if $r6 != class "Ljava/lang/Double;" goto label6;

     label6:
        virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: void setMaximum(java.lang.Comparable)>(r8);

        virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: void setMinimum(java.lang.Comparable)>(r7);

        return;
    }

    public void setMaximum(java.lang.Comparable)
    {
        java.math.BigDecimal $r3;
        java.lang.Comparable r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;
        java.lang.String $r2;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.lang.Comparable;

        specialinvoke r0.<javax.swing.text.NumberFormatter: void setMaximum(java.lang.Comparable)>(r1);

        if r1 == null goto label1;

        $r3 = new java.math.BigDecimal;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.math.BigDecimal maxAsBig> = $r3;

        return;
    }

    public void setMinimum(java.lang.Comparable)
    {
        java.math.BigDecimal $r3;
        java.lang.Comparable r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;
        java.lang.String $r2;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.lang.Comparable;

        specialinvoke r0.<javax.swing.text.NumberFormatter: void setMinimum(java.lang.Comparable)>(r1);

        if r1 == null goto label1;

        $r3 = new java.math.BigDecimal;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.math.BigDecimal minAsBig> = $r3;

        return;
    }

    public java.lang.Object stringToValue(java.lang.String) throws java.text.ParseException
    {
        java.text.Format $r2;
        java.lang.ClassCastException $r7;
        java.lang.Object $r3, $r5;
        java.lang.Class $r4;
        java.lang.StringBuilder $r9, $r10, $r11;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;
        java.lang.String r1, $r12;
        java.text.ParseException $r6, $r8;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.text.Format getFormat()>();

        $r3 = specialinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Object getParsedValue(java.lang.String,java.text.Format)>(r1, $r2);

     label1:
        $z0 = specialinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: boolean isValueInRange(java.lang.Object,boolean)>($r3, 1);

        if $z0 != 0 goto label2;

        $r6 = new java.text.ParseException;

        specialinvoke $r6.<java.text.ParseException: void <init>(java.lang.String,int)>("Value not within min/max range", 0);

        throw $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.text.ParseException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class cast exception comparing values: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.text.ParseException: void <init>(java.lang.String,int)>($r12, 0);

        throw $r8;

     label4:
        $r4 = virtualinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Class getValueClass()>();

        $r5 = specialinvoke r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Object convertValueToValueClass(java.lang.Object,java.lang.Class)>($r3, $r4);

        return $r5;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    private java.lang.Object convertValueToValueClass(java.lang.Object, java.lang.Class)
    {
        java.lang.Float $r8;
        java.lang.Double $r6;
        long $l2;
        java.lang.Integer $r12;
        short $s0;
        byte $b1;
        java.lang.Long $r10;
        java.lang.Short $r2;
        int $i3;
        java.lang.Number $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.Byte $r4;
        boolean $z0;
        double $d0;
        float $f0;
        java.lang.Class r0;
        java.lang.Object r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r14;

        r14 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Class;

        if r0 == null goto label6;

        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label6;

        if r0 != class "Ljava/lang/Integer;" goto label1;

        $r12 = new java.lang.Integer;

        $r13 = (java.lang.Number) r1;

        $i3 = virtualinvoke $r13.<java.lang.Number: int intValue()>();

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i3);

        return $r12;

     label1:
        if r0 != class "Ljava/lang/Long;" goto label2;

        $r10 = new java.lang.Long;

        $r11 = (java.lang.Number) r1;

        $l2 = virtualinvoke $r11.<java.lang.Number: long longValue()>();

        specialinvoke $r10.<java.lang.Long: void <init>(long)>($l2);

        return $r10;

     label2:
        if r0 != class "Ljava/lang/Float;" goto label3;

        $r8 = new java.lang.Float;

        $r9 = (java.lang.Number) r1;

        $f0 = virtualinvoke $r9.<java.lang.Number: float floatValue()>();

        specialinvoke $r8.<java.lang.Float: void <init>(float)>($f0);

        return $r8;

     label3:
        if r0 != class "Ljava/lang/Double;" goto label4;

        $r6 = new java.lang.Double;

        $r7 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r7.<java.lang.Number: double doubleValue()>();

        specialinvoke $r6.<java.lang.Double: void <init>(double)>($d0);

        return $r6;

     label4:
        if r0 != class "Ljava/lang/Byte;" goto label5;

        $r4 = new java.lang.Byte;

        $r5 = (java.lang.Number) r1;

        $b1 = virtualinvoke $r5.<java.lang.Number: byte byteValue()>();

        specialinvoke $r4.<java.lang.Byte: void <init>(byte)>($b1);

        return $r4;

     label5:
        if r0 != class "Ljava/lang/Short;" goto label6;

        $r2 = new java.lang.Short;

        $r3 = (java.lang.Number) r1;

        $s0 = virtualinvoke $r3.<java.lang.Number: short shortValue()>();

        specialinvoke $r2.<java.lang.Short: void <init>(short)>($s0);

        return $r2;

     label6:
        return r1;
    }

    private java.lang.Object getParsedValue(java.lang.String, java.text.Format) throws java.text.ParseException
    {
        java.text.Format r0;
        java.lang.Object $r2;
        java.lang.String r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r3;

        r3 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.text.Format;

        if r0 != null goto label1;

        return r1;

     label1:
        $r2 = virtualinvoke r0.<java.text.Format: java.lang.Object parseObject(java.lang.String)>(r1);

        return $r2;
    }

    private boolean isValueInRange(java.lang.Object, boolean)
    {
        java.lang.ClassCastException $r8, $r9;
        java.math.BigDecimal $r3;
        int $i0, $i1;
        java.lang.Object r0;
        java.lang.Comparable $r2, $r5, $r6, $r7;
        org.jdesktop.swingx.table.StrictNumberFormatter r1;
        java.lang.String $r4;
        boolean z0;

        r1 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        r0 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if r0 != null goto label01;

        return 1;

     label01:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Comparable getMinimum()>();

        if $r2 != null goto label02;

        $r7 = virtualinvoke r1.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Comparable getMaximum()>();

        if $r7 != null goto label02;

        return 1;

     label02:
        $r3 = new java.math.BigDecimal;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>($r4);

        $r5 = specialinvoke r1.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Comparable getMinimumAsBig()>();

     label03:
        if $r5 == null goto label05;

        $i1 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        if $i1 <= 0 goto label05;

     label04:
        return 0;

     label05:
        goto label08;

     label06:
        $r9 := @caughtexception;

        if z0 == 0 goto label07;

        throw $r9;

     label07:
        return 0;

     label08:
        $r6 = specialinvoke r1.<org.jdesktop.swingx.table.StrictNumberFormatter: java.lang.Comparable getMaximumAsBig()>();

     label09:
        if $r6 == null goto label11;

        $i0 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        if $i0 >= 0 goto label11;

     label10:
        return 0;

     label11:
        goto label14;

     label12:
        $r8 := @caughtexception;

        if z0 == 0 goto label13;

        throw $r8;

     label13:
        return 0;

     label14:
        return 1;

        catch java.lang.ClassCastException from label03 to label04 with label06;
        catch java.lang.ClassCastException from label09 to label10 with label12;
    }

    private java.lang.Comparable getMinimumAsBig()
    {
        java.math.BigDecimal $r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        $r1 = r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.math.BigDecimal minAsBig>;

        return $r1;
    }

    private java.lang.Comparable getMaximumAsBig()
    {
        java.math.BigDecimal $r1;
        org.jdesktop.swingx.table.StrictNumberFormatter r0;

        r0 := @this: org.jdesktop.swingx.table.StrictNumberFormatter;

        $r1 = r0.<org.jdesktop.swingx.table.StrictNumberFormatter: java.math.BigDecimal maxAsBig>;

        return $r1;
    }
}
