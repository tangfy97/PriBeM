public class org.apache.log4j.Hierarchy extends java.lang.Object implements org.apache.log4j.spi.LoggerRepository, org.apache.log4j.spi.RendererSupport, org.apache.log4j.spi.ThrowableRendererSupport
{
    private org.apache.log4j.spi.LoggerFactory defaultFactory;
    private java.util.Vector listeners;
    java.util.Hashtable ht;
    org.apache.log4j.Logger root;
    org.apache.log4j.or.RendererMap rendererMap;
    int thresholdInt;
    org.apache.log4j.Level threshold;
    boolean emittedNoAppenderWarning;
    boolean emittedNoResourceBundleWarning;
    private org.apache.log4j.spi.ThrowableRenderer throwableRenderer;

    public void <init>(org.apache.log4j.Logger)
    {
        org.apache.log4j.DefaultCategoryFactory $r7;
        org.apache.log4j.or.RendererMap $r6;
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger r3, $r5;
        java.util.Vector $r2;
        org.apache.log4j.Level $r4;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        r3 := @parameter0: org.apache.log4j.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: boolean emittedNoAppenderWarning> = 0;

        r0.<org.apache.log4j.Hierarchy: boolean emittedNoResourceBundleWarning> = 0;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer> = null;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(1);

        r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners> = $r2;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root> = r3;

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        virtualinvoke r0.<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>($r4);

        $r5 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        virtualinvoke $r5.<org.apache.log4j.Category: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>(r0);

        $r6 = new org.apache.log4j.or.RendererMap;

        specialinvoke $r6.<org.apache.log4j.or.RendererMap: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap> = $r6;

        $r7 = new org.apache.log4j.DefaultCategoryFactory;

        specialinvoke $r7.<org.apache.log4j.DefaultCategoryFactory: void <init>()>();

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.LoggerFactory defaultFactory> = $r7;

        return;
    }

    public void addRenderer(java.lang.Class, org.apache.log4j.or.ObjectRenderer)
    {
        org.apache.log4j.or.ObjectRenderer r2;
        java.lang.Class r1;
        org.apache.log4j.or.RendererMap $r3;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.log4j.or.ObjectRenderer;

        $r3 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        virtualinvoke $r3.<org.apache.log4j.or.RendererMap: void put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>(r1, r2);

        return;
    }

    public void addHierarchyEventListener(org.apache.log4j.spi.HierarchyEventListener)
    {
        org.apache.log4j.spi.HierarchyEventListener r1;
        java.util.Vector $r2, $r3;
        org.apache.log4j.Hierarchy r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.spi.HierarchyEventListener;

        $r2 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("Ignoring attempt to add an existent listener.");

        goto label2;

     label1:
        $r3 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void clear()
    {
        java.util.Hashtable $r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void emitNoAppenderWarning(org.apache.log4j.Category)
    {
        org.apache.log4j.Hierarchy r0;
        java.lang.StringBuffer $r1, $r2, $r5, $r6;
        java.lang.String $r4, $r7;
        boolean $z0;
        org.apache.log4j.Category r3;

        r0 := @this: org.apache.log4j.Hierarchy;

        r3 := @parameter0: org.apache.log4j.Category;

        $z0 = r0.<org.apache.log4j.Hierarchy: boolean emittedNoAppenderWarning>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No appenders could be found for logger (");

        $r4 = virtualinvoke r3.<org.apache.log4j.Category: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(").");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r7);

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("Please initialize the log4j system properly.");

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.");

        r0.<org.apache.log4j.Hierarchy: boolean emittedNoAppenderWarning> = 1;

     label1:
        return;
    }

    public org.apache.log4j.Logger exists(java.lang.String)
    {
        org.apache.log4j.Logger $r5;
        org.apache.log4j.CategoryKey $r1;
        java.lang.Object $r4;
        java.lang.String r2;
        java.util.Hashtable $r3;
        org.apache.log4j.Hierarchy r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r2 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $r1 = new org.apache.log4j.CategoryKey;

        specialinvoke $r1.<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $z0 = $r4 instanceof org.apache.log4j.Logger;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.log4j.Logger) $r4;

        return $r5;

     label1:
        return null;
    }

    public void setThreshold(java.lang.String)
    {
        org.apache.log4j.Hierarchy r7;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        org.apache.log4j.Level $r1;
        java.lang.String r0, $r6;

        r7 := @this: org.apache.log4j.Hierarchy;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.log4j.Level: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>(r0, null);

        if $r1 == null goto label1;

        virtualinvoke r7.<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>($r1);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not convert [");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] to Level.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r6);

     label2:
        return;
    }

    public void setThreshold(org.apache.log4j.Level)
    {
        int $i0;
        org.apache.log4j.Level r0;
        org.apache.log4j.Hierarchy r1;

        r1 := @this: org.apache.log4j.Hierarchy;

        r0 := @parameter0: org.apache.log4j.Level;

        if r0 == null goto label1;

        $i0 = r0.<org.apache.log4j.Priority: int level>;

        r1.<org.apache.log4j.Hierarchy: int thresholdInt> = $i0;

        r1.<org.apache.log4j.Hierarchy: org.apache.log4j.Level threshold> = r0;

     label1:
        return;
    }

    public void fireAddAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.spi.HierarchyEventListener r5;
        org.apache.log4j.Hierarchy r0;
        java.util.Vector $r1, $r2, $r3;
        org.apache.log4j.Appender r7;
        int $i0, i1;
        java.lang.Object $r4;
        org.apache.log4j.Category r6;

        r0 := @this: org.apache.log4j.Hierarchy;

        r6 := @parameter0: org.apache.log4j.Category;

        r7 := @parameter1: org.apache.log4j.Appender;

        $r1 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r5 = (org.apache.log4j.spi.HierarchyEventListener) $r4;

        interfaceinvoke r5.<org.apache.log4j.spi.HierarchyEventListener: void addAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r6, r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void fireRemoveAppenderEvent(org.apache.log4j.Category, org.apache.log4j.Appender)
    {
        org.apache.log4j.spi.HierarchyEventListener r5;
        org.apache.log4j.Hierarchy r0;
        java.util.Vector $r1, $r2, $r3;
        org.apache.log4j.Appender r7;
        int $i0, i1;
        java.lang.Object $r4;
        org.apache.log4j.Category r6;

        r0 := @this: org.apache.log4j.Hierarchy;

        r6 := @parameter0: org.apache.log4j.Category;

        r7 := @parameter1: org.apache.log4j.Appender;

        $r1 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.log4j.Hierarchy: java.util.Vector listeners>;

        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r5 = (org.apache.log4j.spi.HierarchyEventListener) $r4;

        interfaceinvoke r5.<org.apache.log4j.spi.HierarchyEventListener: void removeAppenderEvent(org.apache.log4j.Category,org.apache.log4j.Appender)>(r6, r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.log4j.Level getThreshold()
    {
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Level $r1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Level threshold>;

        return $r1;
    }

    public org.apache.log4j.Logger getLogger(java.lang.String)
    {
        org.apache.log4j.Logger $r3;
        org.apache.log4j.spi.LoggerFactory $r2;
        java.lang.String r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.LoggerFactory defaultFactory>;

        $r3 = virtualinvoke r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getLogger(java.lang.String,org.apache.log4j.spi.LoggerFactory)>(r1, $r2);

        return $r3;
    }

    public org.apache.log4j.Logger getLogger(java.lang.String, org.apache.log4j.spi.LoggerFactory)
    {
        java.lang.Throwable $r13;
        org.apache.log4j.ProvisionNode $r9;
        org.apache.log4j.Hierarchy r2;
        org.apache.log4j.Logger $r7, $r10, $r11;
        java.lang.String r1;
        java.util.Hashtable $r3, $r4, $r8, $r12;
        boolean $z0, $z1;
        org.apache.log4j.CategoryKey $r0;
        org.apache.log4j.spi.LoggerFactory r6;
        java.lang.Object $r5;

        r2 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.log4j.spi.LoggerFactory;

        $r0 = new org.apache.log4j.CategoryKey;

        specialinvoke $r0.<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>(r1);

        $r3 = r2.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        entermonitor $r3;

     label01:
        $r4 = r2.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        if $r5 != null goto label03;

        $r11 = interfaceinvoke r6.<org.apache.log4j.spi.LoggerFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>(r1);

        virtualinvoke $r11.<org.apache.log4j.Category: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>(r2);

        $r12 = r2.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r11);

        specialinvoke r2.<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>($r11);

        exitmonitor $r3;

     label02:
        return $r11;

     label03:
        $z0 = $r5 instanceof org.apache.log4j.Logger;

        if $z0 == 0 goto label05;

        $r10 = (org.apache.log4j.Logger) $r5;

        exitmonitor $r3;

     label04:
        return $r10;

     label05:
        $z1 = $r5 instanceof org.apache.log4j.ProvisionNode;

        if $z1 == 0 goto label07;

        $r7 = interfaceinvoke r6.<org.apache.log4j.spi.LoggerFactory: org.apache.log4j.Logger makeNewLoggerInstance(java.lang.String)>(r1);

        virtualinvoke $r7.<org.apache.log4j.Category: void setHierarchy(org.apache.log4j.spi.LoggerRepository)>(r2);

        $r8 = r2.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r7);

        $r9 = (org.apache.log4j.ProvisionNode) $r5;

        specialinvoke r2.<org.apache.log4j.Hierarchy: void updateChildren(org.apache.log4j.ProvisionNode,org.apache.log4j.Logger)>($r9, $r7);

        specialinvoke r2.<org.apache.log4j.Hierarchy: void updateParents(org.apache.log4j.Logger)>($r7);

        exitmonitor $r3;

     label06:
        return $r7;

     label07:
        exitmonitor $r3;

     label08:
        return null;

     label09:
        $r13 := @caughtexception;

        exitmonitor $r3;

     label10:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.util.Enumeration getCurrentLoggers()
    {
        java.util.Enumeration $r4, $r5;
        org.apache.log4j.Hierarchy r1;
        java.util.Vector $r0;
        int $i0;
        java.lang.Object $r6;
        java.util.Hashtable $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.log4j.Hierarchy;

        $r0 = new java.util.Vector;

        $r2 = r1.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        specialinvoke $r0.<java.util.Vector: void <init>(int)>($i0);

        $r3 = r1.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z1 = $r6 instanceof org.apache.log4j.Logger;

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r6);

     label2:
        goto label1;

     label3:
        $r5 = virtualinvoke $r0.<java.util.Vector: java.util.Enumeration elements()>();

        return $r5;
    }

    public java.util.Enumeration getCurrentCategories()
    {
        java.util.Enumeration $r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

        return $r1;
    }

    public org.apache.log4j.or.RendererMap getRendererMap()
    {
        org.apache.log4j.or.RendererMap $r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        return $r1;
    }

    public org.apache.log4j.Logger getRootLogger()
    {
        org.apache.log4j.Logger $r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        return $r1;
    }

    public boolean isDisabled(int)
    {
        int i0, $i1;
        org.apache.log4j.Hierarchy r0;
        boolean $z0;

        r0 := @this: org.apache.log4j.Hierarchy;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.log4j.Hierarchy: int thresholdInt>;

        if $i1 <= i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void overrideAsNeeded(java.lang.String)
    {
        java.lang.String r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The Hiearchy.overrideAsNeeded method has been deprecated.");

        return;
    }

    public void resetConfiguration()
    {
        java.lang.Throwable $r10;
        java.util.Enumeration $r6;
        org.apache.log4j.or.RendererMap $r7;
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger $r1, $r3, r9;
        org.apache.log4j.Level $r2, $r4;
        java.lang.Object $r8;
        java.util.Hashtable $r5;
        boolean $z0;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = virtualinvoke r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>();

        $r2 = <org.apache.log4j.Level: org.apache.log4j.Level DEBUG>;

        virtualinvoke $r1.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>($r2);

        $r3 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        virtualinvoke $r3.<org.apache.log4j.Category: void setResourceBundle(java.util.ResourceBundle)>(null);

        $r4 = <org.apache.log4j.Level: org.apache.log4j.Level ALL>;

        virtualinvoke r0.<org.apache.log4j.Hierarchy: void setThreshold(org.apache.log4j.Level)>($r4);

        $r5 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        entermonitor $r5;

     label1:
        virtualinvoke r0.<org.apache.log4j.Hierarchy: void shutdown()>();

        $r6 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r6.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (org.apache.log4j.Logger) $r8;

        virtualinvoke r9.<org.apache.log4j.Category: void setLevel(org.apache.log4j.Level)>(null);

        virtualinvoke r9.<org.apache.log4j.Category: void setAdditivity(boolean)>(1);

        virtualinvoke r9.<org.apache.log4j.Category: void setResourceBundle(java.util.ResourceBundle)>(null);

        goto label2;

     label3:
        exitmonitor $r5;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r10;

     label7:
        $r7 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        virtualinvoke $r7.<org.apache.log4j.or.RendererMap: void clear()>();

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer> = null;

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setDisableOverride(java.lang.String)
    {
        java.lang.String r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.String;

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>("The Hiearchy.setDisableOverride method has been deprecated.");

        return;
    }

    public void setRenderer(java.lang.Class, org.apache.log4j.or.ObjectRenderer)
    {
        org.apache.log4j.or.ObjectRenderer r2;
        java.lang.Class r1;
        org.apache.log4j.or.RendererMap $r3;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.log4j.or.ObjectRenderer;

        $r3 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.or.RendererMap rendererMap>;

        virtualinvoke $r3.<org.apache.log4j.or.RendererMap: void put(java.lang.Class,org.apache.log4j.or.ObjectRenderer)>(r1, r2);

        return;
    }

    public void setThrowableRenderer(org.apache.log4j.spi.ThrowableRenderer)
    {
        org.apache.log4j.spi.ThrowableRenderer r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        r1 := @parameter0: org.apache.log4j.spi.ThrowableRenderer;

        r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer> = r1;

        return;
    }

    public org.apache.log4j.spi.ThrowableRenderer getThrowableRenderer()
    {
        org.apache.log4j.spi.ThrowableRenderer $r1;
        org.apache.log4j.Hierarchy r0;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = r0.<org.apache.log4j.Hierarchy: org.apache.log4j.spi.ThrowableRenderer throwableRenderer>;

        return $r1;
    }

    public void shutdown()
    {
        java.lang.Throwable $r7;
        java.util.Enumeration $r3, $r4;
        org.apache.log4j.Hierarchy r0;
        org.apache.log4j.Logger $r1, r8, r9;
        java.lang.Object $r5, $r6;
        java.util.Hashtable $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.log4j.Hierarchy;

        $r1 = virtualinvoke r0.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger getRootLogger()>();

        virtualinvoke $r1.<org.apache.log4j.Category: void closeNestedAppenders()>();

        $r2 = r0.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        entermonitor $r2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r8 = (org.apache.log4j.Logger) $r6;

        virtualinvoke r8.<org.apache.log4j.Category: void closeNestedAppenders()>();

        goto label2;

     label3:
        virtualinvoke $r1.<org.apache.log4j.Category: void removeAllAppenders()>();

        $r4 = virtualinvoke r0.<org.apache.log4j.Hierarchy: java.util.Enumeration getCurrentLoggers()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r9 = (org.apache.log4j.Logger) $r5;

        virtualinvoke r9.<org.apache.log4j.Category: void removeAllAppenders()>();

        goto label4;

     label5:
        exitmonitor $r2;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label8:
        throw $r7;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private final void updateParents(org.apache.log4j.Logger)
    {
        java.lang.IllegalStateException $r8;
        org.apache.log4j.ProvisionNode $r15, $r17;
        org.apache.log4j.Hierarchy r2;
        org.apache.log4j.Logger r0, $r3;
        java.lang.StringBuffer $r9, $r10, $r12, $r13;
        int $i0, $i1, i2, $i3;
        java.lang.String r1, $r4, $r14;
        java.util.Hashtable $r6, $r18;
        boolean $z0, $z1, z2;
        org.apache.log4j.Category $r16;
        org.apache.log4j.CategoryKey $r5;
        java.lang.Object $r7;
        java.lang.Class $r11;

        r2 := @this: org.apache.log4j.Hierarchy;

        r0 := @parameter0: org.apache.log4j.Logger;

        r1 = r0.<org.apache.log4j.Category: java.lang.String name>;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        z2 = 0;

        $i1 = $i0 - 1;

        i2 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int,int)>(46, $i1);

     label1:
        if i2 < 0 goto label6;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r5 = new org.apache.log4j.CategoryKey;

        specialinvoke $r5.<org.apache.log4j.CategoryKey: void <init>(java.lang.String)>($r4);

        $r6 = r2.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r5);

        if $r7 != null goto label2;

        $r17 = new org.apache.log4j.ProvisionNode;

        specialinvoke $r17.<org.apache.log4j.ProvisionNode: void <init>(org.apache.log4j.Logger)>(r0);

        $r18 = r2.<org.apache.log4j.Hierarchy: java.util.Hashtable ht>;

        virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r17);

        goto label5;

     label2:
        $z0 = $r7 instanceof org.apache.log4j.Category;

        if $z0 == 0 goto label3;

        z2 = 1;

        $r16 = (org.apache.log4j.Category) $r7;

        r0.<org.apache.log4j.Category: org.apache.log4j.Category parent> = $r16;

        goto label6;

     label3:
        $z1 = $r7 instanceof org.apache.log4j.ProvisionNode;

        if $z1 == 0 goto label4;

        $r15 = (org.apache.log4j.ProvisionNode) $r7;

        virtualinvoke $r15.<java.util.Vector: void addElement(java.lang.Object)>(r0);

        goto label5;

     label4:
        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected object type ");

        $r11 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in ht.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace()>();

     label5:
        $i3 = i2 - 1;

        i2 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int,int)>(46, $i3);

        goto label1;

     label6:
        if z2 != 0 goto label7;

        $r3 = r2.<org.apache.log4j.Hierarchy: org.apache.log4j.Logger root>;

        r0.<org.apache.log4j.Category: org.apache.log4j.Category parent> = $r3;

     label7:
        return;
    }

    private final void updateChildren(org.apache.log4j.ProvisionNode, org.apache.log4j.Logger)
    {
        org.apache.log4j.ProvisionNode r0;
        org.apache.log4j.Hierarchy r8;
        org.apache.log4j.Logger r2, r4;
        int $i0, i1;
        java.lang.Object $r1;
        java.lang.String $r5, $r6;
        org.apache.log4j.Category $r3, $r7;
        boolean $z0;

        r8 := @this: org.apache.log4j.Hierarchy;

        r0 := @parameter0: org.apache.log4j.ProvisionNode;

        r4 := @parameter1: org.apache.log4j.Logger;

        $i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label3;

        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r2 = (org.apache.log4j.Logger) $r1;

        $r3 = r2.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        $r6 = $r3.<org.apache.log4j.Category: java.lang.String name>;

        $r5 = r4.<org.apache.log4j.Category: java.lang.String name>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z0 != 0 goto label2;

        $r7 = r2.<org.apache.log4j.Category: org.apache.log4j.Category parent>;

        r4.<org.apache.log4j.Category: org.apache.log4j.Category parent> = $r7;

        r2.<org.apache.log4j.Category: org.apache.log4j.Category parent> = r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
}
