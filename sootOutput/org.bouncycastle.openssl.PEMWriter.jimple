public class org.bouncycastle.openssl.PEMWriter extends java.io.BufferedWriter
{
    private java.lang.String provider;

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        org.bouncycastle.openssl.PEMWriter r0;

        r0 := @this: org.bouncycastle.openssl.PEMWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<org.bouncycastle.openssl.PEMWriter: void <init>(java.io.Writer,java.lang.String)>(r1, "BC");

        return;
    }

    public void <init>(java.io.Writer, java.lang.String)
    {
        java.io.Writer r1;
        java.lang.String r2;
        org.bouncycastle.openssl.PEMWriter r0;

        r0 := @this: org.bouncycastle.openssl.PEMWriter;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r1);

        r0.<org.bouncycastle.openssl.PEMWriter: java.lang.String provider> = r2;

        return;
    }

    private void writeHexEncoded(byte[]) throws java.io.IOException
    {
        byte[] $r0, r2;
        char $c2;
        org.bouncycastle.openssl.PEMWriter r1;
        byte $b1;
        int $i0, i3, $i4;

        r1 := @this: org.bouncycastle.openssl.PEMWriter;

        r2 := @parameter0: byte[];

        $r0 = staticinvoke <org.bouncycastle.util.encoders.Hex: byte[] encode(byte[])>(r2);

        i3 = 0;

     label1:
        $i0 = lengthof $r0;

        if i3 == $i0 goto label2;

        $b1 = $r0[i3];

        $c2 = (char) $b1;

        $i4 = (int) $c2;

        virtualinvoke r1.<org.bouncycastle.openssl.PEMWriter: void write(int)>($i4);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void writeEncoded(byte[]) throws java.io.IOException
    {
        byte[] $r1, r3;
        char $c7;
        org.bouncycastle.openssl.PEMWriter r2;
        byte $b6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i8, i9;
        char[] r0;

        r2 := @this: org.bouncycastle.openssl.PEMWriter;

        r3 := @parameter0: byte[];

        r0 = newarray (char)[64];

        $r1 = staticinvoke <org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>(r3);

        i8 = 0;

     label1:
        $i0 = lengthof $r1;

        if i8 >= $i0 goto label5;

        i9 = 0;

     label2:
        $i1 = lengthof r0;

        if i9 == $i1 goto label4;

        $i4 = i8 + i9;

        $i3 = lengthof $r1;

        if $i4 < $i3 goto label3;

        goto label4;

     label3:
        $i5 = i8 + i9;

        $b6 = $r1[$i5];

        $c7 = (char) $b6;

        r0[i9] = $c7;

        i9 = i9 + 1;

        goto label2;

     label4:
        virtualinvoke r2.<org.bouncycastle.openssl.PEMWriter: void write(char[],int,int)>(r0, 0, i9);

        virtualinvoke r2.<org.bouncycastle.openssl.PEMWriter: void newLine()>();

        $i2 = lengthof r0;

        i8 = i8 + $i2;

        goto label1;

     label5:
        return;
    }

    public void writeObject(java.lang.Object) throws java.io.IOException
    {
        byte[] $r9, r55;
        java.security.KeyPair $r36;
        org.bouncycastle.asn1.ASN1Sequence $r11;
        java.security.cert.X509CRL $r38;
        java.math.BigInteger $r22, $r24, $r26, $r28, $r29, $r30, $r31;
        org.bouncycastle.asn1.cms.ContentInfo $r2;
        java.security.PrivateKey $r12, $r37;
        java.lang.StringBuilder $r42, $r43, $r45, $r49, $r50, $r52;
        java.security.cert.CertificateEncodingException $r47;
        org.bouncycastle.asn1.DERObject $r15, $r35;
        java.lang.String $r13, $r44, $r46, $r51, $r53, r54, r56, r57;
        java.io.IOException $r1, $r14, $r41, $r48;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r16;
        java.security.cert.X509Certificate $r39;
        org.bouncycastle.asn1.pkcs.PrivateKeyInfo $r7;
        org.bouncycastle.asn1.ASN1Object $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.bouncycastle.asn1.DERSequence $r34;
        java.security.Key $r8;
        java.security.cert.CRLException $r40;
        org.bouncycastle.x509.X509V2AttributeCertificate $r5;
        java.security.interfaces.DSAPrivateKey $r27;
        org.bouncycastle.asn1.DEREncodable $r17;
        org.bouncycastle.jce.PKCS10CertificationRequest $r4;
        org.bouncycastle.asn1.ASN1EncodableVector $r19;
        java.security.PublicKey $r6;
        org.bouncycastle.asn1.DERInteger $r20, $r21, $r23, $r25, $r32, $r33;
        org.bouncycastle.openssl.PEMWriter r3;
        org.bouncycastle.asn1.x509.DSAParameter $r18;
        java.lang.Object r0;

        r3 := @this: org.bouncycastle.openssl.PEMWriter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.security.cert.X509Certificate;

        if $z0 == 0 goto label04;

        r54 = "CERTIFICATE";

        r57 = "CERTIFICATE";

        r56 = "CERTIFICATE";

     label01:
        $r39 = (java.security.cert.X509Certificate) r0;

        r55 = virtualinvoke $r39.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label02:
        goto label19;

     label03:
        $r47 := @caughtexception;

        $r48 = new java.io.IOException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot encode object: ");

        $r51 = virtualinvoke $r47.<java.security.cert.CertificateEncodingException: java.lang.String toString()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.io.IOException: void <init>(java.lang.String)>($r53);

        throw $r48;

     label04:
        $z1 = r0 instanceof java.security.cert.X509CRL;

        if $z1 == 0 goto label08;

        r54 = "X509 CRL";

        r57 = "X509 CRL";

        r56 = "X509 CRL";

     label05:
        $r38 = (java.security.cert.X509CRL) r0;

        r55 = virtualinvoke $r38.<java.security.cert.X509CRL: byte[] getEncoded()>();

     label06:
        goto label19;

     label07:
        $r40 := @caughtexception;

        $r41 = new java.io.IOException;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot encode object: ");

        $r44 = virtualinvoke $r40.<java.security.cert.CRLException: java.lang.String toString()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String)>($r46);

        throw $r41;

     label08:
        $z2 = r0 instanceof java.security.KeyPair;

        if $z2 == 0 goto label09;

        $r36 = (java.security.KeyPair) r0;

        $r37 = virtualinvoke $r36.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke r3.<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object)>($r37);

        return;

     label09:
        $z3 = r0 instanceof java.security.PrivateKey;

        if $z3 == 0 goto label14;

        $r7 = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo;

        $r8 = (java.security.Key) r0;

        $r9 = interfaceinvoke $r8.<java.security.Key: byte[] getEncoded()>();

        $r10 = staticinvoke <org.bouncycastle.asn1.ASN1Object: org.bouncycastle.asn1.ASN1Object fromByteArray(byte[])>($r9);

        $r11 = (org.bouncycastle.asn1.ASN1Sequence) $r10;

        specialinvoke $r7.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r11);

        $z8 = r0 instanceof java.security.interfaces.RSAPrivateKey;

        if $z8 == 0 goto label10;

        r54 = "RSA PRIVATE KEY";

        r57 = "RSA PRIVATE KEY";

        r56 = "RSA PRIVATE KEY";

        $r35 = virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.DERObject getPrivateKey()>();

        r55 = virtualinvoke $r35.<org.bouncycastle.asn1.DERObject: byte[] getEncoded()>();

        goto label13;

     label10:
        $z9 = r0 instanceof java.security.interfaces.DSAPrivateKey;

        if $z9 == 0 goto label11;

        r54 = "DSA PRIVATE KEY";

        r57 = "DSA PRIVATE KEY";

        r56 = "DSA PRIVATE KEY";

        $r16 = virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r17 = virtualinvoke $r16.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DEREncodable getParameters()>();

        $r18 = staticinvoke <org.bouncycastle.asn1.x509.DSAParameter: org.bouncycastle.asn1.x509.DSAParameter getInstance(java.lang.Object)>($r17);

        $r19 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r20 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r20.<org.bouncycastle.asn1.DERInteger: void <init>(int)>(0);

        virtualinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r20);

        $r21 = new org.bouncycastle.asn1.DERInteger;

        $r22 = virtualinvoke $r18.<org.bouncycastle.asn1.x509.DSAParameter: java.math.BigInteger getP()>();

        specialinvoke $r21.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r22);

        virtualinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r21);

        $r23 = new org.bouncycastle.asn1.DERInteger;

        $r24 = virtualinvoke $r18.<org.bouncycastle.asn1.x509.DSAParameter: java.math.BigInteger getQ()>();

        specialinvoke $r23.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r24);

        virtualinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r23);

        $r25 = new org.bouncycastle.asn1.DERInteger;

        $r26 = virtualinvoke $r18.<org.bouncycastle.asn1.x509.DSAParameter: java.math.BigInteger getG()>();

        specialinvoke $r25.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r26);

        virtualinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r25);

        $r27 = (java.security.interfaces.DSAPrivateKey) r0;

        $r28 = interfaceinvoke $r27.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r29 = virtualinvoke $r18.<org.bouncycastle.asn1.x509.DSAParameter: java.math.BigInteger getG()>();

        $r30 = virtualinvoke $r18.<org.bouncycastle.asn1.x509.DSAParameter: java.math.BigInteger getP()>();

        $r31 = virtualinvoke $r29.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r28, $r30);

        $r32 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r32.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r31);

        virtualinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r32);

        $r33 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r33.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r28);

        virtualinvoke $r19.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r33);

        $r34 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r34.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r19);

        r55 = virtualinvoke $r34.<org.bouncycastle.asn1.DERSequence: byte[] getEncoded()>();

        goto label13;

     label11:
        $r12 = (java.security.PrivateKey) r0;

        $r13 = interfaceinvoke $r12.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("ECDSA");

        if $z10 == 0 goto label12;

        r54 = "EC PRIVATE KEY";

        r57 = "EC PRIVATE KEY";

        r56 = "EC PRIVATE KEY";

        $r15 = virtualinvoke $r7.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.DERObject getPrivateKey()>();

        r55 = virtualinvoke $r15.<org.bouncycastle.asn1.DERObject: byte[] getEncoded()>();

        goto label13;

     label12:
        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Cannot identify private key");

        throw $r14;

     label13:
        goto label19;

     label14:
        $z4 = r0 instanceof java.security.PublicKey;

        if $z4 == 0 goto label15;

        r54 = "PUBLIC KEY";

        r57 = "PUBLIC KEY";

        r56 = "PUBLIC KEY";

        $r6 = (java.security.PublicKey) r0;

        r55 = interfaceinvoke $r6.<java.security.PublicKey: byte[] getEncoded()>();

        goto label19;

     label15:
        $z5 = r0 instanceof org.bouncycastle.x509.X509AttributeCertificate;

        if $z5 == 0 goto label16;

        r54 = "ATTRIBUTE CERTIFICATE";

        r57 = "ATTRIBUTE CERTIFICATE";

        r56 = "ATTRIBUTE CERTIFICATE";

        $r5 = (org.bouncycastle.x509.X509V2AttributeCertificate) r0;

        r55 = virtualinvoke $r5.<org.bouncycastle.x509.X509V2AttributeCertificate: byte[] getEncoded()>();

        goto label19;

     label16:
        $z6 = r0 instanceof org.bouncycastle.jce.PKCS10CertificationRequest;

        if $z6 == 0 goto label17;

        r54 = "CERTIFICATE REQUEST";

        r57 = "CERTIFICATE REQUEST";

        r56 = "CERTIFICATE REQUEST";

        $r4 = (org.bouncycastle.jce.PKCS10CertificationRequest) r0;

        r55 = virtualinvoke $r4.<org.bouncycastle.jce.PKCS10CertificationRequest: byte[] getEncoded()>();

        goto label19;

     label17:
        $z7 = r0 instanceof org.bouncycastle.asn1.cms.ContentInfo;

        if $z7 == 0 goto label18;

        r54 = "PKCS7";

        r57 = "PKCS7";

        r56 = "PKCS7";

        $r2 = (org.bouncycastle.asn1.cms.ContentInfo) r0;

        r55 = virtualinvoke $r2.<org.bouncycastle.asn1.cms.ContentInfo: byte[] getEncoded()>();

        goto label19;

     label18:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("unknown object passed - can\'t encode.");

        throw $r1;

     label19:
        specialinvoke r3.<org.bouncycastle.openssl.PEMWriter: void writeHeader(java.lang.String)>(r57);

        specialinvoke r3.<org.bouncycastle.openssl.PEMWriter: void writeEncoded(byte[])>(r55);

        specialinvoke r3.<org.bouncycastle.openssl.PEMWriter: void writeFooter(java.lang.String)>(r56);

        return;

        catch java.security.cert.CertificateEncodingException from label01 to label02 with label03;
        catch java.security.cert.CRLException from label05 to label06 with label07;
    }

    public void writeObject(java.lang.Object, java.lang.String, char[], java.security.SecureRandom) throws java.io.IOException
    {
        byte[] $r14, $r20, $r25, r57;
        java.security.KeyPair $r54;
        java.security.SecureRandom r10;
        byte $b0;
        java.math.BigInteger $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53;
        java.security.PrivateKey $r21, $r24, $r55;
        java.lang.StringBuilder $r2, $r3, $r6, $r15, $r16, $r17, $r18;
        org.bouncycastle.asn1.DERObject $r28;
        java.lang.String $r5, $r7, r8, $r9, $r13, $r19, $r22, $r23, r56, r60, r61, r62, r63;
        char[] r12;
        java.security.interfaces.DSAParams $r29;
        org.bouncycastle.asn1.pkcs.PrivateKeyInfo $r27;
        org.bouncycastle.asn1.ASN1Object $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.bouncycastle.asn1.DERSequence $r44;
        org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure $r45;
        java.security.interfaces.RSAPrivateCrtKey r58;
        java.security.interfaces.DSAPrivateKey r59;
        org.bouncycastle.asn1.ASN1EncodableVector $r30;
        java.lang.IllegalArgumentException $r1;
        org.bouncycastle.asn1.DERInteger $r31, $r32, $r34, $r36, $r42, $r43;
        org.bouncycastle.openssl.PEMWriter r11;
        java.lang.Object r0;
        java.lang.Class $r4;

        r11 := @this: org.bouncycastle.openssl.PEMWriter;

        r0 := @parameter0: java.lang.Object;

        r8 := @parameter1: java.lang.String;

        r12 := @parameter2: char[];

        r10 := @parameter3: java.security.SecureRandom;

        $z0 = r0 instanceof java.security.KeyPair;

        if $z0 == 0 goto label1;

        $r54 = (java.security.KeyPair) r0;

        $r55 = virtualinvoke $r54.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        virtualinvoke r11.<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object)>($r55);

        return;

     label1:
        r56 = null;

        r63 = null;

        r62 = null;

        r61 = null;

        r57 = null;

        $z1 = r0 instanceof java.security.interfaces.RSAPrivateCrtKey;

        if $z1 == 0 goto label2;

        r56 = "RSA PRIVATE KEY";

        r63 = "RSA PRIVATE KEY";

        r62 = "RSA PRIVATE KEY";

        r61 = "RSA PRIVATE KEY";

        r58 = (java.security.interfaces.RSAPrivateCrtKey) r0;

        $r45 = new org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure;

        $r46 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getModulus()>();

        $r47 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()>();

        $r48 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrivateExponent()>();

        $r49 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()>();

        $r50 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()>();

        $r51 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()>();

        $r52 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()>();

        $r53 = interfaceinvoke r58.<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()>();

        specialinvoke $r45.<org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53);

        r57 = virtualinvoke $r45.<org.bouncycastle.asn1.pkcs.RSAPrivateKeyStructure: byte[] getEncoded()>();

        goto label4;

     label2:
        $z2 = r0 instanceof java.security.interfaces.DSAPrivateKey;

        if $z2 == 0 goto label3;

        r56 = "DSA PRIVATE KEY";

        r63 = "DSA PRIVATE KEY";

        r62 = "DSA PRIVATE KEY";

        r61 = "DSA PRIVATE KEY";

        r59 = (java.security.interfaces.DSAPrivateKey) r0;

        $r29 = interfaceinvoke r59.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r30 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r31 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r31.<org.bouncycastle.asn1.DERInteger: void <init>(int)>(0);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r31);

        $r32 = new org.bouncycastle.asn1.DERInteger;

        $r33 = interfaceinvoke $r29.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        specialinvoke $r32.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r33);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r32);

        $r34 = new org.bouncycastle.asn1.DERInteger;

        $r35 = interfaceinvoke $r29.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        specialinvoke $r34.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r35);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r34);

        $r36 = new org.bouncycastle.asn1.DERInteger;

        $r37 = interfaceinvoke $r29.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        specialinvoke $r36.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r37);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r36);

        $r38 = interfaceinvoke r59.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r39 = interfaceinvoke $r29.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r40 = interfaceinvoke $r29.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r41 = virtualinvoke $r39.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r38, $r40);

        $r42 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r42.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r41);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r42);

        $r43 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r43.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r38);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r43);

        $r44 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r44.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r30);

        r57 = virtualinvoke $r44.<org.bouncycastle.asn1.DERSequence: byte[] getEncoded()>();

        goto label4;

     label3:
        $z3 = r0 instanceof java.security.PrivateKey;

        if $z3 == 0 goto label4;

        $r22 = "ECDSA";

        $r21 = (java.security.PrivateKey) r0;

        $r23 = interfaceinvoke $r21.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $z6 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z6 == 0 goto label4;

        r56 = "EC PRIVATE KEY";

        r63 = "EC PRIVATE KEY";

        r62 = "EC PRIVATE KEY";

        r61 = "EC PRIVATE KEY";

        $r24 = (java.security.PrivateKey) r0;

        $r25 = interfaceinvoke $r24.<java.security.PrivateKey: byte[] getEncoded()>();

        $r26 = staticinvoke <org.bouncycastle.asn1.ASN1Object: org.bouncycastle.asn1.ASN1Object fromByteArray(byte[])>($r25);

        $r27 = staticinvoke <org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.pkcs.PrivateKeyInfo getInstance(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.DERObject getPrivateKey()>();

        r57 = virtualinvoke $r28.<org.bouncycastle.asn1.DERObject: byte[] getEncoded()>();

     label4:
        if r61 == null goto label5;

        if r57 != null goto label6;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object type not supported: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label6:
        $r9 = staticinvoke <org.bouncycastle.util.Strings: java.lang.String toUpperCase(java.lang.String)>(r8);

        r60 = $r9;

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("DESEDE");

        if $z4 == 0 goto label7;

        r60 = "DES-EDE3-CBC";

     label7:
        $z5 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("AES-");

        if $z5 == 0 goto label8;

        $b0 = 16;

        goto label9;

     label8:
        $b0 = 8;

     label9:
        $r20 = newarray (byte)[$b0];

        virtualinvoke r10.<java.security.SecureRandom: void nextBytes(byte[])>($r20);

        $r13 = r11.<org.bouncycastle.openssl.PEMWriter: java.lang.String provider>;

        $r14 = staticinvoke <org.bouncycastle.openssl.PEMUtilities: byte[] crypt(boolean,java.lang.String,byte[],char[],java.lang.String,byte[])>(1, $r13, r57, r12, r60, $r20);

        specialinvoke r11.<org.bouncycastle.openssl.PEMWriter: void writeHeader(java.lang.String)>(r62);

        virtualinvoke r11.<org.bouncycastle.openssl.PEMWriter: void write(java.lang.String)>("Proc-Type: 4,ENCRYPTED");

        virtualinvoke r11.<org.bouncycastle.openssl.PEMWriter: void newLine()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DEK-Info: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<org.bouncycastle.openssl.PEMWriter: void write(java.lang.String)>($r19);

        specialinvoke r11.<org.bouncycastle.openssl.PEMWriter: void writeHexEncoded(byte[])>($r20);

        virtualinvoke r11.<org.bouncycastle.openssl.PEMWriter: void newLine()>();

        virtualinvoke r11.<org.bouncycastle.openssl.PEMWriter: void newLine()>();

        specialinvoke r11.<org.bouncycastle.openssl.PEMWriter: void writeEncoded(byte[])>($r14);

        specialinvoke r11.<org.bouncycastle.openssl.PEMWriter: void writeFooter(java.lang.String)>(r63);

        return;
    }

    private void writeHeader(java.lang.String) throws java.io.IOException
    {
        org.bouncycastle.openssl.PEMWriter r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6;

        r0 := @this: org.bouncycastle.openssl.PEMWriter;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-----BEGIN ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-----");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.bouncycastle.openssl.PEMWriter: void write(java.lang.String)>($r6);

        virtualinvoke r0.<org.bouncycastle.openssl.PEMWriter: void newLine()>();

        return;
    }

    private void writeFooter(java.lang.String) throws java.io.IOException
    {
        org.bouncycastle.openssl.PEMWriter r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6;

        r0 := @this: org.bouncycastle.openssl.PEMWriter;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-----END ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-----");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.bouncycastle.openssl.PEMWriter: void write(java.lang.String)>($r6);

        virtualinvoke r0.<org.bouncycastle.openssl.PEMWriter: void newLine()>();

        return;
    }
}
