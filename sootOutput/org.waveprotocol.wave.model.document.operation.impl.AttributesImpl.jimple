public class org.waveprotocol.wave.model.document.operation.impl.AttributesImpl extends org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap implements org.waveprotocol.wave.model.document.operation.Attributes
{

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>()>();

        return;
    }

    public void <init>(java.util.Map)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0;
        java.util.Map r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>(java.util.Map)>(r1);

        return;
    }

    void <init>(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0;
        java.util.List r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>(java.util.List)>(r1);

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0;
        java.lang.String[] r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: void <init>(java.lang.String[])>(r1);

        return;
    }

    protected org.waveprotocol.wave.model.document.operation.impl.AttributesImpl createFromList(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r0, r2;
        java.util.List r1;

        r2 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromSortedAttributes(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r1;
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void checkAttributesSorted(java.util.List)>(r0);

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromSortedAttributesUnchecked(java.util.List)>(r0);

        return $r1;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromSortedAttributesUnchecked(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r0;
        java.util.List r1;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributes(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3;
        java.util.List r1;
        java.util.Comparator $r2;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: java.util.Comparator comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r2);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromSortedAttributes(java.util.List)>($r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromStringMap(org.waveprotocol.wave.model.util.ReadableStringMap)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl$1 $r2;
        org.waveprotocol.wave.model.util.ReadableStringMap r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.util.ReadableStringMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl$1: void <init>(java.util.List)>($r0);

        interfaceinvoke r1.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r2);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributes(java.util.List)>($r0);

        return $r3;
    }

    public static org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributesUnchecked(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r3;
        java.util.List r1;
        java.util.Comparator $r2;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r2 = <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: java.util.Comparator comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r0, $r2);

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromSortedAttributesUnchecked(java.util.List)>($r0);

        return $r3;
    }

    public static transient org.waveprotocol.wave.model.document.operation.Attributes fromUnsortedPairsUnchecked(java.lang.String[])
    {
        java.lang.String[] r0;
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute $r3;
        java.util.ArrayList $r1;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r2;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "pairs.length must be even");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label3:
        $i4 = lengthof r0;

        if i3 >= $i4 goto label4;

        $r3 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        $r5 = r0[i3];

        $i2 = i3 + 1;

        $r4 = r0[$i2];

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>($r5, $r4);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        i3 = i3 + 2;

        goto label3;

     label4:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributesUnchecked(java.util.List)>($r1);

        return $r2;
    }

    protected volatile org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap createFromList(java.util.List)
    {
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0, $r2;
        java.util.List r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl createFromList(java.util.List)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.operation.Attributes updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r2;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;
        org.waveprotocol.wave.model.document.operation.Attributes $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWithNoCompatibilityCheck(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.Attributes) $r2;

        return $r3;
    }

    public volatile org.waveprotocol.wave.model.document.operation.Attributes updateWith(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap $r2;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r1;
        org.waveprotocol.wave.model.document.operation.Attributes $r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap updateWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.Attributes) $r2;

        return $r3;
    }
}
