public final class org.apache.http.protocol.BasicHttpProcessor extends java.lang.Object implements org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpRequestInterceptorList, org.apache.http.protocol.HttpResponseInterceptorList, java.lang.Cloneable
{
    protected final java.util.List requestInterceptors;
    protected final java.util.List responseInterceptors;

    public void <init>()
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors> = $r2;

        return;
    }

    public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)
    {
        org.apache.http.protocol.BasicHttpProcessor r1;
        java.util.List $r2;
        org.apache.http.HttpRequestInterceptor r0;

        r1 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r0 := @parameter0: org.apache.http.HttpRequestInterceptor;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void addRequestInterceptor(org.apache.http.HttpRequestInterceptor, int)
    {
        org.apache.http.protocol.BasicHttpProcessor r1;
        java.util.List $r2;
        int i0;
        org.apache.http.HttpRequestInterceptor r0;

        r1 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r0 := @parameter0: org.apache.http.HttpRequestInterceptor;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r0);

        return;
    }

    public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor, int)
    {
        org.apache.http.protocol.BasicHttpProcessor r1;
        org.apache.http.HttpResponseInterceptor r0;
        java.util.List $r2;
        int i0;

        r1 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r0 := @parameter0: org.apache.http.HttpResponseInterceptor;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r0);

        return;
    }

    public void removeRequestInterceptorByClass(java.lang.Class)
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.Class $r4, r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r5 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public void removeResponseInterceptorByClass(java.lang.Class)
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3;
        java.lang.Class $r4, r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r5 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        interfaceinvoke $r2.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    public final void addInterceptor(org.apache.http.HttpRequestInterceptor)
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        org.apache.http.HttpRequestInterceptor r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpRequestInterceptor;

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)>(r1);

        return;
    }

    public final void addInterceptor(org.apache.http.HttpRequestInterceptor, int)
    {
        int i0;
        org.apache.http.protocol.BasicHttpProcessor r0;
        org.apache.http.HttpRequestInterceptor r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpRequestInterceptor;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int)>(r1, i0);

        return;
    }

    public int getRequestInterceptorCount()
    {
        int $i0;
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.apache.http.HttpRequestInterceptor getRequestInterceptor(int)
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1, $r2;
        int i0, $i1;
        java.lang.Object $r3;
        org.apache.http.HttpRequestInterceptor $r4;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.apache.http.HttpRequestInterceptor) $r3;

        return $r4;
    }

    public void clearRequestInterceptors()
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)
    {
        org.apache.http.protocol.BasicHttpProcessor r1;
        org.apache.http.HttpResponseInterceptor r0;
        java.util.List $r2;

        r1 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r0 := @parameter0: org.apache.http.HttpResponseInterceptor;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public final void addInterceptor(org.apache.http.HttpResponseInterceptor)
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        org.apache.http.HttpResponseInterceptor r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpResponseInterceptor;

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor)>(r1);

        return;
    }

    public final void addInterceptor(org.apache.http.HttpResponseInterceptor, int)
    {
        int i0;
        org.apache.http.protocol.BasicHttpProcessor r0;
        org.apache.http.HttpResponseInterceptor r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r1 := @parameter0: org.apache.http.HttpResponseInterceptor;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int)>(r1, i0);

        return;
    }

    public int getResponseInterceptorCount()
    {
        int $i0;
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.apache.http.HttpResponseInterceptor getResponseInterceptor(int)
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1, $r2;
        org.apache.http.HttpResponseInterceptor $r4;
        int i0, $i1;
        java.lang.Object $r3;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (org.apache.http.HttpResponseInterceptor) $r3;

        return $r4;
    }

    public void clearResponseInterceptors()
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public void setInterceptors(java.util.List)
    {
        org.apache.http.protocol.BasicHttpProcessor r1;
        java.lang.IllegalArgumentException $r7;
        java.util.List r0, $r2, $r3;
        org.apache.http.HttpResponseInterceptor $r5;
        int $i0, i1;
        java.lang.Object $r4;
        org.apache.http.HttpRequestInterceptor $r6;
        boolean $z0, $z1;

        r1 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("List must not be null.");

        throw $r7;

     label1:
        $r2 = r1.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r1.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i1 >= $i0 goto label5;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r4 instanceof org.apache.http.HttpRequestInterceptor;

        if $z0 == 0 goto label3;

        $r6 = (org.apache.http.HttpRequestInterceptor) $r4;

        virtualinvoke r1.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpRequestInterceptor)>($r6);

     label3:
        $z1 = $r4 instanceof org.apache.http.HttpResponseInterceptor;

        if $z1 == 0 goto label4;

        $r5 = (org.apache.http.HttpResponseInterceptor) $r4;

        virtualinvoke r1.<org.apache.http.protocol.BasicHttpProcessor: void addInterceptor(org.apache.http.HttpResponseInterceptor)>($r5);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public void clearInterceptors()
    {
        org.apache.http.protocol.BasicHttpProcessor r0;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void clearRequestInterceptors()>();

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void clearResponseInterceptors()>();

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        org.apache.http.HttpRequest r5;
        java.util.List $r1, $r2;
        org.apache.http.protocol.HttpContext r6;
        int $i0, i1;
        java.lang.Object $r3;
        org.apache.http.HttpRequestInterceptor r4;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r5 := @parameter0: org.apache.http.HttpRequest;

        r6 := @parameter1: org.apache.http.protocol.HttpContext;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.http.HttpRequestInterceptor) $r3;

        interfaceinvoke r4.<org.apache.http.HttpRequestInterceptor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r5, r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.BasicHttpProcessor r0;
        java.util.List $r1, $r2;
        org.apache.http.HttpResponseInterceptor r4;
        org.apache.http.protocol.HttpContext r6;
        int $i0, i1;
        org.apache.http.HttpResponse r5;
        java.lang.Object $r3;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r5 := @parameter0: org.apache.http.HttpResponse;

        r6 := @parameter1: org.apache.http.protocol.HttpContext;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (org.apache.http.HttpResponseInterceptor) $r3;

        interfaceinvoke r4.<org.apache.http.HttpResponseInterceptor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r5, r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)
    {
        org.apache.http.protocol.BasicHttpProcessor r0, r2;
        java.util.List $r1, $r3, $r4, $r5, $r6, $r7;

        r2 := @this: org.apache.http.protocol.BasicHttpProcessor;

        r0 := @parameter0: org.apache.http.protocol.BasicHttpProcessor;

        $r1 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r4 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        $r3 = r2.<org.apache.http.protocol.BasicHttpProcessor: java.util.List requestInterceptors>;

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r5 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r7 = r0.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        $r6 = r2.<org.apache.http.protocol.BasicHttpProcessor: java.util.List responseInterceptors>;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        return;
    }

    public org.apache.http.protocol.BasicHttpProcessor copy()
    {
        org.apache.http.protocol.BasicHttpProcessor $r0, r1;

        r1 := @this: org.apache.http.protocol.BasicHttpProcessor;

        $r0 = new org.apache.http.protocol.BasicHttpProcessor;

        specialinvoke $r0.<org.apache.http.protocol.BasicHttpProcessor: void <init>()>();

        virtualinvoke r1.<org.apache.http.protocol.BasicHttpProcessor: void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)>($r0);

        return $r0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.protocol.BasicHttpProcessor r0, r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.protocol.BasicHttpProcessor;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.http.protocol.BasicHttpProcessor) $r1;

        virtualinvoke r0.<org.apache.http.protocol.BasicHttpProcessor: void copyInterceptors(org.apache.http.protocol.BasicHttpProcessor)>(r2);

        return r2;
    }
}
