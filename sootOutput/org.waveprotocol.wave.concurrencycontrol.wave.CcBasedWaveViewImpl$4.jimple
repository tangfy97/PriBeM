final class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$Factory
{
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory val$waveletFactory;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler val$disconnectedHandler;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener val$waveletListener;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets val$accessibilityTracker;

    void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener, org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4 r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler;

        r3 := @parameter2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener;

        r4 := @parameter3: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory val$waveletFactory> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler val$disconnectedHandler> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener val$waveletListener> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets val$accessibilityTracker> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener create(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener $r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener $r0;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4 r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets $r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler $r5;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory $r6;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener;

        $r6 = r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory val$waveletFactory>;

        $r5 = r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler val$disconnectedHandler>;

        $r4 = r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener val$waveletListener>;

        $r3 = r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$4: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets val$accessibilityTracker>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$Factory,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$DisconnectedHandler,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$MuxListener$WaveletListener,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveView$OpenListener,org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$TerminalWavelets)>($r6, $r5, $r4, r2, $r3);

        return $r0;
    }
}
