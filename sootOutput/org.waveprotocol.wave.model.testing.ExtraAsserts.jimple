public final class org.waveprotocol.wave.model.testing.ExtraAsserts extends java.lang.Object
{

    public static void assertStructureEquivalent(org.waveprotocol.wave.model.document.util.XmlStringBuilder, org.waveprotocol.wave.model.document.MutableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0;
        org.waveprotocol.wave.model.document.MutableDocument r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r1, $r3, $r10;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r2 := @parameter1: org.waveprotocol.wave.model.document.MutableDocument;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean equivalent(int,java.lang.String,org.waveprotocol.wave.model.document.ReadableDocument)>(31, $r1, r2);

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String toXmlString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], found [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r10);

     label1:
        return;
    }

    public static void assertStructureEquivalent(org.waveprotocol.wave.model.document.ReadableWDocument, org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument r0, r1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r2, $r3, $r10;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableWDocument;

        r1 := @parameter1: org.waveprotocol.wave.model.document.ReadableWDocument;

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean equivalent(int,org.waveprotocol.wave.model.document.ReadableWDocument,org.waveprotocol.wave.model.document.ReadableWDocument)>(31, r0, r1);

        if $z0 != 0 goto label1;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String toXmlString()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String toXmlString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] found [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r10);

     label1:
        return;
    }

    public static void assertEqual(org.waveprotocol.wave.model.document.util.XmlStringBuilder, org.waveprotocol.wave.model.document.MutableDocument)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0;
        org.waveprotocol.wave.model.document.MutableDocument r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r1, $r3, $r10;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r2 := @parameter1: org.waveprotocol.wave.model.document.MutableDocument;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.DocCompare: boolean equivalent(int,java.lang.String,org.waveprotocol.wave.model.document.ReadableDocument)>(127, $r1, r2);

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.MutableDocument: java.lang.String toXmlString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], found [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r10);

     label1:
        return;
    }

    private void <init>()
    {
        org.waveprotocol.wave.model.testing.ExtraAsserts r0;

        r0 := @this: org.waveprotocol.wave.model.testing.ExtraAsserts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkContent(java.lang.String, org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r1;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r3;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.waveprotocol.wave.model.wave.data.BlipData;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.BlipData: org.waveprotocol.wave.model.wave.data.DocumentOperationSink getContent()>();

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.DocumentOperationSink: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: java.lang.String toXmlString(org.waveprotocol.wave.model.document.operation.DocInitialization)>($r3);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(r0, $r4);

        return;
    }
}
