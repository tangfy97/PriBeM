final class com.mycila.inject.internal.cglib.core.ReflectUtils$3 extends com.mycila.inject.internal.cglib.core.MethodInfo
{
    private com.mycila.inject.internal.cglib.core.ClassInfo ci;
    private final java.lang.reflect.Member val$member;
    private final int val$modifiers;
    private final com.mycila.inject.internal.cglib.core.Signature val$sig;

    void <init>(java.lang.reflect.Member, int, com.mycila.inject.internal.cglib.core.Signature)
    {
        java.lang.reflect.Member r1;
        com.mycila.inject.internal.cglib.core.Signature r2;
        int i0;
        com.mycila.inject.internal.cglib.core.ReflectUtils$3 r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$3;

        r1 := @parameter0: java.lang.reflect.Member;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.cglib.core.Signature;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: java.lang.reflect.Member val$member> = r1;

        r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: int val$modifiers> = i0;

        r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: com.mycila.inject.internal.cglib.core.Signature val$sig> = r2;

        return;
    }

    public com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo()
    {
        java.lang.reflect.Member $r3;
        java.lang.Class $r4;
        com.mycila.inject.internal.cglib.core.ClassInfo $r1, $r2, $r5;
        com.mycila.inject.internal.cglib.core.ReflectUtils$3 r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$3;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: com.mycila.inject.internal.cglib.core.ClassInfo ci>;

        if $r1 != null goto label1;

        $r3 = r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: java.lang.reflect.Member val$member>;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.ClassInfo getClassInfo(java.lang.Class)>($r4);

        r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: com.mycila.inject.internal.cglib.core.ClassInfo ci> = $r5;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: com.mycila.inject.internal.cglib.core.ClassInfo ci>;

        return $r2;
    }

    public int getModifiers()
    {
        int $i0;
        com.mycila.inject.internal.cglib.core.ReflectUtils$3 r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$3;

        $i0 = r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: int val$modifiers>;

        return $i0;
    }

    public com.mycila.inject.internal.cglib.core.Signature getSignature()
    {
        com.mycila.inject.internal.cglib.core.ReflectUtils$3 r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$3;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: com.mycila.inject.internal.cglib.core.Signature val$sig>;

        return $r1;
    }

    public com.mycila.inject.internal.asm.Type[] getExceptionTypes()
    {
        com.mycila.inject.internal.asm.Type[] $r2;
        com.mycila.inject.internal.cglib.core.ReflectUtils$3 r0;
        java.lang.reflect.Member $r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$3;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.ReflectUtils$3: java.lang.reflect.Member val$member>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.asm.Type[] getExceptionTypes(java.lang.reflect.Member)>($r1);

        return $r2;
    }

    public com.mycila.inject.internal.asm.Attribute getAttribute()
    {
        com.mycila.inject.internal.cglib.core.ReflectUtils$3 r0;

        r0 := @this: com.mycila.inject.internal.cglib.core.ReflectUtils$3;

        return null;
    }
}
