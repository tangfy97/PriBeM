public final class org.jdesktop.swingx.sort.StringValueRegistry extends java.lang.Object implements org.jdesktop.swingx.sort.StringValueProvider
{
    private static final java.util.logging.Logger LOG;
    private java.util.Map perClass;
    private java.util.HashMap perColumn;
    private java.util.HashMap classPerColumn;

    public void <init>()
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.jdesktop.swingx.renderer.StringValue getStringValue(int, int)
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.lang.Integer $r2;
        org.jdesktop.swingx.renderer.StringValue r5, $r6;
        java.util.Map $r1;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.Class $r4;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getPerColumnMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.jdesktop.swingx.renderer.StringValue) $r3;

        if r5 != null goto label1;

        $r4 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.lang.Class getClass(int,int)>(i1, i0);

        r5 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: org.jdesktop.swingx.renderer.StringValue getStringValueByClass(java.lang.Class)>($r4);

     label1:
        if r5 != null goto label2;

        r5 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: org.jdesktop.swingx.renderer.StringValue getStringValueByClass(java.lang.Class)>(class "Ljava/lang/Object;");

     label2:
        if r5 == null goto label3;

        $r6 = r5;

        goto label4;

     label3:
        $r6 = <org.jdesktop.swingx.renderer.StringValues: org.jdesktop.swingx.renderer.StringValue TO_STRING>;

     label4:
        return $r6;
    }

    public void setStringValue(org.jdesktop.swingx.renderer.StringValue, int)
    {
        org.jdesktop.swingx.renderer.StringValue r3;
        java.util.Map $r1;
        int i0;
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.lang.Integer $r2;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        r3 := @parameter0: org.jdesktop.swingx.renderer.StringValue;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getPerColumnMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r3);

        return;
    }

    public void clearColumnStringValues()
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.util.Map $r1;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getPerColumnMap()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public void setStringValue(org.jdesktop.swingx.renderer.StringValue, java.lang.Class)
    {
        org.jdesktop.swingx.renderer.StringValue r3;
        java.util.Map $r1;
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.lang.Class r2;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        r3 := @parameter0: org.jdesktop.swingx.renderer.StringValue;

        r2 := @parameter1: java.lang.Class;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getPerClassMap()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public org.jdesktop.swingx.renderer.StringValue getStringValue(java.lang.Class)
    {
        org.jdesktop.swingx.renderer.StringValue $r4;
        java.util.Map $r1;
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.lang.Class r2;
        java.lang.Object $r3;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        r2 := @parameter0: java.lang.Class;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getPerClassMap()>();

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r4 = (org.jdesktop.swingx.renderer.StringValue) $r3;

        return $r4;
    }

    public void setColumnClass(java.lang.Class, int)
    {
        java.util.Map $r1;
        int i0;
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.lang.Class r3;
        java.lang.Integer $r2;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        r3 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getColumnClassMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r3);

        return;
    }

    public void setColumnClasses(java.util.Map)
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.util.HashMap $r2;
        java.util.Map r1;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        r1 := @parameter0: java.util.Map;

        if r1 == null goto label1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap classPerColumn> = $r2;

        return;
    }

    private org.jdesktop.swingx.renderer.StringValue getStringValueByClass(java.lang.Class)
    {
        org.jdesktop.swingx.renderer.StringValue r4, $r6;
        java.util.Map $r2;
        java.lang.Class r0, $r5;
        org.jdesktop.swingx.sort.StringValueRegistry r1;
        java.lang.Object $r3;

        r1 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = specialinvoke r1.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getPerClassMap()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (org.jdesktop.swingx.renderer.StringValue) $r3;

        if r4 == null goto label2;

        return r4;

     label2:
        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = specialinvoke r1.<org.jdesktop.swingx.sort.StringValueRegistry: org.jdesktop.swingx.renderer.StringValue getStringValueByClass(java.lang.Class)>($r5);

        return $r6;
    }

    private java.lang.Class getClass(int, int)
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.lang.Integer $r2;
        java.util.Map $r1;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.Class r4, $r5;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map getColumnClassMap()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Class) $r3;

        if r4 == null goto label1;

        $r5 = r4;

        goto label2;

     label1:
        $r5 = class "Ljava/lang/Object;";

     label2:
        return $r5;
    }

    private java.util.Map getColumnClassMap()
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.util.HashMap $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        $r1 = r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap classPerColumn>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap classPerColumn> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap classPerColumn>;

        return $r2;
    }

    private java.util.Map getPerClassMap()
    {
        java.util.Map $r1, $r2;
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.util.HashMap $r3;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        $r1 = r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map perClass>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map perClass> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.Map perClass>;

        return $r2;
    }

    private java.util.Map getPerColumnMap()
    {
        org.jdesktop.swingx.sort.StringValueRegistry r0;
        java.util.HashMap $r1, $r2, $r3;

        r0 := @this: org.jdesktop.swingx.sort.StringValueRegistry;

        $r1 = r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap perColumn>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap perColumn> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.sort.StringValueRegistry: java.util.HashMap perColumn>;

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/jdesktop/swingx/sort/StringValueRegistry;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.sort.StringValueRegistry: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
