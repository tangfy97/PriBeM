final class org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread extends org.waveprotocol.wave.model.conversation.ConversationBlip$LocatedReplyThread implements java.lang.Comparable
{
    final org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0;

    void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip, org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread, int)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        int i0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread r2;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationThread;

        i0 := @parameter2: int;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip$LocatedReplyThread: void <init>(org.waveprotocol.wave.model.conversation.ConversationThread,int)>(r2, i0);

        return;
    }

    public int compareTo(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread r0, r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int getLocation()>();

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int getLocation()>();

        if $i0 != $i1 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int getLocation()>();

        $i8 = (int) -1;

        if $i2 != $i8 goto label2;

        return 1;

     label2:
        $i3 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int getLocation()>();

        $i10 = (int) -1;

        if $i3 != $i10 goto label3;

        $i12 = (int) -1;

        return $i12;

     label3:
        $i4 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int getLocation()>();

        $i5 = virtualinvoke r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int getLocation()>();

        $i6 = $i4 - $i5;

        return $i6;
    }

    public volatile int compareTo(java.lang.Object)
    {
        int $i0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread) r1;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread: int compareTo(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$LocatedReplyThread)>($r2);

        return $i0;
    }
}
