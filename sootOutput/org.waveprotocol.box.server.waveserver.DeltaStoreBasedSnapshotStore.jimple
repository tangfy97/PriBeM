class org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore extends java.lang.Object implements org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore
{
    private final org.waveprotocol.box.server.waveserver.DeltaStore deltaStore;

    private static org.waveprotocol.wave.model.wave.data.ReadableWaveletData buildWaveletFromDeltaReader(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.id.WaveletName $r1;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        org.waveprotocol.box.server.waveserver.RuntimeIOException $r6;
        java.io.IOException $r8;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader r0;
        org.waveprotocol.box.server.persistence.PersistenceException $r7, $r10;
        org.waveprotocol.wave.model.operation.OperationException $r9;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r4, $r5;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader;

     label1:
        $r1 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r2 = new org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator;

        specialinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: void <init>(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader)>(r0);

        $r3 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData buildWaveletFromDeltas(org.waveprotocol.wave.model.id.WaveletName,java.util.Iterator)>($r1, $r2);

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r5 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        $z0 = virtualinvoke $r4.<org.waveprotocol.wave.model.version.HashedVersion: boolean equals(java.lang.Object)>($r5);

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

     label2:
        return $r3;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.waveprotocol.box.server.persistence.PersistenceException;

        specialinvoke $r10.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.waveprotocol.box.server.persistence.PersistenceException;

        $r8 = virtualinvoke $r6.<org.waveprotocol.box.server.waveserver.RuntimeIOException: java.io.IOException getIOException()>();

        specialinvoke $r7.<org.waveprotocol.box.server.persistence.PersistenceException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
        catch org.waveprotocol.box.server.waveserver.RuntimeIOException from label1 to label2 with label4;
    }

    private static org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess createWaveletAccess(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess $r1;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess;

        $z0 = interfaceinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.wave.model.wave.data.ReadableWaveletData buildWaveletFromDeltaReader(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader)>(r0);

     label2:
        $r1 = new org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess;

        specialinvoke $r1.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$DeltasAccessBasedWaveletAccess: void <init>(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess,org.waveprotocol.wave.model.wave.data.ReadableWaveletData,org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$1)>(r0, $r2, null);

        return $r1;
    }

    public void <init>(org.waveprotocol.box.server.waveserver.DeltaStore)
    {
        org.waveprotocol.box.server.waveserver.DeltaStore r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.DeltaStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaStore deltaStore> = r1;

        return;
    }

    public org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess open(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.DeltaStore $r2;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader $r3;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r4;
        org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess $r5;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaStore deltaStore>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStore: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader open(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        $r4 = (org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess) $r3;

        $r5 = staticinvoke <org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess createWaveletAccess(org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess)>($r4);

        return $r5;
    }

    public void delete(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.persistence.PersistenceException, org.waveprotocol.box.server.persistence.FileNotFoundPersistenceException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.DeltaStore $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaStore deltaStore>;

        interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStore: void delete(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return;
    }

    public com.google.common.collect.ImmutableSet lookup(org.waveprotocol.wave.model.id.WaveId) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        com.google.common.collect.ImmutableSet $r3;
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.box.server.waveserver.DeltaStore $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaStore deltaStore>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.DeltaStore: com.google.common.collect.ImmutableSet lookup(org.waveprotocol.wave.model.id.WaveId)>(r1);

        return $r3;
    }

    public org.waveprotocol.box.common.ExceptionalIterator getWaveIdIterator() throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.box.server.waveserver.DeltaStore $r1;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore r0;
        org.waveprotocol.box.common.ExceptionalIterator $r2;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaStore deltaStore>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.DeltaStore: org.waveprotocol.box.common.ExceptionalIterator getWaveIdIterator()>();

        return $r2;
    }

    public volatile org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader open(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess $r2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore: org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore$WaveletAccess open(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r2;
    }
}
