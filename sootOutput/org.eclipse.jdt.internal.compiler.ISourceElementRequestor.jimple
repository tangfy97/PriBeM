public interface  org.eclipse.jdt.internal.compiler.ISourceElementRequestor extends java.lang.Object
{

    public abstract void acceptAnnotationTypeReference(char[][], int, int);

    public abstract void acceptAnnotationTypeReference(char[], int);

    public abstract void acceptConstructorReference(char[], int, int);

    public abstract void acceptFieldReference(char[], int);

    public abstract void acceptImport(int, int, char[][], boolean, int);

    public abstract void acceptLineSeparatorPositions(int[]);

    public abstract void acceptMethodReference(char[], int, int);

    public abstract void acceptPackage(org.eclipse.jdt.internal.compiler.ast.ImportReference);

    public abstract void acceptProblem(org.eclipse.jdt.core.compiler.CategorizedProblem);

    public abstract void acceptTypeReference(char[][], int, int);

    public abstract void acceptTypeReference(char[], int);

    public abstract void acceptUnknownReference(char[][], int, int);

    public abstract void acceptUnknownReference(char[], int);

    public abstract void enterCompilationUnit();

    public abstract void enterConstructor(org.eclipse.jdt.internal.compiler.ISourceElementRequestor$MethodInfo);

    public abstract void enterField(org.eclipse.jdt.internal.compiler.ISourceElementRequestor$FieldInfo);

    public abstract void enterInitializer(int, int);

    public abstract void enterMethod(org.eclipse.jdt.internal.compiler.ISourceElementRequestor$MethodInfo);

    public abstract void enterType(org.eclipse.jdt.internal.compiler.ISourceElementRequestor$TypeInfo);

    public abstract void exitCompilationUnit(int);

    public abstract void exitConstructor(int);

    public abstract void exitField(int, int, int);

    public abstract void exitInitializer(int);

    public abstract void exitMethod(int, org.eclipse.jdt.internal.compiler.ast.Expression);

    public abstract void exitType(int);
}
