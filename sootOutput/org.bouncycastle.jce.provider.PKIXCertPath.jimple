public class org.bouncycastle.jce.provider.PKIXCertPath extends java.security.cert.CertPath
{
    static final java.util.List certPathEncodings;
    private java.util.List certificates;

    private java.util.List sortCerts(java.util.List)
    {
        java.security.cert.X509Certificate $r2, $r6, r13, $r18, r21, r22, r23;
        org.bouncycastle.jce.provider.PKIXCertPath r19;
        boolean $z0, $z1, $z2, z3, z4;
        java.util.List r0;
        javax.security.auth.x500.X500Principal $r7, $r9, $r11, $r14, $r16, r20;
        java.util.ArrayList $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        java.lang.Object $r1, $r5, $r8, $r10, $r12, $r15, $r17;

        r19 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= 2 goto label01;

        return r0;

     label01:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (java.security.cert.X509Certificate) $r1;

        r20 = virtualinvoke $r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        z3 = 1;

        i9 = 1;

     label02:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i9 == $i1 goto label05;

        $r15 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i9);

        r21 = (java.security.cert.X509Certificate) $r15;

        $r16 = virtualinvoke r21.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $z2 = virtualinvoke r20.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label03;

        $r17 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i9);

        $r18 = (java.security.cert.X509Certificate) $r17;

        r20 = virtualinvoke $r18.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        goto label04;

     label03:
        z3 = 0;

        goto label05;

     label04:
        i9 = i9 + 1;

        goto label02;

     label05:
        if z3 == 0 goto label06;

        return r0;

     label06:
        $r3 = new java.util.ArrayList;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        i10 = 0;

     label07:
        $i3 = interfaceinvoke r0.<java.util.List: int size()>();

        if i10 >= $i3 goto label12;

        $r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i10);

        r22 = (java.security.cert.X509Certificate) $r10;

        z4 = 0;

        $r11 = virtualinvoke r22.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        i11 = 0;

     label08:
        $i8 = interfaceinvoke r0.<java.util.List: int size()>();

        if i11 == $i8 goto label10;

        $r12 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i11);

        r13 = (java.security.cert.X509Certificate) $r12;

        $r14 = virtualinvoke r13.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $z1 = virtualinvoke $r14.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label09;

        z4 = 1;

        goto label10;

     label09:
        i11 = i11 + 1;

        goto label08;

     label10:
        if z4 != 0 goto label11;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r22);

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i10);

     label11:
        i10 = i10 + 1;

        goto label07;

     label12:
        $i4 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i4 <= 1 goto label13;

        return $r4;

     label13:
        i12 = 0;

     label14:
        $i5 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i12 == $i5 goto label18;

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i12);

        $r6 = (java.security.cert.X509Certificate) $r5;

        $r7 = virtualinvoke $r6.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        i13 = 0;

     label15:
        $i7 = interfaceinvoke r0.<java.util.List: int size()>();

        if i13 >= $i7 goto label17;

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i13);

        r23 = (java.security.cert.X509Certificate) $r8;

        $r9 = virtualinvoke r23.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $z0 = virtualinvoke $r7.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label16;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r23);

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i13);

        goto label17;

     label16:
        i13 = i13 + 1;

        goto label15;

     label17:
        i12 = i12 + 1;

        goto label14;

     label18:
        $i6 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i6 <= 0 goto label19;

        return $r4;

     label19:
        return $r3;
    }

    void <init>(java.util.List)
    {
        java.util.List r2, $r3;
        org.bouncycastle.jce.provider.PKIXCertPath r0;
        java.util.ArrayList $r1;

        r0 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        $r3 = specialinvoke r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List sortCerts(java.util.List)>($r1);

        r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates> = $r3;

        return;
    }

    void <init>(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        byte[] $r21;
        org.bouncycastle.asn1.ASN1Sequence $r15;
        java.io.BufferedInputStream $r2;
        java.security.cert.CertificateFactory $r4, $r18;
        java.util.Enumeration $r16;
        org.bouncycastle.jce.provider.PKIXCertPath r0;
        java.io.ByteArrayInputStream $r22;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r5, $r6, $r7, $r23;
        java.security.cert.Certificate $r24, $r41;
        java.lang.StringBuilder $r9, $r10, $r11, $r28, $r29, $r31, $r35, $r36, $r38;
        org.bouncycastle.asn1.DERObject $r14;
        org.bouncycastle.asn1.ASN1InputStream $r13;
        java.util.ArrayList $r3, $r17;
        java.lang.String r1, $r12, $r30, $r32, $r37, $r39;
        org.bouncycastle.asn1.ASN1Encodable r20;
        java.io.IOException $r33;
        java.security.cert.CertificateException $r8, $r25, $r27, $r34;
        java.lang.Object $r19;
        java.security.NoSuchProviderException $r26;
        java.io.InputStream r40;

        r0 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        r40 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.security.cert.CertPath: void <init>(java.lang.String)>("X.509");

     label01:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PkiPath");

        if $z0 == 0 goto label05;

        $r13 = new org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r13.<org.bouncycastle.asn1.ASN1InputStream: void <init>(java.io.InputStream)>(r40);

        $r14 = virtualinvoke $r13.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $z3 = $r14 instanceof org.bouncycastle.asn1.ASN1Sequence;

        if $z3 != 0 goto label02;

        $r25 = new java.security.cert.CertificateException;

        specialinvoke $r25.<java.security.cert.CertificateException: void <init>(java.lang.String)>("input stream does not contain a ASN1 SEQUENCE while reading PkiPath encoded data to load CertPath");

        throw $r25;

     label02:
        $r15 = (org.bouncycastle.asn1.ASN1Sequence) $r14;

        $r16 = virtualinvoke $r15.<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()>();

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates> = $r17;

        $r18 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>("X.509", "BC");

     label03:
        $z4 = interfaceinvoke $r16.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 == 0 goto label04;

        $r19 = interfaceinvoke $r16.<java.util.Enumeration: java.lang.Object nextElement()>();

        r20 = (org.bouncycastle.asn1.ASN1Encodable) $r19;

        $r21 = virtualinvoke r20.<org.bouncycastle.asn1.ASN1Encodable: byte[] getEncoded(java.lang.String)>("DER");

        $r23 = r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $r22 = new java.io.ByteArrayInputStream;

        specialinvoke $r22.<java.io.ByteArrayInputStream: void <init>(byte[])>($r21);

        $r24 = virtualinvoke $r18.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r22);

        interfaceinvoke $r23.<java.util.List: void add(int,java.lang.Object)>(0, $r24);

        goto label03;

     label04:
        goto label10;

     label05:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PKCS7");

        if $z1 != 0 goto label06;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PEM");

        if $z2 == 0 goto label09;

     label06:
        $r2 = new java.io.BufferedInputStream;

        specialinvoke $r2.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r40);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates> = $r3;

        $r4 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>("X.509", "BC");

     label07:
        $r41 = virtualinvoke $r4.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r2);

        if $r41 == null goto label08;

        $r7 = r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r41);

        goto label07;

     label08:
        goto label10;

     label09:
        $r8 = new java.security.cert.CertificateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported encoding: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label10:
        goto label13;

     label11:
        $r33 := @caughtexception;

        $r34 = new java.security.cert.CertificateException;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException throw while decoding CertPath:\n");

        $r37 = virtualinvoke $r33.<java.io.IOException: java.lang.String toString()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r39);

        throw $r34;

     label12:
        $r26 := @caughtexception;

        $r27 = new java.security.cert.CertificateException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BouncyCastle provider not found while trying to get a CertificateFactory:\n");

        $r30 = virtualinvoke $r26.<java.security.NoSuchProviderException: java.lang.String toString()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.security.cert.CertificateException: void <init>(java.lang.String)>($r32);

        throw $r27;

     label13:
        $r5 = r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $r6 = specialinvoke r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List sortCerts(java.util.List)>($r5);

        r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates> = $r6;

        return;

        catch java.io.IOException from label01 to label10 with label11;
        catch java.security.NoSuchProviderException from label01 to label10 with label12;
    }

    public java.util.Iterator getEncodings()
    {
        java.util.List $r0;
        java.util.Iterator $r1;
        org.bouncycastle.jce.provider.PKIXCertPath r2;

        r2 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        $r0 = <org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certPathEncodings>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r1;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        byte[] $r4;
        java.util.Iterator $r1;
        org.bouncycastle.jce.provider.PKIXCertPath r0;
        java.lang.Object $r2;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        $r1 = virtualinvoke r0.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.Iterator getEncodings()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $r3 = (java.lang.String) $r2;

        $r4 = virtualinvoke r0.<org.bouncycastle.jce.provider.PKIXCertPath: byte[] getEncoded(java.lang.String)>($r3);

        return $r4;

     label1:
        return null;
    }

    public byte[] getEncoded(java.lang.String) throws java.security.cert.CertificateEncodingException
    {
        java.security.cert.X509Certificate $r28, $r37;
        byte[] $r11, $r25, $r35;
        java.util.ListIterator $r33;
        org.bouncycastle.jce.provider.PKIXCertPath r9;
        boolean $z0, $z1, $z2, $z3;
        org.bouncycastle.asn1.DERObjectIdentifier $r15, $r24;
        org.bouncycastle.asn1.DERSequence $r34;
        org.bouncycastle.asn1.DERSet $r20, $r21, $r22;
        java.lang.Exception $r39;
        java.util.List $r10, $r12, $r17, $r26, $r31, $r32;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.security.cert.CertificateEncodingException $r1, $r40;
        java.io.ByteArrayOutputStream $r6;
        org.bouncycastle.asn1.DERObject $r29, $r38;
        org.bouncycastle.asn1.pkcs.ContentInfo $r14, $r23;
        org.bouncycastle.asn1.pkcs.SignedData $r18;
        int $i0, $i1, $i2, i3, i4;
        java.io.OutputStreamWriter $r8;
        java.lang.String r0, $r5;
        org.bouncycastle.asn1.ASN1EncodableVector $r16, $r30;
        org.bouncycastle.asn1.DERInteger $r19;
        org.bouncycastle.openssl.PEMWriter $r7;
        java.lang.Object $r13, $r27, $r36;

        r9 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PkiPath");

        if $z0 == 0 goto label03;

        $r30 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r32 = r9.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $r31 = r9.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $i2 = interfaceinvoke $r31.<java.util.List: int size()>();

        $r33 = interfaceinvoke $r32.<java.util.List: java.util.ListIterator listIterator(int)>($i2);

     label01:
        $z3 = interfaceinvoke $r33.<java.util.ListIterator: boolean hasPrevious()>();

        if $z3 == 0 goto label02;

        $r36 = interfaceinvoke $r33.<java.util.ListIterator: java.lang.Object previous()>();

        $r37 = (java.security.cert.X509Certificate) $r36;

        $r38 = specialinvoke r9.<org.bouncycastle.jce.provider.PKIXCertPath: org.bouncycastle.asn1.DERObject toASN1Object(java.security.cert.X509Certificate)>($r37);

        virtualinvoke $r30.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r38);

        goto label01;

     label02:
        $r34 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r34.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r30);

        $r35 = specialinvoke r9.<org.bouncycastle.jce.provider.PKIXCertPath: byte[] toDEREncoded(org.bouncycastle.asn1.ASN1Encodable)>($r34);

        return $r35;

     label03:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PKCS7");

        if $z1 == 0 goto label06;

        $r14 = new org.bouncycastle.asn1.pkcs.ContentInfo;

        $r15 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier data>;

        specialinvoke $r14.<org.bouncycastle.asn1.pkcs.ContentInfo: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable)>($r15, null);

        $r16 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r16.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        i3 = 0;

     label04:
        $r17 = r9.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i3 == $i1 goto label05;

        $r26 = r9.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i3);

        $r28 = (java.security.cert.X509Certificate) $r27;

        $r29 = specialinvoke r9.<org.bouncycastle.jce.provider.PKIXCertPath: org.bouncycastle.asn1.DERObject toASN1Object(java.security.cert.X509Certificate)>($r28);

        virtualinvoke $r16.<org.bouncycastle.asn1.ASN1EncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r29);

        i3 = i3 + 1;

        goto label04;

     label05:
        $r18 = new org.bouncycastle.asn1.pkcs.SignedData;

        $r19 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r19.<org.bouncycastle.asn1.DERInteger: void <init>(int)>(1);

        $r20 = new org.bouncycastle.asn1.DERSet;

        specialinvoke $r20.<org.bouncycastle.asn1.DERSet: void <init>()>();

        $r21 = new org.bouncycastle.asn1.DERSet;

        specialinvoke $r21.<org.bouncycastle.asn1.DERSet: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r16);

        $r22 = new org.bouncycastle.asn1.DERSet;

        specialinvoke $r22.<org.bouncycastle.asn1.DERSet: void <init>()>();

        specialinvoke $r18.<org.bouncycastle.asn1.pkcs.SignedData: void <init>(org.bouncycastle.asn1.DERInteger,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.pkcs.ContentInfo,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.ASN1Set)>($r19, $r20, $r14, $r21, null, $r22);

        $r23 = new org.bouncycastle.asn1.pkcs.ContentInfo;

        $r24 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier signedData>;

        specialinvoke $r23.<org.bouncycastle.asn1.pkcs.ContentInfo: void <init>(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable)>($r24, $r18);

        $r25 = specialinvoke r9.<org.bouncycastle.jce.provider.PKIXCertPath: byte[] toDEREncoded(org.bouncycastle.asn1.ASN1Encodable)>($r23);

        return $r25;

     label06:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("PEM");

        if $z2 == 0 goto label13;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new org.bouncycastle.openssl.PEMWriter;

        $r8 = new java.io.OutputStreamWriter;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6);

        specialinvoke $r7.<org.bouncycastle.openssl.PEMWriter: void <init>(java.io.Writer)>($r8);

     label07:
        i4 = 0;

     label08:
        $r10 = r9.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i4 == $i0 goto label09;

        $r12 = r9.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i4);

        virtualinvoke $r7.<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object)>($r13);

        i4 = i4 + 1;

        goto label08;

     label09:
        virtualinvoke $r7.<org.bouncycastle.openssl.PEMWriter: void close()>();

     label10:
        goto label12;

     label11:
        $r39 := @caughtexception;

        $r40 = new java.security.cert.CertificateEncodingException;

        specialinvoke $r40.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("can\'t encode certificate for PEM encoded path");

        throw $r40;

     label12:
        $r11 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r11;

     label13:
        $r1 = new java.security.cert.CertificateEncodingException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported encoding: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r5);

        throw $r1;

        catch java.lang.Exception from label07 to label10 with label11;
    }

    public java.util.List getCertificates()
    {
        java.util.List $r2, $r3;
        org.bouncycastle.jce.provider.PKIXCertPath r1;
        java.util.ArrayList $r0;

        r1 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certificates>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r3;
    }

    private org.bouncycastle.asn1.DERObject toASN1Object(java.security.cert.X509Certificate) throws java.security.cert.CertificateEncodingException
    {
        java.security.cert.X509Certificate r1;
        byte[] $r2;
        org.bouncycastle.asn1.DERObject $r3;
        org.bouncycastle.jce.provider.PKIXCertPath r11;
        org.bouncycastle.asn1.ASN1InputStream $r0;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10;
        java.security.cert.CertificateEncodingException $r5;

        r11 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        r1 := @parameter0: java.security.cert.X509Certificate;

     label1:
        $r0 = new org.bouncycastle.asn1.ASN1InputStream;

        $r2 = virtualinvoke r1.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r2);

        $r3 = virtualinvoke $r0.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.security.cert.CertificateEncodingException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while encoding certificate: ");

        $r8 = virtualinvoke $r4.<java.lang.Exception: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r10);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private byte[] toDEREncoded(org.bouncycastle.asn1.ASN1Encodable) throws java.security.cert.CertificateEncodingException
    {
        byte[] $r1;
        org.bouncycastle.asn1.ASN1Encodable r0;
        org.bouncycastle.jce.provider.PKIXCertPath r8;
        java.io.IOException $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.security.cert.CertificateEncodingException $r3;

        r8 := @this: org.bouncycastle.jce.provider.PKIXCertPath;

        r0 := @parameter0: org.bouncycastle.asn1.ASN1Encodable;

     label1:
        $r1 = virtualinvoke r0.<org.bouncycastle.asn1.ASN1Encodable: byte[] getEncoded(java.lang.String)>("DER");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.security.cert.CertificateEncodingException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r7);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.List $r1;
        java.util.ArrayList $r0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("PkiPath");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("PEM");

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>("PKCS7");

        $r1 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        <org.bouncycastle.jce.provider.PKIXCertPath: java.util.List certPathEncodings> = $r1;

        return;
    }
}
