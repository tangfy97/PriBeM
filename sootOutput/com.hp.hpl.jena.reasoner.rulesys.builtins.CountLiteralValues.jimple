public class com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues;

        return "countLiteralValues";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues;

        return 3;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r3;
        com.hp.hpl.jena.graph.Node $r4, $r5, $r8, $r9, $r12;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r7;
        com.hp.hpl.jena.util.iterator.ClosableIterator $r6;
        java.util.ArrayList $r0;
        int $i0, i1;
        com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        com.hp.hpl.jena.graph.Node[] r2;
        java.util.Iterator $r13;
        com.hp.hpl.jena.graph.Triple $r11;
        java.lang.Object $r10, $r14;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i1 := @parameter1: int;

        r3 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(0, r2, r3);

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.builtins.CountLiteralValues: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(1, r2, r3);

        $r6 = interfaceinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.util.iterator.ClosableIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r5, null);

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.hp.hpl.jena.graph.Triple) $r10;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label4;

        z5 = 0;

        $r13 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $z4 = virtualinvoke $r12.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>($r14);

        if $z4 == 0 goto label2;

        z5 = 1;

        goto label3;

     label3:
        if z5 != 0 goto label4;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label4:
        goto label1;

     label5:
        $r7 = interfaceinvoke r3.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        $r8 = r2[2];

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r9 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Util: com.hp.hpl.jena.graph.Node makeIntNode(int)>($i0);

        $z1 = interfaceinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: boolean bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r8, $r9);

        return $z1;
    }
}
