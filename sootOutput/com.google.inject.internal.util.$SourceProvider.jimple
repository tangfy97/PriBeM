public final class com.google.inject.internal.util.$SourceProvider extends java.lang.Object
{
    public static final java.lang.Object UNKNOWN_SOURCE;
    private final com.google.inject.internal.util.$ImmutableSet classNamesToSkip;
    public static final com.google.inject.internal.util.$SourceProvider DEFAULT_INSTANCE;

    private void <init>(java.lang.Iterable)
    {
        com.google.inject.internal.util.$SourceProvider r0;
        com.google.inject.internal.util.$ImmutableSet $r2;
        java.lang.Iterable r1;

        r0 := @this: com.google.inject.internal.util.$SourceProvider;

        r1 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet copyOf(java.lang.Iterable)>(r1);

        r0.<com.google.inject.internal.util.$SourceProvider: com.google.inject.internal.util.$ImmutableSet classNamesToSkip> = $r2;

        return;
    }

    public transient com.google.inject.internal.util.$SourceProvider plusSkippedClasses(java.lang.Class[])
    {
        java.util.List $r4;
        com.google.inject.internal.util.$ImmutableSet $r3;
        java.lang.Class[] r2;
        com.google.inject.internal.util.$SourceProvider $r0, r1;
        java.lang.Iterable $r5;

        r1 := @this: com.google.inject.internal.util.$SourceProvider;

        r2 := @parameter0: java.lang.Class[];

        $r0 = new com.google.inject.internal.util.$SourceProvider;

        $r3 = r1.<com.google.inject.internal.util.$SourceProvider: com.google.inject.internal.util.$ImmutableSet classNamesToSkip>;

        $r4 = staticinvoke <com.google.inject.internal.util.$SourceProvider: java.util.List asStrings(java.lang.Class[])>(r2);

        $r5 = staticinvoke <com.google.inject.internal.util.$Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r3, $r4);

        specialinvoke $r0.<com.google.inject.internal.util.$SourceProvider: void <init>(java.lang.Iterable)>($r5);

        return $r0;
    }

    private static transient java.util.List asStrings(java.lang.Class[])
    {
        int i0, i1;
        java.lang.Class[] r1;
        java.lang.Class r2;
        java.lang.String $r3;
        java.util.ArrayList $r0;

        r1 := @parameter0: java.lang.Class[];

        $r0 = staticinvoke <com.google.inject.internal.util.$Lists: java.util.ArrayList newArrayList()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.StackTraceElement get()
    {
        java.lang.Throwable $r0;
        java.lang.AssertionError $r2;
        com.google.inject.internal.util.$SourceProvider r5;
        java.lang.StackTraceElement[] $r1;
        com.google.inject.internal.util.$ImmutableSet $r6;
        int i0, i1;
        java.lang.StackTraceElement r3;
        java.lang.String $r4;
        boolean $z0;

        r5 := @this: com.google.inject.internal.util.$SourceProvider;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = $r1[i1];

        $r4 = virtualinvoke r3.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r6 = r5.<com.google.inject.internal.util.$SourceProvider: com.google.inject.internal.util.$ImmutableSet classNamesToSkip>;

        $z0 = virtualinvoke $r6.<com.google.inject.internal.util.$ImmutableSet: boolean contains(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    static void <clinit>()
    {
        com.google.inject.internal.util.$ImmutableSet $r3;
        java.lang.Class $r1;
        java.lang.String $r2;
        com.google.inject.internal.util.$SourceProvider $r0;

        <com.google.inject.internal.util.$SourceProvider: java.lang.Object UNKNOWN_SOURCE> = "[unknown source]";

        $r0 = new com.google.inject.internal.util.$SourceProvider;

        $r1 = class "Lcom/google/inject/internal/util/$SourceProvider;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <com.google.inject.internal.util.$ImmutableSet: com.google.inject.internal.util.$ImmutableSet of(java.lang.Object)>($r2);

        specialinvoke $r0.<com.google.inject.internal.util.$SourceProvider: void <init>(java.lang.Iterable)>($r3);

        <com.google.inject.internal.util.$SourceProvider: com.google.inject.internal.util.$SourceProvider DEFAULT_INSTANCE> = $r0;

        return;
    }
}
