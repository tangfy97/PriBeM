public class org.apache.batik.css.engine.sac.CSSLangCondition extends java.lang.Object implements org.w3c.css.sac.LangCondition, org.apache.batik.css.engine.sac.ExtendedCondition
{
    protected java.lang.String lang;
    protected java.lang.String langHyphen;

    public void <init>(java.lang.String)
    {
        java.lang.StringBuffer $r3, $r4, $r5;
        org.apache.batik.css.engine.sac.CSSLangCondition r0;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang> = $r2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String langHyphen> = $r6;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.batik.css.engine.sac.CSSLangCondition r2, r4;
        java.lang.Object r0;
        java.lang.Class $r1, $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r2 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label2;

     label1:
        return 0;

     label2:
        r4 = (org.apache.batik.css.engine.sac.CSSLangCondition) r0;

        $r6 = r4.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang>;

        $r5 = r2.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        return $z0;
    }

    public short getConditionType()
    {
        org.apache.batik.css.engine.sac.CSSLangCondition r0;

        r0 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        return 6;
    }

    public java.lang.String getLang()
    {
        org.apache.batik.css.engine.sac.CSSLangCondition r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        $r1 = r0.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang>;

        return $r1;
    }

    public int getSpecificity()
    {
        org.apache.batik.css.engine.sac.CSSLangCondition r0;

        r0 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        return 256;
    }

    public boolean match(org.w3c.dom.Element, java.lang.String)
    {
        java.lang.String $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.css.engine.sac.CSSLangCondition r3;
        org.w3c.dom.Element r0;

        r3 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        r0 := @parameter0: org.w3c.dom.Element;

        r10 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("lang");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = r3.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r5 = r3.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String langHyphen>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r5);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r6 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "lang");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = r3.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label3;

        $r9 = r3.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String langHyphen>;

        $z3 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z3 == 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    public void fillAttributeSet(java.util.Set)
    {
        java.util.Set r0;
        org.apache.batik.css.engine.sac.CSSLangCondition r1;

        r1 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        r0 := @parameter0: java.util.Set;

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>("lang");

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0, $r1, $r4, $r5;
        org.apache.batik.css.engine.sac.CSSLangCondition r2;
        java.lang.String $r3, $r6;

        r2 := @this: org.apache.batik.css.engine.sac.CSSLangCondition;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":lang(");

        $r3 = r2.<org.apache.batik.css.engine.sac.CSSLangCondition: java.lang.String lang>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
