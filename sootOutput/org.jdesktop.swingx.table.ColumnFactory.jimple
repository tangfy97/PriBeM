public class org.jdesktop.swingx.table.ColumnFactory extends java.lang.Object
{
    private static org.jdesktop.swingx.table.ColumnFactory columnFactory;
    private int packMargin;

    public void <init>()
    {
        org.jdesktop.swingx.table.ColumnFactory r0;

        r0 := @this: org.jdesktop.swingx.table.ColumnFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdesktop.swingx.table.ColumnFactory: int packMargin> = 4;

        return;
    }

    public static synchronized org.jdesktop.swingx.table.ColumnFactory getInstance()
    {
        org.jdesktop.swingx.table.ColumnFactory $r0, $r1, $r2;

        $r0 = <org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.ColumnFactory columnFactory>;

        if $r0 != null goto label1;

        $r2 = new org.jdesktop.swingx.table.ColumnFactory;

        specialinvoke $r2.<org.jdesktop.swingx.table.ColumnFactory: void <init>()>();

        <org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.ColumnFactory columnFactory> = $r2;

     label1:
        $r1 = <org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.ColumnFactory columnFactory>;

        return $r1;
    }

    public static synchronized void setInstance(org.jdesktop.swingx.table.ColumnFactory)
    {
        org.jdesktop.swingx.table.ColumnFactory r0;

        r0 := @parameter0: org.jdesktop.swingx.table.ColumnFactory;

        <org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.ColumnFactory columnFactory> = r0;

        return;
    }

    public org.jdesktop.swingx.table.TableColumnExt createAndConfigureTableColumn(javax.swing.table.TableModel, int)
    {
        org.jdesktop.swingx.table.ColumnFactory r0;
        int i0;
        org.jdesktop.swingx.table.TableColumnExt $r1;
        javax.swing.table.TableModel r2;

        r0 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r2 := @parameter0: javax.swing.table.TableModel;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.ColumnFactory: org.jdesktop.swingx.table.TableColumnExt createTableColumn(int)>(i0);

        if $r1 == null goto label1;

        virtualinvoke r0.<org.jdesktop.swingx.table.ColumnFactory: void configureTableColumn(javax.swing.table.TableModel,org.jdesktop.swingx.table.TableColumnExt)>(r2, $r1);

     label1:
        return $r1;
    }

    public org.jdesktop.swingx.table.TableColumnExt createTableColumn(int)
    {
        int i0;
        org.jdesktop.swingx.table.TableColumnExt $r0;
        org.jdesktop.swingx.table.ColumnFactory r1;

        r1 := @this: org.jdesktop.swingx.table.ColumnFactory;

        i0 := @parameter0: int;

        $r0 = new org.jdesktop.swingx.table.TableColumnExt;

        specialinvoke $r0.<org.jdesktop.swingx.table.TableColumnExt: void <init>(int)>(i0);

        return $r0;
    }

    public void configureTableColumn(javax.swing.table.TableModel, org.jdesktop.swingx.table.TableColumnExt)
    {
        java.lang.IllegalStateException $r1;
        org.jdesktop.swingx.table.ColumnFactory r4;
        org.jdesktop.swingx.table.TableColumnExt r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3;
        javax.swing.table.TableModel r2;

        r4 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r2 := @parameter0: javax.swing.table.TableModel;

        r0 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $i2 = interfaceinvoke r2.<javax.swing.table.TableModel: int getColumnCount()>();

        if $i1 < $i2 goto label2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("column must have valid modelIndex");

        throw $r1;

     label2:
        $i3 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $r3 = interfaceinvoke r2.<javax.swing.table.TableModel: java.lang.String getColumnName(int)>($i3);

        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setHeaderValue(java.lang.Object)>($r3);

        return;
    }

    public void configureColumnWidths(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt)
    {
        javax.swing.table.TableColumnModel $r3;
        org.jdesktop.swingx.table.ColumnFactory r1;
        org.jdesktop.swingx.table.TableColumnExt r2;
        org.jdesktop.swingx.JXTable r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;

        r1 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r0 := @parameter0: org.jdesktop.swingx.JXTable;

        r2 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getColumnMargin()>();

        i6 = 75 - $i0;

        $i1 = virtualinvoke r1.<org.jdesktop.swingx.table.ColumnFactory: int calcPrototypeWidth(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r0, r2);

        if $i1 <= 0 goto label1;

        i6 = $i1;

     label1:
        $i2 = virtualinvoke r1.<org.jdesktop.swingx.table.ColumnFactory: int calcHeaderWidth(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r0, r2);

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i2);

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumnModel getColumnModel()>();

        $i4 = interfaceinvoke $r3.<javax.swing.table.TableColumnModel: int getColumnMargin()>();

        $i5 = $i3 + $i4;

        virtualinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: void setPreferredWidth(int)>($i5);

        return;
    }

    public int getPreferredScrollableViewportWidth(org.jdesktop.swingx.JXTable)
    {
        javax.swing.table.TableColumn $r1;
        org.jdesktop.swingx.table.ColumnFactory r2;
        org.jdesktop.swingx.JXTable r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;

        r2 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r0 := @parameter0: org.jdesktop.swingx.JXTable;

        i8 = 0;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        if $i0 >= 0 goto label1;

        i9 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getColumnCount()>();

        $i2 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

     label2:
        i10 = 0;

     label3:
        if i10 >= i9 goto label4;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableColumn getColumn(int)>(i10);

        $i7 = virtualinvoke $r1.<javax.swing.table.TableColumn: int getPreferredWidth()>();

        i8 = i8 + $i7;

        i10 = i10 + 1;

        goto label3;

     label4:
        $i3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        if i9 >= $i3 goto label5;

        $i4 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getVisibleColumnCount()>();

        $i5 = $i4 - i9;

        $i6 = $i5 * 75;

        i8 = i8 + $i6;

     label5:
        return i8;
    }

    protected int calcHeaderWidth(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt)
    {
        org.jdesktop.swingx.table.ColumnFactory r0;
        org.jdesktop.swingx.table.TableColumnExt r2;
        javax.swing.table.TableCellRenderer $r3;
        org.jdesktop.swingx.JXTable r1;
        java.awt.Component $r5;
        java.awt.Dimension $r6;
        int i0, $i2, $i4, $i6;
        java.lang.Object $r4;

        r0 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r1 := @parameter0: org.jdesktop.swingx.JXTable;

        r2 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        $i2 = (int) -1;

        i0 = $i2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.table.ColumnFactory: javax.swing.table.TableCellRenderer getHeaderRenderer(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r1, r2);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r2.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getHeaderValue()>();

        $i4 = (int) -1;

        $i6 = (int) -1;

        $r5 = interfaceinvoke $r3.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>(r1, $r4, 0, 0, $i4, $i6);

        $r6 = virtualinvoke $r5.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        i0 = $r6.<java.awt.Dimension: int width>;

     label1:
        return i0;
    }

    protected int calcPrototypeWidth(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt)
    {
        org.jdesktop.swingx.table.ColumnFactory r2;
        org.jdesktop.swingx.table.TableColumnExt r0;
        javax.swing.table.TableCellRenderer $r4;
        org.jdesktop.swingx.JXTable r3;
        java.awt.Component $r5;
        java.awt.Dimension $r6;
        int i0, $i2, $i4;
        java.lang.Object $r1;

        r2 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r3 := @parameter0: org.jdesktop.swingx.JXTable;

        r0 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        $i2 = (int) -1;

        i0 = $i2;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getPrototypeValue()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke r2.<org.jdesktop.swingx.table.ColumnFactory: javax.swing.table.TableCellRenderer getCellRenderer(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r3, r0);

        $i4 = (int) -1;

        $r5 = interfaceinvoke $r4.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>(r3, $r1, 0, 0, 0, $i4);

        $r6 = virtualinvoke $r5.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        i0 = $r6.<java.awt.Dimension: int width>;

     label1:
        return i0;
    }

    protected javax.swing.table.TableCellRenderer getCellRenderer(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt)
    {
        org.jdesktop.swingx.table.ColumnFactory r6;
        org.jdesktop.swingx.table.TableColumnExt r1;
        javax.swing.table.TableCellRenderer $r2, $r5, r7;
        org.jdesktop.swingx.JXTable r0;
        int $i0, $i1, $i2;
        java.lang.Class $r4;
        javax.swing.table.TableModel $r3;

        r6 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r0 := @parameter0: org.jdesktop.swingx.JXTable;

        r1 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        $i0 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $i1 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int convertColumnIndexToView(int)>($i0);

        if $i1 < 0 goto label1;

        $r5 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellRenderer getCellRenderer(int,int)>(0, $i1);

        return $r5;

     label1:
        $r2 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellRenderer getCellRenderer()>();

        r7 = $r2;

        if $r2 != null goto label2;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableModel getModel()>();

        $i2 = virtualinvoke r1.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $r4 = interfaceinvoke $r3.<javax.swing.table.TableModel: java.lang.Class getColumnClass(int)>($i2);

        r7 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: javax.swing.table.TableCellRenderer getDefaultRenderer(java.lang.Class)>($r4);

     label2:
        return r7;
    }

    protected javax.swing.table.TableCellRenderer getHeaderRenderer(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt)
    {
        org.jdesktop.swingx.table.ColumnFactory r4;
        org.jdesktop.swingx.table.TableColumnExt r0;
        javax.swing.table.TableCellRenderer $r1, r5;
        javax.swing.table.JTableHeader $r3;
        org.jdesktop.swingx.JXTable r2;

        r4 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r2 := @parameter0: org.jdesktop.swingx.JXTable;

        r0 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: javax.swing.table.TableCellRenderer getHeaderRenderer()>();

        r5 = $r1;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r2.<org.jdesktop.swingx.JXTable: javax.swing.table.JTableHeader getTableHeader()>();

        if $r3 == null goto label1;

        r5 = virtualinvoke $r3.<javax.swing.table.JTableHeader: javax.swing.table.TableCellRenderer getDefaultRenderer()>();

     label1:
        return r5;
    }

    public void packColumn(org.jdesktop.swingx.JXTable, org.jdesktop.swingx.table.TableColumnExt, int, int)
    {
        java.lang.IllegalStateException $r11;
        org.jdesktop.swingx.table.TableColumnExt r0;
        javax.swing.table.TableCellRenderer $r3, $r4;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, i7, i8, $i9, i10, $i12;
        boolean $z0;
        org.jdesktop.swingx.table.ColumnFactory r2;
        org.jdesktop.swingx.JXTable r1;
        java.awt.Component $r5, $r8;
        java.awt.Dimension $r6, $r9;
        java.lang.Object $r7;

        r2 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r1 := @parameter0: org.jdesktop.swingx.JXTable;

        r0 := @parameter1: org.jdesktop.swingx.table.TableColumnExt;

        i6 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: boolean isVisible()>();

        if $z0 != 0 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("column must be visible to pack");

        throw $r11;

     label1:
        $i0 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: int getModelIndex()>();

        $i1 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: int convertColumnIndexToView(int)>($i0);

        i7 = 0;

        $r3 = virtualinvoke r2.<org.jdesktop.swingx.table.ColumnFactory: javax.swing.table.TableCellRenderer getHeaderRenderer(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r1, r0);

        if $r3 == null goto label2;

        $r7 = virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: java.lang.Object getHeaderValue()>();

        $r8 = interfaceinvoke $r3.<javax.swing.table.TableCellRenderer: java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)>(r1, $r7, 0, 0, 0, $i1);

        $r9 = virtualinvoke $r8.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        i7 = $r9.<java.awt.Dimension: int width>;

     label2:
        $r4 = virtualinvoke r2.<org.jdesktop.swingx.table.ColumnFactory: javax.swing.table.TableCellRenderer getCellRenderer(org.jdesktop.swingx.JXTable,org.jdesktop.swingx.table.TableColumnExt)>(r1, r0);

        i8 = 0;

     label3:
        $i9 = virtualinvoke r2.<org.jdesktop.swingx.table.ColumnFactory: int getRowCount(org.jdesktop.swingx.JXTable)>(r1);

        if i8 >= $i9 goto label4;

        $r5 = virtualinvoke r1.<org.jdesktop.swingx.JXTable: java.awt.Component prepareRenderer(javax.swing.table.TableCellRenderer,int,int)>($r4, i8, $i1);

        $r6 = virtualinvoke $r5.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        $i5 = $r6.<java.awt.Dimension: int width>;

        i7 = staticinvoke <java.lang.Math: int max(int,int)>(i7, $i5);

        i8 = i8 + 1;

        goto label3;

     label4:
        if i6 >= 0 goto label5;

        i6 = virtualinvoke r2.<org.jdesktop.swingx.table.ColumnFactory: int getDefaultPackMargin()>();

     label5:
        $i2 = 2 * i6;

        $i4 = i7 + $i2;

        i10 = $i4;

        $i12 = (int) -1;

        if i3 == $i12 goto label6;

        if $i4 <= i3 goto label6;

        i10 = i3;

     label6:
        virtualinvoke r0.<org.jdesktop.swingx.table.TableColumnExt: void setPreferredWidth(int)>(i10);

        return;
    }

    protected int getRowCount(org.jdesktop.swingx.JXTable)
    {
        int $i0;
        org.jdesktop.swingx.JXTable r0;
        org.jdesktop.swingx.table.ColumnFactory r1;

        r1 := @this: org.jdesktop.swingx.table.ColumnFactory;

        r0 := @parameter0: org.jdesktop.swingx.JXTable;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.JXTable: int getRowCount()>();

        return $i0;
    }

    public int getDefaultPackMargin()
    {
        int $i0;
        org.jdesktop.swingx.table.ColumnFactory r0;

        r0 := @this: org.jdesktop.swingx.table.ColumnFactory;

        $i0 = r0.<org.jdesktop.swingx.table.ColumnFactory: int packMargin>;

        return $i0;
    }

    public void setDefaultPackMargin(int)
    {
        int i0;
        org.jdesktop.swingx.table.ColumnFactory r0;

        r0 := @this: org.jdesktop.swingx.table.ColumnFactory;

        i0 := @parameter0: int;

        r0.<org.jdesktop.swingx.table.ColumnFactory: int packMargin> = i0;

        return;
    }
}
