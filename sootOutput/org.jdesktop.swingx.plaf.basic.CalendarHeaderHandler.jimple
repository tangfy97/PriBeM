public abstract class org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    public static final java.lang.String uiControllerID;
    protected org.jdesktop.swingx.JXMonthView monthView;
    private javax.swing.JComponent calendarHeader;
    protected javax.swing.Icon monthDownImage;
    protected javax.swing.Icon monthUpImage;
    private java.beans.PropertyChangeListener monthViewPropertyChangeListener;

    public void <init>()
    {
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void install(org.jdesktop.swingx.JXMonthView)
    {
        org.jdesktop.swingx.JXMonthView r1;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        javax.swing.Icon $r2, $r3;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r1 := @parameter0: org.jdesktop.swingx.JXMonthView;

        r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView> = r1;

        $r2 = staticinvoke <javax.swing.UIManager: javax.swing.Icon getIcon(java.lang.Object)>("JXMonthView.monthDownFileName");

        r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthDownImage> = $r2;

        $r3 = staticinvoke <javax.swing.UIManager: javax.swing.Icon getIcon(java.lang.Object)>("JXMonthView.monthUpFileName");

        r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthUpImage> = $r3;

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void installNavigationActions()>();

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void installListeners()>();

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void componentOrientationChanged()>();

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void monthStringBackgroundChanged()>();

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void fontChanged()>();

        return;
    }

    public void uninstall(org.jdesktop.swingx.JXMonthView)
    {
        javax.swing.JComponent $r2;
        org.jdesktop.swingx.JXMonthView $r1, r3;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r3 := @parameter0: org.jdesktop.swingx.JXMonthView;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent getHeaderComponent()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXMonthView: void remove(java.awt.Component)>($r2);

        virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void uninstallListeners()>();

        r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView> = null;

        return;
    }

    public javax.swing.JComponent getHeaderComponent()
    {
        javax.swing.JComponent $r1, $r2, $r3;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent calendarHeader>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent createCalendarHeader()>();

        r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent calendarHeader> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent calendarHeader>;

        return $r2;
    }

    protected void installListeners()
    {
        org.jdesktop.swingx.JXMonthView $r1;
        java.beans.PropertyChangeListener $r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r2 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.beans.PropertyChangeListener getMonthViewPropertyChangeListener()>();

        virtualinvoke $r1.<org.jdesktop.swingx.JXMonthView: void addPropertyChangeListener(java.beans.PropertyChangeListener)>($r2);

        return;
    }

    protected void uninstallListeners()
    {
        java.beans.PropertyChangeListener $r1;
        org.jdesktop.swingx.JXMonthView $r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r2 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.beans.PropertyChangeListener monthViewPropertyChangeListener>;

        virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: void removePropertyChangeListener(java.beans.PropertyChangeListener)>($r1);

        return;
    }

    private java.beans.PropertyChangeListener getMonthViewPropertyChangeListener()
    {
        java.beans.PropertyChangeListener $r1, $r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$1 $r3;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.beans.PropertyChangeListener monthViewPropertyChangeListener>;

        if $r1 != null goto label1;

        $r3 = new org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$1;

        specialinvoke $r3.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$1: void <init>(org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler)>(r0);

        r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.beans.PropertyChangeListener monthViewPropertyChangeListener> = $r3;

     label1:
        $r2 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.beans.PropertyChangeListener monthViewPropertyChangeListener>;

        return $r2;
    }

    protected void monthStringBackgroundChanged()
    {
        javax.swing.JComponent $r1;
        java.awt.Color $r3, $r4;
        org.jdesktop.swingx.JXMonthView $r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent getHeaderComponent()>();

        $r2 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: java.awt.Color getMonthStringBackground()>();

        $r4 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.awt.Color getAsNotUIResource(java.awt.Color)>($r3);

        virtualinvoke $r1.<javax.swing.JComponent: void setBackground(java.awt.Color)>($r4);

        return;
    }

    protected void fontChanged()
    {
        javax.swing.JComponent $r1;
        org.jdesktop.swingx.JXMonthView $r4;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        java.awt.Font $r2, $r3;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent getHeaderComponent()>();

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.awt.Font createDerivedFont()>();

        $r3 = specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.awt.Font getAsNotUIResource(java.awt.Font)>($r2);

        virtualinvoke $r1.<javax.swing.JComponent: void setFont(java.awt.Font)>($r3);

        $r4 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        virtualinvoke $r4.<org.jdesktop.swingx.JXMonthView: void revalidate()>();

        return;
    }

    protected void componentOrientationChanged()
    {
        javax.swing.JComponent $r1;
        org.jdesktop.swingx.JXMonthView $r2, $r4;
        javax.swing.Icon $r6, $r7, $r8, $r9;
        java.awt.ComponentOrientation $r3, $r5;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.JComponent getHeaderComponent()>();

        $r2 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r3 = virtualinvoke $r2.<org.jdesktop.swingx.JXMonthView: java.awt.ComponentOrientation getComponentOrientation()>();

        virtualinvoke $r1.<javax.swing.JComponent: void applyComponentOrientation(java.awt.ComponentOrientation)>($r3);

        $r4 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r5 = virtualinvoke $r4.<org.jdesktop.swingx.JXMonthView: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r5.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthDownImage>;

        $r8 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthUpImage>;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void updateMonthNavigationIcons(javax.swing.Icon,javax.swing.Icon)>($r9, $r8);

        goto label2;

     label1:
        $r7 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthUpImage>;

        $r6 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthDownImage>;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void updateMonthNavigationIcons(javax.swing.Icon,javax.swing.Icon)>($r7, $r6);

     label2:
        return;
    }

    private void updateMonthNavigationIcons(javax.swing.Icon, javax.swing.Icon)
    {
        javax.swing.Icon r1, r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r1 := @parameter0: javax.swing.Icon;

        r2 := @parameter1: javax.swing.Icon;

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void updateActionIcon(java.lang.String,javax.swing.Icon)>("previousMonth", r1);

        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void updateActionIcon(java.lang.String,javax.swing.Icon)>("nextMonth", r2);

        return;
    }

    private void updateActionIcon(java.lang.String, javax.swing.Icon)
    {
        org.jdesktop.swingx.JXMonthView $r1;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        javax.swing.Icon r5;
        java.lang.String r3;
        javax.swing.Action $r4;
        javax.swing.ActionMap $r2;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: javax.swing.Icon;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXMonthView: javax.swing.ActionMap getActionMap()>();

        $r4 = virtualinvoke $r2.<javax.swing.ActionMap: javax.swing.Action get(java.lang.Object)>(r3);

        if $r4 == null goto label1;

        interfaceinvoke $r4.<javax.swing.Action: void putValue(java.lang.String,java.lang.Object)>("SmallIcon", r5);

     label1:
        return;
    }

    protected abstract javax.swing.JComponent createCalendarHeader();

    protected void installNavigationActions()
    {
        org.jdesktop.swingx.JXMonthView $r1, $r3;
        javax.swing.Icon $r5, $r6;
        java.awt.ComponentOrientation $r2, $r4;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXMonthView: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r2.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthDownImage>;

        goto label2;

     label1:
        $r5 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthUpImage>;

     label2:
        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void installWrapper(java.lang.String,java.lang.String,javax.swing.Icon)>("scrollToPreviousMonth", "previousMonth", $r5);

        $r3 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r4 = virtualinvoke $r3.<org.jdesktop.swingx.JXMonthView: java.awt.ComponentOrientation getComponentOrientation()>();

        $z1 = virtualinvoke $r4.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthUpImage>;

        goto label4;

     label3:
        $r6 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: javax.swing.Icon monthDownImage>;

     label4:
        specialinvoke r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: void installWrapper(java.lang.String,java.lang.String,javax.swing.Icon)>("scrollToNextMonth", "nextMonth", $r6);

        return;
    }

    private void installWrapper(java.lang.String, java.lang.String, javax.swing.Icon)
    {
        org.jdesktop.swingx.JXMonthView $r4;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r1;
        javax.swing.Icon r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$2 $r0;
        java.lang.String r3, r6;
        javax.swing.ActionMap $r5;

        r1 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r2 := @parameter2: javax.swing.Icon;

        $r0 = new org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$2;

        specialinvoke $r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler$2: void <init>(org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler,java.lang.String,javax.swing.Icon,java.lang.String)>(r1, null, r2, r3);

        $r4 = r1.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r5 = virtualinvoke $r4.<org.jdesktop.swingx.JXMonthView: javax.swing.ActionMap getActionMap()>();

        virtualinvoke $r5.<javax.swing.ActionMap: void put(java.lang.Object,javax.swing.Action)>(r6, $r0);

        return;
    }

    private java.awt.Font getAsNotUIResource(java.awt.Font)
    {
        java.awt.Font r0, $r2;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r3;
        java.util.Map $r1;
        boolean $z0;

        r3 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r0 := @parameter0: java.awt.Font;

        $z0 = r0 instanceof javax.swing.plaf.UIResource;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.awt.Font: java.util.Map getAttributes()>();

        $r2 = virtualinvoke r0.<java.awt.Font: java.awt.Font deriveFont(java.util.Map)>($r1);

        return $r2;
    }

    private java.awt.Color getAsNotUIResource(java.awt.Color)
    {
        java.awt.Color r0, $r2;
        float[] $r1;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r3;
        float $f0, $f1, $f2, $f3;
        boolean $z0;

        r3 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        r0 := @parameter0: java.awt.Color;

        $z0 = r0 instanceof javax.swing.plaf.UIResource;

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.awt.Color: float[] getRGBComponents(float[])>(null);

        $r2 = new java.awt.Color;

        $f3 = $r1[0];

        $f2 = $r1[1];

        $f1 = $r1[2];

        $f0 = $r1[3];

        specialinvoke $r2.<java.awt.Color: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        return $r2;
    }

    protected java.awt.Font createDerivedFont()
    {
        org.jdesktop.swingx.JXMonthView $r1;
        org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler r0;
        java.awt.Font $r2, $r3;

        r0 := @this: org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler;

        $r1 = r0.<org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: org.jdesktop.swingx.JXMonthView monthView>;

        $r2 = virtualinvoke $r1.<org.jdesktop.swingx.JXMonthView: java.awt.Font getFont()>();

        $r3 = virtualinvoke $r2.<java.awt.Font: java.awt.Font deriveFont(int)>(1);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.lang.String uiControllerID> = "CalendarHeaderHandler";

        $r0 = class "Lorg/jdesktop/swingx/plaf/basic/CalendarHeaderHandler;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.jdesktop.swingx.plaf.basic.CalendarHeaderHandler: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
