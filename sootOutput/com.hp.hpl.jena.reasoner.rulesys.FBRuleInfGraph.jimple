public class com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph extends com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph implements com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI
{
    protected com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext context;
    protected com.hp.hpl.jena.reasoner.Finder dataFind;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine;
    protected java.util.List rawRules;
    protected java.util.List rules;
    public static boolean useRETE;
    protected boolean useTGCCaching;
    protected com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine;
    protected java.util.List preprocessorHooks;
    protected com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache tempNodecache;
    protected java.util.Set hiddenNodes;
    protected java.util.HashMap dtRange;
    protected boolean requestDatatypeRangeValidation;
    static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.graph.Graph r2;
        com.hp.hpl.jena.reasoner.Reasoner r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r2 := @parameter1: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,com.hp.hpl.jena.graph.Graph)>(r1, r2);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean requestDatatypeRangeValidation> = 0;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void constructorInit(com.hp.hpl.jena.graph.Graph)>(r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, java.util.List, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.List r2;
        com.hp.hpl.jena.reasoner.Reasoner r1;
        com.hp.hpl.jena.graph.Graph r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph)>(r1, r2, r3);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean requestDatatypeRangeValidation> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules> = r2;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void constructorInit(com.hp.hpl.jena.graph.Graph)>(r3);

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.Reasoner, java.util.List, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.List r2;
        com.hp.hpl.jena.reasoner.Reasoner r1;
        com.hp.hpl.jena.graph.Graph r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.Reasoner;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.hp.hpl.jena.graph.Graph;

        r4 := @parameter3: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void <init>(com.hp.hpl.jena.reasoner.Reasoner,java.util.List,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Graph)>(r1, r2, r3, r4);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean requestDatatypeRangeValidation> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules> = r2;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void constructorInit(com.hp.hpl.jena.graph.Graph)>(r3);

        return;
    }

    private void constructorInit(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0, $r4;
        java.util.Set $r5, $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache $r2;
        java.util.HashSet $r3;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void initLP(com.hp.hpl.jena.graph.Graph)>(r1);

        $r2 = new com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache: void <init>(com.hp.hpl.jena.reasoner.InfGraph)>(r0);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache tempNodecache> = $r2;

        $z0 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableFilteringOfHiddenInfNodes>;

        if $z0 == 0 goto label1;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes> = $r3;

        if r1 == null goto label1;

        $z1 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        if $z1 == 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        $r4 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) r1;

        $r5 = $r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        interfaceinvoke $r6.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

     label1:
        return;
    }

    protected void instantiateRuleEngine(java.util.List)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r1;
        java.util.List r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine $r2, $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine $r3, $r5;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter0: java.util.List;

        if r0 == null goto label2;

        $z1 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useRETE>;

        if $z1 == 0 goto label1;

        $r5 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,java.util.List)>(r1, r0);

        r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = $r5;

        goto label4;

     label1:
        $r4 = new com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI,java.util.List)>(r1, r0);

        r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = $r4;

        goto label4;

     label2:
        $z0 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useRETE>;

        if $z0 == 0 goto label3;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.RETEEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>(r1);

        r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = $r3;

        goto label4;

     label3:
        $r2 = new com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>(r1);

        r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine> = $r2;

     label4:
        return;
    }

    private void initLP(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r1, $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore $r3, $r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2, $r5, $r7;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        if r0 == null goto label1;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        if $z0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore;

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void <init>()>();

        $r4 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) r0;

        $r5 = $r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore getRuleStore()>();

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore: void addAll(com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)>($r6);

        $r7 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI,com.hp.hpl.jena.reasoner.rulesys.impl.LPRuleStore)>(r1, $r3);

        r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine> = $r7;

        goto label2;

     label1:
        $r2 = new com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine;

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI)>(r1);

        r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine> = $r2;

     label2:
        return;
    }

    public void setUseTGCCache()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching> = 1;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void resetTGCCache()>();

        return;
    }

    private void resetTGCCache()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0, $r15;
        com.hp.hpl.jena.graph.Node $r5, $r7, $r10, $r12;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache $r3, $r8;
        com.hp.hpl.jena.rdf.model.Property $r4, $r6, $r9, $r11;
        com.hp.hpl.jena.graph.Graph $r1, $r14;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r2, $r13, $r16;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r1 == null goto label1;

        $r13 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine;

        $r14 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        $r15 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r14;

        $r16 = $r15.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine)>($r16);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine> = $r13;

        goto label2;

     label1:
        $r2 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine;

        $r3 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r4 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property directSubClassOf>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r6 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subClassOf>;

        $r7 = interfaceinvoke $r6.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r5, $r7);

        $r8 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r9 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property directSubPropertyOf>;

        $r10 = interfaceinvoke $r9.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r11 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property subPropertyOf>;

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r12);

        specialinvoke $r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>($r3, $r8);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine> = $r2;

     label2:
        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.Finder $r5;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r1);

        return $r6;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.Finder $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        return $r3;
    }

    public boolean processBuiltin(com.hp.hpl.jena.reasoner.rulesys.ClauseEntry, com.hp.hpl.jena.reasoner.rulesys.Rule, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r6;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry r7;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;
        com.hp.hpl.jena.reasoner.ReasonerException $r0;

        r6 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r7 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.Rule;

        r8 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $r0 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error in FBLP rule engine, incorrect invocation of builtin in rule ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    public void addBRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r1;
        org.slf4j.Logger $r0, $r6;
        com.hp.hpl.jena.reasoner.rulesys.Rule r2;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r3, $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r0 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: org.slf4j.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding rule ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label1:
        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void addRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r2);

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        return;
    }

    public void deleteBRule(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r1;
        org.slf4j.Logger $r0, $r6;
        com.hp.hpl.jena.reasoner.rulesys.Rule r2;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.String $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r3, $r4;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r0 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: org.slf4j.Logger logger>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting rule ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label1:
        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void deleteRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r2);

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        return;
    }

    public void addBRules(java.util.List)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r2;
        java.util.Iterator $r1;
        java.util.List r0;
        com.hp.hpl.jena.reasoner.rulesys.Rule r5;
        java.lang.Object $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r3, $r6;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r4;

        $r6 = r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void addRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r5);

        goto label1;

     label2:
        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        return;
    }

    public java.util.List getBRules()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.List $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: java.util.List getAllRules()>();

        return $r2;
    }

    public java.util.List getRules()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        return $r1;
    }

    public void setTabled(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        org.slf4j.Logger $r4;
        com.hp.hpl.jena.graph.Node r1;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.lang.String $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void tablePredicate(com.hp.hpl.jena.graph.Node)>(r1);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean traceOn>;

        if $z0 == 0 goto label1;

        $r4 = <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LP TABLE ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r7);

     label1:
        return;
    }

    private java.lang.Object getForwardRuleStore()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $r2 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: java.lang.Object getRuleStore()>();

        return $r2;
    }

    public void addDeduction(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r3;
        com.hp.hpl.jena.graph.Graph $r1;
        com.hp.hpl.jena.graph.Triple r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph getCurrentDeductionsGraph()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r2);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean add(com.hp.hpl.jena.graph.Triple)>(r2);

     label1:
        return;
    }

    public com.hp.hpl.jena.graph.Node getTemp(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache $r4;
        com.hp.hpl.jena.graph.Node r1, r2, r3, $r5;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache tempNodecache>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.rulesys.impl.TempNodeCache: com.hp.hpl.jena.graph.Node getTemp(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        return $r5;
    }

    public void addRuleDuringPrepare(com.hp.hpl.jena.reasoner.rulesys.Rule)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.ArrayList $r5;
        java.util.List $r1, $r2, $r4, $r6, $r7;
        com.hp.hpl.jena.reasoner.rulesys.Rule r3;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.Rule;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules>;

        if $r2 != $r1 goto label1;

        $r5 = new java.util.ArrayList;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules>;

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules> = $r5;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void instantiateRuleEngine(java.util.List)>($r7);

     label1:
        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public void addPreprocessingHook(com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.List $r1, $r3;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook r2;
        java.util.ArrayList $r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks> = $r4;

     label1:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public synchronized void prepare()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext $r13;
        com.hp.hpl.jena.graph.Node $r51, $r53, $r57, $r60;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r45;
        com.hp.hpl.jena.rdf.model.Property $r55, $r58;
        com.hp.hpl.jena.graph.Triple $r48;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook r76;
        com.hp.hpl.jena.reasoner.FGraph $r2, $r3, $r4, $r6, $r7, $r19, $r26, $r27, $r49, $r61, $r62, $r64, $r71, $r72;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r8;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0, $r70;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        java.util.List $r1, $r9, $r10, $r11, $r22, $r24, $r73;
        com.hp.hpl.jena.reasoner.TriplePattern r46;
        com.hp.hpl.jena.reasoner.InfGraph $r16;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache $r36, $r38, $r41, $r43;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r12, $r14;
        int $i0, $i1, $i2, $i3, i4;
        com.hp.hpl.jena.graph.Graph $r5, $r15, $r17, $r18, $r23, $r32, $r63, r65, $r69, $r77;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r33, $r34, $r37, $r40, $r42, $r47, $r50, $r52, $r54, $r56, $r59, $r68;
        java.util.Iterator $r25, $r74;
        com.hp.hpl.jena.reasoner.rulesys.Rule r75;
        com.hp.hpl.jena.reasoner.Finder $r20, $r21, $r28, $r29, $r31, $r35, $r39, $r66, r67;
        java.lang.Object $r30, $r44;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean isPrepared()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(1);

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules> = $r1;

        r65 = null;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        if $r2 == null goto label02;

        $r64 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        r65 = virtualinvoke $r64.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

     label02:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        if $r3 == null goto label03;

        $r62 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r63 = virtualinvoke $r62.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r63.<com.hp.hpl.jena.graph.Graph: void clear()>();

        goto label04;

     label03:
        $r4 = new com.hp.hpl.jena.reasoner.FGraph;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph createDeductionsGraph()>();

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>($r5);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions> = $r4;

     label04:
        if r65 != null goto label05;

        $r66 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        goto label06;

     label05:
        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r66 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r7, $r6);

     label06:
        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r66;

        $r61 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        r67 = $r61;

        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching>;

        if $z1 == 0 goto label15;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void resetTGCCache()>();

        $r32 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r32 == null goto label08;

        $r52 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r51 = <com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner: com.hp.hpl.jena.graph.Node subPropertyOf>;

        $z4 = virtualinvoke $r52.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean checkOccurance(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r51, r65);

        if $z4 != 0 goto label07;

        $r54 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r53 = <com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveReasoner: com.hp.hpl.jena.graph.Node subClassOf>;

        $z5 = virtualinvoke $r54.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean checkOccurance(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r53, r65);

        if $z5 != 0 goto label07;

        $r56 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r55 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property domain>;

        $r57 = interfaceinvoke $r55.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $z6 = virtualinvoke $r56.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean checkOccurance(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r57, r65);

        if $z6 != 0 goto label07;

        $r59 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r58 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property range>;

        $r60 = interfaceinvoke $r58.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $z7 = virtualinvoke $r59.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean checkOccurance(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Graph)>($r60, r65);

        if $z7 == 0 goto label09;

     label07:
        $r68 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r69 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        $r70 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) $r69;

        $r71 = $r70.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r72 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        virtualinvoke $r68.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.Finder insert(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.FGraph)>($r71, $r72);

        goto label09;

     label08:
        if r65 == null goto label09;

        $r50 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r49 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        virtualinvoke $r50.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.Finder insert(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.FGraph)>(null, $r49);

     label09:
        $r73 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        $r74 = interfaceinvoke $r73.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z8 = interfaceinvoke $r74.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label14;

        $r44 = interfaceinvoke $r74.<java.util.Iterator: java.lang.Object next()>();

        r75 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r44;

        $i2 = virtualinvoke r75.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if $i2 != 0 goto label13;

        i4 = 0;

     label11:
        $i3 = virtualinvoke r75.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if i4 >= $i3 goto label13;

        $r45 = virtualinvoke r75.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(i4);

        $z3 = $r45 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z3 == 0 goto label12;

        r46 = (com.hp.hpl.jena.reasoner.TriplePattern) $r45;

        $r47 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r48 = virtualinvoke r46.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke $r47.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean add(com.hp.hpl.jena.graph.Triple)>($r48);

     label12:
        i4 = i4 + 1;

        goto label11;

     label13:
        goto label10;

     label14:
        $r33 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        virtualinvoke $r33.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: void setCaching(boolean,boolean)>(1, 1);

        $r35 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r34 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r36 = virtualinvoke $r34.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache getSubClassCache()>();

        $r37 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r38 = virtualinvoke $r37.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache getSubPropertyCache()>();

        $r39 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r35, $r36, $r38);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r39;

        $r40 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r41 = virtualinvoke $r40.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache getSubClassCache()>();

        $r42 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $r43 = virtualinvoke $r42.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache getSubPropertyCache()>();

        r67 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r61, $r41, $r43);

     label15:
        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void deleteAllRules()>();

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        if $r9 == null goto label18;

        $r22 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        $i0 = interfaceinvoke $r22.<java.util.List: int size()>();

        if $i0 <= 0 goto label18;

        $r23 = staticinvoke <com.hp.hpl.jena.graph.Factory: com.hp.hpl.jena.graph.Graph createGraphMem()>();

        $r24 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        $r25 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z2 = interfaceinvoke $r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        $r30 = interfaceinvoke $r25.<java.util.Iterator: java.lang.Object next()>();

        r76 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r30;

        $r31 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        interfaceinvoke r76.<com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook: void run(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph,com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.graph.Graph)>(r0, $r31, $r23);

        goto label16;

     label17:
        $i1 = interfaceinvoke $r23.<com.hp.hpl.jena.graph.Graph: int size()>();

        if $i1 <= 0 goto label18;

        $r26 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r26.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>($r23);

        $r27 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        r67 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r27, $r26);

        $r28 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r29 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r28, $r26);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r29;

     label18:
        z9 = 0;

        $r77 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        if $r77 == null goto label20;

        $r15 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        $r16 = (com.hp.hpl.jena.reasoner.InfGraph) $r15;

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.reasoner.InfGraph: com.hp.hpl.jena.graph.Graph getRawGraph()>();

        if $r17 == null goto label19;

        $r20 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind>;

        $r19 = new com.hp.hpl.jena.reasoner.FGraph;

        specialinvoke $r19.<com.hp.hpl.jena.reasoner.FGraph: void <init>(com.hp.hpl.jena.graph.Graph)>($r17);

        $r21 = staticinvoke <com.hp.hpl.jena.reasoner.FinderUtil: com.hp.hpl.jena.reasoner.Finder cascade(com.hp.hpl.jena.reasoner.Finder,com.hp.hpl.jena.reasoner.Finder)>($r20, $r19);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Finder dataFind> = $r21;

     label19:
        $r18 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph schemaGraph>;

        z9 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean preloadDeductions(com.hp.hpl.jena.graph.Graph)>($r18);

     label20:
        if z9 == 0 goto label21;

        $r14 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void fastInit(com.hp.hpl.jena.reasoner.Finder)>(r67);

        goto label22;

     label21:
        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        $r11 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List extractPureBackwardRules(java.util.List)>($r10);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void addBRules(java.util.List)>($r11);

        $r12 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r12.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void init(boolean,com.hp.hpl.jena.reasoner.Finder)>(1, r67);

     label22:
        $r13 = new com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext;

        specialinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.BackwardRuleInfGraphI)>(r0);

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.BBRuleContext context> = $r13;

        return;
    }

    public void rebind()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        if $r1 == null goto label1;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public void rebindAll()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.List $r3, $r4;
        com.hp.hpl.jena.reasoner.Reasoner $r1;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.Reasoner reasoner>;

        $r2 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner) $r1;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleReasoner: java.util.List getRules()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules> = $r3;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rawRules>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void instantiateRuleEngine(java.util.List)>($r4);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void rebind()>();

        return;
    }

    public void setTraceOn(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void setTraceOn(boolean)>(z0);

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void setTraceOn(boolean)>(z0);

        return;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;
        com.hp.hpl.jena.util.OneToManyMap $r3;
        boolean z0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean recordDerivations> = z0;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void setDerivationLogging(boolean)>(z0);

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void setDerivationLogging(boolean)>(z0);

        if z0 == 0 goto label1;

        $r3 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r3.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations> = $r3;

        goto label2;

     label1:
        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.OneToManyMap derivations> = null;

     label2:
        return;
    }

    public long getNRulesFired()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        long $l0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $l0 = interfaceinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: long getNRulesFired()>();

        return $l0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r4;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r5, $r8, $r9, r10;
        com.hp.hpl.jena.reasoner.Finder r6;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph$1 $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r6 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void requirePrepared()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        $r4 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r4.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r4);

        r10 = $r5;

        if r6 == null goto label1;

        $r9 = interfaceinvoke r6.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        r10 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r9);

     label1:
        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean filterFunctors>;

        if $z0 == 0 goto label2;

        $r7 = new com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph$1;

        specialinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph$1: void <init>(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph)>(r0);

        $r8 = interfaceinvoke r10.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterDrop(com.hp.hpl.jena.util.iterator.Filter)>($r7);

        return $r8;

     label2:
        return r10;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findFull(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r5;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.util.iterator.UniqueFilter $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void checkOpen()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void requirePrepared()>();

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        $r4 = new com.hp.hpl.jena.util.iterator.UniqueFilter;

        specialinvoke $r4.<com.hp.hpl.jena.util.iterator.UniqueFilter: void <init>()>();

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator filterKeep(com.hp.hpl.jena.util.iterator.Filter)>($r4);

        return $r5;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        com.hp.hpl.jena.graph.Node r2, r3, r4;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>($r1, null);

        return $r5;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.reasoner.TriplePattern r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.reasoner.Finder)>(r1, null);

        return $r2;
    }

    public synchronized void reset()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        int $i0, $i1;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(0);

        return;
    }

    public synchronized void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r5;
        int $i0, $i1, $i2, $i3;
        com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook $r10, $r14;
        com.hp.hpl.jena.graph.Graph $r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r15;
        java.util.Iterator $r12;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.reasoner.FGraph $r1;
        java.util.List $r4, $r6, $r7, $r8, $r11;
        java.lang.Object $r9, $r13;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r16;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>(r3);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching>;

        if $z0 == 0 goto label1;

        $r15 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $z3 = virtualinvoke $r15.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean add(com.hp.hpl.jena.graph.Triple)>(r3);

        if $z3 == 0 goto label1;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(0);

     label1:
        $z4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean isPrepared()>();

        if $z4 == 0 goto label7;

        z5 = 0;

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        if $r4 == null goto label5;

        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 <= 0 goto label5;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i3 <= 1 goto label4;

        $r11 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r13;

        $z2 = interfaceinvoke $r14.<com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook: boolean needsRerun(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph,com.hp.hpl.jena.graph.Triple)>(r0, r3);

        if $z2 == 0 goto label2;

        z5 = 1;

        goto label3;

     label3:
        goto label5;

     label4:
        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List preprocessorHooks>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook) $r9;

        z5 = interfaceinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.RulePreprocessHook: boolean needsRerun(com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph,com.hp.hpl.jena.graph.Triple)>(r0, r3);

     label5:
        if z5 == 0 goto label6;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(0);

        goto label7;

     label6:
        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r5.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void add(com.hp.hpl.jena.graph.Triple)>(r3);

     label7:
        $r16 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r16.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        return;
    }

    public void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Graph $r2, $r5;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine $r8;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.reasoner.FGraph $r1, $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r6, $r7, $r9;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version>;

        $i1 = $i0 + 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: int version> = $i1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: boolean contains(com.hp.hpl.jena.graph.Triple)>(r3);

        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdata>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>(r3);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useTGCCaching>;

        if $z0 == 0 goto label2;

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine>;

        $z1 = virtualinvoke $r8.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine: boolean delete(com.hp.hpl.jena.graph.Triple)>(r3);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean isPrepared()>();

        if $z2 == 0 goto label1;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void deleteAllRules()>();

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(0);

     label2:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean isPrepared()>();

        if $z3 == 0 goto label3;

        $r7 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r7.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void deleteAllRules()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void setPreparedState(boolean)>(0);

     label3:
        $r6 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r6.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void reset()>();

        return;
    }

    public void close()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void halt()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine> = null;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveEngine transitiveEngine> = null;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.BasicForwardRuleInfGraph: void close()>();

     label1:
        return;
    }

    public com.hp.hpl.jena.reasoner.ValidityReport validate()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.graph.Node $r3, $r5, $r7, $r11, $r16, $r22, $r25, $r33, $r38, $r44;
        com.hp.hpl.jena.rdf.model.Property $r4, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Node[] $r6, $r21, $r24, $r43;
        com.hp.hpl.jena.rdf.model.RDFNode $r39;
        com.hp.hpl.jena.reasoner.StandardValidityReport $r1;
        com.hp.hpl.jena.graph.Triple $r2, r15;
        com.hp.hpl.jena.reasoner.TriplePattern $r9;
        java.lang.StringBuilder $r27, $r28, $r29, $r31, $r32, $r35, $r36, $r41, $r42, $r46, $r47;
        com.hp.hpl.jena.reasoner.rulesys.Functor r18;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r8;
        java.lang.StringBuffer $r19;
        int $i0, i1;
        java.lang.String $r20, $r23, $r26, $r30, $r34, $r37, $r40, $r45, $r48;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r13;
        com.hp.hpl.jena.rdf.model.Model $r12;
        java.lang.Object $r14, $r17;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void checkOpen()>();

        $r1 = new com.hp.hpl.jena.reasoner.StandardValidityReport;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.StandardValidityReport: void <init>()>();

        $r2 = new com.hp.hpl.jena.graph.Triple;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createAnon()>();

        $r4 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property RB_VALIDATION>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r6 = newarray (com.hp.hpl.jena.graph.Node)[0];

        $r7 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node makeFunctorNode(java.lang.String,com.hp.hpl.jena.graph.Node[])>("on", $r6);

        specialinvoke $r2.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r5, $r7);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void requirePrepared()>();

        $r8 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        interfaceinvoke $r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void add(com.hp.hpl.jena.graph.Triple)>($r2);

        $r9 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r10 = <com.hp.hpl.jena.vocabulary.ReasonerVocabulary: com.hp.hpl.jena.rdf.model.Property RB_VALIDATION_REPORT>;

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        specialinvoke $r9.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, $r11, null);

        $r12 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator findFull(com.hp.hpl.jena.reasoner.TriplePattern)>($r9);

     label1:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.hp.hpl.jena.graph.Triple) $r14;

        $r16 = virtualinvoke r15.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = virtualinvoke $r16.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z2 == 0 goto label4;

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        $z3 = $r17 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z3 == 0 goto label4;

        r18 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r17;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r21 = virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r22 = $r21[0];

        $r23 = virtualinvoke $r22.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r24 = virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r25 = $r24[1];

        $r26 = virtualinvoke $r25.<com.hp.hpl.jena.graph.Node: java.lang.String toString()>();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Culprit = ");

        $r33 = virtualinvoke r15.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r34 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r33);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        i1 = 2;

     label2:
        $i0 = virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        if i1 >= $i0 goto label3;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Implicated node: ");

        $r43 = virtualinvoke r18.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r44 = $r43[i1];

        $r45 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Node)>($r44);

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r38 = virtualinvoke r15.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r39 = interfaceinvoke $r12.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.RDFNode asRDFNode(com.hp.hpl.jena.graph.Node)>($r38);

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("error");

        $r40 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.StandardValidityReport: void add(boolean,java.lang.String,java.lang.String,java.lang.Object)>($z4, $r23, $r40, $r39);

     label4:
        goto label1;

     label5:
        $z1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean requestDatatypeRangeValidation>;

        if $z1 == 0 goto label6;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void performDatatypeRangeValidation(com.hp.hpl.jena.reasoner.StandardValidityReport)>($r1);

     label6:
        return $r1;
    }

    public void setDatatypeRangeValidation(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean requestDatatypeRangeValidation> = z0;

        return;
    }

    protected void performDatatypeRangeValidation(com.hp.hpl.jena.reasoner.StandardValidityReport)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.Iterator $r3;
        com.hp.hpl.jena.reasoner.ValidityReport$Report $r10;
        java.util.Set $r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.graph.Node r5;
        com.hp.hpl.jena.reasoner.StandardValidityReport r9;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r9 := @parameter0: com.hp.hpl.jena.reasoner.StandardValidityReport;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap getDTRange()>();

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Node) $r4;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, r5, null);

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.ValidityReport$Report checkLiteral(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>(r5, r8);

        virtualinvoke r9.<com.hp.hpl.jena.reasoner.StandardValidityReport: void add(com.hp.hpl.jena.reasoner.ValidityReport$Report)>($r10);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public com.hp.hpl.jena.reasoner.ValidityReport$Report checkLiteral(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r2;
        java.util.HashMap $r3;
        com.hp.hpl.jena.graph.Node $r1, r4;
        java.lang.String $r19, $r26;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r8;
        com.hp.hpl.jena.reasoner.ValidityReport$Report $r11, $r20;
        com.hp.hpl.jena.graph.Triple r0;
        java.util.List r6;
        com.hp.hpl.jena.datatypes.RDFDatatype r10;
        com.hp.hpl.jena.graph.impl.LiteralLabel $r7;
        java.lang.Object $r5, $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap getDTRange()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r6 = (java.util.List) $r5;

        if r6 == null goto label5;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 != 0 goto label2;

        $r20 = new com.hp.hpl.jena.reasoner.ValidityReport$Report;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has a typed range but was given a non literal value ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<com.hp.hpl.jena.reasoner.ValidityReport$Report: void <init>(boolean,java.lang.String,java.lang.String)>(1, "dtRange", $r26);

        return $r20;

     label2:
        $r7 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.impl.LiteralLabel getLiteral()>();

        $r8 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.datatypes.RDFDatatype) $r9;

        $z3 = interfaceinvoke r10.<com.hp.hpl.jena.datatypes.RDFDatatype: boolean isValidLiteral(com.hp.hpl.jena.graph.impl.LiteralLabel)>($r7);

        if $z3 != 0 goto label4;

        $r11 = new com.hp.hpl.jena.reasoner.ValidityReport$Report;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has a typed range ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("that is not compatible with ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.hp.hpl.jena.reasoner.ValidityReport$Report: void <init>(boolean,java.lang.String,java.lang.String,java.lang.Object)>(1, "dtRange", $r19, r0);

        return $r11;

     label4:
        goto label3;

     label5:
        return null;
    }

    protected java.util.HashMap getDTRange()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.datatypes.TypeMapper $r11;
        java.util.HashMap $r1, $r2, $r3, $r14, $r17;
        com.hp.hpl.jena.graph.Node $r5, $r9, $r10;
        java.util.ArrayList $r16;
        com.hp.hpl.jena.rdf.model.Property $r4;
        java.lang.String $r12;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Triple r8;
        java.util.List r18;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.datatypes.RDFDatatype $r13;
        java.lang.Object $r7, $r15;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange>;

        if $r1 != null goto label4;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange> = $r3;

        $r4 = <com.hp.hpl.jena.vocabulary.RDFS: com.hp.hpl.jena.rdf.model.Property range>;

        $r5 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, $r5, null);

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z1 == 0 goto label3;

        $r11 = staticinvoke <com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.TypeMapper getInstance()>();

        $r12 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r13 = virtualinvoke $r11.<com.hp.hpl.jena.datatypes.TypeMapper: com.hp.hpl.jena.datatypes.RDFDatatype getTypeByName(java.lang.String)>($r12);

        if $r13 == null goto label3;

        $r14 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange>;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r9);

        r18 = (java.util.List) $r15;

        if r18 != null goto label2;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r18 = $r16;

        $r17 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r16);

     label2:
        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r13);

     label3:
        goto label1;

     label4:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.HashMap dtRange>;

        return $r2;
    }

    private static java.util.List extractPureBackwardRules(java.util.List)
    {
        java.util.Iterator $r2;
        java.util.ArrayList $r0;
        java.util.List r1;
        com.hp.hpl.jena.reasoner.rulesys.Rule r4;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r3;

        $z1 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if $i0 <= 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    protected boolean preloadDeductions(com.hp.hpl.jena.graph.Graph)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0, r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI $r10;
        com.hp.hpl.jena.graph.Triple $r13;
        com.hp.hpl.jena.reasoner.FGraph $r1;
        java.util.List $r5, $r6, $r9;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r8;
        java.lang.Object $r11, $r12;
        com.hp.hpl.jena.graph.Graph $r2, r3, $r7;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Graph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.FGraph fdeductions>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.FGraph: com.hp.hpl.jena.graph.Graph getGraph()>();

        r4 = (com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph) r3;

        $r6 = r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        $r5 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List rules>;

        if $r6 != $r5 goto label3;

        $r7 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.graph.Graph getDeductionsGraph()>();

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

     label1:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.hp.hpl.jena.graph.Triple) $r12;

        interfaceinvoke $r2.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r13);

        goto label1;

     label2:
        $r9 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.List getBRules()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: void addBRules(java.util.List)>($r9);

        $r10 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI engine>;

        $r11 = specialinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.lang.Object getForwardRuleStore()>();

        interfaceinvoke $r10.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI: void setRuleStore(java.lang.Object)>($r11);

        return 1;

     label3:
        return 0;
    }

    public void hideNode(com.hp.hpl.jena.graph.Node)
    {
        java.lang.Throwable $r6;
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        java.util.Set $r1, $r2, $r4;
        com.hp.hpl.jena.graph.Node r3;
        java.util.HashSet $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableFilteringOfHiddenInfNodes>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        if $r1 != null goto label2;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes> = $r5;

     label2:
        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        entermonitor $r2;

     label3:
        $r4 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r3);

        exitmonitor $r2;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void resetLPProfile(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void resetProfile(boolean)>(z0);

        return;
    }

    public void printLPProfile()
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine bEngine>;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.LPBRuleEngine: void printProfile()>();

        return;
    }

    public boolean accept(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph r3;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r5, $r6, $r8, $r10;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.Object r0;

        r3 := @this: com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph;

        r0 := @parameter0: java.lang.Object;

        r1 = (com.hp.hpl.jena.graph.Triple) r0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z0 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = <com.hp.hpl.jena.shared.impl.JenaParameters: boolean enableFilteringOfHiddenInfNodes>;

        if $z1 == 0 goto label3;

        $r5 = r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        if $r5 == null goto label3;

        $r6 = r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z3 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z3 != 0 goto label2;

        $r8 = r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        $r9 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z4 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z4 != 0 goto label2;

        $r10 = r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: java.util.Set hiddenNodes>;

        $r11 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z5 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>($r11);

        if $z5 == 0 goto label3;

     label2:
        return 1;

     label3:
        $z6 = r3.<com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean filterFunctors>;

        if $z6 == 0 goto label4;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r4);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: boolean useRETE> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/FBRuleInfGraph;");

        <com.hp.hpl.jena.reasoner.rulesys.FBRuleInfGraph: org.slf4j.Logger logger> = $r0;

        return;
    }
}
