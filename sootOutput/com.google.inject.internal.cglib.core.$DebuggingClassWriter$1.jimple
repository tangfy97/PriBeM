class com.google.inject.internal.cglib.core.$DebuggingClassWriter$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    private final com.google.inject.internal.cglib.core.$DebuggingClassWriter this$0;

    void <init>(com.google.inject.internal.cglib.core.$DebuggingClassWriter)
    {
        com.google.inject.internal.cglib.core.$DebuggingClassWriter$1 r0;
        com.google.inject.internal.cglib.core.$DebuggingClassWriter r1;

        r0 := @this: com.google.inject.internal.cglib.core.$DebuggingClassWriter$1;

        r1 := @parameter0: com.google.inject.internal.cglib.core.$DebuggingClassWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.google.inject.internal.cglib.core.$DebuggingClassWriter$1: com.google.inject.internal.cglib.core.$DebuggingClassWriter this$0> = r1;

        return;
    }

    public java.lang.Object run()
    {
        byte[] $r2;
        com.google.inject.internal.cglib.core.$DebuggingClassWriter$1 r0;
        boolean $z0;
        java.io.PrintWriter $r55;
        com.google.inject.internal.asm.util.$TraceClassVisitor $r56;
        com.google.inject.internal.cglib.core.$CodeGenerationException $r57;
        com.google.inject.internal.asm.$ClassVisitor $r58;
        java.lang.Throwable $r39, $r40;
        com.google.inject.internal.cglib.core.$DebuggingClassWriter $r1, $r4;
        java.io.BufferedOutputStream $r47, $r52;
        java.lang.StringBuffer $r10, $r11, $r12, $r19, $r20, $r28, $r29, $r41, $r44, $r49;
        java.io.OutputStreamWriter $r54;
        java.lang.String $r3, $r5, $r6, $r9, $r13, $r17, $r21, $r26, $r30;
        java.io.FileOutputStream $r46, $r51;
        char $c0, $c1;
        java.io.IOException $r37;
        java.io.File $r14, $r42, $r43, $r45, $r48, $r50;
        com.google.inject.internal.asm.$ClassReader $r53;

        r0 := @this: com.google.inject.internal.cglib.core.$DebuggingClassWriter$1;

        $r1 = r0.<com.google.inject.internal.cglib.core.$DebuggingClassWriter$1: com.google.inject.internal.cglib.core.$DebuggingClassWriter this$0>;

        $r2 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: byte[] access$001(com.google.inject.internal.cglib.core.$DebuggingClassWriter)>($r1);

        $r3 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: java.lang.String access$100()>();

        if $r3 == null goto label13;

        $r4 = r0.<com.google.inject.internal.cglib.core.$DebuggingClassWriter$1: com.google.inject.internal.cglib.core.$DebuggingClassWriter this$0>;

        $r5 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: java.lang.String access$200(com.google.inject.internal.cglib.core.$DebuggingClassWriter)>($r4);

        $c0 = <java.io.File: char separatorChar>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(46, $c0);

     label01:
        $r42 = new java.io.File;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r9 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: java.lang.String access$100()>();

        $r10 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $c1 = <java.io.File: char separatorChar>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r42.<java.io.File: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r42.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r14.<java.io.File: boolean mkdirs()>();

        $r45 = new java.io.File;

        $r43 = new java.io.File;

        $r17 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: java.lang.String access$100()>();

        specialinvoke $r43.<java.io.File: void <init>(java.lang.String)>($r17);

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r45.<java.io.File: void <init>(java.io.File,java.lang.String)>($r43, $r21);

        $r47 = new java.io.BufferedOutputStream;

        $r46 = new java.io.FileOutputStream;

        specialinvoke $r46.<java.io.FileOutputStream: void <init>(java.io.File)>($r45);

        specialinvoke $r47.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r46);

     label02:
        virtualinvoke $r47.<java.io.OutputStream: void write(byte[])>($r2);

     label03:
        virtualinvoke $r47.<java.io.OutputStream: void close()>();

        goto label06;

     label04:
        $r40 := @caughtexception;

     label05:
        virtualinvoke $r47.<java.io.OutputStream: void close()>();

        throw $r40;

     label06:
        $z0 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: boolean access$300()>();

        if $z0 == 0 goto label11;

        $r50 = new java.io.File;

        $r48 = new java.io.File;

        $r26 = staticinvoke <com.google.inject.internal.cglib.core.$DebuggingClassWriter: java.lang.String access$100()>();

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>($r26);

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".asm");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r50.<java.io.File: void <init>(java.io.File,java.lang.String)>($r48, $r30);

        $r52 = new java.io.BufferedOutputStream;

        $r51 = new java.io.FileOutputStream;

        specialinvoke $r51.<java.io.FileOutputStream: void <init>(java.io.File)>($r50);

        specialinvoke $r52.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r51);

     label07:
        $r53 = new com.google.inject.internal.asm.$ClassReader;

        specialinvoke $r53.<com.google.inject.internal.asm.$ClassReader: void <init>(byte[])>($r2);

        $r55 = new java.io.PrintWriter;

        $r54 = new java.io.OutputStreamWriter;

        specialinvoke $r54.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r52);

        specialinvoke $r55.<java.io.PrintWriter: void <init>(java.io.Writer)>($r54);

        $r56 = new com.google.inject.internal.asm.util.$TraceClassVisitor;

        specialinvoke $r56.<com.google.inject.internal.asm.util.$TraceClassVisitor: void <init>(com.google.inject.internal.asm.$ClassVisitor,java.io.PrintWriter)>(null, $r55);

        $r58 = (com.google.inject.internal.asm.$ClassVisitor) $r56;

        virtualinvoke $r53.<com.google.inject.internal.asm.$ClassReader: void accept(com.google.inject.internal.asm.$ClassVisitor,int)>($r58, 0);

        virtualinvoke $r55.<java.io.PrintWriter: void flush()>();

     label08:
        virtualinvoke $r52.<java.io.OutputStream: void close()>();

        goto label11;

     label09:
        $r39 := @caughtexception;

     label10:
        virtualinvoke $r52.<java.io.OutputStream: void close()>();

        throw $r39;

     label11:
        goto label13;

     label12:
        $r37 := @caughtexception;

        $r57 = new com.google.inject.internal.cglib.core.$CodeGenerationException;

        specialinvoke $r57.<com.google.inject.internal.cglib.core.$CodeGenerationException: void <init>(java.lang.Throwable)>($r37);

        throw $r57;

     label13:
        return $r2;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.io.IOException from label01 to label11 with label12;
    }
}
