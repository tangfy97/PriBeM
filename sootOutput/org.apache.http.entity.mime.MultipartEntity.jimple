public class org.apache.http.entity.mime.MultipartEntity extends java.lang.Object implements org.apache.http.HttpEntity
{
    private static final char[] MULTIPART_CHARS;
    private final org.apache.http.entity.mime.HttpMultipart multipart;
    private final org.apache.http.Header contentType;
    private long length;
    private volatile boolean dirty;

    public void <init>(org.apache.http.entity.mime.HttpMultipartMode, java.lang.String, java.nio.charset.Charset)
    {
        org.apache.http.entity.mime.HttpMultipart $r1;
        java.nio.charset.Charset r2;
        org.apache.http.message.BasicHeader $r3;
        org.apache.http.entity.mime.HttpMultipartMode r5;
        org.apache.http.entity.mime.MultipartEntity r0;
        java.lang.String $r4, r6;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        r5 := @parameter0: org.apache.http.entity.mime.HttpMultipartMode;

        r6 := @parameter1: java.lang.String;

        r2 := @parameter2: java.nio.charset.Charset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r6 != null goto label1;

        r6 = virtualinvoke r0.<org.apache.http.entity.mime.MultipartEntity: java.lang.String generateBoundary()>();

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.entity.mime.HttpMultipartMode: org.apache.http.entity.mime.HttpMultipartMode STRICT>;

     label2:
        $r1 = new org.apache.http.entity.mime.HttpMultipart;

        specialinvoke $r1.<org.apache.http.entity.mime.HttpMultipart: void <init>(java.lang.String,java.nio.charset.Charset,java.lang.String,org.apache.http.entity.mime.HttpMultipartMode)>("form-data", r2, r6, r5);

        r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.entity.mime.HttpMultipart multipart> = $r1;

        $r3 = new org.apache.http.message.BasicHeader;

        $r4 = virtualinvoke r0.<org.apache.http.entity.mime.MultipartEntity: java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset)>(r6, r2);

        specialinvoke $r3.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>("Content-Type", $r4);

        r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.Header contentType> = $r3;

        r0.<org.apache.http.entity.mime.MultipartEntity: boolean dirty> = 1;

        return;
    }

    public void <init>(org.apache.http.entity.mime.HttpMultipartMode)
    {
        org.apache.http.entity.mime.HttpMultipartMode r1;
        org.apache.http.entity.mime.MultipartEntity r0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        r1 := @parameter0: org.apache.http.entity.mime.HttpMultipartMode;

        specialinvoke r0.<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)>(r1, null, null);

        return;
    }

    public void <init>()
    {
        org.apache.http.entity.mime.HttpMultipartMode $r1;
        org.apache.http.entity.mime.MultipartEntity r0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $r1 = <org.apache.http.entity.mime.HttpMultipartMode: org.apache.http.entity.mime.HttpMultipartMode STRICT>;

        specialinvoke r0.<org.apache.http.entity.mime.MultipartEntity: void <init>(org.apache.http.entity.mime.HttpMultipartMode,java.lang.String,java.nio.charset.Charset)>($r1, null, null);

        return;
    }

    protected java.lang.String generateContentType(java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset r2;
        java.lang.StringBuilder $r0;
        org.apache.http.entity.mime.MultipartEntity r5;
        java.lang.String r1, $r3, $r4;

        r5 := @this: org.apache.http.entity.mime.MultipartEntity;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.charset.Charset;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multipart/form-data; boundary=");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        if r2 == null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; charset=");

        $r4 = virtualinvoke r2.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

     label1:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected java.lang.String generateBoundary()
    {
        java.util.Random $r1;
        char $c4;
        int $i0, i1, $i2, $i3, i5;
        char[] $r3, $r4;
        java.lang.StringBuilder $r0;
        org.apache.http.entity.mime.MultipartEntity r5;
        java.lang.String $r2;

        r5 := @this: org.apache.http.entity.mime.MultipartEntity;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(11);

        i1 = $i0 + 30;

        i5 = 0;

     label1:
        if i5 >= i1 goto label2;

        $r4 = <org.apache.http.entity.mime.MultipartEntity: char[] MULTIPART_CHARS>;

        $r3 = <org.apache.http.entity.mime.MultipartEntity: char[] MULTIPART_CHARS>;

        $i2 = lengthof $r3;

        $i3 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>($i2);

        $c4 = $r4[$i3];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void addPart(org.apache.http.entity.mime.FormBodyPart)
    {
        org.apache.http.entity.mime.HttpMultipart $r2;
        org.apache.http.entity.mime.MultipartEntity r0;
        org.apache.http.entity.mime.FormBodyPart r1;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        r1 := @parameter0: org.apache.http.entity.mime.FormBodyPart;

        $r2 = r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.entity.mime.HttpMultipart multipart>;

        virtualinvoke $r2.<org.apache.http.entity.mime.HttpMultipart: void addBodyPart(org.apache.http.entity.mime.FormBodyPart)>(r1);

        r0.<org.apache.http.entity.mime.MultipartEntity: boolean dirty> = 1;

        return;
    }

    public void addPart(java.lang.String, org.apache.http.entity.mime.content.ContentBody)
    {
        org.apache.http.entity.mime.FormBodyPart $r1;
        org.apache.http.entity.mime.MultipartEntity r0;
        java.lang.String r2;
        org.apache.http.entity.mime.content.ContentBody r3;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.http.entity.mime.content.ContentBody;

        $r1 = new org.apache.http.entity.mime.FormBodyPart;

        specialinvoke $r1.<org.apache.http.entity.mime.FormBodyPart: void <init>(java.lang.String,org.apache.http.entity.mime.content.ContentBody)>(r2, r3);

        virtualinvoke r0.<org.apache.http.entity.mime.MultipartEntity: void addPart(org.apache.http.entity.mime.FormBodyPart)>($r1);

        return;
    }

    public boolean isRepeatable()
    {
        java.util.Iterator $r3;
        long $l0;
        org.apache.http.entity.mime.HttpMultipart $r1;
        java.util.List $r2;
        byte $b1;
        org.apache.http.entity.mime.FormBodyPart r5;
        int $i2;
        org.apache.http.entity.mime.MultipartEntity r0;
        java.lang.Object $r4;
        org.apache.http.entity.mime.content.ContentBody $r6;
        boolean $z0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $r1 = r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.entity.mime.HttpMultipart multipart>;

        $r2 = virtualinvoke $r1.<org.apache.http.entity.mime.HttpMultipart: java.util.List getBodyParts()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.http.entity.mime.FormBodyPart) $r4;

        $r6 = virtualinvoke r5.<org.apache.http.entity.mime.FormBodyPart: org.apache.http.entity.mime.content.ContentBody getBody()>();

        $l0 = interfaceinvoke $r6.<org.apache.http.entity.mime.content.ContentBody: long getContentLength()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public boolean isChunked()
    {
        org.apache.http.entity.mime.MultipartEntity r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $z0 = virtualinvoke r0.<org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.mime.MultipartEntity r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $z0 = virtualinvoke r0.<org.apache.http.entity.mime.MultipartEntity: boolean isRepeatable()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public long getContentLength()
    {
        org.apache.http.entity.mime.HttpMultipart $r1;
        org.apache.http.entity.mime.MultipartEntity r0;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $z0 = r0.<org.apache.http.entity.mime.MultipartEntity: boolean dirty>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.entity.mime.HttpMultipart multipart>;

        $l1 = virtualinvoke $r1.<org.apache.http.entity.mime.HttpMultipart: long getTotalLength()>();

        r0.<org.apache.http.entity.mime.MultipartEntity: long length> = $l1;

        r0.<org.apache.http.entity.mime.MultipartEntity: boolean dirty> = 0;

     label1:
        $l0 = r0.<org.apache.http.entity.mime.MultipartEntity: long length>;

        return $l0;
    }

    public org.apache.http.Header getContentType()
    {
        org.apache.http.entity.mime.MultipartEntity r0;
        org.apache.http.Header $r1;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $r1 = r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.Header contentType>;

        return $r1;
    }

    public org.apache.http.Header getContentEncoding()
    {
        org.apache.http.entity.mime.MultipartEntity r0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        return null;
    }

    public void consumeContent() throws java.io.IOException, java.lang.UnsupportedOperationException
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.http.entity.mime.MultipartEntity r0;
        boolean $z0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        $z0 = virtualinvoke r0.<org.apache.http.entity.mime.MultipartEntity: boolean isStreaming()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Streaming entity does not implement #consumeContent()");

        throw $r1;

     label1:
        return;
    }

    public java.io.InputStream getContent() throws java.io.IOException, java.lang.UnsupportedOperationException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.http.entity.mime.MultipartEntity r1;

        r1 := @this: org.apache.http.entity.mime.MultipartEntity;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Multipart form entity does not implement #getContent()");

        throw $r0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.http.entity.mime.HttpMultipart $r2;
        org.apache.http.entity.mime.MultipartEntity r0;

        r0 := @this: org.apache.http.entity.mime.MultipartEntity;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<org.apache.http.entity.mime.MultipartEntity: org.apache.http.entity.mime.HttpMultipart multipart>;

        virtualinvoke $r2.<org.apache.http.entity.mime.HttpMultipart: void writeTo(java.io.OutputStream)>(r1);

        return;
    }

    static void <clinit>()
    {
        char[] $r1;
        java.lang.String $r0;

        $r0 = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.apache.http.entity.mime.MultipartEntity: char[] MULTIPART_CHARS> = $r1;

        return;
    }
}
