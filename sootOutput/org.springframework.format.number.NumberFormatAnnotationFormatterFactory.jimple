public class org.springframework.format.number.NumberFormatAnnotationFormatterFactory extends java.lang.Object implements org.springframework.format.AnnotationFormatterFactory, org.springframework.context.EmbeddedValueResolverAware
{
    private final java.util.Set fieldTypes;
    private org.springframework.util.StringValueResolver embeddedValueResolver;

    public void <init>()
    {
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>(int)>(7);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Short;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Integer;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Long;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Float;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Double;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/math/BigDecimal;");

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/math/BigInteger;");

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: java.util.Set fieldTypes> = $r2;

        return;
    }

    public final java.util.Set getFieldTypes()
    {
        java.util.Set $r1;
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        $r1 = r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: java.util.Set fieldTypes>;

        return $r1;
    }

    public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r1;
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r1 := @parameter0: org.springframework.util.StringValueResolver;

        r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.util.StringValueResolver embeddedValueResolver> = r1;

        return;
    }

    protected java.lang.String resolveEmbeddedValue(java.lang.String)
    {
        org.springframework.util.StringValueResolver $r1, $r3;
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;
        java.lang.String r2, $r4;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.util.StringValueResolver embeddedValueResolver>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.util.StringValueResolver embeddedValueResolver>;

        $r4 = interfaceinvoke $r3.<org.springframework.util.StringValueResolver: java.lang.String resolveStringValue(java.lang.String)>(r2);

        goto label2;

     label1:
        $r4 = r2;

     label2:
        return $r4;
    }

    public org.springframework.format.Printer getPrinter(org.springframework.format.'annotation'.NumberFormat, java.lang.Class)
    {
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;
        org.springframework.format.Formatter $r2;
        java.lang.Class r3;
        org.springframework.format.'annotation'.NumberFormat r1;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r1 := @parameter0: org.springframework.format.'annotation'.NumberFormat;

        r3 := @parameter1: java.lang.Class;

        $r2 = specialinvoke r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Formatter configureFormatterFrom(org.springframework.format.'annotation'.NumberFormat)>(r1);

        return $r2;
    }

    public org.springframework.format.Parser getParser(org.springframework.format.'annotation'.NumberFormat, java.lang.Class)
    {
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;
        org.springframework.format.Formatter $r2;
        java.lang.Class r3;
        org.springframework.format.'annotation'.NumberFormat r1;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r1 := @parameter0: org.springframework.format.'annotation'.NumberFormat;

        r3 := @parameter1: java.lang.Class;

        $r2 = specialinvoke r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Formatter configureFormatterFrom(org.springframework.format.'annotation'.NumberFormat)>(r1);

        return $r2;
    }

    private org.springframework.format.Formatter configureFormatterFrom(org.springframework.format.'annotation'.NumberFormat)
    {
        org.springframework.format.number.NumberFormatter $r5, $r8;
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r9;
        org.springframework.format.number.CurrencyFormatter $r6;
        org.springframework.format.'annotation'.NumberFormat$Style $r2, $r3, $r4;
        org.springframework.format.'annotation'.NumberFormat r0;
        org.springframework.format.number.PercentFormatter $r7;
        java.lang.String $r1, $r10, $r11;
        boolean $z0;

        r9 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r0 := @parameter0: org.springframework.format.'annotation'.NumberFormat;

        $r1 = interfaceinvoke r0.<org.springframework.format.'annotation'.NumberFormat: java.lang.String pattern()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r8 = new org.springframework.format.number.NumberFormatter;

        $r10 = interfaceinvoke r0.<org.springframework.format.'annotation'.NumberFormat: java.lang.String pattern()>();

        $r11 = virtualinvoke r9.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: java.lang.String resolveEmbeddedValue(java.lang.String)>($r10);

        specialinvoke $r8.<org.springframework.format.number.NumberFormatter: void <init>(java.lang.String)>($r11);

        return $r8;

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.format.'annotation'.NumberFormat: org.springframework.format.'annotation'.NumberFormat$Style style()>();

        $r3 = <org.springframework.format.'annotation'.NumberFormat$Style: org.springframework.format.'annotation'.NumberFormat$Style PERCENT>;

        if $r2 != $r3 goto label2;

        $r7 = new org.springframework.format.number.PercentFormatter;

        specialinvoke $r7.<org.springframework.format.number.PercentFormatter: void <init>()>();

        return $r7;

     label2:
        $r4 = <org.springframework.format.'annotation'.NumberFormat$Style: org.springframework.format.'annotation'.NumberFormat$Style CURRENCY>;

        if $r2 != $r4 goto label3;

        $r6 = new org.springframework.format.number.CurrencyFormatter;

        specialinvoke $r6.<org.springframework.format.number.CurrencyFormatter: void <init>()>();

        return $r6;

     label3:
        $r5 = new org.springframework.format.number.NumberFormatter;

        specialinvoke $r5.<org.springframework.format.number.NumberFormatter: void <init>()>();

        return $r5;
    }

    public volatile org.springframework.format.Printer getPrinter(java.lang.'annotation'.Annotation, java.lang.Class)
    {
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class r2;
        org.springframework.format.Printer $r4, $r5;
        org.springframework.format.'annotation'.NumberFormat $r3;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.Class;

        $r3 = (org.springframework.format.'annotation'.NumberFormat) r1;

        $r4 = virtualinvoke r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Printer getPrinter(org.springframework.format.'annotation'.NumberFormat,java.lang.Class)>($r3, r2);

        $r5 = (org.springframework.format.Printer) $r4;

        return $r5;
    }

    public volatile org.springframework.format.Parser getParser(java.lang.'annotation'.Annotation, java.lang.Class)
    {
        org.springframework.format.number.NumberFormatAnnotationFormatterFactory r0;
        org.springframework.format.Parser $r4, $r5;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class r2;
        org.springframework.format.'annotation'.NumberFormat $r3;

        r0 := @this: org.springframework.format.number.NumberFormatAnnotationFormatterFactory;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.Class;

        $r3 = (org.springframework.format.'annotation'.NumberFormat) r1;

        $r4 = virtualinvoke r0.<org.springframework.format.number.NumberFormatAnnotationFormatterFactory: org.springframework.format.Parser getParser(org.springframework.format.'annotation'.NumberFormat,java.lang.Class)>($r3, r2);

        $r5 = (org.springframework.format.Parser) $r4;

        return $r5;
    }
}
