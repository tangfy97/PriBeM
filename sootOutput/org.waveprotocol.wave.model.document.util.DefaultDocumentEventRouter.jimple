public class org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter extends java.lang.Object implements org.waveprotocol.wave.model.document.util.DocumentEventRouter, org.waveprotocol.wave.model.document.indexed.DocumentHandler
{
    private final org.waveprotocol.wave.model.document.ObservableMutableDocument doc;
    private java.util.Map elementListenerMap;
    private java.util.Map attributeListenerMap;
    private java.util.Map deletionListenerMap;
    private int listenerCount;

    protected void <init>(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap> = null;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap> = null;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap> = null;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount> = 0;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc> = r1;

        return;
    }

    public static org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter doCreate(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        return $r1;
    }

    private static org.waveprotocol.wave.model.document.util.DocumentEventRouter doCreate(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter $r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r0 = new org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void <init>(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r1);

        return $r0;
    }

    public void onDocumentEvents(org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle)
    {
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified r54;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.util.AttributeListener r56;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent r53, r57, r62;
        java.util.Map $r1, $r2, $r6, $r16, $r21, $r22, $r36, $r47, $r51, $r52;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type $r10, $r11, $r29, $r30, $r44, $r45;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentInserted $r12;
        org.waveprotocol.wave.model.document.util.Point $r33;
        org.waveprotocol.wave.model.util.ElementListener r40, r64;
        org.waveprotocol.wave.model.util.DeletionListener r61;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r14, $r32, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.model.util.CopyOnWriteSet r55, r59, r60, r63;
        java.lang.Iterable $r4, $r7, $r26, $r41;
        int $i0;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle r3;
        java.util.Iterator $r5, $r8, $r18, $r24, $r27, $r38, $r42, $r49;
        org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted r58;
        java.lang.Object $r9, $r13, $r15, $r17, $r19, $r20, $r23, $r25, $r28, $r31, $r35, $r37, $r39, $r43, $r46, $r48, $r50;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r3 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        if $r1 == null goto label04;

        $r41 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle: java.lang.Iterable getEventComponents()>();

        $r42 = interfaceinvoke $r41.<java.lang.Iterable: java.util.Iterator iterator()>();

     label01:
        $z5 = interfaceinvoke $r42.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r43 = interfaceinvoke $r42.<java.util.Iterator: java.lang.Object next()>();

        r53 = (org.waveprotocol.wave.model.document.indexed.DocumentEvent) $r43;

        $r44 = virtualinvoke r53.<org.waveprotocol.wave.model.document.indexed.DocumentEvent: org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type getType()>();

        $r45 = <org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type: org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type ATTRIBUTES>;

        if $r44 != $r45 goto label03;

        r54 = (org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified) r53;

        $r46 = virtualinvoke r54.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified: java.lang.Object getElement()>();

        $r47 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        $r48 = interfaceinvoke $r47.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46);

        r55 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r48;

        if r55 == null goto label03;

        $r49 = virtualinvoke r55.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r49.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label03;

        $r50 = interfaceinvoke $r49.<java.util.Iterator: java.lang.Object next()>();

        r56 = (org.waveprotocol.wave.model.util.AttributeListener) $r50;

        $r51 = virtualinvoke r54.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified: java.util.Map getOldValues()>();

        $r52 = virtualinvoke r54.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$AttributesModified: java.util.Map getNewValues()>();

        interfaceinvoke r56.<org.waveprotocol.wave.model.util.AttributeListener: void onAttributesChanged(java.lang.Object,java.util.Map,java.util.Map)>($r46, $r51, $r52);

        goto label02;

     label03:
        goto label01;

     label04:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        if $r2 == null goto label08;

        $r26 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle: java.lang.Iterable getEventComponents()>();

        $r27 = interfaceinvoke $r26.<java.lang.Iterable: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r57 = (org.waveprotocol.wave.model.document.indexed.DocumentEvent) $r28;

        $r29 = virtualinvoke r57.<org.waveprotocol.wave.model.document.indexed.DocumentEvent: org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type getType()>();

        $r30 = <org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type: org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type CONTENT_DELETED>;

        if $r29 != $r30 goto label07;

        r58 = (org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted) r57;

        $r31 = virtualinvoke r58.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted: java.lang.Object getRoot()>();

        $r32 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        $i0 = virtualinvoke r58.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentDeleted: int getLocation()>();

        $r33 = interfaceinvoke $r32.<org.waveprotocol.wave.model.document.ObservableMutableDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $r34 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        $r35 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>($r34, $r33);

        $r36 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        r59 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r37;

        if r59 == null goto label07;

        $r38 = virtualinvoke r59.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke $r38.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label07;

        $r39 = interfaceinvoke $r38.<java.util.Iterator: java.lang.Object next()>();

        r40 = (org.waveprotocol.wave.model.util.ElementListener) $r39;

        interfaceinvoke r40.<org.waveprotocol.wave.model.util.ElementListener: void onElementRemoved(java.lang.Object)>($r31);

        goto label06;

     label07:
        goto label05;

     label08:
        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle: java.lang.Iterable getDeletedElements()>();

        $r5 = interfaceinvoke $r4.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z7 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label12;

        $r20 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r21 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        if $r21 == null goto label11;

        $r22 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        r60 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r23;

        if r60 == null goto label11;

        $r24 = virtualinvoke r60.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r61 = (org.waveprotocol.wave.model.util.DeletionListener) $r25;

        interfaceinvoke r61.<org.waveprotocol.wave.model.util.DeletionListener: void onDeleted()>();

        goto label10;

     label11:
        goto label09;

     label12:
        $r6 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        if $r6 == null goto label16;

        $r7 = interfaceinvoke r3.<org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle: java.lang.Iterable getEventComponents()>();

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r62 = (org.waveprotocol.wave.model.document.indexed.DocumentEvent) $r9;

        $r10 = virtualinvoke r62.<org.waveprotocol.wave.model.document.indexed.DocumentEvent: org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type getType()>();

        $r11 = <org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type: org.waveprotocol.wave.model.document.indexed.DocumentEvent$Type CONTENT_INSERTED>;

        if $r10 != $r11 goto label15;

        $r12 = (org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentInserted) r62;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.indexed.DocumentEvent$ContentInserted: java.lang.Object getSubtreeElement()>();

        $r14 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getParentElement(java.lang.Object)>($r13);

        $r16 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        r63 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r17;

        if r63 == null goto label15;

        $r18 = virtualinvoke r63.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label14:
        $z1 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r64 = (org.waveprotocol.wave.model.util.ElementListener) $r19;

        interfaceinvoke r64.<org.waveprotocol.wave.model.util.ElementListener: void onElementAdded(java.lang.Object)>($r13);

        goto label14;

     label15:
        goto label13;

     label16:
        specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void removeDeadListeners(org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle)>(r3);

        return;
    }

    private void removeDeadListeners(org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle)
    {
        java.util.Iterator $r2;
        java.lang.Iterable $r1;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r4;
        java.util.Map $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle r0;
        boolean $z0;

        r4 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r0 := @parameter0: org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.indexed.DocumentHandler$EventBundle: java.lang.Iterable getDeletedElements()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        if $r5 == null goto label2;

        $r10 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.util.CopyOnWriteSet removeListeners(java.util.Map,java.lang.Object)>($r10, $r3);

     label2:
        $r6 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        if $r6 == null goto label3;

        $r9 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.util.CopyOnWriteSet removeListeners(java.util.Map,java.lang.Object)>($r9, $r3);

     label3:
        $r7 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        if $r7 == null goto label4;

        $r8 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        specialinvoke r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.util.CopyOnWriteSet removeListeners(java.util.Map,java.lang.Object)>($r8, $r3);

     label4:
        goto label1;

     label5:
        return;
    }

    public org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object, org.waveprotocol.wave.model.util.ElementListener)
    {
        java.util.HashMap $r8;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        java.util.Map $r1, $r3, $r6;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration $r7;
        org.waveprotocol.wave.model.util.ElementListener r5;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.waveprotocol.wave.model.util.ElementListener;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        if $r1 != null goto label1;

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap> = $r8;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.util.CopyOnWriteSet ensureListenerList(java.lang.Object,java.util.Map)>(r2, $r3);

        virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r5);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void listenerAdded()>();

        $r6 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map elementListenerMap>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration create(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter,java.util.Map,java.lang.Object,java.lang.Object)>(r0, $r6, r2, r5);

        return $r7;
    }

    public org.waveprotocol.wave.model.document.util.ListenerRegistration addAttributeListener(java.lang.Object, org.waveprotocol.wave.model.util.AttributeListener)
    {
        java.util.HashMap $r8;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        org.waveprotocol.wave.model.util.AttributeListener r5;
        java.util.Map $r1, $r3, $r6;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration $r7;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.waveprotocol.wave.model.util.AttributeListener;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        if $r1 != null goto label1;

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap> = $r8;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.util.CopyOnWriteSet ensureListenerList(java.lang.Object,java.util.Map)>(r2, $r3);

        virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r5);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void listenerAdded()>();

        $r6 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map attributeListenerMap>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration create(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter,java.util.Map,java.lang.Object,java.lang.Object)>(r0, $r6, r2, r5);

        return $r7;
    }

    public org.waveprotocol.wave.model.document.util.ListenerRegistration addDeletionListener(java.lang.Object, org.waveprotocol.wave.model.util.DeletionListener)
    {
        org.waveprotocol.wave.model.util.DeletionListener r5;
        java.util.HashMap $r8;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r4;
        java.util.Map $r1, $r3, $r6;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration $r7;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r2 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.waveprotocol.wave.model.util.DeletionListener;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        if $r1 != null goto label1;

        $r8 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap> = $r8;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.util.CopyOnWriteSet ensureListenerList(java.lang.Object,java.util.Map)>(r2, $r3);

        virtualinvoke $r4.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r5);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void listenerAdded()>();

        $r6 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: java.util.Map deletionListenerMap>;

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter$Registration create(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter,java.util.Map,java.lang.Object,java.lang.Object)>(r0, $r6, r2, r5);

        return $r7;
    }

    public org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        return $r1;
    }

    private org.waveprotocol.wave.model.util.CopyOnWriteSet ensureListenerList(java.lang.Object, java.util.Map)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3, r5;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r4;
        java.util.Map r0;
        java.lang.Object r1, $r2;

        r4 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r2;

        if r5 != null goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet createListSet()>();

        r5 = $r3;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

     label1:
        return r5;
    }

    private org.waveprotocol.wave.model.util.CopyOnWriteSet removeListeners(java.util.Map, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet r3;
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r4;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r5;
        java.util.Map r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1, $r2;

        r4 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Object;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (org.waveprotocol.wave.model.util.CopyOnWriteSet) $r2;

        if r3 == null goto label1;

        $i0 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount>;

        $i1 = virtualinvoke r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: int size()>();

        $i2 = $i0 - $i1;

        r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount> = $i2;

        $i3 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount>;

        if $i3 != 0 goto label1;

        $r5 = r4.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void removeListener(java.lang.Object)>(r4);

     label1:
        return r3;
    }

    private void listenerRemoved()
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount> = $i1;

        $i2 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount>;

        if $i2 != 0 goto label1;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void removeListener(java.lang.Object)>(r0);

     label1:
        return;
    }

    private void listenerAdded()
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;
        int $i0, $i1, $i2;

        r0 := @this: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        $i0 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount> = $i1;

        $i2 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: int listenerCount>;

        if $i2 != 1 goto label1;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument doc>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void addListener(java.lang.Object)>(r0);

     label1:
        return;
    }

    static void access$000(org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter)
    {
        org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: void listenerRemoved()>();

        return;
    }
}
