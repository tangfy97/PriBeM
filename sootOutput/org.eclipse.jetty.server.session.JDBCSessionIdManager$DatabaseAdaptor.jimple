public class org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor extends java.lang.Object
{
    java.lang.String _dbName;
    boolean _isLower;
    boolean _isUpper;
    final org.eclipse.jetty.server.session.JDBCSessionIdManager this$0;

    public void <init>(org.eclipse.jetty.server.session.JDBCSessionIdManager, java.sql.DatabaseMetaData) throws java.sql.SQLException
    {
        java.lang.Object[] $r6;
        java.sql.DatabaseMetaData r2;
        org.eclipse.jetty.server.session.JDBCSessionIdManager r1;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        java.util.Locale $r4;
        java.lang.String $r3, $r5, $r7;
        org.eclipse.jetty.util.log.Logger $r8;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        r1 := @parameter0: org.eclipse.jetty.server.session.JDBCSessionIdManager;

        r2 := @parameter1: java.sql.DatabaseMetaData;

        r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = interfaceinvoke r2.<java.sql.DatabaseMetaData: java.lang.String getDatabaseProductName()>();

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName> = $r5;

        $r8 = <org.eclipse.jetty.server.session.JDBCSessionIdManager: org.eclipse.jetty.util.log.Logger LOG>;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        $r6[0] = $r7;

        interfaceinvoke $r8.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>("Using database {}", $r6);

        $z0 = interfaceinvoke r2.<java.sql.DatabaseMetaData: boolean storesLowerCaseIdentifiers()>();

        r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: boolean _isLower> = $z0;

        $z1 = interfaceinvoke r2.<java.sql.DatabaseMetaData: boolean storesUpperCaseIdentifiers()>();

        r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: boolean _isUpper> = $z1;

        return;
    }

    public java.lang.String convertIdentifier(java.lang.String)
    {
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        java.util.Locale $r2, $r4;
        java.lang.String r1, $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: boolean _isLower>;

        if $z0 == 0 goto label1;

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        return $r5;

     label1:
        $z1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: boolean _isUpper>;

        if $z1 == 0 goto label2;

        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        return $r3;

     label2:
        return r1;
    }

    public java.lang.String getDBName()
    {
        java.lang.String $r1;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        $r1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        return $r1;
    }

    public java.lang.String getBlobType()
    {
        org.eclipse.jetty.server.session.JDBCSessionIdManager $r1, $r4;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        java.lang.String $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        $r1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0>;

        $r2 = $r1.<org.eclipse.jetty.server.session.JDBCSessionIdManager: java.lang.String _blobType>;

        if $r2 == null goto label1;

        $r4 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0>;

        $r5 = $r4.<org.eclipse.jetty.server.session.JDBCSessionIdManager: java.lang.String _blobType>;

        return $r5;

     label1:
        $r3 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("postgres");

        if $z0 == 0 goto label2;

        return "bytea";

     label2:
        return "blob";
    }

    public java.lang.String getLongType()
    {
        org.eclipse.jetty.server.session.JDBCSessionIdManager $r1, $r4;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        java.lang.String $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        $r1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0>;

        $r2 = $r1.<org.eclipse.jetty.server.session.JDBCSessionIdManager: java.lang.String _longType>;

        if $r2 == null goto label1;

        $r4 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0>;

        $r5 = $r4.<org.eclipse.jetty.server.session.JDBCSessionIdManager: java.lang.String _longType>;

        return $r5;

     label1:
        $r3 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("oracle");

        if $z0 == 0 goto label2;

        return "number(20)";

     label2:
        return "bigint";
    }

    public java.io.InputStream getBlobInputStream(java.sql.ResultSet, java.lang.String) throws java.sql.SQLException
    {
        byte[] $r6;
        java.io.ByteArrayInputStream $r7;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        java.sql.ResultSet r2;
        java.lang.String $r1, r3;
        java.sql.Blob $r4;
        boolean $z0;
        java.io.InputStream $r5;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        r2 := @parameter0: java.sql.ResultSet;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("postgres");

        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke r2.<java.sql.ResultSet: byte[] getBytes(java.lang.String)>(r3);

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        return $r7;

     label1:
        $r4 = interfaceinvoke r2.<java.sql.ResultSet: java.sql.Blob getBlob(java.lang.String)>(r3);

        $r5 = interfaceinvoke $r4.<java.sql.Blob: java.io.InputStream getBinaryStream()>();

        return $r5;
    }

    public java.lang.String getRowIdColumnName()
    {
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        $r1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        if $r1 == null goto label1;

        $r2 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("oracle");

        if $z0 == 0 goto label1;

        return "srowId";

     label1:
        return "rowId";
    }

    public boolean isEmptyStringNull()
    {
        java.lang.String $r1;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        $r1 = r0.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: java.lang.String _dbName>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("oracle");

        return $z0;
    }

    public java.sql.PreparedStatement getLoadStatement(java.sql.Connection, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        java.sql.Connection r2;
        org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor r1;
        java.lang.String r0, $r6, $r9, r11, r12, $r16, $r19, $r21;
        boolean $z0, $z1;
        java.sql.PreparedStatement $r10, $r20;
        org.eclipse.jetty.server.session.JDBCSessionIdManager $r5, $r15;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r13, $r14, $r17, $r18;

        r1 := @this: org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor;

        r2 := @parameter0: java.sql.Connection;

        r11 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r12 := @parameter3: java.lang.String;

        if r0 == null goto label1;

        $r21 = "";

        $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $z0 = virtualinvoke r1.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: boolean isEmptyStringNull()>();

        if $z0 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select * from ");

        $r15 = r1.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0>;

        $r16 = $r15.<org.eclipse.jetty.server.session.JDBCSessionIdManager: java.lang.String _sessionTable>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where sessionId = ? and contextPath is null and virtualHost = ?");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r19);

        interfaceinvoke $r20.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r11);

        interfaceinvoke $r20.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r12);

        return $r20;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("select * from ");

        $r5 = r1.<org.eclipse.jetty.server.session.JDBCSessionIdManager$DatabaseAdaptor: org.eclipse.jetty.server.session.JDBCSessionIdManager this$0>;

        $r6 = $r5.<org.eclipse.jetty.server.session.JDBCSessionIdManager: java.lang.String _sessionTable>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where sessionId = ? and contextPath = ? and virtualHost = ?");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = interfaceinvoke r2.<java.sql.Connection: java.sql.PreparedStatement prepareStatement(java.lang.String)>($r9);

        interfaceinvoke $r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(1, r11);

        interfaceinvoke $r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(2, r0);

        interfaceinvoke $r10.<java.sql.PreparedStatement: void setString(int,java.lang.String)>(3, r12);

        return $r10;
    }
}
