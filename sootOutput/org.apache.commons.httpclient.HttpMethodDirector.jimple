class org.apache.commons.httpclient.HttpMethodDirector extends java.lang.Object
{
    public static final java.lang.String WWW_AUTH_CHALLENGE;
    public static final java.lang.String WWW_AUTH_RESP;
    public static final java.lang.String PROXY_AUTH_CHALLENGE;
    public static final java.lang.String PROXY_AUTH_RESP;
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.commons.httpclient.ConnectMethod connectMethod;
    private org.apache.commons.httpclient.HttpState state;
    private org.apache.commons.httpclient.HostConfiguration hostConfiguration;
    private org.apache.commons.httpclient.HttpConnectionManager connectionManager;
    private org.apache.commons.httpclient.params.HttpClientParams params;
    private org.apache.commons.httpclient.HttpConnection conn;
    private boolean releaseConnection;
    private org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor;
    private java.util.Set redirectLocations;
    static java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector;

    public void <init>(org.apache.commons.httpclient.HttpConnectionManager, org.apache.commons.httpclient.HostConfiguration, org.apache.commons.httpclient.params.HttpClientParams, org.apache.commons.httpclient.HttpState)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HostConfiguration r2;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor $r5;
        org.apache.commons.httpclient.HttpConnectionManager r1;
        org.apache.commons.httpclient.HttpState r4;
        org.apache.commons.httpclient.params.HttpClientParams r3, $r6;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 := @parameter0: org.apache.commons.httpclient.HttpConnectionManager;

        r2 := @parameter1: org.apache.commons.httpclient.HostConfiguration;

        r3 := @parameter2: org.apache.commons.httpclient.params.HttpClientParams;

        r4 := @parameter3: org.apache.commons.httpclient.HttpState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 0;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor> = null;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations> = null;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager connectionManager> = r1;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration> = r2;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params> = r3;

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state> = r4;

        $r5 = new org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        $r6 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: void <init>(org.apache.commons.httpclient.params.HttpParams)>($r6);

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor> = $r5;

        return;
    }

    public void executeMethod(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r5;
        org.apache.commons.httpclient.Header $r56;
        org.apache.commons.httpclient.HttpState $r49;
        java.lang.Throwable $r58;
        org.apache.commons.httpclient.HttpMethodDirector r1;
        long $l1;
        org.apache.commons.httpclient.HostConfiguration $r2, $r6, $r8, $r38, $r51;
        org.apache.commons.httpclient.HttpConnectionManager $r37;
        java.lang.StringBuffer $r22, $r24, $r25, $r26, $r27, $r31, $r32, $r33, $r34;
        java.lang.String $r28, $r35;
        org.apache.commons.httpclient.ConnectMethod $r66;
        org.apache.commons.httpclient.HttpMethod r0;
        org.apache.commons.httpclient.auth.AuthState $r43, $r44, $r47, $r48;
        org.apache.commons.httpclient.params.HostParams $r3, $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, $z13;
        java.util.Collection r11;
        org.apache.commons.httpclient.params.HttpClientParams $r4, $r12, $r36, $r41;
        org.apache.commons.httpclient.RedirectException $r30;
        org.apache.commons.httpclient.HttpConnection $r15, $r16, $r17, $r19, $r39, $r40, $r45, $r46, $r50, $r52, $r53, $r59, $r60, $r61, $r63, $r64, $r65;
        int $i0, i2;
        java.util.Iterator $r54;
        java.lang.IllegalArgumentException $r57;
        java.lang.Object $r10, $r55;
        org.apache.commons.logging.Log $r20, $r21, $r23, $r29, $r42;
        java.io.InputStream $r13, $r14, $r18, $r62;

        r1 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        if r0 != null goto label01;

        $r57 = new java.lang.IllegalArgumentException;

        specialinvoke $r57.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method may not be null");

        throw $r57;

     label01:
        $r2 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        $r4 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r3.<org.apache.commons.httpclient.params.HostParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r4);

        $r5 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r6 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.params.HttpMethodParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r7);

        $r8 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r9 = virtualinvoke $r8.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.params.HostParams: java.lang.Object getParameter(java.lang.String)>("http.default-headers");

        r11 = (java.util.Collection) $r10;

        if r11 == null goto label03;

        $r54 = interfaceinvoke r11.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z10 = interfaceinvoke $r54.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label03;

        $r55 = interfaceinvoke $r54.<java.util.Iterator: java.lang.Object next()>();

        $r56 = (org.apache.commons.httpclient.Header) $r55;

        interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r56);

        goto label02;

     label03:
        $r12 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $i0 = virtualinvoke $r12.<org.apache.commons.httpclient.params.HttpClientParams: int getIntParameter(java.lang.String,int)>("http.protocol.max-redirects", 100);

        i2 = 0;

     label04:
        $r64 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r64 == null goto label05;

        $r51 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r50 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z9 = virtualinvoke $r51.<org.apache.commons.httpclient.HostConfiguration: boolean hostEquals(org.apache.commons.httpclient.HttpConnection)>($r50);

        if $z9 != 0 goto label05;

        $r52 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r52.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(0);

        $r53 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r53.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn> = null;

     label05:
        $r65 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r65 != null goto label07;

        $r37 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager connectionManager>;

        $r38 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r36 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $l1 = virtualinvoke $r36.<org.apache.commons.httpclient.params.HttpClientParams: long getConnectionManagerTimeout()>();

        $r39 = interfaceinvoke $r37.<org.apache.commons.httpclient.HttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)>($r38, $l1);

        r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn> = $r39;

        $r40 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r40.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(1);

        $r41 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z5 = virtualinvoke $r41.<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>();

        if $z5 != 0 goto label06;

        $r49 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $z8 = virtualinvoke $r49.<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()>();

        if $z8 == 0 goto label07;

     label06:
        $r42 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Preemptively sending default basic credentials");

        $r43 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        virtualinvoke $r43.<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>();

        $r44 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        virtualinvoke $r44.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

        $r45 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z6 = virtualinvoke $r45.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z6 == 0 goto label07;

        $r46 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z7 = virtualinvoke $r46.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z7 != 0 goto label07;

        $r47 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r47.<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>();

        $r48 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r48.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

     label07:
        specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: void authenticate(org.apache.commons.httpclient.HttpMethod)>(r0);

        specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: void executeWithRetry(org.apache.commons.httpclient.HttpMethod)>(r0);

        $r66 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        if $r66 == null goto label08;

        specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: void fakeResponse(org.apache.commons.httpclient.HttpMethod)>(r0);

        goto label14;

     label08:
        z12 = 0;

        $z0 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)>(r0);

        if $z0 == 0 goto label10;

        $z3 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod)>(r0);

        if $z3 == 0 goto label10;

        z12 = 1;

        i2 = i2 + 1;

        if i2 < $i0 goto label09;

        $r29 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Narrowly avoided an infinite loop in execute");

        $r30 = new org.apache.commons.httpclient.RedirectException;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Maximum redirects (");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") exceeded");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.commons.httpclient.RedirectException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label09:
        $r21 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z4 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z4 == 0 goto label10;

        $r23 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Execute redirect ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r28);

     label10:
        $z13 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)>(r0);

        if $z13 == 0 goto label11;

        $z2 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>(r0);

        if $z2 == 0 goto label11;

        $r20 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Retry authentication");

        z12 = 1;

     label11:
        if z12 != 0 goto label12;

        goto label14;

     label12:
        $r13 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r13 == null goto label13;

        $r14 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        virtualinvoke $r14.<java.io.InputStream: void close()>();

     label13:
        goto label04;

     label14:
        $r15 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r15 == null goto label15;

        $r19 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r19.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(0);

     label15:
        $z1 = r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection>;

        if $z1 != 0 goto label16;

        $r18 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r18 != null goto label22;

     label16:
        $r16 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r16 == null goto label22;

        $r17 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r17.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

        goto label22;

     label17:
        $r58 := @caughtexception;

     label18:
        $r59 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r59 == null goto label19;

        $r63 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r63.<org.apache.commons.httpclient.HttpConnection: void setLocked(boolean)>(0);

     label19:
        $z11 = r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection>;

        if $z11 != 0 goto label20;

        $r62 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r62 != null goto label21;

     label20:
        $r60 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        if $r60 == null goto label21;

        $r61 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r61.<org.apache.commons.httpclient.HttpConnection: void releaseConnection()>();

     label21:
        throw $r58;

     label22:
        return;

        catch java.lang.Throwable from label03 to label14 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private void authenticate(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnection $r1, $r3;
        org.apache.commons.httpclient.HttpMethod r2;
        org.apache.commons.httpclient.auth.AuthenticationException $r4;
        org.apache.commons.logging.Log $r5;
        java.lang.String $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r2 := @parameter0: org.apache.commons.httpclient.HttpMethod;

     label1:
        $r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r1.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z1 = virtualinvoke $r3.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>(r2);

     label2:
        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticateHost(org.apache.commons.httpclient.HttpMethod)>(r2);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.auth.AuthenticationException: java.lang.String getMessage()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r6, $r4);

     label5:
        return;

        catch org.apache.commons.httpclient.auth.AuthenticationException from label1 to label3 with label4;
    }

    private boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod, java.lang.String)
    {
        org.apache.commons.httpclient.HttpMethodDirector r4;
        org.apache.commons.httpclient.Header r3;
        org.apache.commons.httpclient.HttpMethod r0;
        int $i0, i1;
        java.lang.String r1;
        org.apache.commons.httpclient.Header[] $r2;
        boolean $z0, z1;

        r4 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getRequestHeaders(java.lang.String)>(r1);

        z1 = 1;

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label4;

        r3 = $r2[i1];

        $z0 = virtualinvoke r3.<org.apache.commons.httpclient.Header: boolean isAutogenerated()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: void removeRequestHeader(org.apache.commons.httpclient.Header)>(r3);

        goto label3;

     label2:
        z1 = 0;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return z1;
    }

    private void authenticateHost(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        org.apache.commons.httpclient.Header $r22;
        org.apache.commons.httpclient.HttpState $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.httpclient.auth.AuthScheme $r3;
        org.apache.commons.httpclient.auth.AuthScope $r7;
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnection $r6, $r28;
        java.lang.StringBuffer $r14, $r16, $r17, $r23, $r25, $r26;
        int $i0;
        java.lang.String $r5, $r8, $r9, $r18, $r21, $r27, r29;
        org.apache.commons.httpclient.Credentials $r12;
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.logging.Log $r10, $r13, $r15, $r20, $r24;
        org.apache.commons.httpclient.auth.AuthState $r2, $r19;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>(r1, "Authorization");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        if $r3 != null goto label2;

        return;

     label2:
        $z1 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z1 != 0 goto label3;

        $z5 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: boolean isConnectionBased()>();

        if $z5 != 0 goto label8;

     label3:
        $r4 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r29 = $r5;

        if $r5 != null goto label4;

        $r28 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        r29 = virtualinvoke $r28.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label4:
        $r6 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r6.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r7 = new org.apache.commons.httpclient.auth.AuthScope;

        $r8 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r9 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r7.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>(r29, $i0, $r8, $r9);

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label5;

        $r24 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authenticating with ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r24.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label5:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>($r7);

        if $r12 == null goto label7;

        $r21 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String authenticate(org.apache.commons.httpclient.Credentials,org.apache.commons.httpclient.HttpMethod)>($r12, r1);

        if $r21 == null goto label6;

        $r22 = new org.apache.commons.httpclient.Header;

        specialinvoke $r22.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Authorization", $r21, 1);

        interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r22);

     label6:
        goto label8;

     label7:
        $r13 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label8;

        $r15 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Required credentials not available for ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r18);

        $r19 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $z4 = virtualinvoke $r19.<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>();

        if $z4 == 0 goto label8;

        $r20 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Preemptive authentication requested but no default credentials available");

     label8:
        return;
    }

    private void authenticateProxy(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.Header $r22;
        org.apache.commons.httpclient.HttpState $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.httpclient.auth.AuthScheme $r3;
        org.apache.commons.httpclient.auth.AuthScope $r4;
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnection $r5, $r7;
        java.lang.StringBuffer $r14, $r16, $r17, $r23, $r25, $r26;
        int $i0;
        java.lang.String $r6, $r8, $r9, $r18, $r21, $r27;
        org.apache.commons.httpclient.Credentials $r12;
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.logging.Log $r10, $r13, $r15, $r20, $r24;
        org.apache.commons.httpclient.auth.AuthState $r2, $r19;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $z0 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean cleanAuthHeaders(org.apache.commons.httpclient.HttpMethod,java.lang.String)>(r1, "Proxy-Authorization");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        if $r3 != null goto label2;

        return;

     label2:
        $z1 = virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z1 != 0 goto label3;

        $z5 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: boolean isConnectionBased()>();

        if $z5 != 0 goto label7;

     label3:
        $r4 = new org.apache.commons.httpclient.auth.AuthScope;

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        $r7 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        $r8 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r9 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r4.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r6, $i0, $r8, $r9);

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label4;

        $r24 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authenticating with ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r24.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label4:
        $r11 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r12 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>($r4);

        if $r12 == null goto label6;

        $r21 = interfaceinvoke $r3.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String authenticate(org.apache.commons.httpclient.Credentials,org.apache.commons.httpclient.HttpMethod)>($r12, r1);

        if $r21 == null goto label5;

        $r22 = new org.apache.commons.httpclient.Header;

        specialinvoke $r22.<org.apache.commons.httpclient.Header: void <init>(java.lang.String,java.lang.String,boolean)>("Proxy-Authorization", $r21, 1);

        interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: void addRequestHeader(org.apache.commons.httpclient.Header)>($r22);

     label5:
        goto label7;

     label6:
        $r13 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z3 == 0 goto label7;

        $r15 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Required proxy credentials not available for ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r18);

        $r19 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $z4 = virtualinvoke $r19.<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>();

        if $z4 == 0 goto label7;

        $r20 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Preemptive authentication requested but no default proxy credentials available");

     label7:
        return;
    }

    private void applyConnectionParams(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException
    {
        org.apache.commons.httpclient.HttpMethodDirector r3;
        org.apache.commons.httpclient.HttpConnection $r4, $r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r1;
        java.lang.Integer $r5;
        org.apache.commons.httpclient.HttpMethod r0;
        org.apache.commons.httpclient.params.HttpConnectionParams $r7;
        int i0;
        java.lang.Object $r2, r8;

        r3 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        i0 = 0;

        $r1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.socket.timeout");

        r8 = $r2;

        if $r2 != null goto label1;

        $r6 = r3.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        r8 = virtualinvoke $r7.<org.apache.commons.httpclient.params.HttpConnectionParams: java.lang.Object getParameter(java.lang.String)>("http.socket.timeout");

     label1:
        if r8 == null goto label2;

        $r5 = (java.lang.Integer) r8;

        i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

     label2:
        $r4 = r3.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: void setSocketTimeout(int)>(i0);

        return;
    }

    private void executeWithRetry(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r53;
        org.apache.commons.httpclient.HttpState $r51;
        org.apache.commons.httpclient.HttpMethodBase $r44;
        org.apache.commons.httpclient.HttpMethodDirector r1;
        org.apache.commons.httpclient.HttpMethodRetryHandler $r55, r56;
        java.lang.StringBuffer $r10, $r12, $r13, $r14, $r32, $r34, $r37, $r38, $r40;
        java.lang.String $r15, $r31, $r36, $r39, $r41, $r48;
        org.apache.commons.httpclient.DefaultHttpMethodRetryHandler $r43;
        java.io.IOException $r20, $r24;
        java.lang.RuntimeException $r16;
        org.apache.commons.httpclient.HttpMethod r5;
        org.apache.commons.httpclient.HttpRecoverableException $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        org.apache.commons.httpclient.params.HttpConnectionParams $r3;
        org.apache.commons.httpclient.MethodRetryHandler $r45;
        org.apache.commons.httpclient.HttpConnection $r2, $r4, $r6, $r7, $r8, $r9, $r17, $r19, $r21, $r23, $r26, $r47, $r52;
        int i0;
        org.apache.commons.httpclient.HttpException $r50;
        org.apache.commons.logging.Log $r0, $r11, $r18, $r22, $r25, $r27, $r28, $r29, $r30, $r33, $r42, $r49;
        java.lang.Class $r35;
        java.lang.Object $r54;

        r1 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r5 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        i0 = 0;

     label01:
        i0 = i0 + 1;

     label02:
        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r0.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label03;

        $r11 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attempt number ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to process request");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r15);

     label03:
        $r2 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.params.HttpConnectionParams getParams()>();

        $z1 = virtualinvoke $r3.<org.apache.commons.httpclient.params.HttpConnectionParams: boolean isStaleCheckingEnabled()>();

        if $z1 == 0 goto label04;

        $r9 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r9.<org.apache.commons.httpclient.HttpConnection: boolean closeIfStale()>();

     label04:
        $r4 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z2 = virtualinvoke $r4.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z2 != 0 goto label06;

        $r6 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r6.<org.apache.commons.httpclient.HttpConnection: void open()>();

        $r7 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z3 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpConnection: boolean isProxied()>();

        if $z3 == 0 goto label06;

        $r8 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z4 = virtualinvoke $r8.<org.apache.commons.httpclient.HttpConnection: boolean isSecure()>();

        if $z4 == 0 goto label06;

        $z5 = r5 instanceof org.apache.commons.httpclient.ConnectMethod;

        if $z5 != 0 goto label06;

        $z6 = specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean executeConnect()>();

        if $z6 != 0 goto label06;

     label05:
        return;

     label06:
        specialinvoke r1.<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>(r5);

        $r51 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r52 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        interfaceinvoke r5.<org.apache.commons.httpclient.HttpMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r51, $r52);

     label07:
        goto label15;

     label08:
        $r50 := @caughtexception;

        throw $r50;

     label09:
        $r24 := @caughtexception;

        $r25 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

        $r26 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r26.<org.apache.commons.httpclient.HttpConnection: void close()>();

        $z9 = r5 instanceof org.apache.commons.httpclient.HttpMethodBase;

        if $z9 == 0 goto label10;

        $r44 = (org.apache.commons.httpclient.HttpMethodBase) r5;

        $r45 = virtualinvoke $r44.<org.apache.commons.httpclient.HttpMethodBase: org.apache.commons.httpclient.MethodRetryHandler getMethodRetryHandler()>();

        if $r45 == null goto label10;

        $r47 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r46 = new org.apache.commons.httpclient.HttpRecoverableException;

        $r48 = virtualinvoke $r24.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r46.<org.apache.commons.httpclient.HttpRecoverableException: void <init>(java.lang.String)>($r48);

        $z13 = interfaceinvoke r5.<org.apache.commons.httpclient.HttpMethod: boolean isRequestSent()>();

        $z14 = interfaceinvoke $r45.<org.apache.commons.httpclient.MethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpRecoverableException,int,boolean)>(r5, $r47, $r46, i0, $z13);

        if $z14 != 0 goto label10;

        $r49 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r49.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Method retry handler returned false. Automatic recovery will not be attempted");

        throw $r24;

     label10:
        $r53 = interfaceinvoke r5.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r54 = virtualinvoke $r53.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.Object getParameter(java.lang.String)>("http.method.retry-handler");

        $r55 = (org.apache.commons.httpclient.HttpMethodRetryHandler) $r54;

        r56 = $r55;

        if $r55 != null goto label11;

        $r43 = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;

        specialinvoke $r43.<org.apache.commons.httpclient.DefaultHttpMethodRetryHandler: void <init>()>();

        r56 = $r43;

     label11:
        $z10 = interfaceinvoke r56.<org.apache.commons.httpclient.HttpMethodRetryHandler: boolean retryMethod(org.apache.commons.httpclient.HttpMethod,java.io.IOException,int)>(r5, $r24, i0);

        if $z10 != 0 goto label12;

        $r42 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Method retry handler returned false. Automatic recovery will not be attempted");

        throw $r24;

     label12:
        $r27 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z11 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z11 == 0 goto label13;

        $r33 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("I/O exception (");

        $r35 = virtualinvoke $r24.<java.lang.Object: java.lang.Class getClass()>();

        $r36 = virtualinvoke $r35.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") caught when processing request: ");

        $r39 = virtualinvoke $r24.<java.io.IOException: java.lang.String getMessage()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r33.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r41);

     label13:
        $r28 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z12 = interfaceinvoke $r28.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z12 == 0 goto label14;

        $r30 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r31 = virtualinvoke $r24.<java.io.IOException: java.lang.String getMessage()>();

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r31, $r24);

     label14:
        $r29 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r29.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Retrying request");

        goto label01;

     label15:
        goto label20;

     label16:
        $r20 := @caughtexception;

        $r21 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z8 = virtualinvoke $r21.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z8 == 0 goto label17;

        $r22 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

        $r23 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r23.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label17:
        r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 1;

        throw $r20;

     label18:
        $r16 := @caughtexception;

        $r17 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z7 = virtualinvoke $r17.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z7 == 0 goto label19;

        $r18 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

        $r19 = r1.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r19.<org.apache.commons.httpclient.HttpConnection: void close()>();

     label19:
        r1.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 1;

        throw $r16;

     label20:
        return;

        catch org.apache.commons.httpclient.HttpException from label02 to label05 with label08;
        catch org.apache.commons.httpclient.HttpException from label06 to label07 with label08;
        catch java.io.IOException from label02 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label09;
        catch java.io.IOException from label01 to label05 with label16;
        catch java.io.IOException from label06 to label15 with label16;
        catch java.lang.RuntimeException from label01 to label05 with label18;
        catch java.lang.RuntimeException from label06 to label15 with label18;
    }

    private boolean executeConnect() throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.params.HostParams $r6;
        org.apache.commons.httpclient.params.HttpMethodParams $r4;
        org.apache.commons.httpclient.HttpState $r16, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, z5, $z6;
        org.apache.commons.httpclient.params.HttpClientParams $r8;
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnection $r7, $r15, $r25, $r26, $r29;
        org.apache.commons.httpclient.HostConfiguration $r2, $r5;
        int $i0;
        java.lang.String $r32;
        org.apache.commons.httpclient.ConnectMethod $r1, $r3, $r10, $r12, $r14, $r17, $r18, $r19, $r21, $r23, $r27, $r33;
        org.apache.commons.httpclient.auth.AuthenticationException $r30;
        org.apache.commons.logging.Log $r9, $r31;
        org.apache.commons.httpclient.auth.AuthState $r11, $r13, $r20;
        java.io.InputStream $r22, $r24;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 = new org.apache.commons.httpclient.ConnectMethod;

        $r2 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        specialinvoke $r1.<org.apache.commons.httpclient.ConnectMethod: void <init>(org.apache.commons.httpclient.HostConfiguration)>($r2);

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod> = $r1;

        $r3 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r4 = virtualinvoke $r3.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r5 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        $r6 = virtualinvoke $r5.<org.apache.commons.httpclient.HostConfiguration: org.apache.commons.httpclient.params.HostParams getParams()>();

        virtualinvoke $r4.<org.apache.commons.httpclient.params.HttpMethodParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r6);

     label01:
        $r7 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $z0 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpConnection: boolean isOpen()>();

        if $z0 != 0 goto label02;

        $r29 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r29.<org.apache.commons.httpclient.HttpConnection: void open()>();

     label02:
        $r8 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z1 = virtualinvoke $r8.<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()>();

        if $z1 != 0 goto label03;

        $r28 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $z4 = virtualinvoke $r28.<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()>();

        if $z4 == 0 goto label04;

     label03:
        $r9 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Preemptively sending default basic credentials");

        $r10 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r11 = virtualinvoke $r10.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r11.<org.apache.commons.httpclient.auth.AuthState: void setPreemptive()>();

        $r12 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r13 = virtualinvoke $r12.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        virtualinvoke $r13.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

     label04:
        $r33 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void authenticateProxy(org.apache.commons.httpclient.HttpMethod)>($r33);

     label05:
        goto label07;

     label06:
        $r30 := @caughtexception;

        $r31 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r32 = virtualinvoke $r30.<org.apache.commons.httpclient.auth.AuthenticationException: java.lang.String getMessage()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r32, $r30);

     label07:
        $r14 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)>($r14);

        $r17 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r16 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r15 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r17.<org.apache.commons.httpclient.ConnectMethod: int execute(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)>($r16, $r15);

        $r18 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $i0 = virtualinvoke $r18.<org.apache.commons.httpclient.ConnectMethod: int getStatusCode()>();

        z5 = 0;

        $r19 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r20 = virtualinvoke $r19.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        if $i0 != 407 goto label08;

        $z6 = 1;

        goto label09;

     label08:
        $z6 = 0;

     label09:
        virtualinvoke $r20.<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>($z6);

        $z2 = virtualinvoke $r20.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z2 == 0 goto label10;

        $r27 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $z3 = specialinvoke r0.<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)>($r27);

        if $z3 == 0 goto label10;

        z5 = 1;

     label10:
        if z5 != 0 goto label11;

        goto label13;

     label11:
        $r21 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r22 = virtualinvoke $r21.<org.apache.commons.httpclient.ConnectMethod: java.io.InputStream getResponseBodyAsStream()>();

        if $r22 == null goto label12;

        $r23 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r24 = virtualinvoke $r23.<org.apache.commons.httpclient.ConnectMethod: java.io.InputStream getResponseBodyAsStream()>();

        virtualinvoke $r24.<java.io.InputStream: void close()>();

     label12:
        goto label01;

     label13:
        if $i0 < 200 goto label14;

        if $i0 >= 300 goto label14;

        $r26 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r26.<org.apache.commons.httpclient.HttpConnection: void tunnelCreated()>();

        r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod> = null;

        return 1;

     label14:
        $r25 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        virtualinvoke $r25.<org.apache.commons.httpclient.HttpConnection: void close()>();

        return 0;

        catch org.apache.commons.httpclient.auth.AuthenticationException from label04 to label05 with label06;
    }

    private void fakeResponse(org.apache.commons.httpclient.HttpMethod) throws java.io.IOException, org.apache.commons.httpclient.HttpException
    {
        org.apache.commons.httpclient.HttpMethodDirector r2;
        boolean $z0;
        org.apache.commons.httpclient.HttpMethodBase $r5;
        org.apache.commons.httpclient.ConnectMethod $r4, $r7, $r9, $r12;
        org.apache.commons.httpclient.HeaderGroup $r8;
        org.apache.commons.httpclient.auth.AuthScheme $r14;
        org.apache.commons.httpclient.HttpMethod r1;
        org.apache.commons.logging.Log $r0, $r3;
        org.apache.commons.httpclient.StatusLine $r6;
        org.apache.commons.httpclient.auth.AuthState $r11, $r13;
        java.io.InputStream $r10;

        r2 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("CONNECT failed, fake the response for the original method");

        $z0 = r1 instanceof org.apache.commons.httpclient.HttpMethodBase;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.commons.httpclient.HttpMethodBase) r1;

        $r4 = r2.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r6 = virtualinvoke $r4.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.StatusLine getStatusLine()>();

        $r7 = r2.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.HeaderGroup getResponseHeaderGroup()>();

        $r9 = r2.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.ConnectMethod: java.io.InputStream getResponseBodyAsStream()>();

        virtualinvoke $r5.<org.apache.commons.httpclient.HttpMethodBase: void fakeResponse(org.apache.commons.httpclient.StatusLine,org.apache.commons.httpclient.HeaderGroup,java.io.InputStream)>($r6, $r8, $r10);

        $r11 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r12 = r2.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod>;

        $r13 = virtualinvoke $r12.<org.apache.commons.httpclient.ConnectMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r14 = virtualinvoke $r13.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        virtualinvoke $r11.<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>($r14);

        r2.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.ConnectMethod connectMethod> = null;

        goto label2;

     label1:
        r2.<org.apache.commons.httpclient.HttpMethodDirector: boolean releaseConnection> = 1;

        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Unable to fake response on method as it is not derived from HttpMethodBase.");

     label2:
        return;
    }

    private boolean processRedirectResponse(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.RedirectException
    {
        org.apache.commons.httpclient.params.HttpMethodParams $r13, $r16;
        org.apache.commons.httpclient.URIException $r62, $r63;
        org.apache.commons.httpclient.Header $r1;
        java.util.Set $r31, $r32, $r33;
        org.apache.commons.httpclient.HttpMethodDirector r5;
        org.apache.commons.httpclient.HostConfiguration $r18;
        java.lang.StringBuffer $r22, $r24, $r26, $r27, $r29, $r35, $r36, $r37, $r38, $r44, $r46, $r47, $r48, $r50, $r52, $r53, $r54, $r56, $r58, $r59, $r60, $r65, $r66, $r67;
        java.lang.String $r2, $r8, $r10, $r12, $r14, $r25, $r28, $r30, $r39, $r49, $r55, $r61, $r68;
        org.apache.commons.httpclient.HttpMethod r0;
        org.apache.commons.httpclient.protocol.Protocol $r7;
        org.apache.commons.httpclient.auth.AuthState $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.httpclient.params.HttpClientParams $r17, $r19, $r41;
        org.apache.commons.httpclient.InvalidRedirectLocationException $r64;
        org.apache.commons.httpclient.URI $r4, $r15, $r43, r69;
        org.apache.commons.httpclient.HttpConnection $r6, $r9, $r11;
        org.apache.commons.httpclient.CircularRedirectException $r34;
        java.util.HashSet $r40;
        int $i0, $i1;
        org.apache.commons.logging.Log $r3, $r20, $r23, $r42, $r45, $r51, $r57;

        r5 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("location");

        if $r1 != null goto label01;

        $r57 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received redirect response ");

        $i1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" but no location header");

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r57.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r61);

        return 0;

     label01:
        $r2 = virtualinvoke $r1.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r3 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r51 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redirect requested to location \'");

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r51.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r55);

     label02:
        $r4 = new org.apache.commons.httpclient.URI;

        $r6 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.protocol.Protocol getProtocol()>();

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.protocol.Protocol: java.lang.String getScheme()>();

        $r9 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r10 = virtualinvoke $r9.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

        $r11 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r11.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r12 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: java.lang.String getPath()>();

        specialinvoke $r4.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>($r8, null, $r10, $i0, $r12);

        $r13 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r14 = virtualinvoke $r13.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getUriCharset()>();

        $r15 = new org.apache.commons.httpclient.URI;

        specialinvoke $r15.<org.apache.commons.httpclient.URI: void <init>(java.lang.String,boolean,java.lang.String)>($r2, 1, $r14);

        r69 = $r15;

        $z1 = virtualinvoke $r15.<org.apache.commons.httpclient.URI: boolean isRelativeURI()>();

        if $z1 == 0 goto label05;

        $r41 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z6 = virtualinvoke $r41.<org.apache.commons.httpclient.params.HttpClientParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-relative-redirect");

        if $z6 == 0 goto label04;

        $r45 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Relative redirect location \'");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' not allowed");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r45.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r49);

     label03:
        return 0;

     label04:
        $r42 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r42.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Redirect URI is not absolute - parsing as relative");

        $r43 = new org.apache.commons.httpclient.URI;

        specialinvoke $r43.<org.apache.commons.httpclient.URI: void <init>(org.apache.commons.httpclient.URI,org.apache.commons.httpclient.URI)>($r4, $r15);

        r69 = $r43;

        goto label06;

     label05:
        $r16 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r17 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        virtualinvoke $r16.<org.apache.commons.httpclient.params.HttpMethodParams: void setDefaults(org.apache.commons.httpclient.params.HttpParams)>($r17);

     label06:
        interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: void setURI(org.apache.commons.httpclient.URI)>(r69);

        $r18 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        virtualinvoke $r18.<org.apache.commons.httpclient.HostConfiguration: void setHost(org.apache.commons.httpclient.URI)>(r69);

     label07:
        goto label09;

     label08:
        $r63 := @caughtexception;

        $r64 = new org.apache.commons.httpclient.InvalidRedirectLocationException;

        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid redirect location: ");

        $r67 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r64.<org.apache.commons.httpclient.InvalidRedirectLocationException: void <init>(java.lang.String,java.lang.String,java.lang.Throwable)>($r68, $r2, $r63);

        throw $r64;

     label09:
        $r19 = r5.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        $z2 = virtualinvoke $r19.<org.apache.commons.httpclient.params.HttpClientParams: boolean isParameterFalse(java.lang.String)>("http.protocol.allow-circular-redirects");

        if $z2 == 0 goto label15;

        $r31 = r5.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations>;

        if $r31 != null goto label10;

        $r40 = new java.util.HashSet;

        specialinvoke $r40.<java.util.HashSet: void <init>()>();

        r5.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations> = $r40;

     label10:
        $r32 = r5.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations>;

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>($r4);

     label11:
        $z4 = virtualinvoke r69.<org.apache.commons.httpclient.URI: boolean hasQuery()>();

        if $z4 == 0 goto label12;

        virtualinvoke r69.<org.apache.commons.httpclient.URI: void setQuery(java.lang.String)>(null);

     label12:
        goto label14;

     label13:
        $r62 := @caughtexception;

        return 0;

     label14:
        $r33 = r5.<org.apache.commons.httpclient.HttpMethodDirector: java.util.Set redirectLocations>;

        $z5 = interfaceinvoke $r33.<java.util.Set: boolean contains(java.lang.Object)>(r69);

        if $z5 == 0 goto label15;

        $r34 = new org.apache.commons.httpclient.CircularRedirectException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Circular redirect to \'");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r69);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<org.apache.commons.httpclient.CircularRedirectException: void <init>(java.lang.String)>($r39);

        throw $r34;

     label15:
        $r20 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r20.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label16;

        $r23 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redirecting from \'");

        $r25 = virtualinvoke $r4.<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' to \'");

        $r28 = virtualinvoke r69.<org.apache.commons.httpclient.URI: java.lang.String getEscapedURI()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r30);

     label16:
        $r21 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        virtualinvoke $r21.<org.apache.commons.httpclient.auth.AuthState: void invalidate()>();

        return 1;

        catch org.apache.commons.httpclient.URIException from label02 to label03 with label08;
        catch org.apache.commons.httpclient.URIException from label04 to label07 with label08;
        catch org.apache.commons.httpclient.URIException from label11 to label12 with label13;
    }

    private boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r2;
        java.lang.Exception $r3;
        org.apache.commons.httpclient.HttpMethod r1;
        int $i0;
        org.apache.commons.logging.Log $r0, $r4, $r5;
        java.lang.String $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r1 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter HttpMethodBase.processAuthenticationResponse(HttpState, HttpConnection)");

     label1:
        $i0 = interfaceinvoke r1.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        lookupswitch($i0)
        {
            case 401: goto label2;
            case 407: goto label4;
            default: goto label6;
        };

     label2:
        $z1 = specialinvoke r2.<org.apache.commons.httpclient.HttpMethodDirector: boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod)>(r1);

     label3:
        return $z1;

     label4:
        $z0 = specialinvoke r2.<org.apache.commons.httpclient.HttpMethodDirector: boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod)>(r1);

     label5:
        return $z0;

     label6:
        return 0;

     label7:
        $r3 := @caughtexception;

        $r4 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z2 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isErrorEnabled()>();

        if $z2 == 0 goto label8;

        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r6, $r3);

     label8:
        return 0;

        catch java.lang.Exception from label1 to label3 with label7;
        catch java.lang.Exception from label4 to label5 with label7;
    }

    private boolean processWWWAuthChallenge(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.MalformedChallengeException, org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthChallengeException $r37;
        org.apache.commons.httpclient.params.HttpMethodParams $r6, $r21, $r22;
        org.apache.commons.httpclient.HttpState $r13;
        java.util.Map $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.httpclient.auth.AuthScheme r41;
        org.apache.commons.httpclient.auth.AuthScope $r9;
        org.apache.commons.httpclient.HttpMethodDirector r4;
        org.apache.commons.httpclient.HttpConnection $r8, $r35;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor $r5;
        java.lang.StringBuffer $r16, $r18, $r19, $r25, $r27, $r28, $r30, $r32, $r33;
        int $i0;
        java.lang.String $r7, $r10, $r11, $r20, $r29, $r34, $r40, r42;
        org.apache.commons.httpclient.Credentials $r14, $r23, r43;
        org.apache.commons.httpclient.HttpMethod r0;
        org.apache.commons.logging.Log $r12, $r15, $r17, $r24, $r26, $r31, $r36, $r38, $r39;
        org.apache.commons.httpclient.auth.AuthState $r1;
        org.apache.commons.httpclient.Header[] $r2;

        r4 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $r2 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>("WWW-Authenticate");

        $r3 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r36 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authentication challenge(s) not found");

        return 0;

     label01:
        r41 = null;

     label02:
        $r5 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor>;

        r41 = virtualinvoke $r5.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>($r1, $r3);

     label03:
        goto label05;

     label04:
        $r37 := @caughtexception;

        $r38 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z6 = interfaceinvoke $r38.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z6 == 0 goto label05;

        $r39 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r40 = virtualinvoke $r37.<org.apache.commons.httpclient.auth.AuthChallengeException: java.lang.String getMessage()>();

        interfaceinvoke $r39.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r40);

     label05:
        if r41 != null goto label06;

        return 0;

     label06:
        $r6 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r7 = virtualinvoke $r6.<org.apache.commons.httpclient.params.HttpMethodParams: java.lang.String getVirtualHost()>();

        r42 = $r7;

        if $r7 != null goto label07;

        $r35 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        r42 = virtualinvoke $r35.<org.apache.commons.httpclient.HttpConnection: java.lang.String getHost()>();

     label07:
        $r8 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r8.<org.apache.commons.httpclient.HttpConnection: int getPort()>();

        $r9 = new org.apache.commons.httpclient.auth.AuthScope;

        $r10 = interfaceinvoke r41.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r11 = interfaceinvoke r41.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r9.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>(r42, $i0, $r10, $r11);

        $r12 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label08;

        $r31 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Authentication scope: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r34);

     label08:
        $z2 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthAttempted()>();

        if $z2 == 0 goto label11;

        $z4 = interfaceinvoke r41.<org.apache.commons.httpclient.auth.AuthScheme: boolean isComplete()>();

        if $z4 == 0 goto label11;

        $r22 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r23 = specialinvoke r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r41, $r22, $r9);

        if $r23 != null goto label10;

        $r24 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z5 = interfaceinvoke $r24.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z5 == 0 goto label09;

        $r26 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failure authenticating with ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r29);

     label09:
        return 0;

     label10:
        return 1;

     label11:
        virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

        $r13 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r14 = virtualinvoke $r13.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScope)>($r9);

        r43 = $r14;

        if $r14 != null goto label12;

        $r21 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r43 = specialinvoke r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r41, $r21, $r9);

     label12:
        if r43 != null goto label14;

        $r15 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z3 == 0 goto label13;

        $r17 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No credentials available for ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r20);

     label13:
        return 0;

     label14:
        return 1;

        catch org.apache.commons.httpclient.auth.AuthChallengeException from label02 to label03 with label04;
    }

    private boolean processProxyAuthChallenge(org.apache.commons.httpclient.HttpMethod) throws org.apache.commons.httpclient.auth.MalformedChallengeException, org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthChallengeException $r36;
        org.apache.commons.httpclient.params.HttpMethodParams $r21, $r22;
        org.apache.commons.httpclient.HttpState $r13;
        java.util.Map $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.commons.httpclient.auth.AuthScheme r40;
        org.apache.commons.httpclient.auth.AuthScope $r6;
        org.apache.commons.httpclient.HttpMethodDirector r4;
        org.apache.commons.httpclient.HttpConnection $r7, $r9;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor $r5;
        java.lang.StringBuffer $r16, $r18, $r19, $r25, $r27, $r28, $r30, $r32, $r33;
        int $i0;
        java.lang.String $r8, $r10, $r11, $r20, $r29, $r34, $r39;
        org.apache.commons.httpclient.Credentials $r14, $r23, r41;
        org.apache.commons.httpclient.HttpMethod r0;
        org.apache.commons.logging.Log $r12, $r15, $r17, $r24, $r26, $r31, $r35, $r37, $r38;
        org.apache.commons.httpclient.auth.AuthState $r1;
        org.apache.commons.httpclient.Header[] $r2;

        r4 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $r2 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.Header[] getResponseHeaders(java.lang.String)>("Proxy-Authenticate");

        $r3 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeParser: java.util.Map parseChallenges(org.apache.commons.httpclient.Header[])>($r2);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r35 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r35.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy authentication challenge(s) not found");

        return 0;

     label01:
        r40 = null;

     label02:
        $r5 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.auth.AuthChallengeProcessor authProcessor>;

        r40 = virtualinvoke $r5.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState,java.util.Map)>($r1, $r3);

     label03:
        goto label05;

     label04:
        $r36 := @caughtexception;

        $r37 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z6 = interfaceinvoke $r37.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z6 == 0 goto label05;

        $r38 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r39 = virtualinvoke $r36.<org.apache.commons.httpclient.auth.AuthChallengeException: java.lang.String getMessage()>();

        interfaceinvoke $r38.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r39);

     label05:
        if r40 != null goto label06;

        return 0;

     label06:
        $r6 = new org.apache.commons.httpclient.auth.AuthScope;

        $r7 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $r8 = virtualinvoke $r7.<org.apache.commons.httpclient.HttpConnection: java.lang.String getProxyHost()>();

        $r9 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnection conn>;

        $i0 = virtualinvoke $r9.<org.apache.commons.httpclient.HttpConnection: int getProxyPort()>();

        $r10 = interfaceinvoke r40.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getRealm()>();

        $r11 = interfaceinvoke r40.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r6.<org.apache.commons.httpclient.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r8, $i0, $r10, $r11);

        $r12 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label07;

        $r31 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Proxy authentication scope: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r34);

     label07:
        $z2 = virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthAttempted()>();

        if $z2 == 0 goto label10;

        $z4 = interfaceinvoke r40.<org.apache.commons.httpclient.auth.AuthScheme: boolean isComplete()>();

        if $z4 == 0 goto label10;

        $r22 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        $r23 = specialinvoke r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r40, $r22, $r6);

        if $r23 != null goto label09;

        $r24 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z5 = interfaceinvoke $r24.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z5 == 0 goto label08;

        $r26 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failure authenticating with ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r29);

     label08:
        return 0;

     label09:
        return 1;

     label10:
        virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: void setAuthAttempted(boolean)>(1);

        $r13 = r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        $r14 = virtualinvoke $r13.<org.apache.commons.httpclient.HttpState: org.apache.commons.httpclient.Credentials getProxyCredentials(org.apache.commons.httpclient.auth.AuthScope)>($r6);

        r41 = $r14;

        if $r14 != null goto label11;

        $r21 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.params.HttpMethodParams getParams()>();

        r41 = specialinvoke r4.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.params.HttpParams,org.apache.commons.httpclient.auth.AuthScope)>(r40, $r21, $r6);

     label11:
        if r41 != null goto label13;

        $r15 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z3 == 0 goto label12;

        $r17 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No credentials available for ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r20);

     label12:
        return 0;

     label13:
        return 1;

        catch org.apache.commons.httpclient.auth.AuthChallengeException from label02 to label03 with label04;
    }

    private boolean isRedirectNeeded(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r2;
        org.apache.commons.httpclient.HttpMethod r0;
        int $i0;
        org.apache.commons.logging.Log $r1;
        boolean $z0;

        r2 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $i0 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        tableswitch($i0)
        {
            case 301: goto label1;
            case 302: goto label1;
            case 303: goto label1;
            case 304: goto label3;
            case 305: goto label3;
            case 306: goto label3;
            case 307: goto label1;
            default: goto label3;
        };

     label1:
        $r1 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Redirect required");

        $z0 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: boolean getFollowRedirects()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    private boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)
    {
        org.apache.commons.httpclient.HttpMethodDirector r7;
        org.apache.commons.httpclient.HttpMethod r0;
        int $i0, $i1;
        org.apache.commons.logging.Log $r4, $r5;
        org.apache.commons.httpclient.auth.AuthState $r1, $r2, $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r7 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r0 := @parameter0: org.apache.commons.httpclient.HttpMethod;

        $r1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $i0 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        if $i0 != 401 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        virtualinvoke $r1.<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>($z3);

        $r2 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $i1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: int getStatusCode()>();

        if $i1 != 407 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        virtualinvoke $r2.<org.apache.commons.httpclient.auth.AuthState: void setAuthRequested(boolean)>($z4);

        $r3 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getHostAuthState()>();

        $z0 = virtualinvoke $r3.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z0 != 0 goto label5;

        $r6 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: org.apache.commons.httpclient.auth.AuthState getProxyAuthState()>();

        $z2 = virtualinvoke $r6.<org.apache.commons.httpclient.auth.AuthState: boolean isAuthRequested()>();

        if $z2 == 0 goto label7;

     label5:
        $r4 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authorization required");

        $z1 = interfaceinvoke r0.<org.apache.commons.httpclient.HttpMethod: boolean getDoAuthentication()>();

        if $z1 == 0 goto label6;

        return 1;

     label6:
        $r5 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Authentication requested but doAuthentication is disabled");

        return 0;

     label7:
        return 0;
    }

    private org.apache.commons.httpclient.Credentials promptForCredentials(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.params.HttpParams, org.apache.commons.httpclient.auth.AuthScope)
    {
        org.apache.commons.httpclient.HttpMethodDirector r8;
        org.apache.commons.httpclient.params.HttpParams r1;
        org.apache.commons.httpclient.HttpState $r9;
        java.lang.StringBuffer $r11, $r13, $r14;
        int $i0;
        java.lang.String $r7, $r15, $r18;
        boolean $z0;
        org.apache.commons.httpclient.auth.CredentialsNotAvailableException $r16;
        org.apache.commons.httpclient.auth.AuthScheme r5;
        org.apache.commons.httpclient.Credentials r19;
        org.apache.commons.httpclient.auth.AuthScope r6;
        org.apache.commons.logging.Log $r0, $r4, $r10, $r12, $r17;
        java.lang.Object $r2;
        org.apache.commons.httpclient.auth.CredentialsProvider r3;

        r8 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r5 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        r1 := @parameter1: org.apache.commons.httpclient.params.HttpParams;

        r6 := @parameter2: org.apache.commons.httpclient.auth.AuthScope;

        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials required");

        r19 = null;

        $r2 = interfaceinvoke r1.<org.apache.commons.httpclient.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.authentication.credential-provider");

        r3 = (org.apache.commons.httpclient.auth.CredentialsProvider) $r2;

        if r3 == null goto label5;

     label1:
        $r7 = virtualinvoke r6.<org.apache.commons.httpclient.auth.AuthScope: java.lang.String getHost()>();

        $i0 = virtualinvoke r6.<org.apache.commons.httpclient.auth.AuthScope: int getPort()>();

        r19 = interfaceinvoke r3.<org.apache.commons.httpclient.auth.CredentialsProvider: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScheme,java.lang.String,int,boolean)>(r5, $r7, $i0, 0);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r18 = virtualinvoke $r16.<org.apache.commons.httpclient.auth.CredentialsNotAvailableException: java.lang.String getMessage()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r18);

     label4:
        if r19 == null goto label6;

        $r9 = r8.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        virtualinvoke $r9.<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>(r6, r19);

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r12 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" new credentials given");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

        goto label6;

     label5:
        $r4 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials provider not available");

     label6:
        return r19;

        catch org.apache.commons.httpclient.auth.CredentialsNotAvailableException from label1 to label2 with label3;
    }

    private org.apache.commons.httpclient.Credentials promptForProxyCredentials(org.apache.commons.httpclient.auth.AuthScheme, org.apache.commons.httpclient.params.HttpParams, org.apache.commons.httpclient.auth.AuthScope)
    {
        org.apache.commons.httpclient.HttpMethodDirector r8;
        org.apache.commons.httpclient.params.HttpParams r1;
        org.apache.commons.httpclient.HttpState $r9;
        java.lang.StringBuffer $r11, $r13, $r14;
        int $i0;
        java.lang.String $r7, $r15, $r18;
        boolean $z0;
        org.apache.commons.httpclient.auth.CredentialsNotAvailableException $r16;
        org.apache.commons.httpclient.auth.AuthScheme r5;
        org.apache.commons.httpclient.Credentials r19;
        org.apache.commons.httpclient.auth.AuthScope r6;
        org.apache.commons.logging.Log $r0, $r4, $r10, $r12, $r17;
        java.lang.Object $r2;
        org.apache.commons.httpclient.auth.CredentialsProvider r3;

        r8 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        r5 := @parameter0: org.apache.commons.httpclient.auth.AuthScheme;

        r1 := @parameter1: org.apache.commons.httpclient.params.HttpParams;

        r6 := @parameter2: org.apache.commons.httpclient.auth.AuthScope;

        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy credentials required");

        r19 = null;

        $r2 = interfaceinvoke r1.<org.apache.commons.httpclient.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.authentication.credential-provider");

        r3 = (org.apache.commons.httpclient.auth.CredentialsProvider) $r2;

        if r3 == null goto label5;

     label1:
        $r7 = virtualinvoke r6.<org.apache.commons.httpclient.auth.AuthScope: java.lang.String getHost()>();

        $i0 = virtualinvoke r6.<org.apache.commons.httpclient.auth.AuthScope: int getPort()>();

        r19 = interfaceinvoke r3.<org.apache.commons.httpclient.auth.CredentialsProvider: org.apache.commons.httpclient.Credentials getCredentials(org.apache.commons.httpclient.auth.AuthScheme,java.lang.String,int,boolean)>(r5, $r7, $i0, 1);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r18 = virtualinvoke $r16.<org.apache.commons.httpclient.auth.CredentialsNotAvailableException: java.lang.String getMessage()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r18);

     label4:
        if r19 == null goto label6;

        $r9 = r8.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        virtualinvoke $r9.<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)>(r6, r19);

        $r10 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label6;

        $r12 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" new credentials given");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

        goto label6;

     label5:
        $r4 = <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy credentials provider not available");

     label6:
        return r19;

        catch org.apache.commons.httpclient.auth.CredentialsNotAvailableException from label1 to label2 with label3;
    }

    public org.apache.commons.httpclient.HostConfiguration getHostConfiguration()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HostConfiguration $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HostConfiguration hostConfiguration>;

        return $r1;
    }

    public org.apache.commons.httpclient.HttpState getState()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpState $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpState state>;

        return $r1;
    }

    public org.apache.commons.httpclient.HttpConnectionManager getConnectionManager()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.HttpConnectionManager $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager connectionManager>;

        return $r1;
    }

    public org.apache.commons.httpclient.params.HttpParams getParams()
    {
        org.apache.commons.httpclient.HttpMethodDirector r0;
        org.apache.commons.httpclient.params.HttpClientParams $r1;

        r0 := @this: org.apache.commons.httpclient.HttpMethodDirector;

        $r1 = r0.<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.params.HttpClientParams params>;

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        <org.apache.commons.httpclient.HttpMethodDirector: java.lang.String PROXY_AUTH_RESP> = "Proxy-Authorization";

        <org.apache.commons.httpclient.HttpMethodDirector: java.lang.String PROXY_AUTH_CHALLENGE> = "Proxy-Authenticate";

        <org.apache.commons.httpclient.HttpMethodDirector: java.lang.String WWW_AUTH_RESP> = "Authorization";

        <org.apache.commons.httpclient.HttpMethodDirector: java.lang.String WWW_AUTH_CHALLENGE> = "WWW-Authenticate";

        $r0 = <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.HttpMethodDirector");

        <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.HttpMethodDirector: java.lang.Class class$org$apache$commons$httpclient$HttpMethodDirector>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
