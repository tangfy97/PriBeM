public class org.waveprotocol.wave.media.model.AttachmentDocumentWrapper extends java.lang.Object implements org.waveprotocol.wave.media.model.MutableClientAttachment
{
    private final org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap;
    private final org.waveprotocol.wave.model.document.ObservableMutableDocument internalDocument;
    private volatile org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image;
    private volatile org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail;

    public static org.waveprotocol.wave.media.model.AttachmentDocumentWrapper create(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper $r1;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r1 = staticinvoke <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper internalCreate(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r0);

        return $r1;
    }

    void <init>(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r6;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        org.waveprotocol.wave.model.util.Serializer $r5;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyNameSerializer $r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image> = null;

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail> = null;

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.document.ObservableMutableDocument internalDocument> = r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.DefaultDocumentEventRouter: org.waveprotocol.wave.model.document.util.DocumentEventRouter create(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r1);

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.document.ObservableMutableDocument: java.lang.Object getDocumentElement()>();

        $r4 = new org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyNameSerializer;

        specialinvoke $r4.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyNameSerializer: void <init>()>();

        $r5 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r5, "node", "key", "value");

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap> = $r6;

        return;
    }

    public java.lang.String getAttachmentUrl()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName ATTACHMENT_URL>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getCreator()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName CREATOR>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r1;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.document.ObservableMutableDocument internalDocument>;

        return $r1;
    }

    public java.lang.String getFilename()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName FILENAME>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl getImage()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2, $r4;
        java.lang.Integer $r3, $r5;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl $r1, $r6, $r7;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        int $i0, $i1;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image>;

        if $r1 != null goto label1;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName IMAGE_WIDTH>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Integer getAsInt(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r2);

        $r4 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName IMAGE_HEIGHT>;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Integer getAsInt(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r4);

        if $r3 == null goto label1;

        if $r5 == null goto label1;

        $r6 = new org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        specialinvoke $r6.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl: void <init>(int,int)>($i0, $i1);

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image> = $r6;

     label1:
        $r7 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image>;

        return $r7;
    }

    public java.lang.String getMimeType()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName MIME_TYPE>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.Long getSize()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Long $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName ATTACHMENT_SIZE>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Long getAsLong(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl getThumbnail()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl $r1, $r6, $r7;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2, $r4;
        java.lang.Integer $r3, $r5;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        int $i0, $i1;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail>;

        if $r1 != null goto label1;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName THUMBNAIL_WIDTH>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Integer getAsInt(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r2);

        $r4 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName THUMBNAIL_HEIGHT>;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Integer getAsInt(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r4);

        if $r3 == null goto label1;

        if $r5 == null goto label1;

        $r6 = new org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        specialinvoke $r6.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl: void <init>(int,int)>($i0, $i1);

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail> = $r6;

     label1:
        $r7 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail>;

        return $r7;
    }

    public java.lang.String getThumbnailUrl()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName THUMBNAIL_URL>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public long getUploadedByteCount()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Long $r2;
        long $l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName UPLOAD_PROGRESS>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Long getAsLong(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r1);

        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public long getUploadRetryCount()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Long $r2;
        long $l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName UPLOAD_RETRIES>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Long getAsLong(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r1);

        if $r2 != null goto label1;

        $l0 = 0L;

        goto label2;

     label1:
        $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

     label2:
        return $l0;
    }

    public boolean isMalware()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Boolean $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName MALWARE>;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: java.lang.Boolean getAsBoolean(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)>($r1);

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.String getStatus()
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        java.lang.String $r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName STATUS>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public void setAttachmentUrl(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName ATTACHMENT_URL>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void setCreator(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName CREATOR>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void setDownloadToken(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName DOWNLOAD_TOKEN>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void setFilename(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName FILENAME>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public org.waveprotocol.wave.media.model.ClientAttachment$Image setImage(int, int)
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2, $r5;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r1, $r4;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl $r7, $r8;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        int i0, i1;
        java.lang.String $r3, $r6;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName IMAGE_WIDTH>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r5 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName IMAGE_HEIGHT>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        virtualinvoke $r4.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl;

        specialinvoke $r7.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl: void <init>(int,int)>(i0, i1);

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image> = $r7;

        $r8 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl image>;

        return $r8;
    }

    public void setMalware(java.lang.Boolean)
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Boolean r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.Boolean;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName MALWARE>;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: void setBooleanAttribute(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName,boolean)>($r2, $z0);

        return;
    }

    public void setMimeType(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName MIME_TYPE>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void setSize(java.lang.Long)
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Long r1;
        long $l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.Long;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName ATTACHMENT_SIZE>;

        $l0 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: void setLongAttribute(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName,long)>($r2, $l0);

        return;
    }

    public void setStatus(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName STATUS>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public org.waveprotocol.wave.media.model.ClientAttachment$Thumbnail setThumbnail(int, int)
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl $r7, $r8;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2, $r5;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r1, $r4;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        int i0, i1;
        java.lang.String $r3, $r6;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName THUMBNAIL_WIDTH>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r5 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName THUMBNAIL_HEIGHT>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        virtualinvoke $r4.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl;

        specialinvoke $r7.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl: void <init>(int,int)>(i0, i1);

        r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail> = $r7;

        $r8 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl thumbnail>;

        return $r8;
    }

    public void setThumbnailUrl(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.String r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r2;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r2 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName THUMBNAIL_URL>;

        virtualinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void setUploadedByteCount(long)
    {
        long l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        l0 := @parameter0: long;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName UPLOAD_PROGRESS>;

        specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: void setLongAttribute(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName,long)>($r1, l0);

        return;
    }

    public void setUploadRetryCount(long)
    {
        long l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName $r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        l0 := @parameter0: long;

        $r1 = <org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName UPLOAD_RETRIES>;

        specialinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: void setLongAttribute(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName,long)>($r1, l0);

        return;
    }

    public long incrementRetryCount()
    {
        long $l0, l1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: long getUploadRetryCount()>();

        l1 = $l0 + 1L;

        virtualinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: void setUploadRetryCount(long)>(l1);

        return l1;
    }

    private java.lang.Boolean getAsBoolean(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Boolean $r5;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName r1;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    private java.lang.Integer getAsInt(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        int $i0;
        java.lang.Object $r3;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName r1;
        java.lang.String r4;
        java.lang.Integer $r5;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    private java.lang.Long getAsLong(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        java.lang.Long $r5;
        java.lang.Object $r3;
        long $l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName r1;
        java.lang.String r4;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.lang.String) $r3;

        if r4 == null goto label1;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    private static org.waveprotocol.wave.media.model.AttachmentDocumentWrapper internalCreate(org.waveprotocol.wave.model.document.ObservableMutableDocument)
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper $r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ObservableMutableDocument;

        $r0 = new org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        specialinvoke $r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: void <init>(org.waveprotocol.wave.model.document.ObservableMutableDocument)>(r1);

        return $r0;
    }

    private void setBooleanAttribute(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName, boolean)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName r1;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName;

        z0 := @parameter1: boolean;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);

        virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    private void setLongAttribute(org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName, long)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r2;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;
        long l0;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        r1 := @parameter0: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$KeyName;

        l0 := @parameter1: long;

        $r2 = r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap dataMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke $r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public volatile org.waveprotocol.wave.media.model.ClientAttachment$Thumbnail getThumbnail()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl $r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ThumbnailImpl getThumbnail()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.media.model.ClientAttachment$Image getImage()
    {
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl $r1;
        org.waveprotocol.wave.media.model.AttachmentDocumentWrapper r0;

        r0 := @this: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.media.model.AttachmentDocumentWrapper: org.waveprotocol.wave.media.model.AttachmentDocumentWrapper$ImageImpl getImage()>();

        return $r1;
    }
}
