public class org.springframework.scheduling.support.DelegatingErrorHandlingRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final java.lang.Runnable delegate;
    private final org.springframework.util.ErrorHandler errorHandler;

    public void <init>(java.lang.Runnable, org.springframework.util.ErrorHandler)
    {
        org.springframework.util.ErrorHandler r2;
        java.lang.Runnable r1;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable r0;

        r0 := @this: org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: org.springframework.util.ErrorHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Delegate must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "ErrorHandler must not be null");

        r0.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: java.lang.Runnable delegate> = r1;

        r0.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: org.springframework.util.ErrorHandler errorHandler> = r2;

        return;
    }

    public void run()
    {
        java.lang.Throwable $r2;
        org.springframework.util.ErrorHandler $r3;
        java.lang.Runnable $r1;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable r0;

        r0 := @this: org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

     label1:
        $r1 = r0.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: java.lang.Runnable delegate>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = r0.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: org.springframework.util.ErrorHandler errorHandler>;

        interfaceinvoke $r3.<org.springframework.util.ErrorHandler: void handleError(java.lang.Throwable)>($r2);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r4;
        java.lang.Runnable $r2;
        org.springframework.scheduling.support.DelegatingErrorHandlingRunnable r1;

        r1 := @this: org.springframework.scheduling.support.DelegatingErrorHandlingRunnable;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("DelegatingErrorHandlingRunnable for ");

        $r2 = r1.<org.springframework.scheduling.support.DelegatingErrorHandlingRunnable: java.lang.Runnable delegate>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }
}
