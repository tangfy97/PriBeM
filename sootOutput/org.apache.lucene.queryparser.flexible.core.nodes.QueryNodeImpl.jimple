public abstract class org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl extends java.lang.Object implements org.apache.lucene.queryparser.flexible.core.nodes.QueryNode, java.lang.Cloneable
{
    public static final java.lang.String PLAINTEXT_FIELD_NAME;
    private boolean isLeaf;
    private java.util.Hashtable tags;
    private java.util.List clauses;
    private org.apache.lucene.queryparser.flexible.core.nodes.QueryNode parent;
    protected boolean toQueryStringIgnoreFields;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf> = 1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags> = $r1;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses> = null;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode parent> = null;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean toQueryStringIgnoreFields> = 0;

        return;
    }

    protected void allocate()
    {
        java.util.List $r1, $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        if $r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses> = $r3;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label2:
        return;
    }

    public final void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        java.lang.IllegalArgumentException $r5;
        java.util.List $r1, $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0, $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r2;
        java.lang.String $r6, $r7;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r2 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        if $r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String NODE_ACTION_NOT_SUPPORTED>;

        $r7 = staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: java.lang.String getLocalizedMessage(java.lang.String)>($r6);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label2:
        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r4 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl) r2;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void setParent(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r0);

        return;
    }

    public final void add(java.util.List)
    {
        java.util.Iterator $r6;
        java.lang.IllegalArgumentException $r1;
        java.util.List $r4, r5;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.Object $r7;
        java.lang.String $r2, $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r5 := @parameter0: java.util.List;

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        if $r4 != null goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String NODE_ACTION_NOT_SUPPORTED>;

        $r3 = staticinvoke <org.apache.lucene.queryparser.flexible.messages.NLS: java.lang.String getLocalizedMessage(java.lang.String)>($r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r7;

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r8);

        goto label3;

     label4:
        return;
    }

    public boolean isLeaf()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf>;

        return $z0;
    }

    public final void set(java.util.List)
    {
        java.util.ResourceBundle $r1;
        java.lang.String $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r12, r13;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r7, $r8;
        java.lang.IllegalArgumentException $r4;
        java.util.List $r5, r6;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0, $r11;
        java.lang.Object $r2, $r9, $r10;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r6 := @parameter0: java.util.List;

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        if $r5 != null goto label2;

     label1:
        $r1 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>("org.apache.lucene.queryParser.messages.QueryParserMessages");

        $r2 = virtualinvoke $r1.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>("Q0008E.NODE_ACTION_NOT_SUPPORTED");

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label2:
        $r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r10;

        $r11 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl) r12;

        specialinvoke $r11.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void setParent(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(null);

        goto label3;

     label4:
        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void allocate()>();

        $r8 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r13 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r9;

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: void add(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r13);

        goto label5;

     label6:
        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree() throws java.lang.CloneNotSupportedException
    {
        java.util.Iterator $r7;
        java.util.ArrayList $r5;
        java.util.List $r4, $r6;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0, r2;
        java.lang.Object $r1, $r8;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r9, $r10;
        java.util.Hashtable $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl) $r1;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf>;

        r2.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf> = $z0;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r2.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags> = $r3;

        $r4 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        if $r4 == null goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r8;

        $r10 = interfaceinvoke r9.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        r2.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses> = $r5;

     label3:
        return r2;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode cloneTree()>();

        return $r1;
    }

    protected void setLeaf(boolean)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf> = z0;

        return;
    }

    public final java.util.List getChildren()
    {
        java.util.List $r1, $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $z0 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean isLeaf()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        if $r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.List clauses>;

        return $r2;
    }

    public void setTag(java.lang.String, java.lang.Object)
    {
        java.util.Locale $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.Object r5;
        java.lang.String r1, $r4;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r5);

        return;
    }

    public void unsetTag(java.lang.String)
    {
        java.util.Locale $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.String r1, $r4;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    public boolean containsTag(java.lang.String)
    {
        java.util.Locale $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.String r1, $r4;
        java.util.Hashtable $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z0 = virtualinvoke $r3.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r4);

        return $z0;
    }

    public java.lang.Object getTag(java.lang.String)
    {
        java.util.Locale $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.Object $r5;
        java.lang.String r1, $r4;
        java.util.Hashtable $r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r5 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r4);

        return $r5;
    }

    private void setParent(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode parent> = r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode parent>;

        return $r1;
    }

    protected boolean isRoot()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean isDefaultField(java.lang.CharSequence)
    {
        java.lang.CharSequence r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: boolean toQueryStringIgnoreFields>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 1;

     label2:
        $r2 = "_plain";

        $r3 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>(r1);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public java.util.Map getTagMap()
    {
        java.util.Map $r3;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        java.lang.Object $r2;
        java.util.Hashtable $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.util.Hashtable tags>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object clone()>();

        $r3 = (java.util.Map) $r2;

        return $r3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode clone()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.lucene.queryparser.flexible.core.nodes.QueryNodeImpl: java.lang.String PLAINTEXT_FIELD_NAME> = "_plain";

        return;
    }
}
