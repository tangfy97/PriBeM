public abstract class org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder extends org.codehaus.stax2.typed.TypedArrayDecoder
{
    protected static final int INITIAL_RESULT_BUFFER_SIZE;
    protected static final int SMALL_RESULT_BUFFER_SIZE;
    protected int mStart;
    protected int mEnd;
    protected int mCount;

    protected void <init>(int, int)
    {
        org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.codehaus.stax2.typed.TypedArrayDecoder: void <init>()>();

        r0.<org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int mCount> = 0;

        r0.<org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int mStart> = i0;

        if i1 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of elements to read can not be less than 1");

        throw $r1;

     label1:
        r0.<org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int mEnd> = i1;

        return;
    }

    public final int getCount()
    {
        int $i0;
        org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder r0;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder;

        $i0 = r0.<org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int mCount>;

        return $i0;
    }

    public final boolean hasRoom()
    {
        org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder;

        $i1 = r0.<org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int mCount>;

        $i0 = r0.<org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int mEnd>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract void expand();

    protected int calcNewSize(int)
    {
        org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder r0;
        int i0, $i1, $i2;

        r0 := @this: org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder;

        i0 := @parameter0: int;

        if i0 >= 4000 goto label1;

        $i2 = i0 << 2;

        return $i2;

     label1:
        $i1 = i0 + i0;

        return $i1;
    }

    public static void <clinit>()
    {
        <org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int SMALL_RESULT_BUFFER_SIZE> = 4000;

        <org.codehaus.stax2.ri.typed.ValueDecoderFactory$BaseArrayDecoder: int INITIAL_RESULT_BUFFER_SIZE> = 40;

        return;
    }
}
