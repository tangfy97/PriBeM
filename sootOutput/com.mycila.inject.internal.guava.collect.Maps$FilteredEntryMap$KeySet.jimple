class com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet extends java.util.AbstractSet
{
    final com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0;

    private void <init>(com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap)
    {
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap;

        r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r3;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r1;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet$1 $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $r2 = $r1.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: java.util.Set filteredEntrySet>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = new com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet$1;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet$1: void <init>(com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet,java.util.Iterator)>(r0, $r3);

        return $r4;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r1;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        int $i0;
        java.util.Set $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $r2 = $r1.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: java.util.Set filteredEntrySet>;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $r2 = $r1.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: java.util.Set filteredEntrySet>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r2;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r2, $r3;
        java.util.Map $r4;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $r4 = $r3.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: java.util.Map unfiltered>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return 1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r3;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r3 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z2 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: boolean remove(java.lang.Object)>($r2);

        z2 = z2 | $z1;

        goto label1;

     label2:
        return z2;
    }

    public boolean retainAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.base.Predicate $r10;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap $r2, $r9;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r1;
        java.util.Set $r4;
        java.util.Map $r3;
        java.lang.Object $r6, $r8;
        boolean $z0, $z1, $z2, z3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z3 = 0;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $r3 = $r2.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: java.util.Map unfiltered>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r8);

        if $z1 != 0 goto label2;

        $r9 = r1.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap this$0>;

        $r10 = $r9.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap: com.mycila.inject.internal.guava.base.Predicate predicate>;

        $z2 = interfaceinvoke $r10.<com.mycila.inject.internal.guava.base.Predicate: boolean apply(java.lang.Object)>(r7);

        if $z2 == 0 goto label2;

        interfaceinvoke $r5.<java.util.Iterator: void remove()>();

        z3 = 1;

     label2:
        goto label1;

     label3:
        return z3;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] $r3;
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        java.util.ArrayList $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r1);

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.lang.Object[] r3, $r4;
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        java.util.ArrayList $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r3 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: java.util.Iterator iterator()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>($r1);

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        return $r4;
    }

    void <init>(com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap, com.mycila.inject.internal.guava.collect.Maps$1)
    {
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet r0;
        com.mycila.inject.internal.guava.collect.Maps$1 r2;
        com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap;

        r2 := @parameter1: com.mycila.inject.internal.guava.collect.Maps$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap$KeySet: void <init>(com.mycila.inject.internal.guava.collect.Maps$FilteredEntryMap)>(r1);

        return;
    }
}
