public class org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl extends java.lang.Object implements org.waveprotocol.wave.model.wave.data.core.CoreWaveletData
{
    private static final org.waveprotocol.wave.model.document.operation.DocOp EMPTY_DOC_OP;
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final org.waveprotocol.wave.model.id.WaveletId waveletId;
    private final java.util.List participants;
    private final java.util.Map documents;

    public void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        org.waveprotocol.wave.model.id.WaveletId r1;
        java.util.HashMap $r4;
        java.lang.IllegalArgumentException $r5, $r6;
        java.util.ArrayList $r3;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r1 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("wavelet id cannot be null");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("wave id cannot be null");

        throw $r5;

     label2:
        r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.id.WaveletId waveletId> = r1;

        r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.id.WaveId waveId> = r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.List participants> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents> = $r4;

        return;
    }

    private org.waveprotocol.wave.model.document.operation.DocOp getOrCreateDocument(java.lang.String)
    {
        java.util.Map $r2, $r4;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        org.waveprotocol.wave.model.document.operation.DocOp r5;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (org.waveprotocol.wave.model.document.operation.DocOp) $r3;

        if r5 != null goto label1;

        r5 = <org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.document.operation.DocOp EMPTY_DOC_OP>;

        $r4 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5);

     label1:
        return r5;
    }

    public java.util.Map getDocuments()
    {
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.List getParticipants()
    {
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        java.util.List $r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.List participants>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveletName getWaveletName()
    {
        org.waveprotocol.wave.model.id.WaveletName $r3;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        org.waveprotocol.wave.model.id.WaveletId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r2, $r1);

        return $r3;
    }

    public boolean addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.List $r2, $r3;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.List participants>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.List participants>;

        $z1 = interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        return $z1;
    }

    public boolean removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.List $r2;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.List participants>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean modifyDocument(java.lang.String, org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r2, r3, $r4, $r5;
        java.util.Map $r7, $r8;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.operation.OpComparators$OpEquator $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOp;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.document.operation.DocOp getOrCreateDocument(java.lang.String)>(r1);

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r2, r3);

        $r6 = <org.waveprotocol.wave.model.operation.OpComparators: org.waveprotocol.wave.model.operation.OpComparators$OpEquator SYNTACTIC_IDENTITY>;

        $r5 = <org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.document.operation.DocOp EMPTY_DOC_OP>;

        $z0 = interfaceinvoke $r6.<org.waveprotocol.wave.model.operation.OpComparators$OpEquator: boolean equal(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r4, $r5);

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r7 = r0.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label2:
        return 1;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.id.WaveId $r3;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        java.util.Map $r9;
        org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8, $r10;
        java.lang.String $r11;

        r2 := @this: org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wavelet State = ");

        $r3 = r2.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = r2.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = r2.<org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: java.util.Map documents>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r1;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r0;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        <org.waveprotocol.wave.model.wave.data.core.impl.CoreWaveletDataImpl: org.waveprotocol.wave.model.document.operation.DocOp EMPTY_DOC_OP> = $r1;

        return;
    }
}
