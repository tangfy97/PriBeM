class com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1 extends java.lang.Object implements java.util.concurrent.Callable
{
    final com.google.inject.Provider val$unscoped;

    void <init>(com.google.inject.Provider)
    {
        com.google.inject.Provider r1;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1 r0;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1;

        r1 := @parameter0: com.google.inject.Provider;

        r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1: com.google.inject.Provider val$unscoped> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call() throws java.lang.Exception
    {
        com.google.inject.Provider $r1;
        java.lang.Object $r2;
        com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1 r0;

        r0 := @this: com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1;

        $r1 = r0.<com.mycila.inject.scope.ConcurrentSingleton$FutureProvider$1: com.google.inject.Provider val$unscoped>;

        $r2 = interfaceinvoke $r1.<com.google.inject.Provider: java.lang.Object get()>();

        return $r2;
    }
}
