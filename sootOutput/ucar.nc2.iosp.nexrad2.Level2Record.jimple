public class ucar.nc2.iosp.nexrad2.Level2Record extends java.lang.Object
{
    public static final int REFLECTIVITY;
    public static final int VELOCITY_HI;
    public static final int VELOCITY_LOW;
    public static final int SPECTRUM_WIDTH;
    public static final int DOPPLER_RESOLUTION_LOW_CODE;
    public static final int DOPPLER_RESOLUTION_HIGH_CODE;
    public static final float HORIZONTAL_BEAM_WIDTH;
    public static final int REFLECTIVITY_HIGH;
    public static final int VELOCITY_HIGH;
    public static final int SPECTRUM_WIDTH_HIGH;
    public static final int DIFF_REFLECTIVITY_HIGH;
    public static final int DIFF_PHASE;
    public static final int CORRELATION_COEFFICIENT;
    public static final byte MISSING_DATA;
    public static final byte BELOW_THRESHOLD;
    static final int FILE_HEADER_SIZE;
    private static final int CTM_HEADER_SIZE;
    private static final int MESSAGE_HEADER_SIZE;
    private static final int RADAR_DATA_SIZE;
    private static org.slf4j.Logger logger;
    int recno;
    long message_offset;
    boolean hasReflectData;
    boolean hasDopplerData;
    boolean hasHighResREFData;
    boolean hasHighResVELData;
    boolean hasHighResSWData;
    boolean hasHighResZDRData;
    boolean hasHighResPHIData;
    boolean hasHighResRHOData;
    short message_size;
    byte id_channel;
    public byte message_type;
    short id_sequence;
    short mess_julian_date;
    int mess_msecs;
    short seg_count;
    short seg_number;
    int data_msecs;
    short data_julian_date;
    short unamb_range;
    int azimuth_ang;
    short radial_num;
    short radial_status;
    short elevation_ang;
    short elevation_num;
    short reflect_first_gate;
    short reflect_gate_size;
    short reflect_gate_count;
    short doppler_first_gate;
    short doppler_gate_size;
    short doppler_gate_count;
    short cut;
    float calibration;
    short resolution;
    short vcp;
    short nyquist_vel;
    short attenuation;
    short threshhold;
    short ref_snr_threshold;
    short vel_snr_threshold;
    short sw_snr_threshold;
    short zdrHR_snr_threshold;
    short phiHR_snr_threshold;
    short rhoHR_snr_threshold;
    short ref_rf_threshold;
    short vel_rf_threshold;
    short sw_rf_threshold;
    short zdrHR_rf_threshold;
    short phiHR_rf_threshold;
    short rhoHR_rf_threshold;
    private short reflect_offset;
    private short velocity_offset;
    private short spectWidth_offset;
    short rlength;
    java.lang.String id;
    float azimuth;
    byte compressIdx;
    byte sp;
    byte ars;
    byte rs;
    float elevation;
    byte rsbs;
    byte aim;
    short dcount;
    int dbp1;
    int dbp2;
    int dbp3;
    int dbp4;
    int dbp5;
    int dbp6;
    int dbp7;
    int dbp8;
    int dbp9;
    short reflectHR_gate_count;
    short velocityHR_gate_count;
    short spectrumHR_gate_count;
    float reflectHR_scale;
    float velocityHR_scale;
    float spectrumHR_scale;
    float zdrHR_scale;
    float phiHR_scale;
    float rhoHR_scale;
    float reflectHR_addoffset;
    float velocityHR_addoffset;
    float spectrumHR_addoffset;
    float zdrHR_addoffset;
    float phiHR_addoffset;
    float rhoHR_addoffset;
    short reflectHR_offset;
    short velocityHR_offset;
    short spectrumHR_offset;
    short zdrHR_offset;
    short phiHR_offset;
    short rhoHR_offset;
    short zdrHR_gate_count;
    short phiHR_gate_count;
    short rhoHR_gate_count;
    short reflectHR_gate_size;
    short velocityHR_gate_size;
    short spectrumHR_gate_size;
    short zdrHR_gate_size;
    short phiHR_gate_size;
    short rhoHR_gate_size;
    short reflectHR_first_gate;
    short velocityHR_first_gate;
    short spectrumHR_first_gate;
    short zdrHR_first_gate;
    short phiHR_first_gate;
    short rhoHR_first_gate;

    public static java.lang.String getDatatypeName(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label09;
            default: goto label10;
        };

     label01:
        return "Reflectivity";

     label02:
        return "RadialVelocity";

     label03:
        return "SpectrumWidth";

     label04:
        return "Reflectivity_HI";

     label05:
        return "RadialVelocity_HI";

     label06:
        return "SpectrumWidth_HI";

     label07:
        return "Reflectivity_DIFF";

     label08:
        return "Phase";

     label09:
        return "RHO";

     label10:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static java.lang.String getDatatypeUnits(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label5;
            case 7: goto label5;
            case 8: goto label4;
            case 9: goto label6;
            case 10: goto label7;
            default: goto label8;
        };

     label1:
        return "dBz";

     label2:
        return "m/s";

     label3:
        return "dBz";

     label4:
        return "dBz";

     label5:
        return "m/s";

     label6:
        return "deg";

     label7:
        return "N/A";

     label8:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public short getDatatypeSNRThreshhold(int)
    {
        java.lang.IllegalArgumentException $r1;
        short $s1, $s2, $s3, $s4, $s5, $s6;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label4;
            case 9: goto label5;
            case 10: goto label6;
            default: goto label7;
        };

     label1:
        $s6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short ref_snr_threshold>;

        return $s6;

     label2:
        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vel_snr_threshold>;

        return $s5;

     label3:
        $s4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short sw_snr_threshold>;

        return $s4;

     label4:
        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_snr_threshold>;

        return $s3;

     label5:
        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_snr_threshold>;

        return $s2;

     label6:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_snr_threshold>;

        return $s1;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public short getDatatypeRangeFoldingThreshhold(int)
    {
        java.lang.IllegalArgumentException $r1;
        short $s1, $s2, $s3, $s4, $s5, $s6, $s7;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label5;
            case 9: goto label6;
            case 10: goto label7;
            default: goto label8;
        };

     label1:
        $s6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short ref_rf_threshold>;

        return $s6;

     label2:
        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vel_rf_threshold>;

        return $s5;

     label3:
        $s4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short sw_rf_threshold>;

        return $s4;

     label4:
        $s7 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short threshhold>;

        return $s7;

     label5:
        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_rf_threshold>;

        return $s3;

     label6:
        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_rf_threshold>;

        return $s2;

     label7:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_rf_threshold>;

        return $s1;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public float getDatatypeScaleFactor(int)
    {
        java.lang.IllegalArgumentException $r1;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label09;
            default: goto label10;
        };

     label01:
        return 0.5F;

     label02:
        return 1.0F;

     label03:
        return 0.5F;

     label04:
        $f10 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_scale>;

        $f11 = 1.0F / $f10;

        return $f11;

     label05:
        $f8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_scale>;

        $f9 = 1.0F / $f8;

        return $f9;

     label06:
        $f6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_scale>;

        $f7 = 1.0F / $f6;

        return $f7;

     label07:
        $f4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_scale>;

        $f5 = 1.0F / $f4;

        return $f5;

     label08:
        $f2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_scale>;

        $f3 = 1.0F / $f2;

        return $f3;

     label09:
        $f0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_scale>;

        $f1 = 1.0F / $f0;

        return $f1;

     label10:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public float getDatatypeAddOffset(int)
    {
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label09;
            default: goto label10;
        };

     label01:
        return -33.0F;

     label02:
        return -129.0F;

     label03:
        return -64.5F;

     label04:
        $f20 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_addoffset>;

        $f22 = $f20 * -1.0F;

        $f21 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_scale>;

        $f23 = $f22 / $f21;

        return $f23;

     label05:
        $f16 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_addoffset>;

        $f18 = $f16 * -1.0F;

        $f17 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_scale>;

        $f19 = $f18 / $f17;

        return $f19;

     label06:
        $f12 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_addoffset>;

        $f14 = $f12 * -1.0F;

        $f13 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_scale>;

        $f15 = $f14 / $f13;

        return $f15;

     label07:
        $f8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_addoffset>;

        $f10 = $f8 * -1.0F;

        $f9 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_scale>;

        $f11 = $f10 / $f9;

        return $f11;

     label08:
        $f4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_addoffset>;

        $f6 = $f4 * -1.0F;

        $f5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_scale>;

        $f7 = $f6 / $f5;

        return $f7;

     label09:
        $f0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_addoffset>;

        $f2 = $f0 * -1.0F;

        $f1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_scale>;

        $f3 = $f2 / $f1;

        return $f3;

     label10:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static java.lang.String getMessageTypeName(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label15;
            case 16: goto label18;
            case 17: goto label18;
            case 18: goto label16;
            case 19: goto label18;
            case 20: goto label18;
            case 21: goto label18;
            case 22: goto label18;
            case 23: goto label18;
            case 24: goto label18;
            case 25: goto label18;
            case 26: goto label18;
            case 27: goto label18;
            case 28: goto label18;
            case 29: goto label18;
            case 30: goto label18;
            case 31: goto label17;
            default: goto label18;
        };

     label01:
        return "digital radar data";

     label02:
        return "RDA status data";

     label03:
        return "performance/maintainence data";

     label04:
        return "console message - RDA to RPG";

     label05:
        return "maintainence log data";

     label06:
        return "RDA control ocmmands";

     label07:
        return "volume coverage pattern";

     label08:
        return "clutter censor zones";

     label09:
        return "request for data";

     label10:
        return "console message - RPG to RDA";

     label11:
        return "loop back test - RDA to RPG";

     label12:
        return "loop back test - RPG to RDA";

     label13:
        return "clutter filter bypass map - RDA to RPG";

     label14:
        return "edited clutter filter bypass map - RDA to RPG";

     label15:
        return "Notchwidth Map";

     label16:
        return "RDA Adaptation data";

     label17:
        return "Digitail Radar Data Generic Format";

     label18:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getRadialStatusName(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label1:
        return "start of new elevation";

     label2:
        return "intermediate radial";

     label3:
        return "end of elevation";

     label4:
        return "begin volume scan";

     label5:
        return "end volume scan";

     label6:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getVolumeCoveragePatternName(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 11: goto label01;
            case 12: goto label02;
            case 21: goto label03;
            case 31: goto label04;
            case 32: goto label05;
            case 121: goto label06;
            case 211: goto label07;
            case 212: goto label08;
            case 221: goto label09;
            default: goto label10;
        };

     label01:
        return "16 elevation scans every 5 mins";

     label02:
        return "14 elevation scan every 4.1 mins";

     label03:
        return "11 elevation scans every 6 mins";

     label04:
        return "8 elevation scans every 10 mins";

     label05:
        return "7 elevation scans every 10 mins";

     label06:
        return "9 elevations, 20 scans every 5 minutes";

     label07:
        return "14 elevations, 16 scans every 5 mins";

     label08:
        return "14 elevations, 17 scans every 4 mins";

     label09:
        return "9 elevations, 11 scans every 5 minutes";

     label10:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Date getDate(int, int)
    {
        java.util.Date $r0;
        long $l2, $l3, $l4, $l6, $l7, l8;
        int i0, $i1, i5;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = i0 - 1;

        $l2 = (long) $i1;

        $l3 = $l2 * 24L;

        $l4 = $l3 * 3600L;

        $l7 = $l4 * 1000L;

        $l6 = (long) i5;

        l8 = $l7 + $l6;

        $r0 = new java.util.Date;

        specialinvoke $r0.<java.util.Date: void <init>(long)>(l8);

        return $r0;
    }

    public static ucar.nc2.iosp.nexrad2.Level2Record factory(ucar.unidata.io.RandomAccessFile, int, long) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r0;
        long l3, $l4, l5, $l6;
        byte $b7;
        ucar.nc2.iosp.nexrad2.Level2Record $r2;
        int i0, $i1, $i2, $i8;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

        i0 := @parameter1: int;

        l3 := @parameter2: long;

        $i1 = i0 * 2432;

        $i2 = $i1 + 24;

        $l4 = (long) $i2;

        l5 = $l4 + l3;

        $l6 = virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: long length()>();

        $b7 = l5 cmp $l6;

        $i8 = (int) $b7;

        if $i8 < 0 goto label1;

        return null;

     label1:
        $r2 = new ucar.nc2.iosp.nexrad2.Level2Record;

        specialinvoke $r2.<ucar.nc2.iosp.nexrad2.Level2Record: void <init>(ucar.unidata.io.RandomAccessFile,int,long)>(r0, i0, l3);

        return $r2;
    }

    public void <init>(ucar.unidata.io.RandomAccessFile, int, long) throws java.io.IOException
    {
        byte $b8, $b9, $b15, $b16, $b20, $b21, $b23, $b24, $b25, $b27, $b29, $b30;
        long l3, $l4, $l5, $l6;
        short $s7, $s10, $s11, $s13, $s14, $s18, $s19, $s22, $s26, $s28, $s31, $s42, $s43, $s45, $s46, $s47, $s48, $s49, $s50, $s51, $s52, $s53, $s54, $s55, $s56, $s58, $s59, $s60, $s61, $s62, $s63, $s64, $s65, $s66, $s67, $s68, $s69, $s70, $s72, $s73, $s74, $s75, $s76, $s77, $s78, $s79, $s80, $s81, $s82, $s83, $s84, $s86, $s87, $s88, $s89, $s90, $s91, $s92, $s93, $s94, $s95, $s96, $s97, $s98, $s100, $s101, $s102, $s103, $s104, $s105, $s106, $s107, $s108, $s109, $s110, $s111, $s112, $s114, $s115, $s116, $s117, $s118, $s119, $s120, $s121, $s122, $s123, $s124, $s125, $s126, $s128, $s130, $s132, $s134, $s136, $s138, $s140, $s142, $s143, $s145, $s146, $s147, $s148, $s149, $s150, $s151, $s152, $s153, $s154, $s155, $s156, $s157, $s158, $s159, $s160, $s161, $s162, $s163, $s164, $s165;
        int i0, $i1, $i2, $i12, $i17, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i44, $i57, $i71, $i85, $i99, $i113, $i127, $i129, $i131, $i133, $i135, $i137, $i139, $i141, $i144, i166, i167, i168, i169, i170, i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179;
        java.io.PrintStream $r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.String $r2, $r3, $r5, $r7, $r9, $r11, $r13;
        ucar.unidata.io.RandomAccessFile r1;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        i0 := @parameter1: int;

        l3 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short message_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte id_channel> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short id_sequence> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short mess_julian_date> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int mess_msecs> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_number> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short unamb_range> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int azimuth_ang> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_status> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_ang> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_num> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short cut> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float calibration> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short resolution> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vcp> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rlength> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_scale> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_scale> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_scale> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_scale> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_scale> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_scale> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_addoffset> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_addoffset> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_addoffset> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_addoffset> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_addoffset> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_addoffset> = 0.0F;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_offset> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_offset> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_offset> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_offset> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_offset> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_offset> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_gate_count> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_gate_size> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_first_gate> = 0;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno> = i0;

        $i1 = i0 * 2432;

        $i2 = $i1 + 24;

        $l4 = (long) $i2;

        $l5 = $l4 + l3;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset> = $l5;

        $l6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>($l6);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(12);

        $s7 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short message_size> = $s7;

        $b8 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte id_channel> = $b8;

        $b9 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type> = $b9;

        $s10 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short id_sequence> = $s10;

        $s11 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short mess_julian_date> = $s11;

        $i12 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int mess_msecs> = $i12;

        $s13 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_count> = $s13;

        $s14 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_number> = $s14;

        $b15 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        if $b15 != 1 goto label05;

        $i141 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs> = $i141;

        $s142 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date> = $s142;

        $s143 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short unamb_range> = $s143;

        $i144 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readUnsignedShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int azimuth_ang> = $i144;

        $s145 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num> = $s145;

        $s146 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_status> = $s146;

        $s147 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_ang> = $s147;

        $s148 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_num> = $s148;

        $s149 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_first_gate> = $s149;

        $s150 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_first_gate> = $s150;

        $s151 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_size> = $s151;

        $s152 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_size> = $s152;

        $s153 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_count> = $s153;

        $s154 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_count> = $s154;

        $s155 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short cut> = $s155;

        $f14 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: float readFloat()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float calibration> = $f14;

        $s156 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset> = $s156;

        $s157 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset> = $s157;

        $s158 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset> = $s158;

        $s159 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short resolution> = $s159;

        $s160 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vcp> = $s160;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(14);

        $s161 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short nyquist_vel> = $s161;

        $s162 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short attenuation> = $s162;

        $s163 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short threshhold> = $s163;

        $s164 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_count>;

        $i177 = (int) $s164;

        if $i177 <= 0 goto label01;

        $z41 = 1;

        goto label02;

     label01:
        $z41 = 0;

     label02:
        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasReflectData> = $z41;

        $s165 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_count>;

        $i178 = (int) $s165;

        if $i178 <= 0 goto label03;

        $z42 = 1;

        goto label04;

     label03:
        $z42 = 0;

     label04:
        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasDopplerData> = $z42;

        return;

     label05:
        $b16 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i179 = (int) $b16;

        if $i179 != 31 goto label54;

        $r2 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: java.lang.String readString(int)>(4);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String id> = $r2;

        $i17 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs> = $i17;

        $s18 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date> = $s18;

        $s19 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num> = $s19;

        $f0 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: float readFloat()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float azimuth> = $f0;

        $b20 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte compressIdx> = $b20;

        $b21 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte sp> = $b21;

        $s22 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rlength> = $s22;

        $b23 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte ars> = $b23;

        $b24 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte rs> = $b24;

        $b25 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $s26 = (short) $b25;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_num> = $s26;

        $b27 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        $s28 = (short) $b27;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short cut> = $s28;

        $f1 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: float readFloat()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float elevation> = $f1;

        $b29 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte rsbs> = $b29;

        $b30 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: byte readByte()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte aim> = $b30;

        $s31 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short dcount> = $s31;

        $i32 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp1> = $i32;

        $i33 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp2> = $i33;

        $i34 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp3> = $i34;

        $i35 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4> = $i35;

        $i36 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5> = $i36;

        $i37 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6> = $i37;

        $i38 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7> = $i38;

        $i39 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8> = $i39;

        $i40 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int readInt()>();

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9> = $i40;

        $i41 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp1>;

        $s42 = (short) $i41;

        $s43 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s42, 40);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vcp> = $s43;

        i166 = 0;

        i167 = 0;

        i168 = 0;

        i169 = 0;

        i170 = 0;

        i171 = 0;

        $i44 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        if $i44 <= 0 goto label12;

        $i139 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        $s140 = (short) $i139;

        $r13 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile,short,int,int)>(r1, $s140, 1, 3);

        $z35 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("REF");

        if $z35 == 0 goto label06;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData> = 1;

        i166 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        goto label12;

     label06:
        $z36 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("VEL");

        if $z36 == 0 goto label07;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData> = 1;

        i167 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        goto label12;

     label07:
        $z37 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("SW");

        if $z37 == 0 goto label08;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData> = 1;

        i168 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        goto label12;

     label08:
        $z38 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("ZDR");

        if $z38 == 0 goto label09;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData> = 1;

        i169 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        goto label12;

     label09:
        $z39 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("PHI");

        if $z39 == 0 goto label10;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData> = 1;

        i170 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        goto label12;

     label10:
        $z40 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>("RHO");

        if $z40 == 0 goto label11;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData> = 1;

        i171 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp4>;

        goto label12;

     label11:
        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("Missing radial product");

     label12:
        $i172 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        if $i172 <= 0 goto label19;

        $i137 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        $s138 = (short) $i137;

        $r11 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile,short,int,int)>(r1, $s138, 1, 3);

        $z29 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("REF");

        if $z29 == 0 goto label13;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData> = 1;

        i166 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        goto label19;

     label13:
        $z30 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("VEL");

        if $z30 == 0 goto label14;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData> = 1;

        i167 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        goto label19;

     label14:
        $z31 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("SW");

        if $z31 == 0 goto label15;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData> = 1;

        i168 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        goto label19;

     label15:
        $z32 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("ZDR");

        if $z32 == 0 goto label16;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData> = 1;

        i169 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        goto label19;

     label16:
        $z33 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("PHI");

        if $z33 == 0 goto label17;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData> = 1;

        i170 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        goto label19;

     label17:
        $z34 = virtualinvoke $r11.<java.lang.String: boolean startsWith(java.lang.String)>("RHO");

        if $z34 == 0 goto label18;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData> = 1;

        i171 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp5>;

        goto label19;

     label18:
        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("Missing radial product");

     label19:
        $i173 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        if $i173 <= 0 goto label26;

        $i135 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        $s136 = (short) $i135;

        $r9 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile,short,int,int)>(r1, $s136, 1, 3);

        $z23 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("REF");

        if $z23 == 0 goto label20;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData> = 1;

        i166 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        goto label26;

     label20:
        $z24 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("VEL");

        if $z24 == 0 goto label21;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData> = 1;

        i167 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        goto label26;

     label21:
        $z25 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("SW");

        if $z25 == 0 goto label22;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData> = 1;

        i168 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        goto label26;

     label22:
        $z26 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("ZDR");

        if $z26 == 0 goto label23;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData> = 1;

        i169 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        goto label26;

     label23:
        $z27 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("PHI");

        if $z27 == 0 goto label24;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData> = 1;

        i170 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        goto label26;

     label24:
        $z28 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("RHO");

        if $z28 == 0 goto label25;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData> = 1;

        i171 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp6>;

        goto label26;

     label25:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Missing radial product");

     label26:
        $i174 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        if $i174 <= 0 goto label33;

        $i133 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        $s134 = (short) $i133;

        $r7 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile,short,int,int)>(r1, $s134, 1, 3);

        $z17 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("REF");

        if $z17 == 0 goto label27;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData> = 1;

        i166 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        goto label33;

     label27:
        $z18 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("VEL");

        if $z18 == 0 goto label28;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData> = 1;

        i167 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        goto label33;

     label28:
        $z19 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("SW");

        if $z19 == 0 goto label29;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData> = 1;

        i168 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        goto label33;

     label29:
        $z20 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("ZDR");

        if $z20 == 0 goto label30;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData> = 1;

        i169 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        goto label33;

     label30:
        $z21 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("PHI");

        if $z21 == 0 goto label31;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData> = 1;

        i170 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        goto label33;

     label31:
        $z22 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("RHO");

        if $z22 == 0 goto label32;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData> = 1;

        i171 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp7>;

        goto label33;

     label32:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Missing radial product");

     label33:
        $i175 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        if $i175 <= 0 goto label40;

        $i131 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        $s132 = (short) $i131;

        $r5 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile,short,int,int)>(r1, $s132, 1, 3);

        $z11 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("REF");

        if $z11 == 0 goto label34;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData> = 1;

        i166 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        goto label40;

     label34:
        $z12 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("VEL");

        if $z12 == 0 goto label35;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData> = 1;

        i167 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        goto label40;

     label35:
        $z13 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("SW");

        if $z13 == 0 goto label36;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData> = 1;

        i168 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        goto label40;

     label36:
        $z14 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("ZDR");

        if $z14 == 0 goto label37;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData> = 1;

        i169 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        goto label40;

     label37:
        $z15 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("PHI");

        if $z15 == 0 goto label38;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData> = 1;

        i170 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        goto label40;

     label38:
        $z16 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("RHO");

        if $z16 == 0 goto label39;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData> = 1;

        i171 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp8>;

        goto label40;

     label39:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Missing radial product");

     label40:
        $i176 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        if $i176 <= 0 goto label47;

        $i129 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        $s130 = (short) $i129;

        $r3 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile,short,int,int)>(r1, $s130, 1, 3);

        $z5 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("REF");

        if $z5 == 0 goto label41;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData> = 1;

        i166 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        goto label47;

     label41:
        $z6 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("VEL");

        if $z6 == 0 goto label42;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData> = 1;

        i167 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        goto label47;

     label42:
        $z7 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("SW");

        if $z7 == 0 goto label43;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData> = 1;

        i168 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        goto label47;

     label43:
        $z8 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("ZDR");

        if $z8 == 0 goto label44;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData> = 1;

        i169 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        goto label47;

     label44:
        $z9 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("PHI");

        if $z9 == 0 goto label45;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData> = 1;

        i170 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        goto label47;

     label45:
        $z10 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("RHO");

        if $z10 == 0 goto label46;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData> = 1;

        i171 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int dbp9>;

        goto label47;

     label46:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Missing radial product");

     label47:
        $z43 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResREFData>;

        if $z43 == 0 goto label48;

        $s115 = (short) i166;

        $s116 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s115, 8);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_gate_count> = $s116;

        $s117 = (short) i166;

        $s118 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s117, 10);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_first_gate> = $s118;

        $s119 = (short) i166;

        $s120 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s119, 12);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_gate_size> = $s120;

        $s121 = (short) i166;

        $s122 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s121, 14);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short ref_rf_threshold> = $s122;

        $s123 = (short) i166;

        $s124 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s123, 16);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short ref_snr_threshold> = $s124;

        $s125 = (short) i166;

        $f12 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s125, 20);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_scale> = $f12;

        $s126 = (short) i166;

        $f13 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s126, 24);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float reflectHR_addoffset> = $f13;

        $i127 = i166 + 28;

        $s128 = (short) $i127;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_offset> = $s128;

     label48:
        $z0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResVELData>;

        if $z0 == 0 goto label49;

        $s101 = (short) i167;

        $s102 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s101, 8);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_gate_count> = $s102;

        $s103 = (short) i167;

        $s104 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s103, 10);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_first_gate> = $s104;

        $s105 = (short) i167;

        $s106 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s105, 12);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_gate_size> = $s106;

        $s107 = (short) i167;

        $s108 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s107, 14);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vel_rf_threshold> = $s108;

        $s109 = (short) i167;

        $s110 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s109, 16);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short vel_snr_threshold> = $s110;

        $s111 = (short) i167;

        $f10 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s111, 20);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_scale> = $f10;

        $s112 = (short) i167;

        $f11 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s112, 24);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float velocityHR_addoffset> = $f11;

        $i113 = i167 + 28;

        $s114 = (short) $i113;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_offset> = $s114;

     label49:
        $z1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResSWData>;

        if $z1 == 0 goto label50;

        $s87 = (short) i168;

        $s88 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s87, 8);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_gate_count> = $s88;

        $s89 = (short) i168;

        $s90 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s89, 10);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_first_gate> = $s90;

        $s91 = (short) i168;

        $s92 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s91, 12);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_gate_size> = $s92;

        $s93 = (short) i168;

        $s94 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s93, 14);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short sw_rf_threshold> = $s94;

        $s95 = (short) i168;

        $s96 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s95, 16);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short sw_snr_threshold> = $s96;

        $s97 = (short) i168;

        $f8 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s97, 20);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_scale> = $f8;

        $s98 = (short) i168;

        $f9 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s98, 24);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float spectrumHR_addoffset> = $f9;

        $i99 = i168 + 28;

        $s100 = (short) $i99;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_offset> = $s100;

     label50:
        $z2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResZDRData>;

        if $z2 == 0 goto label51;

        $s73 = (short) i169;

        $s74 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s73, 8);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_gate_count> = $s74;

        $s75 = (short) i169;

        $s76 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s75, 10);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_first_gate> = $s76;

        $s77 = (short) i169;

        $s78 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s77, 12);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_gate_size> = $s78;

        $s79 = (short) i169;

        $s80 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s79, 14);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_rf_threshold> = $s80;

        $s81 = (short) i169;

        $s82 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s81, 16);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_snr_threshold> = $s82;

        $s83 = (short) i169;

        $f6 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s83, 20);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_scale> = $f6;

        $s84 = (short) i169;

        $f7 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s84, 24);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float zdrHR_addoffset> = $f7;

        $i85 = i169 + 28;

        $s86 = (short) $i85;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_offset> = $s86;

     label51:
        $z3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResPHIData>;

        if $z3 == 0 goto label52;

        $s59 = (short) i170;

        $s60 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s59, 8);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_gate_count> = $s60;

        $s61 = (short) i170;

        $s62 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s61, 10);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_first_gate> = $s62;

        $s63 = (short) i170;

        $s64 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s63, 12);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_gate_size> = $s64;

        $s65 = (short) i170;

        $s66 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s65, 14);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_rf_threshold> = $s66;

        $s67 = (short) i170;

        $s68 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s67, 16);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_snr_threshold> = $s68;

        $s69 = (short) i170;

        $f4 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s69, 20);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_scale> = $f4;

        $s70 = (short) i170;

        $f5 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s70, 24);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float phiHR_addoffset> = $f5;

        $i71 = i170 + 28;

        $s72 = (short) $i71;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_offset> = $s72;

     label52:
        $z4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasHighResRHOData>;

        if $z4 == 0 goto label53;

        $s45 = (short) i171;

        $s46 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s45, 8);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_gate_count> = $s46;

        $s47 = (short) i171;

        $s48 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s47, 10);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_first_gate> = $s48;

        $s49 = (short) i171;

        $s50 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s49, 12);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_gate_size> = $s50;

        $s51 = (short) i171;

        $s52 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s51, 14);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_rf_threshold> = $s52;

        $s53 = (short) i171;

        $s54 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataBlockValue(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s53, 16);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_snr_threshold> = $s54;

        $s55 = (short) i171;

        $f2 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s55, 20);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_scale> = $f2;

        $s56 = (short) i171;

        $f3 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getDataBlockValue1(ucar.unidata.io.RandomAccessFile,short,int)>(r1, $s56, 24);

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: float rhoHR_addoffset> = $f3;

        $i57 = i171 + 28;

        $s58 = (short) $i57;

        r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_offset> = $s58;

     label53:
        return;

     label54:
        return;
    }

    public void dumpMessage(java.io.PrintStream)
    {
        byte $b1, $b2;
        ucar.nc2.iosp.nexrad2.Level2Record r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24;
        short $s3, $s4, $s5;
        int $i0, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r5, $r8, $r13, $r21;
        java.io.PrintStream r0;

        r2 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r0 := @parameter0: java.io.PrintStream;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $i0 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r3 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ---------------------");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message type = ");

        $b1 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i6 = (int) $b1;

        $r8 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getMessageTypeName(int)>($i6);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $b2 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i7 = (int) $b2;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r13);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message size = ");

        $s3 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short message_size>;

        $i8 = (int) $s3;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segment=");

        $s4 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_number>;

        $i9 = (int) $s4;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $s5 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_count>;

        $i10 = (int) $s5;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r21);

        return;
    }

    public void dump(java.io.PrintStream)
    {
        byte $b2;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r10, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r30, $r31, $r32, $r34, $r35, $r36, $r39, $r40, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r50, $r51, $r52, $r55, $r56, $r57, $r58, $r59, $r60, $r63, $r64, $r65, $r66, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77;
        long $l1;
        short $s3, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19;
        java.lang.String $r6, $r9, $r11, $r17, $r24, $r28, $r33, $r37, $r45, $r53, $r61, $r67;
        ucar.nc2.iosp.nexrad2.Level2Record r2;
        float $f0, $f1, $f2, $f3, $f4;
        int $i0, $i4, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        java.io.PrintStream r0;

        r2 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r0 := @parameter0: java.io.PrintStream;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $i0 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r3 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ------------------------------------------");

        $l1 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message type = ");

        $b2 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i20 = (int) $b2;

        $r9 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getMessageTypeName(int)>($i20);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r11);

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data date = ");

        $s3 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date>;

        $i21 = (int) $s3;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $i4 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r17);

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" elevation = ");

        $f0 = virtualinvoke r2.<ucar.nc2.iosp.nexrad2.Level2Record: float getElevation()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $s5 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_num>;

        $i22 = (int) $s5;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" azimuth = ");

        $f1 = virtualinvoke r2.<ucar.nc2.iosp.nexrad2.Level2Record: float getAzimuth()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r28);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" radial = ");

        $s6 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num>;

        $i23 = (int) $s6;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" status= ");

        $s7 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_status>;

        $i24 = (int) $s7;

        $r33 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getRadialStatusName(int)>($i24);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ratio = ");

        $f2 = virtualinvoke r2.<ucar.nc2.iosp.nexrad2.Level2Record: float getAzimuth()>();

        $s8 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num>;

        $f3 = (float) $s8;

        $f4 = $f2 / $f3;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r37);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reflectivity first= ");

        $s9 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_first_gate>;

        $i25 = (int) $s9;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size= ");

        $s10 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_size>;

        $i26 = (int) $s10;

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count= ");

        $s11 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_count>;

        $i27 = (int) $s11;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r45);

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doppler first= ");

        $s12 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_first_gate>;

        $i28 = (int) $s12;

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size= ");

        $s13 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_size>;

        $i29 = (int) $s13;

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count= ");

        $s14 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_count>;

        $i30 = (int) $s14;

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r53);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offset: reflect= ");

        $s15 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        $i31 = (int) $s15;

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" velocity= ");

        $s16 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i32 = (int) $s16;

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" spWidth= ");

        $s17 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        $i33 = (int) $s17;

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i33);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r61);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pattern = ");

        $s18 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short vcp>;

        $i34 = (int) $s18;

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i34);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cut= ");

        $s19 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short cut>;

        $i35 = (int) $s19;

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r67);

        return;
    }

    public void dump2(java.io.PrintStream)
    {
        java.io.PrintStream r0;
        short $s2;
        byte $b1;
        ucar.nc2.iosp.nexrad2.Level2Record r3;
        int $i0, $i3, $i4;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8, $r10;
        java.lang.String $r9;

        r3 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r0 := @parameter0: java.io.PrintStream;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("recno= ");

        $i0 = r3.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" massType= ");

        $b1 = r3.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i3 = (int) $b1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" massSize = ");

        $s2 = r3.<ucar.nc2.iosp.nexrad2.Level2Record: short message_size>;

        $i4 = (int) $s2;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    public boolean checkOk()
    {
        byte $b0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r12, $r13, $r14, $r15, $r17, $r21, $r22, $r23, $r24, $r26, $r30, $r31, $r32, $r33, $r35, $r39, $r41, $r45, $r46, $r47, $r48, $r50, $r51, $r52, $r53, $r54, $r55, $r59, $r60, $r61, $r63, $r67, $r68, $r69, $r71, $r75, $r76, $r77, $r78, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88;
        short $s1, $s2, $s3, $s5, $s7, $s9, $s10, $s12, $s14, $s16, $s18, $s19, $s20, $s21, $s24, $s25, $s26, $s27, $s28, $s29, $s30;
        int $i4, $i6, $i8, $i11, $i13, $i15, $i17, $i22, $i23, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49;
        org.slf4j.Logger $r2, $r11, $r20, $r29, $r38, $r44, $r58, $r66, $r74;
        java.lang.String $r7, $r9, $r16, $r18, $r25, $r27, $r34, $r36, $r40, $r42, $r49, $r56, $r62, $r64, $r70, $r72, $r79;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        boolean $z0, $z1, $z2, z3, z4, z5;
        float $f0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        z3 = 1;

        z5 = 1;

        z4 = 1;

        $f0 = virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: float getAzimuth()>();

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z0 == 0 goto label01;

        $r74 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i22 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad azimuth value = ");

        $i23 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int azimuth_ang>;

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r74.<org.slf4j.Logger: void warn(java.lang.String)>($r79);

        z3 = 0;

        z5 = 0;

        z4 = 0;

     label01:
        $b0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        if $b0 == 1 goto label02;

        return z5;

     label02:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_count>;

        if $s1 != 1 goto label03;

        $s21 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_number>;

        if $s21 == 1 goto label04;

     label03:
        $r2 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** segment = ");

        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_number>;

        $i31 = (int) $s2;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short seg_count>;

        $i32 = (int) $s3;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r7 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String)>($r9);

     label04:
        $s24 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        $i33 = (int) $s24;

        if $i33 < 0 goto label05;

        $s20 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        $i34 = (int) $s20;

        if $i34 <= 2432 goto label06;

     label05:
        $r11 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad reflect offset= ");

        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        $i35 = (int) $s5;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i35);

        $r16 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r18);

        z3 = 0;

        z4 = 0;

     label06:
        $s25 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i36 = (int) $s25;

        if $i36 < 0 goto label07;

        $s19 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i37 = (int) $s19;

        if $i37 <= 2432 goto label08;

     label07:
        $r20 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad velocity offset= ");

        $s7 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i38 = (int) $s7;

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i38);

        $r25 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String)>($r27);

        z3 = 0;

        z4 = 0;

     label08:
        $s26 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        $i39 = (int) $s26;

        if $i39 < 0 goto label09;

        $s18 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        $i40 = (int) $s18;

        if $i40 <= 2432 goto label10;

     label09:
        $r29 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS bad spwidth offset= ");

        $s9 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        $i41 = (int) $s9;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i41);

        $r34 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r36);

        z3 = 0;

        z4 = 0;

     label10:
        $s27 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i42 = (int) $s27;

        if $i42 <= 0 goto label11;

        $s16 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        $i43 = (int) $s16;

        if $i43 > 0 goto label11;

        $r66 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i17 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS velocity NOT spectWidth!!");

        $r70 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r66.<org.slf4j.Logger: void warn(java.lang.String)>($r72);

        z3 = 0;

        z4 = 0;

     label11:
        $s28 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i44 = (int) $s28;

        if $i44 > 0 goto label12;

        $s14 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        $i45 = (int) $s14;

        if $i45 <= 0 goto label12;

        $r58 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("****");

        $i15 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" HAS spectWidth AND NOT velocity!!");

        $r62 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r58.<org.slf4j.Logger: void warn(java.lang.String)>($r64);

        z3 = 0;

        z4 = 0;

     label12:
        $s29 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short mess_julian_date>;

        $s30 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date>;

        $i46 = (int) $s29;

        $i47 = (int) $s30;

        if $i46 == $i47 goto label13;

        $r44 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** message date = ");

        $s10 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short mess_julian_date>;

        $i48 = (int) $s10;

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i48);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $i11 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int mess_msecs>;

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r49 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data date = ");

        $s12 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date>;

        $i49 = (int) $s12;

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i49);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $i13 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void warn(java.lang.String)>($r56);

        z3 = 0;

        z4 = 0;

     label13:
        $z1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasReflectData>;

        if $z1 != 0 goto label14;

        $z2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: boolean hasDopplerData>;

        if $z2 != 0 goto label14;

        $r38 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** no reflect or dopplar = ");

        $r40 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String who()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void info(java.lang.String)>($r42);

     label14:
        return z4;
    }

    private java.lang.String who()
    {
        long $l1;
        ucar.nc2.iosp.nexrad2.Level2Record r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r2 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" message(");

        $i0 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public float getAzimuth()
    {
        byte $b0, $b1;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int $i2, $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        $b0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i3 = (int) $b0;

        if $i3 != 31 goto label1;

        $f3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float azimuth>;

        return $f3;

     label1:
        $b1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        if $b1 != 1 goto label2;

        $i2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int azimuth_ang>;

        $f0 = (float) $i2;

        $f1 = 180.0F * $f0;

        $f2 = $f1 / 32768.0F;

        return $f2;

     label2:
        return -1.0F;
    }

    public float getElevation()
    {
        short $s2;
        byte $b0, $b1;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int $i3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        $b0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        $i3 = (int) $b0;

        if $i3 != 31 goto label1;

        $f3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: float elevation>;

        return $f3;

     label1:
        $b1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: byte message_type>;

        if $b1 != 1 goto label2;

        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_ang>;

        $f0 = (float) $s2;

        $f1 = 180.0F * $f0;

        $f2 = $f1 / 32768.0F;

        return $f2;

     label2:
        return -1.0F;
    }

    public int getGateSize(int)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label6;
            case 9: goto label7;
            case 10: goto label8;
            default: goto label9;
        };

     label1:
        $s8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_size>;

        $i9 = (int) $s8;

        return $i9;

     label2:
        $s7 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_size>;

        $i10 = (int) $s7;

        return $i10;

     label3:
        $s6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_gate_size>;

        $i11 = (int) $s6;

        return $i11;

     label4:
        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_gate_size>;

        $i12 = (int) $s5;

        return $i12;

     label5:
        $s4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_gate_size>;

        $i13 = (int) $s4;

        return $i13;

     label6:
        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_gate_size>;

        $i14 = (int) $s3;

        return $i14;

     label7:
        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_gate_size>;

        $i15 = (int) $s2;

        return $i15;

     label8:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_gate_size>;

        $i16 = (int) $s1;

        return $i16;

     label9:
        $i18 = (int) -1;

        return $i18;
    }

    public int getGateStart(int)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label6;
            case 9: goto label7;
            case 10: goto label8;
            default: goto label9;
        };

     label1:
        $s8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_first_gate>;

        $i9 = (int) $s8;

        return $i9;

     label2:
        $s7 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_first_gate>;

        $i10 = (int) $s7;

        return $i10;

     label3:
        $s6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_first_gate>;

        $i11 = (int) $s6;

        return $i11;

     label4:
        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_first_gate>;

        $i12 = (int) $s5;

        return $i12;

     label5:
        $s4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_first_gate>;

        $i13 = (int) $s4;

        return $i13;

     label6:
        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_first_gate>;

        $i14 = (int) $s3;

        return $i14;

     label7:
        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_first_gate>;

        $i15 = (int) $s2;

        return $i15;

     label8:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_first_gate>;

        $i16 = (int) $s1;

        return $i16;

     label9:
        $i18 = (int) -1;

        return $i18;
    }

    public int getGateCount(int)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label5;
            case 8: goto label6;
            case 9: goto label7;
            case 10: goto label8;
            default: goto label9;
        };

     label1:
        $s8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_gate_count>;

        $i9 = (int) $s8;

        return $i9;

     label2:
        $s7 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short doppler_gate_count>;

        $i10 = (int) $s7;

        return $i10;

     label3:
        $s6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_gate_count>;

        $i11 = (int) $s6;

        return $i11;

     label4:
        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_gate_count>;

        $i12 = (int) $s5;

        return $i12;

     label5:
        $s4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_gate_count>;

        $i13 = (int) $s4;

        return $i13;

     label6:
        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_gate_count>;

        $i14 = (int) $s3;

        return $i14;

     label7:
        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_gate_count>;

        $i15 = (int) $s2;

        return $i15;

     label8:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_gate_count>;

        $i16 = (int) $s1;

        return $i16;

     label9:
        return 0;
    }

    private short getDataOffset(int)
    {
        short $s1, $s2, $s3, $s4, $s5, $s6, $s7, $s8, $s9;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label06;
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label09;
            default: goto label10;
        };

     label01:
        $s9 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        return $s9;

     label02:
        $s8 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        return $s8;

     label03:
        $s7 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        return $s7;

     label04:
        $s6 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflectHR_offset>;

        return $s6;

     label05:
        $s5 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocityHR_offset>;

        return $s5;

     label06:
        $s4 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectrumHR_offset>;

        return $s4;

     label07:
        $s3 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short zdrHR_offset>;

        return $s3;

     label08:
        $s2 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short phiHR_offset>;

        return $s2;

     label09:
        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short rhoHR_offset>;

        return $s1;

     label10:
        return -32768;
    }

    private short getDataBlockValue(ucar.unidata.io.RandomAccessFile, short, int) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r1;
        long $l1, $l2, $l3, l4;
        short s0, $s6;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i5;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        s0 := @parameter1: short;

        i5 := @parameter2: int;

        $l2 = (long) s0;

        $l1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        $l3 = $l2 + $l1;

        l4 = $l3 + 28L;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(l4);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(i5);

        $s6 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: short readShort()>();

        return $s6;
    }

    private java.lang.String getDataBlockStringValue(ucar.unidata.io.RandomAccessFile, short, int, int) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r1;
        long $l1, $l2, $l3, l4;
        short s0;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i5, i6;
        java.lang.String $r2;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        s0 := @parameter1: short;

        i5 := @parameter2: int;

        i6 := @parameter3: int;

        $l2 = (long) s0;

        $l1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        $l3 = $l2 + $l1;

        l4 = $l3 + 28L;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(l4);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(i5);

        $r2 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: java.lang.String readString(int)>(i6);

        return $r2;
    }

    private float getDataBlockValue1(ucar.unidata.io.RandomAccessFile, short, int) throws java.io.IOException
    {
        ucar.unidata.io.RandomAccessFile r1;
        long $l1, $l2, $l3, l4;
        short s0;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i5;
        float $f0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        s0 := @parameter1: short;

        i5 := @parameter2: int;

        $l2 = (long) s0;

        $l1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        $l3 = $l2 + $l1;

        l4 = $l3 + 28L;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(l4);

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: int skipBytes(int)>(i5);

        $f0 = virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: float readFloat()>();

        return $f0;
    }

    public java.util.Date getDate()
    {
        short $s1;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        java.util.Date $r1;
        int $i0, $i2;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        $s1 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short data_julian_date>;

        $i0 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        $i2 = (int) $s1;

        $r1 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.util.Date getDate(int,int)>($i2, $i0);

        return $r1;
    }

    public void readData(ucar.unidata.io.RandomAccessFile, int, ucar.ma2.Range, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        byte[] r24;
        ucar.unidata.io.RandomAccessFile r1;
        byte $b5;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        boolean $z0;
        ucar.ma2.Range r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r25, $r26;
        short[] r23;
        long $l2, l15, l16, l17;
        short $s1, $s8, $s12, $s13, $s14;
        int i0, $i3, $i4, $i6, $i7, $i9, $i10, $i11, i18, i19, $i20, $i21, $i22;
        java.lang.String $r13, $r22;
        org.slf4j.Logger $r2, $r6, $r15;
        ucar.ma2.IndexIterator r4;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r1 := @parameter0: ucar.unidata.io.RandomAccessFile;

        i0 := @parameter1: int;

        r3 := @parameter2: ucar.ma2.Range;

        r4 := @parameter3: ucar.ma2.IndexIterator;

        l15 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: long message_offset>;

        l16 = l15 + 28L;

        $s1 = specialinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: short getDataOffset(int)>(i0);

        $l2 = (long) $s1;

        l17 = l16 + $l2;

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void seek(long)>(l17);

        $r2 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r6 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  read recno ");

        $i10 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: int recno>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at offset ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count= ");

        $i11 = virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

        $r15 = <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   offset: reflect= ");

        $s12 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short reflect_offset>;

        $i20 = (int) $s12;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" velocity= ");

        $s13 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short velocity_offset>;

        $i21 = (int) $s13;

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" spWidth= ");

        $s14 = r0.<ucar.nc2.iosp.nexrad2.Level2Record: short spectWidth_offset>;

        $i22 = (int) $s14;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>($r22);

     label01:
        $i3 = virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(i0);

        if i0 != 9 goto label06;

        r23 = newarray (short)[$i3];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void readShort(short[],int,int)>(r23, 0, $i3);

        i18 = virtualinvoke r3.<ucar.ma2.Range: int first()>();

     label02:
        $i7 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        if i18 > $i7 goto label05;

        if i18 < $i3 goto label03;

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setShortNext(short)>(1);

        goto label04;

     label03:
        $s8 = r23[i18];

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setShortNext(short)>($s8);

     label04:
        $i9 = virtualinvoke r3.<ucar.ma2.Range: int stride()>();

        i18 = i18 + $i9;

        goto label02;

     label05:
        goto label10;

     label06:
        r24 = newarray (byte)[$i3];

        virtualinvoke r1.<ucar.unidata.io.RandomAccessFile: void readFully(byte[])>(r24);

        i19 = virtualinvoke r3.<ucar.ma2.Range: int first()>();

     label07:
        $i4 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        if i19 > $i4 goto label10;

        if i19 < $i3 goto label08;

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>(1);

        goto label09;

     label08:
        $b5 = r24[i19];

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b5);

     label09:
        $i6 = virtualinvoke r3.<ucar.ma2.Range: int stride()>();

        i19 = i19 + $i6;

        goto label07;

     label10:
        return;
    }

    public short[] convertunsignedByte2Short(byte[])
    {
        byte[] r0;
        short $s4;
        byte b2;
        ucar.nc2.iosp.nexrad2.Level2Record r2;
        int i0, i1, $i3, i5, i6;
        short[] r1;

        r2 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        r1 = newarray (short)[i0];

        i5 = 0;

        i1 = lengthof r0;

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        b2 = r0[i6];

        $i3 = i5;

        i5 = i5 + 1;

        $s4 = virtualinvoke r2.<ucar.nc2.iosp.nexrad2.Level2Record: short convertunsignedByte2Short(byte)>(b2);

        r1[$i3] = $s4;

        i6 = i6 + 1;

        goto label1;

     label2:
        return r1;
    }

    public short convertunsignedByte2Short(byte)
    {
        short $s1, $s2, $s3, $s5;
        byte b0;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int $i4, $i6, $i7;

        r0 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        b0 := @parameter0: byte;

        $i6 = (int) b0;

        if $i6 >= 0 goto label1;

        $s2 = (short) b0;

        $i7 = (int) $s2;

        $i4 = $i7 + 256;

        $s3 = (short) $i4;

        return $s3;

     label1:
        $s5 = (short) b0;

        $s1 = (short) $s5;

        return $s1;
    }

    public java.lang.String toString()
    {
        short $s0, $s1;
        ucar.nc2.iosp.nexrad2.Level2Record r2;
        int $i2, $i3;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        r2 := @this: ucar.nc2.iosp.nexrad2.Level2Record;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elev= ");

        $s0 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short elevation_num>;

        $i2 = (int) $s0;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" radial_num = ");

        $s1 = r2.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num>;

        $i3 = (int) $s1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.iosp.nexrad2.Level2Record: int RADAR_DATA_SIZE> = 2432;

        <ucar.nc2.iosp.nexrad2.Level2Record: int MESSAGE_HEADER_SIZE> = 28;

        <ucar.nc2.iosp.nexrad2.Level2Record: int CTM_HEADER_SIZE> = 12;

        <ucar.nc2.iosp.nexrad2.Level2Record: int FILE_HEADER_SIZE> = 24;

        <ucar.nc2.iosp.nexrad2.Level2Record: byte BELOW_THRESHOLD> = 0;

        <ucar.nc2.iosp.nexrad2.Level2Record: byte MISSING_DATA> = 1;

        <ucar.nc2.iosp.nexrad2.Level2Record: int CORRELATION_COEFFICIENT> = 10;

        <ucar.nc2.iosp.nexrad2.Level2Record: int DIFF_PHASE> = 9;

        <ucar.nc2.iosp.nexrad2.Level2Record: int DIFF_REFLECTIVITY_HIGH> = 8;

        <ucar.nc2.iosp.nexrad2.Level2Record: int SPECTRUM_WIDTH_HIGH> = 7;

        <ucar.nc2.iosp.nexrad2.Level2Record: int VELOCITY_HIGH> = 6;

        <ucar.nc2.iosp.nexrad2.Level2Record: int REFLECTIVITY_HIGH> = 5;

        <ucar.nc2.iosp.nexrad2.Level2Record: float HORIZONTAL_BEAM_WIDTH> = 1.5F;

        <ucar.nc2.iosp.nexrad2.Level2Record: int DOPPLER_RESOLUTION_HIGH_CODE> = 2;

        <ucar.nc2.iosp.nexrad2.Level2Record: int DOPPLER_RESOLUTION_LOW_CODE> = 4;

        <ucar.nc2.iosp.nexrad2.Level2Record: int SPECTRUM_WIDTH> = 3;

        <ucar.nc2.iosp.nexrad2.Level2Record: int VELOCITY_LOW> = 4;

        <ucar.nc2.iosp.nexrad2.Level2Record: int VELOCITY_HI> = 2;

        <ucar.nc2.iosp.nexrad2.Level2Record: int REFLECTIVITY> = 1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/nexrad2/Level2Record;");

        <ucar.nc2.iosp.nexrad2.Level2Record: org.slf4j.Logger logger> = $r0;

        return;
    }
}
