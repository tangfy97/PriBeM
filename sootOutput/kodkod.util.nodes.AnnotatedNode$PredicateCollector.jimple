final class kodkod.util.nodes.AnnotatedNode$PredicateCollector extends kodkod.ast.visitor.AbstractVoidVisitor
{
    protected boolean negated;
    private final java.util.Set sharedNodes;
    private final java.util.Map visited;
    final java.util.EnumMap preds;

    void <init>(java.util.Set)
    {
        java.util.IdentityHashMap $r2;
        kodkod.util.collections.IdentityHashSet $r4, $r7, $r10;
        java.util.EnumMap $r3, $r5, $r8, $r11;
        java.util.Set r1;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.RelationPredicate$Name $r6, $r9, $r12;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: void <init>()>();

        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Set sharedNodes> = r1;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Map visited> = $r2;

        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated> = 0;

        $r3 = new java.util.EnumMap;

        specialinvoke $r3.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lkodkod/ast/RelationPredicate$Name;");

        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.EnumMap preds> = $r3;

        $r5 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.EnumMap preds>;

        $r6 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name ACYCLIC>;

        $r4 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r4.<kodkod.util.collections.IdentityHashSet: void <init>(int)>(4);

        virtualinvoke $r5.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r6, $r4);

        $r8 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.EnumMap preds>;

        $r9 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        $r7 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r7.<kodkod.util.collections.IdentityHashSet: void <init>(int)>(4);

        virtualinvoke $r8.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r9, $r7);

        $r11 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.EnumMap preds>;

        $r12 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        $r10 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r10.<kodkod.util.collections.IdentityHashSet: void <init>(int)>(8);

        virtualinvoke $r11.<java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)>($r12, $r10);

        return;
    }

    protected final boolean visited(kodkod.ast.Node)
    {
        java.util.Set $r2;
        kodkod.ast.Node r1;
        java.util.Map $r3, $r4, $r7, $r8;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        java.lang.Boolean r6, $r9;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Set sharedNodes>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        $r3 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Map visited>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r8 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Map visited>;

        $z4 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        return 0;

     label1:
        $r4 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Map visited>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Boolean) $r5;

        if r6 == null goto label2;

        $z2 = virtualinvoke r6.<java.lang.Boolean: boolean booleanValue()>();

        $z3 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z2 != $z3 goto label3;

     label2:
        return 1;

     label3:
        $r7 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.Map visited>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, null);

        return 0;

     label4:
        return 0;
    }

    public void visit(kodkod.ast.Comprehension)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.IfExpression)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.IfExpression;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.IfIntExpression)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.IfIntExpression r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.IntComparisonFormula r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.QuantifiedFormula r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.operator.FormulaOperator $r2, $r3, $r6, $r9;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        kodkod.ast.Formula $r4, $r5, $r7, $r8;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $z0 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $z1 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z1 != 0 goto label2;

        $r9 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r2 == $r9 goto label3;

     label2:
        $z2 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z2 == 0 goto label4;

        $r6 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        if $r2 != $r6 goto label4;

     label3:
        $r7 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke $r7.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $r8 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke $r8.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        goto label9;

     label4:
        $z3 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z3 == 0 goto label9;

        $r3 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator IMPLIES>;

        if $r2 != $r3 goto label9;

        $z4 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z4 == 0 goto label5;

        $z6 = 0;

        goto label6;

     label5:
        $z6 = 1;

     label6:
        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated> = $z6;

        $r4 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        virtualinvoke $r4.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $z5 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z5 == 0 goto label7;

        $z7 = 0;

        goto label8;

     label7:
        $z7 = 1;

     label8:
        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated> = $z7;

        $r5 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        virtualinvoke $r5.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label9:
        return;
    }

    public void visit(kodkod.ast.NaryFormula)
    {
        java.util.Iterator $r4;
        kodkod.ast.Formula r6;
        kodkod.ast.operator.FormulaOperator $r2, $r3, $r7;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        java.lang.Object $r5;
        kodkod.ast.NaryFormula r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $z0 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $z1 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z1 != 0 goto label2;

        $r7 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator AND>;

        if $r2 == $r7 goto label3;

     label2:
        $z2 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z2 == 0 goto label6;

        $r3 = <kodkod.ast.operator.FormulaOperator: kodkod.ast.operator.FormulaOperator OR>;

        if $r2 != $r3 goto label6;

     label3:
        $r4 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.ast.Formula) $r5;

        virtualinvoke r6.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

     label5:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label4;

     label6:
        return;
    }

    public void visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.Formula $r2;
        kodkod.ast.NotFormula r1;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $z0 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z1 == 0 goto label2;

        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated> = $z3;

        $r2 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        virtualinvoke $r2.<kodkod.ast.Formula: void accept(kodkod.ast.visitor.VoidVisitor)>(r0);

        $z2 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z2 == 0 goto label4;

        $z4 = 0;

        goto label5;

     label4:
        $z4 = 1;

     label5:
        r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated> = $z4;

        return;
    }

    public void visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.ComparisonFormula r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        kodkod.ast.MultiplicityFormula r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        return;
    }

    public void visit(kodkod.ast.RelationPredicate)
    {
        java.util.EnumMap $r2;
        java.util.Set $r5;
        kodkod.util.nodes.AnnotatedNode$PredicateCollector r0;
        java.lang.Object $r4;
        kodkod.ast.RelationPredicate r1;
        kodkod.ast.RelationPredicate$Name $r3;
        boolean $z0, $z1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$PredicateCollector;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $z0 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean visited(kodkod.ast.Node)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: boolean negated>;

        if $z1 != 0 goto label2;

        $r2 = r0.<kodkod.util.nodes.AnnotatedNode$PredicateCollector: java.util.EnumMap preds>;

        $r3 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r4 = virtualinvoke $r2.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.util.Set) $r4;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }
}
