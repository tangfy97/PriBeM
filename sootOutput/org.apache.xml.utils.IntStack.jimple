public class org.apache.xml.utils.IntStack extends org.apache.xml.utils.IntVector
{

    public void <init>()
    {
        org.apache.xml.utils.IntStack r0;

        r0 := @this: org.apache.xml.utils.IntStack;

        specialinvoke r0.<org.apache.xml.utils.IntVector: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.xml.utils.IntStack r0;

        r0 := @this: org.apache.xml.utils.IntStack;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xml.utils.IntVector: void <init>(int)>(i0);

        return;
    }

    public void <init>(org.apache.xml.utils.IntStack)
    {
        org.apache.xml.utils.IntStack r0, r1;

        r0 := @this: org.apache.xml.utils.IntStack;

        r1 := @parameter0: org.apache.xml.utils.IntStack;

        specialinvoke r0.<org.apache.xml.utils.IntVector: void <init>(org.apache.xml.utils.IntVector)>(r1);

        return;
    }

    public int push(int)
    {
        org.apache.xml.utils.IntStack r0;
        int[] $r1, r2, $r3;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        r0 := @this: org.apache.xml.utils.IntStack;

        i3 := @parameter0: int;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        if $i2 < $i1 goto label1;

        $i8 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        $i7 = r0.<org.apache.xml.utils.IntVector: int m_blocksize>;

        $i9 = $i8 + $i7;

        r0.<org.apache.xml.utils.IntVector: int m_mapSize> = $i9;

        $i10 = r0.<org.apache.xml.utils.IntVector: int m_mapSize>;

        r2 = newarray (int)[$i10];

        $r3 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i11 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i12 = $i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i12);

        r0.<org.apache.xml.utils.IntVector: int[] m_map> = r2;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i4 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $r1[$i4] = i3;

        $i5 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i6 = $i5 + 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i6;

        return i3;
    }

    public final int pop()
    {
        int[] $r1;
        org.apache.xml.utils.IntStack r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.xml.utils.IntStack;

        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i1;

        $i2 = $r1[$i1];

        return $i2;
    }

    public final void quickPop(int)
    {
        org.apache.xml.utils.IntStack r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.xml.utils.IntStack;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i2 = $i1 - i0;

        r0.<org.apache.xml.utils.IntVector: int m_firstFree> = $i2;

        return;
    }

    public final int peek()
    {
        java.util.EmptyStackException $r3;
        int[] $r1;
        org.apache.xml.utils.IntStack r0;
        int $i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r0 := @this: org.apache.xml.utils.IntStack;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i1 = $i0 - 1;

        $i2 = $r1[$i1];

        return $i2;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.util.EmptyStackException;

        specialinvoke $r3.<java.util.EmptyStackException: void <init>()>();

        throw $r3;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label2;
    }

    public int peek(int)
    {
        java.util.EmptyStackException $r3;
        org.apache.xml.utils.IntStack r0;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        int[] $r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xml.utils.IntStack;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i2 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i1 = 1 + i0;

        $i3 = $i2 - $i1;

        $i4 = $r1[$i3];

        return $i4;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.util.EmptyStackException;

        specialinvoke $r3.<java.util.EmptyStackException: void <init>()>();

        throw $r3;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label2;
    }

    public void setTop(int)
    {
        java.util.EmptyStackException $r3;
        int[] $r1;
        org.apache.xml.utils.IntStack r0;
        int $i0, i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r0 := @this: org.apache.xml.utils.IntStack;

        i1 := @parameter0: int;

     label1:
        $r1 = r0.<org.apache.xml.utils.IntVector: int[] m_map>;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        $i2 = $i0 - 1;

        $r1[$i2] = i1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.util.EmptyStackException;

        specialinvoke $r3.<java.util.EmptyStackException: void <init>()>();

        throw $r3;

     label4:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean empty()
    {
        int $i0;
        org.apache.xml.utils.IntStack r0;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.IntStack;

        $i0 = r0.<org.apache.xml.utils.IntVector: int m_firstFree>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int search(int)
    {
        org.apache.xml.utils.IntStack r0;
        int i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.xml.utils.IntStack;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.utils.IntVector: int lastIndexOf(int)>(i0);

        if $i1 < 0 goto label1;

        $i2 = virtualinvoke r0.<org.apache.xml.utils.IntVector: int size()>();

        $i3 = $i2 - $i1;

        return $i3;

     label1:
        $i5 = (int) -1;

        return $i5;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.lang.Object $r1;
        org.apache.xml.utils.IntStack r0, $r2;

        r0 := @this: org.apache.xml.utils.IntStack;

        $r1 = specialinvoke r0.<org.apache.xml.utils.IntVector: java.lang.Object clone()>();

        $r2 = (org.apache.xml.utils.IntStack) $r1;

        return $r2;
    }
}
