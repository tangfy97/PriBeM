public class org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver extends java.lang.Object implements org.springframework.instrument.classloading.LoadTimeWeaver
{
    private final org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter classLoader;

    public void <init>()
    {
        org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        specialinvoke r0.<org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver: void <init>(java.lang.ClassLoader)>($r1);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver r0;
        java.lang.ClassLoader r1;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter $r2;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ClassLoader must not be null");

        $r2 = new org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter;

        specialinvoke $r2.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: void <init>(java.lang.ClassLoader)>(r1);

        r0.<org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter classLoader> = $r2;

        return;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver r1;
        java.lang.instrument.ClassFileTransformer r0;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter $r2;

        r1 := @this: org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Transformer must not be null");

        $r2 = r1.<org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter classLoader>;

        virtualinvoke $r2.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: void addTransformer(java.lang.instrument.ClassFileTransformer)>(r0);

        return;
    }

    public java.lang.ClassLoader getInstrumentableClassLoader()
    {
        org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver r0;
        java.lang.ClassLoader $r2;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter $r1;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter classLoader>;

        $r2 = virtualinvoke $r1.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public java.lang.ClassLoader getThrowawayClassLoader()
    {
        org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver r0;
        java.lang.ClassLoader $r2;
        org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter $r1;

        r0 := @this: org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver;

        $r1 = r0.<org.springframework.instrument.classloading.oc4j.OC4JLoadTimeWeaver: org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter classLoader>;

        $r2 = virtualinvoke $r1.<org.springframework.instrument.classloading.oc4j.OC4JClassLoaderAdapter: java.lang.ClassLoader getThrowawayClassLoader()>();

        return $r2;
    }
}
