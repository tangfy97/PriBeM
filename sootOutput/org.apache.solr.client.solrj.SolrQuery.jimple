public class org.apache.solr.client.solrj.SolrQuery extends org.apache.solr.common.params.ModifiableSolrParams
{
    private java.util.List sortClauses;
    private static java.util.regex.Pattern scorePattern;

    public void <init>()
    {
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        specialinvoke r0.<org.apache.solr.common.params.ModifiableSolrParams: void <init>()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: void <init>()>();

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("q", $r1);

        return;
    }

    public org.apache.solr.client.solrj.SolrQuery setTerms(boolean)
    {
        boolean z0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("terms", 1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.fl");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.lower");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.upper");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.upper.incl");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.lower.incl");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.limit");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.prefix");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.mincount");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.maxcount");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.raw");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.sort");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.regex");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("terms.regex.flag");

     label2:
        return r0;
    }

    public boolean getTerms()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean getBool(java.lang.String,boolean)>("terms", 0);

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery addTermsField(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("terms.fl", $r1);

        return r0;
    }

    public java.lang.String[] getTermsFields()
    {
        java.lang.String[] $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>("terms.fl");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsLower(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("terms.lower", $r1);

        return r0;
    }

    public java.lang.String getTermsLower()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("terms.lower", "");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsUpper(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("terms.upper", $r1);

        return r0;
    }

    public java.lang.String getTermsUpper()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("terms.upper", "");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsUpperInclusive(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("terms.upper.incl", z0);

        return r0;
    }

    public boolean getTermsUpperInclusive()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean getBool(java.lang.String,boolean)>("terms.upper.incl", 0);

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsLowerInclusive(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("terms.lower.incl", z0);

        return r0;
    }

    public boolean getTermsLowerInclusive()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean getBool(java.lang.String,boolean)>("terms.lower.incl", 1);

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsLimit(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("terms.limit", i0);

        return r0;
    }

    public int getTermsLimit()
    {
        int $i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("terms.limit", 10);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsMinCount(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("terms.mincount", i0);

        return r0;
    }

    public int getTermsMinCount()
    {
        int $i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("terms.mincount", 1);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsMaxCount(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("terms.maxcount", i0);

        return r0;
    }

    public int getTermsMaxCount()
    {
        int $i0, $i2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i2 = (int) -1;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("terms.maxcount", $i2);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsPrefix(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("terms.prefix", $r1);

        return r0;
    }

    public java.lang.String getTermsPrefix()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("terms.prefix", "");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsRaw(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("terms.raw", z0);

        return r0;
    }

    public boolean getTermsRaw()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean getBool(java.lang.String,boolean)>("terms.raw", 0);

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsSortString(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("terms.sort", $r1);

        return r0;
    }

    public java.lang.String getTermsSortString()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("terms.sort", "count");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsRegex(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("terms.regex", $r1);

        return r0;
    }

    public java.lang.String getTermsRegex()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("terms.regex");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setTermsRegexFlag(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("terms.regex.flag", $r1);

        return r0;
    }

    public java.lang.String[] getTermsRegexFlags()
    {
        java.lang.String[] $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>("terms.regex.flag");

        return $r1;
    }

    public transient org.apache.solr.client.solrj.SolrQuery addFacetField(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("facet.field", r1);

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet", 1);

        return r0;
    }

    public transient org.apache.solr.client.solrj.SolrQuery addFacetPivotField(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("facet.pivot", r1);

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet", 1);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery addNumericRangeFacet(java.lang.String, java.lang.Number, java.lang.Number, java.lang.Number)
    {
        java.lang.Object[] $r3, $r9, $r15;
        java.lang.String[] $r1, $r6, $r12, $r18;
        java.util.Locale $r4, $r10, $r16;
        java.lang.String r2, $r5, $r8, $r11, $r14, $r17, $r20;
        java.lang.Number r7, r13, r19;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.Number;

        r13 := @parameter2: java.lang.Number;

        r19 := @parameter3: java.lang.Number;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("facet.range", $r1);

        $r4 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r2;

        $r3[1] = "facet.range.start";

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "f.%s.%s", $r3);

        $r6 = newarray (java.lang.String)[1];

        $r8 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        $r6[0] = $r8;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r5, $r6);

        $r10 = <java.util.Locale: java.util.Locale ROOT>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r2;

        $r9[1] = "facet.range.end";

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "f.%s.%s", $r9);

        $r12 = newarray (java.lang.String)[1];

        $r14 = virtualinvoke r13.<java.lang.Object: java.lang.String toString()>();

        $r12[0] = $r14;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r11, $r12);

        $r16 = <java.util.Locale: java.util.Locale ROOT>;

        $r15 = newarray (java.lang.Object)[2];

        $r15[0] = r2;

        $r15[1] = "facet.range.gap";

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r16, "f.%s.%s", $r15);

        $r18 = newarray (java.lang.String)[1];

        $r20 = virtualinvoke r19.<java.lang.Object: java.lang.String toString()>();

        $r18[0] = $r20;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r17, $r18);

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet", 1);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery addDateRangeFacet(java.lang.String, java.util.Date, java.util.Date, java.lang.String)
    {
        java.lang.Object[] $r3, $r10, $r17;
        java.util.Date r8, r15;
        java.lang.String[] $r1, $r6, $r13, $r20;
        java.util.Locale $r4, $r11, $r18;
        java.lang.String r2, $r5, $r9, $r12, $r16, $r19, r21;
        java.text.DateFormat $r7, $r14;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        r8 := @parameter1: java.util.Date;

        r15 := @parameter2: java.util.Date;

        r21 := @parameter3: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("facet.range", $r1);

        $r4 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r2;

        $r3[1] = "facet.range.start";

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "f.%s.%s", $r3);

        $r6 = newarray (java.lang.String)[1];

        $r7 = staticinvoke <org.apache.solr.common.util.DateUtil: java.text.DateFormat getThreadLocalDateFormat()>();

        $r9 = virtualinvoke $r7.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r8);

        $r6[0] = $r9;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r5, $r6);

        $r11 = <java.util.Locale: java.util.Locale ROOT>;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r2;

        $r10[1] = "facet.range.end";

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r11, "f.%s.%s", $r10);

        $r13 = newarray (java.lang.String)[1];

        $r14 = staticinvoke <org.apache.solr.common.util.DateUtil: java.text.DateFormat getThreadLocalDateFormat()>();

        $r16 = virtualinvoke $r14.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r15);

        $r13[0] = $r16;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r12, $r13);

        $r18 = <java.util.Locale: java.util.Locale ROOT>;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r2;

        $r17[1] = "facet.range.gap";

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r18, "f.%s.%s", $r17);

        $r20 = newarray (java.lang.String)[1];

        $r20[0] = r21;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r19, $r20);

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet", 1);

        return r0;
    }

    public java.lang.String[] getFacetFields()
    {
        java.lang.String[] $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>("facet.field");

        return $r1;
    }

    public boolean removeFacetField(java.lang.String)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean remove(java.lang.String,java.lang.String)>("facet.field", r1);

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("facet.field");

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("facet.query");

        if $r3 != null goto label1;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setFacet(boolean)>(0);

     label1:
        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacet(boolean)
    {
        boolean z0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet", 1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.mincount");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.field");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.limit");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.missing");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.offset");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.prefix");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.query");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.sort");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.zeros");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("facet.prefix");

     label2:
        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetPrefix(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("facet.prefix", $r1);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetPrefix(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r8;
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6;
        java.lang.String r3, $r7, r9;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r3 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f.");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("facet.prefix");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = r9;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>($r7, $r8);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery addFacetQuery(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("facet.query", $r1);

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet", 1);

        return r0;
    }

    public java.lang.String[] getFacetQuery()
    {
        java.lang.String[] $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>("facet.query");

        return $r1;
    }

    public boolean removeFacetQuery(java.lang.String)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean remove(java.lang.String,java.lang.String)>("facet.query", r1);

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("facet.field");

        if $r2 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("facet.query");

        if $r3 != null goto label1;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setFacet(boolean)>(0);

     label1:
        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetLimit(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("facet.limit", i0);

        return r0;
    }

    public int getFacetLimit()
    {
        int $i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("facet.limit", 25);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetMinCount(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("facet.mincount", i0);

        return r0;
    }

    public int getFacetMinCount()
    {
        int $i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("facet.mincount", 1);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetMissing(java.lang.Boolean)
    {
        java.lang.Boolean r1;
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("facet.missing", $z0);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setMissing(java.lang.String)
    {
        org.apache.solr.client.solrj.SolrQuery r0, $r3;
        java.lang.Boolean $r2;
        java.lang.String r1;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setFacetMissing(java.lang.Boolean)>($r2);

        return $r3;
    }

    public java.lang.String getFacetSortString()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("facet.sort", "count");

        return $r1;
    }

    public boolean getFacetSort()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("facet.sort", "count");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("count");

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetSort(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("facet.sort", $r1);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setFacetSort(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        $r1 = newarray (java.lang.String)[1];

        if z0 != 1 goto label1;

        $r2 = "count";

        goto label2;

     label1:
        $r2 = "index";

     label2:
        $r1[0] = $r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("facet.sort", $r1);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery addHighlightField(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("hl.fl", $r1);

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("hl", 1);

        return r0;
    }

    public boolean removeHighlightField(java.lang.String)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean remove(java.lang.String,java.lang.String)>("hl.fl", r1);

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("hl.fl");

        if $r2 != null goto label1;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setHighlight(boolean)>(0);

     label1:
        return $z0;
    }

    public java.lang.String[] getHighlightFields()
    {
        java.lang.String[] $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>("hl.fl");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setHighlightSnippets(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("hl.snippets", i0);

        return r0;
    }

    public int getHighlightSnippets()
    {
        int $i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("hl.snippets", 1);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setHighlightFragsize(int)
    {
        int i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("hl.fragsize", i0);

        return r0;
    }

    public int getHighlightFragsize()
    {
        int $i0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $i0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: int getInt(java.lang.String,int)>("hl.fragsize", 100);

        return $i0;
    }

    public org.apache.solr.client.solrj.SolrQuery setHighlightRequireFieldMatch(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("hl.requireFieldMatch", z0);

        return r0;
    }

    public boolean getHighlightRequireFieldMatch()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean getBool(java.lang.String,boolean)>("hl.requireFieldMatch", 0);

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setHighlightSimplePre(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("hl.simple.pre", $r1);

        return r0;
    }

    public java.lang.String getHighlightSimplePre()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("hl.simple.pre", "");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setHighlightSimplePost(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("hl.simple.post", $r1);

        return r0;
    }

    public java.lang.String getHighlightSimplePost()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("hl.simple.post", "");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setSortField(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r2;
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("sort");

        $r3 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String toSortString(java.lang.String,org.apache.solr.client.solrj.SolrQuery$ORDER)>(r1, r2);

        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addValueToParam(java.lang.String,java.lang.String)>("sort", $r3);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery addSortField(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r2;
        org.apache.solr.client.solrj.SolrQuery r0, $r4;
        java.lang.String r1, $r3;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        $r3 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String toSortString(java.lang.String,org.apache.solr.client.solrj.SolrQuery$ORDER)>(r1, r2);

        $r4 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addValueToParam(java.lang.String,java.lang.String)>("sort", $r3);

        return $r4;
    }

    public org.apache.solr.client.solrj.SolrQuery removeSortField(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r3;
        java.lang.String[] $r1, $r6;
        org.apache.solr.client.solrj.SolrQuery r0;
        int $i0;
        java.lang.String r2, $r4, $r5, r7;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getSortFields()>();

        if $r1 == null goto label2;

        $r4 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String toSortString(java.lang.String,org.apache.solr.client.solrj.SolrQuery$ORDER)>(r2, r3);

        $r5 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String join(java.lang.String[],java.lang.String,java.lang.String)>($r1, ",", $r4);

        r7 = $r5;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r7 = null;

     label1:
        $r6 = newarray (java.lang.String)[1];

        $r6[0] = r7;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("sort", $r6);

     label2:
        return r0;
    }

    public java.lang.String[] getSortFields()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String[] $r3;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String getSortField()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(", *");

        return $r3;
    }

    public java.lang.String getSortField()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("sort");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery clearSorts()
    {
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses> = null;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: void serializeSorts()>();

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setSorts(java.util.List)
    {
        java.util.List r2;
        org.apache.solr.client.solrj.SolrQuery r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.util.List;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r2);

        r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses> = $r1;

        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: void serializeSorts()>();

        return r0;
    }

    public java.util.List getSorts()
    {
        java.util.List $r1, $r2, $r3, $r4;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        if $r1 != null goto label1;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;

     label1:
        $r2 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    public org.apache.solr.client.solrj.SolrQuery setSort(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r3;
        org.apache.solr.client.solrj.SolrQuery r0, $r4;
        org.apache.solr.client.solrj.SolrQuery$SortClause $r1;
        java.lang.String r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        $r1 = new org.apache.solr.client.solrj.SolrQuery$SortClause;

        specialinvoke $r1.<org.apache.solr.client.solrj.SolrQuery$SortClause: void <init>(java.lang.String,org.apache.solr.client.solrj.SolrQuery$ORDER)>(r2, r3);

        $r4 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setSort(org.apache.solr.client.solrj.SolrQuery$SortClause)>($r1);

        return $r4;
    }

    public org.apache.solr.client.solrj.SolrQuery setSort(org.apache.solr.client.solrj.SolrQuery$SortClause)
    {
        org.apache.solr.client.solrj.SolrQuery$SortClause r1;
        org.apache.solr.client.solrj.SolrQuery r0, $r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: org.apache.solr.client.solrj.SolrQuery$SortClause;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery clearSorts()>();

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addSort(org.apache.solr.client.solrj.SolrQuery$SortClause)>(r1);

        return $r2;
    }

    public org.apache.solr.client.solrj.SolrQuery addSort(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r3;
        org.apache.solr.client.solrj.SolrQuery r0, $r4;
        org.apache.solr.client.solrj.SolrQuery$SortClause $r1;
        java.lang.String r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        $r1 = new org.apache.solr.client.solrj.SolrQuery$SortClause;

        specialinvoke $r1.<org.apache.solr.client.solrj.SolrQuery$SortClause: void <init>(java.lang.String,org.apache.solr.client.solrj.SolrQuery$ORDER)>(r2, r3);

        $r4 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addSort(org.apache.solr.client.solrj.SolrQuery$SortClause)>($r1);

        return $r4;
    }

    public org.apache.solr.client.solrj.SolrQuery addSort(org.apache.solr.client.solrj.SolrQuery$SortClause)
    {
        java.util.List $r1, $r3;
        org.apache.solr.client.solrj.SolrQuery r0;
        org.apache.solr.client.solrj.SolrQuery$SortClause r2;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: org.apache.solr.client.solrj.SolrQuery$SortClause;

        $r1 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses> = $r4;

     label1:
        $r3 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: void serializeSorts()>();

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery addOrUpdateSort(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r3;
        org.apache.solr.client.solrj.SolrQuery r0, $r4;
        org.apache.solr.client.solrj.SolrQuery$SortClause $r1;
        java.lang.String r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        $r1 = new org.apache.solr.client.solrj.SolrQuery$SortClause;

        specialinvoke $r1.<org.apache.solr.client.solrj.SolrQuery$SortClause: void <init>(java.lang.String,org.apache.solr.client.solrj.SolrQuery$ORDER)>(r2, r3);

        $r4 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addOrUpdateSort(org.apache.solr.client.solrj.SolrQuery$SortClause)>($r1);

        return $r4;
    }

    public org.apache.solr.client.solrj.SolrQuery addOrUpdateSort(org.apache.solr.client.solrj.SolrQuery$SortClause)
    {
        java.util.List $r1, $r4, $r5, $r10;
        org.apache.solr.client.solrj.SolrQuery r0, $r3;
        int $i0, i1;
        org.apache.solr.client.solrj.SolrQuery$SortClause r2, r7;
        java.lang.Object $r6;
        java.lang.String $r8, $r9;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: org.apache.solr.client.solrj.SolrQuery$SortClause;

        $r1 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        if $r1 == null goto label3;

        i1 = 0;

     label1:
        $r4 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        r7 = (org.apache.solr.client.solrj.SolrQuery$SortClause) $r6;

        $r8 = virtualinvoke r7.<org.apache.solr.client.solrj.SolrQuery$SortClause: java.lang.String getItem()>();

        $r9 = virtualinvoke r2.<org.apache.solr.client.solrj.SolrQuery$SortClause: java.lang.String getItem()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $r10 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        interfaceinvoke $r10.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, r2);

        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: void serializeSorts()>();

        return r0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addSort(org.apache.solr.client.solrj.SolrQuery$SortClause)>(r2);

        return $r3;
    }

    public org.apache.solr.client.solrj.SolrQuery removeSort(org.apache.solr.client.solrj.SolrQuery$SortClause)
    {
        org.apache.solr.client.solrj.SolrQuery r0, $r3;
        org.apache.solr.client.solrj.SolrQuery$SortClause r1;
        java.lang.String $r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: org.apache.solr.client.solrj.SolrQuery$SortClause;

        $r2 = virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery$SortClause: java.lang.String getItem()>();

        $r3 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery removeSort(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.solr.client.solrj.SolrQuery removeSort(java.lang.String)
    {
        java.util.Iterator $r3;
        java.util.List $r1, $r2, $r8, $r9;
        org.apache.solr.client.solrj.SolrQuery r0;
        org.apache.solr.client.solrj.SolrQuery$SortClause r5;
        java.lang.Object $r4;
        java.lang.String $r6, r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        if $r1 == null goto label4;

        $r2 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.solr.client.solrj.SolrQuery$SortClause) $r4;

        $r6 = virtualinvoke r5.<org.apache.solr.client.solrj.SolrQuery$SortClause: java.lang.String getItem()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

        $r8 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        interfaceinvoke $r8.<java.util.List: boolean remove(java.lang.Object)>(r5);

        $r9 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses> = null;

     label2:
        specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: void serializeSorts()>();

        goto label4;

     label3:
        goto label1;

     label4:
        return r0;
    }

    private void serializeSorts()
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER $r11;
        java.util.Iterator $r5;
        java.lang.String[] $r6;
        java.util.List $r1, $r2, $r4;
        org.apache.solr.client.solrj.SolrQuery r0;
        int $i0;
        org.apache.solr.client.solrj.SolrQuery$SortClause r9;
        java.lang.StringBuilder $r3;
        java.lang.Object $r8;
        java.lang.String $r7, $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("sort");

        goto label6;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<org.apache.solr.client.solrj.SolrQuery: java.util.List sortClauses>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.solr.client.solrj.SolrQuery$SortClause) $r8;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        $r10 = virtualinvoke r9.<org.apache.solr.client.solrj.SolrQuery$SortClause: java.lang.String getItem()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke r9.<org.apache.solr.client.solrj.SolrQuery$SortClause: org.apache.solr.client.solrj.SolrQuery$ORDER getOrder()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        goto label3;

     label5:
        $r6 = newarray (java.lang.String)[1];

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r7;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("sort", $r6);

     label6:
        return;
    }

    public void setGetFieldStatistics(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("stats", z0);

        return;
    }

    public void setGetFieldStatistics(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("stats", 1);

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("stats.field", $r1);

        return;
    }

    public transient void addStatsFieldFacets(java.lang.String, java.lang.String[])
    {
        java.lang.String[] r1, $r10;
        org.apache.solr.client.solrj.SolrQuery r3;
        int i0, i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String r0, r2, $r9;

        r3 := @this: org.apache.solr.client.solrj.SolrQuery;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        if r0 != null goto label1;

        virtualinvoke r3.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("stats.facet", r1);

        goto label3;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stats.facet");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = r2;

        virtualinvoke r3.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>($r9, $r10);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public transient org.apache.solr.client.solrj.SolrQuery setFilterQueries(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("fq", r1);

        return r0;
    }

    public transient org.apache.solr.client.solrj.SolrQuery addFilterQuery(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String[];

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams add(java.lang.String,java.lang.String[])>("fq", r1);

        return r0;
    }

    public boolean removeFilterQuery(java.lang.String)
    {
        java.lang.String r1;
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean remove(java.lang.String,java.lang.String)>("fq", r1);

        return $z0;
    }

    public java.lang.String[] getFilterQueries()
    {
        java.lang.String[] $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>("fq");

        return $r1;
    }

    public boolean getHighlight()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $z0 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: boolean getBool(java.lang.String,boolean)>("hl", 0);

        return $z0;
    }

    public org.apache.solr.client.solrj.SolrQuery setHighlight(boolean)
    {
        boolean z0;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>("hl", 1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.requireFieldMatch");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.fl");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.formatter");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.fragsize");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.simple.post");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.simple.pre");

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("hl.snippets");

     label2:
        return r0;
    }

    public transient org.apache.solr.client.solrj.SolrQuery setFields(java.lang.String[])
    {
        java.lang.String[] r0, $r4;
        org.apache.solr.client.solrj.SolrQuery r1;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r5, $r6;

        r1 := @this: org.apache.solr.client.solrj.SolrQuery;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("fl");

        return r1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i2 = 1;

     label3:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r6 = r0[i2];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label3;

     label4:
        $r4 = newarray (java.lang.String)[1];

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r5;

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("fl", $r4);

        return r1;
    }

    public org.apache.solr.client.solrj.SolrQuery addField(java.lang.String)
    {
        java.lang.String r1;
        org.apache.solr.client.solrj.SolrQuery r0, $r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery addValueToParam(java.lang.String,java.lang.String)>("fl", r1);

        return $r2;
    }

    public java.lang.String getFields()
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String $r1, r2;
        boolean $z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("fl");

        r2 = $r1;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("score");

        if $z0 == 0 goto label1;

        r2 = "*, score";

     label1:
        return r2;
    }

    public org.apache.solr.client.solrj.SolrQuery setIncludeScore(boolean)
    {
        java.lang.String[] $r2, $r8;
        java.util.regex.Matcher $r4, $r7;
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r1, $r5, $r12;
        java.util.regex.Pattern $r3, $r6;
        boolean z0, $z1;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String,java.lang.String)>("fl", "*");

        if z0 == 0 goto label1;

        $r6 = <org.apache.solr.client.solrj.SolrQuery: java.util.regex.Pattern scorePattern>;

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z1 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z1 != 0 goto label2;

        $r8 = newarray (java.lang.String)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",score");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r12;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("fl", $r8);

        goto label2;

     label1:
        $r2 = newarray (java.lang.String)[1];

        $r3 = <org.apache.solr.client.solrj.SolrQuery: java.util.regex.Pattern scorePattern>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        $r2[0] = $r5;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("fl", $r2);

     label2:
        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setQuery(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("q", $r1);

        return r0;
    }

    public java.lang.String getQuery()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("q");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setRows(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer r0;
        org.apache.solr.client.solrj.SolrQuery r1;

        r1 := @this: org.apache.solr.client.solrj.SolrQuery;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("rows");

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("rows", $i0);

     label2:
        return r1;
    }

    public java.lang.Integer getRows()
    {
        java.lang.Integer $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.Integer getInt(java.lang.String)>("rows");

        return $r1;
    }

    public void setShowDebugInfo(boolean)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        z0 := @parameter0: boolean;

        $r1 = newarray (java.lang.String)[1];

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        $r1[0] = $r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("debugQuery", $r1);

        return;
    }

    public org.apache.solr.client.solrj.SolrQuery setStart(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer r0;
        org.apache.solr.client.solrj.SolrQuery r1;

        r1 := @this: org.apache.solr.client.solrj.SolrQuery;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("start");

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("start", $i0);

     label2:
        return r1;
    }

    public java.lang.Integer getStart()
    {
        java.lang.Integer $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.Integer getInt(java.lang.String)>("start");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setRequestHandler(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>("qt", $r1);

        return r0;
    }

    public java.lang.String getRequestHandler()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>("qt");

        return $r1;
    }

    public org.apache.solr.client.solrj.SolrQuery setQueryType(java.lang.String)
    {
        java.lang.String r1;
        org.apache.solr.client.solrj.SolrQuery r0, $r2;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setRequestHandler(java.lang.String)>(r1);

        return $r2;
    }

    public java.lang.String getQueryType()
    {
        java.lang.String $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String getRequestHandler()>();

        return $r1;
    }

    public transient org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String, java.lang.String[])
    {
        java.lang.String[] r2;
        java.lang.String r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>(r1, r2);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String, boolean)
    {
        java.lang.String r1;
        org.apache.solr.client.solrj.SolrQuery r0;
        boolean z0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,boolean)>(r1, z0);

        return r0;
    }

    public org.apache.solr.client.solrj.SolrQuery getCopy()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.String[] $r6;
        org.apache.solr.client.solrj.SolrQuery $r0, r1;
        java.lang.Object $r4;
        java.lang.String r5;
        boolean $z0;

        r1 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r0 = new org.apache.solr.client.solrj.SolrQuery;

        specialinvoke $r0.<org.apache.solr.client.solrj.SolrQuery: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: java.util.Set getParameterNames()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] getParams(java.lang.String)>(r5);

        virtualinvoke $r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.client.solrj.SolrQuery setParam(java.lang.String,java.lang.String[])>(r5, $r6);

        goto label1;

     label2:
        return $r0;
    }

    public org.apache.solr.client.solrj.SolrQuery setTimeAllowed(java.lang.Integer)
    {
        int $i0;
        java.lang.Integer r0;
        org.apache.solr.client.solrj.SolrQuery r1;

        r1 := @this: org.apache.solr.client.solrj.SolrQuery;

        r0 := @parameter0: java.lang.Integer;

        if r0 != null goto label1;

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: java.lang.String[] remove(java.lang.String)>("timeAllowed");

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,int)>("timeAllowed", $i0);

     label2:
        return r1;
    }

    public java.lang.Integer getTimeAllowed()
    {
        java.lang.Integer $r1;
        org.apache.solr.client.solrj.SolrQuery r0;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        $r1 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.Integer getInt(java.lang.String)>("timeAllowed");

        return $r1;
    }

    private java.lang.String toSortString(java.lang.String, org.apache.solr.client.solrj.SolrQuery$ORDER)
    {
        org.apache.solr.client.solrj.SolrQuery$ORDER r5;
        org.apache.solr.client.solrj.SolrQuery r10;
        java.lang.StringBuilder $r0, $r3, $r4, $r8;
        java.lang.String r1, $r2, $r6, $r7, $r9;

        r10 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.solr.client.solrj.SolrQuery$ORDER;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String join(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.solr.client.solrj.SolrQuery r4;
        int $i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String r1, r2, r3, $r5, $r6;

        r4 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label1:
        if r2 == null goto label2;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        return $r6;
    }

    private org.apache.solr.client.solrj.SolrQuery addValueToParam(java.lang.String, java.lang.String)
    {
        org.apache.solr.client.solrj.SolrQuery r0;
        java.lang.String[] $r5;
        java.lang.String r1, $r2, r3, $r4;

        r0 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String get(java.lang.String)>(r1);

        $r4 = specialinvoke r0.<org.apache.solr.client.solrj.SolrQuery: java.lang.String join(java.lang.String,java.lang.String,java.lang.String)>($r2, r3, ",");

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = $r4;

        virtualinvoke r0.<org.apache.solr.client.solrj.SolrQuery: org.apache.solr.common.params.ModifiableSolrParams set(java.lang.String,java.lang.String[])>(r1, $r5);

        return r0;
    }

    private java.lang.String join(java.lang.String[], java.lang.String, java.lang.String)
    {
        java.lang.String[] r1;
        org.apache.solr.client.solrj.SolrQuery r8;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r2, $r3, r4, $r5, $r6, r7;
        boolean $z0;

        r8 := @this: org.apache.solr.client.solrj.SolrQuery;

        r1 := @parameter0: java.lang.String[];

        r7 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label4;

        $r5 = r1[i2];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label3;

        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

     label2:
        $r6 = r1[i2];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(^|[, ])score");

        <org.apache.solr.client.solrj.SolrQuery: java.util.regex.Pattern scorePattern> = $r0;

        return;
    }
}
