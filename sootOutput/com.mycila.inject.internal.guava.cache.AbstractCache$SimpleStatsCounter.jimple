public class com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter extends java.lang.Object implements com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter
{
    private final java.util.concurrent.atomic.AtomicLong hitCount;
    private final java.util.concurrent.atomic.AtomicLong missCount;
    private final java.util.concurrent.atomic.AtomicLong loadSuccessCount;
    private final java.util.concurrent.atomic.AtomicLong loadExceptionCount;
    private final java.util.concurrent.atomic.AtomicLong totalLoadTime;
    private final java.util.concurrent.atomic.AtomicLong evictionCount;

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3, $r4, $r5, $r6;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong hitCount> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong missCount> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadSuccessCount> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadExceptionCount> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong totalLoadTime> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();

        r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong evictionCount> = $r6;

        return;
    }

    public void recordHit()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong hitCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return;
    }

    public void recordLoadSuccess(long)
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        long l0;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        l0 := @parameter0: long;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong missCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r2 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadSuccessCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r3 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong totalLoadTime>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        return;
    }

    public void recordLoadException(long)
    {
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r3;
        long l0;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        l0 := @parameter0: long;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong missCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r2 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadExceptionCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r3 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong totalLoadTime>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(l0);

        return;
    }

    public void recordConcurrentMiss()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong missCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return;
    }

    public void recordEviction()
    {
        java.util.concurrent.atomic.AtomicLong $r1;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        $r1 = r0.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong evictionCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        return;
    }

    public com.mycila.inject.internal.guava.cache.CacheStats snapshot()
    {
        long $l0, $l1, $l2, $l3, $l4, $l5;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r1;
        java.util.concurrent.atomic.AtomicLong $r2, $r3, $r4, $r5, $r6, $r7;
        com.mycila.inject.internal.guava.cache.CacheStats $r0;

        r1 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        $r0 = new com.mycila.inject.internal.guava.cache.CacheStats;

        $r2 = r1.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong hitCount>;

        $l0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r3 = r1.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong missCount>;

        $l1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r4 = r1.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadSuccessCount>;

        $l2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r5 = r1.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadExceptionCount>;

        $l3 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r6 = r1.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong totalLoadTime>;

        $l4 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $r7 = r1.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong evictionCount>;

        $l5 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.cache.CacheStats: void <init>(long,long,long,long,long,long)>($l0, $l1, $l2, $l3, $l4, $l5);

        return $r0;
    }

    public void incrementBy(com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter)
    {
        long $l0, $l1, $l2, $l3, $l4, $l5;
        com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter r2;
        java.util.concurrent.atomic.AtomicLong $r3, $r4, $r5, $r6, $r7, $r8;
        com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter r0;
        com.mycila.inject.internal.guava.cache.CacheStats $r1;

        r2 := @this: com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter;

        r0 := @parameter0: com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.guava.cache.AbstractCache$StatsCounter: com.mycila.inject.internal.guava.cache.CacheStats snapshot()>();

        $r3 = r2.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong hitCount>;

        $l0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheStats: long hitCount()>();

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l0);

        $r4 = r2.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong missCount>;

        $l1 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheStats: long missCount()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l1);

        $r5 = r2.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadSuccessCount>;

        $l2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheStats: long loadSuccessCount()>();

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l2);

        $r6 = r2.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong loadExceptionCount>;

        $l3 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheStats: long loadExceptionCount()>();

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l3);

        $r7 = r2.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong totalLoadTime>;

        $l4 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheStats: long totalLoadTime()>();

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l4);

        $r8 = r2.<com.mycila.inject.internal.guava.cache.AbstractCache$SimpleStatsCounter: java.util.concurrent.atomic.AtomicLong evictionCount>;

        $l5 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CacheStats: long evictionCount()>();

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l5);

        return;
    }
}
