class com.jmatio.io.ByteBufferInputStream extends java.io.InputStream
{
    private java.nio.ByteBuffer buf;
    private int limit;

    public void <init>(java.nio.ByteBuffer, int)
    {
        int i0;
        com.jmatio.io.ByteBufferInputStream r0;
        java.nio.ByteBuffer r1;

        r0 := @this: com.jmatio.io.ByteBufferInputStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<com.jmatio.io.ByteBufferInputStream: java.nio.ByteBuffer buf> = r1;

        r0.<com.jmatio.io.ByteBufferInputStream: int limit> = i0;

        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        java.nio.ByteBuffer $r1;
        short $s4, $s7;
        byte $b3;
        int $i0, $i1, $i2, $i6, $i8;
        com.jmatio.io.ByteBufferInputStream r0;

        r0 := @this: com.jmatio.io.ByteBufferInputStream;

        $i0 = r0.<com.jmatio.io.ByteBufferInputStream: int limit>;

        if $i0 > 0 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        $i1 = r0.<com.jmatio.io.ByteBufferInputStream: int limit>;

        $i2 = $i1 - 1;

        r0.<com.jmatio.io.ByteBufferInputStream: int limit> = $i2;

        $r1 = r0.<com.jmatio.io.ByteBufferInputStream: java.nio.ByteBuffer buf>;

        $b3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $s7 = (short) $b3;

        $s4 = $s7 & 255;

        $i8 = (int) $s4;

        return $i8;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        java.nio.ByteBuffer $r2;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i8;
        com.jmatio.io.ByteBufferInputStream r0;

        r0 := @this: com.jmatio.io.ByteBufferInputStream;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i6 := @parameter2: int;

        $i0 = r0.<com.jmatio.io.ByteBufferInputStream: int limit>;

        if $i0 > 0 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $i1 = r0.<com.jmatio.io.ByteBufferInputStream: int limit>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i6, $i1);

        $r2 = r0.<com.jmatio.io.ByteBufferInputStream: java.nio.ByteBuffer buf>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i3, $i2);

        $i4 = r0.<com.jmatio.io.ByteBufferInputStream: int limit>;

        $i5 = $i4 - $i2;

        r0.<com.jmatio.io.ByteBufferInputStream: int limit> = $i5;

        return $i2;
    }
}
