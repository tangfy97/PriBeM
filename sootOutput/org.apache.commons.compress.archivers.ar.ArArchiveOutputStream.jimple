public class org.apache.commons.compress.archivers.ar.ArArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream
{
    public static final int LONGFILE_ERROR;
    public static final int LONGFILE_BSD;
    private final java.io.OutputStream out;
    private long entryOffset;
    private org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry;
    private boolean haveUnclosedEntry;
    private int longFileMode;
    private boolean finished;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveOutputStream: void <init>()>();

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset> = 0L;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean haveUnclosedEntry> = 0;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: int longFileMode> = 0;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished> = 0;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: java.io.OutputStream out> = r1;

        return;
    }

    public void setLongFileMode(int)
    {
        int i0;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        i0 := @parameter0: int;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: int longFileMode> = i0;

        return;
    }

    private long writeArchiveHeader() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r0;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r1;
        int $i0;
        long $l1;

        r1 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        $r0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: byte[] toAsciiBytes(java.lang.String)>("!<arch>\n");

        $r2 = r1.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r0);

        $i0 = lengthof $r0;

        $l1 = (long) $i0;

        return $l1;
    }

    public void closeArchiveEntry() throws java.io.IOException
    {
        java.io.OutputStream $r3;
        java.io.IOException $r2, $r4;
        long $l0, $l1;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        byte $b2;
        org.apache.commons.compress.archivers.ar.ArArchiveEntry $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r4;

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry>;

        if $r1 == null goto label2;

        $z1 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean haveUnclosedEntry>;

        if $z1 != 0 goto label3;

     label2:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("No current entry to close");

        throw $r2;

     label3:
        $l0 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset>;

        $l1 = $l0 % 2L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        $r3 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void write(int)>(10);

     label4:
        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean haveUnclosedEntry> = 0;

        return;
    }

    public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.ArchiveEntry r1;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.io.IOException $r5, $r13;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        org.apache.commons.compress.archivers.ar.ArArchiveEntry r2, $r3, $r4, $r8;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $z0 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r13;

     label1:
        r2 = (org.apache.commons.compress.archivers.ar.ArArchiveEntry) r1;

        $r3 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry>;

        if $r3 != null goto label2;

        specialinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long writeArchiveHeader()>();

        goto label4;

     label2:
        $r4 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry>;

        $l0 = virtualinvoke $r4.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: long getLength()>();

        $l1 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label3;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length does not match entry (");

        $r8 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry>;

        $l3 = virtualinvoke $r8.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: long getLength()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $l4 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label3:
        $z1 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean haveUnclosedEntry>;

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: void closeArchiveEntry()>();

     label4:
        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry> = r2;

        specialinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry)>(r2);

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset> = 0L;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean haveUnclosedEntry> = 1;

        return;
    }

    private long fill(long, long, char) throws java.io.IOException
    {
        long l0, l1, l2, $l4;
        char c6;
        byte $b3, $b5;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        int i7, $i8, $i9, $i10;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        l1 := @parameter0: long;

        l0 := @parameter1: long;

        c6 := @parameter2: char;

        l2 = l0 - l1;

        $b3 = l2 cmp 0L;

        $i8 = (int) $b3;

        if $i8 <= 0 goto label2;

        i7 = 0;

     label1:
        $l4 = (long) i7;

        $b5 = $l4 cmp l2;

        $i9 = (int) $b5;

        if $i9 >= 0 goto label2;

        $i10 = (int) c6;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: void write(int)>($i10);

        i7 = i7 + 1;

        goto label1;

     label2:
        return l0;
    }

    private long write(java.lang.String) throws java.io.IOException
    {
        byte[] $r1;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r2;
        int $i0;
        long $l1;
        java.lang.String r0;

        r2 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("ascii");

        virtualinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: void write(byte[])>($r1);

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    private long writeEntryHeader(org.apache.commons.compress.archivers.ar.ArArchiveEntry) throws java.io.IOException
    {
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r12, $r14, $r23, $r25, $r29, $r30, $r33, $r34, $r36, $r38, $r39, $r41, $r43, $r45;
        long $l2, $l3, $l4, $l7, $l8, $l11, $l12, $l15, $l16, $l17, $l18, $l19, $l21, $l22, $l23, $l24, $l27, l30, $l31, $l32, l34, l35, l36, l37, l39, l40;
        java.lang.String $r1, $r6, $r10, $r13, $r15, $r16, $r24, $r26, $r31, $r35;
        java.io.IOException $r37, $r40, $r42, $r44, $r46, $r47;
        boolean z0, z1, z2;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r2;
        int $i0, $i1, $i5, $i6, $i9, $i10, $i13, $i14, $i20, $i25, $i26, $i28, $i29, $i33, $i38, $i42;
        org.apache.commons.compress.archivers.ar.ArArchiveEntry r0;

        r2 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        r0 := @parameter0: org.apache.commons.compress.archivers.ar.ArArchiveEntry;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: java.lang.String getName()>();

        $i0 = r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: int longFileMode>;

        if 0 != $i0 goto label01;

        $i29 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i29 <= 16 goto label01;

        $r37 = new java.io.IOException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("filename too long, > 16 chars: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r37;

     label01:
        $i1 = r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: int longFileMode>;

        if 1 != $i1 goto label03;

        $i25 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i25 > 16 goto label02;

        $i28 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(" ");

        $i42 = (int) -1;

        if $i28 <= $i42 goto label03;

     label02:
        z0 = 1;

        z2 = 1;

        z1 = 1;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#1/");

        $i26 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i26);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $l27 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r26);

        l30 = 0L + $l27;

        goto label04;

     label03:
        $l2 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r1);

        l30 = 0L + $l2;

     label04:
        $l31 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long fill(long,long,char)>(l30, 16L, 32);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $l32 = virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: long getLastModified()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l32);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $i33 = virtualinvoke $r35.<java.lang.String: int length()>();

        if $i33 <= 12 goto label05;

        $r40 = new java.io.IOException;

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>("modified too long");

        throw $r40;

     label05:
        $l3 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r35);

        l34 = $l31 + $l3;

        $l4 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long fill(long,long,char)>(l34, 28L, 32);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i5 = virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: int getUserId()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i6 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i6 <= 6 goto label06;

        $r42 = new java.io.IOException;

        specialinvoke $r42.<java.io.IOException: void <init>(java.lang.String)>("userid too long");

        throw $r42;

     label06:
        $l7 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r6);

        l35 = $l4 + $l7;

        $l8 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long fill(long,long,char)>(l35, 34L, 32);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i9 = virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: int getGroupId()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i10 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i10 <= 6 goto label07;

        $r44 = new java.io.IOException;

        specialinvoke $r44.<java.io.IOException: void <init>(java.lang.String)>("groupid too long");

        throw $r44;

     label07:
        $l11 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r10);

        l36 = $l8 + $l11;

        $l12 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long fill(long,long,char)>(l36, 40L, 32);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i13 = virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: int getMode()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i13, 8);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $i14 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i14 <= 8 goto label08;

        $r46 = new java.io.IOException;

        specialinvoke $r46.<java.io.IOException: void <init>(java.lang.String)>("filemode too long");

        throw $r46;

     label08:
        $l15 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r15);

        l37 = $l12 + $l15;

        $l16 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long fill(long,long,char)>(l37, 48L, 32);

        $l17 = virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: long getLength()>();

        if z1 == 0 goto label09;

        $i38 = virtualinvoke $r1.<java.lang.String: int length()>();

        goto label10;

     label09:
        $i38 = 0;

     label10:
        $l18 = (long) $i38;

        $l19 = $l17 + $l18;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l19);

        $i20 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i20 <= 10 goto label11;

        $r47 = new java.io.IOException;

        specialinvoke $r47.<java.io.IOException: void <init>(java.lang.String)>("size too long");

        throw $r47;

     label11:
        $l21 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r16);

        l39 = $l16 + $l21;

        $l22 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long fill(long,long,char)>(l39, 58L, 32);

        $l23 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>("`\n");

        l40 = $l22 + $l23;

        if z2 == 0 goto label12;

        $l24 = specialinvoke r2.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long write(java.lang.String)>($r1);

        l40 = l40 + $l24;

     label12:
        return l40;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        long $l2, $l3, $l4;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        int i0, i1;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: void count(int)>(i1);

        $l3 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset>;

        $l2 = (long) i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: long entryOffset> = $l4;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: void finish()>();

     label1:
        $r1 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: org.apache.commons.compress.archivers.ar.ArArchiveEntry prevEntry> = null;

        return;
    }

    public org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        org.apache.commons.compress.archivers.ar.ArArchiveEntry $r1;
        java.io.IOException $r4;
        java.lang.String r3;
        java.io.File r2;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        r2 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        $z0 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Stream has already been finished");

        throw $r4;

     label1:
        $r1 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry;

        specialinvoke $r1.<org.apache.commons.compress.archivers.ar.ArArchiveEntry: void <init>(java.io.File,java.lang.String)>(r2, r3);

        return $r1;
    }

    public void finish() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream r0;
        java.io.IOException $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean haveUnclosedEntry>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("This archive contains unclosed entries.");

        throw $r2;

     label1:
        $z1 = r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished>;

        if $z1 == 0 goto label2;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("This archive has already been finished");

        throw $r1;

     label2:
        r0.<org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: boolean finished> = 1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: int LONGFILE_BSD> = 1;

        <org.apache.commons.compress.archivers.ar.ArArchiveOutputStream: int LONGFILE_ERROR> = 0;

        return;
    }
}
