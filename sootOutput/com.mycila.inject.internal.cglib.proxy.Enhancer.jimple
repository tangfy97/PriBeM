public class com.mycila.inject.internal.cglib.proxy.Enhancer extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.proxy.CallbackFilter ALL_ZERO;
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private static final com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey KEY_FACTORY;
    private static final java.lang.String BOUND_FIELD;
    private static final java.lang.String THREAD_CALLBACKS_FIELD;
    private static final java.lang.String STATIC_CALLBACKS_FIELD;
    private static final java.lang.String SET_THREAD_CALLBACKS_NAME;
    private static final java.lang.String SET_STATIC_CALLBACKS_NAME;
    private static final java.lang.String CONSTRUCTED_FIELD;
    private static final com.mycila.inject.internal.asm.Type FACTORY;
    private static final com.mycila.inject.internal.asm.Type ILLEGAL_STATE_EXCEPTION;
    private static final com.mycila.inject.internal.asm.Type ILLEGAL_ARGUMENT_EXCEPTION;
    private static final com.mycila.inject.internal.asm.Type THREAD_LOCAL;
    private static final com.mycila.inject.internal.asm.Type CALLBACK;
    private static final com.mycila.inject.internal.asm.Type CALLBACK_ARRAY;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL;
    private static final com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS;
    private static final com.mycila.inject.internal.cglib.core.Signature SET_STATIC_CALLBACKS;
    private static final com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE;
    private static final com.mycila.inject.internal.cglib.core.Signature MULTIARG_NEW_INSTANCE;
    private static final com.mycila.inject.internal.cglib.core.Signature SINGLE_NEW_INSTANCE;
    private static final com.mycila.inject.internal.cglib.core.Signature SET_CALLBACK;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_CALLBACK;
    private static final com.mycila.inject.internal.cglib.core.Signature SET_CALLBACKS;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_CALLBACKS;
    private static final com.mycila.inject.internal.cglib.core.Signature THREAD_LOCAL_GET;
    private static final com.mycila.inject.internal.cglib.core.Signature THREAD_LOCAL_SET;
    private static final com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS;
    private java.lang.Class[] interfaces;
    private com.mycila.inject.internal.cglib.proxy.CallbackFilter filter;
    private com.mycila.inject.internal.cglib.proxy.Callback[] callbacks;
    private com.mycila.inject.internal.asm.Type[] callbackTypes;
    private boolean classOnly;
    private java.lang.Class superclass;
    private java.lang.Class[] argumentTypes;
    private java.lang.Object[] arguments;
    private boolean useFactory;
    private java.lang.Long serialVersionUID;
    private boolean interceptDuringConstruction;
    static java.lang.Class class$net$sf$cglib$proxy$Enhancer;
    static java.lang.Class class$net$sf$cglib$proxy$Enhancer$EnhancerKey;
    static java.lang.Class array$Lnet$sf$cglib$proxy$Callback;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$net$sf$cglib$proxy$Factory;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean useFactory> = 1;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean interceptDuringConstruction> = 1;

        return;
    }

    public void setSuperclass(java.lang.Class)
    {
        java.lang.Class[] $r3;
        java.lang.Class r0, $r2, $r4;
        com.mycila.inject.internal.cglib.proxy.Enhancer r1;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label1;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = r0;

        virtualinvoke r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setInterfaces(java.lang.Class[])>($r3);

        goto label5;

     label1:
        if r0 == null goto label4;

        $r2 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$java$lang$Object>;

        if $r2 != null goto label2;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$java$lang$Object> = $r4;

        goto label3;

     label2:
        $r4 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$java$lang$Object>;

     label3:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

        r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass> = null;

        goto label5;

     label4:
        r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass> = r0;

     label5:
        return;
    }

    public void setInterfaces(java.lang.Class[])
    {
        java.lang.Class[] r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter0: java.lang.Class[];

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces> = r1;

        return;
    }

    public void setCallbackFilter(com.mycila.inject.internal.cglib.proxy.CallbackFilter)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        com.mycila.inject.internal.cglib.proxy.CallbackFilter r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter0: com.mycila.inject.internal.cglib.proxy.CallbackFilter;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter filter> = r1;

        return;
    }

    public void setCallback(com.mycila.inject.internal.cglib.proxy.Callback)
    {
        com.mycila.inject.internal.cglib.proxy.Callback[] $r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        com.mycila.inject.internal.cglib.proxy.Callback r2;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r2 := @parameter0: com.mycila.inject.internal.cglib.proxy.Callback;

        $r1 = newarray (com.mycila.inject.internal.cglib.proxy.Callback)[1];

        $r1[0] = r2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallbacks(com.mycila.inject.internal.cglib.proxy.Callback[])>($r1);

        return;
    }

    public void setCallbacks(com.mycila.inject.internal.cglib.proxy.Callback[])
    {
        int $i0;
        com.mycila.inject.internal.cglib.proxy.Callback[] r0;
        com.mycila.inject.internal.cglib.proxy.Enhancer r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Callback[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty");

        throw $r2;

     label1:
        r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks> = r0;

        return;
    }

    public void setUseFactory(boolean)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        z0 := @parameter0: boolean;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean useFactory> = z0;

        return;
    }

    public void setInterceptDuringConstruction(boolean)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        z0 := @parameter0: boolean;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean interceptDuringConstruction> = z0;

        return;
    }

    public void setCallbackType(java.lang.Class)
    {
        java.lang.Class[] $r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Class r2;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r2 := @parameter0: java.lang.Class;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = r2;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallbackTypes(java.lang.Class[])>($r1);

        return;
    }

    public void setCallbackTypes(java.lang.Class[])
    {
        int $i0;
        java.lang.Class[] r0;
        com.mycila.inject.internal.cglib.proxy.Enhancer r1;
        com.mycila.inject.internal.asm.Type[] $r2;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: java.lang.Class[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Array cannot be empty");

        throw $r3;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.cglib.proxy.CallbackInfo: com.mycila.inject.internal.asm.Type[] determineTypes(java.lang.Class[])>(r0);

        r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes> = $r2;

        return;
    }

    public java.lang.Object create()
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Object $r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly> = 0;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] argumentTypes> = null;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object createHelper()>();

        return $r1;
    }

    public java.lang.Object create(java.lang.Class[], java.lang.Object[])
    {
        java.lang.Object[] r2;
        int $i0, $i1;
        java.lang.Class[] r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter0: java.lang.Class[];

        r2 := @parameter1: java.lang.Object[];

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly> = 0;

        if r1 == null goto label1;

        if r2 == null goto label1;

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Arguments must be non-null and of equal length");

        throw $r4;

     label2:
        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] argumentTypes> = r1;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object[] arguments> = r2;

        $r3 = specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object createHelper()>();

        return $r3;
    }

    public java.lang.Class createClass()
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly> = 1;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object createHelper()>();

        $r2 = (java.lang.Class) $r1;

        return $r2;
    }

    public void setSerialVersionUID(java.lang.Long)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Long r1;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter0: java.lang.Long;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Long serialVersionUID> = r1;

        return;
    }

    private void validate()
    {
        java.lang.IllegalStateException $r10, $r17, $r20, $r31, $r41, $r43, $r44, $r45;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        com.mycila.inject.internal.cglib.proxy.Callback[] $r1, $r2, $r3, $r21, $r24, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.mycila.inject.internal.cglib.proxy.CallbackFilter $r19, $r46;
        com.mycila.inject.internal.asm.Type $r29, $r30, $r34, $r38;
        java.lang.StringBuffer $r11, $r14, $r15, $r32, $r33, $r35, $r36, $r39;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r16, $r40;
        com.mycila.inject.internal.asm.Type[] $r18, $r22, $r23, $r25, $r27, $r28, $r37, $r42;
        java.lang.Class[] $r4, $r5, $r6, $r8, $r12;
        java.lang.Class $r7, $r9, $r13;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        $z0 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly>;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        if $r1 != null goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $z1 = $z0 ^ $z6;

        if $z1 == 0 goto label04;

        $z5 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly>;

        if $z5 == 0 goto label03;

        $r45 = new java.lang.IllegalStateException;

        specialinvoke $r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>("createClass does not accept callbacks");

        throw $r45;

     label03:
        $r44 = new java.lang.IllegalStateException;

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Callbacks are required");

        throw $r44;

     label04:
        $z2 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly>;

        if $z2 == 0 goto label05;

        $r42 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        if $r42 != null goto label05;

        $r43 = new java.lang.IllegalStateException;

        specialinvoke $r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Callback types are required");

        throw $r43;

     label05:
        $r2 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        if $r2 == null goto label10;

        $r23 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        if $r23 == null goto label10;

        $r24 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        $i3 = lengthof $r24;

        $r25 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i2 = lengthof $r25;

        if $i3 == $i2 goto label06;

        $r41 = new java.lang.IllegalStateException;

        specialinvoke $r41.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Lengths of callback and callback types array must be the same");

        throw $r41;

     label06:
        $r26 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        $r27 = staticinvoke <com.mycila.inject.internal.cglib.proxy.CallbackInfo: com.mycila.inject.internal.asm.Type[] determineTypes(com.mycila.inject.internal.cglib.proxy.Callback[])>($r26);

        i5 = 0;

     label07:
        $i4 = lengthof $r27;

        if i5 >= $i4 goto label09;

        $r30 = $r27[i5];

        $r28 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $r29 = $r28[i5];

        $z4 = virtualinvoke $r30.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r29);

        if $z4 != 0 goto label08;

        $r31 = new java.lang.IllegalStateException;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Callback ");

        $r34 = $r27[i5];

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not assignable to ");

        $r37 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $r38 = $r37[i5];

        $r39 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r40);

        throw $r31;

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        goto label11;

     label10:
        $r3 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        if $r3 == null goto label11;

        $r21 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        $r22 = staticinvoke <com.mycila.inject.internal.cglib.proxy.CallbackInfo: com.mycila.inject.internal.asm.Type[] determineTypes(com.mycila.inject.internal.cglib.proxy.Callback[])>($r21);

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes> = $r22;

     label11:
        $r46 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter filter>;

        if $r46 != null goto label13;

        $r18 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i1 = lengthof $r18;

        if $i1 <= 1 goto label12;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Multiple callback types possible but no filter specified");

        throw $r20;

     label12:
        $r19 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter ALL_ZERO>;

        r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter filter> = $r19;

     label13:
        $r4 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        if $r4 == null goto label17;

        i6 = 0;

     label14:
        $r5 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $i0 = lengthof $r5;

        if i6 >= $i0 goto label17;

        $r6 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r7 = $r6[i6];

        if $r7 != null goto label15;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Interfaces cannot be null");

        throw $r17;

     label15:
        $r8 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r9 = $r8[i6];

        $z3 = virtualinvoke $r9.<java.lang.Class: boolean isInterface()>();

        if $z3 != 0 goto label16;

        $r10 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r13 = $r12[i6];

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an interface");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label16:
        i6 = i6 + 1;

        goto label14;

     label17:
        return;
    }

    private java.lang.Object createHelper()
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.String[] $r5;
        com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey $r4;
        java.lang.Long $r6;
        int $i0;
        java.lang.String $r15, $r17, $r19;
        com.mycila.inject.internal.asm.Type[] $r7;
        boolean $z0, $z1;
        java.lang.Class[] $r2, $r3, $r12, $r13;
        com.mycila.inject.internal.cglib.proxy.CallbackFilter $r8;
        java.lang.Class $r1, $r11, $r14, $r16, $r18;
        java.lang.Object $r9, $r10;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void validate()>();

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        if $r1 == null goto label1;

        $r16 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setNamePrefix(java.lang.String)>($r17);

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        if $r2 == null goto label2;

        $r13 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r12 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $i0 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: int findPackageProtected(java.lang.Class[])>($r12);

        $r14 = $r13[$i0];

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setNamePrefix(java.lang.String)>($r15);

     label2:
        $r4 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey KEY_FACTORY>;

        $r18 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        if $r18 == null goto label3;

        $r11 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        $r19 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        goto label4;

     label3:
        $r19 = null;

     label4:
        $r3 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.String[] getNames(java.lang.Class[])>($r3);

        $r8 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter filter>;

        $r7 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $z1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean useFactory>;

        $z0 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean interceptDuringConstruction>;

        $r6 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Long serialVersionUID>;

        $r9 = interfaceinvoke $r4.<com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey: java.lang.Object newInstance(java.lang.String,java.lang.String[],com.mycila.inject.internal.cglib.proxy.CallbackFilter,com.mycila.inject.internal.asm.Type[],boolean,boolean,java.lang.Long)>($r19, $r5, $r8, $r7, $z1, $z0, $r6);

        $r10 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r9);

        return $r10;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        java.lang.Class[] $r2, $r3;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Class $r1, $r4, $r6;
        java.lang.ClassLoader $r5, $r7;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        if $r1 == null goto label1;

        $r6 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r7;

     label1:
        $r2 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        if $r2 == null goto label2;

        $r3 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r5;

     label2:
        return null;
    }

    private com.mycila.inject.internal.cglib.core.Signature rename(com.mycila.inject.internal.cglib.core.Signature, int)
    {
        com.mycila.inject.internal.cglib.core.Signature $r0, r3;
        com.mycila.inject.internal.cglib.proxy.Enhancer r10;
        java.lang.StringBuffer $r1, $r2, $r5, $r6, $r7;
        int i0;
        java.lang.String $r4, $r8, $r9;

        r10 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r3 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        i0 := @parameter1: int;

        $r0 = new com.mycila.inject.internal.cglib.core.Signature;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CGLIB$");

        $r4 = virtualinvoke r3.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke r3.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)>($r8, $r9);

        return $r0;
    }

    public static void getMethods(java.lang.Class, java.lang.Class[], java.util.List)
    {
        java.lang.Class[] r1;
        java.lang.Class r0;
        java.util.List r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.util.List;

        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void getMethods(java.lang.Class,java.lang.Class[],java.util.List,java.util.List,java.util.Set)>(r0, r1, r2, null, null);

        return;
    }

    private static void getMethods(java.lang.Class, java.lang.Class[], java.util.List, java.util.List, java.util.Set)
    {
        int $i0, i1;
        java.lang.Class[] r4;
        java.util.Set r5, $r6;
        com.mycila.inject.internal.cglib.core.VisibilityPredicate $r13;
        java.util.List r1, r2, r3, $r10;
        com.mycila.inject.internal.cglib.core.DuplicatesPredicate $r14;
        java.lang.Class r0, $r7, $r8, $r9, $r11;
        com.mycila.inject.internal.cglib.core.RejectModifierPredicate $r12, $r15;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.Class[];

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: java.util.List;

        r5 := @parameter4: java.util.Set;

        staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)>(r0, r1);

        if r2 == null goto label1;

        $r10 = r2;

        goto label2;

     label1:
        $r10 = r1;

     label2:
        r3 = $r10;

        if r4 == null goto label7;

        i1 = 0;

     label3:
        $i0 = lengthof r4;

        if i1 >= $i0 goto label7;

        $r8 = r4[i1];

        $r7 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Factory>;

        if $r7 != null goto label4;

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.Factory");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Factory> = $r11;

        goto label5;

     label4:
        $r11 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Factory>;

     label5:
        if $r8 == $r11 goto label6;

        $r9 = r4[i1];

        staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)>($r9, r3);

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        if r2 == null goto label9;

        if r5 == null goto label8;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.MethodWrapper: java.util.Set createSet(java.util.Collection)>(r2);

        interfaceinvoke r5.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label8:
        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>(r2);

     label9:
        $r12 = new com.mycila.inject.internal.cglib.core.RejectModifierPredicate;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.core.RejectModifierPredicate: void <init>(int)>(8);

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Collection filter(java.util.Collection,com.mycila.inject.internal.cglib.core.Predicate)>(r1, $r12);

        $r13 = new com.mycila.inject.internal.cglib.core.VisibilityPredicate;

        specialinvoke $r13.<com.mycila.inject.internal.cglib.core.VisibilityPredicate: void <init>(java.lang.Class,boolean)>(r0, 1);

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Collection filter(java.util.Collection,com.mycila.inject.internal.cglib.core.Predicate)>(r1, $r13);

        $r14 = new com.mycila.inject.internal.cglib.core.DuplicatesPredicate;

        specialinvoke $r14.<com.mycila.inject.internal.cglib.core.DuplicatesPredicate: void <init>()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Collection filter(java.util.Collection,com.mycila.inject.internal.cglib.core.Predicate)>(r1, $r14);

        $r15 = new com.mycila.inject.internal.cglib.core.RejectModifierPredicate;

        specialinvoke $r15.<com.mycila.inject.internal.cglib.core.RejectModifierPredicate: void <init>(int)>(16);

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Collection filter(java.util.Collection,com.mycila.inject.internal.cglib.core.Predicate)>(r1, $r15);

        return;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Long $r21, $r26;
        int[] $r22;
        com.mycila.inject.internal.cglib.proxy.Enhancer$2 $r9;
        com.mycila.inject.internal.cglib.core.MethodInfoTransformer $r16;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r4, $r10, $r17;
        com.mycila.inject.internal.asm.Type $r14, $r18, $r19, $r20, $r25, $r27, $r28, $r31;
        java.util.ArrayList $r2, $r5, $r6;
        java.lang.reflect.Constructor[] $r3;
        java.util.HashSet $r7;
        java.lang.StringBuffer $r33, $r34, $r35;
        int $i0, i1, $i2;
        java.lang.String $r13, $r23, $r36;
        com.mycila.inject.internal.asm.Type[] $r24, $r30, $r40, $r41;
        com.mycila.inject.internal.asm.ClassVisitor r12;
        java.lang.Class[] $r8, $r15, $r29;
        java.lang.IllegalArgumentException $r32;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r11;
        java.lang.Class $r1, $r37, $r38, $r39;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r12 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

        if $r1 != null goto label02;

        $r37 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$java$lang$Object>;

        if $r37 != null goto label01;

        $r38 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        $r39 = $r38;

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$java$lang$Object> = $r38;

        goto label03;

     label01:
        $r39 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$java$lang$Object>;

        goto label03;

     label02:
        $r39 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class superclass>;

     label03:
        $i0 = virtualinvoke $r39.<java.lang.Class: int getModifiers()>();

        $z3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isFinal(int)>($i0);

        if $z3 == 0 goto label04;

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = new java.lang.StringBuffer;

        specialinvoke $r33.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot subclass final class ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r39);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36);

        throw $r32;

     label04:
        $r2 = new java.util.ArrayList;

        $r3 = virtualinvoke $r39.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void filterConstructors(java.lang.Class,java.util.List)>($r39, $r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r8 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void getMethods(java.lang.Class,java.lang.Class[],java.util.List,java.util.List,java.util.Set)>($r39, $r8, $r5, $r6, $r7);

        $r9 = new com.mycila.inject.internal.cglib.proxy.Enhancer$2;

        specialinvoke $r9.<com.mycila.inject.internal.cglib.proxy.Enhancer$2: void <init>(com.mycila.inject.internal.cglib.proxy.Enhancer,java.util.Set)>(r0, $r7);

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.List transform(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>($r5, $r9);

        $r11 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r12);

        $r13 = virtualinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getClassName()>();

        $r14 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r39);

        $z0 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean useFactory>;

        if $z0 == 0 goto label05;

        $r29 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r30 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])>($r29);

        $r31 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type FACTORY>;

        $r40 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] add(com.mycila.inject.internal.asm.Type[],com.mycila.inject.internal.asm.Type)>($r30, $r31);

        goto label06;

     label05:
        $r15 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] interfaces>;

        $r40 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] getTypes(java.lang.Class[])>($r15);

     label06:
        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r13, $r14, $r40, "<generated>");

        $r16 = staticinvoke <com.mycila.inject.internal.cglib.core.MethodInfoTransformer: com.mycila.inject.internal.cglib.core.MethodInfoTransformer getInstance()>();

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.List transform(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>($r2, $r16);

        $r18 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BOOLEAN_TYPE>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(2, "CGLIB$BOUND", $r18, null);

        $z1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean interceptDuringConstruction>;

        if $z1 != 0 goto label07;

        $r28 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BOOLEAN_TYPE>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(2, "CGLIB$CONSTRUCTED", $r28, null);

     label07:
        $r19 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type THREAD_LOCAL>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "CGLIB$THREAD_CALLBACKS", $r19, null);

        $r20 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "CGLIB$STATIC_CALLBACKS", $r20, null);

        $r21 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Long serialVersionUID>;

        if $r21 == null goto label08;

        $r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        $r26 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Long serialVersionUID>;

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "serialVersionUID", $r27, $r26);

     label08:
        i1 = 0;

     label09:
        $r41 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i2 = lengthof $r41;

        if i1 >= $i2 goto label10;

        $r23 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i1);

        $r24 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $r25 = $r24[i1];

        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(2, $r23, $r25, null);

        i1 = i1 + 1;

        goto label09;

     label10:
        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitMethods(com.mycila.inject.internal.cglib.core.ClassEmitter,java.util.List,java.util.List)>($r11, $r10, $r5);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitConstructors(com.mycila.inject.internal.cglib.core.ClassEmitter,java.util.List)>($r11, $r17);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitSetThreadCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitSetStaticCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitBindCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        $z2 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean useFactory>;

        if $z2 == 0 goto label11;

        $r22 = specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: int[] getCallbackKeys()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitNewInstanceCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitNewInstanceCallback(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitNewInstanceMultiarg(com.mycila.inject.internal.cglib.core.ClassEmitter,java.util.List)>($r11, $r17);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitGetCallback(com.mycila.inject.internal.cglib.core.ClassEmitter,int[])>($r11, $r22);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitSetCallback(com.mycila.inject.internal.cglib.core.ClassEmitter,int[])>($r11, $r22);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitGetCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitSetCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r11);

     label11:
        virtualinvoke $r11.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    protected void filterConstructors(java.lang.Class, java.util.List)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r8;
        java.lang.IllegalArgumentException $r3;
        com.mycila.inject.internal.cglib.core.VisibilityPredicate $r1;
        java.util.List r0;
        java.lang.StringBuffer $r4, $r5, $r6;
        int $i0;
        java.lang.Class r2;
        java.lang.String $r7;

        r8 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.List;

        $r1 = new com.mycila.inject.internal.cglib.core.VisibilityPredicate;

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.VisibilityPredicate: void <init>(java.lang.Class,boolean)>(r2, 1);

        staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Collection filter(java.util.Collection,com.mycila.inject.internal.cglib.core.Predicate)>(r0, $r1);

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No visible constructors in ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    protected java.lang.Object firstInstance(java.lang.Class) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter0: java.lang.Class;

        $z0 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly>;

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object createUsingReflection(java.lang.Class)>(r1);

        return $r2;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        java.lang.Object[] $r8;
        com.mycila.inject.internal.cglib.proxy.Enhancer r1;
        com.mycila.inject.internal.cglib.proxy.Callback[] $r4, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r3, $r9;
        com.mycila.inject.internal.cglib.proxy.Factory $r5, $r10;
        java.lang.Object r0, $r2, $r6, $r11;
        java.lang.Class $r12;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r12 = (java.lang.Class) r0;

        goto label2;

     label1:
        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $z1 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly>;

        if $z1 == 0 goto label3;

        return $r12;

     label3:
        $z2 = r0 instanceof com.mycila.inject.internal.cglib.proxy.Factory;

        if $z2 == 0 goto label5;

        $r3 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] argumentTypes>;

        if $r3 == null goto label4;

        $r10 = (com.mycila.inject.internal.cglib.proxy.Factory) r0;

        $r9 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] argumentTypes>;

        $r8 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object[] arguments>;

        $r7 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        $r11 = interfaceinvoke $r10.<com.mycila.inject.internal.cglib.proxy.Factory: java.lang.Object newInstance(java.lang.Class[],java.lang.Object[],com.mycila.inject.internal.cglib.proxy.Callback[])>($r9, $r8, $r7);

        return $r11;

     label4:
        $r5 = (com.mycila.inject.internal.cglib.proxy.Factory) r0;

        $r4 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        $r6 = interfaceinvoke $r5.<com.mycila.inject.internal.cglib.proxy.Factory: java.lang.Object newInstance(com.mycila.inject.internal.cglib.proxy.Callback[])>($r4);

        return $r6;

     label5:
        $r2 = specialinvoke r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object createUsingReflection(java.lang.Class)>($r12);

        return $r2;
    }

    public static void registerCallbacks(java.lang.Class, com.mycila.inject.internal.cglib.proxy.Callback[])
    {
        com.mycila.inject.internal.cglib.proxy.Callback[] r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.mycila.inject.internal.cglib.proxy.Callback[];

        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setThreadCallbacks(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[])>(r0, r1);

        return;
    }

    public static void registerStaticCallbacks(java.lang.Class, com.mycila.inject.internal.cglib.proxy.Callback[])
    {
        com.mycila.inject.internal.cglib.proxy.Callback[] r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.mycila.inject.internal.cglib.proxy.Callback[];

        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallbacksHelper(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[],java.lang.String)>(r0, r1, "CGLIB$SET_STATIC_CALLBACKS");

        return;
    }

    public static boolean isEnhanced(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.NoSuchMethodException $r1;

        r0 := @parameter0: java.lang.Class;

     label1:
        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.reflect.Method getCallbacksSetter(java.lang.Class,java.lang.String)>(r0, "CGLIB$SET_THREAD_CALLBACKS");

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static void setThreadCallbacks(java.lang.Class, com.mycila.inject.internal.cglib.proxy.Callback[])
    {
        com.mycila.inject.internal.cglib.proxy.Callback[] r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: com.mycila.inject.internal.cglib.proxy.Callback[];

        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallbacksHelper(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[],java.lang.String)>(r0, r1, "CGLIB$SET_THREAD_CALLBACKS");

        return;
    }

    private static void setCallbacksHelper(java.lang.Class, com.mycila.inject.internal.cglib.proxy.Callback[], java.lang.String)
    {
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] $r3;
        java.lang.NoSuchMethodException $r9;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r6, $r8;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.InvocationTargetException $r5;
        java.lang.StringBuffer $r11, $r12, $r13;
        com.mycila.inject.internal.cglib.proxy.Callback[] r4;
        java.lang.Class r0;
        java.lang.String r1, $r14;
        java.lang.reflect.Method $r2;

        r0 := @parameter0: java.lang.Class;

        r4 := @parameter1: com.mycila.inject.internal.cglib.proxy.Callback[];

        r1 := @parameter2: java.lang.String;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.reflect.Method getCallbacksSetter(java.lang.Class,java.lang.String)>(r0, r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an enhanced class");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label4:
        $r7 := @caughtexception;

        $r8 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label5:
        $r5 := @caughtexception;

        $r6 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r6.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    private static java.lang.reflect.Method getCallbacksSetter(java.lang.Class, java.lang.String) throws java.lang.NoSuchMethodException
    {
        java.lang.Class[] $r2;
        java.lang.Class r0, $r3, $r5;
        java.lang.String r1;
        java.lang.reflect.Method $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.Class)[1];

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class array$Lnet$sf$cglib$proxy$Callback>;

        if $r3 != null goto label1;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("[Lcom.mycila.inject.internal.cglib.proxy.Callback;");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class array$Lnet$sf$cglib$proxy$Callback> = $r5;

        goto label2;

     label1:
        $r5 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class array$Lnet$sf$cglib$proxy$Callback>;

     label2:
        $r2[0] = $r5;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, $r2);

        return $r4;
    }

    private java.lang.Object createUsingReflection(java.lang.Class)
    {
        java.lang.Throwable $r8;
        java.lang.Object[] $r5;
        java.lang.Class[] $r3, $r6;
        com.mycila.inject.internal.cglib.proxy.Enhancer r1;
        com.mycila.inject.internal.cglib.proxy.Callback[] $r2;
        java.lang.Class r0;
        java.lang.Object $r4, $r7;

        r1 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: java.lang.Class;

        $r2 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Callback[] callbacks>;

        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setThreadCallbacks(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[])>(r0, $r2);

     label1:
        $r3 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] argumentTypes>;

        if $r3 == null goto label3;

        $r6 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class[] argumentTypes>;

        $r5 = r1.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object[] arguments>;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class,java.lang.Class[],java.lang.Object[])>(r0, $r6, $r5);

     label2:
        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setThreadCallbacks(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[])>(r0, null);

        return $r7;

     label3:
        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

     label4:
        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setThreadCallbacks(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[])>(r0, null);

        return $r4;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: void setThreadCallbacks(java.lang.Class,com.mycila.inject.internal.cglib.proxy.Callback[])>(r0, null);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.Object create(java.lang.Class, com.mycila.inject.internal.cglib.proxy.Callback)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer $r0;
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.proxy.Callback r2;
        java.lang.Object $r3;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: com.mycila.inject.internal.cglib.proxy.Callback;

        $r0 = new com.mycila.inject.internal.cglib.proxy.Enhancer;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setSuperclass(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallback(com.mycila.inject.internal.cglib.proxy.Callback)>(r2);

        $r3 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object create()>();

        return $r3;
    }

    public static java.lang.Object create(java.lang.Class, java.lang.Class[], com.mycila.inject.internal.cglib.proxy.Callback)
    {
        java.lang.Class[] r2;
        com.mycila.inject.internal.cglib.proxy.Enhancer $r0;
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.proxy.Callback r3;
        java.lang.Object $r4;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: com.mycila.inject.internal.cglib.proxy.Callback;

        $r0 = new com.mycila.inject.internal.cglib.proxy.Enhancer;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setSuperclass(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setInterfaces(java.lang.Class[])>(r2);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallback(com.mycila.inject.internal.cglib.proxy.Callback)>(r3);

        $r4 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object create()>();

        return $r4;
    }

    public static java.lang.Object create(java.lang.Class, java.lang.Class[], com.mycila.inject.internal.cglib.proxy.CallbackFilter, com.mycila.inject.internal.cglib.proxy.Callback[])
    {
        com.mycila.inject.internal.cglib.proxy.CallbackFilter r3;
        java.lang.Class[] r2;
        com.mycila.inject.internal.cglib.proxy.Callback[] r4;
        com.mycila.inject.internal.cglib.proxy.Enhancer $r0;
        java.lang.Class r1;
        java.lang.Object $r5;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: com.mycila.inject.internal.cglib.proxy.CallbackFilter;

        r4 := @parameter3: com.mycila.inject.internal.cglib.proxy.Callback[];

        $r0 = new com.mycila.inject.internal.cglib.proxy.Enhancer;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void <init>()>();

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setSuperclass(java.lang.Class)>(r1);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setInterfaces(java.lang.Class[])>(r2);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallbackFilter(com.mycila.inject.internal.cglib.proxy.CallbackFilter)>(r3);

        virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void setCallbacks(com.mycila.inject.internal.cglib.proxy.Callback[])>(r4);

        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object create()>();

        return $r5;
    }

    private void emitConstructors(com.mycila.inject.internal.cglib.core.ClassEmitter, java.util.List)
    {
        java.lang.Object[] $r3;
        com.mycila.inject.internal.cglib.proxy.Enhancer r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r8;
        com.mycila.inject.internal.cglib.core.MethodInfo r6;
        java.lang.String $r11;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.util.Iterator $r1;
        com.mycila.inject.internal.cglib.core.Signature $r9, $r10;
        java.lang.IllegalArgumentException $r4;
        com.mycila.inject.internal.cglib.core.ClassEmitter r7;
        java.util.List r0;
        java.lang.Object $r5;

        r2 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r7 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r0 := @parameter1: java.util.List;

        z4 = 0;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r5;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>(r7, r6, 1);

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        $r9 = virtualinvoke r6.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        if z4 != 0 goto label2;

        $r11 = virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("()V");

        if $z3 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        z4 = $z5;

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke_constructor(com.mycila.inject.internal.cglib.core.Signature)>($r9);

        $r10 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS>;

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r10);

        $z2 = r2.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean interceptDuringConstruction>;

        if $z2 != 0 goto label5;

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(1);

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$CONSTRUCTED");

     label5:
        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        goto label1;

     label6:
        $z1 = r2.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean classOnly>;

        if $z1 != 0 goto label7;

        if z4 != 0 goto label7;

        $r3 = r2.<com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Object[] arguments>;

        if $r3 != null goto label7;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Superclass has no null constructors but no arguments were given");

        throw $r4;

     label7:
        return;
    }

    private int[] getCallbackKeys()
    {
        int[] r2;
        int $i0, $i1, i2;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        com.mycila.inject.internal.asm.Type[] $r1, $r3;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        r2[i2] = i2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    private void emitGetCallback(com.mycila.inject.internal.cglib.core.ClassEmitter, int[])
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int[] r4;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3;
        com.mycila.inject.internal.cglib.proxy.Enhancer r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.proxy.Enhancer$3 $r5;

        r6 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r4 := @parameter1: int[];

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature GET_CALLBACK>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r5 = new com.mycila.inject.internal.cglib.proxy.Enhancer$3;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.proxy.Enhancer$3: void <init>(com.mycila.inject.internal.cglib.proxy.Enhancer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r6, $r2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>(r4, $r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitSetCallback(com.mycila.inject.internal.cglib.core.ClassEmitter, int[])
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int[] r3;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer$4 $r4;
        com.mycila.inject.internal.cglib.proxy.Enhancer r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r5 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r3 := @parameter1: int[];

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_CALLBACK>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = new com.mycila.inject.internal.cglib.proxy.Enhancer$4;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.proxy.Enhancer$4: void <init>(com.mycila.inject.internal.cglib.proxy.Enhancer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r5, $r2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>(r3, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitSetCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.asm.Type $r6;
        com.mycila.inject.internal.cglib.proxy.Enhancer r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int $i0, i1;
        java.lang.String $r7;
        com.mycila.inject.internal.asm.Type[] $r4, $r5;

        r3 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_CALLBACKS>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        i1 = 0;

     label1:
        $r4 = r3.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>(i1);

        $r5 = r3.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $r6 = $r5[i1];

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r6);

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i1);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitGetCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3;
        com.mycila.inject.internal.asm.Type $r6;
        com.mycila.inject.internal.cglib.proxy.Enhancer r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int $i0, $i1, i2;
        java.lang.String $r8;
        com.mycila.inject.internal.asm.Type[] $r5, $r7;

        r4 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature GET_CALLBACKS>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r5 = r4.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i0 = lengthof $r5;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i0);

        $r6 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r6);

        i2 = 0;

     label1:
        $r7 = r4.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i1 = lengthof $r7;

        if i2 >= $i1 goto label2;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r8);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitNewInstanceCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3;
        com.mycila.inject.internal.cglib.proxy.Enhancer r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r4 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r3);

        specialinvoke r4.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitCommonNewInstance(com.mycila.inject.internal.cglib.core.CodeEmitter)>($r2);

        return;
    }

    private void emitCommonNewInstance(com.mycila.inject.internal.cglib.core.CodeEmitter)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;

        r2 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance_this()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor_this()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitNewInstanceCallback(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1, $r6;
        com.mycila.inject.internal.asm.Type $r5, $r7;
        com.mycila.inject.internal.cglib.proxy.Enhancer r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        int $i0;
        com.mycila.inject.internal.asm.Type[] $r4;

        r3 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SINGLE_NEW_INSTANCE>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        $r4 = r3.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i0 = lengthof $r4;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        goto label4;

     label2:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(1);

        $r5 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        $r6 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r6);

        goto label4;

     label3:
        $r7 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type ILLEGAL_STATE_EXCEPTION>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void throw_exception(com.mycila.inject.internal.asm.Type,java.lang.String)>($r7, "More than one callback object required");

     label4:
        specialinvoke r3.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitCommonNewInstance(com.mycila.inject.internal.cglib.core.CodeEmitter)>($r2);

        return;
    }

    private void emitNewInstanceMultiarg(com.mycila.inject.internal.cglib.core.ClassEmitter, java.util.List)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer$5 $r5;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3, $r7;
        com.mycila.inject.internal.cglib.proxy.Enhancer r6;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        java.util.List r4;

        r6 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r4 := @parameter1: java.util.List;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature MULTIARG_NEW_INSTANCE>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(2);

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r5 = new com.mycila.inject.internal.cglib.proxy.Enhancer$5;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.proxy.Enhancer$5: void <init>(com.mycila.inject.internal.cglib.proxy.Enhancer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r6, $r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void constructor_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.List,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, r4, $r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

        $r7 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r7);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitMethods(com.mycila.inject.internal.cglib.core.ClassEmitter, java.util.List, java.util.List)
    {
        java.lang.Integer $r28, $r29;
        java.util.Map $r7, $r13;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r47;
        java.util.Set r54;
        java.lang.Exception $r46;
        com.mycila.inject.internal.cglib.proxy.CallbackFilter $r26;
        java.lang.Object[] r55;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r16;
        java.util.ArrayList $r37;
        java.lang.StringBuffer $r41, $r42, $r43;
        java.lang.String $r44;
        com.mycila.inject.internal.asm.Type[] $r1, $r21, $r27;
        java.lang.RuntimeException $r48;
        com.mycila.inject.internal.cglib.core.ClassEmitter r15;
        com.mycila.inject.internal.cglib.proxy.CallbackGenerator r22, $r30, $r38;
        com.mycila.inject.internal.cglib.proxy.Enhancer$6 $r20;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        java.lang.reflect.Method $r51, r52;
        boolean $z0, $z1, $z2;
        java.util.List r6, r10, r24, $r39, r53;
        com.mycila.inject.internal.cglib.proxy.CallbackGenerator[] $r2;
        com.mycila.inject.internal.cglib.proxy.BridgeMethodResolver $r12;
        com.mycila.inject.internal.asm.Type $r17, $r19;
        java.util.HashMap $r3, $r4, $r5, $r8;
        com.mycila.inject.internal.cglib.core.MethodInfo r50;
        java.util.HashSet $r14, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Iterator $r9, r11, $r49;
        com.mycila.inject.internal.cglib.core.Signature $r18, $r34;
        java.lang.IllegalArgumentException $r40;
        java.lang.Object $r23, $r25, $r31, $r33, $r45;
        java.lang.Class $r32, $r36;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r15 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r6 := @parameter1: java.util.List;

        r10 := @parameter2: java.util.List;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.proxy.CallbackInfo: com.mycila.inject.internal.cglib.proxy.CallbackGenerator[] getGenerators(com.mycila.inject.internal.asm.Type[])>($r1);

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map getIndexMap(java.util.List)>(r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

        if r10 == null goto label01;

        $r49 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r49 = null;

     label02:
        r11 = $r49;

     label03:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r25 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r50 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r25;

        if r11 == null goto label04;

        $r45 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r51 = (java.lang.reflect.Method) $r45;

        goto label05;

     label04:
        $r51 = null;

     label05:
        r52 = $r51;

        $r26 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter filter>;

        $i1 = interfaceinvoke $r26.<com.mycila.inject.internal.cglib.proxy.CallbackFilter: int accept(java.lang.reflect.Method)>($r51);

        $r27 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i2 = lengthof $r27;

        if $i1 < $i2 goto label06;

        $r40 = new java.lang.IllegalArgumentException;

        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Callback filter returned an index that is too large: ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r44);

        throw $r40;

     label06:
        $r28 = new java.lang.Integer;

        if $r51 == null goto label07;

        $i5 = virtualinvoke $r51.<java.lang.reflect.Method: int getModifiers()>();

        goto label08;

     label07:
        $i5 = virtualinvoke r50.<com.mycila.inject.internal.cglib.core.MethodInfo: int getModifiers()>();

     label08:
        specialinvoke $r28.<java.lang.Integer: void <init>(int)>($i5);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r50, $r28);

        $r29 = new java.lang.Integer;

        specialinvoke $r29.<java.lang.Integer: void <init>(int)>($i1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r50, $r29);

        $r30 = $r2[$i1];

        $r31 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        $r39 = (java.util.List) $r31;

        r53 = $r39;

        if $r39 != null goto label09;

        $r38 = $r2[$i1];

        $r37 = new java.util.ArrayList;

        $i4 = interfaceinvoke r6.<java.util.List: int size()>();

        specialinvoke $r37.<java.util.ArrayList: void <init>(int)>($i4);

        r53 = $r37;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r37);

     label09:
        interfaceinvoke r53.<java.util.List: boolean add(java.lang.Object)>(r50);

        $i3 = virtualinvoke r52.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isBridge(int)>($i3);

        if $z1 == 0 goto label11;

        $r32 = virtualinvoke r52.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r33 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r32);

        r54 = (java.util.Set) $r33;

        if r54 != null goto label10;

        $r35 = new java.util.HashSet;

        specialinvoke $r35.<java.util.HashSet: void <init>()>();

        r54 = $r35;

        $r36 = virtualinvoke r52.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r35);

     label10:
        $r34 = virtualinvoke r50.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        interfaceinvoke r54.<java.util.Set: boolean add(java.lang.Object)>($r34);

     label11:
        goto label03;

     label12:
        $r12 = new com.mycila.inject.internal.cglib.proxy.BridgeMethodResolver;

        specialinvoke $r12.<com.mycila.inject.internal.cglib.proxy.BridgeMethodResolver: void <init>(java.util.Map)>($r8);

        $r13 = virtualinvoke $r12.<com.mycila.inject.internal.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()>();

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        $r16 = virtualinvoke r15.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter getStaticHook()>();

        $r17 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type THREAD_LOCAL>;

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r17);

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r19 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type THREAD_LOCAL>;

        $r18 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL>;

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r19, $r18);

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$THREAD_CALLBACKS");

        r55 = newarray (java.lang.Object)[1];

        $r20 = new com.mycila.inject.internal.cglib.proxy.Enhancer$6;

        specialinvoke $r20.<com.mycila.inject.internal.cglib.proxy.Enhancer$6: void <init>(com.mycila.inject.internal.cglib.proxy.Enhancer,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r0, $r5, $r4, $r7, $r13);

        i6 = 0;

     label13:
        $r21 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i0 = lengthof $r21;

        if i6 >= $i0 goto label19;

        r22 = $r2[i6];

        $z0 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>(r22);

        if $z0 != 0 goto label18;

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>(r22);

        $r23 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        r24 = (java.util.List) $r23;

        if r24 == null goto label18;

     label14:
        interfaceinvoke r22.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator: void generate(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context,java.util.List)>(r15, $r20, r24);

        interfaceinvoke r22.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator: void generateStatic(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context,java.util.List)>($r16, $r20, r24);

     label15:
        goto label18;

     label16:
        $r48 := @caughtexception;

        throw $r48;

     label17:
        $r46 := @caughtexception;

        $r47 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r47.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r46);

        throw $r47;

     label18:
        i6 = i6 + 1;

        goto label13;

     label19:
        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r16.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;

        catch java.lang.RuntimeException from label14 to label15 with label16;
        catch java.lang.Exception from label14 to label15 with label17;
    }

    private void emitSetThreadCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3;
        com.mycila.inject.internal.asm.Type $r4;
        com.mycila.inject.internal.cglib.proxy.Enhancer r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r5 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(9, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$THREAD_CALLBACKS");

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type THREAD_LOCAL>;

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature THREAD_LOCAL_SET>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r4, $r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitSetStaticCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r3 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_STATIC_CALLBACKS>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(9, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$STATIC_CALLBACKS");

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void emitCurrentCallback(com.mycila.inject.internal.cglib.core.CodeEmitter, int)
    {
        com.mycila.inject.internal.cglib.core.Signature $r3;
        int i0;
        com.mycila.inject.internal.asm.Label $r2;
        com.mycila.inject.internal.cglib.proxy.Enhancer r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        java.lang.String $r1, $r4;

        r5 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r1);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnonnull(com.mycila.inject.internal.asm.Label)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r3 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static_this(com.mycila.inject.internal.cglib.core.Signature)>($r3);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r4);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r2);

        return;
    }

    private void emitBindCallbacks(com.mycila.inject.internal.cglib.core.ClassEmitter)
    {
        com.mycila.inject.internal.asm.Type $r6, $r8, $r12;
        com.mycila.inject.internal.cglib.proxy.Enhancer r9;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.Local $r3;
        int $i0, i1, $i3;
        java.lang.String $r13;
        com.mycila.inject.internal.asm.Type[] $r10, $r11;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r5;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.asm.Label $r4, $r7;

        r9 := @this: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        $r1 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(26, $r1, null);

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$BOUND");

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void if_jump(int,com.mycila.inject.internal.asm.Label)>(154, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(1);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$BOUND");

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$THREAD_CALLBACKS");

        $r6 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type THREAD_LOCAL>;

        $r5 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature THREAD_LOCAL_GET>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r6, $r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $r7 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnonnull(com.mycila.inject.internal.asm.Label)>($r7);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$STATIC_CALLBACKS");

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnonnull(com.mycila.inject.internal.asm.Label)>($r7);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void goTo(com.mycila.inject.internal.asm.Label)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r7);

        $r8 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r8);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void swap()>();

        $r10 = r9.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $i0 = lengthof $r10;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        if i1 == 0 goto label2;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup2()>();

     label2:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aaload(int)>(i1);

        $r11 = r9.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        $r12 = $r11[i1];

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r12);

        $r13 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i1);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>($r13);

        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label3:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private static java.lang.String getCallbackField(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2;
        int i0;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CGLIB$CALLBACK_");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static java.lang.String access$000(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)>(i0);

        return $r0;
    }

    static com.mycila.inject.internal.asm.Type[] access$100(com.mycila.inject.internal.cglib.proxy.Enhancer)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        com.mycila.inject.internal.asm.Type[] $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Enhancer;

        $r1 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type[] callbackTypes>;

        return $r1;
    }

    static com.mycila.inject.internal.asm.Type access$200()
    {
        com.mycila.inject.internal.asm.Type $r0;

        $r0 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type ILLEGAL_ARGUMENT_EXCEPTION>;

        return $r0;
    }

    static void access$300(com.mycila.inject.internal.cglib.proxy.Enhancer, com.mycila.inject.internal.cglib.core.CodeEmitter, int)
    {
        int i0;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        i0 := @parameter2: int;

        specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: void emitCurrentCallback(com.mycila.inject.internal.cglib.core.CodeEmitter,int)>(r1, i0);

        return;
    }

    static com.mycila.inject.internal.cglib.core.Signature access$400(com.mycila.inject.internal.cglib.proxy.Enhancer, com.mycila.inject.internal.cglib.core.Signature, int)
    {
        com.mycila.inject.internal.cglib.core.Signature r1, $r2;
        int i0;
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Enhancer;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.Signature;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature rename(com.mycila.inject.internal.cglib.core.Signature,int)>(r1, i0);

        return $r2;
    }

    static boolean access$500(com.mycila.inject.internal.cglib.proxy.Enhancer)
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer r0;
        boolean $z0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.proxy.Enhancer;

        $z0 = r0.<com.mycila.inject.internal.cglib.proxy.Enhancer: boolean interceptDuringConstruction>;

        return $z0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey $r6;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.proxy.Enhancer$1 $r0;
        com.mycila.inject.internal.asm.Type $r7, $r8, $r9, $r10, $r11, $r13, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r31, $r32, $r35, $r36, $r39, $r40, $r41, $r44, $r45, $r48, $r49, $r52;
        com.mycila.inject.internal.cglib.core.KeyFactory $r5;
        java.lang.String $r3;
        com.mycila.inject.internal.asm.Type[] $r16, $r20, $r24, $r28, $r34, $r38, $r43, $r47, $r51;
        com.mycila.inject.internal.cglib.core.Signature $r14, $r15, $r19, $r23, $r27, $r33, $r37, $r42, $r46, $r50, $r53, $r54, $r55;
        java.lang.Class $r2, $r4, $r12, $r56, $r57, $r58;

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String CONSTRUCTED_FIELD> = "CGLIB$CONSTRUCTED";

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String SET_STATIC_CALLBACKS_NAME> = "CGLIB$SET_STATIC_CALLBACKS";

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String SET_THREAD_CALLBACKS_NAME> = "CGLIB$SET_THREAD_CALLBACKS";

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String STATIC_CALLBACKS_FIELD> = "CGLIB$STATIC_CALLBACKS";

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String THREAD_CALLBACKS_FIELD> = "CGLIB$THREAD_CALLBACKS";

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.String BOUND_FIELD> = "CGLIB$BOUND";

        $r0 = new com.mycila.inject.internal.cglib.proxy.Enhancer$1;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.Enhancer$1: void <init>()>();

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.CallbackFilter ALL_ZERO> = $r0;

        $r1 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r2 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Enhancer>;

        if $r2 != null goto label1;

        $r56 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.Enhancer");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Enhancer> = $r56;

        goto label2;

     label1:
        $r56 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Enhancer>;

     label2:
        $r3 = virtualinvoke $r56.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r1.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r3);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r1;

        $r4 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Enhancer$EnhancerKey>;

        if $r4 != null goto label3;

        $r57 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Enhancer$EnhancerKey> = $r57;

        goto label4;

     label3:
        $r57 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$net$sf$cglib$proxy$Enhancer$EnhancerKey>;

     label4:
        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.KeyFactory: com.mycila.inject.internal.cglib.core.KeyFactory create(java.lang.Class)>($r57);

        $r6 = (com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey) $r5;

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.proxy.Enhancer$EnhancerKey KEY_FACTORY> = $r6;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.Factory");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type FACTORY> = $r7;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("IllegalStateException");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type ILLEGAL_STATE_EXCEPTION> = $r8;

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("IllegalArgumentException");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type ILLEGAL_ARGUMENT_EXCEPTION> = $r9;

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("ThreadLocal");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type THREAD_LOCAL> = $r10;

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.Callback");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK> = $r11;

        $r12 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class array$Lnet$sf$cglib$proxy$Callback>;

        if $r12 != null goto label5;

        $r58 = staticinvoke <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class class$(java.lang.String)>("[Lcom.mycila.inject.internal.cglib.proxy.Callback;");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class array$Lnet$sf$cglib$proxy$Callback> = $r58;

        goto label6;

     label5:
        $r58 = <com.mycila.inject.internal.cglib.proxy.Enhancer: java.lang.Class array$Lnet$sf$cglib$proxy$Callback>;

     label6:
        $r13 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r58);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY> = $r13;

        $r14 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_NULL> = $r14;

        $r15 = new com.mycila.inject.internal.cglib.core.Signature;

        $r18 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r16 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r17 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        $r16[0] = $r17;

        specialinvoke $r15.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("CGLIB$SET_THREAD_CALLBACKS", $r18, $r16);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_THREAD_CALLBACKS> = $r15;

        $r19 = new com.mycila.inject.internal.cglib.core.Signature;

        $r22 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r20 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r21 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        $r20[0] = $r21;

        specialinvoke $r19.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("CGLIB$SET_STATIC_CALLBACKS", $r22, $r20);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_STATIC_CALLBACKS> = $r19;

        $r23 = new com.mycila.inject.internal.cglib.core.Signature;

        $r26 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r24 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r25 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        $r24[0] = $r25;

        specialinvoke $r23.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r26, $r24);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE> = $r23;

        $r27 = new com.mycila.inject.internal.cglib.core.Signature;

        $r32 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r28 = newarray (com.mycila.inject.internal.asm.Type)[3];

        $r29 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS_ARRAY>;

        $r28[0] = $r29;

        $r30 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        $r28[1] = $r30;

        $r31 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        $r28[2] = $r31;

        specialinvoke $r27.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r32, $r28);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature MULTIARG_NEW_INSTANCE> = $r27;

        $r33 = new com.mycila.inject.internal.cglib.core.Signature;

        $r36 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r34 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r35 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK>;

        $r34[0] = $r35;

        specialinvoke $r33.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r36, $r34);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SINGLE_NEW_INSTANCE> = $r33;

        $r37 = new com.mycila.inject.internal.cglib.core.Signature;

        $r41 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r38 = newarray (com.mycila.inject.internal.asm.Type)[2];

        $r39 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r38[0] = $r39;

        $r40 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK>;

        $r38[1] = $r40;

        specialinvoke $r37.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("setCallback", $r41, $r38);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_CALLBACK> = $r37;

        $r42 = new com.mycila.inject.internal.cglib.core.Signature;

        $r45 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK>;

        $r43 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r44 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r43[0] = $r44;

        specialinvoke $r42.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("getCallback", $r45, $r43);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature GET_CALLBACK> = $r42;

        $r46 = new com.mycila.inject.internal.cglib.core.Signature;

        $r49 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        $r47 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r48 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        $r47[0] = $r48;

        specialinvoke $r46.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("setCallbacks", $r49, $r47);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature SET_CALLBACKS> = $r46;

        $r50 = new com.mycila.inject.internal.cglib.core.Signature;

        $r52 = <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.asm.Type CALLBACK_ARRAY>;

        $r51 = newarray (com.mycila.inject.internal.asm.Type)[0];

        specialinvoke $r50.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("getCallbacks", $r52, $r51);

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature GET_CALLBACKS> = $r50;

        $r53 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Object get()");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature THREAD_LOCAL_GET> = $r53;

        $r54 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void set(Object)");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature THREAD_LOCAL_SET> = $r54;

        $r55 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void CGLIB$BIND_CALLBACKS(Object)");

        <com.mycila.inject.internal.cglib.proxy.Enhancer: com.mycila.inject.internal.cglib.core.Signature BIND_CALLBACKS> = $r55;

        return;
    }
}
