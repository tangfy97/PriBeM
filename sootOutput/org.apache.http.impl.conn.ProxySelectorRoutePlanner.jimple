public class org.apache.http.impl.conn.ProxySelectorRoutePlanner extends java.lang.Object implements org.apache.http.conn.routing.HttpRoutePlanner
{
    protected final org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;
    protected java.net.ProxySelector proxySelector;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector)
    {
        java.net.ProxySelector r2;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        r2 := @parameter1: java.net.ProxySelector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SchemeRegistry must not be null.");

        throw $r3;

     label1:
        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r1;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = r2;

        return;
    }

    public java.net.ProxySelector getProxySelector()
    {
        java.net.ProxySelector $r1;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        return $r1;
    }

    public void setProxySelector(java.net.ProxySelector)
    {
        java.net.ProxySelector r1;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: java.net.ProxySelector;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = r1;

        return;
    }

    public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        java.lang.IllegalStateException $r14, $r15;
        org.apache.http.conn.routing.HttpRoute $r2, $r12, $r13, r16;
        java.net.InetAddress $r5;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r6;
        java.lang.String $r10;
        boolean $z0;
        org.apache.http.conn.scheme.SchemeRegistry $r9;
        org.apache.http.HttpRequest r0;
        org.apache.http.conn.scheme.Scheme $r11;
        org.apache.http.protocol.HttpContext r7;
        org.apache.http.params.HttpParams $r1, $r4;
        org.apache.http.HttpHost r3, $r8;

        r6 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r3 := @parameter0: org.apache.http.HttpHost;

        r0 := @parameter1: org.apache.http.HttpRequest;

        r7 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r15;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r2 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>($r1);

        if $r2 == null goto label2;

        return $r2;

     label2:
        if r3 != null goto label3;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r14;

     label3:
        $r4 = interfaceinvoke r0.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r5 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>($r4);

        $r8 = virtualinvoke r6.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r3, r0, r7);

        $r9 = r6.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r10 = virtualinvoke r3.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r11 = virtualinvoke $r9.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r10);

        $z0 = virtualinvoke $r11.<org.apache.http.conn.scheme.Scheme: boolean isLayered()>();

        if $r8 != null goto label4;

        $r13 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r13.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)>(r3, $r5, $z0);

        r16 = $r13;

        goto label5;

     label4:
        $r12 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r12.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)>(r3, $r5, $r8, $z0);

        r16 = $r12;

     label5:
        return r16;
    }

    protected org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        java.net.SocketAddress $r10, $r11, $r18;
        java.net.URISyntaxException $r21;
        java.net.ProxySelector r27;
        java.net.Proxy$Type $r8, $r9;
        java.net.Proxy $r7;
        int $i0;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.URI $r1;
        java.lang.String $r3, $r14, $r20, $r26;
        boolean $z0;
        org.apache.http.HttpRequest r5;
        java.net.InetSocketAddress r12;
        org.apache.http.HttpException $r15, $r22;
        java.util.List $r4;
        org.apache.http.protocol.HttpContext r6;
        java.lang.StringBuilder $r16, $r17, $r19, $r23, $r24, $r25;
        org.apache.http.HttpHost r2, $r13, r28;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r2 := @parameter0: org.apache.http.HttpHost;

        r5 := @parameter1: org.apache.http.HttpRequest;

        r6 := @parameter2: org.apache.http.protocol.HttpContext;

        r27 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        if r27 != null goto label1;

        r27 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

     label1:
        if r27 != null goto label2;

        return null;

     label2:
        $r1 = new java.net.URI;

        $r3 = virtualinvoke r2.<org.apache.http.HttpHost: java.lang.String toURI()>();

        specialinvoke $r1.<java.net.URI: void <init>(java.lang.String)>($r3);

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

        $r22 = new org.apache.http.HttpException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert host to URI: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r21);

        throw $r22;

     label5:
        $r4 = virtualinvoke r27.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r1);

        $r7 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r4, r2, r5, r6);

        r28 = null;

        $r8 = virtualinvoke $r7.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r9 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r8 != $r9 goto label7;

        $r10 = virtualinvoke $r7.<java.net.Proxy: java.net.SocketAddress address()>();

        $z0 = $r10 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label6;

        $r15 = new org.apache.http.HttpException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to handle non-Inet proxy address: ");

        $r18 = virtualinvoke $r7.<java.net.Proxy: java.net.SocketAddress address()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.http.HttpException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label6:
        $r11 = virtualinvoke $r7.<java.net.Proxy: java.net.SocketAddress address()>();

        r12 = (java.net.InetSocketAddress) $r11;

        $r13 = new org.apache.http.HttpHost;

        $r14 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>(r12);

        $i0 = virtualinvoke r12.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke $r13.<org.apache.http.HttpHost: void <init>(java.lang.String,int)>($r14, $i0);

        r28 = $r13;

     label7:
        return r28;

        catch java.net.URISyntaxException from label2 to label3 with label4;
    }

    protected java.lang.String getHost(java.net.InetSocketAddress)
    {
        java.net.InetAddress $r1;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r2;
        java.lang.String $r3;
        java.net.InetSocketAddress r0;
        boolean $z0;

        r2 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r0 := @parameter0: java.net.InetSocketAddress;

        $z0 = virtualinvoke r0.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r3 = virtualinvoke $r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label2:
        return $r3;
    }

    protected java.net.Proxy chooseProxy(java.util.List, org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
    {
        java.net.Proxy$Type $r5;
        java.net.Proxy r3, r10;
        int[] $r4;
        int $i0, $i1, $i2, i3;
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        org.apache.http.HttpRequest r8;
        java.util.List r0;
        org.apache.http.protocol.HttpContext r9;
        java.lang.Object $r2;
        org.apache.http.HttpHost r7;

        r6 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r0 := @parameter0: java.util.List;

        r7 := @parameter1: org.apache.http.HttpHost;

        r8 := @parameter2: org.apache.http.HttpRequest;

        r9 := @parameter3: org.apache.http.protocol.HttpContext;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy list must not be empty.");

        throw $r1;

     label2:
        r10 = null;

        i3 = 0;

     label3:
        if r10 != null goto label6;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i0 goto label6;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (java.net.Proxy) $r2;

        $r4 = <org.apache.http.impl.conn.ProxySelectorRoutePlanner$1: int[] $SwitchMap$java$net$Proxy$Type>;

        $r5 = virtualinvoke r3.<java.net.Proxy: java.net.Proxy$Type type()>();

        $i1 = virtualinvoke $r5.<java.net.Proxy$Type: int ordinal()>();

        $i2 = $r4[$i1];

        tableswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label5;
        };

     label4:
        r10 = r3;

        goto label5;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        if r10 != null goto label7;

        r10 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

     label7:
        return r10;
    }
}
