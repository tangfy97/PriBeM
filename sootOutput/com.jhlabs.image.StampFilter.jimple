public class com.jhlabs.image.StampFilter extends com.jhlabs.image.PointFilter
{
    private float threshold;
    private float softness;
    protected float radius;
    private float lowerThreshold3;
    private float upperThreshold3;
    private int white;
    private int black;

    public void <init>()
    {
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        specialinvoke r0.<com.jhlabs.image.StampFilter: void <init>(float)>(0.5F);

        return;
    }

    public void <init>(float)
    {
        int $i1;
        float f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        f0 := @parameter0: float;

        specialinvoke r0.<com.jhlabs.image.PointFilter: void <init>()>();

        r0.<com.jhlabs.image.StampFilter: float softness> = 0.0F;

        r0.<com.jhlabs.image.StampFilter: float radius> = 5.0F;

        $i1 = (int) -1;

        r0.<com.jhlabs.image.StampFilter: int white> = $i1;

        r0.<com.jhlabs.image.StampFilter: int black> = -16777216;

        virtualinvoke r0.<com.jhlabs.image.StampFilter: void setThreshold(float)>(f0);

        return;
    }

    public void setRadius(float)
    {
        float f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.StampFilter: float radius> = f0;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        $f0 = r0.<com.jhlabs.image.StampFilter: float radius>;

        return $f0;
    }

    public void setThreshold(float)
    {
        float f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.StampFilter: float threshold> = f0;

        return;
    }

    public float getThreshold()
    {
        float $f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        $f0 = r0.<com.jhlabs.image.StampFilter: float threshold>;

        return $f0;
    }

    public void setSoftness(float)
    {
        float f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.StampFilter: float softness> = f0;

        return;
    }

    public float getSoftness()
    {
        float $f0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        $f0 = r0.<com.jhlabs.image.StampFilter: float softness>;

        return $f0;
    }

    public void setWhite(int)
    {
        int i0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.StampFilter: int white> = i0;

        return;
    }

    public int getWhite()
    {
        int $i0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        $i0 = r0.<com.jhlabs.image.StampFilter: int white>;

        return $i0;
    }

    public void setBlack(int)
    {
        int i0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.StampFilter: int black> = i0;

        return;
    }

    public int getBlack()
    {
        int $i0;
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        $i0 = r0.<com.jhlabs.image.StampFilter: int black>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.GaussianFilter $r0;
        int $i0;
        java.awt.image.BufferedImage r2, $r3, $r4, r5;
        com.jhlabs.image.StampFilter r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;

        r1 := @this: com.jhlabs.image.StampFilter;

        r2 := @parameter0: java.awt.image.BufferedImage;

        r5 := @parameter1: java.awt.image.BufferedImage;

        $r0 = new com.jhlabs.image.GaussianFilter;

        $f0 = r1.<com.jhlabs.image.StampFilter: float radius>;

        $i0 = (int) $f0;

        $f1 = (float) $i0;

        specialinvoke $r0.<com.jhlabs.image.GaussianFilter: void <init>(float)>($f1);

        $r3 = virtualinvoke $r0.<com.jhlabs.image.GaussianFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r2, null);

        $f4 = r1.<com.jhlabs.image.StampFilter: float threshold>;

        $f2 = r1.<com.jhlabs.image.StampFilter: float softness>;

        $f3 = $f2 * 0.5F;

        $f5 = $f4 - $f3;

        $f6 = 765.0F * $f5;

        r1.<com.jhlabs.image.StampFilter: float lowerThreshold3> = $f6;

        $f9 = r1.<com.jhlabs.image.StampFilter: float threshold>;

        $f7 = r1.<com.jhlabs.image.StampFilter: float softness>;

        $f8 = $f7 * 0.5F;

        $f10 = $f9 + $f8;

        $f11 = 765.0F * $f10;

        r1.<com.jhlabs.image.StampFilter: float upperThreshold3> = $f11;

        $r4 = specialinvoke r1.<com.jhlabs.image.PointFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r3, $r3);

        return $r4;
    }

    public int filterRGB(int, int, int)
    {
        int i0, $i1, i2, $i3, i4, i5, $i6, i7, $i8, $i9, $i10, i11, i12;
        com.jhlabs.image.StampFilter r0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.jhlabs.image.StampFilter;

        i11 := @parameter0: int;

        i12 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = i0 >> 16;

        i2 = $i1 & 255;

        $i3 = i0 >> 8;

        i4 = $i3 & 255;

        i5 = i0 & 255;

        $i6 = i2 + i4;

        i7 = $i6 + i5;

        $f2 = r0.<com.jhlabs.image.StampFilter: float lowerThreshold3>;

        $f1 = r0.<com.jhlabs.image.StampFilter: float upperThreshold3>;

        $f0 = (float) i7;

        $f3 = staticinvoke <com.jhlabs.image.ImageMath: float smoothStep(float,float,float)>($f2, $f1, $f0);

        $i9 = r0.<com.jhlabs.image.StampFilter: int black>;

        $i8 = r0.<com.jhlabs.image.StampFilter: int white>;

        $i10 = staticinvoke <com.jhlabs.image.ImageMath: int mixColors(float,int,int)>($f3, $i9, $i8);

        return $i10;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.StampFilter r0;

        r0 := @this: com.jhlabs.image.StampFilter;

        return "Stylize/Stamp...";
    }
}
