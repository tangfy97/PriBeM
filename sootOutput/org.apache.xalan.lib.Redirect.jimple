public class org.apache.xalan.lib.Redirect extends java.lang.Object
{
    protected java.util.Hashtable m_formatterListeners;
    protected java.util.Hashtable m_outputStreams;
    public static final boolean DEFAULT_APPEND_OPEN;
    public static final boolean DEFAULT_APPEND_WRITE;

    public void <init>()
    {
        org.apache.xalan.lib.Redirect r0;
        java.util.Hashtable $r1, $r2;

        r0 := @this: org.apache.xalan.lib.Redirect;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners> = $r1;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_outputStreams> = $r2;

        return;
    }

    public void open(org.apache.xalan.extensions.XSLProcessorContext, org.apache.xalan.templates.ElemExtensionCall) throws java.net.MalformedURLException, java.io.FileNotFoundException, java.io.IOException, javax.xml.transform.TransformerException
    {
        org.apache.xalan.extensions.XSLProcessorContext r1;
        org.w3c.dom.Node $r6, $r9;
        java.lang.String $r3, $r8, $r11;
        java.util.Hashtable $r4;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.xalan.templates.ElemExtensionCall r2;
        org.apache.xalan.lib.Redirect r0;
        java.lang.Object $r5;
        org.apache.xalan.transformer.TransformerImpl $r7, $r10;

        r0 := @this: org.apache.xalan.lib.Redirect;

        r1 := @parameter0: org.apache.xalan.extensions.XSLProcessorContext;

        r2 := @parameter1: org.apache.xalan.templates.ElemExtensionCall;

        $r3 = specialinvoke r0.<org.apache.xalan.lib.Redirect: java.lang.String getFilename(org.apache.xalan.extensions.XSLProcessorContext,org.apache.xalan.templates.ElemExtensionCall)>(r1, r2);

        $r4 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        if null != $r5 goto label9;

        $r6 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r7 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r8 = virtualinvoke r2.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("mkdirs", $r6, $r7);

        if $r8 == null goto label3;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label4;

     label2:
        $z5 = 0;

        goto label4;

     label3:
        $z5 = 1;

     label4:
        z0 = $z5;

        $r9 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r10 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r11 = virtualinvoke r2.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("append", $r9, $r10);

        if $r11 == null goto label7;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        if $z2 == 0 goto label6;

     label5:
        $z6 = 1;

        goto label8;

     label6:
        $z6 = 0;

        goto label8;

     label7:
        $z6 = 0;

     label8:
        specialinvoke r0.<org.apache.xalan.lib.Redirect: org.xml.sax.ContentHandler makeFormatterListener(org.apache.xalan.extensions.XSLProcessorContext,org.apache.xalan.templates.ElemExtensionCall,java.lang.String,boolean,boolean,boolean)>(r1, r2, $r3, 1, z0, $z6);

     label9:
        return;
    }

    public void write(org.apache.xalan.extensions.XSLProcessorContext, org.apache.xalan.templates.ElemExtensionCall) throws java.net.MalformedURLException, java.io.FileNotFoundException, java.io.IOException, javax.xml.transform.TransformerException
    {
        javax.xml.transform.TransformerException $r17;
        org.apache.xalan.extensions.XSLProcessorContext r1;
        org.w3c.dom.Node $r7, $r13, $r18;
        java.lang.String $r3, $r15, $r20;
        org.xml.sax.ContentHandler r21;
        java.util.Hashtable $r4, $r9, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, z4, $z5, z6, $z7;
        org.apache.xalan.templates.ElemExtensionCall r2;
        java.io.OutputStream r22;
        org.apache.xml.utils.QName $r8;
        org.xml.sax.SAXException $r16;
        org.apache.xalan.lib.Redirect r0;
        java.lang.Object $r5, $r10;
        org.apache.xalan.transformer.TransformerImpl $r6, $r14, $r19;

        r0 := @this: org.apache.xalan.lib.Redirect;

        r1 := @parameter0: org.apache.xalan.extensions.XSLProcessorContext;

        r2 := @parameter1: org.apache.xalan.templates.ElemExtensionCall;

        $r3 = specialinvoke r0.<org.apache.xalan.lib.Redirect: java.lang.String getFilename(org.apache.xalan.extensions.XSLProcessorContext,org.apache.xalan.templates.ElemExtensionCall)>(r1, r2);

        $r4 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        z4 = 0;

        if null != $r5 goto label09;

        $r13 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r14 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r15 = virtualinvoke r2.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("mkdirs", $r13, $r14);

        if $r15 == null goto label03;

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 != 0 goto label01;

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        if $z3 == 0 goto label02;

     label01:
        $z5 = 1;

        goto label04;

     label02:
        $z5 = 0;

        goto label04;

     label03:
        $z5 = 1;

     label04:
        z6 = $z5;

        $r18 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r19 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r20 = virtualinvoke r2.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("append", $r18, $r19);

        if $r20 == null goto label07;

        $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 != 0 goto label05;

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("yes");

        if $z1 == 0 goto label06;

     label05:
        $z7 = 1;

        goto label08;

     label06:
        $z7 = 0;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        r21 = specialinvoke r0.<org.apache.xalan.lib.Redirect: org.xml.sax.ContentHandler makeFormatterListener(org.apache.xalan.extensions.XSLProcessorContext,org.apache.xalan.templates.ElemExtensionCall,java.lang.String,boolean,boolean,boolean)>(r1, r2, $r3, 1, z6, $z7);

        goto label10;

     label09:
        z4 = 1;

        r21 = (org.xml.sax.ContentHandler) $r5;

     label10:
        $r6 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r7 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r8 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xml.utils.QName getMode()>();

        virtualinvoke $r6.<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.w3c.dom.Node,org.apache.xml.utils.QName,org.xml.sax.ContentHandler)>(r2, $r7, $r8, r21);

        if z4 != 0 goto label15;

        $r9 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_outputStreams>;

        $r10 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r22 = (java.io.OutputStream) $r10;

        if null == r22 goto label15;

     label11:
        interfaceinvoke r21.<org.xml.sax.ContentHandler: void endDocument()>();

     label12:
        goto label14;

     label13:
        $r16 := @caughtexception;

        $r17 = new javax.xml.transform.TransformerException;

        specialinvoke $r17.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

     label14:
        virtualinvoke r22.<java.io.OutputStream: void close()>();

        $r11 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_outputStreams>;

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r3);

        $r12 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners>;

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r3);

     label15:
        return;

        catch org.xml.sax.SAXException from label11 to label12 with label13;
    }

    public void close(org.apache.xalan.extensions.XSLProcessorContext, org.apache.xalan.templates.ElemExtensionCall) throws java.net.MalformedURLException, java.io.FileNotFoundException, java.io.IOException, javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemExtensionCall r2;
        java.io.OutputStream r13;
        javax.xml.transform.TransformerException $r12;
        org.apache.xalan.extensions.XSLProcessorContext r1;
        org.xml.sax.SAXException $r11;
        org.apache.xalan.lib.Redirect r0;
        java.lang.Object $r5, $r8;
        java.lang.String $r3;
        org.xml.sax.ContentHandler r6;
        java.util.Hashtable $r4, $r7, $r9, $r10;

        r0 := @this: org.apache.xalan.lib.Redirect;

        r1 := @parameter0: org.apache.xalan.extensions.XSLProcessorContext;

        r2 := @parameter1: org.apache.xalan.templates.ElemExtensionCall;

        $r3 = specialinvoke r0.<org.apache.xalan.lib.Redirect: java.lang.String getFilename(org.apache.xalan.extensions.XSLProcessorContext,org.apache.xalan.templates.ElemExtensionCall)>(r1, r2);

        $r4 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        if null == $r5 goto label6;

        r6 = (org.xml.sax.ContentHandler) $r5;

     label1:
        interfaceinvoke r6.<org.xml.sax.ContentHandler: void endDocument()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new javax.xml.transform.TransformerException;

        specialinvoke $r12.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        $r7 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_outputStreams>;

        $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r13 = (java.io.OutputStream) $r8;

        if null == r13 goto label5;

        virtualinvoke r13.<java.io.OutputStream: void close()>();

        $r10 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_outputStreams>;

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r3);

     label5:
        $r9 = r0.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners>;

        virtualinvoke $r9.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r3);

     label6:
        return;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    private java.lang.String getFilename(org.apache.xalan.extensions.XSLProcessorContext, org.apache.xalan.templates.ElemExtensionCall) throws java.net.MalformedURLException, java.io.FileNotFoundException, java.io.IOException, javax.xml.transform.TransformerException
    {
        org.apache.xalan.extensions.XSLProcessorContext r1;
        org.apache.xalan.transformer.MsgMgr $r8;
        org.apache.xpath.XPathContext $r11;
        org.w3c.dom.Node $r2, $r5, $r9, $r14, $r17;
        int $i0;
        java.lang.String $r4, $r16, r20;
        org.apache.xalan.templates.ElemExtensionCall r0;
        org.apache.xpath.XPath $r12;
        org.apache.xpath.objects.XObject $r15;
        org.apache.xalan.lib.Redirect r19;
        org.apache.xml.utils.PrefixResolver $r13;
        org.apache.xalan.transformer.TransformerImpl $r3, $r6, $r7, $r10, $r18;

        r19 := @this: org.apache.xalan.lib.Redirect;

        r1 := @parameter0: org.apache.xalan.extensions.XSLProcessorContext;

        r0 := @parameter1: org.apache.xalan.templates.ElemExtensionCall;

        $r2 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r3 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("select", $r2, $r3);

        if null == $r4 goto label3;

        $r10 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r11 = virtualinvoke $r10.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r12 = new org.apache.xpath.XPath;

        $r13 = virtualinvoke $r11.<org.apache.xpath.XPathContext: org.apache.xml.utils.PrefixResolver getNamespaceContext()>();

        specialinvoke $r12.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int)>($r4, r0, $r13, 0);

        $r14 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r15 = virtualinvoke $r12.<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,org.w3c.dom.Node,org.apache.xml.utils.PrefixResolver)>($r11, $r14, r0);

        $r16 = virtualinvoke $r15.<org.apache.xpath.objects.XObject: java.lang.String str()>();

        r20 = $r16;

        if null == $r16 goto label1;

        $i0 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r17 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r18 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        r20 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("file", $r17, $r18);

     label2:
        goto label4;

     label3:
        $r5 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        $r6 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        r20 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionCall: java.lang.String getAttribute(java.lang.String,org.w3c.dom.Node,org.apache.xalan.transformer.TransformerImpl)>("file", $r5, $r6);

     label4:
        if null != r20 goto label5;

        $r7 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $r8 = virtualinvoke $r7.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>();

        $r9 = virtualinvoke r1.<org.apache.xalan.extensions.XSLProcessorContext: org.w3c.dom.Node getContextNode()>();

        virtualinvoke $r8.<org.apache.xalan.transformer.MsgMgr: void error(javax.xml.transform.SourceLocator,org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String)>(r0, r0, $r9, "ER_REDIRECT_COULDNT_GET_FILENAME");

     label5:
        return r20;
    }

    private java.lang.String urlToFileName(java.lang.String)
    {
        org.apache.xalan.lib.Redirect r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.xalan.lib.Redirect;

        r1 := @parameter0: java.lang.String;

        if null == r1 goto label5;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:////");

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(7);

        goto label5;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:///");

        if $z1 == 0 goto label2;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(6);

        goto label5;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("file://");

        if $z2 == 0 goto label3;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(5);

        goto label5;

     label3:
        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:/");

        if $z3 == 0 goto label4;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(5);

        goto label5;

     label4:
        $z4 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("file:");

        if $z4 == 0 goto label5;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(4);

     label5:
        return r1;
    }

    private org.xml.sax.ContentHandler makeFormatterListener(org.apache.xalan.extensions.XSLProcessorContext, org.apache.xalan.templates.ElemExtensionCall, java.lang.String, boolean, boolean, boolean) throws java.net.MalformedURLException, java.io.FileNotFoundException, java.io.IOException, javax.xml.transform.TransformerException
    {
        javax.xml.transform.stream.StreamResult $r25;
        javax.xml.transform.Result $r9;
        org.apache.xml.serializer.SerializationHandler $r26;
        org.apache.xalan.templates.OutputProperties $r22;
        boolean $z0, z1, z2, z3;
        org.xml.sax.SAXException $r17;
        javax.xml.transform.TransformerException $r15, $r16, $r18;
        org.apache.xalan.extensions.XSLProcessorContext r2;
        int $i0;
        java.lang.String r1, $r7, $r10, $r13, $r14, r21, $r24;
        java.util.Hashtable $r5, $r6;
        org.apache.xalan.templates.ElemExtensionCall r19;
        java.io.FileOutputStream $r23;
        java.io.File $r0, $r8, $r11, $r12, r20;
        org.apache.xalan.lib.Redirect r4;
        org.apache.xalan.transformer.TransformerImpl $r3;

        r4 := @this: org.apache.xalan.lib.Redirect;

        r2 := @parameter0: org.apache.xalan.extensions.XSLProcessorContext;

        r19 := @parameter1: org.apache.xalan.templates.ElemExtensionCall;

        r1 := @parameter2: java.lang.String;

        z3 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        r20 = $r0;

        $r3 = virtualinvoke r2.<org.apache.xalan.extensions.XSLProcessorContext: org.apache.xalan.transformer.TransformerImpl getTransformer()>();

        $z0 = virtualinvoke $r0.<java.io.File: boolean isAbsolute()>();

        if $z0 != 0 goto label03;

        $r9 = virtualinvoke $r3.<org.apache.xalan.transformer.TransformerImpl: javax.xml.transform.Result getOutputTarget()>();

        if null == $r9 goto label01;

        $r14 = interfaceinvoke $r9.<javax.xml.transform.Result: java.lang.String getSystemId()>();

        if $r14 == null goto label01;

        r21 = specialinvoke r4.<org.apache.xalan.lib.Redirect: java.lang.String urlToFileName(java.lang.String)>($r14);

        goto label02;

     label01:
        $r10 = virtualinvoke $r3.<org.apache.xalan.transformer.TransformerImpl: java.lang.String getBaseURLOfSource()>();

        r21 = specialinvoke r4.<org.apache.xalan.lib.Redirect: java.lang.String urlToFileName(java.lang.String)>($r10);

     label02:
        if null == r21 goto label03;

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>(r21);

        $r12 = new java.io.File;

        $r13 = virtualinvoke $r11.<java.io.File: java.lang.String getParent()>();

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r13, r1);

        r20 = $r12;

     label03:
        if z1 == 0 goto label04;

        $r7 = virtualinvoke r20.<java.io.File: java.lang.String getParent()>();

        if null == $r7 goto label04;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 <= 0 goto label04;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r7);

        virtualinvoke $r8.<java.io.File: boolean mkdirs()>();

     label04:
        $r22 = virtualinvoke $r3.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.templates.OutputProperties getOutputFormat()>();

        $r23 = new java.io.FileOutputStream;

        $r24 = virtualinvoke r20.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r24, z2);

     label05:
        $r25 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r25.<javax.xml.transform.stream.StreamResult: void <init>(java.io.OutputStream)>($r23);

        $r26 = virtualinvoke $r3.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler createSerializationHandler(javax.xml.transform.Result,org.apache.xalan.templates.OutputProperties)>($r25, $r22);

     label06:
        interfaceinvoke $r26.<org.xml.sax.ContentHandler: void startDocument()>();

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

        $r18 = new javax.xml.transform.TransformerException;

        specialinvoke $r18.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label09:
        if z3 == 0 goto label10;

        $r5 = r4.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_outputStreams>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r23);

        $r6 = r4.<org.apache.xalan.lib.Redirect: java.util.Hashtable m_formatterListeners>;

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r26);

     label10:
        return $r26;

     label11:
        $r15 := @caughtexception;

        $r16 = new javax.xml.transform.TransformerException;

        specialinvoke $r16.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

        catch org.xml.sax.SAXException from label06 to label07 with label08;
        catch javax.xml.transform.TransformerException from label05 to label11 with label11;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.lib.Redirect: boolean DEFAULT_APPEND_WRITE> = 0;

        <org.apache.xalan.lib.Redirect: boolean DEFAULT_APPEND_OPEN> = 0;

        return;
    }
}
