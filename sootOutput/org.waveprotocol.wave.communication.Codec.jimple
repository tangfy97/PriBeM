public final class org.waveprotocol.wave.communication.Codec extends java.lang.Object
{
    private static final char[] digits;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.communication.Codec r0;

        r0 := @this: org.waveprotocol.wave.communication.Codec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static char toDigit(int)
    {
        int i0;
        char[] $r0;
        char $c1;
        java.lang.AssertionError $r1;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = <org.waveprotocol.wave.communication.Codec: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if 0 > i0 goto label1;

        if i0 <= 15 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label2:
        $r0 = <org.waveprotocol.wave.communication.Codec: char[] digits>;

        $c1 = $r0[i0];

        return $c1;
    }

    private static int toNumber(char)
    {
        char c0;
        java.lang.IllegalArgumentException $r6;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if 48 > $i4 goto label1;

        $i5 = (int) c0;

        if $i5 > 57 goto label1;

        $i6 = (int) c0;

        $i3 = $i6 - 48;

        return $i3;

     label1:
        $i7 = (int) c0;

        if 65 > $i7 goto label2;

        $i8 = (int) c0;

        if $i8 > 70 goto label2;

        $i9 = (int) c0;

        $i1 = $i9 - 65;

        $i2 = $i1 + 10;

        return $i2;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a hexadecimal digit: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    public static java.lang.String encode(byte[])
    {
        byte[] r0;
        byte b3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, i14, $i15, $i16;
        java.lang.String $r3;
        char $c8, $c13;
        char[] r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        r1 = newarray (char)[$i1];

        i14 = 0;

     label1:
        $i2 = lengthof r0;

        if i14 >= $i2 goto label2;

        b3 = r0[i14];

        $i4 = i14 * 2;

        $i7 = $i4 + 0;

        $i15 = (int) b3;

        $i5 = $i15 >> 4;

        $i6 = $i5 & 15;

        $c8 = staticinvoke <org.waveprotocol.wave.communication.Codec: char toDigit(int)>($i6);

        r1[$i7] = $c8;

        $i9 = i14 * 2;

        $i12 = $i9 + 1;

        $i16 = (int) b3;

        $i10 = $i16 >> 0;

        $i11 = $i10 & 15;

        $c13 = staticinvoke <org.waveprotocol.wave.communication.Codec: char toDigit(int)>($i11);

        r1[$i12] = $c13;

        i14 = i14 + 1;

        goto label1;

     label2:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        return $r3;
    }

    public static byte[] decode(java.lang.String)
    {
        byte[] $r2;
        byte $b14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i12, $i13, i15, $i16;
        java.lang.String r0;
        boolean $z0;
        char c6, c9;
        char[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r1;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i2 = lengthof $r1;

        $i3 = $i2 / 2;

        $r2 = newarray (byte)[$i3];

        i15 = 0;

     label3:
        $i16 = lengthof $r2;

        if i15 >= $i16 goto label4;

        $i4 = i15 * 2;

        $i5 = $i4 + 0;

        c6 = $r1[$i5];

        $i7 = i15 * 2;

        $i8 = $i7 + 1;

        c9 = $r1[$i8];

        $i10 = staticinvoke <org.waveprotocol.wave.communication.Codec: int toNumber(char)>(c6);

        $i11 = $i10 << 4;

        $i12 = staticinvoke <org.waveprotocol.wave.communication.Codec: int toNumber(char)>(c9);

        $i13 = $i11 + $i12;

        $b14 = (byte) $i13;

        $r2[i15] = $b14;

        i15 = i15 + 1;

        goto label3;

     label4:
        return $r2;
    }

    static void <clinit>()
    {
        char[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/communication/Codec;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.communication.Codec: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (char)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 65;

        $r1[11] = 66;

        $r1[12] = 67;

        $r1[13] = 68;

        $r1[14] = 69;

        $r1[15] = 70;

        <org.waveprotocol.wave.communication.Codec: char[] digits> = $r1;

        return;
    }
}
