class org.apache.regexp.RECompiler$RERange extends java.lang.Object
{
    int size;
    int[] minRange;
    int[] maxRange;
    int num;
    private final org.apache.regexp.RECompiler this$0;

    void <init>(org.apache.regexp.RECompiler)
    {
        org.apache.regexp.RECompiler r1;
        int[] $r2, $r3;
        org.apache.regexp.RECompiler$RERange r0;
        int $i0, $i1;

        r0 := @this: org.apache.regexp.RECompiler$RERange;

        r1 := @parameter0: org.apache.regexp.RECompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.regexp.RECompiler$RERange: org.apache.regexp.RECompiler this$0> = r1;

        r0.<org.apache.regexp.RECompiler$RERange: int size> = 16;

        $i0 = r0.<org.apache.regexp.RECompiler$RERange: int size>;

        $r2 = newarray (int)[$i0];

        r0.<org.apache.regexp.RECompiler$RERange: int[] minRange> = $r2;

        $i1 = r0.<org.apache.regexp.RECompiler$RERange: int size>;

        $r3 = newarray (int)[$i1];

        r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange> = $r3;

        r0.<org.apache.regexp.RECompiler$RERange: int num> = 0;

        return;
    }

    void delete(int)
    {
        org.apache.regexp.RECompiler$RERange r0;
        int[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10;

        r0 := @this: org.apache.regexp.RECompiler$RERange;

        i9 := @parameter0: int;

        $i0 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        if $i0 == 0 goto label1;

        $i1 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        if i9 < $i1 goto label3;

     label1:
        return;

     label2:
        $i2 = i9 - 1;

        if $i2 < 0 goto label3;

        $r2 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i4 = i9 - 1;

        $r1 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i3 = $r1[i9];

        $r2[$i4] = $i3;

        $r4 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i6 = i9 - 1;

        $r3 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i5 = $r3[i9];

        $r4[$i6] = $i5;

     label3:
        i9 = i9 + 1;

        $i10 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        if i9 < $i10 goto label2;

        $i7 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        $i8 = $i7 - 1;

        r0.<org.apache.regexp.RECompiler$RERange: int num> = $i8;

        return;
    }

    void merge(int, int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, r13, r14, $r15, $r16;
        org.apache.regexp.RECompiler$RERange r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, $i25;

        r0 := @this: org.apache.regexp.RECompiler$RERange;

        i20 := @parameter0: int;

        i21 := @parameter1: int;

        i22 = 0;

        goto label6;

     label1:
        $r1 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i0 = $r1[i22];

        if i20 < $i0 goto label2;

        $r10 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i7 = $r10[i22];

        if i21 > $i7 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i1 = $r2[i22];

        if i20 > $i1 goto label3;

        $r9 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i6 = $r9[i22];

        if i21 < $i6 goto label3;

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void delete(int)>(i22);

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void merge(int,int)>(i20, i21);

        return;

     label3:
        $r3 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i2 = $r3[i22];

        if i20 < $i2 goto label4;

        $r7 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i5 = $r7[i22];

        if i20 > $i5 goto label4;

        $r8 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        i23 = $r8[i22];

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void delete(int)>(i22);

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void merge(int,int)>(i23, i21);

        return;

     label4:
        $r4 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i3 = $r4[i22];

        if i21 < $i3 goto label5;

        $r5 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i4 = $r5[i22];

        if i21 > $i4 goto label5;

        $r6 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        i24 = $r6[i22];

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void delete(int)>(i22);

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void merge(int,int)>(i20, i24);

        return;

     label5:
        i22 = i22 + 1;

     label6:
        $i25 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        if i22 < $i25 goto label1;

        $i9 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        $i8 = r0.<org.apache.regexp.RECompiler$RERange: int size>;

        if $i9 < $i8 goto label7;

        $i14 = r0.<org.apache.regexp.RECompiler$RERange: int size>;

        $i15 = $i14 * 2;

        r0.<org.apache.regexp.RECompiler$RERange: int size> = $i15;

        $i16 = r0.<org.apache.regexp.RECompiler$RERange: int size>;

        r13 = newarray (int)[$i16];

        $i17 = r0.<org.apache.regexp.RECompiler$RERange: int size>;

        r14 = newarray (int)[$i17];

        $r15 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i18 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, r13, 0, $i18);

        $r16 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i19 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, 0, r14, 0, $i19);

        r0.<org.apache.regexp.RECompiler$RERange: int[] minRange> = r13;

        r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange> = r14;

     label7:
        $r11 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i10 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        $r11[$i10] = i20;

        $r12 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i11 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        $r12[$i11] = i21;

        $i12 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        $i13 = $i12 + 1;

        r0.<org.apache.regexp.RECompiler$RERange: int num> = $i13;

        return;
    }

    void remove(int, int)
    {
        org.apache.regexp.RECompiler$RERange r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i14, $i15, i16, $i17;

        r0 := @this: org.apache.regexp.RECompiler$RERange;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        i16 = 0;

        goto label8;

     label1:
        $r1 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i1 = $r1[i16];

        if $i1 < i0 goto label2;

        $r12 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i15 = $r12[i16];

        if $i15 > i5 goto label2;

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void delete(int)>(i16);

        return;

     label2:
        $r2 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i2 = $r2[i16];

        if i0 < $i2 goto label5;

        $r9 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i10 = $r9[i16];

        if i5 > $i10 goto label5;

        $r10 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        i11 = $r10[i16];

        $r11 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        i12 = $r11[i16];

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void delete(int)>(i16);

        if i11 >= i0 goto label3;

        $i14 = i0 - 1;

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void merge(int,int)>(i11, $i14);

     label3:
        if i5 >= i12 goto label4;

        $i13 = i5 + 1;

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void merge(int,int)>($i13, i12);

     label4:
        return;

     label5:
        $r3 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i3 = $r3[i16];

        if $i3 < i0 goto label6;

        $r7 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i8 = $r7[i16];

        if $i8 > i5 goto label6;

        $r8 = r0.<org.apache.regexp.RECompiler$RERange: int[] minRange>;

        $i9 = i5 + 1;

        $r8[i16] = $i9;

        return;

     label6:
        $r4 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i4 = $r4[i16];

        if $i4 < i0 goto label7;

        $r5 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i6 = $r5[i16];

        if $i6 > i5 goto label7;

        $r6 = r0.<org.apache.regexp.RECompiler$RERange: int[] maxRange>;

        $i7 = i0 - 1;

        $r6[i16] = $i7;

        return;

     label7:
        i16 = i16 + 1;

     label8:
        $i17 = r0.<org.apache.regexp.RECompiler$RERange: int num>;

        if i16 < $i17 goto label1;

        return;
    }

    void include(int, int, boolean)
    {
        org.apache.regexp.RECompiler$RERange r0;
        int i0, i1;
        boolean z0;

        r0 := @this: org.apache.regexp.RECompiler$RERange;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void merge(int,int)>(i0, i1);

        goto label2;

     label1:
        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void remove(int,int)>(i0, i1);

     label2:
        return;
    }

    void include(char, boolean)
    {
        org.apache.regexp.RECompiler$RERange r0;
        int $i1, $i2;
        char c0;
        boolean z0;

        r0 := @this: org.apache.regexp.RECompiler$RERange;

        c0 := @parameter0: char;

        z0 := @parameter1: boolean;

        $i1 = (int) c0;

        $i2 = (int) c0;

        virtualinvoke r0.<org.apache.regexp.RECompiler$RERange: void include(int,int,boolean)>($i1, $i2, z0);

        return;
    }
}
