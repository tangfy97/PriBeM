public class com.sun.xml.txw2.output.StreamSerializer extends java.lang.Object implements com.sun.xml.txw2.output.XmlSerializer
{
    private final com.sun.xml.txw2.output.SaxSerializer serializer;
    private final com.sun.xml.txw2.output.XMLWriter writer;

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        com.sun.xml.txw2.output.XMLWriter $r2;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream)>(r1);

        specialinvoke r0.<com.sun.xml.txw2.output.StreamSerializer: void <init>(com.sun.xml.txw2.output.XMLWriter)>($r2);

        return;
    }

    public void <init>(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r1;
        com.sun.xml.txw2.output.XMLWriter $r3;
        java.lang.String r2;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream,java.lang.String)>(r1, r2);

        specialinvoke r0.<com.sun.xml.txw2.output.StreamSerializer: void <init>(com.sun.xml.txw2.output.XMLWriter)>($r3);

        return;
    }

    public void <init>(java.io.Writer)
    {
        java.io.Writer r2;
        com.sun.xml.txw2.output.StreamSerializer r0;
        javax.xml.transform.stream.StreamResult $r1;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r2 := @parameter0: java.io.Writer;

        $r1 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r1.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>(r2);

        specialinvoke r0.<com.sun.xml.txw2.output.StreamSerializer: void <init>(javax.xml.transform.stream.StreamResult)>($r1);

        return;
    }

    public void <init>(javax.xml.transform.stream.StreamResult)
    {
        javax.xml.transform.stream.StreamResult r2;
        com.sun.xml.txw2.output.StreamSerializer$1 $r17;
        java.lang.String $r5, $r7, $r8;
        java.io.OutputStream $r4, $r11;
        com.sun.xml.txw2.TxwException $r16;
        java.io.FileOutputStream $r9;
        java.io.IOException $r15;
        java.lang.IllegalArgumentException $r6;
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.XMLWriter $r10, $r12, $r14, $r18, $r19;
        java.io.OutputStream[] r1;
        java.io.Writer $r3, $r13;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r2 := @parameter0: javax.xml.transform.stream.StreamResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = newarray (java.io.OutputStream)[1];

        $r3 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>();

        if $r3 == null goto label1;

        $r13 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>();

        $r14 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.Writer)>($r13);

        r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer> = $r14;

        goto label8;

     label1:
        $r4 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()>();

        if $r4 == null goto label2;

        $r11 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.io.OutputStream getOutputStream()>();

        $r12 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream)>($r11);

        r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer> = $r12;

        goto label8;

     label2:
        $r5 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.lang.String getSystemId()>();

        if $r5 == null goto label7;

        $r7 = virtualinvoke r2.<javax.xml.transform.stream.StreamResult: java.lang.String getSystemId()>();

        $r8 = specialinvoke r0.<com.sun.xml.txw2.output.StreamSerializer: java.lang.String convertURL(java.lang.String)>($r7);

     label3:
        $r9 = new java.io.FileOutputStream;

        specialinvoke $r9.<java.io.FileOutputStream: void <init>(java.lang.String)>($r8);

        r1[0] = $r9;

        $r10 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream)>($r9);

        r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer> = $r10;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        $r16 = new com.sun.xml.txw2.TxwException;

        specialinvoke $r16.<com.sun.xml.txw2.TxwException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label6:
        goto label8;

     label7:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label8:
        $r17 = new com.sun.xml.txw2.output.StreamSerializer$1;

        $r18 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer>;

        $r19 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer>;

        specialinvoke $r17.<com.sun.xml.txw2.output.StreamSerializer$1: void <init>(com.sun.xml.txw2.output.StreamSerializer,org.xml.sax.ContentHandler,org.xml.sax.ext.LexicalHandler,boolean,java.io.OutputStream[])>(r0, $r18, $r19, 0, r1);

        r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer> = $r17;

        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private void <init>(com.sun.xml.txw2.output.XMLWriter)
    {
        com.sun.xml.txw2.output.XMLWriter r1;
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r2;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: com.sun.xml.txw2.output.XMLWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer> = r1;

        $r2 = new com.sun.xml.txw2.output.SaxSerializer;

        specialinvoke $r2.<com.sun.xml.txw2.output.SaxSerializer: void <init>(org.xml.sax.ContentHandler,org.xml.sax.ext.LexicalHandler,boolean)>(r1, r1, 0);

        r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer> = $r2;

        return;
    }

    private java.lang.String convertURL(java.lang.String)
    {
        com.sun.xml.txw2.output.StreamSerializer r4;
        int $i0;
        java.lang.String $r0, $r1, $r2, $r3, r5, r6;
        boolean $z0;

        r4 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r5 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r5.<java.lang.String: java.lang.String replace(char,char)>(92, 47);

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("//", "/");

        r6 = $r2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("file:/");

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(6);

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label1;

        r6 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(6);

        goto label2;

     label1:
        r6 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(5);

     label2:
        return r6;
    }

    public void startDocument()
    {
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r1;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        $r1 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r1.<com.sun.xml.txw2.output.SaxSerializer: void startDocument()>();

        return;
    }

    public void beginStartTag(java.lang.String, java.lang.String, java.lang.String)
    {
        com.sun.xml.txw2.output.SaxSerializer $r4;
        java.lang.String r1, r2, r3;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r4.<com.sun.xml.txw2.output.SaxSerializer: void beginStartTag(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.StringBuilder)
    {
        com.sun.xml.txw2.output.SaxSerializer $r5;
        java.lang.StringBuilder r4;
        java.lang.String r1, r2, r3;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.StringBuilder;

        $r5 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r5.<com.sun.xml.txw2.output.SaxSerializer: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.StringBuilder)>(r1, r2, r3, r4);

        return;
    }

    public void writeXmlns(java.lang.String, java.lang.String)
    {
        com.sun.xml.txw2.output.SaxSerializer $r3;
        java.lang.String r1, r2;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r3.<com.sun.xml.txw2.output.SaxSerializer: void writeXmlns(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void endStartTag(java.lang.String, java.lang.String, java.lang.String)
    {
        com.sun.xml.txw2.output.SaxSerializer $r4;
        java.lang.String r1, r2, r3;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r4.<com.sun.xml.txw2.output.SaxSerializer: void endStartTag(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void endTag()
    {
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r1;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        $r1 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r1.<com.sun.xml.txw2.output.SaxSerializer: void endTag()>();

        return;
    }

    public void text(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r1;
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r2;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r2.<com.sun.xml.txw2.output.SaxSerializer: void text(java.lang.StringBuilder)>(r1);

        return;
    }

    public void cdata(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r1;
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r2;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r2.<com.sun.xml.txw2.output.SaxSerializer: void cdata(java.lang.StringBuilder)>(r1);

        return;
    }

    public void comment(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r1;
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r2;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r2.<com.sun.xml.txw2.output.SaxSerializer: void comment(java.lang.StringBuilder)>(r1);

        return;
    }

    public void endDocument()
    {
        com.sun.xml.txw2.output.StreamSerializer r0;
        com.sun.xml.txw2.output.SaxSerializer $r1;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        $r1 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r1.<com.sun.xml.txw2.output.SaxSerializer: void endDocument()>();

        return;
    }

    public void flush()
    {
        com.sun.xml.txw2.output.XMLWriter $r2;
        com.sun.xml.txw2.TxwException $r4;
        com.sun.xml.txw2.output.SaxSerializer $r1;
        java.io.IOException $r3;
        com.sun.xml.txw2.output.StreamSerializer r0;

        r0 := @this: com.sun.xml.txw2.output.StreamSerializer;

        $r1 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.SaxSerializer serializer>;

        virtualinvoke $r1.<com.sun.xml.txw2.output.SaxSerializer: void flush()>();

     label1:
        $r2 = r0.<com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter writer>;

        virtualinvoke $r2.<com.sun.xml.txw2.output.XMLWriter: void flush()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.sun.xml.txw2.TxwException;

        specialinvoke $r4.<com.sun.xml.txw2.TxwException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static com.sun.xml.txw2.output.XMLWriter createWriter(java.io.Writer)
    {
        java.io.Writer r2;
        com.sun.xml.txw2.output.DataWriter $r0;
        java.io.BufferedWriter $r1;

        r2 := @parameter0: java.io.Writer;

        $r0 = new com.sun.xml.txw2.output.DataWriter;

        $r1 = new java.io.BufferedWriter;

        specialinvoke $r1.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r2);

        specialinvoke $r0.<com.sun.xml.txw2.output.DataWriter: void <init>(java.io.Writer)>($r1);

        virtualinvoke $r0.<com.sun.xml.txw2.output.DataWriter: void setIndentStep(java.lang.String)>("  ");

        return $r0;
    }

    private static com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r1;
        com.sun.xml.txw2.output.XMLWriter $r3;
        java.io.OutputStreamWriter $r0;
        java.lang.String r2;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.io.OutputStreamWriter;

        specialinvoke $r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, r2);

        $r3 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.Writer)>($r0);

        virtualinvoke $r3.<com.sun.xml.txw2.output.XMLWriter: void setEncoding(java.lang.String)>(r2);

        return $r3;
    }

    private static com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        com.sun.xml.txw2.output.XMLWriter $r1;
        java.lang.Error $r3;
        java.io.UnsupportedEncodingException $r2;

        r0 := @parameter0: java.io.OutputStream;

     label1:
        $r1 = staticinvoke <com.sun.xml.txw2.output.StreamSerializer: com.sun.xml.txw2.output.XMLWriter createWriter(java.io.OutputStream,java.lang.String)>(r0, "UTF-8");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
