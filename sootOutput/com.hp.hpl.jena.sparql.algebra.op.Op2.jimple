public abstract class com.hp.hpl.jena.sparql.algebra.op.Op2 extends com.hp.hpl.jena.sparql.algebra.op.OpBase
{
    private com.hp.hpl.jena.sparql.algebra.Op left;
    private com.hp.hpl.jena.sparql.algebra.Op right;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.Op2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op left> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op right> = r2;

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op getLeft()
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.Op2;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op left>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.algebra.Op getRight()
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.Op2;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op right>;

        return $r1;
    }

    public abstract com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op);

    public abstract com.hp.hpl.jena.sparql.algebra.op.Op2 copy(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op);

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.algebra.Op $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.Op2;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op left>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = $i0 << 1;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op right>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i3 = $i1 ^ $i2;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: java.lang.String getName()>();

        $i4 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i5 = $i3 ^ $i4;

        return $i5;
    }

    protected final boolean sameArgumentsAs(com.hp.hpl.jena.sparql.algebra.op.Op2, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.algebra.op.Op2 r0, r1;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r2;
        com.hp.hpl.jena.sparql.algebra.Op $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.Op2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.Op2;

        r2 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op left>;

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op left>;

        $z0 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, r2);

        if $z0 == 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op right>;

        $r5 = r1.<com.hp.hpl.jena.sparql.algebra.op.Op2: com.hp.hpl.jena.sparql.algebra.Op right>;

        $z1 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r5, r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
