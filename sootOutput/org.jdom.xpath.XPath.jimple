public abstract class org.jdom.xpath.XPath extends java.lang.Object implements java.io.Serializable
{
    private static final java.lang.String CVS_ID;
    private static final java.lang.String XPATH_CLASS_PROPERTY;
    private static final java.lang.String DEFAULT_XPATH_CLASS;
    private static java.lang.reflect.Constructor constructor;
    static java.lang.Class class$org$jdom$xpath$XPath;
    static java.lang.Class class$java$lang$String;

    static void <clinit>()
    {
        <org.jdom.xpath.XPath: java.lang.String DEFAULT_XPATH_CLASS> = "org.jdom.xpath.JaxenXPath";

        <org.jdom.xpath.XPath: java.lang.String XPATH_CLASS_PROPERTY> = "org.jdom.xpath.class";

        <org.jdom.xpath.XPath: java.lang.String CVS_ID> = "@(#) $RCSfile: XPath.java,v $ $Revision: 1.15 $ $Date: 2004/02/06 09:28:32 $ $Name: jdom_1_0 $";

        <org.jdom.xpath.XPath: java.lang.reflect.Constructor constructor> = null;

        return;
    }

    public void <init>()
    {
        org.jdom.xpath.XPath r0;

        r0 := @this: org.jdom.xpath.XPath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addNamespace(java.lang.String, java.lang.String)
    {
        org.jdom.Namespace $r3;
        java.lang.String r1, r2;
        org.jdom.xpath.XPath r0;

        r0 := @this: org.jdom.xpath.XPath;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.jdom.xpath.XPath: void addNamespace(org.jdom.Namespace)>($r3);

        return;
    }

    public abstract void addNamespace(org.jdom.Namespace);

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    public abstract java.lang.String getXPath();

    public static org.jdom.xpath.XPath newInstance(java.lang.String) throws org.jdom.JDOMException
    {
        java.lang.Throwable $r7;
        java.lang.Object[] $r13;
        java.lang.reflect.Constructor $r0, $r12;
        org.jdom.xpath.XPath $r15;
        org.jdom.JDOMException $r4, $r9, $r16;
        java.lang.SecurityException $r10;
        java.lang.String r1, $r5, $r8, r11;
        boolean $z0;
        java.lang.Exception $r3;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Class $r2;
        java.lang.Object $r14;

        r1 := @parameter0: java.lang.String;

     label01:
        $r0 = <org.jdom.xpath.XPath: java.lang.reflect.Constructor constructor>;

        if $r0 != null goto label06;

     label02:
        r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("org.jdom.xpath.class", "org.jdom.xpath.JaxenXPath");

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

        r11 = "org.jdom.xpath.JaxenXPath";

     label05:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r11);

        staticinvoke <org.jdom.xpath.XPath: void setXPathClass(java.lang.Class)>($r2);

     label06:
        $r12 = <org.jdom.xpath.XPath: java.lang.reflect.Constructor constructor>;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r1;

        $r14 = virtualinvoke $r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r13);

        $r15 = (org.jdom.xpath.XPath) $r14;

        return $r15;

     label07:
        $r9 := @caughtexception;

        throw $r9;

     label08:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r7 instanceof org.jdom.JDOMException;

        if $z0 == 0 goto label09;

        $r16 = (org.jdom.JDOMException) $r7;

        goto label10;

     label09:
        $r16 = new org.jdom.JDOMException;

        $r8 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r16.<org.jdom.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r7);

     label10:
        throw $r16;

     label11:
        $r3 := @caughtexception;

        $r4 = new org.jdom.JDOMException;

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r4.<org.jdom.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        throw $r4;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch org.jdom.JDOMException from label01 to label07 with label07;
        catch java.lang.reflect.InvocationTargetException from label01 to label07 with label08;
        catch java.lang.Exception from label01 to label07 with label11;
    }

    public abstract java.lang.Number numberValueOf(java.lang.Object) throws org.jdom.JDOMException;

    public abstract java.util.List selectNodes(java.lang.Object) throws org.jdom.JDOMException;

    public static java.util.List selectNodes(java.lang.Object, java.lang.String) throws org.jdom.JDOMException
    {
        java.util.List $r3;
        java.lang.Object r2;
        java.lang.String r0;
        org.jdom.xpath.XPath $r1;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.jdom.xpath.XPath: org.jdom.xpath.XPath newInstance(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<org.jdom.xpath.XPath: java.util.List selectNodes(java.lang.Object)>(r2);

        return $r3;
    }

    public abstract java.lang.Object selectSingleNode(java.lang.Object) throws org.jdom.JDOMException;

    public static java.lang.Object selectSingleNode(java.lang.Object, java.lang.String) throws org.jdom.JDOMException
    {
        java.lang.Object r2, $r3;
        java.lang.String r0;
        org.jdom.xpath.XPath $r1;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.jdom.xpath.XPath: org.jdom.xpath.XPath newInstance(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<org.jdom.xpath.XPath: java.lang.Object selectSingleNode(java.lang.Object)>(r2);

        return $r3;
    }

    public abstract void setVariable(java.lang.String, java.lang.Object);

    public static void setXPathClass(java.lang.Class) throws org.jdom.JDOMException
    {
        java.lang.reflect.Constructor $r10;
        org.jdom.JDOMException $r2, $r13, $r15;
        java.lang.StringBuffer $r3, $r6;
        int $i0;
        java.lang.String $r4, $r5, $r7, $r14;
        boolean $z0, $z1;
        java.lang.Class[] $r8;
        java.lang.IllegalArgumentException $r11;
        java.lang.Exception $r12;
        java.lang.Class r0, $r1, $r9, $r16, $r17;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("aClass");

        throw $r11;

     label1:
        $r1 = <org.jdom.xpath.XPath: java.lang.Class class$org$jdom$xpath$XPath>;

        if $r1 == null goto label2;

        $r16 = <org.jdom.xpath.XPath: java.lang.Class class$org$jdom$xpath$XPath>;

        goto label3;

     label2:
        $r16 = staticinvoke <org.jdom.xpath.XPath: java.lang.Class class$(java.lang.String)>("org.jdom.xpath.XPath");

        <org.jdom.xpath.XPath: java.lang.Class class$org$jdom$xpath$XPath> = $r16;

     label3:
        $z0 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label6;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 != 0 goto label6;

        $r8 = newarray (java.lang.Class)[1];

        $r9 = <org.jdom.xpath.XPath: java.lang.Class class$java$lang$String>;

        if $r9 == null goto label4;

        $r17 = <org.jdom.xpath.XPath: java.lang.Class class$java$lang$String>;

        goto label5;

     label4:
        $r17 = staticinvoke <org.jdom.xpath.XPath: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.jdom.xpath.XPath: java.lang.Class class$java$lang$String> = $r17;

     label5:
        $r8[0] = $r17;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r8);

        <org.jdom.xpath.XPath: java.lang.reflect.Constructor constructor> = $r10;

        goto label9;

     label6:
        $r2 = new org.jdom.JDOMException;

        $r3 = new java.lang.StringBuffer;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not a concrete JDOM XPath implementation");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.jdom.JDOMException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label7:
        $r15 := @caughtexception;

        throw $r15;

     label8:
        $r12 := @caughtexception;

        $r13 = new org.jdom.JDOMException;

        $r14 = virtualinvoke $r12.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r13.<org.jdom.JDOMException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r12);

        throw $r13;

     label9:
        return;

        catch org.jdom.JDOMException from label1 to label7 with label7;
        catch java.lang.Exception from label1 to label7 with label8;
    }

    public abstract java.lang.String valueOf(java.lang.Object) throws org.jdom.JDOMException;

    protected final java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.jdom.xpath.XPath$XPathString $r0;
        java.lang.String $r2;
        org.jdom.xpath.XPath r1;

        r1 := @this: org.jdom.xpath.XPath;

        $r0 = new org.jdom.xpath.XPath$XPathString;

        $r2 = virtualinvoke r1.<org.jdom.xpath.XPath: java.lang.String getXPath()>();

        specialinvoke $r0.<org.jdom.xpath.XPath$XPathString: void <init>(java.lang.String)>($r2);

        return $r0;
    }
}
