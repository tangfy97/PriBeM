public class org.springframework.aop.interceptor.CustomizableTraceInterceptor extends org.springframework.aop.interceptor.AbstractTraceInterceptor
{
    public static final java.lang.String PLACEHOLDER_METHOD_NAME;
    public static final java.lang.String PLACEHOLDER_TARGET_CLASS_NAME;
    public static final java.lang.String PLACEHOLDER_TARGET_CLASS_SHORT_NAME;
    public static final java.lang.String PLACEHOLDER_RETURN_VALUE;
    public static final java.lang.String PLACEHOLDER_ARGUMENT_TYPES;
    public static final java.lang.String PLACEHOLDER_ARGUMENTS;
    public static final java.lang.String PLACEHOLDER_EXCEPTION;
    public static final java.lang.String PLACEHOLDER_INVOCATION_TIME;
    private static final java.lang.String DEFAULT_ENTER_MESSAGE;
    private static final java.lang.String DEFAULT_EXIT_MESSAGE;
    private static final java.lang.String DEFAULT_EXCEPTION_MESSAGE;
    private static final java.util.regex.Pattern PATTERN;
    private static final java.util.Set ALLOWED_PLACEHOLDERS;
    private java.lang.String enterMessage;
    private java.lang.String exitMessage;
    private java.lang.String exceptionMessage;

    static void <clinit>()
    {
        java.util.Set $r2;
        org.springframework.core.Constants $r1;
        java.util.regex.Pattern $r0;

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String DEFAULT_EXCEPTION_MESSAGE> = "Exception thrown in method \'$[methodName]\' of class [$[targetClassName]]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String DEFAULT_EXIT_MESSAGE> = "Exiting method \'$[methodName]\' of class [$[targetClassName]]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String DEFAULT_ENTER_MESSAGE> = "Entering method \'$[methodName]\' of class [$[targetClassName]]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_INVOCATION_TIME> = "$[invocationTime]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_EXCEPTION> = "$[exception]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_ARGUMENTS> = "$[arguments]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_ARGUMENT_TYPES> = "$[argumentTypes]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_RETURN_VALUE> = "$[returnValue]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_TARGET_CLASS_SHORT_NAME> = "$[targetClassShortName]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_TARGET_CLASS_NAME> = "$[targetClassName]";

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String PLACEHOLDER_METHOD_NAME> = "$[methodName]";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\$\\[\\p{Alpha}+\\]");

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.util.regex.Pattern PATTERN> = $r0;

        $r1 = new org.springframework.core.Constants;

        specialinvoke $r1.<org.springframework.core.Constants: void <init>(java.lang.Class)>(class "Lorg/springframework/aop/interceptor/CustomizableTraceInterceptor;");

        $r2 = virtualinvoke $r1.<org.springframework.core.Constants: java.util.Set getValues(java.lang.String)>("PLACEHOLDER_");

        <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.util.Set ALLOWED_PLACEHOLDERS> = $r2;

        return;
    }

    public void <init>()
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        specialinvoke r0.<org.springframework.aop.interceptor.AbstractTraceInterceptor: void <init>()>();

        r0.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String enterMessage> = "Entering method \'$[methodName]\' of class [$[targetClassName]]";

        r0.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exitMessage> = "Exiting method \'$[methodName]\' of class [$[targetClassName]]";

        r0.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exceptionMessage> = "Exception thrown in method \'$[methodName]\' of class [$[targetClassName]]";

        return;
    }

    public void setEnterMessage(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r1;
        java.lang.String r0;

        r1 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'enterMessage\' must not be empty");

        specialinvoke r1.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void checkForInvalidPlaceholders(java.lang.String)>(r0);

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, "$[returnValue]", "enterMessage cannot contain placeholder [$[returnValue]]");

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, "$[exception]", "enterMessage cannot contain placeholder [$[exception]]");

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, "$[invocationTime]", "enterMessage cannot contain placeholder [$[invocationTime]]");

        r1.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String enterMessage> = r0;

        return;
    }

    public void setExitMessage(java.lang.String)
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r1;
        java.lang.String r0;

        r1 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'exitMessage\' must not be empty");

        specialinvoke r1.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void checkForInvalidPlaceholders(java.lang.String)>(r0);

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, "$[exception]", "exitMessage cannot contain placeholder [$[exception]]");

        r1.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exitMessage> = r0;

        return;
    }

    public void setExceptionMessage(java.lang.String)
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r1;
        java.lang.String r0;

        r1 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'exceptionMessage\' must not be empty");

        specialinvoke r1.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void checkForInvalidPlaceholders(java.lang.String)>(r0);

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, "$[returnValue]", "exceptionMessage cannot contain placeholder [$[returnValue]]");

        staticinvoke <org.springframework.util.Assert: void doesNotContain(java.lang.String,java.lang.String,java.lang.String)>(r0, "$[invocationTime]", "exceptionMessage cannot contain placeholder [$[invocationTime]]");

        r1.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exceptionMessage> = r0;

        return;
    }

    protected java.lang.Object invokeUnderTrace(org.aopalliance.intercept.MethodInvocation, org.apache.commons.logging.Log) throws java.lang.Throwable
    {
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.reflect.Method $r2, $r7;
        boolean $z0, $z1, $z2, z3;
        org.springframework.util.StopWatch $r11;
        java.lang.StringBuilder $r0, $r6, $r9;
        java.lang.Throwable $r19, $r22;
        long $l0, $l1, $l2;
        java.lang.String $r4, $r5, $r8, $r10, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24;
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r12;
        java.lang.Class $r3;
        org.apache.commons.logging.Log r13;
        java.lang.Object $r16, r25;

        r12 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r13 := @parameter1: org.apache.commons.logging.Log;

        $r0 = new java.lang.StringBuilder;

        $r2 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new org.springframework.util.StopWatch;

        specialinvoke $r11.<org.springframework.util.StopWatch: void <init>(java.lang.String)>($r10);

        r25 = null;

        z3 = 0;

     label1:
        virtualinvoke $r11.<org.springframework.util.StopWatch: void start(java.lang.String)>($r10);

        $r14 = r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String enterMessage>;

        $r15 = virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String replacePlaceholders(java.lang.String,org.aopalliance.intercept.MethodInvocation,java.lang.Object,java.lang.Throwable,long)>($r14, r1, null, null, -1L);

        virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void writeToLog(org.apache.commons.logging.Log,java.lang.String)>(r13, $r15);

        $r16 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        r25 = $r16;

     label2:
        if 0 != 0 goto label4;

        $z0 = virtualinvoke $r11.<org.springframework.util.StopWatch: boolean isRunning()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r11.<org.springframework.util.StopWatch: void stop()>();

     label3:
        $r17 = r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exitMessage>;

        $l0 = virtualinvoke $r11.<org.springframework.util.StopWatch: long getTotalTimeMillis()>();

        $r18 = virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String replacePlaceholders(java.lang.String,org.aopalliance.intercept.MethodInvocation,java.lang.Object,java.lang.Throwable,long)>($r17, r1, $r16, null, $l0);

        virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void writeToLog(org.apache.commons.logging.Log,java.lang.String)>(r13, $r18);

     label4:
        return $r16;

     label5:
        $r22 := @caughtexception;

        $z2 = virtualinvoke $r11.<org.springframework.util.StopWatch: boolean isRunning()>();

        if $z2 == 0 goto label6;

        virtualinvoke $r11.<org.springframework.util.StopWatch: void stop()>();

     label6:
        z3 = 1;

        $r23 = r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exceptionMessage>;

        $l2 = virtualinvoke $r11.<org.springframework.util.StopWatch: long getTotalTimeMillis()>();

        $r24 = virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String replacePlaceholders(java.lang.String,org.aopalliance.intercept.MethodInvocation,java.lang.Object,java.lang.Throwable,long)>($r23, r1, null, $r22, $l2);

        virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void writeToLog(org.apache.commons.logging.Log,java.lang.String,java.lang.Throwable)>(r13, $r24, $r22);

        throw $r22;

     label7:
        $r19 := @caughtexception;

        if z3 != 0 goto label9;

        $z1 = virtualinvoke $r11.<org.springframework.util.StopWatch: boolean isRunning()>();

        if $z1 == 0 goto label8;

        virtualinvoke $r11.<org.springframework.util.StopWatch: void stop()>();

     label8:
        $r20 = r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String exitMessage>;

        $l1 = virtualinvoke $r11.<org.springframework.util.StopWatch: long getTotalTimeMillis()>();

        $r21 = virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String replacePlaceholders(java.lang.String,org.aopalliance.intercept.MethodInvocation,java.lang.Object,java.lang.Throwable,long)>($r20, r1, r25, null, $l1);

        virtualinvoke r12.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void writeToLog(org.apache.commons.logging.Log,java.lang.String)>(r13, $r21);

     label9:
        throw $r19;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label5 to label7 with label7;
    }

    protected void writeToLog(org.apache.commons.logging.Log, java.lang.String)
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r0;
        org.apache.commons.logging.Log r1;
        java.lang.String r2;

        r0 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r1 := @parameter0: org.apache.commons.logging.Log;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void writeToLog(org.apache.commons.logging.Log,java.lang.String,java.lang.Throwable)>(r1, r2, null);

        return;
    }

    protected void writeToLog(org.apache.commons.logging.Log, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r0;
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r3;
        org.apache.commons.logging.Log r1;
        java.lang.String r2;

        r3 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r1 := @parameter0: org.apache.commons.logging.Log;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Throwable;

        if r0 == null goto label1;

        interfaceinvoke r1.<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>(r2, r0);

        goto label2;

     label1:
        interfaceinvoke r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>(r2);

     label2:
        return;
    }

    protected java.lang.String replacePlaceholders(java.lang.String, org.aopalliance.intercept.MethodInvocation, java.lang.Object, java.lang.Throwable, long)
    {
        java.util.regex.Matcher $r2;
        org.aopalliance.intercept.MethodInvocation r23;
        java.lang.reflect.Method $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.util.regex.Pattern $r1;
        java.lang.Throwable r11;
        java.lang.Object[] $r25;
        long l0;
        java.lang.StringBuffer $r3;
        java.lang.String r0, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r17, $r18, $r19, $r21, $r22, $r26, $r27, $r30, $r31, $r34, $r35, $r37, $r38, $r39;
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r20;
        java.lang.IllegalArgumentException $r13;
        java.lang.Object r24, $r28, $r32;
        java.lang.Class $r29, $r33;

        r20 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: java.lang.String;

        r23 := @parameter1: org.aopalliance.intercept.MethodInvocation;

        r24 := @parameter2: java.lang.Object;

        r11 := @parameter3: java.lang.Throwable;

        l0 := @parameter4: long;

        $r1 = <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.util.regex.Pattern PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        goto label10;

     label01:
        $r4 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group()>();

        $r5 = "$[methodName]";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label02;

        $r36 = interfaceinvoke r23.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r37 = virtualinvoke $r36.<java.lang.reflect.Method: java.lang.String getName()>();

        $r38 = specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r37);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r3, $r38);

        goto label10;

     label02:
        $r6 = "$[targetClassName]";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label03;

        $r32 = interfaceinvoke r23.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r33 = virtualinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.Class getClassForLogging(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.String getName()>();

        $r35 = specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r34);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r3, $r35);

        goto label10;

     label03:
        $r7 = "$[targetClassShortName]";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label04;

        $r28 = interfaceinvoke r23.<org.aopalliance.intercept.MethodInvocation: java.lang.Object getThis()>();

        $r29 = virtualinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.Class getClassForLogging(java.lang.Object)>($r28);

        $r30 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r29);

        $r31 = specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r30);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r3, $r31);

        goto label10;

     label04:
        $r8 = "$[arguments]";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label05;

        $r25 = interfaceinvoke r23.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r26 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>($r25);

        $r27 = specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r26);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r3, $r27);

        goto label10;

     label05:
        $r9 = "$[argumentTypes]";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z4 == 0 goto label06;

        specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void appendArgumentTypes(org.aopalliance.intercept.MethodInvocation,java.util.regex.Matcher,java.lang.StringBuffer)>(r23, $r2, $r3);

        goto label10;

     label06:
        $r10 = "$[returnValue]";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z5 == 0 goto label07;

        specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: void appendReturnValue(org.aopalliance.intercept.MethodInvocation,java.util.regex.Matcher,java.lang.StringBuffer,java.lang.Object)>(r23, $r2, $r3, r24);

        goto label10;

     label07:
        if r11 == null goto label08;

        $r19 = "$[exception]";

        $z7 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z7 == 0 goto label08;

        $r21 = virtualinvoke r11.<java.lang.Throwable: java.lang.String toString()>();

        $r22 = specialinvoke r20.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r21);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r3, $r22);

        goto label10;

     label08:
        $r12 = "$[invocationTime]";

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z6 == 0 goto label09;

        $r18 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r3, $r18);

        goto label10;

     label09:
        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown placeholder [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label10:
        $z8 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z8 != 0 goto label01;

        virtualinvoke $r2.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r3);

        $r39 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r39;
    }

    private void appendReturnValue(org.aopalliance.intercept.MethodInvocation, java.util.regex.Matcher, java.lang.StringBuffer, java.lang.Object)
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r7;
        org.aopalliance.intercept.MethodInvocation r0;
        java.util.regex.Matcher r5;
        java.lang.StringBuffer r6;
        java.lang.Class $r2, $r3;
        java.lang.Object r4;
        java.lang.String $r8, $r9;
        java.lang.reflect.Method $r1;

        r7 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r5 := @parameter1: java.util.regex.Matcher;

        r6 := @parameter2: java.lang.StringBuffer;

        r4 := @parameter3: java.lang.Object;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        if $r2 != $r3 goto label1;

        virtualinvoke r5.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r6, "void");

        goto label3;

     label1:
        if r4 != null goto label2;

        virtualinvoke r5.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r6, "null");

        goto label3;

     label2:
        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>();

        $r9 = specialinvoke r7.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r8);

        virtualinvoke r5.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r6, $r9);

     label3:
        return;
    }

    private void appendArgumentTypes(org.aopalliance.intercept.MethodInvocation, java.util.regex.Matcher, java.lang.StringBuffer)
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r8;
        java.lang.Class[] $r2;
        java.lang.String[] r3;
        org.aopalliance.intercept.MethodInvocation r0;
        java.util.regex.Matcher r6;
        java.lang.StringBuffer r7;
        int $i0, $i1, i2;
        java.lang.Class $r4;
        java.lang.String $r5, $r9, $r10;
        java.lang.reflect.Method $r1;

        r8 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r6 := @parameter1: java.util.regex.Matcher;

        r7 := @parameter2: java.lang.StringBuffer;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r2 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        r3 = newarray (java.lang.String)[$i0];

        i2 = 0;

        goto label2;

     label1:
        $r4 = $r2[i2];

        $r5 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r4);

        r3[i2] = $r5;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r3;

        if i2 < $i1 goto label1;

        $r9 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>(r3);

        $r10 = specialinvoke r8.<org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.lang.String escape(java.lang.String)>($r9);

        virtualinvoke r6.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>(r7, $r10);

        return;
    }

    private void checkForInvalidPlaceholders(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r10;
        java.util.Set $r4;
        java.lang.IllegalArgumentException $r5;
        java.util.regex.Matcher $r2;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r0, $r3, $r9;
        java.util.regex.Pattern $r1;
        boolean $z0, $z1;

        r10 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.util.regex.Pattern PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        goto label2;

     label1:
        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group()>();

        $r4 = <org.springframework.aop.interceptor.CustomizableTraceInterceptor: java.util.Set ALLOWED_PLACEHOLDERS>;

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Placeholder [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not valid");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        return;
    }

    private java.lang.String escape(java.lang.String)
    {
        org.springframework.aop.interceptor.CustomizableTraceInterceptor r3;
        char $c0;
        int i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r4;
        java.lang.String r1, $r2;

        r3 := @this: org.springframework.aop.interceptor.CustomizableTraceInterceptor;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i1 = 0;

        goto label5;

     label1:
        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $i3 = (int) $c0;

        if $i3 != 92 goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\\\");

        goto label4;

     label2:
        $i4 = (int) $c0;

        if $i4 != 36 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\$");

        goto label4;

     label3:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

     label4:
        i1 = i1 + 1;

     label5:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 < $i2 goto label1;

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
