public class com.google.inject.internal.cglib.core.$MethodWrapper extends java.lang.Object
{
    private static final com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey KEY_FACTORY;
    static java.lang.Class class$net$sf$cglib$core$MethodWrapper$MethodWrapperKey;

    private void <init>()
    {
        com.google.inject.internal.cglib.core.$MethodWrapper r0;

        r0 := @this: com.google.inject.internal.cglib.core.$MethodWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object create(java.lang.reflect.Method)
    {
        com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey $r1;
        java.lang.Class[] $r3;
        java.lang.String[] $r4;
        java.lang.Class $r5;
        java.lang.Object $r7;
        java.lang.String $r2, $r6;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <com.google.inject.internal.cglib.core.$MethodWrapper: com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey KEY_FACTORY>;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r4 = staticinvoke <com.google.inject.internal.cglib.core.$ReflectUtils: java.lang.String[] getNames(java.lang.Class[])>($r3);

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = interfaceinvoke $r1.<com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey: java.lang.Object newInstance(java.lang.String,java.lang.String[],java.lang.String)>($r2, $r4, $r6);

        return $r7;
    }

    public static java.util.Set createSet(java.util.Collection)
    {
        java.util.HashSet $r0;
        java.util.Iterator $r2;
        java.util.Collection r1;
        java.lang.Object $r3, $r5;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.reflect.Method) $r3;

        $r5 = staticinvoke <com.google.inject.internal.cglib.core.$MethodWrapper: java.lang.Object create(java.lang.reflect.Method)>($r4);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey $r2;
        java.lang.Class $r0, $r3;
        com.google.inject.internal.cglib.core.$KeyFactory $r1;

        $r0 = <com.google.inject.internal.cglib.core.$MethodWrapper: java.lang.Class class$net$sf$cglib$core$MethodWrapper$MethodWrapperKey>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <com.google.inject.internal.cglib.core.$MethodWrapper: java.lang.Class class$(java.lang.String)>("com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey");

        <com.google.inject.internal.cglib.core.$MethodWrapper: java.lang.Class class$net$sf$cglib$core$MethodWrapper$MethodWrapperKey> = $r3;

        goto label2;

     label1:
        $r3 = <com.google.inject.internal.cglib.core.$MethodWrapper: java.lang.Class class$net$sf$cglib$core$MethodWrapper$MethodWrapperKey>;

     label2:
        $r1 = staticinvoke <com.google.inject.internal.cglib.core.$KeyFactory: com.google.inject.internal.cglib.core.$KeyFactory create(java.lang.Class)>($r3);

        $r2 = (com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey) $r1;

        <com.google.inject.internal.cglib.core.$MethodWrapper: com.google.inject.internal.cglib.core.$MethodWrapper$MethodWrapperKey KEY_FACTORY> = $r2;

        return;
    }
}
