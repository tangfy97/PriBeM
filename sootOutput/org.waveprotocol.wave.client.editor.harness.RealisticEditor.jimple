public class org.waveprotocol.wave.client.editor.harness.RealisticEditor extends java.lang.Object
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.harness.RealisticEditor r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.RealisticEditor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.client.editor.Editor getRealisticEditor()
    {
        org.waveprotocol.wave.client.editor.Editor $r2;
        org.waveprotocol.wave.client.widget.popup.PopupProvider $r1;
        org.waveprotocol.wave.client.editor.EditorSettings $r3;
        org.waveprotocol.wave.client.editor.content.Registries $r0, $r5;
        org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry $r4;

        $r0 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.RealisticEditor: void registerHandlers(org.waveprotocol.wave.client.editor.content.Registries)>($r0);

        $r1 = <org.waveprotocol.wave.client.widget.popup.simple.Popup: org.waveprotocol.wave.client.widget.popup.PopupProvider LIGHTWEIGHT_POPUP_PROVIDER>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void setPopupProvider(org.waveprotocol.wave.client.widget.popup.PopupProvider)>($r1);

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.Editors: org.waveprotocol.wave.client.editor.Editor create()>();

        $r5 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.content.Registries ROOT_REGISTRIES>;

        $r4 = <org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry: org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry NONE>;

        $r3 = <org.waveprotocol.wave.client.editor.EditorSettings: org.waveprotocol.wave.client.editor.EditorSettings DEFAULT>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.editor.Editor: void init(org.waveprotocol.wave.client.editor.content.Registries,org.waveprotocol.wave.client.editor.keys.KeyBindingRegistry,org.waveprotocol.wave.client.editor.EditorSettings)>($r5, $r4, $r3);

        return $r2;
    }

    private static void registerHandlers(org.waveprotocol.wave.client.editor.content.Registries)
    {
        org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager $r7;
        org.waveprotocol.wave.client.doodad.attachment.SimpleAttachmentManager $r9;
        org.waveprotocol.wave.client.editor.harness.RealisticEditor$1 $r8;
        org.waveprotocol.wave.model.document.util.AnnotationRegistry $r1;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r3, $r6;
        org.waveprotocol.wave.client.editor.content.PainterRegistry $r2;
        org.waveprotocol.wave.client.editor.content.Registries r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.model.document.util.AnnotationRegistry getAnnotationHandlerRegistry()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.content.PainterRegistry getPaintRegistry()>();

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        $r7 = new org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager;

        specialinvoke $r7.<org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager: void <init>()>();

        $r9 = (org.waveprotocol.wave.client.doodad.attachment.SimpleAttachmentManager) $r7;

        staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry,org.waveprotocol.wave.client.doodad.attachment.SimpleAttachmentManager,org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail$ThumbnailActionHandler)>($r3, $r9, null);

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.StyleAnnotationHandler: void register(org.waveprotocol.wave.client.editor.content.Registries)>(r0);

        staticinvoke <org.waveprotocol.wave.client.doodad.diff.DiffAnnotationHandler: void register(org.waveprotocol.wave.model.document.util.AnnotationRegistry,org.waveprotocol.wave.client.editor.content.PainterRegistry)>($r1, $r2);

        staticinvoke <org.waveprotocol.wave.client.doodad.diff.DiffDeleteRenderer: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r3);

        $r8 = new org.waveprotocol.wave.client.editor.harness.RealisticEditor$1;

        specialinvoke $r8.<org.waveprotocol.wave.client.editor.harness.RealisticEditor$1: void <init>()>();

        staticinvoke <org.waveprotocol.wave.client.doodad.link.LinkAnnotationHandler: void register(org.waveprotocol.wave.client.editor.content.Registries,org.waveprotocol.wave.client.doodad.link.LinkAnnotationHandler$LinkAttributeAugmenter)>(r0, $r8);

        staticinvoke <org.waveprotocol.wave.client.editor.content.paragraph.LineRendering: void registerContainer(java.lang.String,org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>("body", $r3);

        $r6 = <org.waveprotocol.wave.client.editor.Editor: org.waveprotocol.wave.client.editor.ElementHandlerRegistry ROOT_HANDLER_REGISTRY>;

        staticinvoke <org.waveprotocol.wave.client.doodad.form.FormDoodads: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r6);

        return;
    }
}
