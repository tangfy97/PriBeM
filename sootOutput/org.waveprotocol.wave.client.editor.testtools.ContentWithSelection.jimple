public class org.waveprotocol.wave.client.editor.testtools.ContentWithSelection extends java.lang.Object
{
    public java.lang.String content;
    public org.waveprotocol.wave.model.document.util.Range selection;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String)
    {
        org.waveprotocol.wave.client.editor.testtools.ContentWithSelection r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.testtools.ContentWithSelection;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: org.waveprotocol.wave.model.document.util.Range selection> = null;

        $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("|");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label4;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: void parseSelection(java.lang.String)>(r1);

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: java.lang.String stripSelection(java.lang.String)>(r1);

        r0.<org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: java.lang.String content> = $r2;

        goto label5;

     label4:
        r0.<org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: java.lang.String content> = r1;

     label5:
        return;
    }

    private static java.lang.String stripSelection(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[|\\[\\]]", "");

        return $r1;
    }

    private void parseSelection(java.lang.String)
    {
        java.lang.AssertionError $r5;
        int $i0, $i2, $i3, $i4, $i5, i6, i7, i8, $i10, $i11, $i13;
        org.waveprotocol.wave.model.document.util.Range $r6, $r7;
        java.lang.String r0;
        boolean $z0;
        char $c1;
        org.waveprotocol.wave.client.editor.testtools.ContentWithSelection r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testtools.ContentWithSelection;

        r0 := @parameter0: java.lang.String;

        i6 = 0;

        i7 = 0;

        $i10 = (int) -1;

        i8 = $i10;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i6 >= $i0 goto label8;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $i11 = (int) $c1;

        lookupswitch($i11)
        {
            case 60: goto label2;
            case 91: goto label5;
            case 93: goto label6;
            case 124: goto label4;
            default: goto label7;
        };

     label2:
        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(47, i6);

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(62, i6);

        i6 = $i4;

        $z0 = <org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if $i4 > 0 goto label3;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Invalid content");

        throw $r5;

     label3:
        $i5 = $i4 - 1;

        if $i3 != $i5 goto label7;

        i7 = i7 + 1;

        goto label7;

     label4:
        $r6 = new org.waveprotocol.wave.model.document.util.Range;

        specialinvoke $r6.<org.waveprotocol.wave.model.document.util.Range: void <init>(int)>(i7);

        r1.<org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: org.waveprotocol.wave.model.document.util.Range selection> = $r6;

        return;

     label5:
        $i2 = i7;

        $i13 = (int) -1;

        i7 = i7 + $i13;

        i8 = $i2;

        goto label7;

     label6:
        $r7 = new org.waveprotocol.wave.model.document.util.Range;

        specialinvoke $r7.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>(i8, i7);

        r1.<org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: org.waveprotocol.wave.model.document.util.Range selection> = $r7;

        return;

     label7:
        i6 = i6 + 1;

        i7 = i7 + 1;

        goto label1;

     label8:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/testtools/ContentWithSelection;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.testtools.ContentWithSelection: boolean $assertionsDisabled> = $z1;

        return;
    }
}
