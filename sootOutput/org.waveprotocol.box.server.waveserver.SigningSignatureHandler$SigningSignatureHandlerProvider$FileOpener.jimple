class org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener extends java.lang.Object implements com.google.common.base.Function
{

    private void <init>()
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.io.FileInputStream apply(java.lang.String)
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener r4;
        java.io.FileInputStream $r0;
        java.lang.String r1;
        com.google.inject.ProvisionException $r3;
        java.io.FileNotFoundException $r2;

        r4 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.google.inject.ProvisionException;

        specialinvoke $r3.<com.google.inject.ProvisionException: void <init>(java.lang.String,java.lang.Throwable)>("could not read certificates", $r2);

        throw $r3;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener r0;
        java.lang.Object r1;
        java.lang.String $r2;
        java.io.FileInputStream $r3;

        r0 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener: java.io.FileInputStream apply(java.lang.String)>($r2);

        return $r3;
    }

    void <init>(org.waveprotocol.box.server.waveserver.SigningSignatureHandler$1)
    {
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener r0;
        org.waveprotocol.box.server.waveserver.SigningSignatureHandler$1 r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.SigningSignatureHandler$1;

        specialinvoke r0.<org.waveprotocol.box.server.waveserver.SigningSignatureHandler$SigningSignatureHandlerProvider$FileOpener: void <init>()>();

        return;
    }
}
