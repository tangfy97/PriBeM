public class org.mozilla.javascript.NativeJavaArray extends org.mozilla.javascript.NativeJavaObject
{
    static final long serialVersionUID;
    java.lang.Object array;
    int length;
    java.lang.Class 'cls';
    org.mozilla.javascript.Scriptable prototype;

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.NativeJavaArray r0;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        return "JavaArray";
    }

    public static org.mozilla.javascript.NativeJavaArray wrap(org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        java.lang.Object r2;
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.NativeJavaArray $r0;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.mozilla.javascript.NativeJavaArray;

        specialinvoke $r0.<org.mozilla.javascript.NativeJavaArray: void <init>(org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public java.lang.Object unwrap()
    {
        java.lang.Object $r1;
        org.mozilla.javascript.NativeJavaArray r0;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        $r1 = r0.<org.mozilla.javascript.NativeJavaArray: java.lang.Object array>;

        return $r1;
    }

    public void <init>(org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        java.lang.RuntimeException $r6;
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.NativeJavaArray r0;
        int $i0;
        java.lang.Class $r2, $r4, $r5;
        java.lang.Object r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r3 := @parameter1: java.lang.Object;

        $r2 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class ObjectClass>;

        specialinvoke r0.<org.mozilla.javascript.NativeJavaObject: void <init>(org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)>(r1, null, $r2);

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Array expected");

        throw $r6;

     label1:
        r0.<org.mozilla.javascript.NativeJavaArray: java.lang.Object array> = r3;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r3);

        r0.<org.mozilla.javascript.NativeJavaArray: int length> = $i0;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        r0.<org.mozilla.javascript.NativeJavaArray: java.lang.Class 'cls'> = $r5;

        return;
    }

    public boolean has(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.NativeJavaArray r1;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.mozilla.javascript.NativeJavaArray;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r1.<org.mozilla.javascript.NativeJavaObject: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>(r0, r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean has(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.NativeJavaArray r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        if 0 > i0 goto label1;

        $i1 = r0.<org.mozilla.javascript.NativeJavaArray: int length>;

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.EvaluatorException $r9;
        java.lang.Integer $r10;
        org.mozilla.javascript.Scriptable r2, $r5;
        org.mozilla.javascript.NativeJavaArray r1;
        int $i0;
        java.lang.Object $r3, $r4, $r6;
        java.lang.Class $r7;
        java.lang.String r0, $r8;
        boolean $z0, $z1;

        r1 := @this: org.mozilla.javascript.NativeJavaArray;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z0 == 0 goto label1;

        $r10 = new java.lang.Integer;

        $i0 = r1.<org.mozilla.javascript.NativeJavaArray: int length>;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i0);

        return $r10;

     label1:
        $r3 = specialinvoke r1.<org.mozilla.javascript.NativeJavaObject: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r0, r2);

        $r4 = <org.mozilla.javascript.NativeJavaArray: java.lang.Object NOT_FOUND>;

        if $r3 != $r4 goto label2;

        $r5 = virtualinvoke r1.<org.mozilla.javascript.NativeJavaArray: org.mozilla.javascript.Scriptable getPrototype()>();

        $z1 = staticinvoke <org.mozilla.javascript.ScriptableObject: boolean hasProperty(org.mozilla.javascript.Scriptable,java.lang.String)>($r5, r0);

        if $z1 != 0 goto label2;

        $r6 = r1.<org.mozilla.javascript.NativeJavaArray: java.lang.Object array>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError2(java.lang.String,java.lang.Object,java.lang.Object)>("msg.java.member.not.found", $r8, r0);

        throw $r9;

     label2:
        return $r3;
    }

    public java.lang.Object get(int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Context $r2;
        org.mozilla.javascript.WrapFactory $r5;
        org.mozilla.javascript.Scriptable r8;
        org.mozilla.javascript.NativeJavaArray r1;
        int i0, $i1;
        java.lang.Object $r0, $r3, $r4, $r7;
        java.lang.Class $r6;

        r1 := @this: org.mozilla.javascript.NativeJavaArray;

        i0 := @parameter0: int;

        r8 := @parameter1: org.mozilla.javascript.Scriptable;

        if 0 > i0 goto label1;

        $i1 = r1.<org.mozilla.javascript.NativeJavaArray: int length>;

        if i0 >= $i1 goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r3 = r1.<org.mozilla.javascript.NativeJavaArray: java.lang.Object array>;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>($r3, i0);

        $r5 = virtualinvoke $r2.<org.mozilla.javascript.Context: org.mozilla.javascript.WrapFactory getWrapFactory()>();

        $r6 = r1.<org.mozilla.javascript.NativeJavaArray: java.lang.Class 'cls'>;

        $r7 = virtualinvoke $r5.<org.mozilla.javascript.WrapFactory: java.lang.Object wrap(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object,java.lang.Class)>($r2, r1, $r4, $r6);

        return $r7;

     label1:
        $r0 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r0;
    }

    public void put(java.lang.String, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.NativeJavaArray r1;
        java.lang.Object r3;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.NativeJavaArray;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z0 != 0 goto label1;

        specialinvoke r1.<org.mozilla.javascript.NativeJavaObject: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r0, r2, r3);

     label1:
        return;
    }

    public void put(int, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable r1;
        org.mozilla.javascript.NativeJavaArray r0;
        int i0, $i1;
        java.lang.Object r2, $r4, $r5;
        java.lang.Class $r3;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        i0 := @parameter0: int;

        r1 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.Object;

        if 0 > i0 goto label1;

        $i1 = r0.<org.mozilla.javascript.NativeJavaArray: int length>;

        if i0 >= $i1 goto label1;

        $r4 = r0.<org.mozilla.javascript.NativeJavaArray: java.lang.Object array>;

        $r3 = r0.<org.mozilla.javascript.NativeJavaArray: java.lang.Class 'cls'>;

        $r5 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object jsToJava(java.lang.Object,java.lang.Class)>(r2, $r3);

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>($r4, i0, $r5);

        return;

     label1:
        specialinvoke r0.<org.mozilla.javascript.NativeJavaObject: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(i0, r1, r2);

        return;
    }

    public java.lang.Object getDefaultValue(java.lang.Class)
    {
        java.lang.Double $r7;
        org.mozilla.javascript.NativeJavaArray r1;
        java.lang.Boolean $r8;
        java.lang.Class r0, $r4, $r5, $r6;
        java.lang.Object $r2;
        java.lang.String $r3;

        r1 := @this: org.mozilla.javascript.NativeJavaArray;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r4 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class StringClass>;

        if r0 != $r4 goto label2;

     label1:
        $r2 = r1.<org.mozilla.javascript.NativeJavaArray: java.lang.Object array>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;

     label2:
        $r5 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class BooleanClass>;

        if r0 != $r5 goto label3;

        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r8;

     label3:
        $r6 = <org.mozilla.javascript.ScriptRuntime: java.lang.Class NumberClass>;

        if r0 != $r6 goto label4;

        $r7 = <org.mozilla.javascript.ScriptRuntime: java.lang.Double NaNobj>;

        return $r7;

     label4:
        return r1;
    }

    public java.lang.Object[] getIds()
    {
        java.lang.Object[] r1;
        org.mozilla.javascript.NativeJavaArray r0;
        int $i0, i1, $i3;
        java.lang.Integer $r3;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        $i0 = r0.<org.mozilla.javascript.NativeJavaArray: int length>;

        r1 = newarray (java.lang.Object)[$i0];

        i1 = r0.<org.mozilla.javascript.NativeJavaArray: int length>;

     label1:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        if i1 < 0 goto label2;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1);

        r1[i1] = $r3;

        goto label1;

     label2:
        return r1;
    }

    public boolean hasInstance(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.NativeJavaArray r3;
        java.lang.Object $r2;
        java.lang.Class $r4;
        boolean $z0, $z1;
        org.mozilla.javascript.Wrapper $r1;

        r3 := @this: org.mozilla.javascript.NativeJavaArray;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        $z0 = r0 instanceof org.mozilla.javascript.Wrapper;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (org.mozilla.javascript.Wrapper) r0;

        $r2 = interfaceinvoke $r1.<org.mozilla.javascript.Wrapper: java.lang.Object unwrap()>();

        $r4 = r3.<org.mozilla.javascript.NativeJavaArray: java.lang.Class 'cls'>;

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        return $z1;
    }

    public org.mozilla.javascript.Scriptable getPrototype()
    {
        org.mozilla.javascript.Scriptable $r1, $r2, $r3, $r4;
        org.mozilla.javascript.NativeJavaArray r0;

        r0 := @this: org.mozilla.javascript.NativeJavaArray;

        $r1 = r0.<org.mozilla.javascript.NativeJavaArray: org.mozilla.javascript.Scriptable prototype>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.mozilla.javascript.NativeJavaArray: org.mozilla.javascript.Scriptable getParentScope()>();

        $r4 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getClassPrototype(org.mozilla.javascript.Scriptable,java.lang.String)>($r3, "Array");

        r0.<org.mozilla.javascript.NativeJavaArray: org.mozilla.javascript.Scriptable prototype> = $r4;

     label1:
        $r2 = r0.<org.mozilla.javascript.NativeJavaArray: org.mozilla.javascript.Scriptable prototype>;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.NativeJavaArray: long serialVersionUID> = -924022554283675333L;

        return;
    }
}
