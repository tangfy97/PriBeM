class org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader extends javax.xml.stream.util.StreamReaderDelegate implements javax.xml.stream.XMLStreamReader
{
    private boolean _hasBufferedText;
    private java.lang.StringBuffer _buffer;
    private int _textEventType;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer> = $r1;

        return;
    }

    void init(javax.xml.stream.XMLStreamReader)
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        javax.xml.stream.XMLStreamReader r1;
        java.lang.StringBuffer $r2, $r3;
        int $i0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        virtualinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: void setParent(javax.xml.stream.XMLStreamReader)>(r1);

        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText> = 0;

        $r3 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $r2 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $i0 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i0);

        return;
    }

    public int next() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: void clearBuffer()>();

        $i1 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: int getEventType()>();

        return $i1;

     label1:
        $i0 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: int next()>();

        if $i0 == 4 goto label2;

        if $i0 == 12 goto label2;

        if $i0 != 6 goto label3;

     label2:
        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: int _textEventType> = $i0;

        specialinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: void bufferText()>();

     label3:
        return $i0;
    }

    private void clearBuffer()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $r2 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i0);

        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText> = 0;

        return;
    }

    private void bufferText() throws javax.xml.stream.XMLStreamException
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1, $r3;
        int $i0;
        java.lang.String $r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: boolean hasText()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $r4 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: java.lang.String getText()>();

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label1:
        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText> = 1;

     label2:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $i0 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: int next()>();

        tableswitch($i0)
        {
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label3;
            case 7: goto label5;
            case 8: goto label5;
            case 9: goto label5;
            case 10: goto label5;
            case 11: goto label5;
            case 12: goto label3;
            default: goto label5;
        };

     label3:
        $z1 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: boolean hasText()>();

        if $z1 == 0 goto label4;

        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $r2 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: java.lang.String getText()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label4:
        goto label2;

     label5:
        return;

     label6:
        return;
    }

    public java.lang.String getText()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;
        java.lang.AssertionError $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public int getTextLength()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.AssertionError $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z1 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        return $i0;
    }

    public int getTextStart()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.AssertionError $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return 0;
    }

    public char[] getTextCharacters()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1;
        char[] $r3;
        java.lang.String $r2;
        java.lang.AssertionError $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        return $r3;
    }

    public int getTextCharacters(int, char[], int, int)
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.AssertionError $r3;
        java.lang.StringBuffer $r2;
        int i0, i1, i2, $i3;
        char[] r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i2 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z1 != 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $i3 = i0 + i1;

        virtualinvoke $r2.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i0, $i3, r1, i2);

        return i1;
    }

    public boolean isWhiteSpace()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        java.lang.StringBuffer $r1;
        java.lang.AssertionError $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z2 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z2 != 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: java.lang.StringBuffer _buffer>;

        $z1 = staticinvoke <org.apache.xmlbeans.impl.common.XmlWhitespace: boolean isAllSpace(java.lang.CharSequence)>($r1);

        return $z1;
    }

    public boolean hasText()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: boolean hasText()>();

        return $z1;
    }

    public int getEventType()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        $z0 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean _hasBufferedText>;

        if $z0 == 0 goto label1;

        $i1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: int _textEventType>;

        return $i1;

     label1:
        $i0 = specialinvoke r0.<javax.xml.stream.util.StreamReaderDelegate: int getEventType()>();

        return $i0;
    }

    void <init>(org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$1)
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader r0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$1 r1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader;

        r1 := @parameter0: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$1;

        specialinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$org$apache$xmlbeans$impl$validator$ValidatingXMLStreamReader>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader");

        <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$org$apache$xmlbeans$impl$validator$ValidatingXMLStreamReader> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$org$apache$xmlbeans$impl$validator$ValidatingXMLStreamReader>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$PackTextXmlStreamReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
