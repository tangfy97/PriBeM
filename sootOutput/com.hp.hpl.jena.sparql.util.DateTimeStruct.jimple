public class com.hp.hpl.jena.sparql.util.DateTimeStruct extends java.lang.Object
{
    public boolean xsdDateTime;
    public java.lang.String 'neg';
    public java.lang.String year;
    public java.lang.String month;
    public java.lang.String day;
    public java.lang.String hour;
    public java.lang.String minute;
    public java.lang.String second;
    public java.lang.String timezone;

    private void <init>()
    {
        com.hp.hpl.jena.sparql.util.DateTimeStruct r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.DateTimeStruct;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String 'neg'> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String year> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String month> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String day> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String hour> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String minute> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second> = null;

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = null;

        return;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.util.DateTimeStruct r1;
        boolean $z0;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r9, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r29, $r31;
        java.lang.String $r2, $r5, $r8, $r10, $r11, $r12, $r15, $r18, $r24, $r27, $r30, r32;

        r1 := @this: com.hp.hpl.jena.sparql.util.DateTimeStruct;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String year>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r5 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String month>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String day>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r32 = $r10;

        $z0 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: boolean xsdDateTime>;

        if $z0 == 0 goto label1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r24 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String hour>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r27 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String minute>;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r30 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r11 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String 'neg'>;

        if $r11 == null goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String 'neg'>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        r32 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r12 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        if $r12 == null goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r15 = r1.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r32 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r32;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseDateTime(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseYMD(java.lang.String,boolean,boolean,boolean)>(r0, 1, 1, 1);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseTime(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseTime(java.lang.String)>(r0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseDate(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseYMD(java.lang.String,boolean,boolean,boolean)>(r0, 1, 1, 0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseGYear(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseYMD(java.lang.String,boolean,boolean,boolean)>(r0, 0, 0, 0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseGYearMonth(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseYMD(java.lang.String,boolean,boolean,boolean)>(r0, 1, 0, 0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseGMonth(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseMD(java.lang.String,boolean,boolean)>(r0, 1, 0);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseGMonthDay(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseMD(java.lang.String,boolean,boolean)>(r0, 1, 1);

        return $r1;
    }

    public static com.hp.hpl.jena.sparql.util.DateTimeStruct parseGDay(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: com.hp.hpl.jena.sparql.util.DateTimeStruct _parseMD(java.lang.String,boolean,boolean)>(r0, 0, 1);

        return $r1;
    }

    private static com.hp.hpl.jena.sparql.util.DateTimeStruct _parseYMD(java.lang.String, boolean, boolean, boolean)
    {
        byte b10;
        int $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i11;
        java.lang.String r1, $r2, $r3, $r4, $r6, $r7;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r9;
        boolean z0, z1, z2, z3, z4;
        char $c0;
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r10, $r11;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $r9 = new com.hp.hpl.jena.sparql.util.DateTimeStruct;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: void <init>()>();

        z3 = 0;

        z4 = 0;

        b10 = 0;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c0;

        if $i11 != 45 goto label1;

        $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String 'neg'> = "-";

        z3 = 1;

        z4 = 1;

        b10 = 1;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(java.lang.String,int)>(r1, b10);

        $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String year> = $r2;

        $r3 = $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String year>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 >= 4 goto label2;

        $r10 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>("Year too short (must be 4 or more digits)");

        throw $r10;

     label2:
        $r4 = $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String year>;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        i6 = z4 + $i2;

        if z0 == 0 goto label3;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, i6, 45);

        i7 = i6 + 1;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, i7);

        $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String month> = $r7;

        i6 = i7 + 2;

     label3:
        if z1 == 0 goto label4;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, i6, 45);

        i8 = i6 + 1;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, i8);

        $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String day> = $r6;

        i6 = i8 + 2;

     label4:
        if z2 == 0 goto label5;

        $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct: boolean xsdDateTime> = 1;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, i6, 84);

        i9 = i6 + 1;

        i6 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int _parseTime(com.hp.hpl.jena.sparql.util.DateTimeStruct,int,java.lang.String)>($r9, i9, r1);

     label5:
        $i3 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int _parseTimezone(com.hp.hpl.jena.sparql.util.DateTimeStruct,java.lang.String,int)>($r9, r1, i6);

        $i4 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int skipWhitespace(java.lang.String,int)>(r1, $i3);

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i4 == $i5 goto label6;

        $r11 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>("Trailing characters after date/time");

        throw $r11;

     label6:
        return $r9;
    }

    private static com.hp.hpl.jena.sparql.util.DateTimeStruct _parseMD(java.lang.String, boolean, boolean)
    {
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r2;
        byte b4, b5;
        int $i0, $i1, i2, i3;
        java.lang.String r1, $r3, $r4;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r0;
        boolean z0, z1;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r0 = new com.hp.hpl.jena.sparql.util.DateTimeStruct;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, 0, 45);

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, 1, 45);

        i2 = 2;

        b5 = 2;

        b4 = 2;

        if z0 == 0 goto label1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, 2);

        $r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String month> = $r4;

        i2 = 4;

        b5 = 4;

        b4 = 4;

     label1:
        if z1 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, b4, 45);

        i3 = b5 + 1;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, i3);

        $r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String day> = $r3;

        i2 = i3 + 2;

     label2:
        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int _parseTimezone(com.hp.hpl.jena.sparql.util.DateTimeStruct,java.lang.String,int)>($r0, r1, i2);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 == $i1 goto label3;

        $r2 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>("Unexpected trailing characters in string");

        throw $r2;

     label3:
        return $r0;
    }

    private static com.hp.hpl.jena.sparql.util.DateTimeStruct _parseTime(java.lang.String)
    {
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.util.DateTimeStruct $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.hp.hpl.jena.sparql.util.DateTimeStruct;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: void <init>()>();

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int _parseTime(com.hp.hpl.jena.sparql.util.DateTimeStruct,int,java.lang.String)>($r0, 0, r1);

        $i1 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int _parseTimezone(com.hp.hpl.jena.sparql.util.DateTimeStruct,java.lang.String,int)>($r0, r1, $i0);

        $i2 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: int skipWhitespace(java.lang.String,int)>(r1, $i1);

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 == $i3 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>("Trailing characters after date/time");

        throw $r2;

     label1:
        return $r0;
    }

    private static int _parseTime(com.hp.hpl.jena.sparql.util.DateTimeStruct, int, java.lang.String)
    {
        int $i0, $i2, i4, i5, i6, i7, i8, i9, i10, i11, $i12;
        java.lang.String r1, $r2, $r3, $r4, $r6, $r9, $r11;
        com.hp.hpl.jena.sparql.util.DateTimeStruct r0;
        boolean $z0;
        char $c1, $c3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r13;
        java.lang.StringBuilder $r7, $r8, $r10, $r14;

        r0 := @parameter0: com.hp.hpl.jena.sparql.util.DateTimeStruct;

        i4 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, i4);

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String hour> = $r2;

        i5 = i4 + 2;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, i5, 58);

        i6 = i5 + 1;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, i6);

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String minute> = $r3;

        i7 = i6 + 2;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r1, i7, 58);

        i8 = i7 + 1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r1, i8);

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second> = $r4;

        i9 = i8 + 2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i9 >= $i0 goto label5;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i9);

        $i12 = (int) $c1;

        if $i12 != 46 goto label5;

        i10 = i9 + 1;

        i11 = i10;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i11 >= $i2 goto label3;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c3);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        if i10 != i11 goto label4;

        $r13 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>("Bad time part");

        throw $r13;

     label4:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second>;

        $r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i10, i11);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String second> = $r11;

        i9 = i11;

     label5:
        return i9;
    }

    private static int _parseTimezone(com.hp.hpl.jena.sparql.util.DateTimeStruct, java.lang.String, int)
    {
        int $i0, i4, i5, i6, i7, i8, $i9, $i10, $i11;
        java.lang.String r0, $r3, $r4, $r6;
        com.hp.hpl.jena.sparql.util.DateTimeStruct r5;
        char $c1, $c2, $c3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r8;
        java.lang.StringBuilder $r7;

        r5 := @parameter0: com.hp.hpl.jena.sparql.util.DateTimeStruct;

        r0 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 < $i0 goto label1;

        r5.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = null;

        return i4;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i9 = (int) $c1;

        if $i9 != 90 goto label2;

        r5.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = "Z";

        i5 = i4 + 1;

        goto label6;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i10 = (int) $c2;

        if $i10 != 43 goto label3;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

        goto label5;

     label3:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i11 = (int) $c3;

        if $i11 != 45 goto label4;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        goto label5;

     label4:
        $r8 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>("Bad timezone");

        throw $r8;

     label5:
        i6 = i4 + 1;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r0, i6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i7 = i6 + 2;

        staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: void check(java.lang.String,int,char)>(r0, i7, 58);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        i8 = i7 + 1;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String getDigits(int,java.lang.String,int)>(2, r0, i8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i5 = i8 + 2;

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r5.<com.hp.hpl.jena.sparql.util.DateTimeStruct: java.lang.String timezone> = $r6;

     label6:
        return i5;
    }

    private static java.lang.String getDigits(int, java.lang.String, int)
    {
        int i0, i1, $i2, $i3, i5, $i6, $i7;
        java.lang.String r0, $r1, $r7;
        char $c4;
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i5 = i0;

     label1:
        $i2 = i0 + i1;

        if i5 >= $i2 goto label4;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c4;

        if $i6 < 48 goto label2;

        $i7 = (int) $c4;

        if $i7 <= 57 goto label3;

     label2:
        $r9 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad number (expected ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digits)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        $i3 = i0 + i1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i3);

        return $r1;
    }

    private static java.lang.String getDigits(java.lang.String, int)
    {
        char $c2;
        int i0, $i1, i3, $i4, $i5;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 = i0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 < $i1 goto label2;

        goto label4;

     label2:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        if $i4 < 48 goto label4;

        $i5 = (int) $c2;

        if $i5 <= 57 goto label3;

        goto label4;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i3);

        return $r1;
    }

    private static int skipWhitespace(java.lang.String, int)
    {
        int $i0, i2;
        char $c1;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return i2;
    }

    private static void check(java.lang.String, int, char)
    {
        char c2, $c3;
        com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException $r9;
        int $i0, i1, $i4, $i5;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8;
        java.lang.String r0, $r7;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        c2 := @parameter2: char;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= i1 goto label1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        $i4 = (int) $c3;

        $i5 = (int) c2;

        if $i4 == $i5 goto label2;

     label1:
        $r9 = new com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at index ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.hp.hpl.jena.sparql.util.DateTimeStruct$DateTimeParseException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label2:
        return;
    }
}
