abstract class com.sun.xml.bind.v2.model.nav.TypeVisitor extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    void <init>()
    {
        com.sun.xml.bind.v2.model.nav.TypeVisitor r0;

        r0 := @this: com.sun.xml.bind.v2.model.nav.TypeVisitor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object visit(java.lang.reflect.Type, java.lang.Object)
    {
        java.lang.reflect.GenericArrayType $r9;
        com.sun.xml.bind.v2.model.nav.TypeVisitor r3;
        java.lang.reflect.WildcardType $r7;
        java.lang.AssertionError $r2, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.reflect.TypeVariable $r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r11;
        java.lang.reflect.Type r0;
        java.lang.Object r4, $r6, $r8, $r10, $r12, $r14;
        java.lang.Class $r13;

        r3 := @this: com.sun.xml.bind.v2.model.nav.TypeVisitor;

        r0 := @parameter0: java.lang.reflect.Type;

        r4 := @parameter1: java.lang.Object;

        $z0 = <com.sun.xml.bind.v2.model.nav.TypeVisitor: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label1:
        $z1 = r0 instanceof java.lang.Class;

        if $z1 == 0 goto label2;

        $r13 = (java.lang.Class) r0;

        $r14 = virtualinvoke r3.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object onClass(java.lang.Class,java.lang.Object)>($r13, r4);

        return $r14;

     label2:
        $z2 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z2 == 0 goto label3;

        $r11 = (java.lang.reflect.ParameterizedType) r0;

        $r12 = virtualinvoke r3.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object onParameterizdType(java.lang.reflect.ParameterizedType,java.lang.Object)>($r11, r4);

        return $r12;

     label3:
        $z3 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z3 == 0 goto label4;

        $r9 = (java.lang.reflect.GenericArrayType) r0;

        $r10 = virtualinvoke r3.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object onGenericArray(java.lang.reflect.GenericArrayType,java.lang.Object)>($r9, r4);

        return $r10;

     label4:
        $z4 = r0 instanceof java.lang.reflect.WildcardType;

        if $z4 == 0 goto label5;

        $r7 = (java.lang.reflect.WildcardType) r0;

        $r8 = virtualinvoke r3.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object onWildcard(java.lang.reflect.WildcardType,java.lang.Object)>($r7, r4);

        return $r8;

     label5:
        $z5 = r0 instanceof java.lang.reflect.TypeVariable;

        if $z5 == 0 goto label6;

        $r5 = (java.lang.reflect.TypeVariable) r0;

        $r6 = virtualinvoke r3.<com.sun.xml.bind.v2.model.nav.TypeVisitor: java.lang.Object onVariable(java.lang.reflect.TypeVariable,java.lang.Object)>($r5, r4);

        return $r6;

     label6:
        $z6 = <com.sun.xml.bind.v2.model.nav.TypeVisitor: boolean $assertionsDisabled>;

        if $z6 != 0 goto label7;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    protected abstract java.lang.Object onClass(java.lang.Class, java.lang.Object);

    protected abstract java.lang.Object onParameterizdType(java.lang.reflect.ParameterizedType, java.lang.Object);

    protected abstract java.lang.Object onGenericArray(java.lang.reflect.GenericArrayType, java.lang.Object);

    protected abstract java.lang.Object onVariable(java.lang.reflect.TypeVariable, java.lang.Object);

    protected abstract java.lang.Object onWildcard(java.lang.reflect.WildcardType, java.lang.Object);

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/model/nav/TypeVisitor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.model.nav.TypeVisitor: boolean $assertionsDisabled> = $z1;

        return;
    }
}
