public abstract class org.objectweb.asm.tree.AbstractInsnNode extends java.lang.Object
{
    public static final int INSN;
    public static final int INT_INSN;
    public static final int VAR_INSN;
    public static final int TYPE_INSN;
    public static final int FIELD_INSN;
    public static final int METHOD_INSN;
    public static final int INVOKE_DYNAMIC_INSN;
    public static final int JUMP_INSN;
    public static final int LABEL;
    public static final int LDC_INSN;
    public static final int IINC_INSN;
    public static final int TABLESWITCH_INSN;
    public static final int LOOKUPSWITCH_INSN;
    public static final int MULTIANEWARRAY_INSN;
    public static final int FRAME;
    public static final int LINE;
    protected int opcode;
    org.objectweb.asm.tree.AbstractInsnNode prev;
    org.objectweb.asm.tree.AbstractInsnNode next;
    int index;

    protected void <init>(int)
    {
        int i0, $i2;
        org.objectweb.asm.tree.AbstractInsnNode r0;

        r0 := @this: org.objectweb.asm.tree.AbstractInsnNode;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.tree.AbstractInsnNode: int opcode> = i0;

        $i2 = (int) -1;

        r0.<org.objectweb.asm.tree.AbstractInsnNode: int index> = $i2;

        return;
    }

    public int getOpcode()
    {
        int $i0;
        org.objectweb.asm.tree.AbstractInsnNode r0;

        r0 := @this: org.objectweb.asm.tree.AbstractInsnNode;

        $i0 = r0.<org.objectweb.asm.tree.AbstractInsnNode: int opcode>;

        return $i0;
    }

    public abstract int getType();

    public org.objectweb.asm.tree.AbstractInsnNode getPrevious()
    {
        org.objectweb.asm.tree.AbstractInsnNode r0, $r1;

        r0 := @this: org.objectweb.asm.tree.AbstractInsnNode;

        $r1 = r0.<org.objectweb.asm.tree.AbstractInsnNode: org.objectweb.asm.tree.AbstractInsnNode prev>;

        return $r1;
    }

    public org.objectweb.asm.tree.AbstractInsnNode getNext()
    {
        org.objectweb.asm.tree.AbstractInsnNode r0, $r1;

        r0 := @this: org.objectweb.asm.tree.AbstractInsnNode;

        $r1 = r0.<org.objectweb.asm.tree.AbstractInsnNode: org.objectweb.asm.tree.AbstractInsnNode next>;

        return $r1;
    }

    public abstract void accept(org.objectweb.asm.MethodVisitor);

    public abstract org.objectweb.asm.tree.AbstractInsnNode clone(java.util.Map);

    static org.objectweb.asm.tree.LabelNode clone(org.objectweb.asm.tree.LabelNode, java.util.Map)
    {
        java.util.Map r0;
        org.objectweb.asm.tree.LabelNode r1, $r3;
        java.lang.Object $r2;

        r1 := @parameter0: org.objectweb.asm.tree.LabelNode;

        r0 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (org.objectweb.asm.tree.LabelNode) $r2;

        return $r3;
    }

    static org.objectweb.asm.tree.LabelNode[] clone(java.util.List, java.util.Map)
    {
        org.objectweb.asm.tree.LabelNode $r5;
        java.util.List r0;
        java.util.Map r2;
        int $i0, $i1, i2;
        java.lang.Object $r3, $r4;
        org.objectweb.asm.tree.LabelNode[] r1;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (org.objectweb.asm.tree.LabelNode)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.objectweb.asm.tree.LabelNode) $r4;

        r1[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static void <clinit>()
    {
        <org.objectweb.asm.tree.AbstractInsnNode: int LINE> = 15;

        <org.objectweb.asm.tree.AbstractInsnNode: int FRAME> = 14;

        <org.objectweb.asm.tree.AbstractInsnNode: int MULTIANEWARRAY_INSN> = 13;

        <org.objectweb.asm.tree.AbstractInsnNode: int LOOKUPSWITCH_INSN> = 12;

        <org.objectweb.asm.tree.AbstractInsnNode: int TABLESWITCH_INSN> = 11;

        <org.objectweb.asm.tree.AbstractInsnNode: int IINC_INSN> = 10;

        <org.objectweb.asm.tree.AbstractInsnNode: int LDC_INSN> = 9;

        <org.objectweb.asm.tree.AbstractInsnNode: int LABEL> = 8;

        <org.objectweb.asm.tree.AbstractInsnNode: int JUMP_INSN> = 7;

        <org.objectweb.asm.tree.AbstractInsnNode: int INVOKE_DYNAMIC_INSN> = 6;

        <org.objectweb.asm.tree.AbstractInsnNode: int METHOD_INSN> = 5;

        <org.objectweb.asm.tree.AbstractInsnNode: int FIELD_INSN> = 4;

        <org.objectweb.asm.tree.AbstractInsnNode: int TYPE_INSN> = 3;

        <org.objectweb.asm.tree.AbstractInsnNode: int VAR_INSN> = 2;

        <org.objectweb.asm.tree.AbstractInsnNode: int INT_INSN> = 1;

        <org.objectweb.asm.tree.AbstractInsnNode: int INSN> = 0;

        return;
    }
}
