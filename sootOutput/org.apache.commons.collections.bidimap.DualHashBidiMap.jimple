public class org.apache.commons.collections.bidimap.DualHashBidiMap extends org.apache.commons.collections.bidimap.AbstractDualBidiMap implements java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.HashMap $r1, $r2;
        org.apache.commons.collections.bidimap.DualHashBidiMap r0;

        r0 := @this: org.apache.commons.collections.bidimap.DualHashBidiMap;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: void <init>(java.util.Map,java.util.Map)>($r1, $r2);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.commons.collections.bidimap.DualHashBidiMap r0;
        java.util.Map r3;
        java.util.HashMap $r1, $r2;

        r0 := @this: org.apache.commons.collections.bidimap.DualHashBidiMap;

        r3 := @parameter0: java.util.Map;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: void <init>(java.util.Map,java.util.Map)>($r1, $r2);

        virtualinvoke r0.<org.apache.commons.collections.bidimap.DualHashBidiMap: void putAll(java.util.Map)>(r3);

        return;
    }

    protected void <init>(java.util.Map, java.util.Map, org.apache.commons.collections.BidiMap)
    {
        org.apache.commons.collections.bidimap.DualHashBidiMap r0;
        java.util.Map r1, r2;
        org.apache.commons.collections.BidiMap r3;

        r0 := @this: org.apache.commons.collections.bidimap.DualHashBidiMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.apache.commons.collections.BidiMap;

        specialinvoke r0.<org.apache.commons.collections.bidimap.AbstractDualBidiMap: void <init>(java.util.Map,java.util.Map,org.apache.commons.collections.BidiMap)>(r1, r2, r3);

        return;
    }

    protected org.apache.commons.collections.BidiMap createBidiMap(java.util.Map, java.util.Map, org.apache.commons.collections.BidiMap)
    {
        org.apache.commons.collections.bidimap.DualHashBidiMap $r0, r4;
        java.util.Map r1, r2;
        org.apache.commons.collections.BidiMap r3;

        r4 := @this: org.apache.commons.collections.bidimap.DualHashBidiMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: org.apache.commons.collections.BidiMap;

        $r0 = new org.apache.commons.collections.bidimap.DualHashBidiMap;

        specialinvoke $r0.<org.apache.commons.collections.bidimap.DualHashBidiMap: void <init>(java.util.Map,java.util.Map,org.apache.commons.collections.BidiMap)>(r1, r2, r3);

        return $r0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map[] $r2;
        org.apache.commons.collections.bidimap.DualHashBidiMap r1;
        java.util.Map $r3;
        java.io.ObjectOutputStream r0;

        r1 := @this: org.apache.commons.collections.bidimap.DualHashBidiMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.apache.commons.collections.bidimap.DualHashBidiMap: java.util.Map[] maps>;

        $r3 = $r2[0];

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Map[] $r3, $r5;
        java.io.ObjectInputStream r0;
        java.util.HashMap $r2, $r4;
        org.apache.commons.collections.bidimap.DualHashBidiMap r1;
        java.util.Map r7;
        java.lang.Object $r6;

        r1 := @this: org.apache.commons.collections.bidimap.DualHashBidiMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r3 = r1.<org.apache.commons.collections.bidimap.DualHashBidiMap: java.util.Map[] maps>;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3[0] = $r2;

        $r5 = r1.<org.apache.commons.collections.bidimap.DualHashBidiMap: java.util.Map[] maps>;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r5[1] = $r4;

        $r6 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r7 = (java.util.Map) $r6;

        virtualinvoke r1.<org.apache.commons.collections.bidimap.DualHashBidiMap: void putAll(java.util.Map)>(r7);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.bidimap.DualHashBidiMap: long serialVersionUID> = 721969328361808L;

        return;
    }
}
