public class org.apache.jute.RecordReader extends java.lang.Object
{
    private org.apache.jute.InputArchive archive;
    private static java.util.HashMap archiveFactory;

    private static org.apache.jute.InputArchive createArchive(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.lang.IllegalAccessException $r8;
        java.lang.Object[] $r4;
        org.apache.jute.InputArchive $r7;
        java.util.HashMap $r1;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.InvocationTargetException $r9;
        java.lang.Object $r2, $r6;
        java.lang.String r0;
        java.lang.reflect.Method r3;
        java.io.InputStream r5;

        r5 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.lang.String;

        $r1 = <org.apache.jute.RecordReader: java.util.HashMap archiveFactory>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.reflect.Method) $r2;

        if r3 == null goto label6;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

     label1:
        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r7 = (org.apache.jute.InputArchive) $r6;

     label2:
        return $r7;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.IllegalArgumentException: void printStackTrace()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.reflect.InvocationTargetException: void printStackTrace()>();

        goto label6;

     label5:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.IllegalAccessException: void printStackTrace()>();

     label6:
        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        org.apache.jute.RecordReader r0;
        org.apache.jute.InputArchive $r3;
        java.lang.String r2;
        java.io.InputStream r1;

        r0 := @this: org.apache.jute.RecordReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <org.apache.jute.RecordReader: org.apache.jute.InputArchive createArchive(java.io.InputStream,java.lang.String)>(r1, r2);

        r0.<org.apache.jute.RecordReader: org.apache.jute.InputArchive archive> = $r3;

        return;
    }

    public void read(org.apache.jute.Record) throws java.io.IOException
    {
        org.apache.jute.InputArchive $r2;
        org.apache.jute.RecordReader r1;
        org.apache.jute.Record r0;

        r1 := @this: org.apache.jute.RecordReader;

        r0 := @parameter0: org.apache.jute.Record;

        $r2 = r1.<org.apache.jute.RecordReader: org.apache.jute.InputArchive archive>;

        interfaceinvoke r0.<org.apache.jute.Record: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r2, "");

        return;
    }

    static void <clinit>()
    {
        java.lang.NoSuchMethodException $r11;
        java.lang.Class[] $r1;
        java.util.HashMap $r0, $r3, $r6, $r9;
        java.lang.Class $r2, $r5, $r8;
        java.lang.SecurityException $r12;
        java.lang.reflect.Method $r4, $r7, $r10;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.jute.RecordReader: java.util.HashMap archiveFactory> = $r0;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/io/InputStream;";

     label1:
        $r3 = <org.apache.jute.RecordReader: java.util.HashMap archiveFactory>;

        $r2 = class "Lorg/apache/jute/BinaryInputArchive;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getArchive", $r1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("binary", $r4);

        $r6 = <org.apache.jute.RecordReader: java.util.HashMap archiveFactory>;

        $r5 = class "Lorg/apache/jute/CsvInputArchive;";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getArchive", $r1);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("csv", $r7);

        $r9 = <org.apache.jute.RecordReader: java.util.HashMap archiveFactory>;

        $r8 = class "Lorg/apache/jute/XmlInputArchive;";

        $r10 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getArchive", $r1);

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("xml", $r10);

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.SecurityException: void printStackTrace()>();

        goto label5;

     label4:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.NoSuchMethodException: void printStackTrace()>();

     label5:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }
}
