public class org.apache.batik.transcoder.TranscodingHints extends java.util.HashMap
{

    public void <init>()
    {
        org.apache.batik.transcoder.TranscodingHints r0;

        r0 := @this: org.apache.batik.transcoder.TranscodingHints;

        specialinvoke r0.<org.apache.batik.transcoder.TranscodingHints: void <init>(java.util.Map)>(null);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.batik.transcoder.TranscodingHints r0;
        java.util.Map r1;

        r0 := @this: org.apache.batik.transcoder.TranscodingHints;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>(7);

        if r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.transcoder.TranscodingHints: void putAll(java.util.Map)>(r1);

     label1:
        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.batik.transcoder.TranscodingHints r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.batik.transcoder.TranscodingHints;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.batik.transcoder.TranscodingHints r0;
        java.lang.Object r1, $r2;

        r0 := @this: org.apache.batik.transcoder.TranscodingHints;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalArgumentException $r5;
        org.apache.batik.transcoder.TranscodingHints r3;
        java.lang.StringBuffer $r6, $r7, $r8, $r9;
        java.lang.Object r0, r1, $r4;
        org.apache.batik.transcoder.TranscodingHints$Key $r2;
        java.lang.String $r10;
        boolean $z0;

        r3 := @this: org.apache.batik.transcoder.TranscodingHints;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = (org.apache.batik.transcoder.TranscodingHints$Key) r0;

        $z0 = virtualinvoke $r2.<org.apache.batik.transcoder.TranscodingHints$Key: boolean isCompatibleValue(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" incompatible with ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r4 = specialinvoke r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r4;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.batik.transcoder.TranscodingHints r0;
        java.lang.Object r1, $r2;

        r0 := @this: org.apache.batik.transcoder.TranscodingHints;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return $r2;
    }

    public void putAll(org.apache.batik.transcoder.TranscodingHints)
    {
        org.apache.batik.transcoder.TranscodingHints r0, r1;

        r0 := @this: org.apache.batik.transcoder.TranscodingHints;

        r1 := @parameter0: org.apache.batik.transcoder.TranscodingHints;

        specialinvoke r0.<java.util.HashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.apache.batik.transcoder.TranscodingHints r5, $r8;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r7;
        boolean $z0, $z1;

        r5 := @this: org.apache.batik.transcoder.TranscodingHints;

        r0 := @parameter0: java.util.Map;

        $z0 = r0 instanceof org.apache.batik.transcoder.TranscodingHints;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.batik.transcoder.TranscodingHints) r0;

        virtualinvoke r5.<org.apache.batik.transcoder.TranscodingHints: void putAll(org.apache.batik.transcoder.TranscodingHints)>($r8);

        goto label4;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

     label3:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        return;
    }
}
