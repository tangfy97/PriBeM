public class com.ctc.wstx.sr.BasicStreamReader extends com.ctc.wstx.sr.StreamScanner implements com.ctc.wstx.sr.StreamReaderImpl, org.codehaus.stax2.DTDInfo, org.codehaus.stax2.LocationInfo
{
    protected static final java.lang.String DEFAULT_NS_PREFIX;
    static final int DOC_STANDALONE_UNKNOWN;
    static final int DOC_STANDALONE_YES;
    static final int DOC_STANDALONE_NO;
    static final int STATE_PROLOG;
    static final int STATE_TREE;
    static final int STATE_EPILOG;
    static final int STATE_MULTIDOC_HACK;
    static final int STATE_CLOSED;
    static final int TOKEN_NOT_STARTED;
    static final int TOKEN_STARTED;
    static final int TOKEN_PARTIAL_SINGLE;
    static final int TOKEN_FULL_SINGLE;
    static final int TOKEN_FULL_COALESCED;
    private static final int MASK_GET_TEXT;
    private static final int MASK_GET_TEXT_XXX;
    private static final int MASK_GET_TEXT_WITH_WRITER;
    private static final int MASK_GET_ELEMENT_TEXT;
    protected final int mConfigFlags;
    protected final boolean mCfgCoalesceText;
    protected final boolean mCfgNormalizeAttrs;
    protected final boolean mCfgReportTextAsChars;
    protected final boolean mCfgLazyParsing;
    protected final int mShortestTextSegment;
    final java.util.Map mCustomEntities;
    protected static final java.lang.String sPrefixXml;
    protected static final java.lang.String sPrefixXmlns;
    protected final com.ctc.wstx.sr.ReaderCreator mOwner;
    protected int mDocStandalone;
    java.lang.String mRootPrefix;
    java.lang.String mRootLName;
    protected java.lang.String mDtdPublicId;
    protected java.lang.String mDtdSystemId;
    protected final com.ctc.wstx.util.TextBuffer mTextBuffer;
    protected final com.ctc.wstx.sr.InputElementStack mElementStack;
    protected final com.ctc.wstx.sr.AttributeCollector mAttrCollector;
    protected boolean mStDoctypeFound;
    protected int mTokenState;
    protected final int mStTextThreshold;
    protected boolean mStEmptyElem;
    int mParseState;
    protected int mCurrToken;
    protected int mSecondaryToken;
    static final int ALL_WS_UNKNOWN;
    static final int ALL_WS_YES;
    static final int ALL_WS_NO;
    protected int mWsStatus;
    protected boolean mValidateText;
    private static final int INDENT_CHECK_START;
    private static final int INDENT_CHECK_MAX;
    protected int mCheckIndentation;
    protected javax.xml.stream.XMLStreamException mPendingException;
    protected java.util.Map mGeneralEntities;
    protected com.ctc.wstx.ent.EntityDecl mCurrEntity;
    protected int mVldContent;

    protected void <init>(com.ctc.wstx.io.InputBootstrapper, com.ctc.wstx.io.BranchingReaderSource, com.ctc.wstx.sr.ReaderCreator, com.ctc.wstx.api.ReaderConfig, com.ctc.wstx.sr.InputElementStack, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r5;
        com.ctc.wstx.api.ReaderConfig r2, $r14;
        byte $b11, $b13;
        java.util.Map $r10;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.ctc.wstx.sr.AttributeCollector $r9;
        com.ctc.wstx.sr.InputElementStack r8;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.io.InputBootstrapper r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        java.lang.String $r7, $r11, $r12, $r13;
        com.ctc.wstx.sr.ReaderCreator r4;
        javax.xml.stream.XMLResolver $r3;
        com.ctc.wstx.io.BranchingReaderSource r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r6 := @parameter0: com.ctc.wstx.io.InputBootstrapper;

        r1 := @parameter1: com.ctc.wstx.io.BranchingReaderSource;

        r4 := @parameter2: com.ctc.wstx.sr.ReaderCreator;

        r2 := @parameter3: com.ctc.wstx.api.ReaderConfig;

        r8 := @parameter4: com.ctc.wstx.sr.InputElementStack;

        z2 := @parameter5: boolean;

        $r3 = virtualinvoke r2.<com.ctc.wstx.api.ReaderConfig: javax.xml.stream.XMLResolver getEntityResolver()>();

        specialinvoke r0.<com.ctc.wstx.sr.StreamScanner: void <init>(com.ctc.wstx.io.WstxInputSource,com.ctc.wstx.api.ReaderConfig,javax.xml.stream.XMLResolver)>(r1, r2, $r3);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStDoctypeFound> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStEmptyElem> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 7;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = 7;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mValidateText> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = null;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.util.Map mGeneralEntities> = null;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent> = 3;

        r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.ReaderCreator mOwner> = r4;

        $r5 = staticinvoke <com.ctc.wstx.util.TextBuffer: com.ctc.wstx.util.TextBuffer createRecyclableBuffer(com.ctc.wstx.api.ReaderConfig)>(r2);

        r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer> = $r5;

        $i0 = virtualinvoke r2.<com.ctc.wstx.api.ReaderConfig: int getConfigFlags()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mConfigFlags> = $i0;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mConfigFlags>;

        $i2 = $i1 & 16384;

        if $i2 == 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeAttrs> = $z4;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mConfigFlags>;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText> = $z5;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mConfigFlags>;

        $i6 = $i5 & 512;

        if $i6 != 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReportTextAsChars> = $z6;

        $z0 = virtualinvoke r2.<com.ctc.wstx.api.ReaderConfig: boolean isXml11()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mXml11> = $z0;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label07;

        $b11 = 16;

        goto label08;

     label07:
        $b11 = 0;

     label08:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation> = $b11;

        if z2 != 0 goto label09;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mConfigFlags>;

        $i10 = $i9 & 262144;

        if $i10 == 0 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgLazyParsing> = $z7;

        $z8 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z8 == 0 goto label11;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold> = 4;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment> = 2147483647;

        goto label13;

     label11:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold> = 2;

        if z2 == 0 goto label12;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment> = 2147483647;

        goto label13;

     label12:
        $i7 = virtualinvoke r2.<com.ctc.wstx.api.ReaderConfig: int getShortestReportedTextSegment()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment> = $i7;

     label13:
        $r10 = virtualinvoke r2.<com.ctc.wstx.api.ReaderConfig: java.util.Map getCustomInternalEntities()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.util.Map mCustomEntities> = $r10;

        $i12 = virtualinvoke r6.<com.ctc.wstx.io.InputBootstrapper: int getDeclaredVersion()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion> = $i12;

        $r11 = virtualinvoke r6.<com.ctc.wstx.io.InputBootstrapper: java.lang.String getInputEncoding()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocInputEncoding> = $r11;

        $r12 = virtualinvoke r6.<com.ctc.wstx.io.InputBootstrapper: java.lang.String getDeclaredEncoding()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocXmlEncoding> = $r12;

        $r13 = virtualinvoke r6.<com.ctc.wstx.io.InputBootstrapper: java.lang.String getStandalone()>();

        if $r13 != null goto label14;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 0;

        goto label16;

     label14:
        $r7 = "yes";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 == 0 goto label15;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 1;

        goto label16;

     label15:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 2;

     label16:
        $r14 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z9 = virtualinvoke $r14.<com.ctc.wstx.api.ReaderConfig: boolean inputParsingModeFragment()>();

        if $z9 == 0 goto label17;

        $b13 = 1;

        goto label18;

     label17:
        $b13 = 0;

     label18:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = $b13;

        r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack> = r8;

        $r9 = virtualinvoke r8.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.sr.AttributeCollector getAttrCollector()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector> = $r9;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrDepth>;

        virtualinvoke r1.<com.ctc.wstx.io.BranchingReaderSource: void initInputLocation(com.ctc.wstx.io.WstxInputData,int)>(r0, $i8);

        virtualinvoke r8.<com.ctc.wstx.sr.InputElementStack: void connectReporter(com.ctc.wstx.sr.InputProblemReporter)>(r0);

        return;
    }

    public static com.ctc.wstx.sr.BasicStreamReader createBasicStreamReader(com.ctc.wstx.io.BranchingReaderSource, com.ctc.wstx.sr.ReaderCreator, com.ctc.wstx.api.ReaderConfig, com.ctc.wstx.io.InputBootstrapper, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.io.BranchingReaderSource r2;
        com.ctc.wstx.sr.InputElementStack $r5;
        com.ctc.wstx.sr.BasicStreamReader $r0;
        com.ctc.wstx.sr.ReaderCreator r3;
        com.ctc.wstx.io.InputBootstrapper r1;
        com.ctc.wstx.api.ReaderConfig r4;
        boolean z0;

        r2 := @parameter0: com.ctc.wstx.io.BranchingReaderSource;

        r3 := @parameter1: com.ctc.wstx.sr.ReaderCreator;

        r4 := @parameter2: com.ctc.wstx.api.ReaderConfig;

        r1 := @parameter3: com.ctc.wstx.io.InputBootstrapper;

        z0 := @parameter4: boolean;

        $r0 = new com.ctc.wstx.sr.BasicStreamReader;

        $r5 = staticinvoke <com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack createElementStack(com.ctc.wstx.api.ReaderConfig)>(r4);

        specialinvoke $r0.<com.ctc.wstx.sr.BasicStreamReader: void <init>(com.ctc.wstx.io.InputBootstrapper,com.ctc.wstx.io.BranchingReaderSource,com.ctc.wstx.sr.ReaderCreator,com.ctc.wstx.api.ReaderConfig,com.ctc.wstx.sr.InputElementStack,boolean)>(r1, r2, r3, r4, $r5, z0);

        return $r0;
    }

    protected static com.ctc.wstx.sr.InputElementStack createElementStack(com.ctc.wstx.api.ReaderConfig)
    {
        com.ctc.wstx.sr.NsInputElementStack $r2;
        com.ctc.wstx.sr.NonNsInputElementStack $r1;
        com.ctc.wstx.api.ReaderConfig r0;
        boolean $z0;

        r0 := @parameter0: com.ctc.wstx.api.ReaderConfig;

        $z0 = virtualinvoke r0.<com.ctc.wstx.api.ReaderConfig: boolean willSupportNamespaces()>();

        if $z0 == 0 goto label1;

        $r2 = new com.ctc.wstx.sr.NsInputElementStack;

        specialinvoke $r2.<com.ctc.wstx.sr.NsInputElementStack: void <init>(int,com.ctc.wstx.api.ReaderConfig)>(16, r0);

        return $r2;

     label1:
        $r1 = new com.ctc.wstx.sr.NonNsInputElementStack;

        specialinvoke $r1.<com.ctc.wstx.sr.NonNsInputElementStack: void <init>(int,com.ctc.wstx.api.ReaderConfig)>(16, r0);

        return $r1;
    }

    public java.lang.String getCharacterEncodingScheme()
    {
        java.lang.String $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocXmlEncoding>;

        return $r1;
    }

    public java.lang.String getEncoding()
    {
        java.lang.String $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocInputEncoding>;

        return $r1;
    }

    public java.lang.String getVersion()
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion>;

        if $i0 != 256 goto label1;

        return "1.0";

     label1:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion>;

        if $i1 != 272 goto label2;

        return "1.1";

     label2:
        return null;
    }

    public boolean isStandalone()
    {
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean standaloneSet()
    {
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r2;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public int getAttributeCount()
    {
        java.lang.IllegalStateException $r2;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, $i1;
        java.lang.String $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $i1 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: int getCount()>();

        return $i1;
    }

    public java.lang.String getAttributeLocalName(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getLocalName(int)>(i1);

        return $r2;
    }

    public javax.xml.namespace.QName getAttributeName(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, i1;
        javax.xml.namespace.QName $r2;
        java.lang.String $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: javax.xml.namespace.QName getQName(int)>(i1);

        return $r2;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getURI(int)>(i1);

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getPrefix(int)>(i1);

        return $r2;
    }

    public java.lang.String getAttributeType(int)
    {
        java.lang.IllegalStateException $r3;
        int $i0, i1;
        com.ctc.wstx.sr.InputElementStack $r1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: java.lang.String getAttributeType(int)>(i1);

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getValue(int)>(i1);

        return $r2;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r5;
        com.ctc.wstx.sr.AttributeCollector $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0;
        java.lang.String r1, r2, $r4, $r6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.sr.AttributeCollector: java.lang.String getValue(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.util.TextAccumulator $r1;
        java.lang.StringBuffer $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r5, $r8, $r9, $r10;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r10 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r10);

     label1:
        $r1 = new com.ctc.wstx.util.TextAccumulator;

        specialinvoke $r1.<com.ctc.wstx.util.TextAccumulator: void <init>()>();

     label2:
        $i3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int next()>();

        if $i3 != 2 goto label3;

        goto label6;

     label3:
        if $i3 == 5 goto label2;

        if $i3 != 3 goto label4;

        goto label2;

     label4:
        $i1 = 1 << $i3;

        $i2 = $i1 & 4688;

        if $i2 != 0 goto label5;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected a text token, got ");

        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r8);

     label5:
        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getText()>();

        virtualinvoke $r1.<com.ctc.wstx.util.TextAccumulator: void addText(java.lang.String)>($r2);

        goto label2;

     label6:
        $r9 = virtualinvoke $r1.<com.ctc.wstx.util.TextAccumulator: java.lang.String getAndClear()>();

        return $r9;
    }

    public int getEventType()
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0, $z1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 12 goto label2;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReportTextAsChars>;

        if $z1 == 0 goto label2;

     label1:
        return 4;

     label2:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        return $i1;
    }

    public java.lang.String getLocalName()
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.ent.EntityDecl $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 != 2 goto label2;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalName()>();

        return $r2;

     label2:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i2 != 9 goto label5;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        if $r4 != null goto label3;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mCurrName>;

        goto label4;

     label3:
        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        $r6 = virtualinvoke $r5.<com.ctc.wstx.ent.EntityDecl: java.lang.String getName()>();

     label4:
        return $r6;

     label5:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Current state not START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE");

        throw $r3;
    }

    public javax.xml.namespace.QName getName()
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1;
        com.ctc.wstx.sr.InputElementStack $r1;
        javax.xml.namespace.QName $r2;
        java.lang.String $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: javax.xml.namespace.QName getCurrentElementName()>();

        return $r2;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        return $r1;
    }

    public int getNamespaceCount()
    {
        java.lang.IllegalStateException $r2;
        int $i0, $i1, $i2;
        com.ctc.wstx.sr.InputElementStack $r1;
        java.lang.String $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i2 == 2 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $i1 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: int getCurrentNsCount()>();

        return $i1;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, i1, $i2;
        java.lang.String $r2, $r4;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i2 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsPrefix(int)>(i1);

        return $r2;
    }

    public java.lang.String getNamespaceURI()
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1;
        com.ctc.wstx.sr.InputElementStack $r1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: java.lang.String getNsURI()>();

        return $r2;
    }

    public java.lang.String getNamespaceURI(int)
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, i1, $i2;
        java.lang.String $r2, $r4, $r5;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i2 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsURI(int)>(i1);

        if $r2 != null goto label2;

        $r5 = "";

        goto label3;

     label2:
        $r5 = $r2;

     label3:
        return $r5;
    }

    public java.lang.String getNamespaceURI(java.lang.String)
    {
        java.lang.IllegalStateException $r4;
        com.ctc.wstx.sr.InputElementStack $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1;
        java.lang.String r1, $r3, $r5;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.sr.InputElementStack: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String getPIData()
    {
        java.lang.IllegalStateException $r3;
        com.ctc.wstx.util.TextBuffer $r1;
        int $i0, $i1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 3 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_PI>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i1 > 1 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label2:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r2;
    }

    public java.lang.String getPITarget()
    {
        java.lang.IllegalStateException $r2;
        int $i0;
        java.lang.String $r1, $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 3 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_PI>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mCurrName>;

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1;
        com.ctc.wstx.sr.InputElementStack $r1;
        java.lang.String $r2, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_ELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: java.lang.String getPrefix()>();

        return $r2;
    }

    public java.lang.String getText()
    {
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.ent.EntityDecl $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r2, $r3, $r6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 != 0 goto label1;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNotTextual(int)>($i7);

     label1:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i4 >= $i3 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label2:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i5 != 9 goto label5;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        if $r4 != null goto label3;

        $r6 = null;

        goto label4;

     label3:
        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        $r6 = virtualinvoke $r5.<com.ctc.wstx.ent.EntityDecl: java.lang.String getReplacementText()>();

     label4:
        return $r6;

     label5:
        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i6 != 11 goto label6;

        $r3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getDTDInternalSubset()>();

        return $r3;

     label6:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r2;
    }

    public char[] getTextCharacters()
    {
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.ent.EntityDecl $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r2, $r3, $r5;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 4208;

        if $i2 != 0 goto label1;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNotTextXxx(int)>($i7);

     label1:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i4 >= $i3 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label2:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i5 != 9 goto label3;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.ent.EntityDecl: char[] getReplacementChars()>();

        return $r5;

     label3:
        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i6 != 11 goto label4;

        $r3 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char[] getDTDInternalSubsetArray()>();

        return $r3;

     label4:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: char[] getTextBuffer()>();

        return $r2;
    }

    public int getTextCharacters(int, char[], int, int)
    {
        com.ctc.wstx.util.TextBuffer $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, $i9;
        char[] r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i5 := @parameter0: int;

        r1 := @parameter1: char[];

        i6 := @parameter2: int;

        i7 := @parameter3: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 4208;

        if $i2 != 0 goto label1;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNotTextXxx(int)>($i9);

     label1:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i4 >= $i3 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label2:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i8 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: int contentsToArray(int,char[],int,int)>(i5, r1, i6, i7);

        return $i8;
    }

    public int getTextLength()
    {
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 4208;

        if $i2 != 0 goto label1;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNotTextXxx(int)>($i6);

     label1:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i4 >= $i3 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label2:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i5 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: int size()>();

        return $i5;
    }

    public int getTextStart()
    {
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 4208;

        if $i2 != 0 goto label1;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNotTextXxx(int)>($i6);

     label1:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i4 >= $i3 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label2:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i5 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: int getTextStart()>();

        return $i5;
    }

    public boolean hasName()
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 != 2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasNext()
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 8 goto label1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i1 != 3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean hasText()
    {
        int $i0, $i1, $i2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6768;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAttributeSpecified(int)
    {
        java.lang.IllegalStateException $r2;
        com.ctc.wstx.sr.AttributeCollector $r1;
        int $i0, i1;
        java.lang.String $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.sr.AttributeCollector: boolean isSpecified(int)>(i1);

        return $z0;
    }

    public boolean isCharacters()
    {
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEndElement()
    {
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isStartElement()
    {
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isWhiteSpace()
    {
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        byte $b6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 4 goto label01;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i4 != 12 goto label08;

     label01:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i2 >= $i1 goto label02;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label02:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus>;

        if $i3 != 0 goto label05;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: boolean isAllWhitespace()>();

        if $z0 == 0 goto label03;

        $b6 = 1;

        goto label04;

     label03:
        $b6 = 2;

     label04:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus> = $b6;

     label05:
        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus>;

        if $i7 != 1 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        return $z1;

     label08:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i5 != 6 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        return $z2;
    }

    public void require(int, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        boolean $z0, $z1, $z2, $z3;
        com.ctc.wstx.sr.InputElementStack $r43;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r37, $r38, $r40;
        int i0, $i1, $i2, i3, $i4;
        java.lang.String r1, r2, $r9, $r14, $r17, $r20, $r27, $r30, $r33, $r36, $r39, $r41, $r42, $r44;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if i3 == i0 goto label3;

        if i3 != 12 goto label2;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z2 != 0 goto label1;

        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReportTextAsChars>;

        if $z3 == 0 goto label3;

     label1:
        i3 = 4;

        goto label3;

     label2:
        if i3 != 6 goto label3;

     label3:
        if i0 == i3 goto label4;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected type ");

        $r36 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>(i0);

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", current type ");

        $r39 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>(i3);

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r41);

     label4:
        if r1 == null goto label6;

        if i3 == 1 goto label5;

        if i3 == 2 goto label5;

        if i3 == 9 goto label5;

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected non-null local name, but current token not a START_ELEMENT, END_ELEMENT or ENTITY_REFERENCE (was ");

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r30 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i2);

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r33);

     label5:
        $r42 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getLocalName()>();

        if $r42 == r1 goto label6;

        $z1 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label6;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected local name \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; current local name \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r27);

     label6:
        if r2 == null goto label9;

        if i3 == 1 goto label7;

        if i3 == 2 goto label7;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected non-null NS URI, but current token not a START_ELEMENT or END_ELEMENT (was ");

        $r17 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>(i3);

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r20);

     label7:
        $r43 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r44 = virtualinvoke $r43.<com.ctc.wstx.sr.InputElementStack: java.lang.String getNsURI()>();

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i4 != 0 goto label8;

        if $r44 == null goto label9;

        $i1 = virtualinvoke $r44.<java.lang.String: int length()>();

        if $i1 <= 0 goto label9;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected empty namespace, instead have \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r14);

        goto label9;

     label8:
        if r2 == $r44 goto label9;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z0 != 0 goto label9;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Expected namespace \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; have \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r9);

     label9:
        return;
    }

    public final int next() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r5, $r7, $r12;
        javax.xml.stream.XMLStreamException $r1, r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.ctc.wstx.sr.InputElementStack $r6, $r8, $r11;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23;
        java.util.NoSuchElementException $r13;
        char $c14, $c17;
        java.io.IOException $r9;
        char[] $r3, $r4;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException>;

        if $r1 == null goto label01;

        r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = null;

        throw r10;

     label01:
        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i0 != 1 goto label10;

        $i7 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int nextFromTree()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = $i7;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgLazyParsing>;

        if $z1 != 0 goto label02;

        $i21 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i21 >= $i20 goto label02;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label02:
        if $i7 != 12 goto label06;

        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mValidateText>;

        if $z3 == 0 goto label04;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i18 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i19 >= $i18 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label03:
        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r8.<com.ctc.wstx.sr.InputElementStack: void validateText(com.ctc.wstx.util.TextBuffer,boolean)>($r7, 0);

     label04:
        $z5 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z5 != 0 goto label05;

        $z4 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReportTextAsChars>;

        if $z4 == 0 goto label09;

     label05:
        return 4;

     label06:
        if $i7 != 4 goto label09;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mValidateText>;

        if $z2 == 0 goto label09;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i9 >= $i8 goto label07;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label07:
        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i12 = $i10 + 1;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i12 >= $i11 goto label08;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $c14 = $r3[$i13];

        $i22 = (int) $c14;

        if $i22 != 60 goto label08;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i16 = $i15 + 1;

        $c17 = $r4[$i16];

        $i23 = (int) $c17;

        if $i23 != 47 goto label08;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r6.<com.ctc.wstx.sr.InputElementStack: void validateText(com.ctc.wstx.util.TextBuffer,boolean)>($r5, 1);

        goto label09;

     label08:
        $r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r12 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r11.<com.ctc.wstx.sr.InputElementStack: void validateText(com.ctc.wstx.util.TextBuffer,boolean)>($r12, 0);

     label09:
        return $i7;

     label10:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i1 != 0 goto label11;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean nextFromProlog(boolean)>(1);

        goto label16;

     label11:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i2 != 2 goto label12;

        $z0 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean nextFromProlog(boolean)>(0);

        if $z0 == 0 goto label16;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = 0;

        goto label16;

     label12:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i3 != 3 goto label13;

        $i5 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int nextFromMultiDocState()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = $i5;

        goto label16;

     label13:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken>;

        if $i4 != 8 goto label15;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = 0;

     label14:
        return 8;

     label15:
        $r13 = new java.util.NoSuchElementException;

        specialinvoke $r13.<java.util.NoSuchElementException: void <init>()>();

        throw $r13;

     label16:
        goto label18;

     label17:
        $r9 := @caughtexception;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwFromIOE(java.io.IOException)>($r9);

     label18:
        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        return $i6;

        catch java.io.IOException from label01 to label05 with label17;
        catch java.io.IOException from label06 to label09 with label17;
        catch java.io.IOException from label10 to label14 with label17;
        catch java.io.IOException from label15 to label16 with label17;
    }

    public int nextTag() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        int $i0;
        java.lang.String $r3, $r6;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

     label1:
        $i0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int next()>();

        tableswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label6;
            case 10: goto label6;
            case 11: goto label6;
            case 12: goto label3;
            default: goto label6;
        };

     label2:
        goto label1;

     label3:
        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean isWhiteSpace()>();

        if $z0 == 0 goto label4;

        goto label1;

     label4:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Received non-all-whitespace CHARACTERS or CDATA event in nextTag().");

        goto label6;

     label5:
        return $i0;

     label6:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Received event ");

        $r3 = staticinvoke <com.ctc.wstx.cfg.ErrorConsts: java.lang.String tokenTypeDesc(int)>($i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", instead of START_ELEMENT or END_ELEMENT.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r6);

        goto label1;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.util.SymbolTable $r1, $r2;
        int $i0, $i1;
        com.ctc.wstx.sr.ReaderCreator $r3;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i0 == 4 goto label2;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = 4;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 == 8 goto label1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = 8;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 8;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.SymbolTable mSymbols>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.util.SymbolTable: boolean isDirty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.ReaderCreator mOwner>;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.SymbolTable mSymbols>;

        interfaceinvoke $r3.<com.ctc.wstx.sr.ReaderCreator: void updateSymbolTable(com.ctc.wstx.util.SymbolTable)>($r2);

     label1:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void closeAllInput(boolean)>(0);

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: void recycle(boolean)>(1);

     label2:
        return;
    }

    public java.lang.Object getFeature(java.lang.String)
    {
        java.lang.Object[] $r1;
        java.lang.String r2, $r3, $r4;
        java.lang.IllegalArgumentException $r0;
        com.ctc.wstx.sr.BasicStreamReader r5;

        r5 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNKNOWN_FEATURE>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public void setFeature(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r6;
        java.lang.String r2, $r3, $r4;
        java.lang.IllegalArgumentException $r0;
        com.ctc.wstx.sr.BasicStreamReader r5;

        r5 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object;

        $r0 = new java.lang.IllegalArgumentException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNKNOWN_FEATURE>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r4 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public boolean isPropertySupported(java.lang.String)
    {
        java.lang.String r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r2;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r2.<com.ctc.wstx.api.ReaderConfig: boolean isPropertySupported(java.lang.String)>(r1);

        return $z0;
    }

    public boolean setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r3;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r3.<com.ctc.wstx.api.ReaderConfig: boolean setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public void skipElement() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r3;
        int $i0, $i1, i2, $i4;
        java.lang.String $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label1:
        i2 = 1;

     label2:
        $i1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int next()>();

        if $i1 != 1 goto label3;

        i2 = i2 + 1;

        goto label4;

     label3:
        if $i1 != 2 goto label4;

        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 != 0 goto label4;

        goto label5;

     label4:
        goto label2;

     label5:
        return;
    }

    public org.codehaus.stax2.AttributeInfo getAttributeInfo() throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r2;
        int $i0;
        com.ctc.wstx.sr.InputElementStack $r1;
        java.lang.String $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_STATE_NOT_STELEM>;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        return $r1;
    }

    public org.codehaus.stax2.DTDInfo getDTDInfo() throws javax.xml.stream.XMLStreamException
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 11 goto label1;

        return null;

     label1:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i1 >= 3 goto label2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void wrappedFinishToken()>();

     label2:
        return r0;
    }

    public final org.codehaus.stax2.LocationInfo getLocationInfo()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        return r0;
    }

    public int getText(java.io.Writer, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r2, $r5, $r6, $r7, $r8;
        com.ctc.wstx.ent.EntityDecl $r4;
        boolean z0, $z1, $z2, $z3, $z4;
        java.io.Writer r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24;
        char[] $r3;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.io.Writer;

        z0 := @parameter1: boolean;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $i1 = 1 << $i0;

        $i2 = $i1 & 6776;

        if $i2 != 0 goto label01;

        $i22 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNotTextual(int)>($i22);

     label01:
        if z0 != 0 goto label07;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i10 != 4 goto label04;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i17 = virtualinvoke $r7.<com.ctc.wstx.util.TextBuffer: int rawContentsTo(java.io.Writer)>(r1);

        i23 = $i17;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r8.<com.ctc.wstx.util.TextBuffer: void resetWithEmpty()>();

        $i18 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i18 >= 3 goto label02;

        $i21 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readAndWriteText(java.io.Writer)>(r1);

        i23 = $i17 + $i21;

     label02:
        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z3 == 0 goto label03;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i19 >= 4 goto label03;

        $z4 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z4 == 0 goto label03;

        $i20 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readAndWriteCoalesced(java.io.Writer,boolean)>(r1, 0);

        i23 = i23 + $i20;

     label03:
        return i23;

     label04:
        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i11 != 12 goto label07;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i12 = virtualinvoke $r5.<com.ctc.wstx.util.TextBuffer: int rawContentsTo(java.io.Writer)>(r1);

        i24 = $i12;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r6.<com.ctc.wstx.util.TextBuffer: void resetWithEmpty()>();

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i13 >= 3 goto label05;

        $i16 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readAndWriteCData(java.io.Writer)>(r1);

        i24 = $i12 + $i16;

     label05:
        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z1 == 0 goto label06;

        $i14 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i14 >= 4 goto label06;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z2 == 0 goto label06;

        $i15 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readAndWriteCoalesced(java.io.Writer,boolean)>(r1, 1);

        i24 = i24 + $i15;

     label06:
        return i24;

     label07:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i4 >= $i3 goto label08;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label08:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i5 != 9 goto label09;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        $i9 = virtualinvoke $r4.<com.ctc.wstx.ent.EntityDecl: int getReplacementText(java.io.Writer)>(r1);

        return $i9;

     label09:
        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i6 != 11 goto label11;

        $r3 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char[] getDTDInternalSubsetArray()>();

        if $r3 == null goto label10;

        virtualinvoke r1.<java.io.Writer: void write(char[])>($r3);

        $i8 = lengthof $r3;

        return $i8;

     label10:
        return 0;

     label11:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i7 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: int rawContentsTo(java.io.Writer)>(r1);

        return $i7;
    }

    public int getDepth()
    {
        int $i0;
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $i0 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: int getDepth()>();

        return $i0;
    }

    public boolean isEmptyElement() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 1 goto label1;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStEmptyElem>;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public javax.xml.namespace.NamespaceContext getNonTransientNamespaceContext()
    {
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.util.BaseNsContext $r2;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.util.BaseNsContext createNonTransientNsContext(javax.xml.stream.Location)>(null);

        return $r2;
    }

    public java.lang.String getPrefixedName()
    {
        java.lang.IllegalStateException $r10;
        com.ctc.wstx.sr.InputElementStack $r4, $r6;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r8;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, $r2, $r3, $r5, $r7, $r9;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label4;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label6;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label3;
            case 10: goto label6;
            case 11: goto label5;
            default: goto label6;
        };

     label1:
        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.sr.InputElementStack: java.lang.String getPrefix()>();

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r7 = virtualinvoke $r6.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalName()>();

        if $r5 != null goto label2;

        return $r7;

     label2:
        $r8 = new java.lang.StringBuffer;

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i2 = $i1 + 1;

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(int)>($i4);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label3:
        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getLocalName()>();

        return $r2;

     label4:
        $r3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getPITarget()>();

        return $r3;

     label5:
        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getDTDRootName()>();

        return $r1;

     label6:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Current state not START_ELEMENT, END_ELEMENT, ENTITY_REFERENCE, PROCESSING_INSTRUCTION or DTD");

        throw $r10;
    }

    public void closeCompletely() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void closeAllInput(boolean)>(1);

        return;
    }

    public java.lang.Object getProcessedDTD()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        return null;
    }

    public java.lang.String getDTDRootName()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r2, $r4, $r5, $r7;
        java.lang.String $r1, $r3, $r6, $r8, $r9;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix>;

        if $r1 != null goto label1;

        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        return $r9;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getDTDPublicId()
    {
        java.lang.String $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdPublicId>;

        return $r1;
    }

    public java.lang.String getDTDSystemId()
    {
        java.lang.String $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdSystemId>;

        return $r1;
    }

    public java.lang.String getDTDInternalSubset()
    {
        com.ctc.wstx.util.TextBuffer $r1;
        int $i0;
        java.lang.String $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 11 goto label1;

        return null;

     label1:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r2;
    }

    private char[] getDTDInternalSubsetArray()
    {
        char[] $r2;
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: char[] contentsAsArray()>();

        return $r2;
    }

    public org.codehaus.stax2.validation.DTDValidationSchema getProcessedDTDSchema()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        return null;
    }

    public long getStartingByteOffset()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        return -1L;
    }

    public long getStartingCharOffset()
    {
        long $l0;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $l0 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal>;

        return $l0;
    }

    public long getEndingByteOffset() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        return -1L;
    }

    public long getEndingCharOffset() throws javax.xml.stream.XMLStreamException
    {
        int $i0, $i1, $i2;
        long $l3, $l4, $l5;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void wrappedFinishToken()>();

     label1:
        $l4 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        return $l5;
    }

    public final javax.xml.stream.Location getLocation()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        org.codehaus.stax2.XMLStreamLocation2 $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: org.codehaus.stax2.XMLStreamLocation2 getStartLocation()>();

        return $r1;
    }

    public final org.codehaus.stax2.XMLStreamLocation2 getEndLocation() throws javax.xml.stream.XMLStreamException
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        org.codehaus.stax2.XMLStreamLocation2 $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void wrappedFinishToken()>();

     label1:
        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: org.codehaus.stax2.XMLStreamLocation2 getCurrentLocation()>();

        return $r1;
    }

    public org.codehaus.stax2.validation.XMLValidator validateAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidationSchema r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        return null;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidationSchema) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidationSchema r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidationSchema;

        return null;
    }

    public org.codehaus.stax2.validation.XMLValidator stopValidatingAgainst(org.codehaus.stax2.validation.XMLValidator) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.validation.XMLValidator r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: org.codehaus.stax2.validation.XMLValidator;

        return null;
    }

    public org.codehaus.stax2.validation.ValidationProblemHandler setValidationProblemHandler(org.codehaus.stax2.validation.ValidationProblemHandler)
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        org.codehaus.stax2.validation.ValidationProblemHandler r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: org.codehaus.stax2.validation.ValidationProblemHandler;

        return null;
    }

    public com.ctc.wstx.ent.EntityDecl getCurrentEntityDecl()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.ent.EntityDecl $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity>;

        return $r1;
    }

    public java.lang.Object withStartElement(com.ctc.wstx.sr.ElemCallback, javax.xml.stream.Location)
    {
        com.ctc.wstx.sr.ElemCallback r1;
        com.ctc.wstx.sr.ElemAttrs $r7;
        com.ctc.wstx.sr.AttributeCollector $r6;
        com.ctc.wstx.sr.InputElementStack $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;
        javax.xml.stream.Location r2;
        int $i0;
        java.lang.Object $r8;
        javax.xml.namespace.QName $r3;
        com.ctc.wstx.util.BaseNsContext $r5;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: com.ctc.wstx.sr.ElemCallback;

        r2 := @parameter1: javax.xml.stream.Location;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 == 1 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.namespace.QName getName()>();

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.sr.InputElementStack: com.ctc.wstx.util.BaseNsContext createNonTransientNsContext(javax.xml.stream.Location)>(r2);

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        $r7 = virtualinvoke $r6.<com.ctc.wstx.sr.AttributeCollector: com.ctc.wstx.sr.ElemAttrs buildAttrOb()>();

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStEmptyElem>;

        $r8 = virtualinvoke r1.<com.ctc.wstx.sr.ElemCallback: java.lang.Object withStartElement(javax.xml.stream.Location,javax.xml.namespace.QName,com.ctc.wstx.util.BaseNsContext,com.ctc.wstx.sr.ElemAttrs,boolean)>(r2, $r3, $r5, $r7, $z0);

        return $r8;
    }

    public boolean isNamespaceAware()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNsEnabled>;

        return $z0;
    }

    public com.ctc.wstx.sr.InputElementStack getInputElementStack()
    {
        com.ctc.wstx.sr.InputElementStack $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        return $r1;
    }

    public com.ctc.wstx.sr.AttributeCollector getAttributeCollector()
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.sr.AttributeCollector $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

        return $r1;
    }

    public void fireSaxStartElement(org.xml.sax.ContentHandler, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        com.ctc.wstx.sr.InputElementStack $r2, $r3, $r5, $r9, $r11;
        com.ctc.wstx.sr.BasicStreamReader r1;
        int $i0, i1;
        org.xml.sax.Attributes r8;
        org.xml.sax.ContentHandler r0;
        java.lang.String $r4, $r6, $r7, $r10, $r12, $r13, $r14;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0 := @parameter0: org.xml.sax.ContentHandler;

        r8 := @parameter1: org.xml.sax.Attributes;

        if r0 == null goto label7;

        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $i0 = virtualinvoke $r2.<com.ctc.wstx.sr.InputElementStack: int getCurrentNsCount()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label4;

        $r9 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r10 = virtualinvoke $r9.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsPrefix(int)>(i1);

        $r11 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r12 = virtualinvoke $r11.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsURI(int)>(i1);

        if $r10 != null goto label2;

        $r13 = "";

        goto label3;

     label2:
        $r13 = $r10;

     label3:
        interfaceinvoke r0.<org.xml.sax.ContentHandler: void startPrefixMapping(java.lang.String,java.lang.String)>($r13, $r12);

        i1 = i1 + 1;

        goto label1;

     label4:
        $r3 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.sr.InputElementStack: java.lang.String getNsURI()>();

        if $r4 != null goto label5;

        $r14 = "";

        goto label6;

     label5:
        $r14 = $r4;

     label6:
        $r5 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r6 = virtualinvoke $r5.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalName()>();

        $r7 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getPrefixedName()>();

        interfaceinvoke r0.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>($r14, $r6, $r7, r8);

     label7:
        return;
    }

    public void fireSaxEndElement(org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        com.ctc.wstx.sr.InputElementStack $r2, $r4, $r7, $r8, $r10;
        com.ctc.wstx.sr.BasicStreamReader r1;
        int $i0, i1;
        org.xml.sax.ContentHandler r0;
        java.lang.String $r3, $r5, $r6, $r9, $r11, $r12;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0 := @parameter0: org.xml.sax.ContentHandler;

        if r0 == null goto label6;

        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r3 = virtualinvoke $r2.<com.ctc.wstx.sr.InputElementStack: java.lang.String getNsURI()>();

        if $r3 != null goto label1;

        $r11 = "";

        goto label2;

     label1:
        $r11 = $r3;

     label2:
        $r4 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalName()>();

        $r6 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String getPrefixedName()>();

        interfaceinvoke r0.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>($r11, $r5, $r6);

        $r7 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $i0 = virtualinvoke $r7.<com.ctc.wstx.sr.InputElementStack: int getCurrentNsCount()>();

        i1 = 0;

     label3:
        if i1 >= $i0 goto label6;

        $r8 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r9 = virtualinvoke $r8.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsPrefix(int)>(i1);

        $r10 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        virtualinvoke $r10.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalNsURI(int)>(i1);

        if $r9 != null goto label4;

        $r12 = "";

        goto label5;

     label4:
        $r12 = $r9;

     label5:
        interfaceinvoke r0.<org.xml.sax.ContentHandler: void endPrefixMapping(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label3;

     label6:
        return;
    }

    public void fireSaxCharacterEvents(org.xml.sax.ContentHandler) throws java.io.IOException, javax.xml.stream.XMLStreamException, org.xml.sax.SAXException
    {
        com.ctc.wstx.util.TextBuffer $r3;
        javax.xml.stream.XMLStreamException $r2, r4;
        int $i0, $i1;
        org.xml.sax.ContentHandler r0;
        com.ctc.wstx.sr.BasicStreamReader r1;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0 := @parameter0: org.xml.sax.ContentHandler;

        if r0 == null goto label3;

        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException>;

        if $r2 == null goto label1;

        r4 = r1.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException>;

        r1.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = null;

        throw r4;

     label1:
        $i1 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label2;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label2:
        $r3 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r3.<com.ctc.wstx.util.TextBuffer: void fireSaxCharacterEvents(org.xml.sax.ContentHandler)>(r0);

     label3:
        return;
    }

    public void fireSaxSpaceEvents(org.xml.sax.ContentHandler) throws java.io.IOException, javax.xml.stream.XMLStreamException, org.xml.sax.SAXException
    {
        com.ctc.wstx.util.TextBuffer $r2;
        int $i0, $i1;
        org.xml.sax.ContentHandler r0;
        com.ctc.wstx.sr.BasicStreamReader r1;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0 := @parameter0: org.xml.sax.ContentHandler;

        if r0 == null goto label2;

        $i1 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label1:
        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void fireSaxSpaceEvents(org.xml.sax.ContentHandler)>(r0);

     label2:
        return;
    }

    public void fireSaxCommentEvent(org.xml.sax.ext.LexicalHandler) throws java.io.IOException, javax.xml.stream.XMLStreamException, org.xml.sax.SAXException
    {
        org.xml.sax.ext.LexicalHandler r0;
        com.ctc.wstx.util.TextBuffer $r2;
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r1;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0 := @parameter0: org.xml.sax.ext.LexicalHandler;

        if r0 == null goto label2;

        $i1 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label1:
        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void fireSaxCommentEvent(org.xml.sax.ext.LexicalHandler)>(r0);

     label2:
        return;
    }

    public void fireSaxPIEvent(org.xml.sax.ContentHandler) throws java.io.IOException, javax.xml.stream.XMLStreamException, org.xml.sax.SAXException
    {
        com.ctc.wstx.util.TextBuffer $r2;
        int $i0, $i1;
        org.xml.sax.ContentHandler r0;
        java.lang.String $r3, $r4;
        com.ctc.wstx.sr.BasicStreamReader r1;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0 := @parameter0: org.xml.sax.ContentHandler;

        if r0 == null goto label2;

        $i1 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label1:
        $r3 = r1.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mCurrName>;

        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r4 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: java.lang.String contentsAsString()>();

        interfaceinvoke r0.<org.xml.sax.ContentHandler: void processingInstruction(java.lang.String,java.lang.String)>($r3, $r4);

     label2:
        return;
    }

    protected final boolean hasConfigFlags(int)
    {
        int i0, $i1, $i2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i0 := @parameter0: int;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mConfigFlags>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected java.lang.String checkKeyword(char, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        boolean $z0, $z1;
        com.ctc.wstx.sr.BasicStreamReader r1;
        java.lang.StringBuffer $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i14, $i16, $i17, $i18, $i19, $i21, $i22;
        java.lang.String r0, $r2, $r6;
        char $c7, c13, $c15, c20;
        char[] $r3, $r4;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c13 := @parameter0: char;

        r0 := @parameter1: java.lang.String;

        i14 = 0;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label01:
        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        $i21 = (int) $c15;

        $i22 = (int) c13;

        if $i21 != $i22 goto label04;

        i14 = i14 + 1;

        if i14 >= $i0 goto label04;

        $i9 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i9 >= $i8 goto label02;

        $r4 = r1.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i11 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i12 = $i11 + 1;

        r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i12;

        c13 = $r4[$i11];

        goto label01;

     label02:
        $i10 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        if $i10 >= 0 goto label03;

        goto label04;

     label03:
        c13 = (char) $i10;

        goto label01;

     label04:
        if i14 != $i0 goto label06;

        $i6 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: int peekNext()>();

        if $i6 < 0 goto label05;

        $c7 = (char) $i6;

        $z1 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameChar(char)>($c7);

        if $z1 != 0 goto label06;

        if $i6 == 58 goto label06;

     label05:
        return null;

     label06:
        $r7 = new java.lang.StringBuffer;

        $i16 = virtualinvoke r0.<java.lang.String: int length()>();

        $i17 = $i16 + 16;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(int)>($i17);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i14);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c13);

     label07:
        $i18 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i19 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i18 >= $i19 goto label08;

        $r3 = r1.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i4 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i5;

        c20 = $r3[$i4];

        goto label10;

     label08:
        $i1 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        if $i1 >= 0 goto label09;

        goto label12;

     label09:
        c20 = (char) $i1;

     label10:
        $z0 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameChar(char)>(c20);

        if $z0 != 0 goto label11;

        $i2 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = $i2 - 1;

        r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i3;

        goto label12;

     label11:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c20);

        goto label07;

     label12:
        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    protected void checkCData() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c0, $c1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r7;
        int $i2, $i3;
        java.lang.String $r1, $r6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $c0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in CDATA section");

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>($c0, "CDATA");

        if $r1 == null goto label1;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized XML directive \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; expected \'CDATA\'.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r6);

     label1:
        $c1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in CDATA section");

        $i2 = (int) $c1;

        if $i2 == 91 goto label2;

        $i3 = (int) $c1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i3, "excepted \'[\' after \'<![CDATA\'");

     label2:
        return;
    }

    private final void parseNonNormalizedAttrValue(char, com.ctc.wstx.util.TextBuilder) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuilder r0;
        boolean $z0, $z1;
        com.ctc.wstx.io.WstxInputSource r3, $r5;
        com.ctc.wstx.sr.BasicStreamReader r2;
        int $i0, $i2, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13, $i14, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        char c1, $c3, $c4, $c5, $c15, c16, $c17;
        char[] $r1, $r4, $r6, $r7, r8;

        r2 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c1 := @parameter0: char;

        r0 := @parameter1: com.ctc.wstx.util.TextBuilder;

        $r1 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: char[] getCharBuffer()>();

        r8 = $r1;

        i11 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: int getCharSize()>();

        i12 = lengthof $r1;

        r3 = r2.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

     label01:
        $i13 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i13 >= $i14 goto label02;

        $r7 = r2.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i9 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i10 = $i9 + 1;

        r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i10;

        $c15 = $r7[$i9];

        goto label03;

     label02:
        $c15 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in attribute value");

     label03:
        c16 = $c15;

        $i18 = (int) $c15;

        if $i18 >= 63 goto label16;

        $i19 = (int) $c15;

        if $i19 >= 32 goto label12;

        $i20 = (int) $c15;

        if $i20 != 10 goto label04;

        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label16;

     label04:
        $i21 = (int) $c15;

        if $i21 != 13 goto label11;

        $c5 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in attribute value");

        c16 = $c5;

        $i22 = (int) $c5;

        if $i22 == 10 goto label07;

        $i7 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = $i7 - 1;

        r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i8;

        $z1 = r2.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label05;

        $c17 = 10;

        goto label06;

     label05:
        $c17 = 13;

     label06:
        c16 = $c17;

        goto label10;

     label07:
        $z0 = r2.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 == 0 goto label08;

        goto label10;

     label08:
        if i11 < i12 goto label09;

        $r6 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: char[] bufferFull(int)>(1);

        r8 = $r6;

        i12 = lengthof $r6;

     label09:
        $i6 = i11;

        i11 = i11 + 1;

        r8[$i6] = 13;

     label10:
        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label16;

     label11:
        $i23 = (int) $c15;

        if $i23 == 9 goto label16;

        $i24 = (int) $c15;

        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i24);

        goto label16;

     label12:
        $i25 = (int) $c15;

        $i26 = (int) c1;

        if $i25 != $i26 goto label13;

        $r5 = r2.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        if $r5 != r3 goto label16;

        goto label18;

     label13:
        $i27 = (int) $c15;

        if $i27 != 38 goto label15;

        $i2 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: int inputInBuffer()>();

        if $i2 < 3 goto label14;

        $c4 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char resolveSimpleEntity(boolean)>(1);

        c16 = $c4;

        if $c4 == 0 goto label14;

        goto label16;

     label14:
        $c3 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char fullyResolveEntity(boolean)>(0);

        c16 = $c3;

        if $c3 != 0 goto label16;

        goto label01;

     label15:
        $i28 = (int) $c15;

        if $i28 != 60 goto label16;

        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unexpected \'<\'  in attribute value");

     label16:
        if i11 < i12 goto label17;

        $r4 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: char[] bufferFull(int)>(1);

        r8 = $r4;

        i12 = lengthof $r4;

     label17:
        $i0 = i11;

        i11 = i11 + 1;

        r8[$i0] = c16;

        goto label01;

     label18:
        virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: void setBufferSize(int)>(i11);

        return;
    }

    private final void parseNormalizedAttrValue(char, com.ctc.wstx.util.TextBuilder) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuilder r0;
        boolean $z0;
        com.ctc.wstx.io.WstxInputSource r3, $r5;
        com.ctc.wstx.sr.BasicStreamReader r2;
        int $i0, $i2, $i6, $i7, $i8, $i9, i10, i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;
        char c1, $c3, $c4, $c5, $c14, c15;
        char[] $r1, $r4, $r6, r7;

        r2 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c1 := @parameter0: char;

        r0 := @parameter1: com.ctc.wstx.util.TextBuilder;

        $r1 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: char[] getCharBuffer()>();

        r7 = $r1;

        i10 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: int getCharSize()>();

        i11 = lengthof $r1;

        r3 = r2.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

     label01:
        $i12 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i13 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i12 >= $i13 goto label02;

        $r6 = r2.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 + 1;

        r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i9;

        $c14 = $r6[$i8];

        goto label03;

     label02:
        $c14 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in attribute value");

     label03:
        c15 = $c14;

        $i16 = (int) $c14;

        if $i16 > 39 goto label11;

        $i17 = (int) $c14;

        if $i17 >= 32 goto label08;

        $i18 = (int) $c14;

        if $i18 != 10 goto label04;

        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label07;

     label04:
        $i19 = (int) $c14;

        if $i19 != 13 goto label06;

        $z0 = r2.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 == 0 goto label05;

        $c5 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in attribute value");

        $i20 = (int) $c5;

        if $i20 == 10 goto label05;

        $i6 = r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = $i6 - 1;

        r2.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i7;

     label05:
        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label07;

     label06:
        $i21 = (int) $c14;

        if $i21 == 9 goto label07;

        $i22 = (int) $c14;

        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i22);

     label07:
        c15 = 32;

        goto label12;

     label08:
        $i23 = (int) $c14;

        $i24 = (int) c1;

        if $i23 != $i24 goto label09;

        $r5 = r2.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        if $r5 != r3 goto label12;

        goto label14;

     label09:
        $i25 = (int) $c14;

        if $i25 != 38 goto label12;

        $i2 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: int inputInBuffer()>();

        if $i2 < 3 goto label10;

        $c4 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char resolveSimpleEntity(boolean)>(1);

        c15 = $c4;

        if $c4 == 0 goto label10;

        goto label12;

     label10:
        $c3 = virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: char fullyResolveEntity(boolean)>(0);

        c15 = $c3;

        if $c3 != 0 goto label12;

        goto label01;

     label11:
        $i26 = (int) $c14;

        if $i26 != 60 goto label12;

        virtualinvoke r2.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unexpected \'<\'  in attribute value");

     label12:
        if i10 < i11 goto label13;

        $r4 = virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: char[] bufferFull(int)>(1);

        r7 = $r4;

        i11 = lengthof $r4;

     label13:
        $i0 = i10;

        i10 = i10 + 1;

        r7[$i0] = c15;

        goto label01;

     label14:
        virtualinvoke r0.<com.ctc.wstx.util.TextBuilder: void setBufferSize(int)>(i10);

        return;
    }

    private boolean nextFromProlog(boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        long $l3, $l4, $l5, $l20, $l21, $l22, $l23;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r2, $r3, $r6, $r7, $r12, $r13;
        int $i0, $i1, $i2, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i24, $i25, $i26, $i27, $i28, i30, $i31, $i32, $i33, $i34, $i35;
        java.lang.String $r4, $r8, $r9, $r10, $r11;
        char $c10, $c29;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        z0 := @parameter0: boolean;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label01;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        i30 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int skipToken()>();

        goto label02;

     label01:
        $l4 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l3 = (long) $i2;

        $l5 = $l4 + $l3;

        r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal> = $l5;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRow>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputRow> = $i6;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRowStart>;

        $i9 = $i8 - $i7;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputCol> = $i9;

        i30 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

     label02:
        if i30 > 32 goto label07;

        if i30 < 0 goto label07;

        $z2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean hasConfigFlags(int)>(256);

        if $z2 == 0 goto label06;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 6;

        $c29 = (char) i30;

        $z3 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readSpacePrimary(char,boolean)>($c29, 1);

        if $z3 == 0 goto label03;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        goto label05;

     label03:
        $z4 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgLazyParsing>;

        if $z4 == 0 goto label04;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        goto label05;

     label04:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readSpaceSecondary(boolean)>(1);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

     label05:
        return 0;

     label06:
        $i16 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i17 = $i16 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i17;

        $i18 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNextAfterWS()>();

        i30 = $i18;

        if $i18 < 0 goto label07;

        $l21 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l20 = (long) $i19;

        $l22 = $l21 + $l20;

        $l23 = $l22 - 1L;

        r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal> = $l23;

        $i24 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRow>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputRow> = $i24;

        $i26 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i25 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRowStart>;

        $i27 = $i26 - $i25;

        $i28 = $i27 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputCol> = $i28;

     label07:
        if i30 >= 0 goto label08;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int handleEOF(boolean)>(z0);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = 4;

        return 1;

     label08:
        if i30 == 60 goto label11;

        $i15 = i30;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        if z0 == 0 goto label09;

        $r9 = " in prolog";

        goto label10;

     label09:
        $r9 = " in epilog";

     label10:
        $r6 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; expected \'<\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i15, $r8);

     label11:
        if z0 == 0 goto label12;

        $r10 = " in prolog";

        goto label13;

     label12:
        $r10 = " in epilog";

     label13:
        $c10 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>($r10);

        $i31 = (int) $c10;

        if $i31 != 63 goto label14;

        $i14 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readPIPrimary()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = $i14;

        goto label23;

     label14:
        $i32 = (int) $c10;

        if $i32 != 33 goto label15;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void nextFromPrologBang(boolean)>(z0);

        goto label23;

     label15:
        $i33 = (int) $c10;

        if $i33 != 47 goto label17;

        if z0 == 0 goto label16;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unexpected character combination \'</\' in prolog.");

     label16:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unexpected character combination \'</\' in epilog (extra close tag?).");

        goto label23;

     label17:
        $i34 = (int) $c10;

        if $i34 == 58 goto label18;

        $z1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameStartChar(char)>($c10);

        if $z1 == 0 goto label20;

     label18:
        if z0 != 0 goto label19;

        $i13 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int handleExtraRoot(char)>($c10);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = $i13;

        return 0;

     label19:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void handleRootElem(char)>($c10);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 1;

        goto label23;

     label20:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        if z0 == 0 goto label21;

        $r11 = " in prolog";

        goto label22;

     label21:
        $r11 = " in epilog";

     label22:
        $r2 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", after \'<\'.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $i35 = (int) $c10;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i35, $r4);

     label23:
        $z5 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgLazyParsing>;

        if $z5 != 0 goto label24;

        $i12 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i12 >= $i11 goto label24;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label24:
        return 0;
    }

    protected void handleRootElem(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.InputElementStack $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r6, $r8, $r9, $r11;
        java.lang.String $r1, $r2, $r3, $r5, $r7, $r10, $r12, $r13, $r14;
        boolean $z0, $z1;
        char c0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c0 := @parameter0: char;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = 1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void initValidation()>();

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void handleStartElem(char)>(c0);

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        if $r1 == null goto label3;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean hasConfigFlags(int)>(32);

        if $z0 == 0 goto label3;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix>;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        $z1 = virtualinvoke $r4.<com.ctc.wstx.sr.InputElementStack: boolean matches(java.lang.String,java.lang.String)>($r3, $r2);

        if $z1 != 0 goto label3;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix>;

        if $r5 != null goto label1;

        $r14 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        goto label2;

     label1:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r13 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_VLD_WRONG_ROOT>;

        $r12 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportValidationProblem(java.lang.String,java.lang.Object,java.lang.Object)>($r13, $r14, $r12);

     label3:
        return;
    }

    protected void initValidation() throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        return;
    }

    protected int handleEOF(boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1;
        int $i0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        z0 := @parameter0: boolean;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = 8;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 8;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: void recycle(boolean)>(1);

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedEOF(java.lang.String)>(" in prolog");

     label1:
        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        return $i0;
    }

    private int handleExtraRoot(char) throws javax.xml.stream.XMLStreamException
    {
        int $i0, $i1, $i2;
        char c3;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r1;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c3 := @parameter0: char;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.api.ReaderConfig: boolean inputParsingModeDocuments()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Illegal to have multiple roots (start tag in epilog?).");

     label1:
        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = $i0 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i1;

        $i2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int handleMultiDocStart(int)>(1);

        return $i2;
    }

    protected int handleMultiDocStart(int)
    {
        int i0;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i0 := @parameter0: int;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = 3;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = i0;

        return 8;
    }

    private int nextFromMultiDocState() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        java.lang.String $r4, $r7, $r9;
        char $c7;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 8 goto label3;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken>;

        if $i9 != 7 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void handleMultiDocXmlDecl()>();

        goto label2;

     label1:
        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocXmlEncoding> = null;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 0;

     label2:
        return 7;

     label3:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i1 != 7 goto label6;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = 0;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken>;

        if $i4 != 7 goto label4;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean nextFromProlog(boolean)>(1);

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        return $i8;

     label4:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken>;

        if $i5 != 1 goto label5;

        $c7 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in start tag");

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void handleRootElem(char)>($c7);

        return 1;

     label5:
        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken>;

        if $i6 != 11 goto label6;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStDoctypeFound> = 1;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void startDTD()>();

        return 11;

     label6:
        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unexpected state; current event ");

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r4 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", sec. state: ");

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken>;

        $r7 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i3);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r1;
    }

    protected void handleMultiDocXmlDecl() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r28;
        boolean $z0, $z1, $z2, $z3;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r29, $r30;
        int $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r1, $r4, $r11, $r12, $r15, $r22, $r23, $r24, $r25, $r26, $r27;
        char $c0, $c1, $c2, $c3, $c4, $c5, c6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocXmlEncoding> = null;

        $c0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in xml declaration");

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>($c0, "version");

        if $r1 == null goto label01;

        $r27 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNEXP_KEYWORD>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String,java.lang.Object,java.lang.Object)>($r27, $r1, "version");

     label01:
        $c1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char skipEquals(java.lang.String,java.lang.String)>("version", " in xml declaration");

        $r28 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: void resetInitialized()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseQuoted(java.lang.String,char,com.ctc.wstx.util.TextBuffer)>("version", $c1, $r28);

        $z0 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: boolean equalsString(java.lang.String)>("1.0");

        if $z0 == 0 goto label02;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion> = 256;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mXml11> = 0;

        goto label04;

     label02:
        $z1 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: boolean equalsString(java.lang.String)>("1.1");

        if $z1 == 0 goto label03;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion> = 272;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mXml11> = 1;

        goto label04;

     label03:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocXmlVersion> = 0;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mXml11> = 0;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected xml version \'");

        $r4 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; expected \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("1.0");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' or \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("1.1");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r11);

     label04:
        $c5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in xml declaration");

        c6 = $c5;

        $i7 = (int) $c5;

        if $i7 == 63 goto label12;

        $i8 = (int) $c5;

        if $i8 != 101 goto label06;

        $r24 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>($c5, "encoding");

        if $r24 == null goto label05;

        $r26 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNEXP_KEYWORD>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String,java.lang.Object,java.lang.Object)>($r26, $r24, "encoding");

     label05:
        $c4 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char skipEquals(java.lang.String,java.lang.String)>("encoding", " in xml declaration");

        virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: void resetWithEmpty()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseQuoted(java.lang.String,char,com.ctc.wstx.util.TextBuffer)>("encoding", $c4, $r28);

        $r25 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: java.lang.String toString()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDocXmlEncoding> = $r25;

        c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in xml declaration");

        goto label07;

     label06:
        $i9 = (int) $c5;

        if $i9 == 115 goto label07;

        $i10 = (int) $c5;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i10, " in xml declaration; expected either \'encoding\' or \'standalone\' pseudo-attribute");

     label07:
        $i11 = (int) c6;

        if $i11 != 115 goto label12;

        $r12 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>(c6, "standalone");

        if $r12 == null goto label08;

        $r23 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_UNEXP_KEYWORD>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String,java.lang.Object,java.lang.Object)>($r23, $r12, "standalone");

     label08:
        $c3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char skipEquals(java.lang.String,java.lang.String)>("standalone", " in xml declaration");

        virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: void resetWithEmpty()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseQuoted(java.lang.String,char,com.ctc.wstx.util.TextBuffer)>("standalone", $c3, $r28);

        $z2 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: boolean equalsString(java.lang.String)>("yes");

        if $z2 == 0 goto label09;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 1;

        goto label11;

     label09:
        $z3 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: boolean equalsString(java.lang.String)>("no");

        if $z3 == 0 goto label10;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone> = 2;

        goto label11;

     label10:
        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected xml \'standalone\' pseudo-attribute value \'");

        $r15 = virtualinvoke $r28.<com.ctc.wstx.util.TextBuffer: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; expected \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("yes");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' or \'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r22);

     label11:
        c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in xml declaration");

     label12:
        $i12 = (int) c6;

        if $i12 == 63 goto label13;

        $i13 = (int) c6;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i13, " in xml declaration; expected \'?>\' as the end marker");

     label13:
        $c2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in xml declaration");

        $i14 = (int) $c2;

        if $i14 == 62 goto label14;

        $i15 = (int) $c2;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i15, " in xml declaration; expected \'>\' to close the declaration");

     label14:
        return;
    }

    protected final char skipEquals(java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c0, $c1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r5, $r6, $r8;
        int $i2, $i3;
        java.lang.String r1, r4, $r7;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $c0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(r1);

        $i2 = (int) $c0;

        if $i2 == 61 goto label1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in xml declaration; expected \'=\' to follow pseudo-attribute \'");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i3 = (int) $c0;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i3, $r7);

     label1:
        $c1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(r1);

        return $c1;
    }

    protected final void parseQuoted(java.lang.String, char, com.ctc.wstx.util.TextBuffer) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer r0;
        com.ctc.wstx.sr.BasicStreamReader r1;
        java.lang.StringBuffer $r4, $r6, $r7, $r10;
        int $i2, $i3, $i4, i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String r5, $r8;
        char c0, c1, $c8;
        char[] $r2, r9;

        r1 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r5 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        r0 := @parameter2: com.ctc.wstx.util.TextBuffer;

        $i10 = (int) c0;

        if $i10 == 34 goto label01;

        $i11 = (int) c0;

        if $i11 == 39 goto label01;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in xml declaration; waited \' or \" to start a value for pseudo-attribute \'");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $i12 = (int) c0;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i12, $r8);

     label01:
        r9 = virtualinvoke r0.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        i5 = 0;

     label02:
        $i6 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i6 >= $i7 goto label03;

        $r2 = r1.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i3 = r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i4 = $i3 + 1;

        r1.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i4;

        $c8 = $r2[$i3];

        goto label04;

     label03:
        $c8 = virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in xml declaration");

     label04:
        c1 = $c8;

        $i13 = (int) $c8;

        $i14 = (int) c0;

        if $i13 != $i14 goto label05;

        goto label10;

     label05:
        $i15 = (int) $c8;

        if $i15 < 32 goto label06;

        $i16 = (int) $c8;

        if $i16 != 60 goto label07;

     label06:
        $i17 = (int) c1;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i17, " in xml declaration");

        goto label08;

     label07:
        if $c8 != 0 goto label08;

        virtualinvoke r1.<com.ctc.wstx.sr.BasicStreamReader: void throwNullChar()>();

     label08:
        $i9 = lengthof r9;

        if i5 < $i9 goto label09;

        r9 = virtualinvoke r0.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i5 = 0;

     label09:
        $i2 = i5;

        i5 = i5 + 1;

        r9[$i2] = c1;

        goto label02;

     label10:
        virtualinvoke r0.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i5);

        return;
    }

    private void nextFromPrologBang(boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r4;
        java.lang.StringBuffer $r7, $r8, $r9, $r12;
        int $i0, $i1, $i3, i4, $i5;
        java.lang.String $r1, $r2, $r3, $r5, $r10, $r11;
        boolean z0, $z1, $z2, $z3;
        char $c2;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        i4 = $i0;

        if $i0 >= 0 goto label01;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedEOF(java.lang.String)>(" in prolog");

     label01:
        if $i0 != 68 goto label06;

        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>(68, "DOCTYPE");

        if $r2 == null goto label02;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized XML directive \'<!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' (misspelled DOCTYPE?).");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r10);

     label02:
        if z0 != 0 goto label04;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z1 = virtualinvoke $r4.<com.ctc.wstx.api.ReaderConfig: boolean inputParsingModeDocuments()>();

        if $z1 == 0 goto label03;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStDoctypeFound>;

        if $z2 != 0 goto label04;

        $i3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int handleMultiDocStart(int)>(11);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = $i3;

        return;

     label03:
        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_DTD_IN_EPILOG>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r5);

     label04:
        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStDoctypeFound>;

        if $z3 == 0 goto label05;

        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_DTD_DUP>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r3);

     label05:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStDoctypeFound> = 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 11;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void startDTD()>();

        return;

     label06:
        if $i0 != 45 goto label10;

        if z0 == 0 goto label07;

        $r11 = " in prolog";

        goto label08;

     label07:
        $r11 = " in epilog";

     label08:
        $c2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>($r11);

        $i5 = (int) $c2;

        if $i5 == 45 goto label09;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i0, " (malformed comment?)");

     label09:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken> = 5;

        return;

     label10:
        if $i0 != 91 goto label11;

        $i1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int peekNext()>();

        i4 = $i1;

        if $i1 != 67 goto label11;

        $r1 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_CDATA_IN_EPILOG>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i1, $r1);

     label11:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>(i4, " after \'<!\' (malformed comment?)");

        return;
    }

    private void startDTD() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r4, $r5, $r6, $r10, $r11, $r14, $r15, $r25, $r26, $r27;
        java.lang.String $r2, $r7, $r8, $r12, $r16, $r17, r18, $r19, $r20, $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i2, $i3, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43;
        char $c0, $c1, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11, $c12, c15;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: void resetInitialized()>();

        $c0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in DOCTYPE declaration");

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNsEnabled>;

        if $z0 == 0 goto label05;

        $r16 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseLocalName(char)>($c0);

        $c11 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in DOCTYPE declaration");

        $i21 = (int) $c11;

        if $i21 != 58 goto label01;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix> = $r16;

        $c12 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>("; expected an identifier");

        $r17 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseLocalName(char)>($c12);

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName> = $r17;

        goto label04;

     label01:
        $i22 = (int) $c11;

        if $i22 <= 32 goto label02;

        $i23 = (int) $c11;

        if $i23 == 91 goto label02;

        $i24 = (int) $c11;

        if $i24 != 62 goto label03;

     label02:
        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = $i13 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i14;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix> = null;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName> = $r16;

        goto label04;

     label03:
        $i25 = (int) $c11;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i25, " in DOCTYPE declaration; expected \'[\' or white space.");

     label04:
        goto label06;

     label05:
        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFullName(char)>($c0);

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootLName> = $r2;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mRootPrefix> = null;

     label06:
        $c1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in DOCTYPE declaration");

        c15 = $c1;

        $i26 = (int) $c1;

        if $i26 == 91 goto label20;

        $i27 = (int) $c1;

        if $i27 == 62 goto label20;

        r18 = null;

        $i28 = (int) $c1;

        if $i28 != 80 goto label13;

        $c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in DOCTYPE declaration");

        $r12 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>($c6, "UBLIC");

        r18 = $r12;

        if $r12 == null goto label07;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("P");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        r18 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label18;

     label07:
        $c7 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in DOCTYPE declaration");

        $z2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipWS(char)>($c7);

        if $z2 != 0 goto label08;

        $i29 = (int) $c1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i29, " in DOCTYPE declaration; expected a space between PUBLIC keyword and public id");

     label08:
        $c8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in DOCTYPE declaration");

        $i30 = (int) $c8;

        if $i30 == 34 goto label09;

        $i31 = (int) $c8;

        if $i31 == 39 goto label09;

        $i32 = (int) $c8;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i32, " in DOCTYPE declaration; expected a public identifier.");

     label09:
        $z4 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeAttrs>;

        $r19 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parsePublicId(char,boolean,java.lang.String)>($c8, $z4, " in DOCTYPE declaration");

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdPublicId> = $r19;

        $r20 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdPublicId>;

        $i16 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i16 != 0 goto label10;

     label10:
        $c9 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in DOCTYPE declaration");

        $z3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipWS(char)>($c9);

        if $z3 != 0 goto label11;

        $i33 = (int) $c8;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i33, " in DOCTYPE declaration; expected a space between public and system identifiers");

     label11:
        $c10 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in DOCTYPE declaration");

        $i34 = (int) $c10;

        if $i34 == 34 goto label12;

        $i35 = (int) $c10;

        if $i35 == 39 goto label12;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>(" in DOCTYPE declaration; expected a system identifier.");

     label12:
        $z5 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        $r21 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseSystemId(char,boolean,java.lang.String)>($c10, $z5, " in DOCTYPE declaration");

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdSystemId> = $r21;

        $r22 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdSystemId>;

        $i17 = virtualinvoke $r22.<java.lang.String: int length()>();

        if $i17 != 0 goto label18;

        goto label18;

     label13:
        $i36 = (int) $c1;

        if $i36 != 83 goto label16;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdPublicId> = null;

        $c4 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in DOCTYPE declaration");

        $r8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>($c4, "YSTEM");

        r18 = $r8;

        if $r8 == null goto label14;

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("S");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        r18 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label18;

     label14:
        $c5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in DOCTYPE declaration");

        $i37 = (int) $c5;

        if $i37 == 34 goto label15;

        $i38 = (int) $c5;

        if $i38 == 39 goto label15;

        $i39 = (int) $c5;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i39, " in DOCTYPE declaration; expected a system identifier.");

     label15:
        $z6 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        $r23 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseSystemId(char,boolean,java.lang.String)>($c5, $z6, " in DOCTYPE declaration");

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdSystemId> = $r23;

        $r24 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdSystemId>;

        $i18 = virtualinvoke $r24.<java.lang.String: int length()>();

        if $i18 != 0 goto label18;

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mDtdSystemId> = null;

        goto label18;

     label16:
        $z1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameStartChar(char)>($c1);

        if $z1 != 0 goto label17;

        $i40 = (int) $c1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i40, " in DOCTYPE declaration; expected keywords \'PUBLIC\' or \'SYSTEM\'.");

        goto label18;

     label17:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = $i2 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i3;

        r18 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String checkKeyword(char,java.lang.String)>($c1, "SYSTEM");

     label18:
        if r18 == null goto label19;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected keyword \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'; expected \'PUBLIC\' or \'SYSTEM\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r7);

     label19:
        c15 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String)>(" in DOCTYPE declaration");

     label20:
        $i41 = (int) c15;

        if $i41 != 91 goto label21;

        goto label22;

     label21:
        $i42 = (int) c15;

        if $i42 == 62 goto label22;

        $i43 = (int) c15;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i43, " in DOCTYPE declaration; expected closing \'>\'.");

     label22:
        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i20 = $i19 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i20;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        return;
    }

    protected void finishDTD(boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r8;
        com.ctc.wstx.util.TextBuffer $r6;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r1;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9;
        boolean z0, $z1;
        com.ctc.wstx.io.BranchingReaderSource $r4, $r7, $r10;
        char $c0, c6;
        com.ctc.wstx.io.WstxInputSource $r2, $r3, $r5, $r9;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        z0 := @parameter0: boolean;

        $c0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in DOCTYPE declaration");

        c6 = $c0;

        $i7 = (int) $c0;

        if $i7 != 91 goto label06;

        if z0 == 0 goto label01;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        $r7 = (com.ctc.wstx.io.BranchingReaderSource) $r5;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        virtualinvoke $r7.<com.ctc.wstx.io.BranchingReaderSource: void startBranch(com.ctc.wstx.util.TextBuffer,int,boolean)>($r6, $i3, $z1);

     label01:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        staticinvoke <com.ctc.wstx.dtd.MinimalDTDReader: void skipInternalSubset(com.ctc.wstx.io.WstxInputData,com.ctc.wstx.io.WstxInputSource,com.ctc.wstx.api.ReaderConfig)>(r0, $r2, $r1);

        goto label08;

     label02:
        goto label05;

     label03:
        $r8 := @caughtexception;

        goto label10;

     label04:
        throw $r8;

     label05:
        c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharAfterWS(java.lang.String)>(" in internal DTD subset");

     label06:
        $i8 = (int) c6;

        if $i8 == 62 goto label07;

        $i9 = (int) c6;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i9, "; expected \'>\' to finish DOCTYPE declaration.");

     label07:
        return;

     label08:
        if z0 == 0 goto label09;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        $r4 = (com.ctc.wstx.io.BranchingReaderSource) $r3;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i2 = $i1 - 1;

        virtualinvoke $r4.<com.ctc.wstx.io.BranchingReaderSource: void endBranch(int)>($i2);

     label09:
        goto label02;

     label10:
        if z0 == 0 goto label11;

        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        $r10 = (com.ctc.wstx.io.BranchingReaderSource) $r9;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 - 1;

        virtualinvoke $r10.<com.ctc.wstx.io.BranchingReaderSource: void endBranch(int)>($i5);

     label11:
        goto label04;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    private final int nextFromTree() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r15, $r16, $r17, $r23, $r26;
        com.ctc.wstx.api.ReaderConfig $r21;
        byte $b57;
        com.ctc.wstx.util.SymbolTable $r22, $r24;
        com.ctc.wstx.io.WstxInputSource $r4;
        long $l24, $l25, $l26, $l46, $l48, $l49;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r9, $r12, $r13, $r27;
        java.lang.String $r11, $r14;
        char[] $r18;
        com.ctc.wstx.ent.EntityDecl $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        com.ctc.wstx.sr.InputElementStack $r2, $r3, $r6, $r7, $r10, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, $i45, $i47, $i50, $i51, $i52, $i53, $i56, $i59, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68;
        com.ctc.wstx.sr.ReaderCreator $r25;
        char $c8, $c9, $c44, $c54, c55, $c58, $c60;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label03;

        $i40 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i40 != 2 goto label02;

        $i41 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i41 == 4 goto label01;

        $i42 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i42 != 12 goto label02;

     label01:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Internal error: skipping validatable text");

     label02:
        i43 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int skipToken()>();

        goto label18;

     label03:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i2 != 1 goto label04;

        $z16 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStEmptyElem>;

        if $z16 == 0 goto label17;

        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStEmptyElem> = 0;

        return 2;

     label04:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i3 != 2 goto label10;

        $r19 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $i38 = virtualinvoke $r19.<com.ctc.wstx.sr.InputElementStack: int pop()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent> = $i38;

        if $i38 != 2 goto label05;

        $z17 = 1;

        goto label06;

     label05:
        $z17 = 0;

     label06:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mValidateText> = $z17;

        $r20 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z12 = virtualinvoke $r20.<com.ctc.wstx.sr.InputElementStack: boolean isEmpty()>();

        if $z12 == 0 goto label09;

        $r21 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z13 = virtualinvoke $r21.<com.ctc.wstx.api.ReaderConfig: boolean inputParsingModeFragment()>();

        if $z13 != 0 goto label09;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState> = 2;

        $z14 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean nextFromProlog(boolean)>(0);

        if $z14 == 0 goto label07;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mSecondaryToken> = 0;

     label07:
        $r22 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.SymbolTable mSymbols>;

        $z15 = virtualinvoke $r22.<com.ctc.wstx.util.SymbolTable: boolean isDirty()>();

        if $z15 == 0 goto label08;

        $r25 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.ReaderCreator mOwner>;

        $r24 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.SymbolTable mSymbols>;

        interfaceinvoke $r25.<com.ctc.wstx.sr.ReaderCreator: void updateSymbolTable(com.ctc.wstx.util.SymbolTable)>($r24);

     label08:
        $r23 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r23.<com.ctc.wstx.util.TextBuffer: void recycle(boolean)>(0);

        $i39 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        return $i39;

     label09:
        goto label17;

     label10:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i4 != 12 goto label17;

        $i22 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i22 > 2 goto label17;

        $l25 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i23 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l24 = (long) $i23;

        $l26 = $l25 + $l24;

        r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal> = $l26;

        $i27 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRow>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputRow> = $i27;

        $i29 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i28 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRowStart>;

        $i30 = $i29 - $i28;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputCol> = $i30;

        $i32 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i31 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i32 >= $i31 goto label11;

        $r18 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i36 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i37 = $i36 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i37;

        $c44 = $r18[$i36];

        goto label12;

     label11:
        $c44 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in CDATA section");

     label12:
        $z9 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readCDataPrimary(char)>($c44);

        if $z9 == 0 goto label13;

        $r17 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i35 = virtualinvoke $r17.<com.ctc.wstx.util.TextBuffer: int size()>();

        if $i35 <= 0 goto label17;

        return 12;

     label13:
        $r15 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i33 = virtualinvoke $r15.<com.ctc.wstx.util.TextBuffer: int size()>();

        if $i33 != 0 goto label16;

        $z10 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgLazyParsing>;

        if $z10 == 0 goto label14;

        $i45 = 1;

        goto label15;

     label14:
        $i45 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment>;

     label15:
        $z11 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readCDataSecondary(int)>($i45);

        if $z11 == 0 goto label16;

        $r16 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i34 = virtualinvoke $r16.<com.ctc.wstx.util.TextBuffer: int size()>();

        if $i34 <= 0 goto label17;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        return 12;

     label16:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 2;

        return 12;

     label17:
        $l46 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i47 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l48 = (long) $i47;

        $l49 = $l46 + $l48;

        r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal> = $l49;

        $i50 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRow>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputRow> = $i50;

        $i51 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i52 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRowStart>;

        $i53 = $i51 - $i52;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputCol> = $i53;

        i43 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

     label18:
        if i43 >= 0 goto label20;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z8 = virtualinvoke $r7.<com.ctc.wstx.sr.InputElementStack: boolean isEmpty()>();

        if $z8 != 0 goto label19;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; was expecting a close tag for element <");

        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r11 = virtualinvoke $r10.<com.ctc.wstx.sr.InputElementStack: java.lang.String getTopElementDesc()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedEOF(java.lang.String)>($r14);

     label19:
        $i21 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int handleEOF(boolean)>(0);

        return $i21;

     label20:
        if i43 != 38 goto label28;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus> = 0;

        $i18 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i18 != 0 goto label21;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportInvalidContent(int)>(9);

     label21:
        $z5 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReplaceEntities>;

        if $z5 == 0 goto label22;

        $c54 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char fullyResolveEntity(boolean)>(1);

        goto label23;

     label22:
        $c54 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveCharOnlyEntity(boolean)>(1);

     label23:
        c55 = $c54;

        if $c54 == 0 goto label26;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i19 > 1 goto label25;

        $i59 = (int) $c54;

        if $i59 <= 32 goto label25;

        $i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i20 < 1 goto label24;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z7 = virtualinvoke $r6.<com.ctc.wstx.sr.InputElementStack: boolean reallyValidating()>();

        if $z7 == 0 goto label25;

     label24:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportInvalidContent(int)>(4);

     label25:
        $r26 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r26.<com.ctc.wstx.util.TextBuffer: void resetInitialized()>();

        virtualinvoke $r26.<com.ctc.wstx.util.TextBuffer: void append(char)>(c55);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        return 4;

     label26:
        $z6 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReplaceEntities>;

        if $z6 != 0 goto label27;

        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl resolveNonCharEntity()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.ent.EntityDecl mCurrEntity> = $r5;

        return 9;

     label27:
        $c60 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in main document content");

        $i61 = (int) $c60;

        i43 = $i61;

        goto label20;

     label28:
        if i43 != 60 goto label38;

        $c9 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in start tag");

        $i62 = (int) $c9;

        if $i62 != 63 goto label30;

        $i16 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i16 != 0 goto label29;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportInvalidContent(int)>(3);

     label29:
        $i17 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readPIPrimary()>();

        return $i17;

     label30:
        $i63 = (int) $c9;

        if $i63 != 33 goto label32;

        $i14 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int nextFromTreeCommentOrCData()>();

        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i15 != 0 goto label31;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportInvalidContent(int)>($i14);

     label31:
        return $i14;

     label32:
        $i64 = (int) $c9;

        if $i64 != 47 goto label34;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readEndElem()>();

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrDepth>;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputTopDepth>;

        if $i11 != $i10 goto label33;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.io.WstxInputSource mInput>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void handleGreedyEntityProblem(com.ctc.wstx.io.WstxInputSource)>($r4);

     label33:
        $i12 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrDepth>;

        $i13 = $i12 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrDepth> = $i13;

        return 2;

     label34:
        $i65 = (int) $c9;

        if $i65 == 58 goto label35;

        $z4 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameStartChar(char)>($c9);

        if $z4 == 0 goto label36;

     label35:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void handleStartElem(char)>($c9);

        return 1;

     label36:
        $i66 = (int) $c9;

        if $i66 != 91 goto label37;

        $i67 = (int) $c9;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i67, " in content after \'<\' (malformed <![CDATA[]] directive?)");

     label37:
        $i68 = (int) $c9;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i68, " in content after \'<\' (malformed start element?).");

     label38:
        $i56 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i56 > 1 goto label43;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent>;

        if $i7 != 0 goto label39;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z3 = virtualinvoke $r3.<com.ctc.wstx.sr.InputElementStack: boolean reallyValidating()>();

        if $z3 == 0 goto label39;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportInvalidContent(int)>(4);

     label39:
        if i43 > 32 goto label42;

        $c8 = (char) i43;

        $z2 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readSpacePrimary(char,boolean)>($c8, 0);

        if $z2 == 0 goto label40;

        $b57 = 4;

        goto label41;

     label40:
        $b57 = 1;

     label41:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = $b57;

        return 6;

     label42:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z1 = virtualinvoke $r2.<com.ctc.wstx.sr.InputElementStack: boolean reallyValidating()>();

        if $z1 == 0 goto label43;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportInvalidContent(int)>(4);

     label43:
        $c58 = (char) i43;

        $z18 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readTextPrimary(char)>($c58);

        if $z18 == 0 goto label44;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        goto label46;

     label44:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z0 != 0 goto label45;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i5 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: int size()>();

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment>;

        if $i5 < $i6 goto label45;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 2;

        goto label46;

     label45:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

     label46:
        return 4;
    }

    private final void handleStartElem(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        boolean $z0, $z1, z2, $z3, $z4;
        com.ctc.wstx.sr.InputElementStack $r1, $r3, $r7, $r8;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i25, $i26, $i27;
        java.lang.String $r2, $r5, $r6, $r9;
        char c19, $c20, c21, $c22, $c23, $c24;
        char[] $r4, $r10, $r11, $r12;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c19 := @parameter0: char;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNsEnabled>;

        if $z0 == 0 goto label11;

        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseLocalName(char)>(c19);

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i8 >= $i7 goto label01;

        $r12 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i17 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i18 = $i17 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i18;

        $c20 = $r12[$i17];

        goto label02;

     label01:
        $c20 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>("; expected an identifier");

     label02:
        c21 = $c20;

        $i25 = (int) $c20;

        if $i25 != 58 goto label07;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i10 >= $i9 goto label03;

        $r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i16 = $i15 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i16;

        $c22 = $r11[$i15];

        goto label04;

     label03:
        $c22 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>("; expected an identifier");

     label04:
        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r9 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseLocalName(char)>($c22);

        virtualinvoke $r8.<com.ctc.wstx.sr.InputElementStack: void push(java.lang.String,java.lang.String)>($r5, $r9);

        $i12 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i12 >= $i11 goto label05;

        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = $i13 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i14;

        $c23 = $r10[$i13];

        goto label06;

     label05:
        $c23 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label06:
        c21 = $c23;

        goto label08;

     label07:
        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r6 = <com.ctc.wstx.sr.BasicStreamReader: java.lang.String DEFAULT_NS_PREFIX>;

        virtualinvoke $r7.<com.ctc.wstx.sr.InputElementStack: void push(java.lang.String,java.lang.String)>($r6, $r5);

     label08:
        $i26 = (int) c21;

        if $i26 != 62 goto label09;

        $z1 = 0;

        goto label10;

     label09:
        $z1 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean handleNsAttrs(char)>(c21);

     label10:
        z2 = $z1;

        goto label16;

     label11:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFullName(char)>(c19);

        virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: void push(java.lang.String)>($r2);

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label12;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = $i5 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i6;

        $c24 = $r4[$i5];

        goto label13;

     label12:
        $c24 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label13:
        $i27 = (int) $c24;

        if $i27 != 62 goto label14;

        $z3 = 0;

        goto label15;

     label14:
        $z3 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean handleNonNsAttrs(char)>($c24);

     label15:
        z2 = $z3;

     label16:
        if z2 != 0 goto label17;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrDepth>;

        $i4 = $i3 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrDepth> = $i4;

     label17:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mStEmptyElem> = z2;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $i2 = virtualinvoke $r3.<com.ctc.wstx.sr.InputElementStack: int resolveAndValidateElement()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mVldContent> = $i2;

        if $i2 != 2 goto label18;

        $z4 = 1;

        goto label19;

     label18:
        $z4 = 0;

     label19:
        r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mValidateText> = $z4;

        return;
    }

    private final boolean handleNsAttrs(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r10, $r11, $r12, $r22;
        java.lang.String $r2, $r3, $r5, $r6, $r13, r18, r19, $r20;
        char[] $r4, $r14, $r15, $r16, $r17;
        boolean $z0, $z1;
        com.ctc.wstx.util.TextBuilder $r7, $r8, r21;
        com.ctc.wstx.sr.AttributeCollector r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i51;
        char $c21, c22, $c23, $c24, $c25, c26, $c27, c28, $c32;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c22 := @parameter0: char;

        r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

     label01:
        $i33 = (int) c22;

        if $i33 > 32 goto label02;

        c22 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in start tag", c22);

        goto label03;

     label02:
        $i34 = (int) c22;

        if $i34 == 47 goto label03;

        $i35 = (int) c22;

        if $i35 == 62 goto label03;

        $i36 = (int) c22;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i36, " excepted space, or \'>\' or \"/>\"");

     label03:
        $i37 = (int) c22;

        if $i37 != 47 goto label05;

        $c21 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

        $i38 = (int) $c21;

        if $i38 == 62 goto label04;

        $i39 = (int) $c21;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i39, " expected \'>\'");

     label04:
        return 1;

     label05:
        $i40 = (int) c22;

        if $i40 != 62 goto label06;

        return 0;

     label06:
        $i41 = (int) c22;

        if $i41 != 60 goto label07;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unexpected \'<\' character in element (missing closing \'>\'?)");

     label07:
        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseLocalName(char)>(c22);

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label08;

        $r17 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i20 = $i19 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i20;

        $c23 = $r17[$i19];

        goto label09;

     label08:
        $c23 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>("; expected an identifier");

     label09:
        $i42 = (int) $c23;

        if $i42 != 58 goto label12;

        r18 = $r2;

        $i16 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i16 >= $i15 goto label10;

        $r16 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i17 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i18 = $i17 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i18;

        $c24 = $r16[$i17];

        goto label11;

     label10:
        $c24 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>("; expected an identifier");

     label11:
        r19 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseLocalName(char)>($c24);

        goto label13;

     label12:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = $i2 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i3;

        r18 = <com.ctc.wstx.sr.BasicStreamReader: java.lang.String DEFAULT_NS_PREFIX>;

        r19 = $r2;

     label13:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i5 >= $i4 goto label14;

        $r15 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = $i13 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i14;

        $c25 = $r15[$i13];

        goto label15;

     label14:
        $c25 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label15:
        c26 = $c25;

        $i43 = (int) $c25;

        if $i43 > 32 goto label16;

        c26 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in start tag", $c25);

     label16:
        $i44 = (int) c26;

        if $i44 == 61 goto label17;

        $i45 = (int) c26;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i45, " expected \'=\'");

     label17:
        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i7 >= $i6 goto label18;

        $r14 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i12 = $i11 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i12;

        $c27 = $r14[$i11];

        goto label19;

     label18:
        $c27 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label19:
        c28 = $c27;

        $i46 = (int) $c27;

        if $i46 > 32 goto label20;

        c28 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in start tag", $c27);

     label20:
        $i47 = (int) c28;

        if $i47 == 34 goto label21;

        $i48 = (int) c28;

        if $i48 == 39 goto label21;

        $i49 = (int) c28;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i49, " in start tag Expected a quote");

     label21:
        $i51 = (int) -1;

        i29 = $i51;

        $r20 = <com.ctc.wstx.sr.BasicStreamReader: java.lang.String sPrefixXmlns>;

        if r18 != $r20 goto label23;

        $r8 = virtualinvoke r1.<com.ctc.wstx.sr.AttributeCollector: com.ctc.wstx.util.TextBuilder getNsBuilder(java.lang.String)>(r19);

        r21 = $r8;

        if null != $r8 goto label22;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Duplicate declaration for namespace prefix \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r19);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r13);

     label22:
        i29 = virtualinvoke $r8.<com.ctc.wstx.util.TextBuilder: int getCharSize()>();

        goto label25;

     label23:
        $r3 = <com.ctc.wstx.sr.BasicStreamReader: java.lang.String sPrefixXmlns>;

        if r19 != $r3 goto label24;

        $r6 = <com.ctc.wstx.sr.BasicStreamReader: java.lang.String DEFAULT_NS_PREFIX>;

        if r18 != $r6 goto label24;

        $r7 = virtualinvoke r1.<com.ctc.wstx.sr.AttributeCollector: com.ctc.wstx.util.TextBuilder getDefaultNsBuilder()>();

        r21 = $r7;

        if null != $r7 goto label25;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Duplicate default namespace declaration.");

        goto label25;

     label24:
        r21 = virtualinvoke r1.<com.ctc.wstx.sr.AttributeCollector: com.ctc.wstx.util.TextBuilder getAttrBuilder(java.lang.String,java.lang.String)>(r18, r19);

     label25:
        virtualinvoke r21.<com.ctc.wstx.util.TextBuilder: void startNewEntry()>();

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeAttrs>;

        if $z1 == 0 goto label26;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseNormalizedAttrValue(char,com.ctc.wstx.util.TextBuilder)>(c28, r21);

        goto label27;

     label26:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseNonNormalizedAttrValue(char,com.ctc.wstx.util.TextBuilder)>(c28, r21);

     label27:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mXml11>;

        if $z0 != 0 goto label28;

        if i29 < 0 goto label28;

        $i10 = virtualinvoke r21.<com.ctc.wstx.util.TextBuilder: int getCharSize()>();

        if $i10 != i29 goto label28;

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_NS_EMPTY>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r5);

     label28:
        $i30 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i31 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i30 >= $i31 goto label29;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i9;

        $c32 = $r4[$i8];

        goto label30;

     label29:
        $c32 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label30:
        c22 = $c32;

        goto label01;
    }

    private final boolean handleNonNsAttrs(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuilder $r3;
        boolean $z0;
        com.ctc.wstx.sr.AttributeCollector r1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        java.lang.String $r2;
        char $c12, c13, $c14, c15, $c16, c17, $c18;
        char[] $r4, $r5, $r6;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c13 := @parameter0: char;

        r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.AttributeCollector mAttrCollector>;

     label01:
        $i19 = (int) c13;

        if $i19 > 32 goto label02;

        c13 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in start tag", c13);

        goto label03;

     label02:
        $i20 = (int) c13;

        if $i20 == 47 goto label03;

        $i21 = (int) c13;

        if $i21 == 62 goto label03;

        $i22 = (int) c13;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i22, " excepted space, or \'>\' or \"/>\"");

     label03:
        $i23 = (int) c13;

        if $i23 != 47 goto label05;

        $c12 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

        $i24 = (int) $c12;

        if $i24 == 62 goto label04;

        $i25 = (int) $c12;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i25, " expected \'>\'");

     label04:
        return 1;

     label05:
        $i26 = (int) c13;

        if $i26 != 62 goto label06;

        return 0;

     label06:
        $i27 = (int) c13;

        if $i27 != 60 goto label07;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unexpected \'<\' character in element (missing closing \'>\'?)");

     label07:
        $r2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFullName(char)>(c13);

        $r3 = virtualinvoke r1.<com.ctc.wstx.sr.AttributeCollector: com.ctc.wstx.util.TextBuilder getAttrBuilder(java.lang.String,java.lang.String)>(null, $r2);

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label08;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i11 = $i10 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i11;

        $c14 = $r6[$i10];

        goto label09;

     label08:
        $c14 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label09:
        c15 = $c14;

        $i28 = (int) $c14;

        if $i28 > 32 goto label10;

        c15 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in start tag", $c14);

     label10:
        $i29 = (int) c15;

        if $i29 == 61 goto label11;

        $i30 = (int) c15;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i30, " expected \'=\'");

     label11:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i3 >= $i2 goto label12;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i9;

        $c16 = $r5[$i8];

        goto label13;

     label12:
        $c16 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label13:
        c17 = $c16;

        $i31 = (int) $c16;

        if $i31 > 32 goto label14;

        c17 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in start tag", $c16);

     label14:
        $i32 = (int) c17;

        if $i32 == 34 goto label15;

        $i33 = (int) c17;

        if $i33 == 39 goto label15;

        $i34 = (int) c17;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i34, " in start tag Expected a quote");

     label15:
        virtualinvoke $r3.<com.ctc.wstx.util.TextBuilder: void startNewEntry()>();

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeAttrs>;

        if $z0 == 0 goto label16;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseNormalizedAttrValue(char,com.ctc.wstx.util.TextBuilder)>(c17, $r3);

        goto label17;

     label16:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void parseNonNormalizedAttrValue(char,com.ctc.wstx.util.TextBuilder)>(c17, $r3);

     label17:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i5 >= $i4 goto label18;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = $i6 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i7;

        $c18 = $r4[$i6];

        goto label19;

     label18:
        $c18 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in start tag");

     label19:
        c13 = $c18;

        goto label01;
    }

    private final void readEndElem() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.String $r10, $r12;
        char[] $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;
        com.ctc.wstx.sr.InputElementStack $r1, $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i33, $i38, i39, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58;
        char $c16, $c31, c32, $c34, $c35, $c36, $c37, $c40, $c41, $c42, c43;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportExtraEndElem()>();

        return;

     label01:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label02;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i29 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i30 = $i29 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i30;

        $c31 = $r8[$i29];

        goto label03;

     label02:
        $c31 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label03:
        c32 = $c31;

        $z1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameStartChar(char)>($c31);

        if $z1 != 0 goto label05;

        $i44 = (int) $c31;

        if $i44 == 58 goto label05;

        $i45 = (int) $c31;

        if $i45 > 32 goto label04;

        $i46 = (int) $c31;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i46, "; missing element name?");

     label04:
        $i47 = (int) c32;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i47, "; expected an element name.");

     label05:
        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r10 = virtualinvoke $r9.<com.ctc.wstx.sr.InputElementStack: java.lang.String getPrefix()>();

        $r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r12 = virtualinvoke $r11.<com.ctc.wstx.sr.InputElementStack: java.lang.String getLocalName()>();

        if $r10 == null goto label17;

        $i14 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i14 <= 0 goto label17;

        $i15 = virtualinvoke $r10.<java.lang.String: int length()>();

        i33 = 0;

     label06:
        $c16 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(i33);

        $i48 = (int) c32;

        $i49 = (int) $c16;

        if $i48 == $i49 goto label07;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportWrongEndPrefix(java.lang.String,java.lang.String,int)>($r10, $r12, i33);

        return;

     label07:
        i33 = i33 + 1;

        if i33 < $i15 goto label08;

        goto label11;

     label08:
        $i18 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i17 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i18 >= $i17 goto label09;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i20 = $i19 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i20;

        $c34 = $r5[$i19];

        goto label10;

     label09:
        $c34 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label10:
        c32 = $c34;

        goto label06;

     label11:
        $i22 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i21 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i22 >= $i21 goto label12;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i27 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i28 = $i27 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i28;

        $c35 = $r7[$i27];

        goto label13;

     label12:
        $c35 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label13:
        $i50 = (int) $c35;

        if $i50 == 58 goto label14;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportWrongEndPrefix(java.lang.String,java.lang.String,int)>($r10, $r12, i33);

        return;

     label14:
        $i24 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i23 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i24 >= $i23 goto label15;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i25 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i26 = $i25 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i26;

        $c36 = $r6[$i25];

        goto label16;

     label15:
        $c36 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label16:
        c32 = $c36;

        goto label20;

     label17:
        $i51 = (int) c32;

        if $i51 != 58 goto label20;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i11 >= $i10 goto label18;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i12 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i13 = $i12 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i13;

        $c37 = $r4[$i12];

        goto label19;

     label18:
        $c37 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label19:
        c32 = $c37;

     label20:
        $i38 = virtualinvoke $r12.<java.lang.String: int length()>();

        i39 = 0;

     label21:
        $c40 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(i39);

        $i52 = (int) c32;

        $i53 = (int) $c40;

        if $i52 == $i53 goto label22;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportWrongEndElem(java.lang.String,java.lang.String,int)>($r10, $r12, i39);

        return;

     label22:
        i39 = i39 + 1;

        if i39 < $i38 goto label23;

        goto label26;

     label23:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i3 >= $i2 goto label24;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i5;

        $c41 = $r2[$i4];

        goto label25;

     label24:
        $c41 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label25:
        c32 = $c41;

        goto label21;

     label26:
        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i7 >= $i6 goto label27;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i9;

        $c42 = $r3[$i8];

        goto label28;

     label27:
        $c42 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in end tag");

     label28:
        c43 = $c42;

        $i54 = (int) $c42;

        if $i54 > 32 goto label29;

        c43 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextInCurrAfterWS(java.lang.String,char)>(" in end tag", $c42);

        goto label32;

     label29:
        $i55 = (int) $c42;

        if $i55 != 62 goto label30;

        goto label32;

     label30:
        $i56 = (int) $c42;

        if $i56 == 58 goto label31;

        $z2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean isNameChar(char)>($c42);

        if $z2 == 0 goto label32;

     label31:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void reportWrongEndElem(java.lang.String,java.lang.String,int)>($r10, $r12, $i38);

     label32:
        $i57 = (int) c43;

        if $i57 == 62 goto label33;

        $i58 = (int) c43;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i58, " in end tag Expected \'>\'.");

     label33:
        return;
    }

    private void reportExtraEndElem() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        java.lang.String $r1, $r6;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFNameForError()>();

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unbalanced close tag </");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">; no open start tag.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r6);

        return;
    }

    private void reportWrongEndPrefix(java.lang.String, java.lang.String, int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, i2;
        java.lang.String r2, r5, $r7, $r8, $r10, $r13, $r20;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = $i0 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFNameForError()>();

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected close tag </");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">; expected </");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r20);

        return;
    }

    private void reportWrongEndElem(java.lang.String, java.lang.String, int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String r1, r2, r7, $r8, $r10, $r13, $r20;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = $i0 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i1;

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = 1 + $i3;

        i5 = i5 + $i4;

        goto label2;

     label1:
        r7 = r2;

     label2:
        $r8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFNameForError()>();

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected close tag </");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">; expected </");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r20);

        return;
    }

    private int nextFromTreeCommentOrCData() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c0, $c1, $c6;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i2, $i3, $i4, $i5, $i7, $i8, $i9;
        char[] $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $c0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in main document content");

        $i7 = (int) $c0;

        if $i7 != 91 goto label3;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void checkCData()>();

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i3 >= $i2 goto label1;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i5;

        $c6 = $r1[$i4];

        goto label2;

     label1:
        $c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in CDATA section");

     label2:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readCDataPrimary(char)>($c6);

        return 12;

     label3:
        $i8 = (int) $c0;

        if $i8 != 45 goto label4;

        $c1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in main document content");

        $i9 = (int) $c1;

        if $i9 != 45 goto label4;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        return 5;

     label4:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Unrecognized XML directive; expected CDATA or comment (\'<![CDATA[\' or \'<!--\').");

        return 0;
    }

    private int skipToken() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        long $l5, $l6, $l7, $l8, $l15, $l16, $l17;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r5, $r12, $r14, $r16, $r18;
        java.lang.String $r4, $r6, $r13, $r15;
        char[] $r7, $r8, $r9;
        java.lang.IllegalStateException $r17, $r19;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i9, $i10, $i11, $i12, $i13, $i14, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59;
        char $c36, c37, $c38, c41;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        tableswitch($i0)
        {
            case 1: goto label23;
            case 2: goto label23;
            case 3: goto label06;
            case 4: goto label04;
            case 5: goto label03;
            case 6: goto label16;
            case 7: goto label22;
            case 8: goto label22;
            case 9: goto label22;
            case 10: goto label23;
            case 11: goto label05;
            case 12: goto label01;
            case 13: goto label23;
            case 14: goto label22;
            case 15: goto label22;
            default: goto label23;
        };

     label01:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i1 > 2 goto label02;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void skipCommentOrCData(java.lang.String,char,boolean)>(" in CDATA section", 93, 0);

     label02:
        $i2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        i35 = $i2;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z0 == 0 goto label24;

        i35 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int skipCoalescedText(int)>($i2);

        goto label24;

     label03:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void skipCommentOrCData(java.lang.String,char,boolean)>(" in comment", 45, 1);

        i35 = 0;

        goto label24;

     label04:
        $i24 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        $i25 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int skipTokenText(int)>($i24);

        i35 = $i25;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z2 == 0 goto label24;

        i35 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int skipCoalescedText(int)>($i25);

        goto label24;

     label05:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishDTD(boolean)>(0);

        i35 = 0;

        goto label24;

     label06:
        $i27 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i26 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i27 >= $i26 goto label07;

        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i32 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i33 = $i32 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i33;

        $c36 = $r9[$i32];

        goto label08;

     label07:
        $c36 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in processing instruction");

     label08:
        c37 = $c36;

        $i43 = (int) $c36;

        if $i43 != 63 goto label12;

     label09:
        $i29 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i28 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i29 >= $i28 goto label10;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i30 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i31 = $i30 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i31;

        $c38 = $r8[$i30];

        goto label11;

     label10:
        $c38 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in processing instruction");

     label11:
        c37 = $c38;

        $i44 = (int) $c38;

        if $i44 == 63 goto label09;

        $i45 = (int) $c38;

        if $i45 != 62 goto label12;

        i35 = 0;

        goto label24;

     label12:
        $i46 = (int) c37;

        if $i46 >= 32 goto label15;

        $i47 = (int) c37;

        if $i47 == 10 goto label13;

        $i48 = (int) c37;

        if $i48 != 13 goto label14;

     label13:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>(c37);

        goto label15;

     label14:
        $i49 = (int) c37;

        if $i49 == 9 goto label15;

        $i50 = (int) c37;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i50);

     label15:
        goto label06;

     label16:
        $i39 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i40 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i39 >= $i40 goto label21;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i22 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i23 = $i22 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i23;

        c41 = $r7[$i22];

        $i51 = (int) c41;

        if $i51 <= 32 goto label17;

        $i52 = (int) c41;

        i35 = $i52;

        goto label24;

     label17:
        $i53 = (int) c41;

        if $i53 == 10 goto label18;

        $i54 = (int) c41;

        if $i54 != 13 goto label19;

     label18:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>(c41);

        goto label20;

     label19:
        $i55 = (int) c41;

        if $i55 == 32 goto label20;

        $i56 = (int) c41;

        if $i56 == 9 goto label20;

        $i57 = (int) c41;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i57);

     label20:
        goto label16;

     label21:
        $z1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMore()>();

        if $z1 != 0 goto label16;

        $i59 = (int) -1;

        i35 = $i59;

        goto label24;

     label22:
        $r17 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("skipToken() called when current token is ");

        $i21 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r4 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i21);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r17;

     label23:
        $r19 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unexpected token ");

        $i34 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r13 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i34);

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r19;

     label24:
        if i35 >= 1 goto label27;

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRow>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputRow> = $i13;

        $l16 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i14 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l15 = (long) $i14;

        $l17 = $l16 + $l15;

        r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal> = $l17;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i18 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRowStart>;

        $i20 = $i19 - $i18;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputCol> = $i20;

        if i35 >= 0 goto label25;

        $i42 = i35;

        goto label26;

     label25:
        $i42 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

     label26:
        return $i42;

     label27:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRow>;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputRow> = $i3;

        $l6 = r0.<com.ctc.wstx.sr.BasicStreamReader: long mCurrInputProcessed>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        $l8 = $l7 - 1L;

        r0.<com.ctc.wstx.sr.BasicStreamReader: long mTokenInputTotal> = $l8;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrInputRowStart>;

        $i11 = $i10 - $i9;

        $i12 = $i11 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenInputCol> = $i12;

        return i35;
    }

    private void skipCommentOrCData(java.lang.String, char, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        boolean z0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        java.lang.String r1;
        char c0, $c1, $c2, $c11, c12, c13, $c14;
        char[] $r2, $r3;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        z0 := @parameter2: boolean;

     label01:
        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i9 >= $i10 goto label02;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = $i7 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i8;

        $c11 = $r3[$i7];

        goto label03;

     label02:
        $c11 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(r1);

     label03:
        c12 = $c11;

        $i15 = (int) $c11;

        if $i15 >= 32 goto label06;

        $i16 = (int) $c11;

        if $i16 == 10 goto label04;

        $i17 = (int) $c11;

        if $i17 != 13 goto label05;

     label04:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>(c12);

        goto label06;

     label05:
        $i18 = (int) $c11;

        if $i18 == 9 goto label06;

        $i19 = (int) $c11;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i19);

     label06:
        $i20 = (int) c12;

        $i21 = (int) c0;

        if $i20 != $i21 goto label01;

        $c1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(r1);

        c13 = $c1;

        $i22 = (int) $c1;

        $i23 = (int) c0;

        if $i22 != $i23 goto label12;

        $c2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(r1);

        c13 = $c2;

        $i24 = (int) $c2;

        if $i24 != 62 goto label07;

        goto label16;

     label07:
        if z0 == 0 goto label08;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("String \'--\' not allowed in comment (missing \'>\'?)");

     label08:
        $i25 = (int) c13;

        $i26 = (int) c0;

        if $i25 != $i26 goto label11;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i4 >= $i3 goto label09;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = $i5 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i6;

        $c14 = $r2[$i5];

        goto label10;

     label09:
        $c14 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(r1);

     label10:
        c13 = $c14;

        goto label08;

     label11:
        $i27 = (int) c13;

        if $i27 != 62 goto label12;

        goto label16;

     label12:
        $i28 = (int) c13;

        if $i28 >= 32 goto label15;

        $i29 = (int) c13;

        if $i29 == 10 goto label13;

        $i30 = (int) c13;

        if $i30 != 13 goto label14;

     label13:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>(c13);

        goto label15;

     label14:
        $i31 = (int) c13;

        if $i31 == 9 goto label15;

        $i32 = (int) c13;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i32);

     label15:
        goto label01;

     label16:
        return;
    }

    private int skipCoalescedText(int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        char $c2, $c5;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i3, $i4, $i6, $i7, i8, $i9, $i10;
        char[] $r1, $r2;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i8 := @parameter0: int;

     label1:
        if i8 != 60 goto label5;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean ensureInput(int)>(3);

        if $z0 != 0 goto label2;

        return i8;

     label2:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $c2 = $r1[$i1];

        $i9 = (int) $c2;

        if $i9 != 33 goto label3;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i4 = $i3 + 1;

        $c5 = $r2[$i4];

        $i10 = (int) $c5;

        if $i10 == 91 goto label4;

     label3:
        return i8;

     label4:
        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = $i6 + 2;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i7;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void checkCData()>();

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void skipCommentOrCData(java.lang.String,char,boolean)>(" in CDATA section", 93, 0);

        i8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        goto label1;

     label5:
        if i8 >= 0 goto label6;

        return i8;

     label6:
        $i0 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int skipTokenText(int)>(i8);

        i8 = $i0;

        if $i0 == 38 goto label7;

        if $i0 >= 0 goto label1;

     label7:
        return $i0;
    }

    private int skipTokenText(int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i5, $i6, $i7, i9, $i10, $i11, $i12, $i13;
        boolean $z0;
        char c2, $c3, $c4, $c8;
        char[] $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i9 := @parameter0: int;

     label01:
        if i9 != 60 goto label02;

        return i9;

     label02:
        if i9 != 38 goto label05;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReplaceEntities>;

        if $z0 == 0 goto label04;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = $i6 - $i5;

        if $i7 < 3 goto label03;

        $c8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveSimpleEntity(boolean)>(1);

        if $c8 == 0 goto label03;

        goto label09;

     label03:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char fullyResolveEntity(boolean)>(1);

        goto label09;

     label04:
        $c4 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveCharOnlyEntity(boolean)>(1);

        if $c4 != 0 goto label09;

        return i9;

     label05:
        if i9 >= 32 goto label09;

        if i9 == 13 goto label06;

        if i9 != 10 goto label07;

     label06:
        $c3 = (char) i9;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>($c3);

        goto label09;

     label07:
        if i9 >= 0 goto label08;

        return i9;

     label08:
        if i9 == 9 goto label09;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>(i9);

     label09:
        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i10 >= $i11 goto label11;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = $i0 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i1;

        c2 = $r1[$i0];

        $i12 = (int) c2;

        if $i12 >= 63 goto label10;

        $i13 = (int) c2;

        i9 = $i13;

        goto label01;

     label10:
        goto label09;

     label11:
        i9 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int getNext()>();

        goto label01;
    }

    protected void ensureFinishToken() throws javax.xml.stream.XMLStreamException
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void wrappedFinishToken()>();

     label1:
        return;
    }

    protected void safeEnsureFinishToken()
    {
        int $i0, $i1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mStTextThreshold>;

        if $i1 >= $i0 goto label1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void safeFinishToken()>();

     label1:
        return;
    }

    protected void wrappedFinishToken() throws javax.xml.stream.XMLStreamException
    {
        java.io.IOException $r1;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

     label1:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>(0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwFromIOE(java.io.IOException)>($r1);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void safeFinishToken()
    {
        javax.xml.stream.XMLStreamException $r1;
        int $i0;
        java.io.IOException $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

     label1:
        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        if $i0 != 4 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishToken(boolean)>($z0);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwLazyError(java.lang.Exception)>($r2);

        goto label7;

     label6:
        $r1 := @caughtexception;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwLazyError(java.lang.Exception)>($r1);

     label7:
        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch javax.xml.stream.XMLStreamException from label1 to label4 with label6;
    }

    protected void finishToken(boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r16, $r18;
        boolean $z0, $z1, z2, $z3, $z4, $z5;
        java.lang.Throwable $r14;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r4, $r6, $r10, $r12, $r15, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15;
        java.lang.String $r5, $r7, $r11, $r13;
        char $c11;
        char[] $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        z2 := @parameter0: boolean;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        tableswitch($i0)
        {
            case 1: goto label20;
            case 2: goto label20;
            case 3: goto label19;
            case 4: goto label05;
            case 5: goto label13;
            case 6: goto label10;
            case 7: goto label20;
            case 8: goto label20;
            case 9: goto label20;
            case 10: goto label21;
            case 11: goto label14;
            case 12: goto label01;
            case 13: goto label21;
            case 14: goto label20;
            case 15: goto label20;
            default: goto label21;
        };

     label01:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z0 == 0 goto label02;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readCoalescedText(int,boolean)>($i2, z2);

        goto label04;

     label02:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment>;

        $z1 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readCDataSecondary(int)>($i1);

        if $z1 == 0 goto label03;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        goto label04;

     label03:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 2;

     label04:
        return;

     label05:
        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z3 == 0 goto label07;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i5 != 3 goto label06;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = $i6 + 1;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i8 >= $i7 goto label06;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i10 = $i9 + 1;

        $c11 = $r1[$i10];

        $i15 = (int) $c11;

        if $i15 == 33 goto label06;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        return;

     label06:
        $i14 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readCoalescedText(int,boolean)>($i14, z2);

        goto label09;

     label07:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment>;

        $z4 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readTextSecondary(int,boolean)>($i4, z2);

        if $z4 == 0 goto label08;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        goto label09;

     label08:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 2;

     label09:
        return;

     label10:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mParseState>;

        if $i3 == 1 goto label11;

        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readSpaceSecondary(boolean)>($z5);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        return;

     label13:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readComment()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        return;

     label14:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void finishDTD(boolean)>(1);

     label15:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        goto label18;

     label16:
        $r14 := @caughtexception;

     label17:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        throw $r14;

     label18:
        return;

     label19:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readPI()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        return;

     label20:
        $r16 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("finishToken() called when current token is ");

        $i12 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i12);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label21:
        $r18 = new java.lang.IllegalStateException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unexpected token ");

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r11 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i13);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r18;

        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void readComment() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r2, $r3, $r4;
        boolean $z0;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8, i10, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i25, $i26, $i27;
        char $c4, $c9, c11, c12;
        char[] r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i1 = i10;

     label01:
        if i10 >= i0 goto label12;

        $i2 = i10;

        i10 = i10 + 1;

        c11 = r1[$i2];

        $i14 = (int) c11;

        if $i14 <= 45 goto label02;

        goto label01;

     label02:
        $i15 = (int) c11;

        if $i15 >= 32 goto label07;

        $i16 = (int) c11;

        if $i16 != 10 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i10);

        goto label11;

     label03:
        $i17 = (int) c11;

        if $i17 != 13 goto label06;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 != 0 goto label05;

        if i10 >= i0 goto label05;

        $c9 = r1[i10];

        $i18 = (int) $c9;

        if $i18 != 10 goto label04;

        i10 = i10 + 1;

     label04:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i10);

        goto label11;

     label05:
        $i20 = (int) -1;

        i10 = i10 + $i20;

        goto label12;

     label06:
        $i21 = (int) c11;

        if $i21 == 9 goto label11;

        $i22 = (int) c11;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i22);

        goto label11;

     label07:
        $i23 = (int) c11;

        if $i23 != 45 goto label11;

        $i3 = i10 + 1;

        if $i3 < i0 goto label08;

        $i25 = (int) -1;

        i10 = i10 + $i25;

        goto label12;

     label08:
        $c4 = r1[i10];

        $i26 = (int) $c4;

        if $i26 == 45 goto label09;

        goto label01;

     label09:
        $i5 = i10 + 1;

        c12 = r1[$i5];

        $i27 = (int) c12;

        if $i27 == 62 goto label10;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("String \'--\' not allowed in comment (missing \'>\'?)");

     label10:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i6 = i10 - i1;

        $i7 = $i6 - 1;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>(r1, i1, $i7);

        $i8 = i10 + 2;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i8;

        return;

     label11:
        goto label01;

     label12:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i10;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i13 = i10 - i1;

        virtualinvoke $r3.<com.ctc.wstx.util.TextBuffer: void resetWithCopy(char[],int,int)>(r1, i1, $i13);

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readComment2(com.ctc.wstx.util.TextBuffer)>($r4);

        return;
    }

    private void readComment2(com.ctc.wstx.util.TextBuffer) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r3, $r4, $r6, $r8, r11;
        boolean $z0, $z1, $z2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9, i10, i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.String $r7;
        char $c3, $c6, $c12, c13;
        char[] $r2, $r5, $r9, $r10, r12;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r11 := @parameter0: com.ctc.wstx.util.TextBuffer;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        r12 = $r2;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        i10 = virtualinvoke $r3.<com.ctc.wstx.util.TextBuffer: int getCurrentSegmentSize()>();

        i11 = lengthof $r2;

     label01:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label02;

        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i9;

        $c12 = $r10[$i8];

        goto label03;

     label02:
        $c12 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in comment");

     label03:
        c13 = $c12;

        $i14 = (int) $c12;

        if $i14 >= 32 goto label09;

        $i15 = (int) $c12;

        if $i15 != 10 goto label04;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label11;

     label04:
        $i16 = (int) $c12;

        if $i16 != 13 goto label08;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>($c12);

        if $z0 == 0 goto label07;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z2 != 0 goto label06;

        if i10 < i11 goto label05;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r9 = virtualinvoke $r8.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        r12 = $r9;

        i11 = lengthof $r9;

        i10 = 0;

     label05:
        $i7 = i10;

        i10 = i10 + 1;

        r12[$i7] = c13;

     label06:
        c13 = 10;

        goto label11;

     label07:
        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label11;

        c13 = 10;

        goto label11;

     label08:
        $i17 = (int) $c12;

        if $i17 == 9 goto label11;

        $i18 = (int) $c12;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i18);

        goto label11;

     label09:
        $i19 = (int) $c12;

        if $i19 != 45 goto label11;

        $c3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in comment");

        $i20 = (int) $c3;

        if $i20 != 45 goto label10;

        $c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in comment");

        $i21 = (int) $c6;

        if $i21 == 62 goto label13;

        $r7 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_HYPHENS_IN_COMMENT>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r7);

        goto label13;

     label10:
        c13 = 45;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i5;

     label11:
        if i10 < i11 goto label12;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r5 = virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        r12 = $r5;

        i11 = lengthof $r5;

        i10 = 0;

     label12:
        $i2 = i10;

        i10 = i10 + 1;

        r12[$i2] = c13;

        goto label01;

     label13:
        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r6.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i10);

        return;
    }

    private final int readPIPrimary() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.api.ReaderConfig $r5;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i10, $i11, $i12, $i13;
        java.lang.String $r1, $r3, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        char $c3, $c6, $c8, c9;
        char[] $r4;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        $r1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String parseFullName()>();

        r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String mCurrName> = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r7 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_WF_PI_MISSING_TARGET>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r7);

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("xml");

        if $z0 == 0 goto label4;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.api.ReaderConfig mConfig>;

        $z2 = virtualinvoke $r5.<com.ctc.wstx.api.ReaderConfig: boolean inputParsingModeDocuments()>();

        if $z2 != 0 goto label2;

        $r6 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_WF_PI_XML_TARGET>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String,java.lang.Object)>($r6, $r1);

     label2:
        $c6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in xml declaration");

        $z3 = staticinvoke <com.ctc.wstx.sr.BasicStreamReader: boolean isSpaceChar(char)>($c6);

        if $z3 != 0 goto label3;

        $i10 = (int) $c6;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i10, "excepted a space in xml declaration after \'xml\'");

     label3:
        $i7 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int handleMultiDocStart(int)>(7);

        return $i7;

     label4:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i2 >= $i1 goto label5;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i5;

        $c8 = $r4[$i4];

        goto label6;

     label5:
        $c8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in processing instruction");

     label6:
        c9 = $c8;

        $z1 = staticinvoke <com.ctc.wstx.sr.BasicStreamReader: boolean isSpaceChar(char)>($c8);

        if $z1 == 0 goto label7;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipWS(char)>($c8);

        goto label9;

     label7:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void resetWithEmpty()>();

        $i11 = (int) $c8;

        if $i11 != 63 goto label8;

        $c3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in processing instruction");

        $i12 = (int) $c3;

        if $i12 == 62 goto label9;

     label8:
        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_WF_PI_XML_MISSING_SPACE>;

        $i13 = (int) c9;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i13, $r3);

     label9:
        return 3;
    }

    private void readPI() throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r2, $r3, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int i0, i1, $i2, $i3, $i4, $i5, i7, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i25;
        boolean $z0;
        char $c6, c8, c9;
        char[] r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i0 = i7;

        r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

     label01:
        if i7 >= i1 goto label11;

        $i2 = i7;

        i7 = i7 + 1;

        c8 = r1[$i2];

        $i11 = (int) c8;

        if $i11 >= 32 goto label06;

        $i12 = (int) c8;

        if $i12 != 10 goto label02;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i7);

        goto label10;

     label02:
        $i13 = (int) c8;

        if $i13 != 13 goto label05;

        if i7 >= i1 goto label04;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 != 0 goto label04;

        $c6 = r1[i7];

        $i14 = (int) $c6;

        if $i14 != 10 goto label03;

        i7 = i7 + 1;

     label03:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i7);

        goto label10;

     label04:
        $i16 = (int) -1;

        i7 = i7 + $i16;

        goto label11;

     label05:
        $i17 = (int) c8;

        if $i17 == 9 goto label10;

        $i18 = (int) c8;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i18);

        goto label10;

     label06:
        $i19 = (int) c8;

        if $i19 != 63 goto label10;

     label07:
        if i7 < i1 goto label08;

        $i21 = (int) -1;

        i7 = i7 + $i21;

        goto label11;

     label08:
        $i3 = i7;

        i7 = i7 + 1;

        c9 = r1[$i3];

        $i22 = (int) c9;

        if $i22 != 62 goto label09;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i7;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i4 = i7 - i0;

        $i5 = $i4 - 2;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>(r1, i0, $i5);

        return;

     label09:
        $i23 = (int) c9;

        if $i23 == 63 goto label07;

        $i25 = (int) -1;

        i7 = i7 + $i25;

        goto label10;

     label10:
        goto label01;

     label11:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i7;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i10 = i7 - i0;

        virtualinvoke $r3.<com.ctc.wstx.util.TextBuffer: void resetWithCopy(char[],int,int)>(r1, i0, $i10);

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void readPI2(com.ctc.wstx.util.TextBuffer)>($r4);

        return;
    }

    private void readPI2(com.ctc.wstx.util.TextBuffer) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer r1, $r3;
        boolean $z0, $z1, $z2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        char $c12, c16, $c17, c18;
        char[] $r2, r4, r5;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: com.ctc.wstx.util.TextBuffer;

        r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        i14 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r5 = virtualinvoke r1.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        i15 = virtualinvoke r1.<com.ctc.wstx.util.TextBuffer: int getCurrentSegmentSize()>();

     label01:
        if i14 < i13 goto label02;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMoreFromCurrent(java.lang.String)>(" in processing instruction");

        r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i14 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

     label02:
        $i0 = i14;

        i14 = i14 + 1;

        $c12 = r4[$i0];

        c16 = $c12;

        $i20 = (int) $c12;

        if $i20 >= 32 goto label09;

        $i21 = (int) $c12;

        if $i21 != 10 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i14);

        goto label16;

     label03:
        $i22 = (int) $c12;

        if $i22 != 13 goto label08;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i14;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>($c12);

        if $z0 == 0 goto label06;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z2 != 0 goto label05;

        $i10 = lengthof r5;

        if i15 < $i10 goto label04;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r5 = virtualinvoke $r3.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label04:
        $i11 = i15;

        i15 = i15 + 1;

        r5[$i11] = $c12;

     label05:
        c16 = 10;

        goto label07;

     label06:
        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label07;

        c16 = 10;

     label07:
        i14 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        goto label16;

     label08:
        $i23 = (int) $c12;

        if $i23 == 9 goto label16;

        $i24 = (int) $c12;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i24);

        goto label16;

     label09:
        $i25 = (int) $c12;

        if $i25 != 63 goto label16;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i14;

     label10:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i3 >= $i2 goto label11;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i9;

        $c17 = $r2[$i8];

        goto label12;

     label11:
        $c17 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in processing instruction");

     label12:
        c18 = $c17;

        $i26 = (int) $c17;

        if $i26 != 62 goto label13;

        goto label18;

     label13:
        $i27 = (int) $c17;

        if $i27 != 63 goto label15;

        $i6 = lengthof r5;

        if i15 < $i6 goto label14;

        r5 = virtualinvoke r1.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label14:
        $i7 = i15;

        i15 = i15 + 1;

        r5[$i7] = c18;

        goto label10;

     label15:
        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = $i4 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i5;

        i14 = $i5;

        r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        c16 = 63;

        goto label16;

     label16:
        $i19 = lengthof r5;

        if i15 < $i19 goto label17;

        r5 = virtualinvoke r1.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i15 = 0;

     label17:
        $i1 = i15;

        i15 = i15 + 1;

        r5[$i1] = c16;

        goto label01;

     label18:
        virtualinvoke r1.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i15);

        return;
    }

    private void readCoalescedText(int, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r15;
        com.ctc.wstx.util.TextBuffer $r4, $r5;
        javax.xml.stream.XMLStreamException $r6;
        boolean z0, $z1, $z2, z3;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r9, $r11, $r12, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21;
        java.lang.String $r10, $r13;
        char $c9, $c12, $c15;
        char[] $r1, $r2, $r3;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 == 4 goto label01;

        if i0 != 6 goto label02;

     label01:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readTextSecondary(int,boolean)>(2147483647, z0);

        z3 = 0;

        goto label05;

     label02:
        if i0 != 12 goto label04;

        $i17 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState>;

        if $i17 > 2 goto label03;

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readCDataSecondary(int)>(2147483647);

     label03:
        z3 = 1;

        goto label05;

     label04:
        $r15 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error: unexpected token ");

        $i16 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r10 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i16);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; expected CHARACTERS, CDATA or SPACE.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r15;

     label05:
        if z0 == 0 goto label06;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException>;

        if $r6 != null goto label13;

     label06:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i2 < $i1 goto label07;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r5.<com.ctc.wstx.util.TextBuffer: void ensureNotShared()>();

        $z2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMore()>();

        if $z2 != 0 goto label07;

        goto label13;

     label07:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $c15 = $r1[$i3];

        $i18 = (int) $c15;

        if $i18 != 60 goto label10;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = $i5 - $i4;

        if $i6 >= 3 goto label08;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: void ensureNotShared()>();

        $z1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean ensureInput(int)>(3);

        if $z1 != 0 goto label08;

        goto label13;

     label08:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = $i7 + 1;

        $c9 = $r2[$i8];

        $i19 = (int) $c9;

        if $i19 != 33 goto label13;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i11 = $i10 + 2;

        $c12 = $r3[$i11];

        $i20 = (int) $c12;

        if $i20 == 91 goto label09;

        goto label13;

     label09:
        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = $i13 + 3;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i14;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void checkCData()>();

        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readCDataSecondary(int)>(2147483647);

        z3 = 1;

        goto label12;

     label10:
        $i21 = (int) $c15;

        if $i21 != 38 goto label11;

        if z3 != 0 goto label11;

        goto label13;

     label11:
        specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean readTextSecondary(int,boolean)>(2147483647, z0);

        z3 = 0;

     label12:
        goto label05;

     label13:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        return;
    }

    private final boolean readCDataPrimary(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r2, $r4;
        byte $b14;
        boolean $z0, $z1;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i9, $i10, $i11, $i12, i15, i16, i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i37, $i38, $i39, $i41;
        char $c4, $c7, $c8, c13, c17;
        char[] $r3;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c13 := @parameter0: char;

        $i20 = (int) c13;

        if $i20 > 32 goto label01;

        $b14 = 0;

        goto label02;

     label01:
        $b14 = 2;

     label02:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus> = $b14;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i15 = $i10;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i12 = $i10 - 1;

     label03:
        $i21 = (int) c13;

        if $i21 >= 32 goto label10;

        $i22 = (int) c13;

        if $i22 != 10 goto label04;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i15);

        goto label15;

     label04:
        $i23 = (int) c13;

        if $i23 != 13 goto label09;

        if i15 < $i11 goto label05;

        $i25 = (int) -1;

        i15 = i15 + $i25;

        goto label17;

     label05:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 == 0 goto label07;

        $c8 = $r3[i15];

        $i26 = (int) $c8;

        if $i26 != 10 goto label06;

        $i28 = (int) -1;

        i15 = i15 + $i28;

        goto label17;

     label06:
        $i9 = i15 - 1;

        $r3[$i9] = 10;

        goto label08;

     label07:
        $c7 = $r3[i15];

        $i29 = (int) $c7;

        if $i29 != 10 goto label08;

        i15 = i15 + 1;

     label08:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i15);

        goto label15;

     label09:
        $i30 = (int) c13;

        if $i30 == 9 goto label15;

        $i31 = (int) c13;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i31);

        goto label15;

     label10:
        $i32 = (int) c13;

        if $i32 != 93 goto label15;

        $i3 = i15 + 1;

        if $i3 < $i11 goto label11;

        $i34 = (int) -1;

        i15 = i15 + $i34;

        goto label17;

     label11:
        $c4 = $r3[i15];

        $i35 = (int) $c4;

        if $i35 != 93 goto label15;

        i16 = i15 + 1;

     label12:
        if i16 < $i11 goto label13;

        $i37 = (int) -2;

        i15 = i16 + $i37;

        goto label15;

     label13:
        $i5 = i16;

        i16 = i16 + 1;

        c17 = $r3[$i5];

        $i38 = (int) c17;

        if $i38 != 62 goto label14;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i16;

        $i6 = $i12 + 3;

        i18 = i16 - $i6;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r3, $i12, i18);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        return 1;

     label14:
        $i39 = (int) c17;

        if $i39 == 93 goto label12;

        $i41 = (int) -1;

        i15 = i16 + $i41;

        goto label15;

     label15:
        if i15 < $i11 goto label16;

        goto label17;

     label16:
        $i0 = i15;

        i15 = i15 + 1;

        c13 = $r3[$i0];

        goto label03;

     label17:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i15;

        $i19 = i15 - $i12;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r3, $i12, $i19);

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z1 != 0 goto label18;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i1 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: int size()>();

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment>;

        if $i1 >= $i2 goto label19;

     label18:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 1;

        goto label20;

     label19:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 2;

     label20:
        return 0;
    }

    private boolean readCDataSecondary(int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r2, r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i9, i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        char $c6, c11;
        char[] r7, r8;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i7 := @parameter0: int;

        r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r8 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        i10 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: int getCurrentSegmentSize()>();

     label01:
        if i9 < i8 goto label02;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMore(java.lang.String)>(" in CDATA section");

        r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

     label02:
        $i0 = i9;

        i9 = i9 + 1;

        $c6 = r7[$i0];

        c11 = $c6;

        $i14 = (int) $c6;

        if $i14 >= 32 goto label08;

        $i15 = (int) $c6;

        if $i15 != 10 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i9);

        goto label10;

     label03:
        $i16 = (int) $c6;

        if $i16 != 13 goto label07;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i9;

        $z2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>($c6);

        if $z2 == 0 goto label05;

        $z4 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z4 != 0 goto label04;

        $i4 = i10;

        i10 = i10 + 1;

        r8[$i4] = $c6;

        $i5 = lengthof r8;

        if i10 < $i5 goto label04;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r8 = virtualinvoke $r6.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i10 = 0;

     label04:
        c11 = 10;

        goto label06;

     label05:
        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z3 == 0 goto label06;

        c11 = 10;

     label06:
        i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        goto label10;

     label07:
        $i17 = (int) $c6;

        if $i17 == 9 goto label10;

        $i18 = (int) $c6;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i18);

        goto label10;

     label08:
        $i19 = (int) $c6;

        if $i19 != 93 goto label10;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i9;

        $z1 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean checkCDataEnd(char[],int)>(r8, i10);

        if $z1 == 0 goto label09;

        return 1;

     label09:
        i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r8 = virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        i10 = virtualinvoke $r5.<com.ctc.wstx.util.TextBuffer: int getCurrentSegmentSize()>();

        goto label01;

     label10:
        $i12 = i10;

        i10 = i10 + 1;

        r8[$i12] = c11;

        $i13 = lengthof r8;

        if i10 < $i13 goto label12;

        r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgCoalesceText>;

        if $z0 != 0 goto label11;

        $i1 = lengthof r8;

        virtualinvoke r3.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>($i1);

        $i2 = virtualinvoke r3.<com.ctc.wstx.util.TextBuffer: int size()>();

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mShortestTextSegment>;

        if $i2 < $i3 goto label11;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i9;

        return 0;

     label11:
        r8 = virtualinvoke r3.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i10 = 0;

     label12:
        goto label01;
    }

    private boolean checkCDataEnd(char[], int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11, $i12, $i14, $i16;
        boolean z0, $z2, $z3;
        char $c10;
        char[] $r3, r4;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r4 := @parameter0: char[];

        i8 := @parameter1: int;

        i9 = 0;

     label1:
        i9 = i9 + 1;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label2;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i7 = $i6 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i7;

        $c10 = $r3[$i6];

        goto label3;

     label2:
        $c10 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in CDATA section");

     label3:
        $i11 = (int) $c10;

        if $i11 == 93 goto label1;

        if i9 < 2 goto label4;

        $i12 = (int) $c10;

        if $i12 != 62 goto label4;

        $z3 = 1;

        $z2 = 1;

        goto label5;

     label4:
        $z3 = 0;

        $z2 = 0;

     label5:
        z0 = $z2;

        if $z3 == 0 goto label6;

        $i14 = (int) -2;

        i9 = i9 + $i14;

     label6:
        if i9 <= 0 goto label7;

        $i16 = (int) -1;

        i9 = i9 + $i16;

        $i4 = i8;

        i8 = i8 + 1;

        r4[$i4] = 93;

        $i5 = lengthof r4;

        if i8 < $i5 goto label6;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r4 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i8 = 0;

        goto label6;

     label7:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i8);

        if z0 == 0 goto label8;

        return 1;

     label8:
        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = $i2 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i3;

        return 0;
    }

    private final boolean readTextPrimary(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r4, $r6, $r11;
        boolean $z0, $z1, $z2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15, $i16, $i17, i20, i21, i22, $i23, i24, $i25, $i26, $i28, $i30, $i31, $i33, $i34, $i36, $i37, $i38;
        com.ctc.wstx.exc.WstxException $r3, $r5;
        java.lang.String $r2;
        char $c3, $c5, $c11, $c12, $c18, c19;
        char[] $r7, $r8, $r9, $r10;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c19 := @parameter0: char;

        i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i21 = i20 - 1;

        if c19 > 32 goto label06;

        i22 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if i20 >= i22 goto label05;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label05;

        if c19 != 13 goto label02;

        c19 = 10;

        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $c18 = $r9[i20];

        $i26 = (int) $c18;

        if $i26 != 10 goto label01;

        i21 = i21 + 1;

        i20 = i20 + 1;

        if i20 < i22 goto label03;

        goto label05;

     label01:
        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $r10[i21] = 10;

        goto label03;

     label02:
        if c19 == 10 goto label03;

        goto label05;

     label03:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i20);

        $i23 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation>;

        if $i23 <= 0 goto label04;

        $i17 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readIndentation(char,int)>(c19, i20);

        i20 = $i17;

        if $i17 >= 0 goto label04;

        return 1;

     label04:
        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i16 = i20;

        i20 = i20 + 1;

        c19 = $r8[$i16];

     label05:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus> = 0;

        goto label07;

     label06:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus> = 2;

     label07:
        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

     label08:
        if c19 >= 63 goto label20;

        if c19 != 60 goto label09;

        $i28 = (int) -1;

        i24 = i20 + $i28;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i24;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i14 = i24 - i21;

        virtualinvoke $r6.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r7, i21, $i14);

        return 1;

     label09:
        if c19 >= 32 goto label18;

        if c19 != 10 goto label10;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i20);

        goto label20;

     label10:
        if c19 != 13 goto label15;

        if i20 < $i15 goto label11;

        $i30 = (int) -1;

        i20 = i20 + $i30;

        goto label22;

     label11:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 == 0 goto label13;

        $c12 = $r7[i20];

        $i31 = (int) $c12;

        if $i31 != 10 goto label12;

        $i33 = (int) -1;

        i20 = i20 + $i33;

        goto label22;

     label12:
        $i13 = i20 - 1;

        $r7[$i13] = 10;

        goto label14;

     label13:
        $c11 = $r7[i20];

        $i34 = (int) $c11;

        if $i34 != 10 goto label14;

        i20 = i20 + 1;

     label14:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i20);

        goto label20;

     label15:
        if c19 == 9 goto label20;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i20;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i8 = i20 - i21;

        $i9 = $i8 - 1;

        virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r7, i21, $i9);

        $i10 = i20 - i21;

        if $i10 <= 1 goto label16;

        $z2 = 1;

        goto label17;

     label16:
        $z2 = 0;

     label17:
        $r5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.exc.WstxException throwInvalidSpace(int,boolean)>(c19, $z2);

        r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = $r5;

        return 1;

     label18:
        if c19 != 38 goto label19;

        $i36 = (int) -1;

        i20 = i20 + $i36;

        goto label22;

     label19:
        if c19 != 62 goto label20;

        $i1 = i20 - i21;

        if $i1 < 3 goto label20;

        $i2 = i20 - 3;

        $c3 = $r7[$i2];

        $i37 = (int) $c3;

        if $i37 != 93 goto label20;

        $i4 = i20 - 2;

        $c5 = $r7[$i4];

        $i38 = (int) $c5;

        if $i38 != 93 goto label20;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i20;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i6 = i20 - i21;

        $i7 = $i6 - 1;

        virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r7, i21, $i7);

        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_BRACKET_IN_TEXT>;

        $r3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.exc.WstxException throwWfcException(java.lang.String,boolean)>($r2, 1);

        r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = $r3;

        return 1;

     label20:
        if i20 < $i15 goto label21;

        goto label22;

     label21:
        $i0 = i20;

        i20 = i20 + 1;

        c19 = $r7[$i0];

        goto label08;

     label22:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i20;

        $r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i25 = i20 - i21;

        virtualinvoke $r11.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r7, i21, $i25);

        return 0;
    }

    private final boolean readTextSecondary(int, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r2, r3, $r4, $r7, $r9, $r12;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, i3, $i4, $i6, $i9, $i10, $i11, $i14, $i15, $i16, i18, i19, i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        com.ctc.wstx.exc.WstxException $r6, $r8;
        java.lang.String $r5;
        char $c5, $c7, $c8, $c12, $c13, $c17, c21;
        char[] r10, r11;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r10 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        i18 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: int getCurrentSegmentSize()>();

        i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

     label01:
        if i19 < i20 goto label03;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i19;

        $z5 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMore()>();

        if $z5 != 0 goto label02;

        goto label18;

     label02:
        i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

     label03:
        $i0 = i19;

        i19 = i19 + 1;

        $c17 = r11[$i0];

        c21 = $c17;

        $i24 = (int) $c17;

        if $i24 >= 63 goto label15;

        $i25 = (int) $c17;

        if $i25 >= 32 goto label09;

        $i26 = (int) $c17;

        if $i26 != 10 goto label04;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i19);

        goto label15;

     label04:
        $i27 = (int) $c17;

        if $i27 != 13 goto label08;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i19;

        $z2 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>($c17);

        if $z2 == 0 goto label06;

        $z4 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z4 != 0 goto label05;

        $i15 = i18;

        i18 = i18 + 1;

        r10[$i15] = $c17;

        $i16 = lengthof r10;

        if i18 < $i16 goto label05;

        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r10 = virtualinvoke $r9.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i18 = 0;

     label05:
        c21 = 10;

        goto label07;

     label06:
        $z3 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z3 == 0 goto label07;

        c21 = 10;

     label07:
        i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        goto label15;

     label08:
        $i28 = (int) $c17;

        if $i28 == 9 goto label15;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r7.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i18);

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i19;

        $i29 = (int) $c17;

        $r8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.exc.WstxException throwInvalidSpace(int,boolean)>($i29, z0);

        r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = $r8;

        goto label18;

     label09:
        $i30 = (int) $c17;

        if $i30 != 60 goto label10;

        $i14 = i19 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i14;

        goto label18;

     label10:
        $i31 = (int) $c17;

        if $i31 != 38 goto label14;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i19;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReplaceEntities>;

        if $z1 == 0 goto label12;

        $i11 = i20 - i19;

        if $i11 < 3 goto label11;

        $c13 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveSimpleEntity(boolean)>(1);

        c21 = $c13;

        if $c13 == 0 goto label11;

        goto label13;

     label11:
        $c12 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char fullyResolveEntity(boolean)>(1);

        c21 = $c12;

        if $c12 != 0 goto label13;

        r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        goto label01;

     label12:
        $c8 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveCharOnlyEntity(boolean)>(1);

        c21 = $c8;

        if $c8 != 0 goto label13;

        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i10 = $i9 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i10;

        goto label18;

     label13:
        i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i20 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        goto label15;

     label14:
        $i32 = (int) $c17;

        if $i32 != 62 goto label15;

        if i19 <= 2 goto label15;

        $i4 = i19 - 3;

        $c5 = r11[$i4];

        $i33 = (int) $c5;

        if $i33 != 93 goto label15;

        $i6 = i19 - 2;

        $c7 = r11[$i6];

        $i34 = (int) $c7;

        if $i34 != 93 goto label15;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i19;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i18);

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_BRACKET_IN_TEXT>;

        $r6 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.exc.WstxException throwWfcException(java.lang.String,boolean)>($r5, z0);

        r0.<com.ctc.wstx.sr.BasicStreamReader: javax.xml.stream.XMLStreamException mPendingException> = $r6;

        goto label18;

     label15:
        $i22 = i18;

        i18 = i18 + 1;

        r10[$i22] = c21;

        $i23 = lengthof r10;

        if i18 < $i23 goto label17;

        r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i1 = lengthof r10;

        virtualinvoke r3.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>($i1);

        $i2 = virtualinvoke r3.<com.ctc.wstx.util.TextBuffer: int size()>();

        if $i2 < i3 goto label16;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i19;

        return 0;

     label16:
        r10 = virtualinvoke r3.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i18 = 0;

     label17:
        goto label01;

     label18:
        $r12 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r12.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i18);

        return 1;
    }

    private final int readIndentation(char, int) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r2;
        byte $b15;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int i0, i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13, i16, i17, i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i30, $i31, $i33, $i34, $i36, $i38, $i40, $i41;
        char c3, $c4, c11, c14;
        char[] r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c11 := @parameter0: char;

        i12 := @parameter1: int;

        i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i1 = i12 - 1;

        i13 = i12 + 1;

        c14 = r1[i12];

        $i21 = (int) c14;

        if $i21 == 32 goto label01;

        $i22 = (int) c14;

        if $i22 != 9 goto label09;

     label01:
        $i23 = (int) c14;

        if $i23 != 32 goto label02;

        $b15 = 32;

        goto label03;

     label02:
        $b15 = 8;

     label03:
        $i10 = $b15 + i13;

        i16 = $i10;

        if $i10 <= i0 goto label04;

        i16 = i0;

     label04:
        if i13 < i16 goto label05;

        $i25 = (int) -1;

        i17 = i13 + $i25;

        goto label13;

     label05:
        $i2 = i13;

        i13 = i13 + 1;

        c3 = r1[$i2];

        $i26 = (int) c3;

        $i27 = (int) c14;

        if $i26 == $i27 goto label07;

        $i28 = (int) c3;

        if $i28 != 60 goto label06;

        goto label08;

     label06:
        $i30 = (int) -1;

        i17 = i13 + $i30;

        goto label13;

     label07:
        goto label04;

     label08:
        goto label10;

     label09:
        $i31 = (int) c14;

        if $i31 == 60 goto label10;

        $i33 = (int) -1;

        i17 = i13 + $i33;

        goto label13;

     label10:
        if i13 >= i0 goto label12;

        $c4 = r1[i13];

        $i34 = (int) $c4;

        if $i34 == 33 goto label12;

        $i36 = (int) -1;

        i18 = i13 + $i36;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i18;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i5 = i18 - i1;

        $i6 = $i5 - 1;

        virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: void resetWithIndentation(int,char)>($i6, c14);

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation>;

        if $i7 >= 40 goto label11;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation>;

        $i9 = $i8 + 16;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation> = $i9;

     label11:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mWsStatus> = 1;

        $i38 = (int) -1;

        return $i38;

     label12:
        $i40 = (int) -1;

        i17 = i13 + $i40;

     label13:
        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation>;

        $i20 = $i19 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mCheckIndentation> = $i20;

        $i41 = (int) c11;

        if $i41 != 13 goto label14;

        r1[i1] = 10;

     label14:
        return i17;
    }

    private final boolean readSpacePrimary(char, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r3, $r4;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int i0, i1, $i2, $i3, $i6, $i7, i9, i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i21, $i22, $i23, $i24, $i25;
        boolean $z0, z1;
        char $c4, $c5, c8;
        char[] r1, $r2;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c8 := @parameter0: char;

        z1 := @parameter1: boolean;

        i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        i1 = i9 - 1;

     label01:
        $i12 = (int) c8;

        if $i12 <= 32 goto label02;

        $i14 = (int) -1;

        i10 = i9 + $i14;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i10;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i7 = i10 - i1;

        virtualinvoke $r3.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>($r2, i1, $i7);

        return 1;

     label02:
        $i15 = (int) c8;

        if $i15 != 10 goto label03;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i9);

        goto label09;

     label03:
        $i16 = (int) c8;

        if $i16 != 13 goto label08;

        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if i9 < $i3 goto label04;

        $i18 = (int) -1;

        i9 = i9 + $i18;

        goto label11;

     label04:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 == 0 goto label06;

        $c5 = r1[i9];

        $i19 = (int) $c5;

        if $i19 != 10 goto label05;

        $i21 = (int) -1;

        i9 = i9 + $i21;

        goto label11;

     label05:
        $i6 = i9 - 1;

        r1[$i6] = 10;

        goto label07;

     label06:
        $c4 = r1[i9];

        $i22 = (int) $c4;

        if $i22 != 10 goto label07;

        i9 = i9 + 1;

     label07:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF(int)>(i9);

        goto label09;

     label08:
        $i23 = (int) c8;

        if $i23 == 32 goto label09;

        $i24 = (int) c8;

        if $i24 == 9 goto label09;

        $i25 = (int) c8;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i25);

     label09:
        if i9 < i0 goto label10;

        goto label11;

     label10:
        $i2 = i9;

        i9 = i9 + 1;

        c8 = r1[$i2];

        goto label01;

     label11:
        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = i9;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        $i11 = i9 - i1;

        virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: void resetWithShared(char[],int,int)>(r1, i1, $i11);

        return 0;
    }

    private void readSpaceSecondary(boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.util.TextBuffer $r1, $r2, $r4, $r5, $r6;
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean $z0, $z1, $z2, $z3, z4;
        char $c7, c9;
        char[] $r3, r7;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        z4 := @parameter0: boolean;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r7 = virtualinvoke $r1.<com.ctc.wstx.util.TextBuffer: char[] getCurrentSegment()>();

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        i8 = virtualinvoke $r2.<com.ctc.wstx.util.TextBuffer: int getCurrentSegmentSize()>();

     label01:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 < $i0 goto label02;

        $z3 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMore()>();

        if $z3 != 0 goto label02;

        goto label10;

     label02:
        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $c7 = $r3[$i2];

        c9 = $c7;

        $i12 = (int) $c7;

        if $i12 <= 32 goto label03;

        goto label10;

     label03:
        $i3 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i4 = $i3 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i4;

        $i13 = (int) $c7;

        if $i13 != 10 goto label04;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label08;

     label04:
        $i14 = (int) $c7;

        if $i14 != 13 goto label07;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>($c7);

        if $z0 == 0 goto label06;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z2 != 0 goto label05;

        $i5 = i8;

        i8 = i8 + 1;

        r7[$i5] = $c7;

        $i6 = lengthof r7;

        if i8 < $i6 goto label05;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r7 = virtualinvoke $r5.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i8 = 0;

     label05:
        c9 = 10;

        goto label08;

     label06:
        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label08;

        c9 = 10;

        goto label08;

     label07:
        $i15 = (int) $c7;

        if $i15 == 32 goto label08;

        $i16 = (int) $c7;

        if $i16 == 9 goto label08;

        $i17 = (int) $c7;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i17);

     label08:
        $i10 = i8;

        i8 = i8 + 1;

        r7[$i10] = c9;

        $i11 = lengthof r7;

        if i8 < $i11 goto label09;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        r7 = virtualinvoke $r4.<com.ctc.wstx.util.TextBuffer: char[] finishCurrentSegment()>();

        i8 = 0;

     label09:
        goto label01;

     label10:
        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.util.TextBuffer mTextBuffer>;

        virtualinvoke $r6.<com.ctc.wstx.util.TextBuffer: void setCurrentLength(int)>(i8);

        return;
    }

    private int readAndWriteText(java.io.Writer) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.String $r4;
        char[] $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2;
        java.io.Writer r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, i37, i38, i39, i41, i43, i44, i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59;
        char $c7, $c10, $c14, $c21, c40, c42, c45;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r5 := @parameter0: java.io.Writer;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        i37 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i38 = 0;

     label01:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 < $i0 goto label03;

        $i35 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i39 = $i35 - i37;

        if i39 <= 0 goto label02;

        $r13 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>($r13, i37, i39);

        i38 = i38 + i39;

     label02:
        c40 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in document text content");

        $i36 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i37 = $i36 - 1;

        goto label04;

     label03:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i3;

        c40 = $r1[$i2];

     label04:
        $i47 = (int) c40;

        if $i47 >= 63 goto label23;

        $i48 = (int) c40;

        if $i48 >= 32 goto label13;

        $i49 = (int) c40;

        if $i49 != 10 goto label05;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label23;

     label05:
        $i50 = (int) c40;

        if $i50 != 13 goto label12;

        $i24 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i23 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i24 < $i23 goto label07;

        $i34 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i41 = $i34 - i37;

        if i41 <= 0 goto label06;

        $r12 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>($r12, i37, i41);

        i38 = i38 + i41;

     label06:
        c42 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in document text content");

        i37 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        goto label08;

     label07:
        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i25 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i26 = $i25 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i26;

        c42 = $r9[$i25];

     label08:
        $i51 = (int) c42;

        if $i51 != 10 goto label10;

        $z2 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z2 == 0 goto label11;

        $i31 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i32 = $i31 - 2;

        i43 = $i32 - i37;

        if i43 <= 0 goto label09;

        $r11 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>($r11, i37, i43);

        i38 = i38 + i43;

     label09:
        $i33 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i37 = $i33 - 1;

        goto label11;

     label10:
        $i27 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i28 = $i27 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i28;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label11;

        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i29 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i30 = $i29 - 1;

        $r10[$i30] = 10;

     label11:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label23;

     label12:
        $i52 = (int) c40;

        if $i52 == 9 goto label23;

        $i53 = (int) c40;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i53);

        goto label23;

     label13:
        $i54 = (int) c40;

        if $i54 != 60 goto label14;

        goto label24;

     label14:
        $i55 = (int) c40;

        if $i55 != 38 goto label20;

        $i12 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i13 = $i12 - 1;

        i44 = $i13 - i37;

        if i44 <= 0 goto label15;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>($r8, i37, i44);

        i38 = i38 + i44;

     label15:
        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgReplaceEntities>;

        if $z0 == 0 goto label17;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        $i18 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i20 = $i19 - $i18;

        if $i20 < 3 goto label16;

        $c21 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveSimpleEntity(boolean)>(1);

        c45 = $c21;

        if $c21 != 0 goto label18;

     label16:
        c45 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char fullyResolveEntity(boolean)>(1);

        goto label18;

     label17:
        $c14 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char resolveCharOnlyEntity(boolean)>(1);

        c45 = $c14;

        if $c14 != 0 goto label18;

        i37 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        goto label24;

     label18:
        if c45 == 0 goto label19;

        $i56 = (int) c45;

        virtualinvoke r5.<java.io.Writer: void write(int)>($i56);

        i38 = i38 + 1;

     label19:
        i37 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        goto label23;

     label20:
        $i57 = (int) c40;

        if $i57 != 62 goto label22;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        if $i4 < 2 goto label23;

        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = $i5 - 2;

        $c7 = $r2[$i6];

        $i58 = (int) $c7;

        if $i58 != 93 goto label23;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i8 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i9 = $i8 - 1;

        $c10 = $r3[$i9];

        $i59 = (int) $c10;

        if $i59 != 93 goto label23;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i46 = $i11 - i37;

        if i46 <= 0 goto label21;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>($r6, i37, i46);

     label21:
        $r4 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_BRACKET_IN_TEXT>;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r4);

        goto label23;

     label22:
        if c40 != 0 goto label23;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwNullChar()>();

     label23:
        goto label01;

     label24:
        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i16 = $i15 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i16;

        $i17 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i22 = $i17 - i37;

        if $i22 <= 0 goto label25;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r5.<java.io.Writer: void write(char[],int,int)>($r7, i37, $i22);

        i38 = i38 + $i22;

     label25:
        return i38;
    }

    private int readAndWriteCData(java.io.Writer) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        char[] $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, z3, $z4, $z5;
        java.io.Writer r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i25, $i26, i27, i28, i30, $i31, $i32, i33, i34, i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i50, $i52;
        char $c23, c24, c29, $c38;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r2 := @parameter0: java.io.Writer;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 3;

        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 >= $i0 goto label01;

        $r10 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i21 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i22 = $i21 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i22;

        $c23 = $r10[$i21];

        goto label02;

     label01:
        $c23 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in CDATA section");

     label02:
        c24 = $c23;

        i25 = 0;

     label03:
        $i26 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i27 = $i26 - 1;

     label04:
        $i39 = (int) c24;

        if $i39 <= 13 goto label05;

        $i40 = (int) c24;

        if $i40 != 93 goto label14;

        goto label17;

     label05:
        $i41 = (int) c24;

        if $i41 >= 32 goto label14;

        $i42 = (int) c24;

        if $i42 != 10 goto label06;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label14;

     label06:
        $i43 = (int) c24;

        if $i43 != 13 goto label13;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i6 < $i5 goto label08;

        $i16 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i28 = $i16 - i27;

        if i28 <= 0 goto label07;

        $r7 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r7, i27, i28);

        i25 = i25 + i28;

     label07:
        c29 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in CDATA section");

        i27 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        goto label09;

     label08:
        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = $i7 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i8;

        c29 = $r4[$i7];

     label09:
        $i44 = (int) c29;

        if $i44 != 10 goto label11;

        $z1 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z1 == 0 goto label12;

        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = $i13 - 2;

        i30 = $i14 - i27;

        if i30 <= 0 goto label10;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r6, i27, i30);

        i25 = i25 + i30;

     label10:
        $i15 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i27 = $i15 - 1;

        goto label12;

     label11:
        $i9 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i10 = $i9 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i10;

        $z0 = r0.<com.ctc.wstx.sr.BasicStreamReader: boolean mCfgNormalizeLFs>;

        if $z0 == 0 goto label12;

        $r5 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i11 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i12 = $i11 - 1;

        $r5[$i12] = 10;

     label12:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void markLF()>();

        goto label14;

     label13:
        $i45 = (int) c24;

        if $i45 == 9 goto label14;

        $i46 = (int) c24;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i46);

     label14:
        $i31 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i32 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i31 < $i32 goto label16;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        i33 = $i4 - i27;

        if i33 <= 0 goto label15;

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r3, i27, i33);

        i25 = i25 + i33;

     label15:
        i27 = 0;

        c24 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextChar(java.lang.String)>(" in CDATA section");

        goto label04;

     label16:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i3 = $i2 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i3;

        c24 = $r1[$i2];

        goto label04;

     label17:
        $i17 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i18 = $i17 - i27;

        i34 = $i18 - 1;

        if i34 <= 0 goto label18;

        $r9 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        virtualinvoke r2.<java.io.Writer: void write(char[],int,int)>($r9, i27, i34);

        i25 = i25 + i34;

     label18:
        i35 = 0;

     label19:
        i35 = i35 + 1;

        $i36 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i37 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i36 >= $i37 goto label20;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i19 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i20 = $i19 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i20;

        $c38 = $r8[$i19];

        goto label21;

     label20:
        $c38 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: char getNextCharFromCurrent(java.lang.String)>(" in CDATA section");

     label21:
        c24 = $c38;

        $i47 = (int) $c38;

        if $i47 == 93 goto label19;

        if i35 < 2 goto label22;

        $i48 = (int) $c38;

        if $i48 != 62 goto label22;

        $z5 = 1;

        $z4 = 1;

        goto label23;

     label22:
        $z5 = 0;

        $z4 = 0;

     label23:
        z3 = $z5;

        if $z4 == 0 goto label24;

        $i50 = (int) -2;

        i35 = i35 + $i50;

     label24:
        if i35 <= 0 goto label25;

        $i52 = (int) -1;

        i35 = i35 + $i52;

        virtualinvoke r2.<java.io.Writer: void write(int)>(93);

        i25 = i25 + 1;

        goto label24;

     label25:
        if z3 == 0 goto label26;

        goto label27;

     label26:
        goto label03;

     label27:
        return i25;
    }

    private int readAndWriteCoalesced(java.io.Writer, boolean) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i13, $i14, $i15, i17, $i18, $i19, $i20, $i21;
        boolean $z0, $z1, z2;
        char $c9, $c12, $c16;
        java.io.Writer r2;
        char[] $r1, $r3, $r4;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r2 := @parameter0: java.io.Writer;

        z2 := @parameter1: boolean;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mTokenState> = 4;

        i17 = 0;

     label1:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i1 < $i0 goto label2;

        $z1 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMore()>();

        if $z1 != 0 goto label2;

        goto label8;

     label2:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i2 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $c16 = $r1[$i2];

        $i18 = (int) $c16;

        if $i18 != 60 goto label5;

        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        $i4 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = $i5 - $i4;

        if $i6 >= 3 goto label3;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean ensureInput(int)>(3);

        if $z0 != 0 goto label3;

        goto label8;

     label3:
        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i7 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i8 = $i7 + 1;

        $c9 = $r3[$i8];

        $i19 = (int) $c9;

        if $i19 != 33 goto label8;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i10 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i11 = $i10 + 2;

        $c12 = $r4[$i11];

        $i20 = (int) $c12;

        if $i20 == 91 goto label4;

        goto label8;

     label4:
        $i13 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i14 = $i13 + 3;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i14;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void checkCData()>();

        $i15 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readAndWriteCData(java.io.Writer)>(r2);

        i17 = i17 + $i15;

        z2 = 1;

        goto label7;

     label5:
        $i21 = (int) $c16;

        if $i21 != 38 goto label6;

        if z2 != 0 goto label6;

        goto label8;

     label6:
        $i3 = specialinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: int readAndWriteText(java.io.Writer)>(r2);

        i17 = i17 + $i3;

        z2 = 0;

     label7:
        goto label1;

     label8:
        return i17;
    }

    protected final boolean skipWS(char) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0;
        char $c3, c4;
        char[] $r1;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c4 := @parameter0: char;

        $i7 = (int) c4;

        if $i7 <= 32 goto label1;

        return 0;

     label1:
        $i8 = (int) c4;

        if $i8 == 10 goto label2;

        $i9 = (int) c4;

        if $i9 != 13 goto label3;

     label2:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean skipCRLF(char)>(c4);

        goto label4;

     label3:
        $i10 = (int) c4;

        if $i10 == 32 goto label4;

        $i11 = (int) c4;

        if $i11 == 9 goto label4;

        $i12 = (int) c4;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwInvalidSpace(int)>($i12);

     label4:
        $i5 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i6 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputLen>;

        if $i5 < $i6 goto label5;

        $z0 = virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: boolean loadMoreFromCurrent()>();

        if $z0 != 0 goto label5;

        return 1;

     label5:
        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $c3 = $r1[$i0];

        c4 = $c3;

        $i13 = (int) $c3;

        if $i13 <= 32 goto label6;

        return 1;

     label6:
        $i1 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i2 = $i1 + 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i2;

        goto label1;
    }

    protected com.ctc.wstx.ent.EntityDecl findEntity(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.BasicStreamReader r0;
        com.ctc.wstx.ent.EntityDecl r11;
        java.util.Map $r1, $r4, $r6, $r8;
        int $i0;
        java.lang.Object $r7, $r9, r10;
        java.lang.String $r2, $r3, r5;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r5 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.Object;

        r11 = null;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.util.Map mCustomEntities>;

        if $r1 == null goto label1;

        $r8 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.util.Map mCustomEntities>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r11 = (com.ctc.wstx.ent.EntityDecl) $r9;

     label1:
        if r11 != null goto label2;

        $r4 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.util.Map mGeneralEntities>;

        if $r4 == null goto label2;

        $r6 = r0.<com.ctc.wstx.sr.BasicStreamReader: java.util.Map mGeneralEntities>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r11 = (com.ctc.wstx.ent.EntityDecl) $r7;

     label2:
        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone>;

        if $i0 != 1 goto label3;

        if r11 == null goto label3;

        $z0 = virtualinvoke r11.<com.ctc.wstx.ent.EntityDecl: boolean wasDeclaredExternally()>();

        if $z0 == 0 goto label3;

        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_WF_ENTITY_EXT_DECLARED>;

        $r3 = virtualinvoke r11.<com.ctc.wstx.ent.EntityDecl: java.lang.String getName()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String,java.lang.Object)>($r2, $r3);

     label3:
        return r11;
    }

    protected void handleUndeclaredEntity(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        java.lang.String r1, $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mDocStandalone>;

        if $i0 != 1 goto label1;

        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_WF_GE_UNDECLARED_SA>;

        goto label2;

     label1:
        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String ERR_WF_GE_UNDECLARED>;

     label2:
        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String,java.lang.Object)>($r2, r1);

        return;
    }

    protected void handleIncompleteEntityProblem(com.ctc.wstx.io.WstxInputSource) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.InputElementStack $r1, $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r4, $r7, $r8, $r9, $r10;
        java.lang.String $r6, $r11, $r12;
        com.ctc.wstx.io.WstxInputSource r5;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r5 := @parameter0: com.ctc.wstx.io.WstxInputSource;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r12 = "[ROOT]";

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r12 = virtualinvoke $r2.<com.ctc.wstx.sr.InputElementStack: java.lang.String getTopElementDesc()>();

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unexpected end of entity expansion for entity &");

        $r6 = virtualinvoke r5.<com.ctc.wstx.io.WstxInputSource: java.lang.String getEntityId()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; was expecting a close tag for element <");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r11);

        return;
    }

    protected char handleExpandedSurrogate(char, char)
    {
        int $i0, $i1;
        char[] $r1;
        char c2, c3;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c3 := @parameter0: char;

        c2 := @parameter1: char;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: char[] mInputBuffer>;

        $i0 = r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr>;

        $i1 = $i0 - 1;

        r0.<com.ctc.wstx.sr.BasicStreamReader: int mInputPtr> = $i1;

        $r1[$i1] = c2;

        return c3;
    }

    protected void handleGreedyEntityProblem(com.ctc.wstx.io.WstxInputSource) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sr.InputElementStack $r1, $r2;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r3, $r4, $r7, $r8, $r9, $r10;
        java.lang.String $r6, $r11, $r12;
        com.ctc.wstx.io.WstxInputSource r5;
        boolean $z0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        r5 := @parameter0: com.ctc.wstx.io.WstxInputSource;

        $r1 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $z0 = virtualinvoke $r1.<com.ctc.wstx.sr.InputElementStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r12 = "[ROOT]";

        goto label2;

     label1:
        $r2 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r12 = virtualinvoke $r2.<com.ctc.wstx.sr.InputElementStack: java.lang.String getTopElementDesc()>();

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Improper GE/element nesting: entity &");

        $r6 = virtualinvoke r5.<com.ctc.wstx.io.WstxInputSource: java.lang.String getEntityId()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" contains closing tag for <");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>($r11);

        return;
    }

    private void throwNotTextual(int)
    {
        java.lang.IllegalStateException $r0;
        com.ctc.wstx.sr.BasicStreamReader r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r6;
        int $i0, i1;
        java.lang.String $r4, $r7;

        r3 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Not a textual event (");

        $i0 = r3.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r4 = virtualinvoke r3.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r0;
    }

    private void throwNotTextXxx(int)
    {
        java.lang.IllegalStateException $r0;
        com.ctc.wstx.sr.BasicStreamReader r3;
        java.lang.StringBuffer $r1, $r2, $r5;
        int $i0, i1;
        java.lang.String $r4, $r6;

        r3 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i1 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("getTextXxx() methods can not be called on ");

        $i0 = r3.<com.ctc.wstx.sr.BasicStreamReader: int mCurrToken>;

        $r4 = virtualinvoke r3.<com.ctc.wstx.sr.BasicStreamReader: java.lang.String tokenTypeDesc(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    private void throwNotWS(char) throws com.ctc.wstx.exc.WstxException
    {
        char c0;
        com.ctc.wstx.sr.InputElementStack $r3;
        com.ctc.wstx.sr.BasicStreamReader r0;
        java.lang.StringBuffer $r2, $r5, $r6, $r8;
        int $i1;
        java.lang.String $r4, $r7;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        c0 := @parameter0: char;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; element <");

        $r3 = r0.<com.ctc.wstx.sr.BasicStreamReader: com.ctc.wstx.sr.InputElementStack mElementStack>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.sr.InputElementStack: java.lang.String getTopElementDesc()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("> does not allow mixed content");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $i1 = (int) c0;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwUnexpectedChar(int,java.lang.String)>($i1, $r7);

        return;
    }

    protected void reportInvalidContent(int) throws javax.xml.stream.XMLStreamException
    {
        int i0;
        com.ctc.wstx.sr.BasicStreamReader r0;

        r0 := @this: com.ctc.wstx.sr.BasicStreamReader;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.ctc.wstx.sr.BasicStreamReader: void throwParseError(java.lang.String)>("Internal error: sub-class should override method");

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;

        <com.ctc.wstx.sr.BasicStreamReader: int INDENT_CHECK_MAX> = 40;

        <com.ctc.wstx.sr.BasicStreamReader: int INDENT_CHECK_START> = 16;

        <com.ctc.wstx.sr.BasicStreamReader: int ALL_WS_NO> = 2;

        <com.ctc.wstx.sr.BasicStreamReader: int ALL_WS_YES> = 1;

        <com.ctc.wstx.sr.BasicStreamReader: int ALL_WS_UNKNOWN> = 0;

        <com.ctc.wstx.sr.BasicStreamReader: int MASK_GET_ELEMENT_TEXT> = 4688;

        <com.ctc.wstx.sr.BasicStreamReader: int MASK_GET_TEXT_WITH_WRITER> = 6776;

        <com.ctc.wstx.sr.BasicStreamReader: int MASK_GET_TEXT_XXX> = 4208;

        <com.ctc.wstx.sr.BasicStreamReader: int MASK_GET_TEXT> = 6768;

        <com.ctc.wstx.sr.BasicStreamReader: int TOKEN_FULL_COALESCED> = 4;

        <com.ctc.wstx.sr.BasicStreamReader: int TOKEN_FULL_SINGLE> = 3;

        <com.ctc.wstx.sr.BasicStreamReader: int TOKEN_PARTIAL_SINGLE> = 2;

        <com.ctc.wstx.sr.BasicStreamReader: int TOKEN_STARTED> = 1;

        <com.ctc.wstx.sr.BasicStreamReader: int TOKEN_NOT_STARTED> = 0;

        <com.ctc.wstx.sr.BasicStreamReader: int STATE_CLOSED> = 4;

        <com.ctc.wstx.sr.BasicStreamReader: int STATE_MULTIDOC_HACK> = 3;

        <com.ctc.wstx.sr.BasicStreamReader: int STATE_EPILOG> = 2;

        <com.ctc.wstx.sr.BasicStreamReader: int STATE_TREE> = 1;

        <com.ctc.wstx.sr.BasicStreamReader: int STATE_PROLOG> = 0;

        <com.ctc.wstx.sr.BasicStreamReader: int DOC_STANDALONE_NO> = 2;

        <com.ctc.wstx.sr.BasicStreamReader: int DOC_STANDALONE_YES> = 1;

        <com.ctc.wstx.sr.BasicStreamReader: int DOC_STANDALONE_UNKNOWN> = 0;

        <com.ctc.wstx.sr.BasicStreamReader: java.lang.String DEFAULT_NS_PREFIX> = null;

        $r0 = staticinvoke <com.ctc.wstx.util.DefaultXmlSymbolTable: java.lang.String getXmlSymbol()>();

        <com.ctc.wstx.sr.BasicStreamReader: java.lang.String sPrefixXml> = $r0;

        $r1 = staticinvoke <com.ctc.wstx.util.DefaultXmlSymbolTable: java.lang.String getXmlnsSymbol()>();

        <com.ctc.wstx.sr.BasicStreamReader: java.lang.String sPrefixXmlns> = $r1;

        return;
    }
}
