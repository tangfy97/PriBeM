public class org.springframework.core.io.InputStreamResource extends org.springframework.core.io.AbstractResource
{
    private final java.io.InputStream inputStream;
    private final java.lang.String description;
    private boolean read;

    public void <init>(java.io.InputStream)
    {
        org.springframework.core.io.InputStreamResource r0;
        java.io.InputStream r1;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.springframework.core.io.InputStreamResource: void <init>(java.io.InputStream,java.lang.String)>(r1, "resource loaded through InputStream");

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String)
    {
        org.springframework.core.io.InputStreamResource r0;
        java.lang.String r2, $r4;
        java.lang.IllegalArgumentException $r3;
        java.io.InputStream r1;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.springframework.core.io.AbstractResource: void <init>()>();

        r0.<org.springframework.core.io.InputStreamResource: boolean read> = 0;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream must not be null");

        throw $r3;

     label1:
        r0.<org.springframework.core.io.InputStreamResource: java.io.InputStream inputStream> = r1;

        if r2 == null goto label2;

        $r4 = r2;

        goto label3;

     label2:
        $r4 = "";

     label3:
        r0.<org.springframework.core.io.InputStreamResource: java.lang.String description> = $r4;

        return;
    }

    public boolean exists()
    {
        org.springframework.core.io.InputStreamResource r0;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        return 1;
    }

    public boolean isOpen()
    {
        org.springframework.core.io.InputStreamResource r0;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        return 1;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException, java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r2;
        org.springframework.core.io.InputStreamResource r0;
        boolean $z0;
        java.io.InputStream $r1;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        $z0 = r0.<org.springframework.core.io.InputStreamResource: boolean read>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("InputStream has already been read - do not use InputStreamResource if a stream needs to be read multiple times");

        throw $r2;

     label1:
        r0.<org.springframework.core.io.InputStreamResource: boolean read> = 1;

        $r1 = r0.<org.springframework.core.io.InputStreamResource: java.io.InputStream inputStream>;

        return $r1;
    }

    public java.lang.String getDescription()
    {
        java.lang.String $r1;
        org.springframework.core.io.InputStreamResource r0;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        $r1 = r0.<org.springframework.core.io.InputStreamResource: java.lang.String description>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.core.io.InputStreamResource r1, $r2;
        java.lang.Object r0;
        boolean $z0, $z1;
        java.io.InputStream $r3, $r4;

        r1 := @this: org.springframework.core.io.InputStreamResource;

        r0 := @parameter0: java.lang.Object;

        if r0 == r1 goto label2;

        $z0 = r0 instanceof org.springframework.core.io.InputStreamResource;

        if $z0 == 0 goto label1;

        $r2 = (org.springframework.core.io.InputStreamResource) r0;

        $r4 = $r2.<org.springframework.core.io.InputStreamResource: java.io.InputStream inputStream>;

        $r3 = r1.<org.springframework.core.io.InputStreamResource: java.io.InputStream inputStream>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public int hashCode()
    {
        int $i0;
        org.springframework.core.io.InputStreamResource r0;
        java.io.InputStream $r1;

        r0 := @this: org.springframework.core.io.InputStreamResource;

        $r1 = r0.<org.springframework.core.io.InputStreamResource: java.io.InputStream inputStream>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }
}
