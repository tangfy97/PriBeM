public abstract class com.hp.hpl.jena.sparql.algebra.op.OpN extends com.hp.hpl.jena.sparql.algebra.op.OpBase
{
    private java.util.List elements;

    protected void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements> = $r2;

        return;
    }

    protected void <init>(java.util.List)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.List r2;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        r2 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBase: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements> = $r1;

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements> = r2;

        return;
    }

    public void add(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op get(int)
    {
        java.util.List $r1;
        int i0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.hp.hpl.jena.sparql.algebra.Op) $r2;

        return $r3;
    }

    public abstract com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform, java.util.List);

    public abstract com.hp.hpl.jena.sparql.algebra.op.OpN copy(java.util.List);

    protected boolean equalsSubOps(com.hp.hpl.jena.sparql.algebra.op.OpN, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        java.util.ListIterator $r2, $r5;
        java.util.List $r1, $r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r10;
        com.hp.hpl.jena.sparql.algebra.op.OpN r0, r3;
        java.lang.Object $r6, $r8;
        com.hp.hpl.jena.sparql.algebra.Op r7, r9;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpN;

        r10 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        $r4 = r3.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.algebra.Op) $r6;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.sparql.algebra.Op) $r8;

        $z1 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.algebra.Op: boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>(r9, r10);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public int size()
    {
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int hashCode()
    {
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public java.util.List getElements()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpN r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpN;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpN: java.util.List elements>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }
}
