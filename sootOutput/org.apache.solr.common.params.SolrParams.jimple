public abstract class org.apache.solr.common.params.SolrParams extends java.lang.Object implements java.io.Serializable
{

    public void <init>()
    {
        org.apache.solr.common.params.SolrParams r0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.String get(java.lang.String);

    public abstract java.lang.String[] getParams(java.lang.String);

    public abstract java.util.Iterator getParameterNamesIterator();

    public java.lang.String get(java.lang.String, java.lang.String)
    {
        java.lang.String r1, $r2, r3, $r4;
        org.apache.solr.common.params.SolrParams r0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = $r2;

     label2:
        return $r4;
    }

    public org.apache.solr.common.params.RequiredSolrParams required()
    {
        org.apache.solr.common.params.RequiredSolrParams $r0;
        org.apache.solr.common.params.SolrParams r1;

        r1 := @this: org.apache.solr.common.params.SolrParams;

        $r0 = new org.apache.solr.common.params.RequiredSolrParams;

        specialinvoke $r0.<org.apache.solr.common.params.RequiredSolrParams: void <init>(org.apache.solr.common.params.SolrParams)>(r1);

        return $r0;
    }

    protected java.lang.String fpname(java.lang.String, java.lang.String)
    {
        org.apache.solr.common.params.SolrParams r8;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String r2, r5, $r7;

        r8 := @this: org.apache.solr.common.params.SolrParams;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f.");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String getFieldParam(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, $r3, $r4, $r5;
        org.apache.solr.common.params.SolrParams r0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String fpname(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>($r3);

        if $r4 == null goto label1;

        $r5 = $r4;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r2);

     label2:
        return $r5;
    }

    public java.lang.String getFieldParam(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, $r3, $r4, r5, $r6;
        org.apache.solr.common.params.SolrParams r0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String fpname(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>($r3);

        if $r4 == null goto label1;

        $r6 = $r4;

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String,java.lang.String)>(r2, r5);

     label2:
        return $r6;
    }

    public java.lang.String[] getFieldParams(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r4, $r5;
        java.lang.String r1, r2, $r3;
        org.apache.solr.common.params.SolrParams r0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String fpname(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String[] getParams(java.lang.String)>($r3);

        if $r4 == null goto label1;

        $r5 = $r4;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String[] getParams(java.lang.String)>(r2);

     label2:
        return $r5;
    }

    public java.lang.Boolean getBool(java.lang.String)
    {
        java.lang.Boolean $r3;
        java.lang.String r1, $r2;
        org.apache.solr.common.params.SolrParams r0;
        boolean $z0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $z0 = staticinvoke <org.apache.solr.common.util.StrUtils: boolean parseBool(java.lang.String)>($r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label2:
        return $r3;
    }

    public boolean getBool(java.lang.String, boolean)
    {
        java.lang.String r1, $r2;
        org.apache.solr.common.params.SolrParams r0;
        boolean z0, $z1;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $z1 = z0;

        goto label2;

     label1:
        $z1 = staticinvoke <org.apache.solr.common.util.StrUtils: boolean parseBool(java.lang.String)>($r2);

     label2:
        return $z1;
    }

    public java.lang.Boolean getFieldBool(java.lang.String, java.lang.String)
    {
        java.lang.Boolean $r4;
        java.lang.String r1, r2, $r3;
        org.apache.solr.common.params.SolrParams r0;
        boolean $z0;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $z0 = staticinvoke <org.apache.solr.common.util.StrUtils: boolean parseBool(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label2:
        return $r4;
    }

    public boolean getFieldBool(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r1, r2, $r3;
        org.apache.solr.common.params.SolrParams r0;
        boolean z0, $z1;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 != null goto label1;

        $z1 = z0;

        goto label2;

     label1:
        $z1 = staticinvoke <org.apache.solr.common.util.StrUtils: boolean parseBool(java.lang.String)>($r3);

     label2:
        return $z1;
    }

    public java.lang.Integer getInt(java.lang.String)
    {
        org.apache.solr.common.SolrException$ErrorCode $r5;
        java.lang.Integer $r7;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrException $r4;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

     label1:
        if $r2 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r2);

     label3:
        return $r7;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.apache.solr.common.SolrException;

        $r5 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r5, $r6, $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getInt(java.lang.String, int)
    {
        org.apache.solr.common.SolrException$ErrorCode $r5;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrException $r4;
        int i0, $i1;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

     label1:
        if $r2 != null goto label2;

        $i1 = i0;

        goto label3;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label3:
        return $i1;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.apache.solr.common.SolrException;

        $r5 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r5, $r6, $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.Integer getFieldInt(java.lang.String, java.lang.String)
    {
        org.apache.solr.common.SolrException$ErrorCode $r6;
        java.lang.Integer $r8;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r4;
        org.apache.solr.common.SolrException $r5;
        java.lang.String r1, r2, $r3, $r7;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        if $r3 != null goto label2;

        $r8 = null;

        goto label3;

     label2:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

     label3:
        return $r8;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, $r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int getFieldInt(java.lang.String, java.lang.String, int)
    {
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r4;
        org.apache.solr.common.SolrException $r5;
        int i0, $i1;
        java.lang.String r1, r2, $r3, $r7;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        if $r3 != null goto label2;

        $i1 = i0;

        goto label3;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label3:
        return $i1;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, $r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.Float getFloat(java.lang.String)
    {
        java.lang.Float $r7;
        org.apache.solr.common.SolrException$ErrorCode $r5;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrException $r4;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

     label1:
        if $r2 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

     label3:
        return $r7;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.apache.solr.common.SolrException;

        $r5 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r5, $r6, $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public float getFloat(java.lang.String, float)
    {
        org.apache.solr.common.SolrException$ErrorCode $r5;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrException $r4;
        float f0, $f1;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

     label1:
        if $r2 != null goto label2;

        $f1 = f0;

        goto label3;

     label2:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r2);

     label3:
        return $f1;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.apache.solr.common.SolrException;

        $r5 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r5, $r6, $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.Double getDouble(java.lang.String)
    {
        java.lang.Double $r7;
        org.apache.solr.common.SolrException$ErrorCode $r5;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrException $r4;
        java.lang.String r1, $r2, $r6;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

     label1:
        if $r2 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

     label3:
        return $r7;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.apache.solr.common.SolrException;

        $r5 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r5, $r6, $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public double getDouble(java.lang.String, double)
    {
        org.apache.solr.common.SolrException$ErrorCode $r5;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r3;
        org.apache.solr.common.SolrException $r4;
        java.lang.String r1, $r2, $r6;
        double d0, $d1;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String get(java.lang.String)>(r1);

     label1:
        if $r2 != null goto label2;

        $d1 = d0;

        goto label3;

     label2:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

     label3:
        return $d1;

     label4:
        $r3 := @caughtexception;

        $r4 = new org.apache.solr.common.SolrException;

        $r5 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r5, $r6, $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.Float getFieldFloat(java.lang.String, java.lang.String)
    {
        java.lang.Float $r8;
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r4;
        org.apache.solr.common.SolrException $r5;
        java.lang.String r1, r2, $r3, $r7;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        if $r3 != null goto label2;

        $r8 = null;

        goto label3;

     label2:
        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r3);

     label3:
        return $r8;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, $r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public float getFieldFloat(java.lang.String, java.lang.String, float)
    {
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r4;
        org.apache.solr.common.SolrException $r5;
        float f0, $f1;
        java.lang.String r1, r2, $r3, $r7;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        if $r3 != null goto label2;

        $f1 = f0;

        goto label3;

     label2:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

     label3:
        return $f1;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, $r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public java.lang.Double getFieldDouble(java.lang.String, java.lang.String)
    {
        java.lang.Double $r8;
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r4;
        org.apache.solr.common.SolrException $r5;
        java.lang.String r1, r2, $r3, $r7;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        if $r3 != null goto label2;

        $r8 = null;

        goto label3;

     label2:
        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r3);

     label3:
        return $r8;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, $r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public double getFieldDouble(java.lang.String, java.lang.String, double)
    {
        org.apache.solr.common.SolrException$ErrorCode $r6;
        org.apache.solr.common.params.SolrParams r0;
        java.lang.Exception $r4;
        org.apache.solr.common.SolrException $r5;
        java.lang.String r1, r2, $r3, $r7;
        double d0, $d1;

        r0 := @this: org.apache.solr.common.params.SolrParams;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $r3 = virtualinvoke r0.<org.apache.solr.common.params.SolrParams: java.lang.String getFieldParam(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        if $r3 != null goto label2;

        $d1 = d0;

        goto label3;

     label2:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

     label3:
        return $d1;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.apache.solr.common.SolrException;

        $r6 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String,java.lang.Throwable)>($r6, $r7, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public static org.apache.solr.common.params.SolrParams wrapDefaults(org.apache.solr.common.params.SolrParams, org.apache.solr.common.params.SolrParams)
    {
        org.apache.solr.common.params.DefaultSolrParams $r2;
        org.apache.solr.common.params.SolrParams r0, r1;

        r0 := @parameter0: org.apache.solr.common.params.SolrParams;

        r1 := @parameter1: org.apache.solr.common.params.SolrParams;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        $r2 = new org.apache.solr.common.params.DefaultSolrParams;

        specialinvoke $r2.<org.apache.solr.common.params.DefaultSolrParams: void <init>(org.apache.solr.common.params.SolrParams,org.apache.solr.common.params.SolrParams)>(r0, r1);

        return $r2;
    }

    public static org.apache.solr.common.params.SolrParams wrapAppended(org.apache.solr.common.params.SolrParams, org.apache.solr.common.params.SolrParams)
    {
        org.apache.solr.common.params.AppendedSolrParams $r2;
        org.apache.solr.common.params.SolrParams r0, r1;

        r0 := @parameter0: org.apache.solr.common.params.SolrParams;

        r1 := @parameter1: org.apache.solr.common.params.SolrParams;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        $r2 = new org.apache.solr.common.params.AppendedSolrParams;

        specialinvoke $r2.<org.apache.solr.common.params.AppendedSolrParams: void <init>(org.apache.solr.common.params.SolrParams,org.apache.solr.common.params.SolrParams)>(r0, r1);

        return $r2;
    }

    public static java.util.Map toMap(org.apache.solr.common.util.NamedList)
    {
        int $i0, i1;
        java.util.HashMap $r0;
        java.lang.Object $r3;
        java.lang.String $r2, $r4;
        org.apache.solr.common.util.NamedList r1;

        r1 := @parameter0: org.apache.solr.common.util.NamedList;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.String getName(int)>(i1);

        $r3 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.Object getVal(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static java.util.Map toMultiMap(org.apache.solr.common.util.NamedList)
    {
        int $i0, i1;
        java.util.HashMap $r0;
        java.lang.Object $r3;
        java.lang.String $r2, $r4;
        org.apache.solr.common.util.NamedList r1;

        r1 := @parameter0: org.apache.solr.common.util.NamedList;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.String getName(int)>(i1);

        $r3 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.Object getVal(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <org.apache.solr.common.params.MultiMapSolrParams: void addParam(java.lang.String,java.lang.String,java.util.Map)>($r2, $r4, $r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static org.apache.solr.common.params.SolrParams toSolrParams(org.apache.solr.common.util.NamedList)
    {
        org.apache.solr.common.params.MultiMapSolrParams $r8;
        java.util.HashMap $r0;
        org.apache.solr.common.util.NamedList r1;
        java.util.Map $r9;
        int $i0, i1;
        java.lang.Object $r4, $r6;
        org.apache.solr.common.params.MapSolrParams $r2;
        java.lang.String $r3, $r5, r7;

        r1 := @parameter0: org.apache.solr.common.util.NamedList;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.String getName(int)>(i1);

        $r4 = virtualinvoke r1.<org.apache.solr.common.util.NamedList: java.lang.Object getVal(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        r7 = (java.lang.String) $r6;

        if r7 == null goto label2;

        $r8 = new org.apache.solr.common.params.MultiMapSolrParams;

        $r9 = staticinvoke <org.apache.solr.common.params.SolrParams: java.util.Map toMultiMap(org.apache.solr.common.util.NamedList)>(r1);

        specialinvoke $r8.<org.apache.solr.common.params.MultiMapSolrParams: void <init>(java.util.Map)>($r9);

        return $r8;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new org.apache.solr.common.params.MapSolrParams;

        specialinvoke $r2.<org.apache.solr.common.params.MapSolrParams: void <init>(java.util.Map)>($r0);

        return $r2;
    }

    public org.apache.solr.common.util.NamedList toNamedList()
    {
        java.util.Iterator $r2;
        org.apache.solr.common.util.SimpleOrderedMap $r0;
        java.lang.String[] $r5;
        org.apache.solr.common.params.SolrParams r1;
        int $i0;
        java.lang.Object $r3;
        java.lang.String r4, $r6;
        boolean $z0;

        r1 := @this: org.apache.solr.common.params.SolrParams;

        $r0 = new org.apache.solr.common.util.SimpleOrderedMap;

        specialinvoke $r0.<org.apache.solr.common.util.SimpleOrderedMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.solr.common.params.SolrParams: java.util.Iterator getParameterNamesIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r1.<org.apache.solr.common.params.SolrParams: java.lang.String[] getParams(java.lang.String)>(r4);

        $i0 = lengthof $r5;

        if $i0 != 1 goto label2;

        $r6 = $r5[0];

        virtualinvoke $r0.<org.apache.solr.common.util.SimpleOrderedMap: void add(java.lang.String,java.lang.Object)>(r4, $r6);

        goto label3;

     label2:
        virtualinvoke $r0.<org.apache.solr.common.util.SimpleOrderedMap: void add(java.lang.String,java.lang.Object)>(r4, $r5);

     label3:
        goto label1;

     label4:
        return $r0;
    }
}
