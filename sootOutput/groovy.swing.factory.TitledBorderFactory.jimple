public class groovy.swing.factory.TitledBorderFactory extends groovy.swing.factory.SwingBorderFactory
{
    private static final java.util.Map positions;
    private static final java.util.Map justifications;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697223;
    static java.lang.Class class$javax$swing$border$TitledBorder;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$awt$Font;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$RuntimeException;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$util$Map;
    static java.lang.Class class$java$awt$Color;
    static java.lang.Class class$javax$swing$border$Border;

    public void <init>()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Class $r1, $r2, $r3, $r4;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void <init>()>();

        $r1 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.TitledBorderFactory");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0> = $r3;

        goto label2;

     label1:
        $r3 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

     label2:
        $r2 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r4 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r4;

        goto label4;

     label3:
        $r4 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map)
    {
        java.awt.Color $r43;
        groovy.swing.factory.TitledBorderFactory r61;
        javax.swing.border.Border $r45;
        java.util.Map r3, $r20, $r24;
        java.lang.Throwable $r59;
        java.lang.Object[] $r4, $r11, $r15, $r17, $r19, $r21, $r23, $r25, $r29, $r33, $r40, $r42, $r44, $r46, $r47, $r50, $r53, $r55;
        java.lang.String $r60, r66;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        groovy.util.FactoryBuilderSupport r6;
        org.codehaus.groovy.runtime.GStringImpl $r54;
        java.awt.Font $r41;
        java.lang.String[] $r57;
        java.lang.Class $r0, r1, $r2, $r8, $r13, $r27, $r31, $r35, $r37, $r48, $r52, $r62, $r63, $r64, $r65, $r67, $r68, $r69, $r70, $r73, $r74, $r75, $r76;
        java.lang.Object $r5, $r7, $r9, r10, $r12, $r14, $r16, $r18, $r22, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r39, $r49, $r51, r56, $r58, $r71, $r72;

        r61 := @this: groovy.swing.factory.TitledBorderFactory;

        r6 := @parameter0: groovy.util.FactoryBuilderSupport;

        r56 := @parameter1: java.lang.Object;

        r10 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r62 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.TitledBorderFactory");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0> = $r62;

        goto label02;

     label01:
        $r62 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r62;

        $r2 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r63 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r63;

        goto label04;

     label03:
        $r63 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "parent";

        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r4);

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r6, "context");

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: void setProperty(java.lang.Object,java.lang.Class,java.lang.Object,java.lang.String)>($r5, r1, $r7, "applyBorderToParent");

        $r8 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String>;

        if $r8 != null goto label05;

        $r64 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String> = $r64;

        goto label06;

     label05:
        $r64 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String>;

     label06:
        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r64);

        $r60 = (java.lang.String) $r9;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>(r10);

        if $z0 == 0 goto label12;

        $r48 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String>;

        if $r48 != null goto label07;

        $r65 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String> = $r65;

        goto label08;

     label07:
        $r65 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String>;

     label08:
        $r49 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object asType(java.lang.Object,java.lang.Class)>(r10, $r65);

        r66 = (java.lang.String) $r49;

        $r50 = newarray (java.lang.Object)[1];

        $r50[0] = "title";

        $r51 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "containsKey", $r50);

        $z8 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r51);

        if $z8 == 0 goto label11;

        $r52 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r52 != null goto label09;

        $r67 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$RuntimeException> = $r67;

        goto label10;

     label09:
        $r67 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$RuntimeException>;

     label10:
        $r53 = newarray (java.lang.Object)[1];

        $r54 = new org.codehaus.groovy.runtime.GStringImpl;

        $r55 = newarray (java.lang.Object)[1];

        $r55[0] = r56;

        $r57 = newarray (java.lang.String)[2];

        $r57[0] = "";

        $r57[1] = " cannot have both a value attribute and an attribute title:";

        specialinvoke $r54.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r55, $r57);

        $r53[0] = $r54;

        $r58 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r67, $r53);

        $r59 = (java.lang.Throwable) $r58;

        throw $r59;

     label11:
        goto label15;

     label12:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "title";

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r11);

        $r13 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String>;

        if $r13 != null goto label13;

        $r68 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String> = $r68;

        goto label14;

     label13:
        $r68 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$String>;

     label14:
        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object asType(java.lang.Object,java.lang.Class)>($r12, $r68);

        r66 = (java.lang.String) $r14;

     label15:
        $r69 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r69 != null goto label16;

        $r70 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r70;

        goto label17;

     label16:
        $r70 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label17:
        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r66;

        $r16 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r70, $r15);

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "position";

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r17);

        $r20 = <groovy.swing.factory.TitledBorderFactory: java.util.Map positions>;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = $r18;

        $r71 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r20, "getAt", $r19);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r71);

        if $z1 == 0 goto label18;

        goto label19;

     label18:
        $r71 = $r18;

     label19:
        $z2 = $r71 instanceof java.lang.Integer;

        if $z2 == 0 goto label20;

        $r47 = newarray (java.lang.Object)[1];

        $r47[0] = $r71;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r16, "setTitlePosition", $r47);

        goto label20;

     label20:
        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "justification";

        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r21);

        $r24 = <groovy.swing.factory.TitledBorderFactory: java.util.Map positions>;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = $r22;

        $r72 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r24, "getAt", $r23);

        $z3 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r72);

        if $z3 == 0 goto label21;

        goto label22;

     label21:
        $r72 = $r22;

     label22:
        $z4 = $r72 instanceof java.lang.Integer;

        if $z4 == 0 goto label23;

        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = $r72;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r16, "setTitleJustification", $r46);

        goto label23;

     label23:
        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "border";

        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r25);

        $r27 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$Border>;

        if $r27 != null goto label24;

        $r73 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.Border");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$Border> = $r73;

        goto label25;

     label24:
        $r73 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$Border>;

     label25:
        $r28 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r26, $r73);

        $r45 = (javax.swing.border.Border) $r28;

        $z5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareNotEqual(java.lang.Object,java.lang.Object)>($r45, null);

        if $z5 == 0 goto label26;

        $r44 = newarray (java.lang.Object)[1];

        $r44[0] = $r45;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r16, "setBorder", $r44);

        goto label26;

     label26:
        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = "color";

        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r29);

        $r31 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$awt$Color>;

        if $r31 != null goto label27;

        $r74 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Color");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$awt$Color> = $r74;

        goto label28;

     label27:
        $r74 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$awt$Color>;

     label28:
        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r30, $r74);

        $r43 = (java.awt.Color) $r32;

        $z6 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r43);

        if $z6 == 0 goto label29;

        $r42 = newarray (java.lang.Object)[1];

        $r42[0] = $r43;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r16, "setTitleColor", $r42);

        goto label29;

     label29:
        $r33 = newarray (java.lang.Object)[1];

        $r33[0] = "font";

        $r34 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r3, "remove", $r33);

        $r35 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$awt$Font>;

        if $r35 != null goto label30;

        $r75 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.awt.Font");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$awt$Font> = $r75;

        goto label31;

     label30:
        $r75 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$awt$Font>;

     label31:
        $r36 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r34, $r75);

        $r41 = (java.awt.Font) $r36;

        $z7 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r41);

        if $z7 == 0 goto label32;

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = $r41;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r16, "setTitleFont", $r40);

        goto label32;

     label32:
        $r37 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$Object>;

        if $r37 != null goto label33;

        $r76 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$Object> = $r76;

        goto label34;

     label33:
        $r76 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$lang$Object>;

     label34:
        $r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r16, $r76);

        $r39 = (java.lang.Object) $r38;

        return $r39;
    }

    static void <clinit>()
    {
        java.lang.Long $r35, $r36, $r37, $r38;
        java.util.Map $r18, $r19, $r33, $r34;
        java.lang.Object[] $r3, $r20;
        java.lang.Class $r0, r1, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r21, $r23, $r25, $r27, $r29, $r31, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53;
        java.lang.Object $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r22, $r24, $r26, $r28, $r30, $r32;

        $r0 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r39 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.TitledBorderFactory");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0> = $r39;

        goto label02;

     label01:
        $r39 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

     label02:
        r1 = $r39;

        $r2 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r40 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r40;

        goto label04;

     label03:
        $r40 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = newarray (java.lang.Object)[14];

        $r3[0] = "default";

        $r4 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r4 != null goto label05;

        $r41 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r41;

        goto label06;

     label05:
        $r41 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label06:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r41, "DEFAULT_POSITION");

        $r3[1] = $r5;

        $r3[2] = "aboveTop";

        $r6 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r6 != null goto label07;

        $r42 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r42;

        goto label08;

     label07:
        $r42 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label08:
        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r42, "ABOVE_TOP");

        $r3[3] = $r7;

        $r3[4] = "top";

        $r8 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r8 != null goto label09;

        $r43 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r43;

        goto label10;

     label09:
        $r43 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label10:
        $r9 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r43, "TOP");

        $r3[5] = $r9;

        $r3[6] = "belowTop";

        $r10 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r10 != null goto label11;

        $r44 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r44;

        goto label12;

     label11:
        $r44 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label12:
        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r44, "BELOW_TOP");

        $r3[7] = $r11;

        $r3[8] = "aboveBottom";

        $r12 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r12 != null goto label13;

        $r45 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r45;

        goto label14;

     label13:
        $r45 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label14:
        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r45, "ABOVE_BOTTOM");

        $r3[9] = $r13;

        $r3[10] = "bottom";

        $r14 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r14 != null goto label15;

        $r46 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r46;

        goto label16;

     label15:
        $r46 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label16:
        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r46, "BOTTOM");

        $r3[11] = $r15;

        $r3[12] = "belowBottom";

        $r16 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r16 != null goto label17;

        $r47 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r47;

        goto label18;

     label17:
        $r47 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label18:
        $r17 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r47, "BELOW_BOTTOM");

        $r3[13] = $r17;

        $r18 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r3);

        $r19 = (java.util.Map) $r18;

        <groovy.swing.factory.TitledBorderFactory: java.util.Map positions> = $r19;

        $r20 = newarray (java.lang.Object)[12];

        $r20[0] = "default";

        $r21 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r21 != null goto label19;

        $r48 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r48;

        goto label20;

     label19:
        $r48 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label20:
        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r48, "DEFAULT_JUSTIFICATION");

        $r20[1] = $r22;

        $r20[2] = "left";

        $r23 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r23 != null goto label21;

        $r49 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r49;

        goto label22;

     label21:
        $r49 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label22:
        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r49, "LEFT");

        $r20[3] = $r24;

        $r20[4] = "center";

        $r25 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r25 != null goto label23;

        $r50 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r50;

        goto label24;

     label23:
        $r50 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label24:
        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r50, "CENTER");

        $r20[5] = $r26;

        $r20[6] = "right";

        $r27 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r27 != null goto label25;

        $r51 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r51;

        goto label26;

     label25:
        $r51 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label26:
        $r28 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r51, "RIGHT");

        $r20[7] = $r28;

        $r20[8] = "leading";

        $r29 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r29 != null goto label27;

        $r52 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r52;

        goto label28;

     label27:
        $r52 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label28:
        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r52, "LEADING");

        $r20[9] = $r30;

        $r20[10] = "trailing";

        $r31 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

        if $r31 != null goto label29;

        $r53 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("javax.swing.border.TitledBorder");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder> = $r53;

        goto label30;

     label29:
        $r53 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$javax$swing$border$TitledBorder>;

     label30:
        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r53, "TRAILING");

        $r20[11] = $r32;

        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r20);

        $r34 = (java.util.Map) $r33;

        <groovy.swing.factory.TitledBorderFactory: java.util.Map justifications> = $r34;

        $r35 = new java.lang.Long;

        specialinvoke $r35.<java.lang.Long: void <init>(long)>(1239119697223L);

        $r36 = (java.lang.Long) $r35;

        <groovy.swing.factory.TitledBorderFactory: java.lang.Long __timeStamp> = $r36;

        $r37 = new java.lang.Long;

        specialinvoke $r37.<java.lang.Long: void <init>(long)>(0L);

        $r38 = (java.lang.Long) $r37;

        <groovy.swing.factory.TitledBorderFactory: java.lang.Long __timeStamp__239_neverHappen1239119697223> = $r38;

        return;
    }

    public static final java.util.Map getPositions()
    {
        java.util.Map $r3, $r5;
        java.lang.Class $r0, $r1, $r2, $r6, $r7, $r8;
        java.lang.Object $r4;

        $r0 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.TitledBorderFactory");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.swing.factory.TitledBorderFactory: java.util.Map positions>;

        $r2 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$util$Map>;

        if $r2 != null goto label5;

        $r8 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.util.Map");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$util$Map> = $r8;

        goto label6;

     label5:
        $r8 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$util$Map>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r8);

        $r5 = (java.util.Map) $r4;

        return $r5;
    }

    public static final java.util.Map getJustifications()
    {
        java.util.Map $r3, $r5;
        java.lang.Class $r0, $r1, $r2, $r6, $r7, $r8;
        java.lang.Object $r4;

        $r0 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.TitledBorderFactory");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.swing.factory.TitledBorderFactory: java.util.Map justifications>;

        $r2 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$util$Map>;

        if $r2 != null goto label5;

        $r8 = staticinvoke <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$(java.lang.String)>("java.util.Map");

        <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$util$Map> = $r8;

        goto label6;

     label5:
        $r8 = <groovy.swing.factory.TitledBorderFactory: java.lang.Class class$java$util$Map>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r3, $r8);

        $r5 = (java.util.Map) $r4;

        return $r5;
    }

    java.lang.Object super$3$getProperty(java.lang.String)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Object $r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r2;
    }

    java.lang.String super$1$toString()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.String $r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$3$isLeaf()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$3$setProperty(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.TitledBorderFactory r0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.TitledBorderFactory r0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$3$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Object super$1$clone()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Object $r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    void super$1$wait()
    {
        groovy.swing.factory.TitledBorderFactory r0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    groovy.lang.MetaClass super$3$getMetaClass()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        groovy.lang.MetaClass $r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        $r1 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: groovy.lang.MetaClass getMetaClass()>();

        return $r1;
    }

    void super$1$wait(long, int)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        int i1;
        long l0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$3$setMetaClass(groovy.lang.MetaClass)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        groovy.lang.MetaClass r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: groovy.lang.MetaClass;

        specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: void setMetaClass(groovy.lang.MetaClass)>(r1);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Class $r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.TitledBorderFactory r0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        long l0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    boolean super$3$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        groovy.util.FactoryBuilderSupport r1;
        java.util.Map r3;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    boolean super$1$equals(java.lang.Object)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$3$invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.swing.factory.TitledBorderFactory r0;
        java.lang.Object r2, $r3;
        java.lang.String r1;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<groovy.swing.factory.SwingBorderFactory: java.lang.Object invokeMethod(java.lang.String,java.lang.Object)>(r1, r2);

        return $r3;
    }

    int super$1$hashCode()
    {
        groovy.swing.factory.TitledBorderFactory r0;
        int $i0;

        r0 := @this: groovy.swing.factory.TitledBorderFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
