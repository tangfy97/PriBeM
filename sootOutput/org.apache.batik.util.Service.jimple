public class org.apache.batik.util.Service extends java.lang.Object
{
    static java.util.HashMap providerMap;
    static java.lang.Class class$org$apache$batik$util$Service;

    public void <init>()
    {
        org.apache.batik.util.Service r0;

        r0 := @this: org.apache.batik.util.Service;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized java.util.Iterator providers(java.lang.Class)
    {
        java.util.Enumeration $r10;
        java.net.URL r47;
        java.lang.SecurityException $r40;
        boolean $z0;
        java.lang.LinkageError $r35;
        java.lang.Exception $r36, $r37;
        java.util.List r41;
        java.lang.ClassLoader r42;
        java.lang.Throwable $r34;
        java.util.HashMap $r6, $r9;
        java.util.ArrayList $r50;
        java.lang.StringBuffer $r1, $r4, $r49;
        int $i0, $i1, $i3;
        java.lang.String $r3, $r5, $r15, r48;
        java.util.Iterator $r18, $r19, $r21, $r39;
        java.io.IOException $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r38;
        java.io.InputStreamReader r45, $r51;
        java.lang.Class r2, $r16, $r20, $r43;
        java.lang.Object $r7, $r11, $r17;
        java.io.BufferedReader r46, $r52;
        java.io.InputStream $r12, r44;

        r2 := @parameter0: java.lang.Class;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("META-INF/services/");

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        $r6 = <org.apache.batik.util.Service: java.util.HashMap providerMap>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r41 = (java.util.List) $r7;

        if r41 == null goto label01;

        $r21 = interfaceinvoke r41.<java.util.List: java.util.Iterator iterator()>();

        return $r21;

     label01:
        $r50 = new java.util.ArrayList;

        specialinvoke $r50.<java.util.ArrayList: void <init>()>();

        $r9 = <org.apache.batik.util.Service: java.util.HashMap providerMap>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r50);

        r42 = null;

     label02:
        r42 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label03:
        goto label05;

     label04:
        $r40 := @caughtexception;

     label05:
        if r42 != null goto label08;

        $r20 = <org.apache.batik.util.Service: java.lang.Class class$org$apache$batik$util$Service>;

        if $r20 != null goto label06;

        $r43 = staticinvoke <org.apache.batik.util.Service: java.lang.Class class$(java.lang.String)>("org.apache.batik.util.Service");

        <org.apache.batik.util.Service: java.lang.Class class$org$apache$batik$util$Service> = $r43;

        goto label07;

     label06:
        $r43 = <org.apache.batik.util.Service: java.lang.Class class$org$apache$batik$util$Service>;

     label07:
        r42 = virtualinvoke $r43.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label08:
        if r42 != null goto label09;

        $r19 = interfaceinvoke $r50.<java.util.List: java.util.Iterator iterator()>();

        return $r19;

     label09:
        $r10 = virtualinvoke r42.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>($r5);

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

        $r39 = interfaceinvoke $r50.<java.util.List: java.util.Iterator iterator()>();

        return $r39;

     label12:
        goto label30;

     label13:
        r44 = null;

        r45 = null;

        r46 = null;

     label14:
        $r11 = interfaceinvoke $r10.<java.util.Enumeration: java.lang.Object nextElement()>();

        r47 = (java.net.URL) $r11;

        $r12 = virtualinvoke r47.<java.net.URL: java.io.InputStream openStream()>();

        r44 = $r12;

        $r51 = new java.io.InputStreamReader;

        specialinvoke $r51.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r12, "UTF-8");

        r45 = $r51;

        $r52 = new java.io.BufferedReader;

        specialinvoke $r52.<java.io.BufferedReader: void <init>(java.io.Reader)>($r51);

        r46 = $r52;

        r48 = virtualinvoke $r52.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label21;

     label15:
        $i0 = virtualinvoke r48.<java.lang.String: int indexOf(int)>(35);

        $i3 = (int) -1;

        if $i0 == $i3 goto label16;

        r48 = virtualinvoke r48.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label16:
        $r15 = virtualinvoke r48.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r15.<java.lang.String: int length()>();

        if $i1 != 0 goto label17;

        r48 = virtualinvoke $r52.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label21;

     label17:
        $r16 = virtualinvoke r42.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.Object newInstance()>();

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r17);

     label18:
        goto label20;

     label19:
        $r37 := @caughtexception;

     label20:
        r48 = virtualinvoke $r52.<java.io.BufferedReader: java.lang.String readLine()>();

     label21:
        if r48 != null goto label15;

     label22:
        goto label31;

     label23:
        goto label30;

     label24:
        $r36 := @caughtexception;

        goto label47;

     label25:
        goto label30;

     label26:
        $r35 := @caughtexception;

        goto label63;

     label27:
        goto label30;

     label28:
        $r34 := @caughtexception;

        goto label79;

     label29:
        throw $r34;

     label30:
        $z0 = interfaceinvoke $r10.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label13;

        $r18 = interfaceinvoke $r50.<java.util.List: java.util.Iterator iterator()>();

        return $r18;

     label31:
        if $r12 == null goto label36;

     label32:
        virtualinvoke $r12.<java.io.InputStream: void close()>();

     label33:
        goto label35;

     label34:
        $r33 := @caughtexception;

     label35:
        r44 = null;

     label36:
        if $r51 == null goto label41;

     label37:
        virtualinvoke $r51.<java.io.Reader: void close()>();

     label38:
        goto label40;

     label39:
        $r32 := @caughtexception;

     label40:
        r45 = null;

     label41:
        if $r52 != null goto label46;

     label42:
        virtualinvoke $r52.<java.io.BufferedReader: void close()>();

     label43:
        goto label45;

     label44:
        $r31 := @caughtexception;

     label45:
        r46 = null;

     label46:
        goto label23;

     label47:
        if r44 == null goto label52;

     label48:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label49:
        goto label51;

     label50:
        $r30 := @caughtexception;

     label51:
        r44 = null;

     label52:
        if r45 == null goto label57;

     label53:
        virtualinvoke r45.<java.io.Reader: void close()>();

     label54:
        goto label56;

     label55:
        $r29 := @caughtexception;

     label56:
        r45 = null;

     label57:
        if r46 != null goto label62;

     label58:
        virtualinvoke r46.<java.io.BufferedReader: void close()>();

     label59:
        goto label61;

     label60:
        $r28 := @caughtexception;

     label61:
        r46 = null;

     label62:
        goto label25;

     label63:
        if r44 == null goto label68;

     label64:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label65:
        goto label67;

     label66:
        $r27 := @caughtexception;

     label67:
        r44 = null;

     label68:
        if r45 == null goto label73;

     label69:
        virtualinvoke r45.<java.io.Reader: void close()>();

     label70:
        goto label72;

     label71:
        $r26 := @caughtexception;

     label72:
        r45 = null;

     label73:
        if r46 != null goto label78;

     label74:
        virtualinvoke r46.<java.io.BufferedReader: void close()>();

     label75:
        goto label77;

     label76:
        $r25 := @caughtexception;

     label77:
        r46 = null;

     label78:
        goto label27;

     label79:
        if r44 == null goto label83;

     label80:
        virtualinvoke r44.<java.io.InputStream: void close()>();

     label81:
        goto label83;

     label82:
        $r24 := @caughtexception;

     label83:
        if r45 == null goto label87;

     label84:
        virtualinvoke r45.<java.io.Reader: void close()>();

     label85:
        goto label87;

     label86:
        $r23 := @caughtexception;

     label87:
        if r46 != null goto label91;

     label88:
        virtualinvoke r46.<java.io.BufferedReader: void close()>();

     label89:
        goto label91;

     label90:
        $r22 := @caughtexception;

     label91:
        goto label29;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Exception from label15 to label18 with label19;
        catch java.lang.Exception from label14 to label22 with label24;
        catch java.lang.LinkageError from label14 to label22 with label26;
        catch java.lang.Throwable from label14 to label28 with label28;
        catch java.io.IOException from label32 to label33 with label34;
        catch java.io.IOException from label37 to label38 with label39;
        catch java.io.IOException from label42 to label43 with label44;
        catch java.io.IOException from label48 to label49 with label50;
        catch java.io.IOException from label53 to label54 with label55;
        catch java.io.IOException from label58 to label59 with label60;
        catch java.io.IOException from label64 to label65 with label66;
        catch java.io.IOException from label69 to label70 with label71;
        catch java.io.IOException from label74 to label75 with label76;
        catch java.io.IOException from label80 to label81 with label82;
        catch java.io.IOException from label84 to label85 with label86;
        catch java.io.IOException from label88 to label89 with label90;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.batik.util.Service: java.util.HashMap providerMap> = $r0;

        return;
    }
}
