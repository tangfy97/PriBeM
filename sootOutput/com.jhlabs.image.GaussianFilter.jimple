public class com.jhlabs.image.GaussianFilter extends com.jhlabs.image.ConvolveFilter
{
    protected float radius;
    protected java.awt.image.Kernel kernel;

    public void <init>()
    {
        com.jhlabs.image.GaussianFilter r0;

        r0 := @this: com.jhlabs.image.GaussianFilter;

        specialinvoke r0.<com.jhlabs.image.GaussianFilter: void <init>(float)>(2.0F);

        return;
    }

    public void <init>(float)
    {
        float f0;
        com.jhlabs.image.GaussianFilter r0;

        r0 := @this: com.jhlabs.image.GaussianFilter;

        f0 := @parameter0: float;

        specialinvoke r0.<com.jhlabs.image.ConvolveFilter: void <init>()>();

        virtualinvoke r0.<com.jhlabs.image.GaussianFilter: void setRadius(float)>(f0);

        return;
    }

    public void setRadius(float)
    {
        float f0;
        java.awt.image.Kernel $r1;
        com.jhlabs.image.GaussianFilter r0;

        r0 := @this: com.jhlabs.image.GaussianFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.GaussianFilter: float radius> = f0;

        $r1 = staticinvoke <com.jhlabs.image.GaussianFilter: java.awt.image.Kernel makeKernel(float)>(f0);

        r0.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel> = $r1;

        return;
    }

    public float getRadius()
    {
        float $f0;
        com.jhlabs.image.GaussianFilter r0;

        r0 := @this: com.jhlabs.image.GaussianFilter;

        $f0 = r0.<com.jhlabs.image.GaussianFilter: float radius>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.GaussianFilter r1;
        byte $b4;
        int[] $r4, $r5;
        java.awt.image.Kernel $r2, $r3;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;
        boolean $z0, $z1;
        java.awt.image.BufferedImage r0, r6;
        float $f0;

        r1 := @this: com.jhlabs.image.GaussianFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label1;

        r6 = virtualinvoke r1.<com.jhlabs.image.ConvolveFilter: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        $i2 = $i0 * $i1;

        $r4 = newarray (int)[$i2];

        $i3 = $i0 * $i1;

        $r5 = newarray (int)[$i3];

        virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r4, 0, $i0);

        $f0 = r1.<com.jhlabs.image.GaussianFilter: float radius>;

        $b4 = $f0 cmpl 0.0F;

        $i7 = (int) $b4;

        if $i7 <= 0 goto label2;

        $r2 = r1.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel>;

        $z0 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i5 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r2, $r4, $r5, $i0, $i1, $z0, $i5);

        $r3 = r1.<com.jhlabs.image.GaussianFilter: java.awt.image.Kernel kernel>;

        $z1 = r1.<com.jhlabs.image.ConvolveFilter: boolean alpha>;

        $i6 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        staticinvoke <com.jhlabs.image.GaussianFilter: void convolveAndTranspose(java.awt.image.Kernel,int[],int[],int,int,boolean,int)>($r3, $r5, $r4, $i1, $i0, $z1, $i6);

     label2:
        virtualinvoke r6.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, $i0, $i1, $r4, 0, $i0);

        return r6;
    }

    public static void convolveAndTranspose(java.awt.image.Kernel, int[], int[], int, int, boolean, int)
    {
        byte $b19;
        float[] $r1;
        java.awt.image.Kernel r0;
        int[] r2, r3;
        boolean z0;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        int $i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: java.awt.image.Kernel;

        r3 := @parameter1: int[];

        r2 := @parameter2: int[];

        i3 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        i20 := @parameter6: int;

        $r1 = virtualinvoke r0.<java.awt.image.Kernel: float[] getKernelData(float[])>(null);

        $i0 = virtualinvoke r0.<java.awt.image.Kernel: int getWidth()>();

        i1 = $i0 / 2;

        i27 = 0;

     label01:
        if i27 >= i2 goto label13;

        i28 = i27;

        i4 = i27 * i3;

        i29 = 0;

     label02:
        if i29 >= i3 goto label12;

        f0 = 0.0F;

        f1 = 0.0F;

        f2 = 0.0F;

        f3 = 0.0F;

        i30 = neg i1;

     label03:
        if i30 > i1 goto label09;

        $i18 = i1 + i30;

        f4 = $r1[$i18];

        $b19 = f4 cmpl 0.0F;

        if $b19 == 0 goto label08;

        i31 = i29 + i30;

        if i31 >= 0 goto label05;

        $i24 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i20 != $i24 goto label04;

        i31 = 0;

        goto label07;

     label04:
        $i25 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i20 != $i25 goto label07;

        $i26 = i29 + i3;

        i31 = $i26 % i3;

        goto label07;

     label05:
        if i31 < i3 goto label07;

        $i21 = <com.jhlabs.image.ConvolveFilter: int CLAMP_EDGES>;

        if i20 != $i21 goto label06;

        i31 = i3 - 1;

        goto label07;

     label06:
        $i22 = <com.jhlabs.image.ConvolveFilter: int WRAP_EDGES>;

        if i20 != $i22 goto label07;

        $i23 = i29 + i3;

        i31 = $i23 % i3;

     label07:
        $i32 = i4 + i31;

        $i33 = r3[$i32];

        $i34 = $i33 >> 24;

        $i35 = $i34 & 255;

        $f5 = (float) $i35;

        $f6 = f4 * $f5;

        f3 = f3 + $f6;

        $i36 = $i33 >> 16;

        $i37 = $i36 & 255;

        $f7 = (float) $i37;

        $f8 = f4 * $f7;

        f0 = f0 + $f8;

        $i38 = $i33 >> 8;

        $i39 = $i38 & 255;

        $f9 = (float) $i39;

        $f10 = f4 * $f9;

        f1 = f1 + $f10;

        $i40 = $i33 & 255;

        $f11 = (float) $i40;

        $f12 = f4 * $f11;

        f2 = f2 + $f12;

     label08:
        i30 = i30 + 1;

        goto label03;

     label09:
        if z0 == 0 goto label10;

        $d6 = (double) f3;

        $d7 = $d6 + 0.5;

        $i17 = (int) $d7;

        $i41 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i17);

        goto label11;

     label10:
        $i41 = 255;

     label11:
        $d0 = (double) f0;

        $d1 = $d0 + 0.5;

        $i5 = (int) $d1;

        $i6 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i5);

        $d2 = (double) f1;

        $d3 = $d2 + 0.5;

        $i7 = (int) $d3;

        $i8 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i7);

        $d4 = (double) f2;

        $d5 = $d4 + 0.5;

        $i9 = (int) $d5;

        $i10 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i9);

        $i12 = $i41 << 24;

        $i11 = $i6 << 16;

        $i14 = $i12 | $i11;

        $i13 = $i8 << 8;

        $i15 = $i14 | $i13;

        $i16 = $i15 | $i10;

        r2[i28] = $i16;

        i28 = i28 + i2;

        i29 = i29 + 1;

        goto label02;

     label12:
        i27 = i27 + 1;

        goto label01;

     label13:
        return;
    }

    public static java.awt.image.Kernel makeKernel(float)
    {
        byte $b4;
        float f0, f1, $f2, f3, f4, f5, f6, $f7, $f8, f9, $f10, $f11, $f12, $f13, $f14, f15;
        float[] r0;
        java.awt.image.Kernel $r2;
        int i0, $i1, i2, $i3, i5, i6, i7, $i8;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i0 = (int) $d1;

        $i1 = i0 * 2;

        i2 = $i1 + 1;

        r0 = newarray (float)[i2];

        f1 = f0 / 3.0F;

        $f2 = 2.0F * f1;

        f3 = $f2 * f1;

        f4 = 6.2831855F * f1;

        $d2 = (double) f4;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        f5 = (float) $d3;

        f6 = f0 * f0;

        f15 = 0.0F;

        i5 = 0;

        i6 = neg i0;

     label1:
        if i6 > i0 goto label4;

        $i3 = i6 * i6;

        f9 = (float) $i3;

        $b4 = f9 cmpl f6;

        $i8 = (int) $b4;

        if $i8 <= 0 goto label2;

        r0[i5] = 0.0F;

        goto label3;

     label2:
        $f10 = neg f9;

        $f11 = $f10 / f3;

        $d4 = (double) $f11;

        $d5 = staticinvoke <java.lang.Math: double exp(double)>($d4);

        $f12 = (float) $d5;

        $f13 = $f12 / f5;

        r0[i5] = $f13;

     label3:
        $f14 = r0[i5];

        f15 = f15 + $f14;

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label1;

     label4:
        i7 = 0;

     label5:
        if i7 >= i2 goto label6;

        $f7 = r0[i7];

        $f8 = $f7 / f15;

        r0[i7] = $f8;

        i7 = i7 + 1;

        goto label5;

     label6:
        $r2 = new java.awt.image.Kernel;

        specialinvoke $r2.<java.awt.image.Kernel: void <init>(int,int,float[])>(i2, 1, r0);

        return $r2;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.GaussianFilter r0;

        r0 := @this: com.jhlabs.image.GaussianFilter;

        return "Blur/Gaussian Blur...";
    }
}
