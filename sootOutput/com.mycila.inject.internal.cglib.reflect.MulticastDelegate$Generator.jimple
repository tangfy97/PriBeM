public class com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator extends com.mycila.inject.internal.cglib.core.AbstractClassGenerator
{
    private static final com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE;
    private static final com.mycila.inject.internal.asm.Type MULTICAST_DELEGATE;
    private static final com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE;
    private static final com.mycila.inject.internal.cglib.core.Signature ADD_DELEGATE;
    private static final com.mycila.inject.internal.cglib.core.Signature ADD_HELPER;
    private java.lang.Class iface;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        $r1 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: void <init>(com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source)>($r1);

        return;
    }

    protected java.lang.ClassLoader getDefaultClassLoader()
    {
        java.lang.Class $r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r0;
        java.lang.ClassLoader $r2;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r2;
    }

    public void setInterface(java.lang.Class)
    {
        java.lang.Class r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        r1 := @parameter0: java.lang.Class;

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface> = r1;

        return;
    }

    public com.mycila.inject.internal.cglib.reflect.MulticastDelegate create()
    {
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r0;
        java.lang.Class $r1, $r3, $r7;
        java.lang.Object $r5;
        java.lang.String $r2, $r4;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate $r6;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        $r1 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate>;

        if $r1 != null goto label1;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.MulticastDelegate");

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate> = $r7;

        goto label2;

     label1:
        $r7 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate>;

     label2:
        $r2 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: void setNamePrefix(java.lang.String)>($r2);

        $r3 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = specialinvoke r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)>($r4);

        $r6 = (com.mycila.inject.internal.cglib.reflect.MulticastDelegate) $r5;

        return $r6;
    }

    public void generateClass(com.mycila.inject.internal.asm.ClassVisitor)
    {
        com.mycila.inject.internal.asm.Type $r9, $r10, $r16;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r12, $r14;
        com.mycila.inject.internal.cglib.core.MethodInfo $r3;
        java.lang.String $r6;
        com.mycila.inject.internal.asm.Type[] $r7;
        java.lang.reflect.Method $r2;
        com.mycila.inject.internal.asm.ClassVisitor r5;
        com.mycila.inject.internal.cglib.core.Signature $r11, $r13, $r17;
        com.mycila.inject.internal.cglib.core.ClassEmitter $r4;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r0;
        java.lang.Class $r1, $r8, $r15;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        r5 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)>($r1);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: com.mycila.inject.internal.cglib.core.MethodInfo getMethodInfo(java.lang.reflect.Member)>($r2);

        $r4 = new com.mycila.inject.internal.cglib.core.ClassEmitter;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r5);

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.String getClassName()>();

        $r9 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.asm.Type MULTICAST_DELEGATE>;

        $r7 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r8 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface>;

        $r10 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r8);

        $r7[0] = $r10;

        virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, $r6, $r9, $r7, "<generated>");

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>($r4);

        specialinvoke r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: void emitProxy(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo)>($r4, $r3);

        $r11 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE>;

        $r12 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r11, null);

        virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance_this()>();

        virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor_this()>();

        virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r12.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r13 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature ADD_DELEGATE>;

        $r14 = virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r13, null);

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r15 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface>;

        $r16 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r15);

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r16);

        $r17 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature ADD_HELPER>;

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual_this(com.mycila.inject.internal.cglib.core.Signature)>($r17);

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r14.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        virtualinvoke $r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: void end_class()>();

        return;
    }

    private void emitProxy(com.mycila.inject.internal.cglib.core.ClassEmitter, com.mycila.inject.internal.cglib.core.MethodInfo)
    {
        com.mycila.inject.internal.cglib.core.Signature $r3;
        com.mycila.inject.internal.asm.Type $r4, $r5, $r6, $r9;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1 $r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.core.MethodInfo r1;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        com.mycila.inject.internal.cglib.core.Local $r10, r11;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r8;
        boolean z0, $z2, $z3;

        r8 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r1 := @parameter1: com.mycila.inject.internal.cglib.core.MethodInfo;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,int)>(r0, r1, 1);

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        if $r4 == $r5 goto label1;

        $z3 = 1;

        $z2 = 1;

        goto label2;

     label1:
        $z3 = 0;

        $z2 = 0;

     label2:
        z0 = $z2;

        r11 = null;

        if $z3 == 0 goto label3;

        $r10 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local(com.mycila.inject.internal.asm.Type)>($r4);

        r11 = $r10;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void zero_or_null(com.mycila.inject.internal.asm.Type)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r10);

     label3:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        $r6 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_getfield(java.lang.String,com.mycila.inject.internal.asm.Type)>("targets", $r6);

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        $r7 = new com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1;

        specialinvoke $r7.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: void <init>(com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator,com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,boolean,com.mycila.inject.internal.cglib.core.Local)>(r8, $r2, r1, z0, r11);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void process_array(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.ProcessArrayCallback)>($r2, $r9, $r7);

        if z0 == 0 goto label4;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>(r11);

     label4:
        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    protected java.lang.Object firstInstance(java.lang.Class)
    {
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r4;
        java.lang.Class r0;
        java.lang.Object $r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate $r2, $r3;

        r4 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.Class)>(r0);

        $r2 = (com.mycila.inject.internal.cglib.reflect.MulticastDelegate) $r1;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: com.mycila.inject.internal.cglib.reflect.MulticastDelegate newInstance()>();

        return $r3;
    }

    protected java.lang.Object nextInstance(java.lang.Object)
    {
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r3;
        java.lang.Object r0;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate $r1, $r2;

        r3 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        r0 := @parameter0: java.lang.Object;

        $r1 = (com.mycila.inject.internal.cglib.reflect.MulticastDelegate) r0;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate: com.mycila.inject.internal.cglib.reflect.MulticastDelegate newInstance()>();

        return $r2;
    }

    static java.lang.Class access$000(com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator)
    {
        java.lang.Class $r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r0;

        r0 := @parameter0: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class iface>;

        return $r1;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.asm.Type $r3, $r6, $r9, $r10, $r13, $r14;
        com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source $r0;
        java.lang.String $r2;
        com.mycila.inject.internal.asm.Type[] $r5, $r8, $r12;
        com.mycila.inject.internal.cglib.core.Signature $r4, $r7, $r11;
        java.lang.Class $r1, $r15;

        $r0 = new com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source;

        $r1 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate>;

        if $r1 != null goto label1;

        $r15 = staticinvoke <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.MulticastDelegate");

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate> = $r15;

        goto label2;

     label1:
        $r15 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate: java.lang.Class class$net$sf$cglib$reflect$MulticastDelegate>;

     label2:
        $r2 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source: void <init>(java.lang.String)>($r2);

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.AbstractClassGenerator$Source SOURCE> = $r0;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.reflect.MulticastDelegate");

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.asm.Type MULTICAST_DELEGATE> = $r3;

        $r4 = new com.mycila.inject.internal.cglib.core.Signature;

        $r6 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.asm.Type MULTICAST_DELEGATE>;

        $r5 = newarray (com.mycila.inject.internal.asm.Type)[0];

        specialinvoke $r4.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r6, $r5);

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE> = $r4;

        $r7 = new com.mycila.inject.internal.cglib.core.Signature;

        $r10 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.asm.Type MULTICAST_DELEGATE>;

        $r8 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r8[0] = $r9;

        specialinvoke $r7.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("add", $r10, $r8);

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature ADD_DELEGATE> = $r7;

        $r11 = new com.mycila.inject.internal.cglib.core.Signature;

        $r14 = <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.asm.Type MULTICAST_DELEGATE>;

        $r12 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r13 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r12[0] = $r13;

        specialinvoke $r11.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("addHelper", $r14, $r12);

        <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: com.mycila.inject.internal.cglib.core.Signature ADD_HELPER> = $r11;

        return;
    }
}
