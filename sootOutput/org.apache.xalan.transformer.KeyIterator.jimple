public class org.apache.xalan.transformer.KeyIterator extends org.apache.xpath.axes.OneStepIteratorForward
{
    private org.apache.xml.utils.QName m_name;
    private java.util.Vector m_keyDeclarations;

    public org.apache.xml.utils.QName getName()
    {
        org.apache.xalan.transformer.KeyIterator r0;
        org.apache.xml.utils.QName $r1;

        r0 := @this: org.apache.xalan.transformer.KeyIterator;

        $r1 = r0.<org.apache.xalan.transformer.KeyIterator: org.apache.xml.utils.QName m_name>;

        return $r1;
    }

    public java.util.Vector getKeyDeclarations()
    {
        org.apache.xalan.transformer.KeyIterator r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xalan.transformer.KeyIterator;

        $r1 = r0.<org.apache.xalan.transformer.KeyIterator: java.util.Vector m_keyDeclarations>;

        return $r1;
    }

    void <init>(org.apache.xml.utils.QName, java.util.Vector)
    {
        org.apache.xalan.transformer.KeyIterator r0;
        java.util.Vector r1;
        org.apache.xml.utils.QName r2;

        r0 := @this: org.apache.xalan.transformer.KeyIterator;

        r2 := @parameter0: org.apache.xml.utils.QName;

        r1 := @parameter1: java.util.Vector;

        specialinvoke r0.<org.apache.xpath.axes.OneStepIteratorForward: void <init>(int)>(16);

        r0.<org.apache.xalan.transformer.KeyIterator: java.util.Vector m_keyDeclarations> = r1;

        r0.<org.apache.xalan.transformer.KeyIterator: org.apache.xml.utils.QName m_name> = r2;

        return;
    }

    public short acceptNode(int)
    {
        java.lang.Object[] $r11;
        javax.xml.transform.TransformerException $r14;
        org.apache.xalan.templates.KeyDeclaration r7;
        java.util.Vector $r4;
        byte $b2;
        org.apache.xpath.XPathContext $r3;
        int $i0, i1, i3;
        java.lang.String $r12, $r13;
        boolean $z0, z1;
        double $d0;
        org.apache.xalan.transformer.KeyIterator r0, r2;
        org.apache.xml.utils.QName $r5, $r8;
        org.apache.xpath.XPath $r9;
        java.lang.RuntimeException $r10;
        org.apache.xpath.axes.LocPathIterator $r1;
        java.lang.Object $r6;

        r0 := @this: org.apache.xalan.transformer.KeyIterator;

        i1 := @parameter0: int;

        z1 = 0;

        $r1 = r0.<org.apache.xpath.axes.PredicatedNodeTest: org.apache.xpath.axes.LocPathIterator m_lpi>;

        r2 = (org.apache.xalan.transformer.KeyIterator) $r1;

        $r3 = virtualinvoke r2.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext getXPathContext()>();

        $r4 = virtualinvoke r2.<org.apache.xalan.transformer.KeyIterator: java.util.Vector getKeyDeclarations()>();

        $r5 = virtualinvoke r2.<org.apache.xalan.transformer.KeyIterator: org.apache.xml.utils.QName getName()>();

     label01:
        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        i3 = 0;

        goto label06;

     label02:
        $r6 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r7 = (org.apache.xalan.templates.KeyDeclaration) $r6;

        $r8 = virtualinvoke r7.<org.apache.xalan.templates.KeyDeclaration: org.apache.xml.utils.QName getName()>();

        $z0 = virtualinvoke $r8.<org.apache.xml.utils.QName: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label03;

        goto label05;

     label03:
        z1 = 1;

        $r9 = virtualinvoke r7.<org.apache.xalan.templates.KeyDeclaration: org.apache.xpath.XPath getMatch()>();

        $d0 = virtualinvoke $r9.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>($r3, i1);

        virtualinvoke r7.<org.apache.xalan.templates.KeyDeclaration: org.apache.xpath.XPath getMatch()>();

        $b2 = $d0 cmpl #-Infinity;

        if $b2 != 0 goto label04;

        goto label05;

     label04:
        return 1;

     label05:
        i3 = i3 + 1;

     label06:
        if i3 < $i0 goto label02;

     label07:
        goto label09;

     label08:
        $r14 := @caughtexception;

     label09:
        if z1 != 0 goto label10;

        $r10 = new java.lang.RuntimeException;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke $r5.<org.apache.xml.utils.QName: java.lang.String getLocalName()>();

        $r11[0] = $r12;

        $r13 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_NO_XSLKEY_DECLARATION", $r11);

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label10:
        return 2;

        catch javax.xml.transform.TransformerException from label01 to label07 with label08;
    }
}
