public abstract class com.mycila.inject.internal.guava.cache.AbstractCache extends java.lang.Object implements com.mycila.inject.internal.guava.cache.Cache
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.cache.AbstractCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object getUnchecked(java.lang.Object)
    {
        java.util.concurrent.ExecutionException $r3;
        java.lang.Throwable $r5;
        java.lang.Object r1, $r2;
        com.mycila.inject.internal.guava.util.concurrent.UncheckedExecutionException $r4;
        com.mycila.inject.internal.guava.cache.AbstractCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.AbstractCache: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.mycila.inject.internal.guava.util.concurrent.UncheckedExecutionException;

        $r5 = virtualinvoke $r3.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r4.<com.mycila.inject.internal.guava.util.concurrent.UncheckedExecutionException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public final java.lang.Object apply(java.lang.Object)
    {
        java.lang.Object r1, $r2;
        com.mycila.inject.internal.guava.cache.AbstractCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.AbstractCache: java.lang.Object getUnchecked(java.lang.Object)>(r1);

        return $r2;
    }

    public void cleanUp()
    {
        com.mycila.inject.internal.guava.cache.AbstractCache r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        return;
    }

    public long size()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.AbstractCache r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void invalidate(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.cache.AbstractCache r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void invalidateAll()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.AbstractCache r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.cache.CacheStats stats()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.AbstractCache r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.concurrent.ConcurrentMap asMap()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.cache.AbstractCache r1;

        r1 := @this: com.mycila.inject.internal.guava.cache.AbstractCache;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }
}
