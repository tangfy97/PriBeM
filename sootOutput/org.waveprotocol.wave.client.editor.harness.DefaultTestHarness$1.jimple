class org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 extends org.waveprotocol.wave.client.editor.harness.EditorHarness
{
    final org.waveprotocol.wave.client.editor.harness.DefaultTestHarness this$0;

    void <init>(org.waveprotocol.wave.client.editor.harness.DefaultTestHarness)
    {
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 r0;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness r1;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness;

        r0.<org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness: void <init>()>();

        return;
    }

    public void extend(org.waveprotocol.wave.client.editor.content.Registries)
    {
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 r5;
        org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager $r9;
        org.waveprotocol.wave.client.doodad.attachment.SimpleAttachmentManager $r12;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2 $r11;
        org.waveprotocol.wave.client.editor.ElementHandlerRegistry $r1, $r3, $r7, $r8;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$1 $r10;
        org.waveprotocol.wave.client.editor.content.Registries r0;

        r5 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.Registries;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        staticinvoke <org.waveprotocol.wave.client.doodad.form.FormDoodads: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r1);

        $r9 = new org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager;

        specialinvoke $r9.<org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager: void <init>()>();

        virtualinvoke $r9.<org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager: org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachment createFakeAttachment(java.lang.String,int,int)>("pics/Snow.jpg", 120, 80);

        virtualinvoke $r9.<org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager: org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachment createFakeAttachment(java.lang.String,int,int)>("pics/yosemite.jpg", 120, 80);

        virtualinvoke $r9.<org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager: org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachment createFakeAttachment(java.lang.String,int,int)>("pics/hills.jpg", 120, 74);

        virtualinvoke $r9.<org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachmentsManager: org.waveprotocol.wave.client.doodad.attachment.testing.FakeAttachment createFakeAttachment(java.lang.String,int,int)>("pics/wave.gif", 120, 74);

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        $r10 = new org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$1;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$1: void <init>(org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1)>(r5);

        $r12 = (org.waveprotocol.wave.client.doodad.attachment.SimpleAttachmentManager) $r9;

        staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry,org.waveprotocol.wave.client.doodad.attachment.SimpleAttachmentManager,org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail$ThumbnailActionHandler)>($r3, $r12, $r10);

        $r11 = new org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1$2: void <init>(org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1)>(r5);

        staticinvoke <org.waveprotocol.wave.client.doodad.link.LinkAnnotationHandler: void register(org.waveprotocol.wave.client.editor.content.Registries,org.waveprotocol.wave.client.doodad.link.LinkAnnotationHandler$LinkAttributeAugmenter)>(r0, $r11);

        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        staticinvoke <org.waveprotocol.wave.client.doodad.suggestion.Suggestion: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r7);

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.client.editor.content.Registries: org.waveprotocol.wave.client.editor.ElementHandlerRegistry getElementHandlerRegistry()>();

        staticinvoke <org.waveprotocol.wave.client.doodad.diff.DiffDeleteRenderer: void register(org.waveprotocol.wave.client.editor.ElementHandlerRegistry)>($r8);

        return;
    }

    public java.lang.String[] extendSampleContent()
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r3, $r6, $r9, $r14, $r17;
        java.lang.String[] $r0;
        java.lang.String $r4, $r7, $r10, $r12, $r15, $r18, $r21;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 r22;
        java.lang.StringBuilder $r1, $r2, $r5, $r8, $r11, $r13, $r16, $r19, $r20;

        r22 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1;

        $r0 = newarray (java.lang.String)[2];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("abcd");

        $r3 = staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String)>("pics/yosemite.jpg", "Yosemite");

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String)>("pics/hills.jpg", "Hills");

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,boolean,java.lang.String)>("pics/hills.jpg", 1, "Hills");

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[0] = $r12;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String)>("pics/yosemite.jpg", "Yosemite");

        $r15 = virtualinvoke $r14.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = staticinvoke <org.waveprotocol.wave.client.doodad.attachment.ImageThumbnail: org.waveprotocol.wave.model.document.util.XmlStringBuilder constructXml(java.lang.String,java.lang.String)>("pics/hills.jpg", "Hills");

        $r18 = virtualinvoke $r17.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<line t=\"li\"/>Some stuff");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0[1] = $r21;

        return $r0;
    }
}
