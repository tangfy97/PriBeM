public final class org.apache.cxf.jaxrs.utils.InjectionUtils extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    private static final java.util.ResourceBundle BUNDLE;
    private static final java.lang.String SERVLET_CONFIG_CLASS_NAME;
    private static final java.lang.String SERVLET_CONTEXT_CLASS_NAME;
    private static final java.lang.String HTTP_SERVLET_REQUEST_CLASS_NAME;
    private static final java.lang.String HTTP_SERVLET_RESPONSE_CLASS_NAME;
    private static final java.lang.String PARAM_HANDLERS_FIRST;
    private static final java.lang.String IGNORE_MATRIX_PARAMETERS;

    private void <init>()
    {
        org.apache.cxf.jaxrs.utils.InjectionUtils r0;

        r0 := @this: org.apache.cxf.jaxrs.utils.InjectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isConcreteClass(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static java.lang.reflect.Type getSuperType(java.lang.Class, java.lang.reflect.TypeVariable)
    {
        int $i0, $i1, $i2, i3, i4, $i5;
        java.lang.String $r11, $r12;
        boolean $z0, $z1, $z2;
        java.lang.reflect.GenericDeclaration $r1;
        java.lang.reflect.TypeVariable r0, $r10;
        java.lang.reflect.Type $r4, $r7, r9, r13, r14;
        java.lang.reflect.TypeVariable[] $r2;
        java.lang.reflect.Type[] $r6, $r8;
        java.lang.Class r3, $r5;

        r3 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.reflect.TypeVariable;

        i3 = 0;

        $r1 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>();

     label1:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label3;

        $r10 = $r2[i3];

        $r11 = interfaceinvoke $r10.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r12 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r13 = $r4;

        $z0 = $r4 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label4;

        $r8 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        i4 = lengthof $r8;

        if 0 >= i4 goto label4;

        r9 = $r8[0];

        r13 = r9;

        goto label4;

     label4:
        $z2 = r13 instanceof java.lang.reflect.ParameterizedType;

        if $z2 != 0 goto label5;

        r13 = null;

     label5:
        $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type,int)>(r13, i3);

        r14 = $r5;

        if $r5 == null goto label6;

        if $r5 != class "Ljava/lang/Object;" goto label9;

     label6:
        $r6 = interfaceinvoke r0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $i1 = lengthof $r6;

        if $i1 <= i3 goto label7;

        $i5 = i3;

        goto label8;

     label7:
        $i5 = 0;

     label8:
        $i2 = lengthof $r6;

        if $i2 <= $i5 goto label9;

        $r7 = $r6[$i5];

        if $r7 == class "Ljava/lang/Object;" goto label9;

        r14 = $r6[$i5];

     label9:
        return r14;
    }

    public static java.lang.reflect.Method checkProxy(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.NoSuchMethodException $r9;
        java.lang.reflect.Method[] $r10;
        int i0, $i1, i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.String $r3, $r12;
        java.lang.reflect.Method r2, $r8, r11;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r4, $r6, $r13, $r14;
        java.lang.Object r0;
        java.lang.Class $r1, $r5, r7, $r15, $r16;

        r2 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Object;

        $r1 = class "Ljava/lang/reflect/Proxy;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z0 == 0 goto label11;

        $r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r6;

        i6 = 0;

     label01:
        if i6 >= i0 goto label11;

        r7 = $r6[i6];

     label02:
        $r8 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r3, $r4);

     label03:
        return $r8;

     label04:
        $r9 := @caughtexception;

        $i1 = lengthof $r4;

        if $i1 <= 0 goto label10;

        $r10 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i2 = lengthof $r10;

        i7 = 0;

     label05:
        if i7 >= i2 goto label10;

        r11 = $r10[i7];

        $r12 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label09;

        $r13 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r13;

        $i3 = lengthof $r4;

        if $i4 != $i3 goto label09;

        $r14 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i8 = 0;

     label06:
        $i5 = lengthof $r14;

        if i8 >= $i5 goto label08;

        $r16 = $r14[i8];

        $r15 = $r4[i8];

        $z2 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r15);

        if $z2 != 0 goto label07;

        goto label08;

     label07:
        i8 = i8 + 1;

        goto label06;

     label08:
        return r11;

     label09:
        i7 = i7 + 1;

        goto label05;

     label10:
        i6 = i6 + 1;

        goto label01;

     label11:
        return r2;

        catch java.lang.NoSuchMethodException from label02 to label03 with label04;
    }

    public static void injectFieldValue(java.lang.reflect.Field, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r2, r3;
        java.lang.reflect.Field r1;
        org.apache.cxf.jaxrs.utils.InjectionUtils$1 $r0;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = new org.apache.cxf.jaxrs.utils.InjectionUtils$1;

        specialinvoke $r0.<org.apache.cxf.jaxrs.utils.InjectionUtils$1: void <init>(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        return;
    }

    public static java.lang.Object extractFieldValue(java.lang.reflect.Field, java.lang.Object)
    {
        org.apache.cxf.jaxrs.utils.InjectionUtils$2 $r0;
        java.lang.Object r2, $r3;
        java.lang.reflect.Field r1;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.apache.cxf.jaxrs.utils.InjectionUtils$2;

        specialinvoke $r0.<org.apache.cxf.jaxrs.utils.InjectionUtils$2: void <init>(java.lang.reflect.Field,java.lang.Object)>(r1, r2);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        return $r3;
    }

    public static java.lang.Class getActualType(java.lang.reflect.Type)
    {
        java.lang.Class $r1;
        java.lang.reflect.Type r0;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type,int)>(r0, 0);

        return $r1;
    }

    public static java.lang.Class getActualType(java.lang.reflect.Type, int)
    {
        java.lang.reflect.GenericArrayType $r6;
        java.lang.reflect.WildcardType r12;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.reflect.TypeVariable $r8;
        java.lang.reflect.ParameterizedType $r4, r16;
        java.lang.reflect.Type $r3, $r5, r11;
        java.lang.reflect.Type[] $r2, $r7, $r9, r13;
        java.lang.Class $r0, $r1, $r10, r14, $r15, $r17;

        r11 := @parameter0: java.lang.reflect.Type;

        i0 := @parameter1: int;

        if r11 != null goto label01;

        return null;

     label01:
        if r11 != class "Ljava/lang/Object;" goto label02;

        $r10 = (java.lang.Class) r11;

        return $r10;

     label02:
        $r0 = class "Ljava/lang/reflect/ParameterizedType;";

        $r1 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 != 0 goto label11;

        $z2 = r11 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label03;

        $r8 = (java.lang.reflect.TypeVariable) r11;

        $r9 = interfaceinvoke $r8.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        r11 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r9, i0);

        goto label06;

     label03:
        $z3 = r11 instanceof java.lang.reflect.WildcardType;

        if $z3 == 0 goto label05;

        r12 = (java.lang.reflect.WildcardType) r11;

        $r7 = interfaceinvoke r12.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();

        r13 = $r7;

        $i1 = lengthof $r7;

        if $i1 != 0 goto label04;

        r13 = interfaceinvoke r12.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();

     label04:
        r11 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>(r13, i0);

        goto label06;

     label05:
        $z4 = r11 instanceof java.lang.reflect.GenericArrayType;

        if $z4 == 0 goto label06;

        $r6 = (java.lang.reflect.GenericArrayType) r11;

        r11 = interfaceinvoke $r6.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

     label06:
        $z6 = r11 instanceof java.lang.reflect.ParameterizedType;

        if $z6 != 0 goto label07;

        r14 = (java.lang.Class) r11;

        goto label08;

     label07:
        $r4 = (java.lang.reflect.ParameterizedType) r11;

        $r5 = interfaceinvoke $r4.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r14 = (java.lang.Class) $r5;

     label08:
        $z5 = virtualinvoke r14.<java.lang.Class: boolean isArray()>();

        if $z5 == 0 goto label09;

        $r15 = virtualinvoke r14.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label10;

     label09:
        $r15 = r14;

     label10:
        return $r15;

     label11:
        r16 = (java.lang.reflect.ParameterizedType) r11;

        $r2 = interfaceinvoke r16.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r2, i0);

        $z1 = $r3 instanceof java.lang.Class;

        if $z1 == 0 goto label12;

        $r17 = (java.lang.Class) $r3;

        goto label13;

     label12:
        $r17 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type,int)>($r3, 0);

     label13:
        return $r17;
    }

    public static java.lang.reflect.Type getType(java.lang.reflect.Type[], int)
    {
        java.lang.RuntimeException $r2;
        java.lang.reflect.Type $r1;
        int i0, $i1;
        java.lang.reflect.Type[] r0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.reflect.Type[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 < $i1 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No type can be found at position ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r1 = r0[i0];

        return $r1;
    }

    public static java.lang.Class getRawType(java.lang.reflect.Type)
    {
        java.lang.reflect.GenericArrayType $r1;
        java.lang.reflect.ParameterizedType r4;
        java.lang.reflect.Type r0, $r2, $r5;
        java.lang.Class $r3, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r7 = (java.lang.Class) r0;

        return $r7;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label3;

        r4 = (java.lang.reflect.ParameterizedType) r0;

        $r5 = interfaceinvoke r4.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z3 = $r5 instanceof java.lang.Class;

        if $z3 == 0 goto label2;

        $r6 = (java.lang.Class) $r5;

        return $r6;

     label2:
        goto label4;

     label3:
        $z2 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z2 == 0 goto label4;

        $r1 = (java.lang.reflect.GenericArrayType) r0;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getRawType(java.lang.reflect.Type)>($r2);

        return $r3;

     label4:
        return null;
    }

    public static java.lang.reflect.Type[] getActualTypes(java.lang.reflect.Type)
    {
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type r0;
        java.lang.reflect.Type[] $r4;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Type;

        if r0 == null goto label1;

        $r1 = class "Ljava/lang/reflect/ParameterizedType;";

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 != 0 goto label2;

     label1:
        return null;

     label2:
        r3 = (java.lang.reflect.ParameterizedType) r0;

        $r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        return $r4;
    }

    public static void injectThroughMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.reflect.Method r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectThroughMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object,org.apache.cxf.message.Message)>(r0, r1, r2, null);

        return;
    }

    public static void injectThroughMethod(java.lang.Object, java.lang.reflect.Method, java.lang.Object, org.apache.cxf.message.Message)
    {
        java.lang.Throwable $r8;
        java.lang.Object[] $r3;
        java.lang.String $r6, $r11, $r15;
        java.lang.reflect.Method r0, $r2;
        java.lang.IllegalAccessException $r14;
        org.apache.cxf.message.Message r9;
        javax.ws.rs.InternalServerErrorException $r13;
        org.apache.cxf.message.Exchange $r12;
        java.lang.Exception $r5;
        java.lang.reflect.InvocationTargetException $r7;
        javax.ws.rs.core.Response $r10;
        java.lang.Object r1, r4;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        r4 := @parameter2: java.lang.Object;

        r9 := @parameter3: org.apache.cxf.message.Message;

     label1:
        $r2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Method checkProxy(java.lang.reflect.Method,java.lang.Object)>(r0, r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r3);

     label2:
        goto label7;

     label3:
        $r14 := @caughtexception;

        $r15 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("METHOD_ACCESS_FAILURE", $r15);

        goto label7;

     label4:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r10 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: javax.ws.rs.core.Response convertFaultToResponse(java.lang.Throwable,org.apache.cxf.message.Message)>($r8, r9);

        if $r10 == null goto label5;

        $r12 = interfaceinvoke r9.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        interfaceinvoke $r12.<org.apache.cxf.message.Exchange: void put(java.lang.Class,java.lang.Object)>(class "Ljavax/ws/rs/core/Response;", $r10);

        $r13 = new javax.ws.rs.InternalServerErrorException;

        specialinvoke $r13.<javax.ws.rs.InternalServerErrorException: void <init>()>();

        throw $r13;

     label5:
        $r11 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("METHOD_ACCESS_FAILURE", $r11);

        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("METHOD_INJECTION_FAILURE", $r6);

     label7:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label6;
    }

    public static java.lang.Object extractFromMethod(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] $r3;
        java.lang.Exception $r5;
        java.lang.Object r1, $r4;
        java.lang.String $r6, $r8;
        java.lang.reflect.Method r0, $r2;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

     label1:
        $r2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Method checkProxy(java.lang.reflect.Method,java.lang.Object)>(r0, r1);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r3);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("METHOD_ACCESS_FAILURE", $r8);

        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("METHOD_INJECTION_FAILURE", $r6);

     label5:
        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static java.lang.Object handleParameter(java.lang.String, boolean, java.lang.Class, java.lang.'annotation'.Annotation[], org.apache.cxf.jaxrs.model.ParameterType, org.apache.cxf.message.Message)
    {
        java.lang.NoSuchMethodException $r33;
        javax.ws.rs.ClientErrorException $r30;
        org.apache.cxf.jaxrs.model.ParameterType r0, $r1, $r35, $r36, $r37;
        javax.ws.rs.core.Response$Status $r31;
        javax.ws.rs.BadRequestException $r38;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        java.util.logging.Logger $r26;
        java.lang.Exception $r22;
        javax.ws.rs.NotFoundException $r41;
        org.apache.cxf.jaxrs.impl.PathSegmentImpl $r18, $r19;
        javax.ws.rs.WebApplicationException $r32;
        java.lang.Throwable $r21;
        java.lang.Object[] $r9, $r25;
        java.lang.String[] $r44, r45;
        java.lang.'annotation'.Annotation[] r3;
        org.apache.cxf.common.i18n.Message $r24;
        java.lang.reflect.Constructor $r8;
        java.util.ResourceBundle $r27;
        int $i0, i1;
        java.lang.String $r11, r12, $r28, $r29, r39, $r40;
        org.apache.cxf.message.Message r5;
        java.lang.Class[] $r7;
        java.lang.NumberFormatException $r34;
        java.lang.Class r2, $r4, $r16, r42;
        java.lang.Object $r6, $r10, $r13, $r14, $r15, $r17, $r20, $r23, r43, $r46;

        r39 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.'annotation'.Annotation[];

        r0 := @parameter4: org.apache.cxf.jaxrs.model.ParameterType;

        r5 := @parameter5: org.apache.cxf.message.Message;

        if r39 != null goto label01;

        return null;

     label01:
        $r1 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType PATH>;

        if r0 != $r1 goto label03;

        $r16 = class "Ljavax/ws/rs/core/PathSegment;";

        $z2 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z2 == 0 goto label02;

        $r19 = new org.apache.cxf.jaxrs.impl.PathSegmentImpl;

        specialinvoke $r19.<org.apache.cxf.jaxrs.impl.PathSegmentImpl: void <init>(java.lang.String,boolean)>(r39, z0);

        $r20 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r19);

        return $r20;

     label02:
        $r17 = interfaceinvoke r5.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("ignore.matrix.parameters");

        $z3 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r17);

        if $z3 != 0 goto label03;

        $r18 = new org.apache.cxf.jaxrs.impl.PathSegmentImpl;

        specialinvoke $r18.<org.apache.cxf.jaxrs.impl.PathSegmentImpl: void <init>(java.lang.String,boolean)>(r39, 0);

        r39 = virtualinvoke $r18.<org.apache.cxf.jaxrs.impl.PathSegmentImpl: java.lang.String getPath()>();

     label03:
        $r40 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String decodeValue(java.lang.String,boolean,org.apache.cxf.jaxrs.model.ParameterType)>(r39, z0, r0);

        $z4 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        if $z4 == 0 goto label09;

     label04:
        $r15 = staticinvoke <org.apache.cxf.common.util.PrimitiveUtils: java.lang.Object read(java.lang.String,java.lang.Class)>($r40, r2);

     label05:
        return $r15;

     label06:
        $r34 := @caughtexception;

        $r35 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType PATH>;

        if r0 == $r35 goto label07;

        $r36 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType QUERY>;

        if r0 == $r36 goto label07;

        $r37 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType MATRIX>;

        if r0 != $r37 goto label08;

     label07:
        $r41 = new javax.ws.rs.NotFoundException;

        specialinvoke $r41.<javax.ws.rs.NotFoundException: void <init>(java.lang.Throwable)>($r34);

        throw $r41;

     label08:
        $r38 = new javax.ws.rs.BadRequestException;

        specialinvoke $r38.<javax.ws.rs.BadRequestException: void <init>(java.lang.Throwable)>($r34);

        throw $r38;

     label09:
        z5 = 0;

        r42 = r2;

        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Class getValueTypeFromAdapter(java.lang.Class,java.lang.Class,java.lang.'annotation'.Annotation[])>(r2, r2, r3);

        if $r4 == r2 goto label10;

        r42 = $r4;

        z5 = 1;

     label10:
        $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object instantiateFromParameterHandler(java.lang.String,java.lang.Class,org.apache.cxf.message.Message)>($r40, r42, r5);

        r43 = $r6;

        if $r6 == null goto label11;

        $r14 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

        return $r14;

     label11:
        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Ljava/lang/String;";

        $r8 = virtualinvoke r42.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r7);

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = $r40;

        r43 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

     label12:
        goto label16;

     label13:
        $r33 := @caughtexception;

        goto label16;

     label14:
        $r32 := @caughtexception;

        throw $r32;

     label15:
        $r22 := @caughtexception;

        $r23 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object createFromParameterHandler(java.lang.String,java.lang.Class,org.apache.cxf.message.Message)>($r40, r42, r5);

        r43 = $r23;

        if $r23 != null goto label16;

        $r26 = <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.logging.Logger LOG>;

        $r24 = new org.apache.cxf.common.i18n.Message;

        $r27 = <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.ResourceBundle BUNDLE>;

        $r25 = newarray (java.lang.Object)[1];

        $r28 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r25[0] = $r28;

        specialinvoke $r24.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("CLASS_CONSTRUCTOR_FAILURE", $r27, $r25);

        $r29 = virtualinvoke $r24.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        virtualinvoke $r26.<java.util.logging.Logger: void severe(java.lang.String)>($r29);

        $r30 = new javax.ws.rs.ClientErrorException;

        $r31 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: javax.ws.rs.core.Response$Status getParameterFailureStatus(org.apache.cxf.jaxrs.model.ParameterType)>(r0);

        specialinvoke $r30.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response$Status,java.lang.Throwable)>($r31, $r22);

        throw $r30;

     label16:
        if r43 != null goto label21;

        $z1 = virtualinvoke r42.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label17;

        $r44 = newarray (java.lang.String)[3];

        $r44[0] = "fromString";

        $r44[1] = "fromValue";

        $r44[2] = "valueOf";

        goto label18;

     label17:
        $r44 = newarray (java.lang.String)[2];

        $r44[0] = "valueOf";

        $r44[1] = "fromString";

     label18:
        r45 = $r44;

        $i0 = lengthof $r44;

        i1 = 0;

     label19:
        if i1 >= $i0 goto label21;

        r12 = r45[i1];

        $r13 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object evaluateFactoryMethod(java.lang.String,java.lang.Class,org.apache.cxf.jaxrs.model.ParameterType,java.lang.String)>($r40, r42, r0, r12);

        r43 = $r13;

        if $r13 == null goto label20;

        goto label21;

     label20:
        i1 = i1 + 1;

        goto label19;

     label21:
        if r43 != null goto label22;

        r43 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object createFromParameterHandler(java.lang.String,java.lang.Class,org.apache.cxf.message.Message)>($r40, r42, r5);

     label22:
        if z5 == 0 goto label27;

        if r43 == null goto label23;

        $r46 = r43;

        goto label24;

     label23:
        $r46 = $r40;

     label24:
        r43 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Object convertWithAdapter(java.lang.Object,java.lang.Class,java.lang.'annotation'.Annotation[])>($r46, r2, r3);

     label25:
        goto label27;

     label26:
        $r21 := @caughtexception;

        r43 = null;

     label27:
        if r43 != null goto label28;

        $r11 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("WRONG_PARAMETER_TYPE", $r11);

     label28:
        $r10 = virtualinvoke r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r43);

        return $r10;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NoSuchMethodException from label11 to label12 with label13;
        catch javax.ws.rs.WebApplicationException from label11 to label12 with label14;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Throwable from label24 to label25 with label26;
    }

    private static java.lang.Object instantiateFromParameterHandler(java.lang.String, java.lang.Class, org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r2;
        java.lang.Class r0;
        java.lang.Object $r3, $r4;
        java.lang.String r1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.apache.cxf.message.Message;

        if class "Ljava/util/Date;" == r0 goto label1;

        if class "Ljava/util/Locale;" == r0 goto label1;

        if r2 == null goto label2;

        $r3 = interfaceinvoke r2.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("check.parameter.handlers.first");

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object createFromParameterHandler(java.lang.String,java.lang.Class,org.apache.cxf.message.Message)>(r1, r0, r2);

        return $r4;

     label2:
        return null;
    }

    private static java.lang.Object createFromParameterHandler(java.lang.String, java.lang.Class, org.apache.cxf.message.Message)
    {
        javax.ws.rs.ext.ParamConverter $r3;
        org.apache.cxf.message.Message r0;
        java.lang.Class r2;
        java.lang.Object r5;
        org.apache.cxf.jaxrs.provider.ProviderFactory $r1;
        java.lang.String r4;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r0 := @parameter2: org.apache.cxf.message.Message;

        r5 = null;

        if r0 == null goto label1;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.provider.ProviderFactory: org.apache.cxf.jaxrs.provider.ProviderFactory getInstance(org.apache.cxf.message.Message)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.cxf.jaxrs.provider.ProviderFactory: javax.ws.rs.ext.ParamConverter createParameterHandler(java.lang.Class)>(r2);

        if $r3 == null goto label1;

        r5 = interfaceinvoke $r3.<javax.ws.rs.ext.ParamConverter: java.lang.Object fromString(java.lang.String)>(r4);

     label1:
        return r5;
    }

    public static void reportServerError(java.lang.String, java.lang.String)
    {
        java.lang.Object[] $r2;
        javax.ws.rs.InternalServerErrorException $r14;
        org.apache.cxf.common.i18n.Message $r0;
        java.util.logging.Logger $r5;
        javax.ws.rs.core.MediaType $r9;
        java.util.ResourceBundle $r4;
        javax.ws.rs.core.Response $r13;
        javax.ws.rs.core.Response$ResponseBuilder $r8, $r10, $r12;
        javax.ws.rs.core.Response$Status $r7;
        java.lang.String r1, r3, $r6, $r11;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.apache.cxf.common.i18n.Message;

        $r4 = <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.ResourceBundle BUNDLE>;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        specialinvoke $r0.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>(r1, $r4, $r2);

        $r5 = <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.logging.Logger LOG>;

        $r6 = virtualinvoke $r0.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void severe(java.lang.String)>($r6);

        $r7 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status INTERNAL_SERVER_ERROR>;

        $r8 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r7);

        $r9 = <javax.ws.rs.core.MediaType: javax.ws.rs.core.MediaType TEXT_PLAIN_TYPE>;

        $r10 = virtualinvoke $r8.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder type(javax.ws.rs.core.MediaType)>($r9);

        $r11 = virtualinvoke $r0.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        $r14 = new javax.ws.rs.InternalServerErrorException;

        specialinvoke $r14.<javax.ws.rs.InternalServerErrorException: void <init>(javax.ws.rs.core.Response)>($r13);

        throw $r14;
    }

    private static java.lang.Object evaluateFactoryMethod(java.lang.String, java.lang.Class, org.apache.cxf.jaxrs.model.ParameterType, java.lang.String)
    {
        java.lang.Throwable $r20;
        java.lang.Object[] $r4, $r10;
        java.lang.NoSuchMethodException $r19;
        org.apache.cxf.common.i18n.Message $r9;
        org.apache.cxf.jaxrs.model.ParameterType r16;
        java.util.ResourceBundle $r12;
        int $i0;
        javax.ws.rs.core.Response$Status $r17;
        java.lang.String r1, r5, $r13, $r14;
        java.lang.reflect.Method $r3;
        boolean $z0, $z1;
        java.lang.Class[] $r2;
        java.util.logging.Logger $r11;
        java.lang.Exception $r8;
        java.lang.reflect.InvocationTargetException $r18;
        javax.ws.rs.WebApplicationException $r15;
        java.lang.Class r0;
        java.lang.Object $r6, $r7;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        r16 := @parameter2: org.apache.cxf.jaxrs.model.ParameterType;

        r1 := @parameter3: java.lang.String;

     label1:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/lang/String;";

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r2);

        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label3;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r6);

     label2:
        return $r7;

     label3:
        goto label8;

     label4:
        $r19 := @caughtexception;

        goto label8;

     label5:
        $r8 := @caughtexception;

        $z1 = $r8 instanceof java.lang.reflect.InvocationTargetException;

        if $z1 == 0 goto label6;

        $r18 = (java.lang.reflect.InvocationTargetException) $r8;

        $r20 = virtualinvoke $r18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        goto label7;

     label6:
        $r20 = $r8;

     label7:
        $r11 = <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.logging.Logger LOG>;

        $r9 = new org.apache.cxf.common.i18n.Message;

        $r12 = <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.ResourceBundle BUNDLE>;

        $r10 = newarray (java.lang.Object)[1];

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r10[0] = $r13;

        specialinvoke $r9.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("CLASS_VALUE_OF_FAILURE", $r12, $r10);

        $r14 = virtualinvoke $r9.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void severe(java.lang.String)>($r14);

        $r15 = new javax.ws.rs.WebApplicationException;

        $r17 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: javax.ws.rs.core.Response$Status getParameterFailureStatus(org.apache.cxf.jaxrs.model.ParameterType)>(r16);

        specialinvoke $r15.<javax.ws.rs.WebApplicationException: void <init>(java.lang.Throwable,javax.ws.rs.core.Response$Status)>($r20, $r17);

        throw $r15;

     label8:
        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label5;
    }

    public static java.lang.Object handleBean(java.lang.Class, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MultivaluedMap, org.apache.cxf.jaxrs.model.ParameterType, org.apache.cxf.message.Message, boolean)
    {
        org.apache.cxf.jaxrs.impl.MetadataMap $r93;
        java.lang.reflect.Member r84, r85;
        java.util.Set $r1, $r76;
        java.lang.Exception $r69;
        java.lang.StringBuilder $r45, $r46, $r50, $r51, $r56, $r57, $r66, $r67, $r92, $r94, $r95, $r96;
        java.lang.String $r27, $r42, $r43, $r47, $r48, $r52, $r54, $r58, $r70, $r72, r79, r80, r83;
        java.util.Map$Entry r78, r82;
        java.lang.Class[] $r35, $r59;
        java.lang.reflect.Field $r8, $r11, $r12, $r28, r87;
        java.lang.reflect.Method[] $r5;
        org.apache.cxf.jaxrs.model.ParameterType r25;
        java.lang.reflect.Method $r29, $r34, $r38, $r40, r86;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z15, $z16, $z17, $z18;
        java.lang.IllegalAccessException $r71;
        java.util.Collection $r19;
        java.util.List $r15, $r22;
        java.lang.reflect.Type r89;
        java.lang.reflect.Type[] $r39;
        java.util.HashMap $r91;
        java.lang.'annotation'.Annotation[] r24;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i9;
        java.util.Iterator $r2, $r16, $r20, $r77;
        org.apache.cxf.message.Message r26;
        javax.ws.rs.core.MultivaluedMap r0, $r14, r18, $r68, r81;
        java.lang.reflect.Field[] $r41;
        java.lang.Object $r3, $r4, $r7, $r10, $r13, $r17, $r21, $r23, $r30, $r31, $r33, $r37, $r60, $r61, $r62, $r63, r74, r90;
        java.lang.Class $r6, $r9, $r32, $r36, $r53, r73, r88;

        r73 := @parameter0: java.lang.Class;

        r24 := @parameter1: java.lang.'annotation'.Annotation[];

        r0 := @parameter2: javax.ws.rs.core.MultivaluedMap;

        r25 := @parameter3: org.apache.cxf.jaxrs.model.ParameterType;

        r26 := @parameter4: org.apache.cxf.message.Message;

        z6 := @parameter5: boolean;

        r74 = null;

     label01:
        $z0 = virtualinvoke r73.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label02;

        r73 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXBUtils: java.lang.Class getValueTypeFromAdapter(java.lang.Class,java.lang.Class,java.lang.'annotation'.Annotation[])>(r73, r73, r24);

     label02:
        r74 = virtualinvoke r73.<java.lang.Class: java.lang.Object newInstance()>();

     label03:
        goto label06;

     label04:
        $r71 := @caughtexception;

        $r72 = virtualinvoke r73.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("CLASS_ACCESS_FAILURE", $r72);

        goto label06;

     label05:
        $r69 := @caughtexception;

        $r70 = virtualinvoke r73.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("CLASS_INSTANTIATION_FAILURE", $r70);

     label06:
        $r91 = new java.util.HashMap;

        specialinvoke $r91.<java.util.HashMap: void <init>()>();

        $r76 = interfaceinvoke r0.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>();

        $r77 = interfaceinvoke $r76.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z13 = interfaceinvoke $r77.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label11;

        $r60 = interfaceinvoke $r77.<java.util.Iterator: java.lang.Object next()>();

        r78 = (java.util.Map$Entry) $r60;

        $r61 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getKey()>();

        r79 = (java.lang.String) $r61;

        $i3 = virtualinvoke r79.<java.lang.String: int indexOf(int)>(46);

        $i9 = (int) -1;

        if $i3 != $i9 goto label08;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r79);

        r80 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label09;

     label08:
        r80 = virtualinvoke r79.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $i4 = $i3 + 1;

        r79 = virtualinvoke r79.<java.lang.String: java.lang.String substring(int)>($i4);

     label09:
        $r62 = interfaceinvoke $r91.<java.util.Map: java.lang.Object get(java.lang.Object)>(r80);

        $r68 = (javax.ws.rs.core.MultivaluedMap) $r62;

        r81 = $r68;

        if $r68 != null goto label10;

        $r93 = new org.apache.cxf.jaxrs.impl.MetadataMap;

        specialinvoke $r93.<org.apache.cxf.jaxrs.impl.MetadataMap: void <init>()>();

        r81 = $r93;

        interfaceinvoke $r91.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r80, $r93);

     label10:
        $r63 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r81.<javax.ws.rs.core.MultivaluedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r79, $r63);

        goto label07;

     label11:
        $i0 = interfaceinvoke $r91.<java.util.Map: int size()>();

        if $i0 <= 0 goto label35;

        $r1 = interfaceinvoke $r91.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label35;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r82 = (java.util.Map$Entry) $r3;

        $r4 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getKey()>();

        r83 = (java.lang.String) $r4;

        $z2 = virtualinvoke r83.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z2 != 0 goto label13;

        $z18 = 1;

        $z17 = 1;

        goto label14;

     label13:
        $z18 = 0;

        $z17 = 0;

     label14:
        z15 = $z18;

        if $z17 != 0 goto label15;

        r83 = virtualinvoke r83.<java.lang.String: java.lang.String substring(int)>(1);

     label15:
        r84 = null;

        r85 = null;

        $r5 = virtualinvoke r73.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $i2 = lengthof $r5;

        i5 = 0;

     label16:
        if i5 >= $i2 goto label21;

        r86 = $r5[i5];

        $r43 = virtualinvoke r86.<java.lang.reflect.Method: java.lang.String getName()>();

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $z9 = virtualinvoke $r43.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r47);

        if $z9 == 0 goto label17;

        $r59 = virtualinvoke r86.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r59;

        if $i1 != 1 goto label17;

        r84 = r86;

        goto label19;

     label17:
        $r48 = virtualinvoke r86.<java.lang.reflect.Method: java.lang.String getName()>();

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $z10 = virtualinvoke $r48.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r52);

        if $z10 != 0 goto label18;

        $r53 = virtualinvoke r86.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z11 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isBooleanType(java.lang.Class)>($r53);

        if $z11 == 0 goto label19;

        $r54 = virtualinvoke r86.<java.lang.reflect.Method: java.lang.String getName()>();

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $z12 = virtualinvoke $r54.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r58);

        if $z12 == 0 goto label19;

     label18:
        r85 = r86;

     label19:
        if r84 == null goto label20;

        if r85 == null goto label20;

        goto label21;

     label20:
        i5 = i5 + 1;

        goto label16;

     label21:
        if r84 != null goto label24;

        $r41 = virtualinvoke r73.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i6 = lengthof $r41;

        i7 = 0;

     label22:
        if i7 >= i6 goto label24;

        r87 = $r41[i7];

        $r42 = virtualinvoke r87.<java.lang.reflect.Field: java.lang.String getName()>();

        $z8 = virtualinvoke $r42.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r83);

        if $z8 == 0 goto label23;

        r84 = r87;

        r85 = r87;

        goto label24;

     label23:
        i7 = i7 + 1;

        goto label22;

     label24:
        if r84 == null goto label34;

        if r85 == null goto label34;

        $z3 = r84 instanceof java.lang.reflect.Method;

        if $z3 == 0 goto label25;

        $r32 = class "Ljava/lang/reflect/Method;";

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r84);

        $r34 = (java.lang.reflect.Method) $r33;

        $r35 = virtualinvoke $r34.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r88 = $r35[0];

        $r36 = class "Ljava/lang/reflect/Method;";

        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r84);

        $r38 = (java.lang.reflect.Method) $r37;

        $r39 = virtualinvoke $r38.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        r89 = $r39[0];

        $r40 = (java.lang.reflect.Method) r85;

        r90 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object extractFromMethod(java.lang.Object,java.lang.reflect.Method)>(r74, $r40);

        goto label26;

     label25:
        $r6 = class "Ljava/lang/reflect/Field;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r84);

        $r8 = (java.lang.reflect.Field) $r7;

        r88 = virtualinvoke $r8.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r9 = class "Ljava/lang/reflect/Field;";

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r84);

        $r11 = (java.lang.reflect.Field) $r10;

        r89 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r12 = (java.lang.reflect.Field) r85;

        r90 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object extractFieldValue(java.lang.reflect.Field,java.lang.Object)>($r12, r74);

     label26:
        $r13 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (javax.ws.rs.core.MultivaluedMap) $r13;

        $r15 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.List processValues(java.lang.Class,java.lang.reflect.Type,javax.ws.rs.core.MultivaluedMap,boolean)>(r88, r89, $r14, z15);

        $r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label27:
        $z16 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label34;

        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r18 = (javax.ws.rs.core.MultivaluedMap) $r17;

        $z4 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r88);

        if $z4 == 0 goto label28;

        $r31 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object injectIntoCollectionOrArray(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MultivaluedMap,boolean,boolean,org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>(r88, r89, r24, r18, z15, 1, r25, r26);

        r90 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object mergeCollectionsOrArrays(java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r90, $r31, r89);

        goto label31;

     label28:
        $z5 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedMap(java.lang.reflect.Type)>(r89);

        if $z5 == 0 goto label29;

        $r30 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object injectIntoMap(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MultivaluedMap,boolean,org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>(r88, r89, r24, r18, 1, r25, r26);

        r90 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object mergeMap(java.lang.Object,java.lang.Object,java.lang.reflect.Type)>(r90, $r30, r89);

        goto label31;

     label29:
        if z15 == 0 goto label30;

        r90 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleBean(java.lang.Class,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MultivaluedMap,org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message,boolean)>(r88, r24, r18, r25, r26, z6);

        goto label31;

     label30:
        $r19 = interfaceinvoke r18.<javax.ws.rs.core.MultivaluedMap: java.util.Collection values()>();

        $r20 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

        $r21 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r22 = (java.util.List) $r21;

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(0);

        $r27 = (java.lang.String) $r23;

        r90 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleParameter(java.lang.String,boolean,java.lang.Class,java.lang.'annotation'.Annotation[],org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>($r27, z6, r88, r24, r25, r26);

     label31:
        if r90 == null goto label33;

        $z7 = r84 instanceof java.lang.reflect.Method;

        if $z7 == 0 goto label32;

        $r29 = (java.lang.reflect.Method) r84;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectThroughMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)>(r74, $r29, r90);

        goto label33;

     label32:
        $r28 = (java.lang.reflect.Field) r84;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectFieldValue(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>($r28, r74, r90);

     label33:
        goto label27;

     label34:
        goto label12;

     label35:
        return r74;

        catch java.lang.IllegalAccessException from label01 to label03 with label04;
        catch java.lang.Exception from label01 to label03 with label05;
    }

    private static java.lang.Object mergeMap(java.lang.Object, java.lang.Object, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r6;
        java.util.Map $r4, $r5;
        java.lang.Object r0, $r2, r3;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r6 := @parameter2: java.lang.reflect.Type;

        if r0 != null goto label1;

        return r3;

     label1:
        $z0 = r0 instanceof java.util.Map;

        if $z0 == 0 goto label2;

        $r1 = class "Ljava/util/Map;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r0);

        $r5 = (java.util.Map) $r2;

        $r4 = (java.util.Map) r3;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r4);

        return r0;

     label2:
        return null;
    }

    private static java.lang.Object injectIntoMap(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MultivaluedMap, boolean, org.apache.cxf.jaxrs.model.ParameterType, org.apache.cxf.message.Message)
    {
        org.apache.cxf.jaxrs.impl.MetadataMap $r24;
        org.apache.cxf.jaxrs.model.ParameterType r18;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.util.Set $r11, $r27;
        java.util.List r41, r45;
        java.lang.reflect.Type r0, $r3, $r6, $r9, $r26;
        java.lang.reflect.Type[] $r2, $r5, $r8, $r25;
        java.util.HashMap $r7;
        java.lang.'annotation'.Annotation[] r17;
        java.lang.String $r22, $r35, r42, r46;
        java.util.Map$Entry r40, r44;
        java.util.Iterator $r12, $r15, $r28, $r31;
        org.apache.cxf.message.Message r19;
        javax.ws.rs.core.MultivaluedMap r10;
        java.lang.reflect.ParameterizedType r1, r38;
        java.lang.Class r4, r37, r39, r43;
        java.lang.Object $r13, $r14, $r16, $r20, $r21, $r23, $r29, $r30, $r32, $r33, $r34, $r36;

        r37 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.reflect.Type;

        r17 := @parameter2: java.lang.'annotation'.Annotation[];

        r10 := @parameter3: javax.ws.rs.core.MultivaluedMap;

        z3 := @parameter4: boolean;

        r18 := @parameter5: org.apache.cxf.jaxrs.model.ParameterType;

        r19 := @parameter6: org.apache.cxf.message.Message;

        r1 = (java.lang.reflect.ParameterizedType) r0;

        $r2 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r3 = $r2[0];

        r4 = (java.lang.Class) $r3;

        $r5 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r5, 1);

        $z0 = $r6 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label5;

        $r24 = new org.apache.cxf.jaxrs.impl.MetadataMap;

        specialinvoke $r24.<org.apache.cxf.jaxrs.impl.MetadataMap: void <init>()>();

        r38 = (java.lang.reflect.ParameterizedType) $r6;

        $r25 = interfaceinvoke r38.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r26 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r25, 0);

        r39 = (java.lang.Class) $r26;

        $r27 = interfaceinvoke r10.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>();

        $r28 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.util.Map$Entry) $r29;

        $r30 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getValue()>();

        r41 = (java.util.List) $r30;

        $r31 = interfaceinvoke r41.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label3;

        $r32 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.String) $r32;

        $r33 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleParameter(java.lang.String,boolean,java.lang.Class,java.lang.'annotation'.Annotation[],org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>(r42, z3, r39, r17, r18, r19);

        $r34 = interfaceinvoke r40.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r35 = (java.lang.String) $r34;

        $r36 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object convertStringToPrimitive(java.lang.String,java.lang.Class)>($r35, r4);

        interfaceinvoke $r24.<javax.ws.rs.core.MultivaluedMap: void add(java.lang.Object,java.lang.Object)>($r36, $r33);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r24;

     label5:
        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r8 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r8, 1);

        r43 = (java.lang.Class) $r9;

        $r11 = interfaceinvoke r10.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getValue()>();

        r45 = (java.util.List) $r14;

        $r15 = interfaceinvoke r45.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.lang.String) $r16;

        $r20 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleParameter(java.lang.String,boolean,java.lang.Class,java.lang.'annotation'.Annotation[],org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>(r46, z3, r43, r17, r18, r19);

        $r21 = interfaceinvoke r44.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r22 = (java.lang.String) $r21;

        $r23 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object convertStringToPrimitive(java.lang.String,java.lang.Class)>($r22, r4);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r20);

        goto label7;

     label8:
        goto label6;

     label9:
        return $r7;
    }

    private static boolean isSupportedMap(java.lang.reflect.Type)
    {
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.reflect.ParameterizedType r3;
        java.lang.reflect.Type r0, $r6, $r9;
        java.lang.reflect.Type[] $r4, $r5, $r8;
        java.lang.Class $r1, $r2, $r7, $r10;

        r0 := @parameter0: java.lang.reflect.Type;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getRawType(java.lang.reflect.Type)>(r0);

        $r2 = class "Ljava/util/Map;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label4;

        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label4;

        r3 = (java.lang.reflect.ParameterizedType) r0;

        $r4 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r4;

        if $i0 != 2 goto label4;

        $r5 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r5, 0);

        $r7 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getRawType(java.lang.reflect.Type)>($r6);

        $r8 = interfaceinvoke r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r8, 1);

        $r10 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getRawType(java.lang.reflect.Type)>($r9);

        $z2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>($r7);

        if $z2 == 0 goto label2;

        $z3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>($r10);

        if $z3 != 0 goto label1;

        $z4 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean allowedMapListValue(java.lang.Class,java.lang.reflect.Type)>($r10, $r9);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;

     label4:
        return 0;
    }

    private static boolean allowedMapListValue(java.lang.Class, java.lang.reflect.Type)
    {
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type r2, $r5;
        java.lang.reflect.Type[] $r4;
        java.lang.Class r0, $r1, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        $r1 = class "Ljava/util/List;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $r3 = (java.lang.reflect.ParameterizedType) r2;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getType(java.lang.reflect.Type[],int)>($r4, 0);

        $r6 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getRawType(java.lang.reflect.Type)>($r5);

        $z1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>($r6);

        return $z1;

     label1:
        return 0;
    }

    private static java.util.List processValues(java.lang.Class, java.lang.reflect.Type, javax.ws.rs.core.MultivaluedMap, boolean)
    {
        org.apache.cxf.jaxrs.impl.MetadataMap $r16;
        java.lang.reflect.Method[] $r11;
        java.lang.reflect.Method r28;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Set $r5;
        java.util.List $r13;
        java.lang.reflect.Type r3;
        java.lang.StringBuilder $r21, $r22, $r23;
        java.util.ArrayList $r0;
        int $i0, $i1, i2, i3, i4, i5, i6;
        java.lang.String r10, $r19, $r20, $r24, r30;
        java.util.Map$Entry r8;
        java.util.Iterator $r6, $r14;
        java.lang.Class[] $r25, $r26;
        java.lang.reflect.Field r29;
        javax.ws.rs.core.MultivaluedMap r1, $r31, r32;
        java.lang.reflect.Field[] $r18;
        java.lang.Class r2, $r4, r27;
        java.lang.Object $r7, $r9, $r12, $r15, $r17;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.reflect.Type;

        r1 := @parameter2: javax.ws.rs.core.MultivaluedMap;

        z0 := @parameter3: boolean;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        if z0 == 0 goto label15;

        $z1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r2);

        if $z1 == 0 goto label15;

        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r3);

        $r5 = interfaceinvoke r1.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z5 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label14;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        r10 = (java.lang.String) $r9;

        r27 = null;

        $r11 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i2 = lengthof $r11;

        i3 = 0;

     label02:
        if i3 >= i2 goto label04;

        r28 = $r11[i3];

        $r20 = virtualinvoke r28.<java.lang.reflect.Method: java.lang.String getName()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r24);

        if $z4 == 0 goto label03;

        $r25 = virtualinvoke r28.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r25;

        if $i1 != 1 goto label03;

        $r26 = virtualinvoke r28.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r27 = $r26[0];

        goto label04;

     label03:
        i3 = i3 + 1;

        goto label02;

     label04:
        if r27 != null goto label07;

        $r18 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i4 = lengthof $r18;

        i5 = 0;

     label05:
        if i5 >= i4 goto label07;

        r29 = $r18[i5];

        $r19 = virtualinvoke r29.<java.lang.reflect.Field: java.lang.String getName()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r10);

        if $z3 == 0 goto label06;

        r27 = virtualinvoke r29.<java.lang.reflect.Field: java.lang.Class getType()>();

        goto label07;

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        if r27 == null goto label08;

        $z2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r27);

        if $z2 == 0 goto label08;

        goto label01;

     label08:
        i6 = 0;

        $r12 = interfaceinvoke r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.util.List) $r12;

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z6 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.String) $r15;

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        if i6 >= $i0 goto label10;

        $r17 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>(i6);

        $r31 = (javax.ws.rs.core.MultivaluedMap) $r17;

        goto label11;

     label10:
        $r31 = null;

     label11:
        r32 = $r31;

        if $r31 != null goto label12;

        $r16 = new org.apache.cxf.jaxrs.impl.MetadataMap;

        specialinvoke $r16.<org.apache.cxf.jaxrs.impl.MetadataMap: void <init>()>();

        r32 = $r16;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16);

     label12:
        interfaceinvoke r32.<javax.ws.rs.core.MultivaluedMap: void add(java.lang.Object,java.lang.Object)>(r10, r30);

        i6 = i6 + 1;

        goto label09;

     label13:
        goto label01;

     label14:
        goto label16;

     label15:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

     label16:
        return $r0;
    }

    public static boolean isSupportedCollectionOrArray(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Ljava/util/Collection;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static java.lang.Object mergeCollectionsOrArrays(java.lang.Object, java.lang.Object, java.lang.reflect.Type)
    {
        java.util.Collection $r7, $r8;
        java.lang.reflect.Type r2;
        int $i0, $i1, $i2;
        java.lang.Object r0, r1, $r4, $r6;
        java.lang.Class $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.reflect.Type;

        if r0 != null goto label1;

        return r1;

     label1:
        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label2;

        $r5 = class "Ljava/util/Collection;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r0);

        $r8 = (java.util.Collection) $r6;

        $r7 = (java.util.Collection) r1;

        interfaceinvoke $r8.<java.util.Collection: boolean addAll(java.util.Collection)>($r7);

        return r0;

     label2:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r2);

        $i2 = $i0 + $i1;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r4, 0, $i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i0, $i1);

        return $r4;
    }

    static java.lang.Class getCollectionType(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3, r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r4 = null;

        $r1 = class "Ljava/util/SortedSet;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        r4 = class "Ljava/util/TreeSet;";

        goto label3;

     label1:
        $r2 = class "Ljava/util/Set;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

        r4 = class "Ljava/util/HashSet;";

        goto label3;

     label2:
        $r3 = class "Ljava/util/Collection;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label3;

        r4 = class "Ljava/util/ArrayList;";

     label3:
        return r4;
    }

    private static java.lang.Object injectIntoCollectionOrArray(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MultivaluedMap, boolean, boolean, org.apache.cxf.jaxrs.model.ParameterType, org.apache.cxf.message.Message)
    {
        org.apache.cxf.jaxrs.model.ParameterType r12;
        boolean $z0, z1, z2;
        java.lang.IllegalAccessException $r23;
        java.util.Collection $r5, $r9;
        java.lang.Exception $r21;
        java.util.List $r8, $r13, r27;
        java.lang.reflect.Type r2;
        java.lang.'annotation'.Annotation[] r15;
        int $i0, $i1, i2;
        java.lang.String $r17, $r22, $r24;
        java.util.Iterator $r6, $r10;
        org.apache.cxf.message.Message r16;
        javax.ws.rs.core.MultivaluedMap r4;
        java.lang.Class r0, $r1, r3, $r20, $r25;
        java.lang.Object $r7, $r11, $r14, $r18, $r19, r26;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r15 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MultivaluedMap;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        r12 := @parameter6: org.apache.cxf.jaxrs.model.ParameterType;

        r16 := @parameter7: org.apache.cxf.message.Message;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getCollectionType(java.lang.Class)>(r0);

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label01;

        $r25 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label02;

     label01:
        $r25 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r2);

     label02:
        r3 = $r25;

        r26 = null;

        if $r1 == null goto label07;

     label03:
        r26 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label04:
        goto label10;

     label05:
        $r23 := @caughtexception;

        $r24 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("CLASS_ACCESS_FAILURE", $r24);

        goto label10;

     label06:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void reportServerError(java.lang.String,java.lang.String)>("CLASS_INSTANTIATION_FAILURE", $r22);

        goto label10;

     label07:
        $r20 = $r25;

        if z1 == 0 goto label08;

        $i1 = 1;

        goto label09;

     label08:
        $r5 = interfaceinvoke r4.<javax.ws.rs.core.MultivaluedMap: java.util.Collection values()>();

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.List) $r7;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

     label09:
        r26 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r20, $i1);

     label10:
        if z1 == 0 goto label11;

        $r19 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleBean(java.lang.Class,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MultivaluedMap,org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message,boolean)>(r3, r15, r4, r12, r16, z2);

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void addToCollectionValues(java.lang.Object,java.lang.Object,int)>(r26, $r19, 0);

        goto label13;

     label11:
        $r9 = interfaceinvoke r4.<javax.ws.rs.core.MultivaluedMap: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.util.List) $r11;

        $r13 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.List checkPathSegment(java.util.List,java.lang.Class,org.apache.cxf.jaxrs.model.ParameterType)>(r27, r3, r12);

        i2 = 0;

     label12:
        $i0 = interfaceinvoke $r13.<java.util.List: int size()>();

        if i2 >= $i0 goto label13;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i2);

        $r17 = (java.lang.String) $r14;

        $r18 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleParameter(java.lang.String,boolean,java.lang.Class,java.lang.'annotation'.Annotation[],org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>($r17, z2, r3, r15, r12, r16);

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void addToCollectionValues(java.lang.Object,java.lang.Object,int)>(r26, $r18, i2);

        i2 = i2 + 1;

        goto label12;

     label13:
        return r26;

        catch java.lang.IllegalAccessException from label03 to label04 with label05;
        catch java.lang.Exception from label03 to label04 with label06;
    }

    private static void addToCollectionValues(java.lang.Object, java.lang.Object, int)
    {
        java.lang.Object[] $r4, $r5;
        java.util.Collection $r8;
        int i0;
        java.lang.Object r0, r1, $r7;
        java.lang.Class $r2, $r3, $r6;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        if r0 == null goto label3;

        $z0 = r1 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r6 = class "Ljava/util/Collection;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        $r8 = (java.util.Collection) $r7;

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        goto label3;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r1, i0, r0);

        goto label3;

     label2:
        $r4 = (java.lang.Object[]) r1;

        $r5 = (java.lang.Object[]) $r4;

        $r5[i0] = r0;

     label3:
        return;
    }

    private static java.util.List checkPathSegment(java.util.List, java.lang.Class, org.apache.cxf.jaxrs.model.ParameterType)
    {
        java.lang.String[] $r9;
        java.util.ArrayList $r5;
        org.apache.cxf.jaxrs.model.ParameterType r0, $r1;
        int i0, $i1, i2;
        java.lang.String r8, r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r6;
        java.util.List r2;
        java.lang.Class r3, $r4;
        java.lang.Object $r7;

        r2 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.Class;

        r0 := @parameter2: org.apache.cxf.jaxrs.model.ParameterType;

        $r1 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType PATH>;

        if r0 != $r1 goto label1;

        $r4 = class "Ljavax/ws/rs/core/PathSegment;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if $z0 != 0 goto label2;

     label1:
        return r2;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r8, "/");

        i0 = lengthof $r9;

        i2 = 0;

     label4:
        if i2 >= i0 goto label6;

        r10 = $r9[i2];

        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i1 == 0 goto label5;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r10);

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        $z2 = virtualinvoke r8.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z2 == 0 goto label7;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("");

     label7:
        goto label3;

     label8:
        return $r5;
    }

    public static java.lang.Object createParameterObject(java.util.List, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], java.lang.String, boolean, org.apache.cxf.jaxrs.model.ParameterType, org.apache.cxf.message.Message)
    {
        org.apache.cxf.jaxrs.impl.MetadataMap $r7;
        java.lang.'annotation'.Annotation[] r1;
        org.apache.cxf.jaxrs.model.ParameterType r2, $r4;
        int $i0, $i1, $i2;
        java.lang.String r9, $r12, r14, $r15;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.message.Message r3;
        java.util.List r11;
        java.lang.reflect.Type r8;
        java.lang.Class r0, $r10;
        java.lang.Object $r5, $r6, r13;

        r11 := @parameter0: java.util.List;

        r0 := @parameter1: java.lang.Class;

        r8 := @parameter2: java.lang.reflect.Type;

        r1 := @parameter3: java.lang.'annotation'.Annotation[];

        r9 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        r2 := @parameter6: org.apache.cxf.jaxrs.model.ParameterType;

        r3 := @parameter7: org.apache.cxf.message.Message;

        if r11 != null goto label06;

        if r9 == null goto label01;

        r11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r9);

        goto label06;

     label01:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label04;

        $r10 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r10 != r0 goto label02;

        $r12 = "false";

        goto label03;

     label02:
        $r12 = "0";

     label03:
        r11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r12);

        goto label06;

     label04:
        $z2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r0);

        if $z2 == 0 goto label05;

        r11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label06;

     label05:
        return null;

     label06:
        r13 = null;

        $z3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r0);

        if $z3 == 0 goto label07;

        $r7 = new org.apache.cxf.jaxrs.impl.MetadataMap;

        specialinvoke $r7.<org.apache.cxf.jaxrs.impl.MetadataMap: void <init>()>();

        interfaceinvoke $r7.<javax.ws.rs.core.MultivaluedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("", r11);

        r13 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object injectIntoCollectionOrArray(java.lang.Class,java.lang.reflect.Type,java.lang.'annotation'.Annotation[],javax.ws.rs.core.MultivaluedMap,boolean,boolean,org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>(r0, r8, r1, $r7, 0, z0, r2, r3);

        goto label13;

     label07:
        r14 = null;

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        if $i0 <= 0 goto label12;

        $r4 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType PATH>;

        if r2 != $r4 goto label08;

        $z4 = 1;

        goto label09;

     label08:
        $z4 = 0;

     label09:
        if $z4 == 0 goto label10;

        $i1 = interfaceinvoke r11.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r6 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>($i2);

        $r15 = (java.lang.String) $r6;

        goto label11;

     label10:
        $r5 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (java.lang.String) $r5;

     label11:
        r14 = $r15;

     label12:
        if r14 == null goto label13;

        r13 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object handleParameter(java.lang.String,boolean,java.lang.Class,java.lang.'annotation'.Annotation[],org.apache.cxf.jaxrs.model.ParameterType,org.apache.cxf.message.Message)>(r14, z0, r0, r1, r2, r3);

     label13:
        return r13;
    }

    public static org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy createThreadLocalProxy(java.lang.Class)
    {
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalRequest $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalSecurityContext $r20;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders $r17;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext $r16;
        java.lang.ClassLoader $r9;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalInvocationHandler $r11;
        java.lang.String $r14, $r15;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalUriInfo $r23;
        java.lang.Class[] $r10;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalContextResolver $r19;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy $r13, r24;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpHeaders $r22;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalProtocolHeaders $r21;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.Object $r12;

        r0 := @parameter0: java.lang.Class;

        r24 = null;

        $r1 = class "Ljavax/ws/rs/core/UriInfo;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label01;

        $r23 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalUriInfo;

        specialinvoke $r23.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalUriInfo: void <init>()>();

        r24 = $r23;

        goto label08;

     label01:
        $r2 = class "Ljavax/ws/rs/core/HttpHeaders;";

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label02;

        $r22 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpHeaders;

        specialinvoke $r22.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpHeaders: void <init>()>();

        r24 = $r22;

        goto label08;

     label02:
        $r3 = class "Lorg/apache/cxf/jaxrs/ext/ProtocolHeaders;";

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label03;

        $r21 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalProtocolHeaders;

        specialinvoke $r21.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalProtocolHeaders: void <init>()>();

        r24 = $r21;

        goto label08;

     label03:
        $r4 = class "Ljavax/ws/rs/core/SecurityContext;";

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 == 0 goto label04;

        $r20 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalSecurityContext;

        specialinvoke $r20.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalSecurityContext: void <init>()>();

        r24 = $r20;

        goto label08;

     label04:
        $r5 = class "Ljavax/ws/rs/ext/ContextResolver;";

        $z4 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z4 == 0 goto label05;

        $r19 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalContextResolver;

        specialinvoke $r19.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalContextResolver: void <init>()>();

        r24 = $r19;

        goto label08;

     label05:
        $r6 = class "Ljavax/ws/rs/core/Request;";

        $z5 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z5 == 0 goto label06;

        $r18 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalRequest;

        specialinvoke $r18.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalRequest: void <init>()>();

        r24 = $r18;

        goto label08;

     label06:
        $r7 = class "Ljavax/ws/rs/ext/Providers;";

        $z6 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z6 == 0 goto label07;

        $r17 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders;

        specialinvoke $r17.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalProviders: void <init>()>();

        r24 = $r17;

        goto label08;

     label07:
        $r8 = class "Lorg/apache/cxf/jaxrs/ext/MessageContext;";

        $z7 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z7 == 0 goto label08;

        $r16 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext;

        specialinvoke $r16.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalMessageContext: void <init>()>();

        r24 = $r16;

     label08:
        if r24 != null goto label09;

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z8 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isServletApiContext(java.lang.String)>($r14);

        if $z8 == 0 goto label09;

        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r24 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy createThreadLocalServletApiContext(java.lang.String)>($r15);

     label09:
        if r24 != null goto label10;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r10 = newarray (java.lang.Class)[2];

        $r10[0] = r0;

        $r10[1] = class "Lorg/apache/cxf/jaxrs/impl/tl/ThreadLocalProxy;";

        $r11 = new org.apache.cxf.jaxrs.impl.tl.ThreadLocalInvocationHandler;

        specialinvoke $r11.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalInvocationHandler: void <init>()>();

        $r12 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r9, $r10, $r11);

        $r13 = (org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy) $r12;

        return $r13;

     label10:
        return r24;
    }

    private static boolean isServletApiContext(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("javax.servlet.");

        return $z0;
    }

    private static org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy createThreadLocalServletApiContext(java.lang.String)
    {
        java.lang.Throwable $r5;
        java.lang.RuntimeException $r6;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy $r10;
        java.lang.Class $r8;
        java.lang.Object $r9;
        java.lang.String r0, $r1, $r2, $r3, $r4, r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        r7 = null;

        $r1 = "javax.servlet.http.HttpServletRequest";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r7 = "org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletRequest";

        goto label4;

     label1:
        $r2 = "javax.servlet.http.HttpServletResponse";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        r7 = "org.apache.cxf.jaxrs.impl.tl.ThreadLocalHttpServletResponse";

        goto label4;

     label2:
        $r3 = "javax.servlet.ServletContext";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        r7 = "org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletContext";

        goto label4;

     label3:
        $r4 = "javax.servlet.ServletConfig";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

        r7 = "org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletConfig";

     label4:
        $r8 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>(r7, class "Lorg/apache/cxf/jaxrs/utils/InjectionUtils;");

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

        $r10 = (org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy) $r9;

     label5:
        return $r10;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static void injectContextProxiesAndApplication(org.apache.cxf.jaxrs.model.AbstractResourceInfo, java.lang.Object, javax.ws.rs.core.Application)
    {
        javax.ws.rs.core.Application r9;
        java.util.Map $r1;
        java.lang.reflect.Method r15;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r14;
        java.util.Iterator $r3, $r5;
        java.util.Set $r2;
        java.lang.Class[] $r12;
        java.lang.reflect.Field r17;
        org.apache.cxf.jaxrs.model.AbstractResourceInfo r0;
        java.util.List $r4;
        java.lang.Object $r6, r8, $r10, $r11, $r16, $r18;
        java.lang.Class $r7, $r13;

        r0 := @parameter0: org.apache.cxf.jaxrs.model.AbstractResourceInfo;

        r8 := @parameter1: java.lang.Object;

        r9 := @parameter2: javax.ws.rs.core.Application;

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean contextsAvailable()>();

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean isSingleton()>();

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.util.Map getContextMethods()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        r15 = (java.lang.reflect.Method) $r11;

        $r12 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r13 = $r12[0];

        if $r13 != class "Ljavax/ws/rs/core/Application;" goto label04;

        $r16 = r9;

        goto label05;

     label04:
        $r16 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy getContextSetterProxy(java.lang.reflect.Method)>(r15);

     label05:
        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectThroughMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object)>(r8, r15, $r16);

        goto label03;

     label06:
        $r4 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.util.List getContextFields()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.reflect.Field) $r6;

        $r7 = virtualinvoke r17.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r7 != class "Ljavax/ws/rs/core/Application;" goto label08;

        $r18 = r9;

        goto label09;

     label08:
        $r18 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy getContextFieldProxy(java.lang.reflect.Field)>(r17);

     label09:
        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectFieldValue(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>(r17, r8, $r18);

        goto label07;

     label10:
        return;
    }

    public static void injectContextProxies(org.apache.cxf.jaxrs.model.AbstractResourceInfo, java.lang.Object)
    {
        org.apache.cxf.jaxrs.model.AbstractResourceInfo r0;
        java.lang.Object r1;

        r0 := @parameter0: org.apache.cxf.jaxrs.model.AbstractResourceInfo;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectContextProxiesAndApplication(org.apache.cxf.jaxrs.model.AbstractResourceInfo,java.lang.Object,javax.ws.rs.core.Application)>(r0, r1, null);

        return;
    }

    public static void injectContextField(org.apache.cxf.jaxrs.model.AbstractResourceInfo, java.lang.reflect.Field, java.lang.Object, java.lang.Object)
    {
        org.apache.cxf.jaxrs.model.AbstractResourceInfo r0;
        java.lang.Object r3, r4;
        java.lang.reflect.Field r1;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy $r2;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.jaxrs.model.AbstractResourceInfo;

        r1 := @parameter1: java.lang.reflect.Field;

        r4 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean isSingleton()>();

        if $z0 != 0 goto label1;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectFieldValue(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>(r1, r4, r3);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy getContextFieldProxy(java.lang.reflect.Field)>(r1);

        if $r2 == null goto label2;

        interfaceinvoke $r2.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy: void set(java.lang.Object)>(r3);

     label2:
        return;
    }

    public static void injectContexts(java.lang.Object, org.apache.cxf.jaxrs.model.AbstractResourceInfo, org.apache.cxf.message.Message)
    {
        org.apache.cxf.jaxrs.model.AbstractResourceInfo r0;
        org.apache.cxf.message.Message r2;
        java.lang.Object r1;
        boolean $z0;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.apache.cxf.jaxrs.model.AbstractResourceInfo;

        r2 := @parameter2: org.apache.cxf.message.Message;

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean contextsAvailable()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectContextMethods(java.lang.Object,org.apache.cxf.jaxrs.model.AbstractResourceInfo,org.apache.cxf.message.Message)>(r1, r0, r2);

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectContextFields(java.lang.Object,org.apache.cxf.jaxrs.model.AbstractResourceInfo,org.apache.cxf.message.Message)>(r1, r0, r2);

     label1:
        return;
    }

    public static void injectContextMethods(java.lang.Object, org.apache.cxf.jaxrs.model.AbstractResourceInfo, org.apache.cxf.message.Message)
    {
        java.util.Map $r1;
        java.lang.reflect.Method r7;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        org.apache.cxf.message.Message r10;
        java.util.Set $r2;
        java.lang.Class[] $r8;
        org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy $r16;
        org.apache.cxf.jaxrs.model.AbstractResourceInfo r0;
        java.lang.reflect.Type $r12;
        java.lang.reflect.Type[] $r11;
        java.lang.Object $r4, $r6, $r13, $r15, r17;
        java.lang.Class $r9, $r14;

        r17 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.apache.cxf.jaxrs.model.AbstractResourceInfo;

        r10 := @parameter2: org.apache.cxf.message.Message;

        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.util.Map getContextMethods()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = (java.lang.reflect.Method) $r6;

        $r8 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r9 = $r8[0];

        if $r9 != class "Ljavax/ws/rs/core/Application;" goto label2;

        $z1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean isSingleton()>();

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        $r11 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $r12 = $r11[0];

        $r13 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.Class) $r13;

        $r15 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createContextValue(org.apache.cxf.message.Message,java.lang.reflect.Type,java.lang.Class)>(r10, $r12, $r14);

        if $r15 == null goto label4;

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean isSingleton()>();

        if $z0 != 0 goto label3;

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectThroughMethod(java.lang.Object,java.lang.reflect.Method,java.lang.Object,org.apache.cxf.message.Message)>(r17, r7, $r15, r10);

        goto label4;

     label3:
        $r16 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy getContextSetterProxy(java.lang.reflect.Method)>(r7);

        if $r16 == null goto label4;

        interfaceinvoke $r16.<org.apache.cxf.jaxrs.impl.tl.ThreadLocalProxy: void set(java.lang.Object)>($r15);

     label4:
        goto label1;

     label5:
        return;
    }

    public static void injectContextFields(java.lang.Object, org.apache.cxf.jaxrs.model.AbstractResourceInfo, org.apache.cxf.message.Message)
    {
        java.util.Iterator $r2;
        org.apache.cxf.message.Message r6;
        java.lang.reflect.Field r4;
        org.apache.cxf.jaxrs.model.AbstractResourceInfo r0;
        java.util.List $r1;
        java.lang.reflect.Type $r7;
        java.lang.Object $r3, $r9, r10;
        java.lang.Class $r5, $r8;
        boolean $z0, $z1;

        r10 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.apache.cxf.jaxrs.model.AbstractResourceInfo;

        r6 := @parameter2: org.apache.cxf.message.Message;

        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: java.util.List getContextFields()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.reflect.Field) $r3;

        $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r5 != class "Ljavax/ws/rs/core/Application;" goto label2;

        $z0 = virtualinvoke r0.<org.apache.cxf.jaxrs.model.AbstractResourceInfo: boolean isSingleton()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.Object createContextValue(org.apache.cxf.message.Message,java.lang.reflect.Type,java.lang.Class)>(r6, $r7, $r8);

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void injectContextField(org.apache.cxf.jaxrs.model.AbstractResourceInfo,java.lang.reflect.Field,java.lang.Object,java.lang.Object)>(r0, r4, r10, $r9);

        goto label1;

     label3:
        return;
    }

    public static javax.ws.rs.core.MultivaluedMap extractValuesFromBean(java.lang.Object, java.lang.String)
    {
        org.apache.cxf.jaxrs.impl.MetadataMap $r0;
        java.lang.Object r1;
        java.lang.String r2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.cxf.jaxrs.impl.MetadataMap;

        specialinvoke $r0.<org.apache.cxf.jaxrs.impl.MetadataMap: void <init>()>();

        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void fillInValuesFromBean(java.lang.Object,java.lang.String,javax.ws.rs.core.MultivaluedMap)>(r1, r2, $r0);

        return $r0;
    }

    private static boolean isBooleanType(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r1 == r0 goto label1;

        if class "Ljava/lang/Boolean;" != r0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static void fillInValuesFromBean(java.lang.Object, java.lang.String, javax.ws.rs.core.MultivaluedMap)
    {
        byte $b6, $b7;
        java.util.Map $r25, $r26;
        java.util.Set $r27, $r43;
        java.lang.StringBuilder $r7, $r10, $r12, $r31, $r32, $r33, $r36, $r46, $r47, $r48, $r49;
        java.lang.Object[] $r44;
        java.util.ArrayList $r42;
        java.lang.String $r4, $r6, $r8, $r9, $r11, r13, $r14, $r15, $r16, $r35, $r37, $r39, $r45, r51;
        java.util.Map$Entry r30;
        java.lang.Class[] $r5;
        java.lang.reflect.Method[] $r2;
        java.lang.reflect.Method r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.util.List $r41, r52;
        java.lang.reflect.Type $r24;
        int i0, $i1, $i2, $i3, i4;
        java.util.Iterator $r28;
        javax.ws.rs.core.MultivaluedMap r23;
        java.lang.Object r0, $r17, $r29, $r34, $r38;
        java.lang.Class $r1, $r18, $r19, $r20, $r21, $r22, $r40, $r50;

        r0 := @parameter0: java.lang.Object;

        r13 := @parameter1: java.lang.String;

        r23 := @parameter2: javax.ws.rs.core.MultivaluedMap;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r2;

        i4 = 0;

     label01:
        if i4 >= i0 goto label21;

        r3 = $r2[i4];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 != 0 goto label02;

        $r50 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z13 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isBooleanType(java.lang.Class)>($r50);

        if $z13 == 0 goto label20;

        $z14 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z14 == 0 goto label20;

     label02:
        $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r5;

        if $i1 != 0 goto label20;

        if $z0 == 0 goto label03;

        $b7 = 3;

        $b6 = 3;

        goto label04;

     label03:
        $b7 = 2;

        $b6 = 2;

     label04:
        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 > $b6 goto label05;

        goto label20;

     label05:
        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($b7);

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i3 != 1 goto label06;

        r51 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        goto label07;

     label06:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>(1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r51 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $z1 = virtualinvoke r13.<java.lang.String: boolean contains(java.lang.CharSequence)>(r51);

        if $z1 != 0 goto label20;

        $r14 = "class";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r51);

        if $z2 != 0 goto label20;

        $r15 = "declaringClass";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r51);

        if $z3 == 0 goto label08;

        goto label20;

     label08:
        $r16 = "";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z4 != 0 goto label09;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r17 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Object extractFromMethod(java.lang.Object,java.lang.reflect.Method)>(r0, r3);

        if $r17 != null goto label10;

        goto label20;

     label10:
        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $z5 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isPrimitive(java.lang.Class)>($r18);

        if $z5 == 0 goto label11;

        interfaceinvoke r23.<javax.ws.rs.core.MultivaluedMap: void putSingle(java.lang.Object,java.lang.Object)>(r51, $r17);

        goto label20;

     label11:
        $r19 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $z6 = virtualinvoke $r19.<java.lang.Class: boolean isEnum()>();

        if $z6 == 0 goto label12;

        $r45 = virtualinvoke $r17.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r23.<javax.ws.rs.core.MultivaluedMap: void putSingle(java.lang.Object,java.lang.Object)>(r51, $r45);

        goto label20;

     label12:
        $r20 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $z7 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>($r20);

        if $z7 == 0 goto label16;

        $r40 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $z11 = virtualinvoke $r40.<java.lang.Class: boolean isArray()>();

        if $z11 == 0 goto label13;

        $r44 = newarray (java.lang.Object)[1];

        $r44[0] = $r17;

        r52 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r44);

        goto label15;

     label13:
        $z12 = $r17 instanceof java.util.Set;

        if $z12 == 0 goto label14;

        $r42 = new java.util.ArrayList;

        $r43 = (java.util.Set) $r17;

        specialinvoke $r42.<java.util.ArrayList: void <init>(java.util.Collection)>($r43);

        r52 = $r42;

        goto label15;

     label14:
        $r41 = (java.util.List) $r17;

        r52 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List)>($r41);

     label15:
        interfaceinvoke r23.<javax.ws.rs.core.MultivaluedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r51, r52);

        goto label20;

     label16:
        $r21 = class "Ljava/util/Map;";

        $r22 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $z8 = virtualinvoke $r21.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r22);

        if $z8 == 0 goto label19;

        $r24 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $z9 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedMap(java.lang.reflect.Type)>($r24);

        if $z9 == 0 goto label20;

        $r25 = (java.util.Map) $r17;

        $r26 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r25);

        $r27 = interfaceinvoke $r26.<java.util.Map: java.util.Set entrySet()>();

        $r28 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z10 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label18;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.util.Map$Entry) $r29;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r34 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r35 = virtualinvoke $r34.<java.lang.Object: java.lang.String toString()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r39 = virtualinvoke $r38.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r23.<javax.ws.rs.core.MultivaluedMap: void add(java.lang.Object,java.lang.Object)>($r37, $r39);

        goto label17;

     label18:
        goto label20;

     label19:
        staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: void fillInValuesFromBean(java.lang.Object,java.lang.String,javax.ws.rs.core.MultivaluedMap)>($r17, r51, r23);

     label20:
        i4 = i4 + 1;

        goto label01;

     label21:
        return;
    }

    public static java.util.Map getParametersFromBeanClass(java.lang.Class, org.apache.cxf.jaxrs.model.ParameterType, boolean)
    {
        org.apache.cxf.jaxrs.model.Parameter $r9;
        java.lang.reflect.Method[] $r2;
        java.util.LinkedHashMap $r0;
        org.apache.cxf.jaxrs.model.ParameterType r10;
        byte $b5, $b6;
        int i0, $i1, $i2, i3;
        java.lang.String $r4, $r6, $r7;
        java.lang.reflect.Method r3;
        boolean $z0, z1, $z2, $z3, $z4;
        java.lang.Class[] $r5;
        java.lang.Class r1, $r8, $r11, $r12;

        r1 := @parameter0: java.lang.Class;

        r10 := @parameter1: org.apache.cxf.jaxrs.model.ParameterType;

        z1 := @parameter2: boolean;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label8;

        r3 = $r2[i3];

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 != 0 goto label2;

        $r12 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isBooleanType(java.lang.Class)>($r12);

        if $z3 == 0 goto label7;

        $z4 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z4 == 0 goto label7;

     label2:
        $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r5;

        if $i1 != 0 goto label7;

        if $z0 == 0 goto label3;

        $b6 = 3;

        $b5 = 3;

        goto label4;

     label3:
        $b6 = 2;

        $b5 = 2;

     label4:
        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 > $b5 goto label5;

        goto label7;

     label5:
        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($b6);

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r8 == class "Ljava/lang/Class;" goto label7;

        if z1 == 0 goto label6;

        $z2 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean canPropertyBeIgnored(java.lang.reflect.Method,java.lang.String)>(r3, $r7);

        if $z2 == 0 goto label6;

        goto label7;

     label6:
        $r9 = new org.apache.cxf.jaxrs.model.Parameter;

        specialinvoke $r9.<org.apache.cxf.jaxrs.model.Parameter: void <init>(org.apache.cxf.jaxrs.model.ParameterType,java.lang.String)>(r10, $r7);

        $r11 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11);

     label7:
        i3 = i3 + 1;

        goto label1;

     label8:
        return $r0;
    }

    private static boolean canPropertyBeIgnored(java.lang.reflect.Method, java.lang.String)
    {
        java.lang.'annotation'.Annotation[] $r1;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r5, $r6, r7;
        java.lang.reflect.Method r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        r7 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = $r1[i1];

        $r3 = interfaceinvoke r2.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = "org.apache.cxf.aegis.type.java5.IgnoreProperty";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r6 = "javax.xml.bind.annotation.XmlTransient";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    public static boolean isPrimitive(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $r1 = class "Ljava/lang/Number;";

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label1;

        $r2 = class "Ljava/lang/Boolean;";

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 != 0 goto label1;

        $r3 = class "Ljava/lang/Character;";

        $z3 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 != 0 goto label1;

        if class "Ljava/lang/String;" != r0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public static java.lang.String decodeValue(java.lang.String, boolean, org.apache.cxf.jaxrs.model.ParameterType)
    {
        org.apache.cxf.jaxrs.model.ParameterType r0, $r1, $r4;
        java.lang.String r2, $r3, $r5;
        boolean z0;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r0 := @parameter2: org.apache.cxf.jaxrs.model.ParameterType;

        if z0 != 0 goto label1;

        return r2;

     label1:
        $r1 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType PATH>;

        if r0 == $r1 goto label2;

        $r4 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType MATRIX>;

        if r0 != $r4 goto label3;

     label2:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String pathDecode(java.lang.String)>(r2);

        return $r3;

     label3:
        $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String urlDecode(java.lang.String)>(r2);

        return $r5;
    }

    public static void invokeLifeCycleMethod(java.lang.Object, java.lang.reflect.Method)
    {
        java.lang.Object[] $r2;
        java.lang.String $r6, $r10, $r18, $r22;
        java.lang.reflect.Method $r1, r27;
        java.lang.IllegalAccessException $r3;
        javax.ws.rs.InternalServerErrorException $r11;
        java.lang.reflect.InvocationTargetException $r15;
        javax.ws.rs.core.Response $r14, $r26;
        javax.ws.rs.core.Response$ResponseBuilder $r12, $r13, $r24, $r25;
        javax.ws.rs.WebApplicationException $r23;
        java.lang.Object r0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9, $r16, $r17, $r19, $r20, $r21;

        r0 := @parameter0: java.lang.Object;

        r27 := @parameter1: java.lang.reflect.Method;

        if r27 == null goto label5;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Method checkProxy(java.lang.reflect.Method,java.lang.Object)>(r27, r0);

     label1:
        $r2 = newarray (java.lang.Object)[0];

        virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r2);

     label2:
        goto label5;

     label3:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r18 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be invoked");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to InvocationTargetException");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new javax.ws.rs.WebApplicationException;

        $r24 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder serverError()>();

        $r25 = virtualinvoke $r24.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r22);

        $r26 = virtualinvoke $r25.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke $r23.<javax.ws.rs.WebApplicationException: void <init>(javax.ws.rs.core.Response)>($r26);

        throw $r23;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method ");

        $r6 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be invoked");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to IllegalAccessException");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new javax.ws.rs.InternalServerErrorException;

        $r12 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder serverError()>();

        $r13 = virtualinvoke $r12.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder entity(java.lang.Object)>($r10);

        $r14 = virtualinvoke $r13.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        specialinvoke $r11.<javax.ws.rs.InternalServerErrorException: void <init>(javax.ws.rs.core.Response)>($r14);

        throw $r11;

     label5:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public static java.lang.Object convertStringToPrimitive(java.lang.String, java.lang.Class)
    {
        java.lang.Throwable $r14;
        java.lang.Object[] $r3, $r8, $r17;
        java.lang.reflect.Constructor $r2;
        java.lang.String r4, $r9;
        java.lang.reflect.Method $r7, $r16;
        boolean $z0, $z1;
        java.lang.Class[] $r1, $r6, $r15;
        java.lang.RuntimeException $r13, $r21;
        java.lang.Exception $r12, $r20;
        java.lang.Class r0;
        java.lang.Object $r5, $r10, $r11, $r18, $r19;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        if class "Ljava/lang/String;" != r0 goto label01;

        return r4;

     label01:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label02;

        $r11 = staticinvoke <org.apache.cxf.common.util.PrimitiveUtils: java.lang.Object read(java.lang.String,java.lang.Class)>(r4, r0);

        return $r11;

     label02:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label06;

     label03:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/String;";

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r6);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r8[0] = $r9;

        $r10 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

     label04:
        return $r10;

     label05:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

     label06:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/String;";

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r1);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r4;

        $r5 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label07:
        return $r5;

     label08:
        $r14 := @caughtexception;

     label09:
        $r15 = newarray (java.lang.Class)[1];

        $r15[0] = class "Ljava/lang/String;";

        $r16 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("valueOf", $r15);

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r4;

        $r18 = virtualinvoke $r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r17);

        $r19 = virtualinvoke r0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r18);

     label10:
        return $r19;

     label11:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    public static java.lang.Class getRawResponseClass(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.cxf.common.util.ClassHelper: java.lang.Class getRealClassFromClass(java.lang.Class)>($r1);

        return $r2;

     label1:
        return null;
    }

    public static java.lang.reflect.Type getGenericResponseType(java.lang.reflect.Method, java.lang.Class, java.lang.Object, java.lang.Class, org.apache.cxf.message.Exchange)
    {
        javax.ws.rs.core.GenericEntity $r8;
        org.apache.cxf.message.Exchange r10;
        java.lang.reflect.Type $r7, $r9, r11;
        java.lang.Object r0;
        java.lang.Class $r1, $r2, $r4, r5, r6;
        java.lang.reflect.Method r3;
        boolean $z0, $z1;

        r3 := @parameter0: java.lang.reflect.Method;

        r6 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Class;

        r10 := @parameter4: org.apache.cxf.message.Exchange;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = class "Ljavax/ws/rs/core/GenericEntity;";

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label2;

        $r8 = (javax.ws.rs.core.GenericEntity) r0;

        $r9 = virtualinvoke $r8.<javax.ws.rs.core.GenericEntity: java.lang.reflect.Type getType()>();

        r11 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type processGenericTypeIfNeeded(java.lang.Class,java.lang.Class,java.lang.reflect.Type)>(r6, r5, $r9);

        goto label5;

     label2:
        if r3 == null goto label3;

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z1 != 0 goto label4;

     label3:
        r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        goto label5;

     label4:
        $r7 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        r11 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type processGenericTypeIfNeeded(java.lang.Class,java.lang.Class,java.lang.reflect.Type)>(r6, r5, $r7);

     label5:
        return r11;
    }

    public static java.lang.Class updateParamClassToTypeIfNeeded(java.lang.Class, java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        java.lang.Class $r1, r2;
        boolean $z0, $z1;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Class) r0;

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z1 == 0 goto label1;

        r2 = (java.lang.Class) r0;

     label1:
        return r2;
    }

    public static java.lang.reflect.Type processGenericTypeIfNeeded(java.lang.Class, java.lang.Class, java.lang.reflect.Type)
    {
        org.apache.cxf.jaxrs.utils.ParameterizedCollectionType $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.reflect.TypeVariable r8, $r12;
        java.lang.reflect.ParameterizedType $r1, $r5;
        java.lang.reflect.Type $r3, $r7, $r10, r13;
        java.lang.reflect.Type[] $r2, $r6;
        java.lang.Class r0, $r4, r9, $r14;

        r9 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        r13 := @parameter2: java.lang.reflect.Type;

        $z0 = r13 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r12 = (java.lang.reflect.TypeVariable) r13;

        r13 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getSuperType(java.lang.Class,java.lang.reflect.TypeVariable)>(r9, $r12);

        goto label4;

     label1:
        $z1 = r13 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label4;

        $r1 = (java.lang.reflect.ParameterizedType) r13;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r3 = $r2[0];

        $z2 = $r3 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label4;

        $r4 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getRawType(java.lang.reflect.Type)>(r13);

        $z3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>($r4);

        if $z3 == 0 goto label4;

        $r5 = (java.lang.reflect.ParameterizedType) r13;

        $r6 = interfaceinvoke $r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r7 = $r6[0];

        r8 = (java.lang.reflect.TypeVariable) $r7;

        $r10 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.reflect.Type getSuperType(java.lang.Class,java.lang.reflect.TypeVariable)>(r9, r8);

        $z4 = $r10 instanceof java.lang.Class;

        if $z4 == 0 goto label2;

        $r14 = (java.lang.Class) $r10;

        goto label3;

     label2:
        $r14 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type,int)>($r10, 0);

     label3:
        $r11 = new org.apache.cxf.jaxrs.utils.ParameterizedCollectionType;

        specialinvoke $r11.<org.apache.cxf.jaxrs.utils.ParameterizedCollectionType: void <init>(java.lang.Class)>($r14);

        r13 = $r11;

     label4:
        if r13 == null goto label5;

        if r13 != class "Ljava/lang/Object;" goto label6;

     label5:
        r13 = r0;

     label6:
        return r13;
    }

    public static java.lang.Object getEntity(java.lang.Object)
    {
        javax.ws.rs.core.GenericEntity $r1;
        java.lang.Object r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof javax.ws.rs.core.GenericEntity;

        if $z0 == 0 goto label1;

        $r1 = (javax.ws.rs.core.GenericEntity) r0;

        $r2 = virtualinvoke $r1.<javax.ws.rs.core.GenericEntity: java.lang.Object getEntity()>();

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;
        java.util.ResourceBundle $r1;

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String IGNORE_MATRIX_PARAMETERS> = "ignore.matrix.parameters";

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String PARAM_HANDLERS_FIRST> = "check.parameter.handlers.first";

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String HTTP_SERVLET_RESPONSE_CLASS_NAME> = "javax.servlet.http.HttpServletResponse";

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String HTTP_SERVLET_REQUEST_CLASS_NAME> = "javax.servlet.http.HttpServletRequest";

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String SERVLET_CONTEXT_CLASS_NAME> = "javax.servlet.ServletContext";

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.String SERVLET_CONFIG_CLASS_NAME> = "javax.servlet.ServletConfig";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/utils/InjectionUtils;");

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.logging.Logger LOG> = $r0;

        $r1 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/utils/InjectionUtils;");

        <org.apache.cxf.jaxrs.utils.InjectionUtils: java.util.ResourceBundle BUNDLE> = $r1;

        return;
    }
}
