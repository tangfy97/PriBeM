public class org.bouncycastle.jce.provider.JCEMac extends javax.crypto.MacSpi implements org.bouncycastle.jce.provider.PBE
{
    private org.bouncycastle.crypto.Mac macEngine;
    private int pbeType;
    private int pbeHash;
    private int keySize;

    protected void <init>(org.bouncycastle.crypto.Mac)
    {
        org.bouncycastle.crypto.Mac r1;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        r1 := @parameter0: org.bouncycastle.crypto.Mac;

        specialinvoke r0.<javax.crypto.MacSpi: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JCEMac: int pbeType> = 2;

        r0.<org.bouncycastle.jce.provider.JCEMac: int pbeHash> = 1;

        r0.<org.bouncycastle.jce.provider.JCEMac: int keySize> = 160;

        r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine> = r1;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.Mac, int, int, int)
    {
        int i0, i1, i2;
        org.bouncycastle.crypto.Mac r1;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        r1 := @parameter0: org.bouncycastle.crypto.Mac;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<javax.crypto.MacSpi: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JCEMac: int pbeType> = 2;

        r0.<org.bouncycastle.jce.provider.JCEMac: int pbeHash> = 1;

        r0.<org.bouncycastle.jce.provider.JCEMac: int keySize> = 160;

        r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine> = r1;

        r0.<org.bouncycastle.jce.provider.JCEMac: int pbeType> = i0;

        r0.<org.bouncycastle.jce.provider.JCEMac: int pbeHash> = i1;

        r0.<org.bouncycastle.jce.provider.JCEMac: int keySize> = i2;

        return;
    }

    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        byte[] $r4, $r8, $r10;
        org.bouncycastle.crypto.params.ParametersWithIV $r6;
        java.security.InvalidAlgorithmParameterException $r2, $r13;
        javax.crypto.spec.IvParameterSpec $r9;
        java.security.spec.AlgorithmParameterSpec r1;
        org.bouncycastle.crypto.Mac $r16;
        org.bouncycastle.crypto.params.KeyParameter $r3, $r7;
        boolean $z0, $z1, $z2;
        org.bouncycastle.crypto.CipherParameters $r12, r15;
        org.bouncycastle.jce.provider.JCEMac r5;
        java.security.Key r0;
        org.bouncycastle.jce.provider.JCEPBEKey r11;
        java.security.InvalidKeyException $r14;

        r5 := @this: org.bouncycastle.jce.provider.JCEMac;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if r0 != null goto label1;

        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key is null");

        throw $r14;

     label1:
        $z0 = r0 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z0 == 0 goto label5;

        r11 = (org.bouncycastle.jce.provider.JCEPBEKey) r0;

        $r12 = virtualinvoke r11.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r12 == null goto label2;

        r15 = virtualinvoke r11.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        goto label4;

     label2:
        $z2 = r1 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z2 == 0 goto label3;

        r15 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec)>(r11, r1);

        goto label4;

     label3:
        $r13 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r13.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw $r13;

     label4:
        goto label8;

     label5:
        $z1 = r1 instanceof javax.crypto.spec.IvParameterSpec;

        if $z1 == 0 goto label6;

        $r6 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r7 = new org.bouncycastle.crypto.params.KeyParameter;

        $r8 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r7.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r8);

        $r9 = (javax.crypto.spec.IvParameterSpec) r1;

        $r10 = virtualinvoke $r9.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r6.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r7, $r10);

        r15 = $r6;

        goto label8;

     label6:
        if r1 != null goto label7;

        $r3 = new org.bouncycastle.crypto.params.KeyParameter;

        $r4 = interfaceinvoke r0.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r3.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r4);

        r15 = $r3;

        goto label8;

     label7:
        $r2 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r2.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw $r2;

     label8:
        $r16 = r5.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r16.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>(r15);

        return;
    }

    protected int engineGetMacLength()
    {
        int $i0;
        org.bouncycastle.crypto.Mac $r1;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        return $i0;
    }

    protected void engineReset()
    {
        org.bouncycastle.crypto.Mac $r1;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Mac: void reset()>();

        return;
    }

    protected void engineUpdate(byte)
    {
        byte b0;
        org.bouncycastle.crypto.Mac $r1;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        b0 := @parameter0: byte;

        $r1 = r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Mac: void update(byte)>(b0);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        byte[] r1;
        int i0, i1;
        org.bouncycastle.crypto.Mac $r2;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r1, i0, i1);

        return;
    }

    protected byte[] engineDoFinal()
    {
        byte[] r1;
        int $i0;
        org.bouncycastle.crypto.Mac $r2;
        org.bouncycastle.jce.provider.JCEMac r0;

        r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $i0 = virtualinvoke r0.<org.bouncycastle.jce.provider.JCEMac: int engineGetMacLength()>();

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>(r1, 0);

        return r1;
    }
}
