public class org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression extends org.eclipse.jdt.internal.compiler.ast.BinaryExpression
{
    int rightInitStateIndex;
    int mergedInitStateIndex;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Expression, int)
    {
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression r0;
        org.eclipse.jdt.internal.compiler.ast.Expression r1, r2;
        int i0, $i2, $i4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int)>(r1, r2, i0);

        $i2 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex> = $i2;

        $i4 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex> = $i4;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.MethodScope $r11, $r22, $r28;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r7, $r12, $r23, $r26;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r5;
        boolean z0, $z1, $z2, $z3, $z4;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2, $r3, $r29;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r6, $r8, $r9, $r13, $r14, $r15, $r17, $r18, $r21, $r24, $r27;
        int $i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression r0;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r10, $r16, $r19, $r20, $r25;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r5 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r6 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r3 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r2 == $r3 goto label1;

        $z2 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        $r29 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r2 == $r29 goto label3;

        $z1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z1 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        if z0 == 0 goto label5;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r24 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r4, r5, r6);

        $r25 = virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r26 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r27 = virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r4, r5, $r25);

        $r28 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i3 = virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r27);

        r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex> = $i3;

        return $r27;

     label5:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r4, r5, r6);

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenTrue()>();

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalCopy()>();

        $r11 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i0 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r10);

        r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex> = $i0;

        $i1 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: int reachMode()>();

        if $z4 == 0 goto label6;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>(1);

     label6:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r4, r5, $r10);

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo safeInitsWhenTrue()>();

        $r15 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenFalse()>();

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r17 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo initsWhenFalse()>();

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo setReachMode(int)>($i1);

        $r19 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r20 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo mergedWith(org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo)>($r19);

        $r21 = staticinvoke <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo conditional(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r14, $r20);

        $r22 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.lookup.MethodScope methodScope()>();

        $i2 = virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.lookup.MethodScope: int recordInitializationStates(org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r21);

        r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex> = $i2;

        return $r21;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r4, $r7, $r11, $r12, $r14, $r15, $r16, $r17, $r20;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z9, $z11, $z12, $z13, $z14, $z15;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2, $r3, $r5, $r8, $r9, $r18, r19, $r21, $r22;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r10;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel $r23, $r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i23, $i25;
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        r10 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z4 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r2 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r3 == $r2 goto label02;

        if z4 == 0 goto label01;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i14 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r18, $i14);

     label01:
        $i13 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i13);

        return;

     label02:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        r19 = $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r5 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if r19 == $r5 goto label06;

        $z7 = virtualinvoke r19.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z7 == 0 goto label03;

        $r17 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r10, r0, z4);

        goto label04;

     label03:
        $r16 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r10, r0, 0);

        if z4 == 0 goto label04;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

     label04:
        $i15 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        $i21 = (int) -1;

        if $i15 == $i21 goto label05;

        $i12 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i12);

     label05:
        $i9 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i9);

        $i10 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i10);

        $i11 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i11);

        return;

     label06:
        $r23 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r9 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r8 == $r9 goto label07;

        $z13 = 1;

        $z12 = 1;

        goto label08;

     label07:
        $z13 = 0;

        $z12 = 0;

     label08:
        z0 = $z12;

        if $z13 == 0 goto label09;

        $z6 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z6 == 0 goto label09;

        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        z1 = $z9;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r21 = virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r22 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r21 == $r22 goto label11;

        $z15 = 1;

        $z14 = 1;

        goto label12;

     label11:
        $z15 = 0;

        $z14 = 0;

     label12:
        z2 = $z15;

        if $z14 == 0 goto label13;

        $z5 = virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z5 == 0 goto label13;

        $z11 = 1;

        goto label14;

     label13:
        $z11 = 0;

     label14:
        z3 = $z11;

        if z0 == 0 goto label15;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r10, r0, 0);

        if z1 != 0 goto label16;

        goto label19;

     label15:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r10, r0, null, $r23, 1);

     label16:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex>;

        $i23 = (int) -1;

        if $i1 == $i23 goto label17;

        $i8 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i8);

     label17:
        if z2 == 0 goto label18;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r10, r0, 0);

        goto label19;

     label18:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r10, r0, null, $r23, z4);

     label19:
        $i16 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        $i25 = (int) -1;

        if $i16 == $i25 goto label20;

        $i7 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i7);

     label20:
        if z4 == 0 goto label27;

        if z0 == 0 goto label21;

        if z1 != 0 goto label21;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        $i6 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i6);

        goto label26;

     label21:
        if z2 == 0 goto label22;

        if z3 != 0 goto label22;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        $i5 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i5);

        goto label23;

     label22:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_1()>();

     label23:
        $i17 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: int forwardReferenceCount()>();

        if $i17 <= 0 goto label25;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int bits>;

        $i3 = $i2 & 16;

        if $i3 == 0 goto label24;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateReturnBytecode(org.eclipse.jdt.internal.compiler.ast.Expression)>(r1);

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        goto label26;

     label24:
        $r24 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r24.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r0);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>($r24);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void decrStackSize(int)>(1);

        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void iconst_0()>();

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label26;

     label25:
        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label26:
        $i18 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i18);

        $i19 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r10, $i19);

        goto label28;

     label27:
        virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

     label28:
        return;
    }

    public void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r5, $r12, $r14, $r15, $r17, $r20, $r21;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, z8, $z9, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1, $r2, $r4, $r6, $r7, r16, $r18, $r19;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r11;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r8, r9, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i14, $i16, $i18, $i20;
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression r0;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        r11 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r10 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r9 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r8 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z3 := @parameter4: boolean;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r2 == $r1 goto label01;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.BinaryExpression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r11, r10, r9, r8, z3);

        return;

     label01:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        r16 = $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $r4 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if r16 == $r4 goto label03;

        $z6 = virtualinvoke r16.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z6 == 0 goto label03;

        i11 = r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r11, r10, r9, r8, z3);

        $i8 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        $i14 = (int) -1;

        if $i8 == $i14 goto label02;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i10);

     label02:
        $i9 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int sourceStart>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i11, $i9);

        return;

     label03:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r7 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r6 == $r7 goto label04;

        $z19 = 1;

        $z18 = 1;

        goto label05;

     label04:
        $z19 = 0;

        $z18 = 0;

     label05:
        z8 = $z18;

        if $z19 == 0 goto label06;

        $z5 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z5 == 0 goto label06;

        $z9 = 1;

        goto label07;

     label06:
        $z9 = 0;

     label07:
        z0 = $z9;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        $r18 = virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant optimizedBooleanConstant()>();

        $r19 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        if $r18 == $r19 goto label08;

        $z17 = 1;

        $z16 = 1;

        goto label09;

     label08:
        $z17 = 0;

        $z16 = 0;

     label09:
        z1 = $z16;

        if $z17 == 0 goto label10;

        $z4 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.impl.Constant: boolean booleanValue()>();

        if $z4 == 0 goto label10;

        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        z2 = $z11;

        if r8 != null goto label19;

        if r9 == null goto label27;

        $r22 = new org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void <init>(org.eclipse.jdt.internal.compiler.codegen.CodeStream)>(r10);

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        if z8 == 0 goto label12;

        $z12 = 0;

        goto label13;

     label12:
        $z12 = 1;

     label13:
        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r11, r10, null, $r22, $z12);

        if z8 == 0 goto label14;

        if z0 != 0 goto label14;

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label27;

     label14:
        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex>;

        $i16 = (int) -1;

        if $i5 == $i16 goto label15;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i7);

     label15:
        $r20 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        if z3 == 0 goto label16;

        if z1 != 0 goto label16;

        $z13 = 1;

        goto label17;

     label16:
        $z13 = 0;

     label17:
        virtualinvoke $r20.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r11, r10, r9, null, $z13);

        if z3 == 0 goto label18;

        if z1 == 0 goto label18;

        if z2 == 0 goto label18;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r9);

        $i6 = r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i6);

     label18:
        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.codegen.BranchLabel: void place()>();

        goto label27;

     label19:
        if r9 != null goto label27;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        if z8 == 0 goto label20;

        $z14 = 0;

        goto label21;

     label20:
        $z14 = 1;

     label21:
        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r11, r10, null, r8, $z14);

        if z8 == 0 goto label23;

        if z0 != 0 goto label23;

        if z3 == 0 goto label22;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r8);

     label22:
        $i4 = r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i4);

        goto label27;

     label23:
        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex>;

        $i18 = (int) -1;

        if $i1 == $i18 goto label24;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int rightInitStateIndex>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void addDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i3);

     label24:
        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        if z3 == 0 goto label25;

        if z1 != 0 goto label25;

        $z15 = 1;

        goto label26;

     label25:
        $z15 = 0;

     label26:
        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,org.eclipse.jdt.internal.compiler.codegen.BranchLabel,boolean)>(r11, r10, null, r8, $z15);

        if z3 == 0 goto label27;

        if z1 == 0 goto label27;

        if z2 != 0 goto label27;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r8);

        $i2 = r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void updateLastRecordedEndPC(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i2);

     label27:
        $i12 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        $i20 = (int) -1;

        if $i12 == $i20 goto label28;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: int mergedInitStateIndex>;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void removeNotDefinitelyAssignedVariables(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r11, $i0);

     label28:
        return;
    }

    public boolean isCompactableOperation()
    {
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        return 0;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression left>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression: org.eclipse.jdt.internal.compiler.ast.Expression right>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.AND_AND_Expression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
