public class org.apache.tika.parser.txt.CharsetMatch extends java.lang.Object implements java.lang.Comparable
{
    public static final int ENCODING_SCHEME;
    public static final int BOM;
    public static final int DECLARED_ENCODING;
    public static final int LANG_STATISTICS;
    private int fConfidence;
    private org.apache.tika.parser.txt.CharsetRecognizer fRecognizer;
    private byte[] fRawInput;
    private int fRawLength;
    private java.io.InputStream fInputStream;

    public java.io.Reader getReader()
    {
        byte[] $r4;
        java.io.IOException $r5;
        java.io.InputStreamReader $r1;
        java.io.ByteArrayInputStream $r3;
        org.apache.tika.parser.txt.CharsetMatch r0;
        int $i0;
        java.lang.String $r2;
        java.io.InputStream r6;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        r6 = r0.<org.apache.tika.parser.txt.CharsetMatch: java.io.InputStream fInputStream>;

        if r6 != null goto label1;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = r0.<org.apache.tika.parser.txt.CharsetMatch: byte[] fRawInput>;

        $i0 = r0.<org.apache.tika.parser.txt.CharsetMatch: int fRawLength>;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r4, 0, $i0);

        r6 = $r3;

     label1:
        virtualinvoke r6.<java.io.InputStream: void reset()>();

        $r1 = new java.io.InputStreamReader;

        $r2 = virtualinvoke r0.<org.apache.tika.parser.txt.CharsetMatch: java.lang.String getName()>();

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r6, $r2);

     label2:
        return $r1;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String getString() throws java.io.IOException
    {
        org.apache.tika.parser.txt.CharsetMatch r0;
        int $i1;
        java.lang.String $r1;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        $i1 = (int) -1;

        $r1 = virtualinvoke r0.<org.apache.tika.parser.txt.CharsetMatch: java.lang.String getString(int)>($i1);

        return $r1;
    }

    public java.lang.String getString(int) throws java.io.IOException
    {
        byte[] $r3;
        java.io.Reader $r7;
        java.lang.StringBuffer $r5;
        org.apache.tika.parser.txt.CharsetMatch r0;
        int i0, $i1, i2, $i3, $i4;
        char[] r6;
        java.lang.String $r2, $r4, $r8;
        java.io.InputStream $r1;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.tika.parser.txt.CharsetMatch: java.io.InputStream fInputStream>;

        if $r1 == null goto label5;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        r6 = newarray (char)[1024];

        $r7 = virtualinvoke r0.<org.apache.tika.parser.txt.CharsetMatch: java.io.Reader getReader()>();

        if i0 >= 0 goto label1;

        $i1 = 2147483647;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        i2 = $i1;

     label3:
        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i2, 1024);

        $i4 = virtualinvoke $r7.<java.io.Reader: int read(char[],int,int)>(r6, 0, $i3);

        if $i4 < 0 goto label4;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>(r6, 0, $i4);

        i2 = i2 - $i4;

        goto label3;

     label4:
        virtualinvoke $r7.<java.io.Reader: void close()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;

     label5:
        $r2 = new java.lang.String;

        $r3 = r0.<org.apache.tika.parser.txt.CharsetMatch: byte[] fRawInput>;

        $r4 = virtualinvoke r0.<org.apache.tika.parser.txt.CharsetMatch: java.lang.String getName()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, $r4);

        return $r2;
    }

    public int getConfidence()
    {
        org.apache.tika.parser.txt.CharsetMatch r0;
        int $i0;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        $i0 = r0.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        return $i0;
    }

    public int getMatchType()
    {
        org.apache.tika.parser.txt.CharsetMatch r0;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        return 0;
    }

    public java.lang.String getName()
    {
        org.apache.tika.parser.txt.CharsetMatch r0;
        java.lang.String $r2;
        org.apache.tika.parser.txt.CharsetRecognizer $r1;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        $r1 = r0.<org.apache.tika.parser.txt.CharsetMatch: org.apache.tika.parser.txt.CharsetRecognizer fRecognizer>;

        $r2 = virtualinvoke $r1.<org.apache.tika.parser.txt.CharsetRecognizer: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.String getLanguage()
    {
        org.apache.tika.parser.txt.CharsetMatch r0;
        java.lang.String $r2;
        org.apache.tika.parser.txt.CharsetRecognizer $r1;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        $r1 = r0.<org.apache.tika.parser.txt.CharsetMatch: org.apache.tika.parser.txt.CharsetRecognizer fRecognizer>;

        $r2 = virtualinvoke $r1.<org.apache.tika.parser.txt.CharsetRecognizer: java.lang.String getLanguage()>();

        return $r2;
    }

    public int compareTo(org.apache.tika.parser.txt.CharsetMatch)
    {
        byte b4;
        org.apache.tika.parser.txt.CharsetMatch r0, r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        r1 := @parameter0: org.apache.tika.parser.txt.CharsetMatch;

        b4 = 0;

        $i1 = r0.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        $i0 = r1.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        if $i1 <= $i0 goto label1;

        b4 = 1;

        goto label2;

     label1:
        $i3 = r0.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        $i2 = r1.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        if $i3 >= $i2 goto label2;

        b4 = -1;

     label2:
        return b4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.tika.parser.txt.CharsetMatch r1, r2;
        int $i0, $i1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.tika.parser.txt.CharsetMatch;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.apache.tika.parser.txt.CharsetMatch;

        if $z0 == 0 goto label3;

        r1 = (org.apache.tika.parser.txt.CharsetMatch) r0;

        $i1 = r2.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        $i0 = r1.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.tika.parser.txt.CharsetMatch r0;
        int $i0;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        $i0 = r0.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        return $i0;
    }

    void <init>(org.apache.tika.parser.txt.CharsetDetector, org.apache.tika.parser.txt.CharsetRecognizer, int)
    {
        byte[] $r5;
        org.apache.tika.parser.txt.CharsetRecognizer r1;
        org.apache.tika.parser.txt.CharsetDetector r2;
        org.apache.tika.parser.txt.CharsetMatch r0;
        int i0, $i1;
        java.io.InputStream $r3, $r4;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        r2 := @parameter0: org.apache.tika.parser.txt.CharsetDetector;

        r1 := @parameter1: org.apache.tika.parser.txt.CharsetRecognizer;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.txt.CharsetMatch: byte[] fRawInput> = null;

        r0.<org.apache.tika.parser.txt.CharsetMatch: java.io.InputStream fInputStream> = null;

        r0.<org.apache.tika.parser.txt.CharsetMatch: org.apache.tika.parser.txt.CharsetRecognizer fRecognizer> = r1;

        r0.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence> = i0;

        $r3 = r2.<org.apache.tika.parser.txt.CharsetDetector: java.io.InputStream fInputStream>;

        if $r3 != null goto label1;

        $r5 = r2.<org.apache.tika.parser.txt.CharsetDetector: byte[] fRawInput>;

        r0.<org.apache.tika.parser.txt.CharsetMatch: byte[] fRawInput> = $r5;

        $i1 = r2.<org.apache.tika.parser.txt.CharsetDetector: int fRawLength>;

        r0.<org.apache.tika.parser.txt.CharsetMatch: int fRawLength> = $i1;

     label1:
        $r4 = r2.<org.apache.tika.parser.txt.CharsetDetector: java.io.InputStream fInputStream>;

        r0.<org.apache.tika.parser.txt.CharsetMatch: java.io.InputStream fInputStream> = $r4;

        return;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.String $r4, $r6, $r8, $r13, $r18, r20;
        org.apache.tika.parser.txt.CharsetRecognizer $r3, $r7, $r17;
        org.apache.tika.parser.txt.CharsetMatch r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r19;

        r2 := @this: org.apache.tika.parser.txt.CharsetMatch;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Match of ");

        $r3 = r2.<org.apache.tika.parser.txt.CharsetMatch: org.apache.tika.parser.txt.CharsetRecognizer fRecognizer>;

        $r4 = virtualinvoke $r3.<org.apache.tika.parser.txt.CharsetRecognizer: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r20 = $r6;

        $r7 = r2.<org.apache.tika.parser.txt.CharsetMatch: org.apache.tika.parser.txt.CharsetRecognizer fRecognizer>;

        $r8 = virtualinvoke $r7.<org.apache.tika.parser.txt.CharsetRecognizer: java.lang.String getLanguage()>();

        if $r8 == null goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r17 = r2.<org.apache.tika.parser.txt.CharsetMatch: org.apache.tika.parser.txt.CharsetRecognizer fRecognizer>;

        $r18 = virtualinvoke $r17.<org.apache.tika.parser.txt.CharsetRecognizer: java.lang.String getLanguage()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with confidence ");

        $i0 = r2.<org.apache.tika.parser.txt.CharsetMatch: int fConfidence>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.tika.parser.txt.CharsetMatch r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.apache.tika.parser.txt.CharsetMatch;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.tika.parser.txt.CharsetMatch) r1;

        $i0 = virtualinvoke r0.<org.apache.tika.parser.txt.CharsetMatch: int compareTo(org.apache.tika.parser.txt.CharsetMatch)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.txt.CharsetMatch: int LANG_STATISTICS> = 8;

        <org.apache.tika.parser.txt.CharsetMatch: int DECLARED_ENCODING> = 4;

        <org.apache.tika.parser.txt.CharsetMatch: int BOM> = 2;

        <org.apache.tika.parser.txt.CharsetMatch: int ENCODING_SCHEME> = 1;

        return;
    }
}
