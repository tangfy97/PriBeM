class bsh.BSHSwitchStatement extends bsh.SimpleNode implements bsh.ParserConstants
{

    public void <init>(int)
    {
        bsh.BSHSwitchStatement r0;
        int i0;

        r0 := @this: bsh.BSHSwitchStatement;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public java.lang.Object eval(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.ReturnControl r14;
        bsh.SimpleNode r2, $r9;
        bsh.CallStack r3;
        bsh.BSHSwitchLabel r15;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4;
        bsh.EvalError $r13;
        bsh.Interpreter r4;
        bsh.Primitive $r7;
        bsh.BSHSwitchStatement r0;
        java.lang.Object $r5, $r10, $r11;
        bsh.Node $r1, $r6, $r8, $r12;

        r0 := @this: bsh.BSHSwitchStatement;

        r3 := @parameter0: bsh.CallStack;

        r4 := @parameter1: bsh.Interpreter;

        $i0 = virtualinvoke r0.<bsh.BSHSwitchStatement: int jjtGetNumChildren()>();

        $r1 = virtualinvoke r0.<bsh.BSHSwitchStatement: bsh.Node jjtGetChild(int)>(0);

        r2 = (bsh.SimpleNode) $r1;

        $r5 = virtualinvoke r2.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r3, r4);

        r14 = null;

        if 1 < $i0 goto label01;

        $r13 = new bsh.EvalError;

        specialinvoke $r13.<bsh.EvalError: void <init>(java.lang.String,bsh.SimpleNode,bsh.CallStack)>("Empty switch statement.", r0, r3);

        throw $r13;

     label01:
        i4 = 2;

        $r6 = virtualinvoke r0.<bsh.BSHSwitchStatement: bsh.Node jjtGetChild(int)>(1);

        r15 = (bsh.BSHSwitchLabel) $r6;

        goto label08;

     label02:
        $z0 = r15.<bsh.BSHSwitchLabel: boolean isDefault>;

        if $z0 != 0 goto label05;

        $r11 = virtualinvoke r15.<bsh.BSHSwitchLabel: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r3, r4);

        $z3 = specialinvoke r0.<bsh.BSHSwitchStatement: boolean primitiveEquals(java.lang.Object,java.lang.Object,bsh.CallStack,bsh.SimpleNode)>($r5, $r11, r3, r2);

        if $z3 == 0 goto label07;

        goto label05;

     label03:
        $i2 = i4;

        i4 = i4 + 1;

        $r8 = virtualinvoke r0.<bsh.BSHSwitchStatement: bsh.Node jjtGetChild(int)>($i2);

        $z1 = $r8 instanceof bsh.BSHSwitchLabel;

        if $z1 == 0 goto label04;

        goto label05;

     label04:
        $r9 = (bsh.SimpleNode) $r8;

        $r10 = virtualinvoke $r9.<bsh.SimpleNode: java.lang.Object eval(bsh.CallStack,bsh.Interpreter)>(r3, r4);

        $z2 = $r10 instanceof bsh.ReturnControl;

        if $z2 == 0 goto label05;

        r14 = (bsh.ReturnControl) $r10;

        goto label08;

     label05:
        if i4 < $i0 goto label03;

        goto label08;

     label06:
        $i3 = i4;

        i4 = i4 + 1;

        $r12 = virtualinvoke r0.<bsh.BSHSwitchStatement: bsh.Node jjtGetChild(int)>($i3);

        $z4 = $r12 instanceof bsh.BSHSwitchLabel;

        if $z4 == 0 goto label07;

        r15 = (bsh.BSHSwitchLabel) $r12;

        goto label08;

     label07:
        if i4 < $i0 goto label06;

     label08:
        if i4 >= $i0 goto label09;

        if r14 == null goto label02;

     label09:
        if r14 == null goto label10;

        $i1 = r14.<bsh.ReturnControl: int kind>;

        if $i1 != 46 goto label10;

        return r14;

     label10:
        $r7 = <bsh.Primitive: bsh.Primitive VOID>;

        return $r7;
    }

    private boolean primitiveEquals(java.lang.Object, java.lang.Object, bsh.CallStack, bsh.SimpleNode) throws bsh.EvalError
    {
        bsh.UtilEvalError $r5;
        bsh.SimpleNode r8;
        bsh.CallStack r14;
        java.lang.StringBuffer $r6, $r7, $r10, $r11;
        java.lang.Boolean $r4;
        java.lang.String $r9, $r12;
        boolean $z0, $z1, $z2, $z3;
        bsh.EvalError $r15;
        bsh.BSHSwitchStatement r13;
        java.lang.Object r0, r1, $r2, $r3;

        r13 := @this: bsh.BSHSwitchStatement;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r14 := @parameter2: bsh.CallStack;

        r8 := @parameter3: bsh.SimpleNode;

        $z0 = r0 instanceof bsh.Primitive;

        if $z0 != 0 goto label1;

        $z2 = r1 instanceof bsh.Primitive;

        if $z2 == 0 goto label4;

     label1:
        $r2 = staticinvoke <bsh.Primitive: java.lang.Object binaryOperation(java.lang.Object,java.lang.Object,int)>(r0, r1, 90);

        $r3 = staticinvoke <bsh.Primitive: java.lang.Object unwrap(java.lang.Object)>($r2);

        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

     label2:
        return $z1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Switch value: ");

        $r9 = virtualinvoke r8.<bsh.SimpleNode: java.lang.String getText()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = virtualinvoke $r5.<bsh.UtilEvalError: bsh.EvalError toEvalError(java.lang.String,bsh.SimpleNode,bsh.CallStack)>($r12, r13, r14);

        throw $r15;

     label4:
        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z3;

        catch bsh.UtilEvalError from label1 to label2 with label3;
    }
}
