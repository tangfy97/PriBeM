public class org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage extends org.apache.pdfbox.util.operator.OperatorProcessor
{
    private static final org.apache.commons.logging.Log LOG;

    public void <init>()
    {
        org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage r0;

        r0 := @this: org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage;

        specialinvoke r0.<org.apache.pdfbox.util.operator.OperatorProcessor: void <init>()>();

        return;
    }

    public void process(org.apache.pdfbox.util.PDFOperator, java.util.List) throws java.io.IOException
    {
        byte[] $r7;
        java.util.Map $r9;
        java.awt.geom.AffineTransform $r14, $r21;
        org.apache.pdfbox.pdmodel.PDPage $r3;
        org.apache.pdfbox.util.PDFOperator r4;
        org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage $r6;
        org.apache.pdfbox.util.ImageParameters $r5;
        boolean $z0;
        org.apache.pdfbox.pdmodel.graphics.PDGraphicsState $r12;
        java.awt.image.BufferedImage $r10;
        org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage r0;
        java.awt.Dimension $r11;
        java.util.List r18;
        org.apache.pdfbox.pdfviewer.PageDrawer r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        org.apache.pdfbox.util.PDFStreamEngine $r1, $r8;
        org.apache.pdfbox.util.Matrix $r13, $r15, r19, $r20;
        org.apache.commons.logging.Log $r16, $r17;

        r0 := @this: org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage;

        r4 := @parameter0: org.apache.pdfbox.util.PDFOperator;

        r18 := @parameter1: java.util.List;

        $r1 = r0.<org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage: org.apache.pdfbox.util.PDFStreamEngine context>;

        r2 = (org.apache.pdfbox.pdfviewer.PageDrawer) $r1;

        $r3 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>();

        $r5 = virtualinvoke r4.<org.apache.pdfbox.util.PDFOperator: org.apache.pdfbox.util.ImageParameters getImageParameters()>();

        $r6 = new org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage;

        specialinvoke $r6.<org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage: void <init>()>();

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage: void setImageParameters(org.apache.pdfbox.util.ImageParameters)>($r5);

        $r7 = virtualinvoke r4.<org.apache.pdfbox.util.PDFOperator: byte[] getImageData()>();

        virtualinvoke $r6.<org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage: void setImageData(byte[])>($r7);

        $z0 = virtualinvoke $r5.<org.apache.pdfbox.util.ImageParameters: boolean isStencil()>();

        if $z0 == 0 goto label1;

        $r17 = <org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Stencil masks are not implemented, background may be incorrect");

     label1:
        $r8 = r0.<org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage: org.apache.pdfbox.util.PDFStreamEngine context>;

        $r9 = virtualinvoke $r8.<org.apache.pdfbox.util.PDFStreamEngine: java.util.Map getColorSpaces()>();

        $r10 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.graphics.xobject.PDInlinedImage: java.awt.image.BufferedImage createImage(java.util.Map)>($r9);

        if $r10 != null goto label2;

        $r16 = <org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("BeginInlineImage.process(): createImage returned NULL");

        return;

     label2:
        $i0 = virtualinvoke $r10.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke $r10.<java.awt.image.BufferedImage: int getHeight()>();

        $r11 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: java.awt.Dimension getPageSize()>();

        $d0 = virtualinvoke $r11.<java.awt.Dimension: double getHeight()>();

        $r12 = virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: org.apache.pdfbox.pdmodel.graphics.PDGraphicsState getGraphicsState()>();

        $r13 = virtualinvoke $r12.<org.apache.pdfbox.pdmodel.graphics.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>();

        $i2 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.PDPage: int findRotation()>();

        $r14 = virtualinvoke $r13.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>();

        $f0 = (float) $i0;

        $f1 = 1.0F / $f0;

        $d2 = (double) $f1;

        $f2 = (float) $i1;

        $f3 = 1.0F / $f2;

        $d1 = (double) $f3;

        virtualinvoke $r14.<java.awt.geom.AffineTransform: void scale(double,double)>($d2, $d1);

        $r15 = new org.apache.pdfbox.util.Matrix;

        specialinvoke $r15.<org.apache.pdfbox.util.Matrix: void <init>()>();

        virtualinvoke $r15.<org.apache.pdfbox.util.Matrix: void setFromAffineTransform(java.awt.geom.AffineTransform)>($r14);

        $d3 = virtualinvoke $r14.<java.awt.geom.AffineTransform: double getShearX()>();

        $d4 = virtualinvoke $r14.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d5 = $d3 / $d4;

        $d6 = staticinvoke <java.lang.Math: double atan(double)>($d5);

        r19 = null;

        if $i2 == 0 goto label3;

        if $i2 != 180 goto label4;

     label3:
        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $f4 = virtualinvoke $r13.<org.apache.pdfbox.util.Matrix: float getXScale()>();

        $d8 = (double) $f4;

        $d9 = $d7 * $d8;

        $f5 = (float) $d9;

        $f6 = virtualinvoke $r13.<org.apache.pdfbox.util.Matrix: float getYPosition()>();

        $f7 = 2.0F * $f6;

        $d10 = (double) $f7;

        $d11 = $d0 - $d10;

        $d12 = staticinvoke <java.lang.Math: double cos(double)>($d6);

        $f8 = virtualinvoke $r13.<org.apache.pdfbox.util.Matrix: float getYScale()>();

        $d13 = (double) $f8;

        $d14 = $d12 * $d13;

        $d15 = $d11 - $d14;

        $f9 = (float) $d15;

        r19 = staticinvoke <org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix getTranslatingInstance(float,float)>($f5, $f9);

        goto label6;

     label4:
        if $i2 == 90 goto label5;

        if $i2 != 270 goto label6;

     label5:
        $d16 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        $f10 = virtualinvoke $r13.<org.apache.pdfbox.util.Matrix: float getYScale()>();

        $d17 = (double) $f10;

        $d18 = $d16 * $d17;

        $f11 = (float) $d18;

        $f12 = virtualinvoke $r13.<org.apache.pdfbox.util.Matrix: float getYPosition()>();

        $f13 = 2.0F * $f12;

        $d19 = (double) $f13;

        $d20 = $d0 - $d19;

        $f14 = (float) $d20;

        r19 = staticinvoke <org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix getTranslatingInstance(float,float)>($f11, $f14);

     label6:
        $r20 = virtualinvoke $r15.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix multiply(org.apache.pdfbox.util.Matrix)>(r19);

        $f15 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 1);

        $f16 = -1.0F * $f15;

        virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(0, 1, $f16);

        $f17 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(1, 0);

        $f18 = -1.0F * $f17;

        virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: void setValue(int,int,float)>(1, 0, $f18);

        $r21 = new java.awt.geom.AffineTransform;

        $f19 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 0);

        $f20 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(0, 1);

        $f21 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(1, 0);

        $f22 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(1, 1);

        $f23 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(2, 0);

        $f24 = virtualinvoke $r20.<org.apache.pdfbox.util.Matrix: float getValue(int,int)>(2, 1);

        specialinvoke $r21.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f19, $f20, $f21, $f22, $f23, $f24);

        virtualinvoke r2.<org.apache.pdfbox.pdfviewer.PageDrawer: void drawImage(java.awt.Image,java.awt.geom.AffineTransform)>($r10, $r21);

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/util/operator/pagedrawer/BeginInlineImage;");

        <org.apache.pdfbox.util.operator.pagedrawer.BeginInlineImage: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
