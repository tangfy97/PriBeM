public abstract class org.mozilla.javascript.IdScriptableObject extends org.mozilla.javascript.ScriptableObject implements org.mozilla.javascript.IdFunctionCall
{
    private transient volatile org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues;

    public void <init>()
    {
        org.mozilla.javascript.IdScriptableObject r0;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void <init>()>();

        return;
    }

    public void <init>(org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.Scriptable r1, r2;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)>(r1, r2);

        return;
    }

    protected final java.lang.Object defaultGet(java.lang.String)
    {
        java.lang.Object $r2;
        org.mozilla.javascript.IdScriptableObject r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r0);

        return $r2;
    }

    protected final void defaultPut(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        org.mozilla.javascript.IdScriptableObject r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r0, r2);

        return;
    }

    public boolean has(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r4, $r5;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.Scriptable r3;
        java.lang.Object $r6, $r7;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r1);

        if $i0 == 0 goto label4;

        i4 = $i0 >>> 16;

        $i2 = i4 & 4;

        if $i2 == 0 goto label1;

        return 1;

     label1:
        $i6 = (int) 65535;

        i3 = $i0 & $i6;

        $r6 = <org.mozilla.javascript.IdScriptableObject: java.lang.Object NOT_FOUND>;

        $r7 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.Object getInstanceIdValue(int)>(i3);

        if $r6 == $r7 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label5;

        $r4 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i1 = virtualinvoke $r4.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int findId(java.lang.String)>(r1);

        if $i1 == 0 goto label5;

        $r5 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $z1 = virtualinvoke $r5.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: boolean has(int)>($i1);

        return $z1;

     label5:
        $z0 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: boolean has(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r3);

        return $z0;
    }

    public java.lang.Object get(java.lang.String, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.Scriptable r3;
        int $i0, $i1, i2, $i4;
        java.lang.Object $r4, $r7, $r8;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r5, $r6;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        $i4 = (int) 65535;

        i2 = $i0 & $i4;

        $r8 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.Object getInstanceIdValue(int)>(i2);

        return $r8;

     label1:
        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label2;

        $r5 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i1 = virtualinvoke $r5.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int findId(java.lang.String)>(r1);

        if $i1 == 0 goto label2;

        $r6 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: java.lang.Object get(int)>($i1);

        return $r7;

     label2:
        $r4 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r3);

        return $r4;
    }

    public void put(java.lang.String, org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        int $i0, $i1, $i2, i3, $i4, $i6;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r5, $r6;
        boolean $z0, $z1;
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.EvaluatorException $r7, $r8;
        org.mozilla.javascript.Scriptable r3;
        java.lang.Object r4;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r4 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r1);

        if $i0 == 0 goto label4;

        if r3 != r0 goto label1;

        $z1 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean isSealed()>();

        if $z1 == 0 goto label1;

        $r8 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.modify.sealed", r1);

        throw $r8;

     label1:
        $i4 = $i0 >>> 16;

        $i2 = $i4 & 1;

        if $i2 != 0 goto label3;

        if r3 != r0 goto label2;

        $i6 = (int) 65535;

        i3 = $i0 & $i6;

        virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: void setInstanceIdValue(int,java.lang.Object)>(i3, r4);

        goto label3;

     label2:
        interfaceinvoke r3.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r3, r4);

     label3:
        return;

     label4:
        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label6;

        $r5 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i1 = virtualinvoke $r5.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int findId(java.lang.String)>(r1);

        if $i1 == 0 goto label6;

        if r3 != r0 goto label5;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean isSealed()>();

        if $z0 == 0 goto label5;

        $r7 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError1(java.lang.String,java.lang.Object)>("msg.modify.sealed", r1);

        throw $r7;

     label5:
        $r6 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        virtualinvoke $r6.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void set(int,org.mozilla.javascript.Scriptable,java.lang.Object)>($i1, r3, r4);

        return;

     label6:
        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>(r1, r3, r4);

        return;
    }

    public void delete(java.lang.String)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.lang.Object $r5;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r1);

        if $i0 == 0 goto label2;

        $z1 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean isSealed()>();

        if $z1 != 0 goto label2;

        i4 = $i0 >>> 16;

        $i2 = i4 & 4;

        if $i2 != 0 goto label1;

        $i6 = (int) 65535;

        i3 = $i0 & $i6;

        $r5 = <org.mozilla.javascript.IdScriptableObject: java.lang.Object NOT_FOUND>;

        virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: void setInstanceIdValue(int,java.lang.Object)>(i3, $r5);

     label1:
        return;

     label2:
        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label4;

        $r3 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i1 = virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int findId(java.lang.String)>(r1);

        if $i1 == 0 goto label4;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean isSealed()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        virtualinvoke $r4.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void delete(int)>($i1);

     label3:
        return;

     label4:
        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void delete(java.lang.String)>(r1);

        return;
    }

    public int getAttributes(java.lang.String)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r3, $r4;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        i4 = $i0 >>> 16;

        return i4;

     label1:
        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label2;

        $r3 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i2 = virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int findId(java.lang.String)>(r1);

        if $i2 == 0 goto label2;

        $r4 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i3 = virtualinvoke $r4.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int getAttributes(int)>($i2);

        return $i3;

     label2:
        $i1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: int getAttributes(java.lang.String)>(r1);

        return $i1;
    }

    public void setAttributes(java.lang.String, int)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        java.lang.RuntimeException $r5;
        int i0, $i1, $i2, i3;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r3, $r4;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <org.mozilla.javascript.ScriptableObject: void checkValidAttributes(int)>(i0);

        $i1 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r1);

        if $i1 == 0 goto label2;

        i3 = $i1 >>> 16;

        if i0 == i3 goto label1;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Change of attributes for this id is not supported");

        throw $r5;

     label1:
        return;

     label2:
        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label3;

        $r3 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $i2 = virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int findId(java.lang.String)>(r1);

        if $i2 == 0 goto label3;

        $r4 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        virtualinvoke $r4.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void setAttributes(int,int)>($i2, i0);

        return;

     label3:
        specialinvoke r0.<org.mozilla.javascript.ScriptableObject: void setAttributes(java.lang.String,int)>(r1, i0);

        return;
    }

    java.lang.Object[] getIds(boolean)
    {
        java.lang.Object[] $r1, $r3, r8, r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, i12, i13, $i15;
        java.lang.String $r4;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r7;
        boolean z0;
        org.mozilla.javascript.IdScriptableObject r0;
        java.lang.Object $r5, $r6;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<org.mozilla.javascript.ScriptableObject: java.lang.Object[] getIds(boolean)>(z0);

        r8 = $r1;

        $r2 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label1;

        $r7 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        r8 = virtualinvoke $r7.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: java.lang.Object[] getNames(boolean,java.lang.Object[])>(z0, $r1);

     label1:
        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int getMaxInstanceId()>();

        if $i0 == 0 goto label9;

        r9 = null;

        i12 = 0;

        i13 = $i0;

     label2:
        if i13 == 0 goto label7;

        $r4 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.String getInstanceIdName(int)>(i13);

        $i7 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>($r4);

        if $i7 == 0 goto label6;

        i8 = $i7 >>> 16;

        $i9 = i8 & 4;

        if $i9 != 0 goto label3;

        $r5 = <org.mozilla.javascript.IdScriptableObject: java.lang.Object NOT_FOUND>;

        $r6 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.Object getInstanceIdValue(int)>(i13);

        if $r5 != $r6 goto label3;

        goto label6;

     label3:
        if z0 != 0 goto label4;

        $i11 = i8 & 2;

        if $i11 != 0 goto label6;

     label4:
        if i12 != 0 goto label5;

        r9 = newarray (java.lang.Object)[i13];

     label5:
        $i10 = i12;

        i12 = i12 + 1;

        r9[$i10] = $r4;

     label6:
        $i15 = (int) -1;

        i13 = i13 + $i15;

        goto label2;

     label7:
        if i12 == 0 goto label9;

        $i1 = lengthof r8;

        if $i1 != 0 goto label8;

        $i6 = lengthof r9;

        if $i6 != i12 goto label8;

        r8 = r9;

        goto label9;

     label8:
        $i2 = lengthof r8;

        $i3 = $i2 + i12;

        $r3 = newarray (java.lang.Object)[$i3];

        $i4 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, $r3, 0, $i4);

        $i5 = lengthof r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r3, $i5, i12);

        r8 = $r3;

     label9:
        return r8;
    }

    protected int getMaxInstanceId()
    {
        org.mozilla.javascript.IdScriptableObject r0;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        return 0;
    }

    protected static int instanceIdInfo(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 << 16;

        $i3 = $i2 | i1;

        return $i3;
    }

    protected int findInstanceIdInfo(java.lang.String)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    protected java.lang.String getInstanceIdName(int)
    {
        org.mozilla.javascript.IdScriptableObject r2;
        int i0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r0;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    protected java.lang.Object getInstanceIdValue(int)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.IdScriptableObject r2;
        int i0;
        java.lang.String $r1;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    protected void setInstanceIdValue(int, java.lang.Object)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.IdScriptableObject r2;
        int i0;
        java.lang.Object r3;
        java.lang.String $r1;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.IllegalStateException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.IdFunctionObject r0;
        org.mozilla.javascript.IdScriptableObject r2;
        org.mozilla.javascript.Scriptable r4, r5;
        java.lang.Object[] r6;
        org.mozilla.javascript.Context r3;
        java.lang.RuntimeException $r1;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r3 := @parameter1: org.mozilla.javascript.Context;

        r4 := @parameter2: org.mozilla.javascript.Scriptable;

        r5 := @parameter3: org.mozilla.javascript.Scriptable;

        r6 := @parameter4: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: java.lang.RuntimeException 'unknown'()>();

        throw $r1;
    }

    public final org.mozilla.javascript.IdFunctionObject exportAsJSClass(int, org.mozilla.javascript.Scriptable, boolean)
    {
        org.mozilla.javascript.Scriptable r0, $r2;
        org.mozilla.javascript.IdScriptableObject r1;
        org.mozilla.javascript.IdFunctionObject $r4;
        int i0;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r3;
        boolean z0;

        r1 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        r0 := @parameter1: org.mozilla.javascript.Scriptable;

        z0 := @parameter2: boolean;

        if r0 == r1 goto label1;

        if r0 == null goto label1;

        virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: void setParentScope(org.mozilla.javascript.Scriptable)>(r0);

        $r2 = staticinvoke <org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)>(r0);

        virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: void setPrototype(org.mozilla.javascript.Scriptable)>($r2);

     label1:
        virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: void activatePrototypeMap(int)>(i0);

        $r3 = r1.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        $r4 = virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: org.mozilla.javascript.IdFunctionObject createPrecachedConstructor()>();

        if z0 == 0 goto label2;

        virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: void sealObject()>();

     label2:
        virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject)>($r4);

        if z0 == 0 goto label3;

        virtualinvoke $r4.<org.mozilla.javascript.IdFunctionObject: void sealObject()>();

     label3:
        virtualinvoke $r4.<org.mozilla.javascript.IdFunctionObject: void exportAsScopeProperty()>();

        return $r4;
    }

    public final boolean hasPrototypeMap()
    {
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        $r1 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void activatePrototypeMap(int)
    {
        java.lang.Throwable $r4;
        java.lang.IllegalStateException $r3;
        org.mozilla.javascript.IdScriptableObject r1;
        int i0;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r0, $r2;

        r1 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        $r0 = new org.mozilla.javascript.IdScriptableObject$PrototypeValues;

        specialinvoke $r0.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void <init>(org.mozilla.javascript.IdScriptableObject,int)>(r1, i0);

        entermonitor r1;

     label1:
        $r2 = r1.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label2:
        r1.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues> = $r0;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final void initPrototypeMethod(java.lang.Object, int, java.lang.String, int)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.Scriptable $r1;
        org.mozilla.javascript.IdFunctionObject $r4;
        int i0, i1;
        java.lang.Object r2;
        java.lang.String r3;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r5;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r0);

        $r4 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdFunctionObject newIdFunction(java.lang.Object,int,java.lang.String,int,org.mozilla.javascript.Scriptable)>(r2, i0, r3, i1, $r1);

        $r5 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        virtualinvoke $r5.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void initValue(int,java.lang.String,java.lang.Object,int)>(i0, r3, $r4, 2);

        return;
    }

    public final void initPrototypeConstructor(org.mozilla.javascript.IdFunctionObject)
    {
        java.lang.IllegalStateException $r5;
        org.mozilla.javascript.IdScriptableObject r0;
        java.lang.IllegalArgumentException $r4;
        org.mozilla.javascript.IdFunctionObject r2;
        int i0, $i1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r1, $r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r2 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        $r1 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        i0 = $r1.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int constructorId>;

        if i0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $i1 = virtualinvoke r2.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        if $i1 == i0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label2:
        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdScriptableObject: boolean isSealed()>();

        if $z0 == 0 goto label3;

        virtualinvoke r2.<org.mozilla.javascript.IdFunctionObject: void sealObject()>();

     label3:
        $r3 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void initValue(int,java.lang.String,java.lang.Object,int)>(i0, "constructor", r2, 2);

        return;
    }

    public final void initPrototypeValue(int, java.lang.String, java.lang.Object, int)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        int i0, i1;
        java.lang.Object r2;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r3;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        $r3 = r0.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: void initValue(int,java.lang.String,java.lang.Object,int)>(i0, r1, r2, i1);

        return;
    }

    protected void initPrototypeId(int)
    {
        java.lang.IllegalStateException $r0;
        org.mozilla.javascript.IdScriptableObject r2;
        int i0;
        java.lang.String $r1;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    protected int findPrototypeId(java.lang.String)
    {
        java.lang.IllegalStateException $r0;
        java.lang.String r1;
        org.mozilla.javascript.IdScriptableObject r2;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    protected void fillConstructorProperties(org.mozilla.javascript.IdFunctionObject)
    {
        org.mozilla.javascript.IdScriptableObject r0;
        org.mozilla.javascript.IdFunctionObject r1;

        r0 := @this: org.mozilla.javascript.IdScriptableObject;

        r1 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        return;
    }

    protected void addIdFunctionProperty(org.mozilla.javascript.Scriptable, java.lang.Object, int, java.lang.String, int)
    {
        org.mozilla.javascript.IdScriptableObject r2;
        org.mozilla.javascript.Scriptable r0, $r1;
        org.mozilla.javascript.IdFunctionObject $r5;
        int i0, i1;
        java.lang.Object r3;
        java.lang.String r4;

        r2 := @this: org.mozilla.javascript.IdScriptableObject;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r3 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptableObject: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r0);

        $r5 = specialinvoke r2.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdFunctionObject newIdFunction(java.lang.Object,int,java.lang.String,int,org.mozilla.javascript.Scriptable)>(r3, i0, r4, i1, $r1);

        virtualinvoke $r5.<org.mozilla.javascript.IdFunctionObject: void addAsProperty(org.mozilla.javascript.Scriptable)>(r0);

        return;
    }

    protected static org.mozilla.javascript.EcmaError incompatibleCallError(org.mozilla.javascript.IdFunctionObject)
    {
        org.mozilla.javascript.EcmaError $r2;
        org.mozilla.javascript.IdFunctionObject r0;
        java.lang.String $r1;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: java.lang.String getFunctionName()>();

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError typeError1(java.lang.String,java.lang.String)>("msg.incompat.call", $r1);

        throw $r2;
    }

    private org.mozilla.javascript.IdFunctionObject newIdFunction(java.lang.Object, int, java.lang.String, int, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.IdScriptableObject r1;
        org.mozilla.javascript.IdFunctionObject $r0;
        org.mozilla.javascript.Scriptable r4;
        int i0, i1;
        java.lang.Object r2;
        java.lang.String r3;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.IdScriptableObject;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        r4 := @parameter4: org.mozilla.javascript.Scriptable;

        $r0 = new org.mozilla.javascript.IdFunctionObject;

        specialinvoke $r0.<org.mozilla.javascript.IdFunctionObject: void <init>(org.mozilla.javascript.IdFunctionCall,java.lang.Object,int,java.lang.String,int,org.mozilla.javascript.Scriptable)>(r1, r2, i0, r3, i1, r4);

        $z0 = virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: boolean isSealed()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.mozilla.javascript.IdFunctionObject: void sealObject()>();

     label1:
        return $r0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        org.mozilla.javascript.IdScriptableObject r1;

        r1 := @this: org.mozilla.javascript.IdScriptableObject;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        if $i0 == 0 goto label1;

        virtualinvoke r1.<org.mozilla.javascript.IdScriptableObject: void activatePrototypeMap(int)>($i0);

     label1:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.mozilla.javascript.IdScriptableObject r1;
        int i0;
        java.io.ObjectOutputStream r0;
        org.mozilla.javascript.IdScriptableObject$PrototypeValues $r2, $r3;

        r1 := @this: org.mozilla.javascript.IdScriptableObject;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        i0 = 0;

        $r2 = r1.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        if $r2 == null goto label1;

        $r3 = r1.<org.mozilla.javascript.IdScriptableObject: org.mozilla.javascript.IdScriptableObject$PrototypeValues prototypeValues>;

        i0 = virtualinvoke $r3.<org.mozilla.javascript.IdScriptableObject$PrototypeValues: int getMaxId()>();

     label1:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        return;
    }
}
