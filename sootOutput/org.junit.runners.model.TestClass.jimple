public class org.junit.runners.model.TestClass extends java.lang.Object
{
    private final java.lang.Class fClass;
    private java.util.Map fMethodsForAnnotations;
    private java.util.Map fFieldsForAnnotations;

    public void <init>(java.lang.Class)
    {
        java.util.HashMap $r1, $r2;
        java.lang.reflect.Method[] $r9;
        java.lang.reflect.Constructor[] $r15;
        org.junit.runners.model.TestClass r0;
        java.util.Map $r12, $r14;
        int $i0, i1, i2, i3, i4;
        java.lang.reflect.Method r17;
        boolean $z0;
        org.junit.runners.model.FrameworkMethod $r13;
        java.util.Iterator $r6;
        java.lang.IllegalArgumentException $r16;
        java.lang.reflect.Field r18;
        java.lang.reflect.Field[] $r10;
        java.util.List $r5;
        java.lang.Class r3, $r4, r8;
        java.lang.Object $r7;
        org.junit.runners.model.FrameworkField $r11;

        r0 := @this: org.junit.runners.model.TestClass;

        r3 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.junit.runners.model.TestClass: java.util.Map fMethodsForAnnotations> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.junit.runners.model.TestClass: java.util.Map fFieldsForAnnotations> = $r2;

        r0.<org.junit.runners.model.TestClass: java.lang.Class fClass> = r3;

        if r3 == null goto label1;

        $r15 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof $r15;

        if $i0 <= 1 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Test class can only have one constructor");

        throw $r16;

     label1:
        $r4 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        $r5 = specialinvoke r0.<org.junit.runners.model.TestClass: java.util.List getSuperClasses(java.lang.Class)>($r4);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Class) $r7;

        $r9 = staticinvoke <org.junit.internal.MethodSorter: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>(r8);

        i1 = lengthof $r9;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        r17 = $r9[i2];

        $r13 = new org.junit.runners.model.FrameworkMethod;

        specialinvoke $r13.<org.junit.runners.model.FrameworkMethod: void <init>(java.lang.reflect.Method)>(r17);

        $r14 = r0.<org.junit.runners.model.TestClass: java.util.Map fMethodsForAnnotations>;

        specialinvoke r0.<org.junit.runners.model.TestClass: void addToAnnotationLists(org.junit.runners.model.FrameworkMember,java.util.Map)>($r13, $r14);

        i2 = i2 + 1;

        goto label3;

     label4:
        $r10 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i3 = lengthof $r10;

        i4 = 0;

     label5:
        if i4 >= i3 goto label6;

        r18 = $r10[i4];

        $r11 = new org.junit.runners.model.FrameworkField;

        specialinvoke $r11.<org.junit.runners.model.FrameworkField: void <init>(java.lang.reflect.Field)>(r18);

        $r12 = r0.<org.junit.runners.model.TestClass: java.util.Map fFieldsForAnnotations>;

        specialinvoke r0.<org.junit.runners.model.TestClass: void addToAnnotationLists(org.junit.runners.model.FrameworkMember,java.util.Map)>($r11, $r12);

        i4 = i4 + 1;

        goto label5;

     label6:
        goto label2;

     label7:
        return;
    }

    private void addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map)
    {
        java.lang.'annotation'.Annotation[] $r1;
        java.util.List $r6;
        org.junit.runners.model.TestClass r4;
        java.util.Map r5;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        java.lang.Class $r3;
        org.junit.runners.model.FrameworkMember r0;
        boolean $z0, $z1;

        r4 := @this: org.junit.runners.model.TestClass;

        r0 := @parameter0: org.junit.runners.model.FrameworkMember;

        r5 := @parameter1: java.util.Map;

        $r1 = virtualinvoke r0.<org.junit.runners.model.FrameworkMember: java.lang.'annotation'.Annotation[] getAnnotations()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = $r1[i1];

        $r3 = interfaceinvoke r2.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();

        $r6 = specialinvoke r4.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class)>(r5, $r3);

        $z0 = virtualinvoke r0.<org.junit.runners.model.FrameworkMember: boolean isShadowedBy(java.util.List)>($r6);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z1 = specialinvoke r4.<org.junit.runners.model.TestClass: boolean runsTopToBottom(java.lang.Class)>($r3);

        if $z1 == 0 goto label3;

        interfaceinvoke $r6.<java.util.List: void add(int,java.lang.Object)>(0, r0);

        goto label4;

     label3:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r0);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public java.util.List getAnnotatedMethods(java.lang.Class)
    {
        java.util.List $r3;
        org.junit.runners.model.TestClass r0;
        java.util.Map $r2;
        java.lang.Class r1;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.runners.model.TestClass: java.util.Map fMethodsForAnnotations>;

        $r3 = specialinvoke r0.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class)>($r2, r1);

        return $r3;
    }

    public java.util.List getAnnotatedFields(java.lang.Class)
    {
        java.util.List $r3;
        org.junit.runners.model.TestClass r0;
        java.util.Map $r2;
        java.lang.Class r1;

        r0 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.junit.runners.model.TestClass: java.util.Map fFieldsForAnnotations>;

        $r3 = specialinvoke r0.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMembers(java.util.Map,java.lang.Class)>($r2, r1);

        return $r3;
    }

    private java.util.List getAnnotatedMembers(java.util.Map, java.lang.Class)
    {
        java.util.List $r3;
        org.junit.runners.model.TestClass r5;
        java.util.Map r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        boolean $z0;
        java.util.ArrayList $r4;

        r5 := @this: org.junit.runners.model.TestClass;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    private boolean runsTopToBottom(java.lang.Class)
    {
        org.junit.runners.model.TestClass r1;
        java.lang.Class r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.junit.runners.model.TestClass;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/Before;");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/junit/BeforeClass;");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private java.util.List getSuperClasses(java.lang.Class)
    {
        org.junit.runners.model.TestClass r2;
        java.lang.Class r1, r3;
        java.util.ArrayList $r0;

        r2 := @this: org.junit.runners.model.TestClass;

        r1 := @parameter0: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r3 = r1;

     label1:
        if r3 == null goto label2;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.Class getJavaClass()
    {
        java.lang.Class $r1;
        org.junit.runners.model.TestClass r0;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        if $r1 != null goto label1;

        return "null";

     label1:
        $r2 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    public java.lang.reflect.Constructor getOnlyConstructor()
    {
        java.lang.reflect.Constructor[] $r2;
        org.junit.runners.model.TestClass r0;
        int $i0;
        java.lang.Class $r1;
        long $l1;
        java.lang.reflect.Constructor $r3;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r3 = $r2[0];

        return $r3;
    }

    public java.lang.'annotation'.Annotation[] getAnnotations()
    {
        org.junit.runners.model.TestClass r0;
        java.lang.Class $r1, $r2;
        java.lang.'annotation'.Annotation[] $r3, $r4;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        if $r1 != null goto label1;

        $r4 = newarray (java.lang.'annotation'.Annotation)[0];

        return $r4;

     label1:
        $r2 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>();

        return $r3;
    }

    public java.util.List getAnnotatedFieldValues(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        java.lang.IllegalAccessException $r11;
        java.util.Iterator $r4;
        java.lang.RuntimeException $r12;
        java.util.ArrayList $r0;
        java.util.List $r3;
        org.junit.runners.model.TestClass r1;
        java.lang.Class r2, r9;
        java.lang.Object $r5, r7, $r8, $r10;
        org.junit.runners.model.FrameworkField r6;
        boolean $z0, $z1;

        r1 := @this: org.junit.runners.model.TestClass;

        r7 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r9 := @parameter2: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFields(java.lang.Class)>(r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.junit.runners.model.FrameworkField) $r5;

     label2:
        $r8 = virtualinvoke r6.<org.junit.runners.model.FrameworkField: java.lang.Object get(java.lang.Object)>(r7);

        $z1 = virtualinvoke r9.<java.lang.Class: boolean isInstance(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r9.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("How did getFields return a field we couldn\'t access?", $r11);

        throw $r12;

     label5:
        goto label1;

     label6:
        return $r0;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
    }

    public java.util.List getAnnotatedMethodValues(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        java.lang.Throwable $r12;
        java.lang.Object[] $r8;
        java.util.ArrayList $r0;
        org.junit.runners.model.TestClass r1;
        java.lang.String $r16, $r18;
        boolean $z0, $z1;
        org.junit.runners.model.FrameworkMethod r6;
        java.util.Iterator $r4;
        java.lang.RuntimeException $r13;
        java.util.List $r3;
        java.lang.Class r2, r10;
        java.lang.Object $r5, r7, $r9, $r11;
        java.lang.StringBuilder $r14, $r15, $r17;

        r1 := @this: org.junit.runners.model.TestClass;

        r7 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r10 := @parameter2: java.lang.Class;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.junit.runners.model.FrameworkMethod) $r5;

     label2:
        $r8 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke r6.<org.junit.runners.model.FrameworkMethod: java.lang.Object invokeExplosively(java.lang.Object,java.lang.Object[])>(r7, $r8);

        $z1 = virtualinvoke r10.<java.lang.Class: boolean isInstance(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        $r11 = virtualinvoke r10.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r9);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in ");

        $r16 = virtualinvoke r6.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r12);

        throw $r13;

     label5:
        goto label1;

     label6:
        return $r0;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean isANonStaticInnerClass()
    {
        org.junit.runners.model.TestClass r0;
        int $i0;
        java.lang.Class $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.junit.runners.model.TestClass;

        $r1 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.junit.runners.model.TestClass: java.lang.Class fClass>;

        $i0 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
