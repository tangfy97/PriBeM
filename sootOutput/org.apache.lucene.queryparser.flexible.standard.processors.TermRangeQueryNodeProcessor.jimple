public class org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor r6;
        java.util.Date $r19, $r22, r32;
        java.util.Locale r29;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        java.text.DateFormat $r18;
        boolean $z0, $z1, z2;
        org.apache.lucene.queryparser.flexible.core.config.FieldConfig $r15;
        java.lang.CharSequence $r13;
        java.util.TimeZone $r26, r30;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r2, $r4;
        java.lang.Exception $r27;
        org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode r1;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r8, $r11, $r24;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode r3, r5;
        org.apache.lucene.document.DateTools$Resolution r28;
        java.util.Calendar $r21;
        int $i0, $i1;
        java.lang.String $r16, $r17, $r20, $r23, r31;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r7, $r10, $r14;
        java.lang.Object $r9, $r12, $r25;

        r6 := @this: org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode;

        if $z0 == 0 goto label11;

        r1 = (org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode) r0;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        r3 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r2;

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        r5 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) $r4;

        r28 = null;

        z2 = 0;

        $r7 = virtualinvoke r6.<org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r8 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey LOCALE>;

        $r9 = virtualinvoke $r7.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r8);

        r29 = (java.util.Locale) $r9;

        if r29 != null goto label01;

        r29 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label01:
        $r10 = virtualinvoke r6.<org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r11 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey TIMEZONE>;

        $r12 = virtualinvoke $r10.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r11);

        $r26 = (java.util.TimeZone) $r12;

        r30 = $r26;

        if $r26 != null goto label02;

        r30 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

     label02:
        $r13 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: java.lang.CharSequence getField()>();

        r31 = null;

        if $r13 == null goto label03;

        r31 = virtualinvoke $r13.<java.lang.Object: java.lang.String toString()>();

     label03:
        $r14 = virtualinvoke r6.<org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        $r15 = virtualinvoke $r14.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: org.apache.lucene.queryparser.flexible.core.config.FieldConfig getFieldConfig(java.lang.String)>(r31);

        if $r15 == null goto label04;

        $r24 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey DATE_RESOLUTION>;

        $r25 = virtualinvoke $r15.<org.apache.lucene.queryparser.flexible.core.config.FieldConfig: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r24);

        r28 = (org.apache.lucene.document.DateTools$Resolution) $r25;

     label04:
        $z1 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode: boolean isUpperInclusive()>();

        if $z1 == 0 goto label05;

        z2 = 1;

     label05:
        $r16 = virtualinvoke r5.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r17 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

     label06:
        $r18 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(3, r29);

        virtualinvoke $r18.<java.text.DateFormat: void setLenient(boolean)>(1);

        $i0 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i0 <= 0 goto label07;

        $r22 = virtualinvoke $r18.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r16);

        $r23 = staticinvoke <org.apache.lucene.document.DateTools: java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution)>($r22, r28);

        virtualinvoke r5.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setText(java.lang.CharSequence)>($r23);

     label07:
        $i1 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i1 <= 0 goto label09;

        $r19 = virtualinvoke $r18.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r17);

        r32 = $r19;

        if z2 == 0 goto label08;

        $r21 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>(r30, r29);

        virtualinvoke $r21.<java.util.Calendar: void setTime(java.util.Date)>($r19);

        virtualinvoke $r21.<java.util.Calendar: void set(int,int)>(11, 23);

        virtualinvoke $r21.<java.util.Calendar: void set(int,int)>(12, 59);

        virtualinvoke $r21.<java.util.Calendar: void set(int,int)>(13, 59);

        virtualinvoke $r21.<java.util.Calendar: void set(int,int)>(14, 999);

        r32 = virtualinvoke $r21.<java.util.Calendar: java.util.Date getTime()>();

     label08:
        $r20 = staticinvoke <org.apache.lucene.document.DateTools: java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution)>(r32, r28);

        virtualinvoke r3.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: void setText(java.lang.CharSequence)>($r20);

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

     label11:
        return r0;

        catch java.lang.Exception from label06 to label09 with label10;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.TermRangeQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
