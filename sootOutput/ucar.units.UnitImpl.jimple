public abstract class ucar.units.UnitImpl extends java.lang.Object implements ucar.units.Unit, java.io.Serializable
{
    private static final long serialVersionUID;
    private final ucar.units.UnitName id;

    protected void <init>()
    {
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        specialinvoke r0.<ucar.units.UnitImpl: void <init>(ucar.units.UnitName)>(null);

        return;
    }

    protected void <init>(ucar.units.UnitName)
    {
        ucar.units.UnitName r1;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: ucar.units.UnitName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.units.UnitImpl: ucar.units.UnitName id> = r1;

        return;
    }

    public final ucar.units.UnitName getUnitName()
    {
        ucar.units.UnitName $r1;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        $r1 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        return $r1;
    }

    public final java.lang.String getName()
    {
        ucar.units.UnitName $r1, $r2;
        java.lang.String $r3;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        $r1 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        $r3 = virtualinvoke $r2.<ucar.units.UnitName: java.lang.String getName()>();

     label2:
        return $r3;
    }

    public final java.lang.String getPlural()
    {
        ucar.units.UnitName $r1, $r2;
        java.lang.String $r3;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        $r1 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        $r3 = virtualinvoke $r2.<ucar.units.UnitName: java.lang.String getPlural()>();

     label2:
        return $r3;
    }

    public final java.lang.String getSymbol()
    {
        ucar.units.UnitName $r1, $r2;
        java.lang.String $r3;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        $r1 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<ucar.units.UnitImpl: ucar.units.UnitName id>;

        $r3 = virtualinvoke $r2.<ucar.units.UnitName: java.lang.String getSymbol()>();

     label2:
        return $r3;
    }

    public ucar.units.Unit shiftTo(double) throws ucar.units.ShiftException
    {
        ucar.units.Unit $r1;
        ucar.units.UnitImpl r0;
        double d0;

        r0 := @this: ucar.units.UnitImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <ucar.units.OffsetUnit: ucar.units.Unit getInstance(ucar.units.Unit,double)>(r0, d0);

        return $r1;
    }

    public ucar.units.Unit shiftTo(java.util.Date) throws ucar.units.ShiftException
    {
        ucar.units.Unit $r2;
        java.util.Date r1;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: java.util.Date;

        $r2 = staticinvoke <ucar.units.TimeScaleUnit: ucar.units.Unit getInstance(ucar.units.Unit,java.util.Date)>(r0, r1);

        return $r2;
    }

    public final ucar.units.Unit multiplyBy(ucar.units.Unit) throws ucar.units.MultiplyException
    {
        ucar.units.Unit r1, $r2;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: ucar.units.Unit;

        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Unit myMultiplyBy(ucar.units.Unit)>(r1);

        return $r2;
    }

    public ucar.units.Unit multiplyBy(double) throws ucar.units.MultiplyException
    {
        ucar.units.Unit $r1;
        double d0;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <ucar.units.ScaledUnit: ucar.units.Unit getInstance(double,ucar.units.Unit)>(d0, r0);

        return $r1;
    }

    protected abstract ucar.units.Unit myMultiplyBy(ucar.units.Unit) throws ucar.units.MultiplyException;

    public final ucar.units.Unit divideBy(ucar.units.Unit) throws ucar.units.OperationException
    {
        ucar.units.Unit r1, $r2;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: ucar.units.Unit;

        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Unit myDivideBy(ucar.units.Unit)>(r1);

        return $r2;
    }

    protected abstract ucar.units.Unit myDivideBy(ucar.units.Unit) throws ucar.units.OperationException;

    public final ucar.units.Unit divideInto(ucar.units.Unit) throws ucar.units.OperationException
    {
        ucar.units.Unit r1, $r2;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: ucar.units.Unit;

        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Unit myDivideInto(ucar.units.Unit)>(r1);

        return $r2;
    }

    protected abstract ucar.units.Unit myDivideInto(ucar.units.Unit) throws ucar.units.OperationException;

    public final ucar.units.Unit raiseTo(int) throws ucar.units.RaiseException
    {
        int i0;
        ucar.units.Unit $r1;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Unit myRaiseTo(int)>(i0);

        return $r1;
    }

    protected abstract ucar.units.Unit myRaiseTo(int) throws ucar.units.RaiseException;

    public ucar.units.Unit log(double)
    {
        ucar.units.Unit $r1;
        ucar.units.UnitImpl r0;
        double d0;

        r0 := @this: ucar.units.UnitImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <ucar.units.LogarithmicUnit: ucar.units.Unit getInstance(ucar.units.Unit,double)>(r0, d0);

        return $r1;
    }

    public ucar.units.Converter getConverterTo(ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Unit r2;
        ucar.units.UnitImpl$MyConverter $r0;
        ucar.units.UnitImpl r1;

        r1 := @this: ucar.units.UnitImpl;

        r2 := @parameter0: ucar.units.Unit;

        $r0 = new ucar.units.UnitImpl$MyConverter;

        specialinvoke $r0.<ucar.units.UnitImpl$MyConverter: void <init>(ucar.units.Unit,ucar.units.Unit)>(r1, r2);

        return $r0;
    }

    public float convertTo(float, ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Unit r1;
        float f0, $f1;
        ucar.units.UnitImpl r0;
        double $d0, $d1;

        r0 := @this: ucar.units.UnitImpl;

        f0 := @parameter0: float;

        r1 := @parameter1: ucar.units.Unit;

        $d0 = (double) f0;

        $d1 = virtualinvoke r0.<ucar.units.UnitImpl: double convertTo(double,ucar.units.Unit)>($d0, r1);

        $f1 = (float) $d1;

        return $f1;
    }

    public double convertTo(double, ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Converter $r2;
        ucar.units.Unit r1;
        ucar.units.UnitImpl r0;
        double d0, $d1;

        r0 := @this: ucar.units.UnitImpl;

        d0 := @parameter0: double;

        r1 := @parameter1: ucar.units.Unit;

        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Converter getConverterTo(ucar.units.Unit)>(r1);

        $d1 = interfaceinvoke $r2.<ucar.units.Converter: double convert(double)>(d0);

        return $d1;
    }

    public float[] convertTo(float[], ucar.units.Unit) throws ucar.units.ConversionException
    {
        ucar.units.Unit r2;
        int $i0;
        float[] r1, $r3, $r4;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: float[];

        r2 := @parameter1: ucar.units.Unit;

        $i0 = lengthof r1;

        $r3 = newarray (float)[$i0];

        $r4 = virtualinvoke r0.<ucar.units.UnitImpl: float[] convertTo(float[],ucar.units.Unit,float[])>(r1, r2, $r3);

        return $r4;
    }

    public double[] convertTo(double[], ucar.units.Unit) throws ucar.units.ConversionException
    {
        double[] r1, $r3, $r4;
        ucar.units.Unit r2;
        int $i0;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: double[];

        r2 := @parameter1: ucar.units.Unit;

        $i0 = lengthof r1;

        $r3 = newarray (double)[$i0];

        $r4 = virtualinvoke r0.<ucar.units.UnitImpl: double[] convertTo(double[],ucar.units.Unit,double[])>(r1, r2, $r3);

        return $r4;
    }

    public float[] convertTo(float[], ucar.units.Unit, float[]) throws ucar.units.ConversionException
    {
        ucar.units.Converter $r2;
        ucar.units.Unit r1;
        float[] r3, r4, $r5;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r3 := @parameter0: float[];

        r1 := @parameter1: ucar.units.Unit;

        r4 := @parameter2: float[];

        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Converter getConverterTo(ucar.units.Unit)>(r1);

        $r5 = interfaceinvoke $r2.<ucar.units.Converter: float[] convert(float[],float[])>(r3, r4);

        return $r5;
    }

    public double[] convertTo(double[], ucar.units.Unit, double[]) throws ucar.units.ConversionException
    {
        ucar.units.Converter $r2;
        ucar.units.Unit r1;
        double[] r3, r4, $r5;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        r3 := @parameter0: double[];

        r1 := @parameter1: ucar.units.Unit;

        r4 := @parameter2: double[];

        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.Converter getConverterTo(ucar.units.Unit)>(r1);

        $r5 = interfaceinvoke $r2.<ucar.units.Converter: double[] convert(double[],double[])>(r3, r4);

        return $r5;
    }

    public boolean isCompatible(ucar.units.Unit)
    {
        ucar.units.DerivedUnit $r1, $r3;
        ucar.units.Unit r2;
        ucar.units.UnitImpl r0;
        boolean $z0;

        r0 := @this: ucar.units.UnitImpl;

        r2 := @parameter0: ucar.units.Unit;

        $r1 = virtualinvoke r0.<ucar.units.UnitImpl: ucar.units.DerivedUnit getDerivedUnit()>();

        $r3 = interfaceinvoke r2.<ucar.units.Unit: ucar.units.DerivedUnit getDerivedUnit()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public abstract int hashCode();

    private static final boolean equals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        if r1 == null goto label2;

     label1:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    private static final boolean equalsIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        if r1 == null goto label2;

     label1:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1, $r2;
        ucar.units.UnitImpl r0;

        r0 := @this: ucar.units.UnitImpl;

        $r1 = virtualinvoke r0.<ucar.units.UnitImpl: java.lang.String getSymbol()>();

        if $r1 == null goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<ucar.units.UnitImpl: java.lang.String getName()>();

     label2:
        return $r2;
    }

    public java.lang.String makeLabel(java.lang.String)
    {
        ucar.units.UnitImpl r2;
        java.lang.StringBuffer $r6, $r7, $r8;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String r1, $r3, $r4, $r5;

        r2 := @this: ucar.units.UnitImpl;

        r1 := @parameter0: java.lang.String;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(" ");

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        $r7 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>(0, 40);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

     label1:
        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $i1 = virtualinvoke $r8.<java.lang.StringBuffer: int length()>();

        $r3 = virtualinvoke r2.<ucar.units.UnitImpl: java.lang.String toString()>();

        virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String substring(int)>($i1);

        $i2 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>(32);

        $i6 = (int) -1;

        if $i2 == $i6 goto label2;

        $r6 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>($i1, 40);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

     label2:
        $r5 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <ucar.units.UnitImpl: long serialVersionUID> = 1L;

        return;
    }
}
