class org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear extends java.lang.Object
{
    public final int iMonthOfYear;
    public final int iDayOfMonth;
    public final int iDayOfWeek;
    public final boolean iAdvanceDayOfWeek;
    public final int iMillisOfDay;
    public final char iZoneChar;

    void <init>()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear> = 1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth> = 1;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek> = 0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek> = 0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay> = 0;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar> = 119;

        return;
    }

    void <init>(java.util.StringTokenizer)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r0;
        java.util.StringTokenizer r1;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i13;
        java.lang.String $r2, $r3, $r4, $r5, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, z3, $z4;
        char $c2, c11;
        java.lang.NumberFormatException $r6;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        r1 := @parameter0: java.util.StringTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i7 = 1;

        i8 = 1;

        i9 = 0;

        i10 = 0;

        z3 = 0;

        c11 = 119;

        $z0 = virtualinvoke r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label7;

        $r2 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i7 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>($r2);

        $z1 = virtualinvoke r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label7;

        $r3 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("last");

        if $z2 == 0 goto label1;

        $i13 = (int) -1;

        i8 = $i13;

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(4);

        i9 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>($r5);

        z3 = 0;

        goto label6;

     label1:
        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        i9 = 0;

        z3 = 0;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(">=");

        if $i3 <= 0 goto label4;

        $i6 = $i3 + 2;

        $r10 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i6);

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r11 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        i9 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>($r11);

        z3 = 1;

        goto label6;

     label4:
        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("<=");

        if $i4 <= 0 goto label5;

        $i5 = $i4 + 2;

        $r8 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i5);

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8);

        $r9 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        i9 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>($r9);

        z3 = 0;

        goto label6;

     label5:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r12;

     label6:
        $z4 = virtualinvoke r1.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z4 == 0 goto label7;

        $r4 = virtualinvoke r1.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i1);

        c11 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>($c2);

        i10 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r4);

     label7:
        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear> = i7;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth> = i8;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek> = i9;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek> = z3;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay> = i10;

        r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar> = c11;

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void addRecurring(org.joda.time.tz.DateTimeZoneBuilder, java.lang.String, int, int, int)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r2;
        char $c7;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        java.lang.String r1;
        boolean $z0;

        r2 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        r0 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $c7 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>;

        $i6 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>;

        $i5 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>;

        $i4 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>;

        $z0 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>;

        $i3 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>(r1, i0, i1, i2, $c7, $i6, $i5, $i4, $z0, $i3);

        return;
    }

    public void addCutover(org.joda.time.tz.DateTimeZoneBuilder, int)
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r1;
        char $c5;
        int i0, $i1, $i2, $i3, $i4;
        org.joda.time.tz.DateTimeZoneBuilder r0;
        boolean $z0;

        r1 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        r0 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder;

        i0 := @parameter1: int;

        $c5 = r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>;

        $i4 = r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>;

        $i3 = r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>;

        $i2 = r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>;

        $z0 = r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>;

        $i1 = r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>;

        virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(i0, $c5, $i4, $i3, $i2, $z0, $i1);

        return;
    }

    public java.lang.String toString()
    {
        org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear r2;
        java.lang.StringBuffer $r0, $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r20;
        boolean $z0;
        char $c4;

        r2 := @this: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MonthOfYear: ");

        $i0 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DayOfMonth: ");

        $i1 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DayOfWeek: ");

        $i2 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("AdvanceDayOfWeek: ");

        $z0 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MillisOfDay: ");

        $i3 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>;

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ZoneChar: ");

        $c4 = r2.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>;

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r20;
    }
}
