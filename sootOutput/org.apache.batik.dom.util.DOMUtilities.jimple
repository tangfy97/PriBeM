public class org.apache.batik.dom.util.DOMUtilities extends org.apache.batik.xml.XMLUtilities
{
    protected static final java.lang.String[] LOCK_STRINGS;
    protected static final java.lang.String[] MODIFIER_STRINGS;

    protected void <init>()
    {
        org.apache.batik.dom.util.DOMUtilities r0;

        r0 := @this: org.apache.batik.dom.util.DOMUtilities;

        specialinvoke r0.<org.apache.batik.xml.XMLUtilities: void <init>()>();

        return;
    }

    public static void writeDocument(org.w3c.dom.Document, java.io.Writer) throws java.io.IOException
    {
        java.io.Writer r1;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node r2;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: java.io.Writer;

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label2;

     label1:
        staticinvoke <org.apache.batik.dom.util.DOMUtilities: void writeNode(org.w3c.dom.Node,java.io.Writer)>(r2, r1);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label2:
        if r2 != null goto label1;

        return;
    }

    public static void writeNode(org.w3c.dom.Node, java.io.Writer) throws java.io.IOException
    {
        org.w3c.dom.Document $r2;
        boolean $z0;
        java.io.Writer r1;
        org.w3c.dom.Attr r40;
        short $s0, $s2;
        java.lang.StringBuffer $r8, $r9, $r10, $r13, $r15, $r16, $r17, $r18, $r37, $r38, $r43, $r44, $r45;
        org.w3c.dom.Node r0, $r28, $r31, r41;
        int $i1, i3, $i4, $i5;
        org.w3c.dom.NamedNodeMap $r30;
        java.lang.String $r4, $r5, $r6, $r11, $r14, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r32, $r33, $r34, $r39;
        java.io.IOException $r46;
        org.w3c.dom.DocumentType r42;
        org.w3c.dom.Element $r3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: java.io.Writer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i4 = (int) $s0;

        tableswitch($i4)
        {
            case 1: goto label01;
            case 2: goto label16;
            case 3: goto label08;
            case 4: goto label09;
            case 5: goto label10;
            case 6: goto label16;
            case 7: goto label11;
            case 8: goto label12;
            case 9: goto label16;
            case 10: goto label13;
            default: goto label16;
        };

     label01:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("<");

        $r27 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r27);

        $z0 = interfaceinvoke r0.<org.w3c.dom.Node: boolean hasAttributes()>();

        if $z0 == 0 goto label04;

        $r30 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i1 = interfaceinvoke $r30.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i3 = 0;

        goto label03;

     label02:
        $r31 = interfaceinvoke $r30.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        r40 = (org.w3c.dom.Attr) $r31;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(" ");

        $r32 = interfaceinvoke r40.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r32);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("=\"");

        $r33 = interfaceinvoke r40.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r34 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String contentToString(java.lang.String)>($r33);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r34);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("\"");

        i3 = i3 + 1;

     label03:
        if i3 < $i1 goto label02;

     label04:
        $r28 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        r41 = $r28;

        if $r28 == null goto label07;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(">");

        goto label06;

     label05:
        staticinvoke <org.apache.batik.dom.util.DOMUtilities: void writeNode(org.w3c.dom.Node,java.io.Writer)>(r41, r1);

        r41 = interfaceinvoke r41.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label06:
        if r41 != null goto label05;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("</");

        $r29 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r29);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(">");

        goto label17;

     label07:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("/>");

        goto label17;

     label08:
        $r25 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r26 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String contentToString(java.lang.String)>($r25);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r26);

        goto label17;

     label09:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("<![CDATA[");

        $r24 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r24);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("]]>");

        goto label17;

     label10:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("&");

        $r23 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r23);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(";");

        goto label17;

     label11:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("<?");

        $r21 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r21);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(" ");

        $r22 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r22);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("?>");

        goto label17;

     label12:
        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("<!--");

        $r20 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r20);

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("-->");

        goto label17;

     label13:
        r42 = (org.w3c.dom.DocumentType) r0;

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("<!DOCTYPE ");

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r4);

        $r5 = interfaceinvoke r42.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        if $r5 == null goto label14;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" PUBLIC \"");

        $r14 = interfaceinvoke r42.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" \"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r19);

        goto label17;

     label14:
        $r6 = interfaceinvoke r42.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        if $r6 == null goto label15;

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" SYSTEM \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\">");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r11);

     label15:
        goto label17;

     label16:
        $r46 = new java.io.IOException;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r37 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown DOM node type ");

        $s2 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s2;

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r46.<java.io.IOException: void <init>(java.lang.String)>($r39);

        throw $r46;

     label17:
        return;
    }

    public static java.lang.String getXML(org.w3c.dom.Node)
    {
        java.io.StringWriter $r0;
        org.w3c.dom.Node r1;
        java.io.IOException $r3;
        java.lang.String $r2;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        staticinvoke <org.apache.batik.dom.util.DOMUtilities: void writeNode(org.w3c.dom.Node,java.io.Writer)>(r1, $r0);

        virtualinvoke $r0.<java.io.Writer: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        return "";

     label4:
        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.lang.String contentToString(java.lang.String)
    {
        char $c1;
        java.lang.StringBuffer $r3;
        int $i0, i2, $i3, $i4;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i0);

        i2 = 0;

        goto label9;

     label1:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $i4 = (int) $c1;

        lookupswitch($i4)
        {
            case 34: goto label5;
            case 38: goto label4;
            case 39: goto label6;
            case 60: goto label2;
            case 62: goto label3;
            default: goto label7;
        };

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&lt;");

        goto label8;

     label3:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&gt;");

        goto label8;

     label4:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&amp;");

        goto label8;

     label5:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&quot;");

        goto label8;

     label6:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&apos;");

        goto label8;

     label7:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

     label8:
        i2 = i2 + 1;

     label9:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 < $i3 goto label1;

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static int getChildIndex(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, $r1, r2, $r3;
        int $i0, $i2;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        if r0 == null goto label1;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r1 != r2 goto label1;

        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r3 != null goto label2;

     label1:
        $i2 = (int) -1;

        return $i2;

     label2:
        $i0 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: int getChildIndex(org.w3c.dom.Node)>(r0);

        return $i0;
    }

    public static int getChildIndex(org.w3c.dom.Node)
    {
        org.w3c.dom.NodeList $r2;
        org.w3c.dom.Node r0, $r1, $r3;
        int $i0, i1, $i3;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

        goto label3;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        if $r3 != r0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

     label3:
        $i0 = interfaceinvoke $r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 < $i0 goto label1;

        $i3 = (int) -1;

        return $i3;
    }

    public static boolean isAnyNodeAncestorOf(java.util.ArrayList, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r2, r3;
        int $i0, i1;
        java.lang.Object $r1;
        java.util.ArrayList r0;
        boolean $z0;

        r0 := @parameter0: java.util.ArrayList;

        r3 := @parameter1: org.w3c.dom.Node;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        i1 = 0;

        goto label3;

     label1:
        $r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (org.w3c.dom.Node) $r1;

        $z0 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isAncestorOf(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label1;

        return 0;
    }

    public static boolean isAncestorOf(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, r2;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label5;

     label3:
        if r2 != r0 goto label4;

        return 1;

     label4:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label5:
        if r2 != null goto label3;

        return 0;
    }

    public static boolean isParentOf(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, $r2;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r2 == r1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean canAppend(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r0 == r1 goto label1;

        $z0 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isAncestorOf(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r1);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean canAppendAny(java.util.ArrayList, org.w3c.dom.Node)
    {
        java.util.ArrayList r1;
        org.w3c.dom.Node r0, r3;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.ArrayList;

        r0 := @parameter1: org.w3c.dom.Node;

        $z0 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean canHaveChildren(org.w3c.dom.Node)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

        goto label4;

     label2:
        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (org.w3c.dom.Node) $r2;

        $z1 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean canAppend(org.w3c.dom.Node,org.w3c.dom.Node)>(r3, r0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label2;

        return 0;
    }

    public static boolean canHaveChildren(org.w3c.dom.Node)
    {
        int $i1;
        short $s0;
        org.w3c.dom.Node r0;

        r0 := @parameter0: org.w3c.dom.Node;

        if r0 != null goto label1;

        return 0;

     label1:
        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label2;
            case 8: goto label2;
            case 9: goto label2;
            default: goto label3;
        };

     label2:
        return 0;

     label3:
        return 1;
    }

    public static org.w3c.dom.Node parseXML(java.lang.String, org.w3c.dom.Document, java.lang.String, java.util.Map, java.lang.String, org.apache.batik.dom.util.SAXDocumentFactory)
    {
        org.w3c.dom.Document r4, $r10, $r51;
        java.util.Map r18;
        boolean $z0;
        java.util.Set $r30;
        org.apache.batik.dom.util.SAXDocumentFactory r2;
        java.lang.Exception $r40, $r41;
        org.w3c.dom.DocumentFragment $r7, $r11;
        short $s0;
        java.lang.StringBuffer $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r34, $r35, $r36, $r37, $r38, $r39, $r48;
        org.w3c.dom.Node $r6, $r13, r52;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String r0, r1, r3, $r8, $r17, r42, r43, r44, r45, r46, $r47, $r49;
        java.util.Iterator $r31;
        org.w3c.dom.Element $r5, $r12;
        java.io.StringReader $r9, $r50;
        java.lang.Object $r32, $r33;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: org.w3c.dom.Document;

        r3 := @parameter2: java.lang.String;

        r18 := @parameter3: java.util.Map;

        r0 := @parameter4: java.lang.String;

        r2 := @parameter5: org.apache.batik.dom.util.SAXDocumentFactory;

        r42 = "";

        r43 = "";

        if r0 == null goto label04;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        r44 = $r17;

        if r18 == null goto label03;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        r44 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        $r30 = interfaceinvoke r18.<java.util.Map: java.util.Set keySet()>();

        $r31 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r32 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.lang.String) $r32;

        $r33 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r45);

        r46 = (java.lang.String) $r33;

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r45);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("=\"");

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r46);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" ");

        r44 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

     label02:
        $z0 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label01;

     label03:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r44);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r42 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        r43 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

     label04:
        $r47 = virtualinvoke r42.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r47.<java.lang.String: int length()>();

        if $i2 != 0 goto label08;

        $r8 = virtualinvoke r43.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 != 0 goto label08;

     label05:
        $r9 = new java.io.StringReader;

        specialinvoke $r9.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r10 = virtualinvoke r2.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.io.Reader)>(r3, $r9);

        if r4 != null goto label06;

        return $r10;

     label06:
        $r11 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.DocumentFragment createDocumentFragment()>();

        $r12 = interfaceinvoke $r10.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r13 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>($r12, 1);

        interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        return $r11;

     label07:
        $r41 := @caughtexception;

     label08:
        $r48 = new java.lang.StringBuffer;

        $i3 = virtualinvoke r42.<java.lang.String: int length()>();

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $i6 = virtualinvoke r43.<java.lang.String: int length()>();

        $i7 = $i5 + $i6;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>(int)>($i7);

        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r42);

        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r43);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

     label09:
        $r50 = new java.io.StringReader;

        specialinvoke $r50.<java.io.StringReader: void <init>(java.lang.String)>($r49);

        $r51 = virtualinvoke r2.<org.apache.batik.dom.util.SAXDocumentFactory: org.w3c.dom.Document createDocument(java.lang.String,java.io.Reader)>(r3, $r50);

        if r4 != null goto label10;

        return $r51;

     label10:
        $r5 = interfaceinvoke $r51.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r52 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label13;

     label11:
        $s0 = interfaceinvoke r52.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label12;

        $r6 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r52, 1);

        $r7 = interfaceinvoke r4.<org.w3c.dom.Document: org.w3c.dom.DocumentFragment createDocumentFragment()>();

        interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        return $r7;

     label12:
        r52 = interfaceinvoke r52.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label13:
        if r52 != null goto label11;

     label14:
        goto label16;

     label15:
        $r40 := @caughtexception;

     label16:
        return null;

        catch java.lang.Exception from label05 to label07 with label07;
        catch java.lang.Exception from label09 to label14 with label15;
    }

    public static org.w3c.dom.Document deepCloneDocument(org.w3c.dom.Document, org.w3c.dom.DOMImplementation)
    {
        org.w3c.dom.Attr $r13;
        short $s0;
        org.w3c.dom.Document r0, $r5;
        org.w3c.dom.Node $r7, $r8, $r9, $r11, $r12, r14, r15;
        int $i1, i2, $i3;
        org.w3c.dom.NamedNodeMap $r10;
        java.lang.String $r3, $r4;
        org.w3c.dom.DOMImplementation r2;
        boolean $z0, z1;
        org.w3c.dom.Element $r1, $r6;

        r0 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: org.w3c.dom.DOMImplementation;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r3 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r4 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r5 = interfaceinvoke r2.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>($r3, $r4, null);

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        z1 = 1;

        r14 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label10;

     label01:
        if r14 != $r1 goto label07;

        z1 = 0;

        $z0 = interfaceinvoke $r1.<org.w3c.dom.Node: boolean hasAttributes()>();

        if $z0 == 0 goto label04;

        $r10 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i1 = interfaceinvoke $r10.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i2 = 0;

        goto label03;

     label02:
        $r11 = interfaceinvoke $r10.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i2);

        $r12 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>($r11, 1);

        $r13 = (org.w3c.dom.Attr) $r12;

        interfaceinvoke $r6.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>($r13);

        i2 = i2 + 1;

     label03:
        if i2 < $i1 goto label02;

     label04:
        r15 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label06;

     label05:
        $r9 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r15, 1);

        interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r9);

        r15 = interfaceinvoke r15.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label06:
        if r15 != null goto label05;

        goto label09;

     label07:
        $s0 = interfaceinvoke r14.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        if $i3 == 10 goto label09;

        if z1 == 0 goto label08;

        $r8 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r14, 1);

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>($r8, $r6);

        goto label09;

     label08:
        $r7 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Node importNode(org.w3c.dom.Node,boolean)>(r14, 1);

        interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

     label09:
        r14 = interfaceinvoke r14.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label10:
        if r14 != null goto label01;

        return $r5;
    }

    public static boolean isValidName(java.lang.String)
    {
        int[] $r1, $r2;
        int $i0, $i2, $i3, $i4, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17;
        java.lang.String r0;
        char $c1, $c5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i14 = (int) $c1;

        i9 = $i14 / 32;

        $i15 = (int) $c1;

        i10 = $i15 % 32;

        $r1 = <org.apache.batik.xml.XMLCharacters: int[] NAME_FIRST_CHARACTER>;

        $i3 = $r1[i9];

        $i2 = 1 << i10;

        $i4 = $i3 & $i2;

        if $i4 != 0 goto label2;

        return 0;

     label2:
        i11 = 1;

        goto label5;

     label3:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11);

        $i16 = (int) $c5;

        i12 = $i16 / 32;

        $i17 = (int) $c5;

        i13 = $i17 % 32;

        $r2 = <org.apache.batik.xml.XMLCharacters: int[] NAME_CHARACTER>;

        $i7 = $r2[i12];

        $i6 = 1 << i13;

        $i8 = $i7 & $i6;

        if $i8 != 0 goto label4;

        return 0;

     label4:
        i11 = i11 + 1;

     label5:
        if i11 < $i0 goto label3;

        return 1;
    }

    public static boolean isValidName11(java.lang.String)
    {
        int[] $r1, $r2;
        int $i0, $i2, $i3, $i4, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i14, $i15, $i16, $i17;
        java.lang.String r0;
        char $c1, $c5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i14 = (int) $c1;

        i9 = $i14 / 32;

        $i15 = (int) $c1;

        i10 = $i15 % 32;

        $r1 = <org.apache.batik.xml.XMLCharacters: int[] NAME11_FIRST_CHARACTER>;

        $i3 = $r1[i9];

        $i2 = 1 << i10;

        $i4 = $i3 & $i2;

        if $i4 != 0 goto label2;

        return 0;

     label2:
        i11 = 1;

        goto label5;

     label3:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11);

        $i16 = (int) $c5;

        i12 = $i16 / 32;

        $i17 = (int) $c5;

        i13 = $i17 % 32;

        $r2 = <org.apache.batik.xml.XMLCharacters: int[] NAME11_CHARACTER>;

        $i7 = $r2[i12];

        $i6 = 1 << i13;

        $i8 = $i7 & $i6;

        if $i8 != 0 goto label4;

        return 0;

     label4:
        i11 = i11 + 1;

     label5:
        if i11 < $i0 goto label3;

        return 1;
    }

    public static boolean isValidPrefix(java.lang.String)
    {
        int $i0, $i2;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getPrefix(java.lang.String)
    {
        int $i0, $i1, $i2, $i4;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label2;

     label1:
        $r1 = null;

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label3:
        return $r1;
    }

    public static java.lang.String getLocalName(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label2;

     label1:
        $r1 = r0;

        goto label3;

     label2:
        $i3 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

     label3:
        return $r1;
    }

    public static void parseStyleSheetPIData(java.lang.String, org.apache.batik.dom.util.HashTable)
    {
        org.apache.batik.dom.util.HashTable r10;
        java.lang.StringBuffer $r7, $r8, $r16, $r17, $r21, $r22, $r26, $r27, $r31, $r32, $r36, $r37, $r41, $r42, $r46, $r47, $r49, $r51, $r52, $r54, $r56, $r58, $r60, $r61, $r63, $r65;
        java.lang.String r0, $r9, $r11, $r12, $r13, $r18, $r23, $r28, $r33, $r38, $r43, $r48;
        int[] $r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.DOMException $r50, $r53, $r55, $r57, $r59, $r62, $r64, $r66;
        int $i0, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i14, $i16, $i18, $i20, $i22, $i23, $i25, $i27, i28, i29, i30, i31, i32, i33, i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        char $c1, $c2, $c7, $c13, $c15, $c17, $c19, $c21, $c24, $c26;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: org.apache.batik.dom.util.HashTable;

        i28 = 0;

        goto label03;

     label01:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i28);

        $z0 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c1);

        if $z0 != 0 goto label02;

        goto label35;

     label02:
        i28 = i28 + 1;

     label03:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i0 goto label01;

        goto label35;

     label04:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i28);

        $i36 = (int) $c2;

        i29 = $i36 / 32;

        $i37 = (int) $c2;

        i30 = $i37 % 32;

        $r1 = <org.apache.batik.xml.XMLCharacters: int[] NAME_FIRST_CHARACTER>;

        $i4 = $r1[i29];

        $i3 = 1 << i30;

        $i5 = $i4 & $i3;

        if $i5 != 0 goto label05;

        $r50 = new org.w3c.dom.DOMException;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong name initial:  ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r50.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(5, $r48);

        throw $r50;

     label05:
        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label08;

     label06:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i28);

        $i38 = (int) $c7;

        i31 = $i38 / 32;

        $i39 = (int) $c7;

        i32 = $i39 % 32;

        $r3 = <org.apache.batik.xml.XMLCharacters: int[] NAME_CHARACTER>;

        $i9 = $r3[i31];

        $i8 = 1 << i32;

        $i10 = $i9 & $i8;

        if $i10 != 0 goto label07;

        goto label09;

     label07:
        virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c7);

     label08:
        i28 = i28 + 1;

        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i6 goto label06;

     label09:
        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i11 goto label12;

        $r53 = new org.w3c.dom.DOMException;

        $r52 = new java.lang.StringBuffer;

        specialinvoke $r52.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r53.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r43);

        throw $r53;

     label10:
        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i28);

        $z1 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c13);

        if $z1 != 0 goto label11;

        goto label13;

     label11:
        i28 = i28 + 1;

     label12:
        $i12 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i12 goto label10;

     label13:
        $i14 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i14 goto label14;

        $r55 = new org.w3c.dom.DOMException;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r55.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r38);

        throw $r55;

     label14:
        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i28);

        $i40 = (int) $c15;

        if $i40 == 61 goto label15;

        $r57 = new org.w3c.dom.DOMException;

        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r57.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r33);

        throw $r57;

     label15:
        i33 = i28 + 1;

        goto label18;

     label16:
        $c17 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i33);

        $z2 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c17);

        if $z2 != 0 goto label17;

        goto label19;

     label17:
        i33 = i33 + 1;

     label18:
        $i16 = virtualinvoke r0.<java.lang.String: int length()>();

        if i33 < $i16 goto label16;

     label19:
        $i18 = virtualinvoke r0.<java.lang.String: int length()>();

        if i33 < $i18 goto label20;

        $r59 = new org.w3c.dom.DOMException;

        $r58 = new java.lang.StringBuffer;

        specialinvoke $r58.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r59.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r28);

        throw $r59;

     label20:
        $c19 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i33);

        i34 = i33 + 1;

        $r60 = new java.lang.StringBuffer;

        specialinvoke $r60.<java.lang.StringBuffer: void <init>()>();

        $i41 = (int) $c19;

        if $i41 != 39 goto label25;

        goto label23;

     label21:
        $c26 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i34);

        $i42 = (int) $c26;

        if $i42 != 39 goto label22;

        goto label24;

     label22:
        virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c26);

        i34 = i34 + 1;

     label23:
        $i25 = virtualinvoke r0.<java.lang.String: int length()>();

        if i34 < $i25 goto label21;

     label24:
        $i27 = virtualinvoke r0.<java.lang.String: int length()>();

        if i34 < $i27 goto label31;

        $r62 = new org.w3c.dom.DOMException;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r62.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r23);

        throw $r62;

     label25:
        $i43 = (int) $c19;

        if $i43 != 34 goto label30;

        goto label28;

     label26:
        $c21 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i34);

        $i44 = (int) $c21;

        if $i44 != 34 goto label27;

        goto label29;

     label27:
        virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c21);

        i34 = i34 + 1;

     label28:
        $i20 = virtualinvoke r0.<java.lang.String: int length()>();

        if i34 < $i20 goto label26;

     label29:
        $i22 = virtualinvoke r0.<java.lang.String: int length()>();

        if i34 < $i22 goto label31;

        $r64 = new org.w3c.dom.DOMException;

        $r63 = new java.lang.StringBuffer;

        specialinvoke $r63.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r64.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r18);

        throw $r64;

     label30:
        $r66 = new org.w3c.dom.DOMException;

        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wrong xml-stylesheet data: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r66.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(12, $r9);

        throw $r66;

     label31:
        $r11 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String intern()>();

        $r13 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r10.<org.apache.batik.dom.util.HashTable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        i28 = i34 + 1;

        goto label34;

     label32:
        $c24 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i28);

        $z3 = staticinvoke <org.apache.batik.xml.XMLUtilities: boolean isXMLSpace(char)>($c24);

        if $z3 != 0 goto label33;

        goto label35;

     label33:
        i28 = i28 + 1;

     label34:
        $i23 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i23 goto label32;

     label35:
        $i35 = virtualinvoke r0.<java.lang.String: int length()>();

        if i28 < $i35 goto label04;

        return;
    }

    public static java.lang.String getModifiersList(int, int)
    {
        int i0, i1;
        java.lang.String $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <org.apache.batik.dom.util.DOMUtilitiesSupport: java.lang.String getModifiersList(int,int)>(i0, i1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        $r0 = newarray (java.lang.String)[16];

        $r0[0] = "";

        $r0[1] = "CapsLock";

        $r0[2] = "NumLock";

        $r0[3] = "NumLock CapsLock";

        $r0[4] = "Scroll";

        $r0[5] = "Scroll CapsLock";

        $r0[6] = "Scroll NumLock";

        $r0[7] = "Scroll NumLock CapsLock";

        $r0[8] = "KanaMode";

        $r0[9] = "KanaMode CapsLock";

        $r0[10] = "KanaMode NumLock";

        $r0[11] = "KanaMode NumLock CapsLock";

        $r0[12] = "KanaMode Scroll";

        $r0[13] = "KanaMode Scroll CapsLock";

        $r0[14] = "KanaMode Scroll NumLock";

        $r0[15] = "KanaMode Scroll NumLock CapsLock";

        <org.apache.batik.dom.util.DOMUtilities: java.lang.String[] LOCK_STRINGS> = $r0;

        $r1 = newarray (java.lang.String)[32];

        $r1[0] = "";

        $r1[1] = "Shift";

        $r1[2] = "Control";

        $r1[3] = "Control Shift";

        $r1[4] = "Meta";

        $r1[5] = "Meta Shift";

        $r1[6] = "Control Meta";

        $r1[7] = "Control Meta Shift";

        $r1[8] = "Alt";

        $r1[9] = "Alt Shift";

        $r1[10] = "Alt Control";

        $r1[11] = "Alt Control Shift";

        $r1[12] = "Alt Meta";

        $r1[13] = "Alt Meta Shift";

        $r1[14] = "Alt Control Meta";

        $r1[15] = "Alt Control Meta Shift";

        $r1[16] = "AltGraph";

        $r1[17] = "AltGraph Shift";

        $r1[18] = "AltGraph Control";

        $r1[19] = "AltGraph Control Shift";

        $r1[20] = "AltGraph Meta";

        $r1[21] = "AltGraph Meta Shift";

        $r1[22] = "AltGraph Control Meta";

        $r1[23] = "AltGraph Control Meta Shift";

        $r1[24] = "Alt AltGraph";

        $r1[25] = "Alt AltGraph Shift";

        $r1[26] = "Alt AltGraph Control";

        $r1[27] = "Alt AltGraph Control Shift";

        $r1[28] = "Alt AltGraph Meta";

        $r1[29] = "Alt AltGraph Meta Shift";

        $r1[30] = "Alt AltGraph Control Meta";

        $r1[31] = "Alt AltGraph Control Meta Shift";

        <org.apache.batik.dom.util.DOMUtilities: java.lang.String[] MODIFIER_STRINGS> = $r1;

        return;
    }
}
