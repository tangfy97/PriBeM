abstract class org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription extends java.lang.Object
{
    protected final int w;
    protected final int n;
    private final int[] minErrors;
    private static final long[] MASKS;
    static final boolean $assertionsDisabled;

    void <init>(int, int, int[])
    {
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription r0;
        int[] r1;
        int i0, i1;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int w> = i0;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int n> = i1;

        r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int[] minErrors> = r1;

        return;
    }

    int size()
    {
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;

        $r1 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int[] minErrors>;

        $i2 = lengthof $r1;

        $i0 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int w>;

        $i1 = $i0 + 1;

        $i3 = $i2 * $i1;

        return $i3;
    }

    boolean isAccept(int)
    {
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription r0;
        java.lang.AssertionError $r2;
        int[] $r1;
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int w>;

        $i2 = $i1 + 1;

        i3 = i0 / $i2;

        $i4 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int w>;

        $i5 = $i4 + 1;

        i6 = i0 % $i5;

        $z0 = <org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i6 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $i7 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int w>;

        $i9 = $i7 - i6;

        $r1 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int[] minErrors>;

        $i8 = $r1[i3];

        $i11 = $i9 + $i8;

        $i10 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int n>;

        if $i11 > $i10 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    int getPosition(int)
    {
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: int w>;

        $i2 = $i1 + 1;

        $i3 = i0 % $i2;

        return $i3;
    }

    abstract int transition(int, int, int);

    protected int unpack(long[], int, int)
    {
        org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription r4;
        long l3, $l4, $l6, $l10, $l12, $l13, $l17, $l18, $l19, $l20, $l21, $l22, $l24, $l26, $l27, $l28;
        long[] r0, $r1, $r2, $r3;
        int i0, i1, $i2, i5, i7, $i8, i9, $i11, $i14, $i15, $i16, $i23, $i25, $i29;

        r4 := @this: org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription;

        r0 := @parameter0: long[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 * i1;

        l3 = (long) $i2;

        $l4 = l3 >> 6;

        i5 = (int) $l4;

        $l6 = l3 & 63L;

        i7 = (int) $l6;

        $i8 = i7 + i0;

        if $i8 > 64 goto label1;

        $l24 = r0[i5];

        $l27 = $l24 >> i7;

        $r3 = <org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: long[] MASKS>;

        $i25 = i0 - 1;

        $l26 = $r3[$i25];

        $l28 = $l27 & $l26;

        $i29 = (int) $l28;

        return $i29;

     label1:
        i9 = 64 - i7;

        $l10 = r0[i5];

        $l13 = $l10 >> i7;

        $r1 = <org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: long[] MASKS>;

        $i11 = i9 - 1;

        $l12 = $r1[$i11];

        $l21 = $l13 & $l12;

        $i14 = 1 + i5;

        $l18 = r0[$i14];

        $r2 = <org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: long[] MASKS>;

        $i15 = i0 - i9;

        $i16 = $i15 - 1;

        $l17 = $r2[$i16];

        $l19 = $l18 & $l17;

        $l20 = $l19 << i9;

        $l22 = $l21 + $l20;

        $i23 = (int) $l22;

        return $i23;
    }

    static void <clinit>()
    {
        long[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/automaton/LevenshteinAutomata;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (long)[63];

        $r1[0] = 1L;

        $r1[1] = 3L;

        $r1[2] = 7L;

        $r1[3] = 15L;

        $r1[4] = 31L;

        $r1[5] = 63L;

        $r1[6] = 127L;

        $r1[7] = 255L;

        $r1[8] = 511L;

        $r1[9] = 1023L;

        $r1[10] = 2047L;

        $r1[11] = 4095L;

        $r1[12] = 8191L;

        $r1[13] = 16383L;

        $r1[14] = 32767L;

        $r1[15] = 65535L;

        $r1[16] = 131071L;

        $r1[17] = 262143L;

        $r1[18] = 524287L;

        $r1[19] = 1048575L;

        $r1[20] = 2097151L;

        $r1[21] = 4194303L;

        $r1[22] = 8388607L;

        $r1[23] = 16777215L;

        $r1[24] = 33554431L;

        $r1[25] = 67108863L;

        $r1[26] = 134217727L;

        $r1[27] = 268435455L;

        $r1[28] = 536870911L;

        $r1[29] = 1073741823L;

        $r1[30] = 2147483647L;

        $r1[31] = 4294967295L;

        $r1[32] = 8589934591L;

        $r1[33] = 17179869183L;

        $r1[34] = 34359738367L;

        $r1[35] = 68719476735L;

        $r1[36] = 137438953471L;

        $r1[37] = 274877906943L;

        $r1[38] = 549755813887L;

        $r1[39] = 1099511627775L;

        $r1[40] = 2199023255551L;

        $r1[41] = 4398046511103L;

        $r1[42] = 8796093022207L;

        $r1[43] = 17592186044415L;

        $r1[44] = 35184372088831L;

        $r1[45] = 70368744177663L;

        $r1[46] = 140737488355327L;

        $r1[47] = 281474976710655L;

        $r1[48] = 562949953421311L;

        $r1[49] = 1125899906842623L;

        $r1[50] = 2251799813685247L;

        $r1[51] = 4503599627370495L;

        $r1[52] = 9007199254740991L;

        $r1[53] = 18014398509481983L;

        $r1[54] = 36028797018963967L;

        $r1[55] = 72057594037927935L;

        $r1[56] = 144115188075855871L;

        $r1[57] = 288230376151711743L;

        $r1[58] = 576460752303423487L;

        $r1[59] = 1152921504606846975L;

        $r1[60] = 2305843009213693951L;

        $r1[61] = 4611686018427387903L;

        $r1[62] = 9223372036854775807L;

        <org.apache.lucene.util.automaton.LevenshteinAutomata$ParametricDescription: long[] MASKS> = $r1;

        return;
    }
}
