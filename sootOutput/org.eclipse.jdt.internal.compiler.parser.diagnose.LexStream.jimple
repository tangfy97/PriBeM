public class org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream extends java.lang.Object implements org.eclipse.jdt.internal.compiler.parser.TerminalTokens
{
    public static final int IS_AFTER_JUMP;
    public static final int LBRACE_MISSING;
    private int tokenCacheIndex;
    private int tokenCacheEOFIndex;
    private org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache;
    private int currentIndex;
    private org.eclipse.jdt.internal.compiler.parser.Scanner scanner;
    private int[] intervalStartToSkip;
    private int[] intervalEndToSkip;
    private int[] intervalFlagsToSkip;
    private int previousInterval;
    private int currentInterval;

    public void <init>(int, org.eclipse.jdt.internal.compiler.parser.Scanner, int[], int[], int[], int, int, int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r5, $r8, $r10, $r12, $r14, $r19;
        int[] r15, r16, r17;
        int i0, i1, i2, i3, $i5, $i7, $i9;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] $r1, $r3, $r4, $r6, $r9, $r11, $r13;
        org.eclipse.jdt.internal.compiler.parser.Scanner r18;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;
        char[] $r7;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        r18 := @parameter1: org.eclipse.jdt.internal.compiler.parser.Scanner;

        r15 := @parameter2: int[];

        r16 := @parameter3: int[];

        r17 := @parameter4: int[];

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i5 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex> = $i5;

        $i7 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int previousInterval> = $i7;

        $i9 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval> = $i9;

        $r1 = newarray (org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token)[i0];

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex> = 2147483647;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $r19 = new org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token;

        specialinvoke $r19.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: void <init>()>();

        $r3[0] = $r19;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $r5 = $r4[0];

        $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int kind> = i1;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $r8 = $r6[0];

        $r7 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

        $r8.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: char[] name> = $r7;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $r10 = $r9[0];

        $r10.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int start> = i2;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $r12 = $r11[0];

        $r12.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int end> = i2;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $r14 = $r13[0];

        $r14.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int line> = 0;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip> = r15;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalEndToSkip> = r16;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalFlagsToSkip> = r17;

        virtualinvoke r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>(i2, i3);

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner> = r18;

        return;
    }

    private void readTokenFromScanner()
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] $r1, $r10, $r28;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r2, $r3, $r4, $r7, $r8, $r11, $r12, $r18, $r20, $r23, $r25, $r27;
        org.eclipse.jdt.core.compiler.InvalidInputException $r21;
        char[] $r6, $r24;
        int[] $r9, $r13, $r14, $r15, $r16, $r17, $r19, $r26;
        boolean z0;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r5, $r22;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        i0 = lengthof $r1;

        z0 = 1;

        goto label8;

     label1:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i1 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getNextToken()>();

        if $i1 == 68 goto label5;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i10 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getCurrentTokenStartPosition()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i11 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getCurrentTokenEndPosition()>();

        $i12 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval>;

        i30 = $i12 + 1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        $i13 = lengthof $r13;

        if $i13 == 0 goto label2;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        $i22 = lengthof $r16;

        if i30 >= $i22 goto label2;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        $i23 = $r17[i30];

        if $i10 >= $i23 goto label4;

     label2:
        $r22 = new org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token;

        specialinvoke $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: void <init>()>();

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int kind> = $i1;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r24 = virtualinvoke $r23.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] getCurrentTokenSource()>();

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: char[] name> = $r24;

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int start> = $i10;

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int end> = $i11;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r26 = $r25.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i31 = $r27.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i32 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i11, $r26, 0, $i31);

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int line> = $i32;

        $i33 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval>;

        $i34 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int previousInterval>;

        if $i33 == $i34 goto label3;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalFlagsToSkip>;

        $i14 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval>;

        $i15 = $r14[$i14];

        $i16 = $i15 & 2;

        if $i16 != 0 goto label3;

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int flags> = 1;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalFlagsToSkip>;

        $i17 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval>;

        $i18 = $r15[$i17];

        $i19 = $i18 & 1;

        if $i19 == 0 goto label3;

        $i20 = $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int flags>;

        $i21 = $i20 | 2;

        $r22.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int flags> = $i21;

     label3:
        $i35 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval>;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int previousInterval> = $i35;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $i36 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        $i37 = $i36 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex> = $i37;

        $i38 = $i37 % i0;

        $r28[$i38] = $r22;

        z0 = 0;

        goto label8;

     label4:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalEndToSkip>;

        $i24 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval>;

        $i25 = $i24 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentInterval> = $i25;

        $i26 = $r19[$i25];

        $i29 = $i26 + 1;

        $r20 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i27 = $r20.<org.eclipse.jdt.internal.compiler.parser.Scanner: int eofPosition>;

        $i28 = $i27 - 1;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.parser.Scanner: void resetTo(int,int)>($i29, $i28);

        goto label8;

     label5:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i2 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getCurrentTokenStartPosition()>();

        $r4 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i3 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.parser.Scanner: int getCurrentTokenEndPosition()>();

        $r5 = new org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token;

        specialinvoke $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: void <init>()>();

        $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int kind> = $i1;

        $r6 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

        $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: char[] name> = $r6;

        $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int start> = $i2;

        $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int end> = $i3;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r9 = $r7.<org.eclipse.jdt.internal.compiler.parser.Scanner: int[] lineEnds>;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $i4 = $r8.<org.eclipse.jdt.internal.compiler.parser.Scanner: int linePtr>;

        $i5 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: int getLineNumber(int,int[],int,int)>($i3, $r9, 0, $i4);

        $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int line> = $i5;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        $i7 = $i6 + 1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex> = $i7;

        $i8 = $i7 % i0;

        $r10[$i8] = $r5;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex> = $i9;

        z0 = 0;

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;

     label8:
        if z0 != 0 goto label1;

        return;

        catch org.eclipse.jdt.core.compiler.InvalidInputException from label1 to label6 with label7;
    }

    public org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r3, $r4, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i13;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] $r1, $r2;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;
        char[] $r6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r7 = new org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token;

        specialinvoke $r7.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: void <init>()>();

        $r7.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int kind> = 68;

        $r6 = <org.eclipse.jdt.core.compiler.CharOperation: char[] NO_CHAR>;

        $r7.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: char[] name> = $r6;

        return $r7;

     label1:
        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

        if $i1 < 0 goto label2;

        $i8 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

        if i0 <= $i8 goto label2;

        $i10 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>($i10);

        return $r4;

     label2:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $i9 = lengthof $r1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        if i0 <= $i2 goto label5;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        i11 = i0 - $i6;

        goto label4;

     label3:
        specialinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: void readTokenFromScanner()>();

     label4:
        $i7 = i11;

        $i13 = (int) -1;

        i11 = i11 + $i13;

        if $i7 != 0 goto label3;

        goto label6;

     label5:
        $i3 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        $i4 = $i3 - $i9;

        if $i4 < i0 goto label6;

        return null;

     label6:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $i5 = i0 % $i9;

        $r3 = $r2[$i5];

        return $r3;
    }

    public int getToken()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex>;

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int next(int)>($i0);

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex> = $i1;

        return $i1;
    }

    public int previous(int)
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $i1 = i0 - 1;

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    public int next(int)
    {
        int i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

        if i0 >= $i1 goto label1;

        $i2 = i0 + 1;

        goto label2;

     label1:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

     label2:
        return $i2;
    }

    public boolean afterEol(int)
    {
        int i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;
        boolean $z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $i1 = i0 - 1;

        $i2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int line(int)>($i1);

        $i3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int line(int)>(i0);

        if $i2 >= $i3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void reset()
    {
        int $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        $i1 = (int) -1;

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex> = $i1;

        return;
    }

    public void reset(int)
    {
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int previous(int)>(i0);

        r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex> = $i1;

        return;
    }

    public int badtoken()
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        return 0;
    }

    public int kind(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>(i0);

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int kind>;

        return $i1;
    }

    public char[] name(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r1;
        int i0;
        char[] $r2;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>(i0);

        $r2 = $r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: char[] name>;

        return $r2;
    }

    public int line(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>(i0);

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int line>;

        return $i1;
    }

    public int start(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>(i0);

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int start>;

        return $i1;
    }

    public int end(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>(i0);

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int end>;

        return $i1;
    }

    public int flags(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r1;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>(i0);

        $i1 = $r1.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int flags>;

        return $i1;
    }

    public boolean isInsideStream(int)
    {
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] $r1;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r0;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        i1 := @parameter0: int;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

        if $i0 < 0 goto label1;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheEOFIndex>;

        if i1 <= $i6 goto label1;

        return 0;

     label1:
        $i2 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        if i1 <= $i2 goto label2;

        return 1;

     label2:
        $i4 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int tokenCacheIndex>;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token[] tokenCache>;

        $i3 = lengthof $r1;

        $i5 = $i4 - $i3;

        if $i5 < i1 goto label3;

        return 0;

     label3:
        return 1;
    }

    public java.lang.String toString()
    {
        int[] $r6, $r7, $r16, $r17, $r18, $r23;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token $r5;
        java.lang.StringBuffer $r25;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, $i25, $i26, $i28, $i30;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r24, $r26;
        org.eclipse.jdt.internal.compiler.parser.Scanner $r3;
        org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream r2;
        char[] $r4;

        r2 := @this: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = new java.lang.String;

        $r3 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.Scanner scanner>;

        $r4 = $r3.<org.eclipse.jdt.internal.compiler.parser.Scanner: char[] source>;

        specialinvoke $r26.<java.lang.String: void <init>(char[])>($r4);

        $i0 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex>;

        if $i0 >= 0 goto label03;

        $i28 = (int) -1;

        i16 = $i28;

        i17 = 0;

        goto label02;

     label01:
        $r17 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        i18 = $r17[i17];

        $r18 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalEndToSkip>;

        i19 = $r18[i17];

        $i13 = i16 + 1;

        $r19 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>($i13, i18);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $i14 = i19 + 1;

        $r20 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(i18, $i14);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        i16 = i19;

        i17 = i17 + 1;

     label02:
        $r16 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        $i12 = lengthof $r16;

        if i17 < $i12 goto label01;

        $i15 = i16 + 1;

        $r21 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int)>($i15);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        goto label10;

     label03:
        $i1 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int currentIndex>;

        $r5 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token token(int)>($i1);

        i20 = $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int kind>;

        i21 = $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int start>;

        i22 = $r5.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream$Token: int end>;

        $i30 = (int) -1;

        i23 = $i30;

        i24 = 0;

        goto label07;

     label04:
        $r6 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        i2 = $r6[i24];

        $r7 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalEndToSkip>;

        i3 = $r7[i24];

        if i21 < i23 goto label05;

        if i22 > i2 goto label05;

        $i5 = i23 + 1;

        $r9 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>($i5, i21);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        $i6 = i22 + 1;

        $r10 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(i21, $i6);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        $i7 = i22 + 1;

        $r11 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>($i7, i2);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        goto label06;

     label05:
        $i4 = i23 + 1;

        $r8 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>($i4, i2);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

     label06:
        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $i25 = i3 + 1;

        $r22 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(i2, $i25);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        i23 = i3;

        i24 = i24 + 1;

     label07:
        $r23 = r2.<org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int[] intervalStartToSkip>;

        $i26 = lengthof $r23;

        if i24 < $i26 goto label04;

        if i21 < i23 goto label09;

        $i9 = i23 + 1;

        $r13 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>($i9, i21);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(60);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        if i20 != 68 goto label08;

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("EOF#>");

        goto label10;

     label08:
        $i10 = i22 + 1;

        $r14 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(i21, $i10);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(35);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(62);

        $i11 = i22 + 1;

        $r15 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int)>($i11);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        goto label10;

     label09:
        $i8 = i23 + 1;

        $r12 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int)>($i8);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label10:
        $r24 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r24;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int LBRACE_MISSING> = 2;

        <org.eclipse.jdt.internal.compiler.parser.diagnose.LexStream: int IS_AFTER_JUMP> = 1;

        return;
    }
}
