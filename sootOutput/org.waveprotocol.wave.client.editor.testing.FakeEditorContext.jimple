public class org.waveprotocol.wave.client.editor.testing.FakeEditorContext extends java.lang.Object implements org.waveprotocol.wave.client.editor.EditorContext
{
    private final org.waveprotocol.wave.client.editor.content.CMutableDocument document;
    private final org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretAnnotations;
    private final java.lang.String imeCompositionState;
    private final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper;
    private final org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility;

    public void <init>(org.waveprotocol.wave.client.editor.content.CMutableDocument, org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations, java.lang.String, org.waveprotocol.wave.client.editor.selection.content.SelectionHelper)
    {
        org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl $r1;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations r3;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r5;
        java.lang.String r4;
        org.waveprotocol.wave.client.editor.content.CMutableDocument r2;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.content.CMutableDocument;

        r3 := @parameter1: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl;

        specialinvoke $r1.<org.waveprotocol.wave.client.editor.ResponsibilityManagerImpl: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility> = $r1;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument document> = r2;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretAnnotations> = r3;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: java.lang.String imeCompositionState> = r4;

        r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper> = r5;

        return;
    }

    public void blur()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        return;
    }

    public void focus(boolean)
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        z0 := @parameter0: boolean;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations getCaretAnnotations()
    {
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations caretAnnotations>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.content.CMutableDocument getDocument()
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.content.CMutableDocument document>;

        return $r1;
    }

    public java.lang.String getImeCompositionState()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: java.lang.String imeCompositionState>;

        return $r1;
    }

    public org.waveprotocol.wave.client.editor.selection.content.SelectionHelper getSelectionHelper()
    {
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper selectionHelper>;

        return $r1;
    }

    public boolean isEditing()
    {
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        return 0;
    }

    public org.waveprotocol.wave.client.editor.Responsibility$Manager getResponsibilityManager()
    {
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r1;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r0;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        $r1 = r0.<org.waveprotocol.wave.client.editor.testing.FakeEditorContext: org.waveprotocol.wave.client.editor.Responsibility$Manager responsibility>;

        return $r1;
    }

    public void addUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        java.lang.AssertionError $r0;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r2;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not implemented");

        throw $r0;
    }

    public void removeUpdateListener(org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener)
    {
        java.lang.AssertionError $r0;
        org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener r2;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.EditorUpdateEvent$EditorUpdateListener;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not implemented");

        throw $r0;
    }

    public void undoableSequence(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        org.waveprotocol.wave.client.editor.testing.FakeEditorContext r1;

        r1 := @this: org.waveprotocol.wave.client.editor.testing.FakeEditorContext;

        r0 := @parameter0: java.lang.Runnable;

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        return;
    }
}
