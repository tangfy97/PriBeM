class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator extends org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator
{
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r1);

        return;
    }

    public int potential()
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator;

        return 0;
    }

    org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent generate(boolean)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r6, $r11, $r19;
        org.waveprotocol.wave.model.document.operation.NindoAutomaton $r2, $r13, $r17;
        boolean $z0, z1, $z2, $z3;
        java.lang.StringBuilder $r22;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r7, $r15, $r21;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        java.lang.String $r8;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator r0;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r1, $r4, $r5, $r10, $r12, $r14, $r16, $r18, $r20;
        char $c2;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator$1 $r9;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator;

        z1 := @parameter0: boolean;

        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult checkCharacters(java.lang.String,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>("a", null);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isIllFormed()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        if z1 == 0 goto label04;

        $z3 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z3 != 0 goto label02;

        return null;

     label02:
        $r16 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r17 = $r16.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i6 = virtualinvoke $r17.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxLengthIncrease()>();

        $r18 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r19 = $r18.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i7 = virtualinvoke $r19.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxInsertLength()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        if $i8 != 0 goto label03;

        return null;

     label03:
        $r20 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r21 = $r20.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i9 = $i8 + 1;

        i10 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r21, 1, $i9);

        goto label07;

     label04:
        $z2 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isValid()>();

        if $z2 == 0 goto label06;

        $r10 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r11 = $r10.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i3 = virtualinvoke $r11.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxInsertLength()>();

        $r12 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r13 = $r12.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.document.operation.NindoAutomaton a>;

        $i4 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.NindoAutomaton: int maxLengthIncrease()>();

        i11 = $i4 + 1;

        if i11 <= $i3 goto label05;

        return null;

     label05:
        $r14 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r15 = $r14.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $i5 = $i3 + 1;

        i10 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r15, i11, $i5);

        goto label07;

     label06:
        $r4 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r7 = $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r5 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r6 = $r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $i0 = virtualinvoke $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: int getMaxInsertLength()>();

        i10 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: int access$000(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,int,int)>($r7, 1, $i0);

     label07:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        i12 = 0;

     label08:
        if i12 >= i10 goto label11;

        if i12 > 26 goto label09;

        $i1 = 97 + i12;

        $c2 = (char) $i1;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label10;

     label09:
        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label10:
        i12 = i12 + 1;

        goto label08;

     label11:
        $r8 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator$1;

        specialinvoke $r9.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$CharactersGenerator,java.lang.String)>(r0, $r8);

        return $r9;
    }
}
