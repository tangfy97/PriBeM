public class org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl extends java.lang.Object implements org.apache.xmlbeans.impl.jam.provider.JamLogger
{
    private boolean mShowWarnings;
    private java.util.Set mVerboseClasses;
    private java.io.PrintWriter mOut;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        java.io.PrintWriter $r1;
        java.io.PrintStream $r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: boolean mShowWarnings> = 1;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses> = null;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r2, 1);

        r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut> = $r1;

        return;
    }

    protected void setOut(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r1 := @parameter0: java.io.PrintWriter;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut> = r1;

        return;
    }

    public boolean isVerbose(java.lang.Object)
    {
        java.util.Iterator $r3;
        java.util.Set $r1, $r2;
        java.lang.Object $r4, r6;
        java.lang.Class r5, $r7;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $r7 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public boolean isVerbose(java.lang.Class)
    {
        java.util.Iterator $r3;
        java.util.Set $r1, $r2;
        java.lang.Object $r4;
        java.lang.Class r5, r6;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r6 := @parameter0: java.lang.Class;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $z1 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public void setVerbose(java.lang.Class)
    {
        java.util.HashSet $r4;
        java.util.Set $r2, $r3;
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r5;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r1.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        if $r2 != null goto label2;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r1.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses> = $r4;

     label2:
        $r3 = r1.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void setShowWarnings(boolean)
    {
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: boolean mShowWarnings> = z0;

        return;
    }

    public void verbose(java.lang.String, java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: boolean isVerbose(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void verbose(java.lang.String)>(r2);

     label1:
        return;
    }

    public void verbose(java.lang.Throwable, java.lang.Object)
    {
        java.lang.Throwable r2;
        java.lang.Object r1;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: boolean isVerbose(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void verbose(java.lang.Throwable)>(r2);

     label1:
        return;
    }

    public void verbose(java.lang.String)
    {
        java.io.PrintWriter $r2;
        java.lang.String r1;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void printVerbosePrefix()>();

        $r2 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(r1);

        return;
    }

    public void verbose(java.lang.Throwable)
    {
        java.io.PrintWriter $r1, $r3;
        java.lang.Throwable r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.Throwable;

        specialinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void printVerbosePrefix()>();

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r1.<java.io.PrintWriter: void println()>();

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        return;
    }

    public void warning(java.lang.Throwable)
    {
        java.io.PrintWriter $r1;
        java.lang.Throwable r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.Throwable;

        $z0 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: boolean mShowWarnings>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("[JAM] Warning: unexpected exception thrown: ");

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace()>();

     label1:
        return;
    }

    public void warning(java.lang.String)
    {
        java.io.PrintWriter $r1, $r3;
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.String;

        $z0 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: boolean mShowWarnings>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r1.<java.io.PrintWriter: void print(java.lang.String)>("[JAM] Warning: ");

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>(r2);

     label1:
        return;
    }

    public void error(java.lang.Throwable)
    {
        java.io.PrintWriter $r1, $r3;
        java.lang.Throwable r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("[JAM] Error: unexpected exception thrown: ");

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        return;
    }

    public void error(java.lang.String)
    {
        java.io.PrintWriter $r1, $r3;
        java.lang.String r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r1.<java.io.PrintWriter: void print(java.lang.String)>("[JAM] Error: ");

        $r3 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>(r2);

        return;
    }

    public void setVerbose(boolean)
    {
        java.lang.Class $r1, $r2;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        z0 := @parameter0: boolean;

        $r1 = <org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.lang.Class class$java$lang$Object>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.lang.Class class$java$lang$Object> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.lang.Class class$java$lang$Object>;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: void setVerbose(java.lang.Class)>($r2);

        return;
    }

    public boolean isVerbose()
    {
        java.util.Set $r1;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.util.Set mVerboseClasses>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void printVerbosePrefix()
    {
        int $i0;
        java.lang.StackTraceElement $r5, $r10, $r14;
        java.lang.String $r7, $r8, $r12;
        org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl r2;
        java.io.PrintWriter $r3, $r4, $r6, $r9, $r11, $r13, $r15, $r16;
        java.lang.Exception $r0;
        java.lang.StackTraceElement[] $r1;

        r2 := @this: org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl;

        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r3 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r3.<java.io.PrintWriter: void println(java.lang.String)>("[JAM] Verbose: ");

        $r4 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(char)>(40);

        $r6 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        $r5 = $r1[2];

        $r7 = virtualinvoke $r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r8 = staticinvoke <org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.lang.String shortName(java.lang.String)>($r7);

        virtualinvoke $r6.<java.io.PrintWriter: void print(java.lang.String)>($r8);

        $r9 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r9.<java.io.PrintWriter: void print(char)>(46);

        $r11 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        $r10 = $r1[2];

        $r12 = virtualinvoke $r10.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        virtualinvoke $r11.<java.io.PrintWriter: void print(java.lang.String)>($r12);

        $r13 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r13.<java.io.PrintWriter: void print(char)>(58);

        $r15 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        $r14 = $r1[2];

        $i0 = virtualinvoke $r14.<java.lang.StackTraceElement: int getLineNumber()>();

        virtualinvoke $r15.<java.io.PrintWriter: void print(int)>($i0);

        $r16 = r2.<org.apache.xmlbeans.impl.jam.internal.JamLoggerImpl: java.io.PrintWriter mOut>;

        virtualinvoke $r16.<java.io.PrintWriter: void print(java.lang.String)>(")  ");

        return;
    }

    private static java.lang.String shortName(java.lang.String)
    {
        int $i0, $i1, $i2, $i4;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i4 = (int) -1;

        if $i0 == $i4 goto label1;

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

     label1:
        return r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
