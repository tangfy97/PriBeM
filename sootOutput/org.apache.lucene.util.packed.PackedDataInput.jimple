public final class org.apache.lucene.util.packed.PackedDataInput extends java.lang.Object
{
    final org.apache.lucene.store.DataInput in;
    long current;
    int remainingBits;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.DataInput)
    {
        org.apache.lucene.store.DataInput r1;
        org.apache.lucene.util.packed.PackedDataInput r0;

        r0 := @this: org.apache.lucene.util.packed.PackedDataInput;

        r1 := @parameter0: org.apache.lucene.store.DataInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.packed.PackedDataInput: org.apache.lucene.store.DataInput in> = r1;

        virtualinvoke r0.<org.apache.lucene.util.packed.PackedDataInput: void skipToNextByte()>();

        return;
    }

    public long readLong(int) throws java.io.IOException
    {
        org.apache.lucene.store.DataInput $r1;
        long $l5, $l6, $l7, $l8, $l9, $l10, $l15, l17;
        java.lang.AssertionError $r3;
        short $s14, $s18;
        byte $b13;
        int $i0, $i1, $i2, $i3, $i4, $i11, $i12, i16;
        boolean $z0;
        org.apache.lucene.util.packed.PackedDataInput r0;

        r0 := @this: org.apache.lucene.util.packed.PackedDataInput;

        i16 := @parameter0: int;

        $z0 = <org.apache.lucene.util.packed.PackedDataInput: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i16 <= 0 goto label1;

        if i16 <= 64 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(int)>(i16);

        throw $r3;

     label2:
        l17 = 0L;

     label3:
        if i16 <= 0 goto label5;

        $i0 = r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits>;

        if $i0 != 0 goto label4;

        $r1 = r0.<org.apache.lucene.util.packed.PackedDataInput: org.apache.lucene.store.DataInput in>;

        $b13 = virtualinvoke $r1.<org.apache.lucene.store.DataInput: byte readByte()>();

        $s18 = (short) $b13;

        $s14 = $s18 & 255;

        $l15 = (long) $s14;

        r0.<org.apache.lucene.util.packed.PackedDataInput: long current> = $l15;

        r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits> = 8;

     label4:
        $i1 = r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i16, $i1);

        $l10 = l17 << $i2;

        $l5 = r0.<org.apache.lucene.util.packed.PackedDataInput: long current>;

        $i3 = r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits>;

        $i4 = $i3 - $i2;

        $l8 = $l5 >>> $i4;

        $l6 = 1L << $i2;

        $l7 = $l6 - 1L;

        $l9 = $l8 & $l7;

        l17 = $l10 | $l9;

        i16 = i16 - $i2;

        $i11 = r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits>;

        $i12 = $i11 - $i2;

        r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits> = $i12;

        goto label3;

     label5:
        return l17;
    }

    public void skipToNextByte()
    {
        org.apache.lucene.util.packed.PackedDataInput r0;

        r0 := @this: org.apache.lucene.util.packed.PackedDataInput;

        r0.<org.apache.lucene.util.packed.PackedDataInput: int remainingBits> = 0;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedDataInput;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedDataInput: boolean $assertionsDisabled> = $z1;

        return;
    }
}
