public class groovy.mock.interceptor.Demand extends java.lang.Object implements groovy.lang.GroovyObject
{
    private java.util.List recorded;
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119696479;
    static java.lang.Class class$java$util$List;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$junit$framework$AssertionFailedError;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$lang$IllegalArgumentException;
    static java.lang.Class class$groovy$mock$interceptor$CallSpec;

    public void <init>()
    {
        java.lang.Object[] $r5, $r11;
        groovy.mock.interceptor.Demand r0;
        groovy.lang.MetaClass $r14, $r16;
        java.util.List $r6, $r9;
        java.lang.Class $r1, r2, $r3, r4, $r7, $r10, $r17, $r18, $r19, $r20;
        java.lang.Object $r8, $r12, $r13, $r15;

        r0 := @this: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r17 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r17;

        goto label2;

     label1:
        $r17 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        r2 = $r17;

        $r3 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label3;

        $r18 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r18;

        goto label4;

     label3:
        $r18 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r4 = $r18;

        $r5 = newarray (java.lang.Object)[0];

        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createList(java.lang.Object[])>($r5);

        $r7 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List>;

        if $r7 != null goto label5;

        $r19 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List> = $r19;

        goto label6;

     label5:
        $r19 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List>;

     label6:
        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, $r19);

        $r9 = (java.util.List) $r8;

        r0.<groovy.mock.interceptor.Demand: java.util.List recorded> = $r9;

        $r10 = <groovy.mock.interceptor.Demand: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r10 != null goto label7;

        $r20 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.Demand: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r20;

        goto label8;

     label7:
        $r20 = <groovy.mock.interceptor.Demand: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label8:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r0;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r20, "initMetaClass", $r11);

        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r12, r4);

        $r14 = (groovy.lang.MetaClass) $r13;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r14, r4);

        $r16 = (groovy.lang.MetaClass) $r15;

        r0.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass metaClass> = $r16;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        java.lang.Integer $r41, $r42, $r43, $r44, $r45, $r46;
        java.util.Map $r25;
        boolean $z0, $z1, $z2;
        java.util.List $r23;
        java.lang.Throwable $r34;
        java.lang.Object[] $r6, $r9, $r16, $r18, $r19, $r21, $r27, $r32;
        groovy.mock.interceptor.Demand r15;
        int $i1, $i3;
        java.lang.String r20;
        java.lang.Class $r0, r1, $r2, $r12, $r17, $r31, $r35, $r36, $r38, $r39, $r40;
        java.lang.Object r5, $r8, $r11, $r13, $r14, $r24, $r26, $r29, $r30, $r33, r37;

        r15 := @this: groovy.mock.interceptor.Demand;

        r20 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r35 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r35;

        goto label02;

     label01:
        $r35 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label02:
        r1 = $r35;

        $r2 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r36 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r36;

        goto label04;

     label03:
        $r36 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r41 = new java.lang.Integer;

        specialinvoke $r41.<java.lang.Integer: void <init>(int)>(1);

        $r42 = new java.lang.Integer;

        specialinvoke $r42.<java.lang.Integer: void <init>(int)>(1);

        r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createRange(java.lang.Object,java.lang.Object,boolean)>($r41, $r42, 1);

        $r6 = newarray (java.lang.Object)[1];

        $r43 = new java.lang.Integer;

        specialinvoke $r43.<java.lang.Integer: void <init>(int)>(0);

        $r6[0] = $r43;

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r5, "getAt", $r6);

        $z0 = $r8 instanceof groovy.lang.IntRange;

        if $z0 == 0 goto label08;

        $r27 = newarray (java.lang.Object)[1];

        $r44 = new java.lang.Integer;

        specialinvoke $r44.<java.lang.Integer: void <init>(int)>(0);

        $r27[0] = $r44;

        $r29 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r5, "getAt", $r27);

        r37 = $r29;

        $r30 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r29, "reverse");

        $z2 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r30);

        if $z2 == 0 goto label07;

        $r31 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$lang$IllegalArgumentException>;

        if $r31 != null goto label05;

        $r38 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("java.lang.IllegalArgumentException");

        <groovy.mock.interceptor.Demand: java.lang.Class class$java$lang$IllegalArgumentException> = $r38;

        goto label06;

     label05:
        $r38 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$lang$IllegalArgumentException>;

     label06:
        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = "Reverse ranges not supported.";

        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r38, $r32);

        $r34 = (java.lang.Throwable) $r33;

        throw $r34;

     label07:
        goto label08;

     label08:
        $r9 = newarray (java.lang.Object)[1];

        $r45 = new java.lang.Integer;

        $i1 = (int) -1;

        specialinvoke $r45.<java.lang.Integer: void <init>(int)>($i1);

        $r9[0] = $r45;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r5, "getAt", $r9);

        $z1 = $r11 instanceof groovy.lang.Closure;

        if $z1 == 0 goto label11;

        $r23 = r15.<groovy.mock.interceptor.Demand: java.util.List recorded>;

        $r16 = newarray (java.lang.Object)[1];

        $r17 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$mock$interceptor$CallSpec>;

        if $r17 != null goto label09;

        $r39 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.CallSpec");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$mock$interceptor$CallSpec> = $r39;

        goto label10;

     label09:
        $r39 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$mock$interceptor$CallSpec>;

     label10:
        $r18 = newarray (java.lang.Object)[1];

        $r19 = newarray (java.lang.Object)[6];

        $r19[0] = "name";

        $r19[1] = r20;

        $r19[2] = "behavior";

        $r21 = newarray (java.lang.Object)[1];

        $r46 = new java.lang.Integer;

        $i3 = (int) -1;

        specialinvoke $r46.<java.lang.Integer: void <init>(int)>($i3);

        $r21[0] = $r46;

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r5, "getAt", $r21);

        $r19[3] = $r24;

        $r19[4] = "range";

        $r19[5] = r37;

        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.Map createMap(java.lang.Object[])>($r19);

        $r18[0] = $r25;

        $r26 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r39, $r18);

        $r16[0] = $r26;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r23, "leftShift", $r16);

        goto label11;

     label11:
        $r12 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$lang$Object>;

        if $r12 != null goto label12;

        $r40 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.mock.interceptor.Demand: java.lang.Class class$java$lang$Object> = $r40;

        goto label13;

     label12:
        $r40 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$lang$Object>;

     label13:
        $r13 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(null, $r40);

        $r14 = (java.lang.Object) $r13;

        return $r14;
    }

    public java.lang.Object verify(java.util.List)
    {
        java.lang.Integer $r40, $r41;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.runtime.GStringImpl $r42, $r43;
        java.util.List $r5, $r7, $r11, r13;
        java.lang.Throwable $r34;
        java.lang.Object[] $r10, $r14, $r18, $r21, $r27, $r28, $r30, $r35;
        java.lang.String[] $r25, $r31;
        groovy.mock.interceptor.Demand r4;
        java.util.Iterator $r44, $r45;
        java.lang.Class $r0, r1, $r2, $r26, $r36, $r37, $r39;
        java.lang.Object $r6, $r8, $r9, $r12, $r15, r16, $r17, $r19, $r22, $r23, $r24, $r32, $r33, $r38;

        r4 := @this: groovy.mock.interceptor.Demand;

        r13 := @parameter0: java.util.List;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r36 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r36;

        goto label02;

     label01:
        $r36 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label02:
        r1 = $r36;

        $r2 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r37 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r37;

        goto label04;

     label03:
        $r37 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r40 = new java.lang.Integer;

        specialinvoke $r40.<java.lang.Integer: void <init>(int)>(0);

        $r5 = r4.<groovy.mock.interceptor.Demand: java.util.List recorded>;

        $r6 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r5, "size");

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.util.List createRange(java.lang.Object,java.lang.Object,boolean)>($r40, $r6, 0);

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r7, "iterator");

     label05:
        $r44 = (java.util.Iterator) $r8;

        $z2 = interfaceinvoke $r44.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r45 = (java.util.Iterator) $r8;

        $r9 = interfaceinvoke $r45.<java.util.Iterator: java.lang.Object next()>();

        $r11 = r4.<groovy.mock.interceptor.Demand: java.util.List recorded>;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r9;

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r11, "getAt", $r10);

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = $r9;

        $r15 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r13, "getAt", $r14);

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r15);

        if $z0 == 0 goto label06;

        $r35 = newarray (java.lang.Object)[1];

        $r35[0] = $r9;

        $r38 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r13, "getAt", $r35);

        goto label07;

     label06:
        $r41 = new java.lang.Integer;

        $r38 = $r41;

        specialinvoke $r41.<java.lang.Integer: void <init>(int)>(0);

     label07:
        r16 = $r38;

        $r17 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r12, "range");

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = $r38;

        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r17, "contains", $r18);

        $z1 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean booleanUnbox(java.lang.Object)>($r19);

        if $z1 != 0 goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        if $z3 == 0 goto label12;

        $r42 = new org.codehaus.groovy.runtime.GStringImpl;

        $r21 = newarray (java.lang.Object)[3];

        $r21[0] = $r9;

        $r22 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r12, "range");

        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r22, "toString");

        $r21[1] = $r23;

        $r24 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r12, "name");

        $r21[2] = $r24;

        $r25 = newarray (java.lang.String)[4];

        $r25[0] = "verify[";

        $r25[1] = "]: expected ";

        $r25[2] = " call(s) to \'";

        $r25[3] = "\' but was ";

        specialinvoke $r42.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r21, $r25);

        $r26 = <groovy.mock.interceptor.Demand: java.lang.Class class$junit$framework$AssertionFailedError>;

        if $r26 != null goto label10;

        $r39 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("junit.framework.AssertionFailedError");

        <groovy.mock.interceptor.Demand: java.lang.Class class$junit$framework$AssertionFailedError> = $r39;

        goto label11;

     label10:
        $r39 = <groovy.mock.interceptor.Demand: java.lang.Class class$junit$framework$AssertionFailedError>;

     label11:
        $r27 = newarray (java.lang.Object)[1];

        $r28 = newarray (java.lang.Object)[1];

        $r43 = new org.codehaus.groovy.runtime.GStringImpl;

        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = r16;

        $r31 = newarray (java.lang.String)[2];

        $r31[0] = "called ";

        $r31[1] = " time(s).";

        specialinvoke $r43.<org.codehaus.groovy.runtime.GStringImpl: void <init>(java.lang.Object[],java.lang.String[])>($r30, $r31);

        $r28[0] = $r43;

        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r42, "plus", $r28);

        $r27[0] = $r32;

        $r33 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r39, $r27);

        $r34 = (java.lang.Throwable) $r33;

        throw $r34;

     label12:
        goto label05;

     label13:
        return null;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        groovy.mock.interceptor.Demand r4;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;

        r4 := @this: groovy.mock.interceptor.Demand;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <groovy.mock.interceptor.Demand: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.mock.interceptor.Demand: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <groovy.mock.interceptor.Demand: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        java.lang.Class $r0, $r1, $r4, $r5;
        groovy.mock.interceptor.Demand r2;

        r2 := @this: groovy.mock.interceptor.Demand;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        groovy.mock.interceptor.Demand r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        java.lang.String r4;

        r2 := @this: groovy.mock.interceptor.Demand;

        r4 := @parameter0: java.lang.String;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.mock.interceptor.Demand r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        java.lang.String r4;

        r2 := @this: groovy.mock.interceptor.Demand;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.mock.interceptor.Demand: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119696479L);

        $r3 = (java.lang.Long) $r2;

        <groovy.mock.interceptor.Demand: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.mock.interceptor.Demand: java.lang.Long __timeStamp__239_neverHappen1239119696479> = $r5;

        return;
    }

    public java.util.List getRecorded()
    {
        groovy.mock.interceptor.Demand r2;
        java.util.List $r4, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r5;

        r2 := @this: groovy.mock.interceptor.Demand;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r4 = r2.<groovy.mock.interceptor.Demand: java.util.List recorded>;

        $r3 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List>;

     label6:
        $r5 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r4, $r9);

        $r6 = (java.util.List) $r5;

        return $r6;
    }

    public void setRecorded(java.util.List)
    {
        groovy.mock.interceptor.Demand r5;
        java.util.List r2, $r6;
        java.lang.Class $r0, $r1, $r3, $r7, $r8, $r9;
        java.lang.Object $r4;

        r5 := @this: groovy.mock.interceptor.Demand;

        r2 := @parameter0: java.util.List;

        $r0 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.mock.interceptor.Demand");

        <groovy.mock.interceptor.Demand: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.mock.interceptor.Demand: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.mock.interceptor.Demand: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List>;

        if $r3 != null goto label5;

        $r9 = staticinvoke <groovy.mock.interceptor.Demand: java.lang.Class class$(java.lang.String)>("java.util.List");

        <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List> = $r9;

        goto label6;

     label5:
        $r9 = <groovy.mock.interceptor.Demand: java.lang.Class class$java$util$List>;

     label6:
        $r4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>(r2, $r9);

        $r6 = (java.util.List) $r4;

        r5.<groovy.mock.interceptor.Demand: java.util.List recorded> = $r6;

        return;
    }

    void super$1$wait()
    {
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$notify()
    {
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$1$notifyAll()
    {
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.mock.interceptor.Demand r0;
        boolean $z0;

        r0 := @this: groovy.mock.interceptor.Demand;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    void super$1$finalize()
    {
        groovy.mock.interceptor.Demand r0;

        r0 := @this: groovy.mock.interceptor.Demand;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
