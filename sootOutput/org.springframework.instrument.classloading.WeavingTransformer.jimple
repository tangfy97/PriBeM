public class org.springframework.instrument.classloading.WeavingTransformer extends java.lang.Object
{
    private final java.lang.ClassLoader classLoader;
    private final java.util.List transformers;

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.instrument.classloading.WeavingTransformer r0;
        java.lang.ClassLoader r2;
        java.lang.IllegalArgumentException $r3;
        java.util.ArrayList $r1;

        r0 := @this: org.springframework.instrument.classloading.WeavingTransformer;

        r2 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.instrument.classloading.WeavingTransformer: java.util.List transformers> = $r1;

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ClassLoader must not be null");

        throw $r3;

     label1:
        r0.<org.springframework.instrument.classloading.WeavingTransformer: java.lang.ClassLoader classLoader> = r2;

        return;
    }

    public void addTransformer(java.lang.instrument.ClassFileTransformer)
    {
        java.lang.instrument.ClassFileTransformer r0;
        java.util.List $r2;
        org.springframework.instrument.classloading.WeavingTransformer r1;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: org.springframework.instrument.classloading.WeavingTransformer;

        r0 := @parameter0: java.lang.instrument.ClassFileTransformer;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Transformer must not be null");

        throw $r3;

     label1:
        $r2 = r1.<org.springframework.instrument.classloading.WeavingTransformer: java.util.List transformers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public byte[] transformIfNecessary(java.lang.String, byte[])
    {
        byte[] r3, $r4;
        org.springframework.instrument.classloading.WeavingTransformer r2;
        java.lang.String r0, $r1;

        r2 := @this: org.springframework.instrument.classloading.WeavingTransformer;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".", "/");

        $r4 = virtualinvoke r2.<org.springframework.instrument.classloading.WeavingTransformer: byte[] transformIfNecessary(java.lang.String,java.lang.String,byte[],java.security.ProtectionDomain)>(r0, $r1, r3, null);

        return $r4;
    }

    public byte[] transformIfNecessary(java.lang.String, java.lang.String, byte[], java.security.ProtectionDomain)
    {
        byte[] r0, $r9, r13;
        java.lang.IllegalStateException $r11;
        java.lang.instrument.IllegalClassFormatException $r10;
        java.util.Iterator $r3;
        org.springframework.instrument.classloading.WeavingTransformer r1;
        java.lang.instrument.ClassFileTransformer r5;
        java.util.List $r2;
        java.security.ProtectionDomain r7;
        java.lang.Object $r4;
        java.lang.String r6, r12;
        java.lang.ClassLoader $r8;
        boolean $z0;

        r1 := @this: org.springframework.instrument.classloading.WeavingTransformer;

        r12 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r0 := @parameter2: byte[];

        r7 := @parameter3: java.security.ProtectionDomain;

        r13 = r0;

        $r2 = r1.<org.springframework.instrument.classloading.WeavingTransformer: java.util.List transformers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.instrument.ClassFileTransformer) $r4;

     label2:
        $r8 = r1.<org.springframework.instrument.classloading.WeavingTransformer: java.lang.ClassLoader classLoader>;

        $r9 = interfaceinvoke r5.<java.lang.instrument.ClassFileTransformer: byte[] transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[])>($r8, r6, null, r7, r13);

        if $r9 == null goto label5;

        r13 = $r9;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Class file transformation failed", $r10);

        throw $r11;

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r13;

        catch java.lang.instrument.IllegalClassFormatException from label2 to label3 with label4;
    }
}
