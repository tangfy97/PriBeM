public class org.waveprotocol.wave.model.wave.undo.WaveletUndo extends java.lang.Object
{
    private final org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager;

    public void <init>()
    {
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r1;
        org.waveprotocol.wave.model.wave.undo.WaveletUndo r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveletUndo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.undo.UndoManagerFactory: org.waveprotocol.wave.model.undo.UndoManagerPlus createWUndoManager()>();

        r0.<org.waveprotocol.wave.model.wave.undo.WaveletUndo: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager> = $r1;

        return;
    }

    public void nonUndoable(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r3;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r2;
        boolean $z0;
        org.waveprotocol.wave.model.wave.undo.WaveletUndo r1;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.WaveletUndo;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $z0 = staticinvoke <org.waveprotocol.wave.model.wave.undo.OpUtils: boolean isNoop(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.WaveletUndo: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.undo.UndoManagerPlus: void nonUndoableOp(java.lang.Object)>($r3);

        return;
    }

    public void undoable(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp $r3;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r2;
        boolean $z0;
        org.waveprotocol.wave.model.wave.undo.WaveletUndo r1;

        r1 := @this: org.waveprotocol.wave.model.wave.undo.WaveletUndo;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $z0 = staticinvoke <org.waveprotocol.wave.model.wave.undo.OpUtils: boolean isNoop(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.wave.undo.WaveletUndo: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: org.waveprotocol.wave.model.wave.undo.WaveAggregateOp createAggregate(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r0);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.undo.UndoManagerPlus: void undoableOp(java.lang.Object)>($r3);

        return;
    }

    public java.util.List undo()
    {
        java.util.List $r4, $r5;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r3;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.wave.undo.WaveletUndo r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveletUndo;

        $r1 = r0.<org.waveprotocol.wave.model.wave.undo.WaveletUndo: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerPlus: java.lang.Object undo()>();

        r3 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) $r2;

        if r3 == null goto label1;

        $r5 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List toWaveletOperations()>();

        return $r5;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;
    }

    public java.util.List redo()
    {
        java.util.List $r4, $r5;
        org.waveprotocol.wave.model.wave.undo.WaveAggregateOp r3;
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.wave.undo.WaveletUndo r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveletUndo;

        $r1 = r0.<org.waveprotocol.wave.model.wave.undo.WaveletUndo: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerPlus: java.lang.Object redo()>();

        r3 = (org.waveprotocol.wave.model.wave.undo.WaveAggregateOp) $r2;

        if r3 == null goto label1;

        $r5 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.undo.WaveAggregateOp: java.util.List toWaveletOperations()>();

        return $r5;

     label1:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;
    }

    public void checkpoint()
    {
        org.waveprotocol.wave.model.undo.UndoManagerPlus $r1;
        org.waveprotocol.wave.model.wave.undo.WaveletUndo r0;

        r0 := @this: org.waveprotocol.wave.model.wave.undo.WaveletUndo;

        $r1 = r0.<org.waveprotocol.wave.model.wave.undo.WaveletUndo: org.waveprotocol.wave.model.undo.UndoManagerPlus undoManager>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.undo.UndoManagerPlus: void checkpoint()>();

        return;
    }
}
