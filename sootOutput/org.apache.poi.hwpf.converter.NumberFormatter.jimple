public final class org.apache.poi.hwpf.converter.NumberFormatter extends java.lang.Object
{
    private static final java.lang.String[] ENGLISH_LETTERS;
    private static final java.lang.String[] ROMAN_LETTERS;
    private static final int[] ROMAN_VALUES;
    private static final int T_ARABIC;
    private static final int T_LOWER_LETTER;
    private static final int T_LOWER_ROMAN;
    private static final int T_ORDINAL;
    private static final int T_UPPER_LETTER;
    private static final int T_UPPER_ROMAN;

    public void <init>()
    {
        org.apache.poi.hwpf.converter.NumberFormatter r0;

        r0 := @this: org.apache.poi.hwpf.converter.NumberFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getNumber(int, int)
    {
        int i0, i1;
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        tableswitch(i0)
        {
            case 0: goto label5;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label5;
        };

     label1:
        $r4 = staticinvoke <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String toRoman(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        return $r5;

     label2:
        $r3 = staticinvoke <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String toRoman(int)>(i1);

        return $r3;

     label3:
        $r1 = staticinvoke <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String toLetters(int)>(i1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        return $r2;

     label4:
        $r0 = staticinvoke <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String toLetters(int)>(i1);

        return $r0;

     label5:
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        return $r6;
    }

    private static java.lang.String toLetters(int)
    {
        byte $b2, $b5;
        java.lang.StringBuilder $r8, $r9, $r15, $r16, $r18, $r20, $r21;
        long $l1, $l7, l10, l15, l16;
        java.lang.String[] $r1, $r4, $r11;
        int i0, $i3, $i4, $i6, $i8, $i9, i11, i12, i13, i14, i17, i18, $i19, $i21, $i22, $i24;
        java.lang.String $r2, $r3, $r5, $r10, $r12, $r17;
        java.lang.IllegalArgumentException $r19, $r22;

        i0 := @parameter0: int;

        if i0 > 0 goto label01;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported number: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r19;

     label01:
        if i0 >= 27 goto label02;

        $r11 = <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ENGLISH_LETTERS>;

        $i9 = i0 - 1;

        $r12 = $r11[$i9];

        return $r12;

     label02:
        l10 = (long) i0;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        i11 = 0;

        i12 = 0;

     label03:
        $l1 = (long) i12;

        $b2 = l10 cmp $l1;

        $i19 = (int) $b2;

        if $i19 <= 0 goto label04;

        i11 = i11 + 1;

        $i8 = i12 * 26;

        i12 = $i8 + 26;

        if i12 <= 2147483647 goto label03;

        $r22 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported number: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r22;

     label04:
        $i21 = (int) -1;

        i13 = i11 + $i21;

        i14 = i13;

     label05:
        if i14 <= 0 goto label10;

        l15 = 0L;

        l16 = 1L;

        i17 = 0;

     label06:
        if i17 >= i14 goto label07;

        l16 = l16 * 26L;

        $l7 = l15 * 26L;

        l15 = $l7 + 26L;

        i17 = i17 + 1;

        goto label06;

     label07:
        i18 = 0;

     label08:
        $b5 = l10 cmp l15;

        $i22 = (int) $b5;

        if $i22 <= 0 goto label09;

        i18 = i18 + 1;

        l10 = l10 - l16;

        goto label08;

     label09:
        $r4 = <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ENGLISH_LETTERS>;

        $i6 = i18 - 1;

        $r5 = $r4[$i6];

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i24 = (int) -1;

        i14 = i14 + $i24;

        goto label05;

     label10:
        $r1 = <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ENGLISH_LETTERS>;

        $i3 = (int) l10;

        $i4 = $i3 - 1;

        $r2 = $r1[$i4];

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static java.lang.String toRoman(int)
    {
        java.lang.String[] $r1, $r3;
        java.lang.IllegalArgumentException $r6;
        int[] $r5;
        int $i0, i1, i2, i3;
        java.lang.StringBuilder $r0, $r7, $r8, $r9;
        java.lang.String $r2, r4, $r10;

        i2 := @parameter0: int;

        if i2 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported number: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label2:
        $r1 = <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ROMAN_LETTERS>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label5;

        $r3 = <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ROMAN_LETTERS>;

        r4 = $r3[i3];

        $r5 = <org.apache.poi.hwpf.converter.NumberFormatter: int[] ROMAN_VALUES>;

        i1 = $r5[i3];

     label3:
        if i2 < i1 goto label4;

        i2 = i2 - i1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        goto label3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;
        int[] $r2;

        <org.apache.poi.hwpf.converter.NumberFormatter: int T_UPPER_ROMAN> = 1;

        <org.apache.poi.hwpf.converter.NumberFormatter: int T_UPPER_LETTER> = 3;

        <org.apache.poi.hwpf.converter.NumberFormatter: int T_ORDINAL> = 5;

        <org.apache.poi.hwpf.converter.NumberFormatter: int T_LOWER_ROMAN> = 2;

        <org.apache.poi.hwpf.converter.NumberFormatter: int T_LOWER_LETTER> = 4;

        <org.apache.poi.hwpf.converter.NumberFormatter: int T_ARABIC> = 0;

        $r0 = newarray (java.lang.String)[26];

        $r0[0] = "a";

        $r0[1] = "b";

        $r0[2] = "c";

        $r0[3] = "d";

        $r0[4] = "e";

        $r0[5] = "f";

        $r0[6] = "g";

        $r0[7] = "h";

        $r0[8] = "i";

        $r0[9] = "j";

        $r0[10] = "k";

        $r0[11] = "l";

        $r0[12] = "m";

        $r0[13] = "n";

        $r0[14] = "o";

        $r0[15] = "p";

        $r0[16] = "q";

        $r0[17] = "r";

        $r0[18] = "s";

        $r0[19] = "t";

        $r0[20] = "u";

        $r0[21] = "v";

        $r0[22] = "w";

        $r0[23] = "x";

        $r0[24] = "y";

        $r0[25] = "z";

        <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ENGLISH_LETTERS> = $r0;

        $r1 = newarray (java.lang.String)[13];

        $r1[0] = "m";

        $r1[1] = "cm";

        $r1[2] = "d";

        $r1[3] = "cd";

        $r1[4] = "c";

        $r1[5] = "xc";

        $r1[6] = "l";

        $r1[7] = "xl";

        $r1[8] = "x";

        $r1[9] = "ix";

        $r1[10] = "v";

        $r1[11] = "iv";

        $r1[12] = "i";

        <org.apache.poi.hwpf.converter.NumberFormatter: java.lang.String[] ROMAN_LETTERS> = $r1;

        $r2 = newarray (int)[13];

        $r2[0] = 1000;

        $r2[1] = 900;

        $r2[2] = 500;

        $r2[3] = 400;

        $r2[4] = 100;

        $r2[5] = 90;

        $r2[6] = 50;

        $r2[7] = 40;

        $r2[8] = 10;

        $r2[9] = 9;

        $r2[10] = 5;

        $r2[11] = 4;

        $r2[12] = 1;

        <org.apache.poi.hwpf.converter.NumberFormatter: int[] ROMAN_VALUES> = $r2;

        return;
    }
}
