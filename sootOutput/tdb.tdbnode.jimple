public class tdb.tdbnode extends tdb.cmdline.CmdTDB
{

    public static transient void main(java.lang.String[])
    {
        tdb.tdbnode $r0;
        java.lang.String[] r1;

        r1 := @parameter0: java.lang.String[];

        staticinvoke <tdb.cmdline.CmdTDB: void init()>();

        $r0 = new tdb.tdbnode;

        specialinvoke $r0.<tdb.tdbnode: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<tdb.tdbnode: void mainRun()>();

        return;
    }

    protected void <init>(java.lang.String[])
    {
        tdb.tdbnode r0;
        java.lang.String[] r1;

        r0 := @this: tdb.tdbnode;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<tdb.cmdline.CmdTDB: void <init>(java.lang.String[])>(r1);

        return;
    }

    protected java.lang.String getSummary()
    {
        tdb.tdbnode r1;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.String $r2, $r5;

        r1 := @this: tdb.tdbnode;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<tdb.tdbnode: java.lang.String getCommandName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" NodeId ...");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    protected void exec()
    {
        byte[] $r12;
        java.lang.Object[] $r14;
        com.hp.hpl.jena.tdb.store.Hash $r11;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        long $l0;
        com.hp.hpl.jena.graph.Node $r10;
        com.hp.hpl.jena.tdb.nodetable.NodeTable $r4;
        java.lang.Long $r16;
        com.hp.hpl.jena.tdb.store.NodeId $r9;
        java.lang.String r8, $r13, $r23;
        boolean $z0, $z1;
        java.io.PrintStream $r15, $r17, $r20;
        java.util.Iterator $r6;
        com.hp.hpl.jena.tdb.store.TripleTable $r2;
        java.lang.Exception $r18;
        tdb.tdbnode r0;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r3;
        java.util.List $r5;
        java.lang.Object $r7;
        java.lang.StringBuilder $r19, $r21, $r22;

        r0 := @this: tdb.tdbnode;

        $r1 = virtualinvoke r0.<tdb.tdbnode: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDatasetGraphTDB()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.TripleTable getTripleTable()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.TripleTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: com.hp.hpl.jena.tdb.nodetable.NodeTable getNodeTable()>();

        $r5 = specialinvoke r0.<tdb.cmdline.CmdTDB: java.util.List getPositional()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("No node ids");

        return;

     label1:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

     label2:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r8);

        $r9 = new com.hp.hpl.jena.tdb.store.NodeId;

        specialinvoke $r9.<com.hp.hpl.jena.tdb.store.NodeId: void <init>(long)>($l0);

        $r10 = interfaceinvoke $r4.<com.hp.hpl.jena.tdb.nodetable.NodeTable: com.hp.hpl.jena.graph.Node getNodeForNodeId(com.hp.hpl.jena.tdb.store.NodeId)>($r9);

        $r11 = new com.hp.hpl.jena.tdb.store.Hash;

        specialinvoke $r11.<com.hp.hpl.jena.tdb.store.Hash: void <init>(int)>(16);

        staticinvoke <com.hp.hpl.jena.tdb.lib.NodeLib: void setHash(com.hp.hpl.jena.tdb.store.Hash,com.hp.hpl.jena.graph.Node)>($r11, $r10);

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.tdb.store.Hash: byte[] getBytes()>();

        $r13 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHex(byte[])>($r12);

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = newarray (java.lang.Object)[4];

        $r14[0] = r8;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r14[1] = $r16;

        $r14[2] = $r13;

        $r14[3] = $r10;

        virtualinvoke $r15.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("%s %08d 0x%s # %s\n", $r14);

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream out>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
