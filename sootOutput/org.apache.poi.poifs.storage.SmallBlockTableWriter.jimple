public class org.apache.poi.poifs.storage.SmallBlockTableWriter extends java.lang.Object implements org.apache.poi.poifs.storage.BlockWritable, org.apache.poi.poifs.filesystem.BATManaged
{
    private org.apache.poi.poifs.storage.BlockAllocationTableWriter _sbat;
    private java.util.List _small_blocks;
    private int _big_block_count;
    private org.apache.poi.poifs.property.RootProperty _root;

    public void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize, java.util.List, org.apache.poi.poifs.property.RootProperty)
    {
        org.apache.poi.poifs.storage.BlockWritable $r15;
        java.util.ArrayList $r18;
        org.apache.poi.poifs.storage.SmallBlockTableWriter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8;
        boolean $z0;
        org.apache.poi.poifs.filesystem.POIFSDocument r12;
        org.apache.poi.poifs.storage.BlockAllocationTableWriter $r7, $r14, $r17;
        java.util.Iterator $r6;
        org.apache.poi.poifs.storage.BlockWritable[] $r13;
        java.util.List r5, $r8, $r10, $r16;
        org.apache.poi.poifs.common.POIFSBigBlockSize r2;
        java.lang.Object $r11;
        org.apache.poi.poifs.property.RootProperty r4, $r9;

        r0 := @this: org.apache.poi.poifs.storage.SmallBlockTableWriter;

        r2 := @parameter0: org.apache.poi.poifs.common.POIFSBigBlockSize;

        r5 := @parameter1: java.util.List;

        r4 := @parameter2: org.apache.poi.poifs.property.RootProperty;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r17 = new org.apache.poi.poifs.storage.BlockAllocationTableWriter;

        specialinvoke $r17.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: void <init>(org.apache.poi.poifs.common.POIFSBigBlockSize)>(r2);

        r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.storage.BlockAllocationTableWriter _sbat> = $r17;

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: java.util.List _small_blocks> = $r18;

        r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.property.RootProperty _root> = r4;

        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.poi.poifs.filesystem.POIFSDocument) $r11;

        $r13 = virtualinvoke r12.<org.apache.poi.poifs.filesystem.POIFSDocument: org.apache.poi.poifs.storage.BlockWritable[] getSmallBlocks()>();

        $i2 = lengthof $r13;

        if $i2 == 0 goto label4;

        $r14 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.storage.BlockAllocationTableWriter _sbat>;

        $i3 = lengthof $r13;

        $i4 = virtualinvoke $r14.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: int allocateSpace(int)>($i3);

        virtualinvoke r12.<org.apache.poi.poifs.filesystem.POIFSDocument: void setStartBlock(int)>($i4);

        i6 = 0;

     label2:
        $i5 = lengthof $r13;

        if i6 >= $i5 goto label3;

        $r16 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: java.util.List _small_blocks>;

        $r15 = $r13[i6];

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r15);

        i6 = i6 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $i8 = (int) -2;

        virtualinvoke r12.<org.apache.poi.poifs.filesystem.POIFSDocument: void setStartBlock(int)>($i8);

     label5:
        goto label1;

     label6:
        $r7 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.storage.BlockAllocationTableWriter _sbat>;

        virtualinvoke $r7.<org.apache.poi.poifs.storage.BlockAllocationTableWriter: void simpleCreateBlocks()>();

        $r9 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.property.RootProperty _root>;

        $r8 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: java.util.List _small_blocks>;

        $i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        virtualinvoke $r9.<org.apache.poi.poifs.property.RootProperty: void setSize(int)>($i0);

        $r10 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: java.util.List _small_blocks>;

        $i1 = staticinvoke <org.apache.poi.poifs.storage.SmallDocumentBlock: int fill(org.apache.poi.poifs.common.POIFSBigBlockSize,java.util.List)>(r2, $r10);

        r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: int _big_block_count> = $i1;

        return;
    }

    public int getSBATBlockCount()
    {
        org.apache.poi.poifs.storage.SmallBlockTableWriter r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.poi.poifs.storage.SmallBlockTableWriter;

        $i0 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: int _big_block_count>;

        $i1 = $i0 + 15;

        $i2 = $i1 / 16;

        return $i2;
    }

    public org.apache.poi.poifs.storage.BlockAllocationTableWriter getSBAT()
    {
        org.apache.poi.poifs.storage.BlockAllocationTableWriter $r1;
        org.apache.poi.poifs.storage.SmallBlockTableWriter r0;

        r0 := @this: org.apache.poi.poifs.storage.SmallBlockTableWriter;

        $r1 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.storage.BlockAllocationTableWriter _sbat>;

        return $r1;
    }

    public int countBlocks()
    {
        int $i0;
        org.apache.poi.poifs.storage.SmallBlockTableWriter r0;

        r0 := @this: org.apache.poi.poifs.storage.SmallBlockTableWriter;

        $i0 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: int _big_block_count>;

        return $i0;
    }

    public void setStartBlock(int)
    {
        int i0;
        org.apache.poi.poifs.storage.SmallBlockTableWriter r0;
        org.apache.poi.poifs.property.RootProperty $r1;

        r0 := @this: org.apache.poi.poifs.storage.SmallBlockTableWriter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: org.apache.poi.poifs.property.RootProperty _root>;

        virtualinvoke $r1.<org.apache.poi.poifs.property.RootProperty: void setStartBlock(int)>(i0);

        return;
    }

    public void writeBlocks(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r4;
        java.util.List $r1;
        org.apache.poi.poifs.storage.SmallBlockTableWriter r0;
        java.util.Iterator $r2;
        org.apache.poi.poifs.storage.BlockWritable $r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.poi.poifs.storage.SmallBlockTableWriter;

        r4 := @parameter0: java.io.OutputStream;

        $r1 = r0.<org.apache.poi.poifs.storage.SmallBlockTableWriter: java.util.List _small_blocks>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.poi.poifs.storage.BlockWritable) $r3;

        interfaceinvoke $r5.<org.apache.poi.poifs.storage.BlockWritable: void writeBlocks(java.io.OutputStream)>(r4);

        goto label1;

     label2:
        return;
    }
}
