public class org.eclipse.jdt.internal.compiler.ast.PostfixExpression extends org.eclipse.jdt.internal.compiler.ast.CompoundAssignment
{

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Expression, int, int)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1, r2;
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression r0;
        int i0, i1, $i2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: void <init>(org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression,int,int)>(r1, r2, i0, i1);

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: int sourceStart> = $i2;

        r0.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: int sourceEnd> = i1;

        return;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.ast.Reference $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression r1;
        int i0, $i1, $i2;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: org.eclipse.jdt.internal.compiler.ast.Expression lhs>;

        $r4 = (org.eclipse.jdt.internal.compiler.ast.Reference) $r2;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Reference: void generatePostIncrement(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,org.eclipse.jdt.internal.compiler.ast.CompoundAssignment,boolean)>(r3, r0, r1, z0);

        if z0 == 0 goto label1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i2);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public java.lang.String operatorToString()
    {
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: int operator>;

        tableswitch($i0)
        {
            case 13: goto label2;
            case 14: goto label1;
            default: goto label3;
        };

     label1:
        return "++";

     label2:
        return "--";

     label3:
        return "unknown operator";
    }

    public java.lang.StringBuffer printExpressionNoParenthesis(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression r0;
        java.lang.StringBuffer r1, $r3, $r4, $r6;
        int i0;
        java.lang.String $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: org.eclipse.jdt.internal.compiler.ast.Expression lhs>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: java.lang.String operatorToString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        return $r6;
    }

    public boolean restrainUsageToNumericTypes()
    {
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        return 1;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        org.eclipse.jdt.internal.compiler.ast.PostfixExpression r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.PostfixExpression;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.PostfixExpression: org.eclipse.jdt.internal.compiler.ast.Expression lhs>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.PostfixExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
