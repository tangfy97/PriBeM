public final class org.apache.commons.collections.collection.UnmodifiableBoundedCollection extends org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator implements org.apache.commons.collections.BoundedCollection
{
    private static final long serialVersionUID;

    public static org.apache.commons.collections.BoundedCollection decorate(org.apache.commons.collections.BoundedCollection)
    {
        org.apache.commons.collections.BoundedCollection r1;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection $r0;

        r1 := @parameter0: org.apache.commons.collections.BoundedCollection;

        $r0 = new org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        specialinvoke $r0.<org.apache.commons.collections.collection.UnmodifiableBoundedCollection: void <init>(org.apache.commons.collections.BoundedCollection)>(r1);

        return $r0;
    }

    public static org.apache.commons.collections.BoundedCollection decorateUsing(java.util.Collection)
    {
        org.apache.commons.collections.BoundedCollection $r1;
        org.apache.commons.collections.collection.AbstractCollectionDecorator $r4;
        java.util.Collection r6;
        java.lang.IllegalArgumentException $r2, $r5;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection $r0;
        org.apache.commons.collections.collection.SynchronizedCollection $r3;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        r6 := @parameter0: java.util.Collection;

        if r6 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The collection must not be null");

        throw $r5;

     label1:
        i0 = 0;

     label2:
        if i0 >= 1000 goto label6;

        $z0 = r6 instanceof org.apache.commons.collections.BoundedCollection;

        if $z0 == 0 goto label3;

        goto label6;

     label3:
        $z1 = r6 instanceof org.apache.commons.collections.collection.AbstractCollectionDecorator;

        if $z1 == 0 goto label4;

        $r4 = (org.apache.commons.collections.collection.AbstractCollectionDecorator) r6;

        r6 = $r4.<org.apache.commons.collections.collection.AbstractCollectionDecorator: java.util.Collection collection>;

        goto label5;

     label4:
        $z2 = r6 instanceof org.apache.commons.collections.collection.SynchronizedCollection;

        if $z2 == 0 goto label6;

        $r3 = (org.apache.commons.collections.collection.SynchronizedCollection) r6;

        r6 = $r3.<org.apache.commons.collections.collection.SynchronizedCollection: java.util.Collection collection>;

     label5:
        i0 = i0 + 1;

        goto label2;

     label6:
        $z3 = r6 instanceof org.apache.commons.collections.BoundedCollection;

        if $z3 != 0 goto label7;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The collection is not a bounded collection");

        throw $r2;

     label7:
        $r0 = new org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        $r1 = (org.apache.commons.collections.BoundedCollection) r6;

        specialinvoke $r0.<org.apache.commons.collections.collection.UnmodifiableBoundedCollection: void <init>(org.apache.commons.collections.BoundedCollection)>($r1);

        return $r0;
    }

    private void <init>(org.apache.commons.collections.BoundedCollection)
    {
        org.apache.commons.collections.BoundedCollection r1;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r0;

        r0 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        r1 := @parameter0: org.apache.commons.collections.BoundedCollection;

        specialinvoke r0.<org.apache.commons.collections.collection.AbstractSerializableCollectionDecorator: void <init>(java.util.Collection)>(r1);

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r2, $r3;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r0;
        java.util.Collection $r1;

        r0 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        $r1 = virtualinvoke r0.<org.apache.commons.collections.collection.UnmodifiableBoundedCollection: java.util.Collection getCollection()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.apache.commons.collections.iterators.UnmodifiableIterator: java.util.Iterator decorate(java.util.Iterator)>($r2);

        return $r3;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r1;

        r1 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r1;
        java.util.Collection r2;

        r1 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        r2 := @parameter0: java.util.Collection;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r1;

        r1 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean remove(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r1;

        r1 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r1;
        java.util.Collection r2;

        r1 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        r2 := @parameter0: java.util.Collection;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r1;
        java.util.Collection r2;

        r1 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        r2 := @parameter0: java.util.Collection;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean isFull()
    {
        org.apache.commons.collections.BoundedCollection $r2;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r0;
        java.util.Collection $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        $r1 = r0.<org.apache.commons.collections.collection.UnmodifiableBoundedCollection: java.util.Collection collection>;

        $r2 = (org.apache.commons.collections.BoundedCollection) $r1;

        $z0 = interfaceinvoke $r2.<org.apache.commons.collections.BoundedCollection: boolean isFull()>();

        return $z0;
    }

    public int maxSize()
    {
        org.apache.commons.collections.BoundedCollection $r2;
        org.apache.commons.collections.collection.UnmodifiableBoundedCollection r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: org.apache.commons.collections.collection.UnmodifiableBoundedCollection;

        $r1 = r0.<org.apache.commons.collections.collection.UnmodifiableBoundedCollection: java.util.Collection collection>;

        $r2 = (org.apache.commons.collections.BoundedCollection) $r1;

        $i0 = interfaceinvoke $r2.<org.apache.commons.collections.BoundedCollection: int maxSize()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.collection.UnmodifiableBoundedCollection: long serialVersionUID> = -7112672385450340330L;

        return;
    }
}
