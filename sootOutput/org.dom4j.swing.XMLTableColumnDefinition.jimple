public class org.dom4j.swing.XMLTableColumnDefinition extends java.lang.Object implements java.io.Serializable
{
    public static final int OBJECT_TYPE;
    public static final int STRING_TYPE;
    public static final int NUMBER_TYPE;
    public static final int NODE_TYPE;
    private int type;
    private java.lang.String name;
    private org.dom4j.XPath xpath;
    private org.dom4j.XPath columnNameXPath;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$org$dom4j$Node;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, java.lang.String, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r3;
        int i0;
        java.lang.String r1, r2;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name> = r1;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = i0;

        $r3 = virtualinvoke r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath createXPath(java.lang.String)>(r2);

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = $r3;

        return;
    }

    public void <init>(java.lang.String, org.dom4j.XPath, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath r2;
        int i0;
        java.lang.String r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.dom4j.XPath;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name> = r1;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = r2;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = i0;

        return;
    }

    public void <init>(org.dom4j.XPath, org.dom4j.XPath, int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath r1, r2;
        int i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r2 := @parameter0: org.dom4j.XPath;

        r1 := @parameter1: org.dom4j.XPath;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = r1;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath columnNameXPath> = r2;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = i0;

        return;
    }

    public static int parseType(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("string");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("number");

        if $z1 == 0 goto label2;

        return 2;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("node");

        if $z2 == 0 goto label3;

        return 3;

     label3:
        return 0;
    }

    public java.lang.Class getColumnClass()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        int $i0;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $i0 = r0.<org.dom4j.swing.XMLTableColumnDefinition: int type>;

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label07;
            default: goto label10;
        };

     label01:
        $r3 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$String>;

        if $r3 != null goto label02;

        $r5 = staticinvoke <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$String> = $r5;

        goto label03;

     label02:
        $r5 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$String>;

     label03:
        return $r5;

     label04:
        $r2 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$Number>;

        if $r2 != null goto label05;

        $r6 = staticinvoke <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$Number> = $r6;

        goto label06;

     label05:
        $r6 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$Number>;

     label06:
        return $r6;

     label07:
        $r1 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$org$dom4j$Node>;

        if $r1 != null goto label08;

        $r7 = staticinvoke <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$(java.lang.String)>("org.dom4j.Node");

        <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$org$dom4j$Node> = $r7;

        goto label09;

     label08:
        $r7 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$org$dom4j$Node>;

     label09:
        return $r7;

     label10:
        $r4 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$Object>;

        if $r4 != null goto label11;

        $r8 = staticinvoke <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$Object> = $r8;

        goto label12;

     label11:
        $r8 = <org.dom4j.swing.XMLTableColumnDefinition: java.lang.Class class$java$lang$Object>;

     label12:
        return $r8;
    }

    public java.lang.Object getValue(java.lang.Object)
    {
        org.dom4j.Node $r3;
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r2, $r4, $r6, $r8;
        int $i0;
        java.lang.Object r1, $r9;
        java.lang.String $r7;
        java.lang.Number $r5;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.dom4j.swing.XMLTableColumnDefinition: int type>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r7 = interfaceinvoke $r6.<org.dom4j.XPath: java.lang.String valueOf(java.lang.Object)>(r1);

        return $r7;

     label2:
        $r4 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r5 = interfaceinvoke $r4.<org.dom4j.XPath: java.lang.Number numberValueOf(java.lang.Object)>(r1);

        return $r5;

     label3:
        $r2 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r3 = interfaceinvoke $r2.<org.dom4j.XPath: org.dom4j.Node selectSingleNode(java.lang.Object)>(r1);

        return $r3;

     label4:
        $r8 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        $r9 = interfaceinvoke $r8.<org.dom4j.XPath: java.lang.Object evaluate(java.lang.Object)>(r1);

        return $r9;
    }

    public int getType()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        int $i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $i0 = r0.<org.dom4j.swing.XMLTableColumnDefinition: int type>;

        return $i0;
    }

    public void setType(int)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        int i0;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        i0 := @parameter0: int;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: int type> = i0;

        return;
    }

    public java.lang.String getName()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 = r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        java.lang.String r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: java.lang.String name> = r1;

        return;
    }

    public org.dom4j.XPath getXPath()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath>;

        return $r1;
    }

    public void setXPath(org.dom4j.XPath)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 := @parameter0: org.dom4j.XPath;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath xpath> = r1;

        return;
    }

    public org.dom4j.XPath getColumnNameXPath()
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath $r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        $r1 = r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath columnNameXPath>;

        return $r1;
    }

    public void setColumnNameXPath(org.dom4j.XPath)
    {
        org.dom4j.swing.XMLTableColumnDefinition r0;
        org.dom4j.XPath r1;

        r0 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r1 := @parameter0: org.dom4j.XPath;

        r0.<org.dom4j.swing.XMLTableColumnDefinition: org.dom4j.XPath columnNameXPath> = r1;

        return;
    }

    protected org.dom4j.XPath createXPath(java.lang.String)
    {
        org.dom4j.swing.XMLTableColumnDefinition r2;
        java.lang.String r0;
        org.dom4j.XPath $r1;

        r2 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.dom4j.DocumentHelper: org.dom4j.XPath createXPath(java.lang.String)>(r0);

        return $r1;
    }

    protected void handleException(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        org.dom4j.swing.XMLTableColumnDefinition r6;
        java.lang.StringBuffer $r0, $r2, $r4;
        java.lang.String $r5;
        java.lang.Exception r3;

        r6 := @this: org.dom4j.swing.XMLTableColumnDefinition;

        r3 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Caught: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.dom4j.swing.XMLTableColumnDefinition: int NODE_TYPE> = 3;

        <org.dom4j.swing.XMLTableColumnDefinition: int NUMBER_TYPE> = 2;

        <org.dom4j.swing.XMLTableColumnDefinition: int STRING_TYPE> = 1;

        <org.dom4j.swing.XMLTableColumnDefinition: int OBJECT_TYPE> = 0;

        return;
    }
}
