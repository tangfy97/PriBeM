final class kodkod.engine.bool.CBCFactory$7 extends kodkod.engine.bool.CBCFactory$Assembler
{
    final kodkod.engine.bool.CBCFactory this$0;

    void <init>(kodkod.engine.bool.CBCFactory)
    {
        kodkod.engine.bool.CBCFactory$7 r0;
        kodkod.engine.bool.CBCFactory r1;

        r0 := @this: kodkod.engine.bool.CBCFactory$7;

        r1 := @parameter0: kodkod.engine.bool.CBCFactory;

        r0.<kodkod.engine.bool.CBCFactory$7: kodkod.engine.bool.CBCFactory this$0> = r1;

        specialinvoke r0.<kodkod.engine.bool.CBCFactory$Assembler: void <init>(kodkod.engine.bool.CBCFactory$Assembler)>(null);

        return;
    }

    kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanFormula, kodkod.engine.bool.BooleanFormula)
    {
        kodkod.engine.bool.Operator$Nary r3;
        kodkod.engine.bool.BooleanValue $r8;
        kodkod.engine.bool.BooleanConstant $r9;
        kodkod.engine.bool.BooleanFormula r0, r1, $r5;
        java.lang.AssertionError $r12;
        kodkod.engine.bool.Operator $r10, $r13, $r14;
        kodkod.engine.bool.Operator$Ternary $r11;
        kodkod.engine.bool.CBCFactory$7 r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        kodkod.engine.bool.CBCFactory$Assembler $r7;
        kodkod.engine.bool.CBCFactory $r4, $r6;

        r2 := @this: kodkod.engine.bool.CBCFactory$7;

        r3 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r0 := @parameter1: kodkod.engine.bool.BooleanFormula;

        r1 := @parameter2: kodkod.engine.bool.BooleanFormula;

        $z0 = <kodkod.engine.bool.CBCFactory: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r10 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r11 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator$Ternary ITE>;

        if $r10 != $r11 goto label1;

        $r13 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: kodkod.engine.bool.Operator op()>();

        $r14 = <kodkod.engine.bool.Operator: kodkod.engine.bool.Operator NOT>;

        if $r13 == $r14 goto label2;

     label1:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label2:
        $i0 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i1 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i2 = neg $i1;

        if $i0 != $i2 goto label3;

        $r9 = virtualinvoke r3.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r9;

     label3:
        $i3 = virtualinvoke r0.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i4 = virtualinvoke r1.<kodkod.engine.bool.BooleanFormula: int label()>();

        $i5 = staticinvoke <java.lang.StrictMath: int abs(int)>($i4);

        if $i3 >= $i5 goto label4;

        $r6 = r2.<kodkod.engine.bool.CBCFactory$7: kodkod.engine.bool.CBCFactory this$0>;

        $r7 = staticinvoke <kodkod.engine.bool.CBCFactory: kodkod.engine.bool.CBCFactory$Assembler access$5(kodkod.engine.bool.CBCFactory)>($r6);

        $r8 = virtualinvoke $r7.<kodkod.engine.bool.CBCFactory$Assembler: kodkod.engine.bool.BooleanValue assemble(kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>(r3, r1, r0);

        return $r8;

     label4:
        $r4 = r2.<kodkod.engine.bool.CBCFactory$7: kodkod.engine.bool.CBCFactory this$0>;

        $r5 = staticinvoke <kodkod.engine.bool.CBCFactory: kodkod.engine.bool.BooleanFormula access$1(kodkod.engine.bool.CBCFactory,kodkod.engine.bool.Operator$Nary,kodkod.engine.bool.BooleanFormula,kodkod.engine.bool.BooleanFormula)>($r4, r3, r0, r1);

        return $r5;
    }
}
