public class org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl extends java.lang.Object implements org.aspectj.lang.reflect.DeclarePrecedence
{
    private org.aspectj.lang.reflect.AjType declaringType;
    private org.aspectj.lang.reflect.TypePattern[] precedenceList;
    private java.lang.String precedenceString;

    public void <init>(java.lang.String, org.aspectj.lang.reflect.AjType)
    {
        org.aspectj.lang.reflect.AjType r1;
        java.util.StringTokenizer $r3;
        int $i0, $i1, $i2, i3, $i4;
        java.lang.String r2, $r7, $r8, r9;
        boolean $z0;
        org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl r0;
        org.aspectj.internal.lang.reflect.TypePatternImpl $r5;
        org.aspectj.lang.reflect.TypePattern[] $r4, $r6, $r10;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.aspectj.lang.reflect.AjType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: org.aspectj.lang.reflect.AjType declaringType> = r1;

        r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: java.lang.String precedenceString> = r2;

        r9 = r2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

     label1:
        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r9, ",");

        $i0 = virtualinvoke $r3.<java.util.StringTokenizer: int countTokens()>();

        $r4 = newarray (org.aspectj.lang.reflect.TypePattern)[$i0];

        r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: org.aspectj.lang.reflect.TypePattern[] precedenceList> = $r4;

        i3 = 0;

     label2:
        $r10 = r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: org.aspectj.lang.reflect.TypePattern[] precedenceList>;

        $i4 = lengthof $r10;

        if i3 >= $i4 goto label3;

        $r6 = r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: org.aspectj.lang.reflect.TypePattern[] precedenceList>;

        $r5 = new org.aspectj.internal.lang.reflect.TypePatternImpl;

        $r7 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r5.<org.aspectj.internal.lang.reflect.TypePatternImpl: void <init>(java.lang.String)>($r8);

        $r6[i3] = $r5;

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    public org.aspectj.lang.reflect.AjType getDeclaringType()
    {
        org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl r0;
        org.aspectj.lang.reflect.AjType $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: org.aspectj.lang.reflect.AjType declaringType>;

        return $r1;
    }

    public org.aspectj.lang.reflect.TypePattern[] getPrecedenceOrder()
    {
        org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl r0;
        org.aspectj.lang.reflect.TypePattern[] $r1;

        r0 := @this: org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: org.aspectj.lang.reflect.TypePattern[] precedenceList>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl r2;
        java.lang.StringBuilder $r0, $r1, $r4;
        java.lang.String $r3, $r5;

        r2 := @this: org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("declare precedence : ");

        $r3 = r2.<org.aspectj.internal.lang.reflect.DeclarePrecedenceImpl: java.lang.String precedenceString>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
