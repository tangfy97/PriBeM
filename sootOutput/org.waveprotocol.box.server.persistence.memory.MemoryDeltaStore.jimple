public class org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore extends java.lang.Object implements org.waveprotocol.box.server.waveserver.DeltaStore
{
    private final java.util.Map data;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map data> = $r1;

        return;
    }

    private java.util.Map getOrCreateWaveData(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.WaveId r1;
        java.util.Map $r2, $r5, r6;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.util.Map) $r3;

        if r6 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r6 = $r4;

        $r5 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map data>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    public void delete(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.box.server.persistence.FileNotFoundPersistenceException $r8, $r9;
        org.waveprotocol.wave.model.id.WaveletId $r6;
        java.util.Map $r3, r5;
        java.lang.Object $r4, $r7;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r3 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map data>;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.util.Map) $r4;

        if r5 != null goto label1;

        $r9 = new org.waveprotocol.box.server.persistence.FileNotFoundPersistenceException;

        specialinvoke $r9.<org.waveprotocol.box.server.persistence.FileNotFoundPersistenceException: void <init>(java.lang.String)>("WaveletData unknown");

        throw $r9;

     label1:
        $r6 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r7 = interfaceinvoke r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        if $r7 != null goto label2;

        $r8 = new org.waveprotocol.box.server.persistence.FileNotFoundPersistenceException;

        specialinvoke $r8.<org.waveprotocol.box.server.persistence.FileNotFoundPersistenceException: void <init>(java.lang.String)>("Nothing was removed");

        throw $r8;

     label2:
        return;
    }

    public com.google.common.collect.ImmutableSet lookup(org.waveprotocol.wave.model.id.WaveId)
    {
        com.google.common.collect.ImmutableSet$Builder $r5;
        org.waveprotocol.wave.model.id.WaveletId $r12;
        java.util.Map $r2, r4;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.id.WaveletName $r11;
        com.google.common.collect.ImmutableSet $r8, $r13;
        org.waveprotocol.wave.model.id.WaveId r1;
        java.util.Iterator $r7;
        java.util.Collection $r6;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r10;
        java.lang.Object $r3, $r9;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r2 = r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Map) $r3;

        if r4 != null goto label1;

        $r13 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();

        return $r13;

     label1:
        $r5 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r6 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection) $r9;

        $z1 = virtualinvoke r10.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r11 = virtualinvoke r10.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r12 = $r11.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        virtualinvoke $r5.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r12);

     label3:
        goto label2;

     label4:
        $r8 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        return $r8;
    }

    public org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess open(org.waveprotocol.wave.model.id.WaveletName)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.id.WaveletId $r4, $r7;
        java.util.Map $r3;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection $r6, r8;
        java.lang.Object $r5;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map getOrCreateWaveData(org.waveprotocol.wave.model.id.WaveId)>($r2);

        $r4 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r8 = (org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection) $r5;

        if r8 != null goto label1;

        $r6 = new org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection;

        specialinvoke $r6.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: void <init>(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        r8 = $r6;

        $r7 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

     label1:
        return r8;
    }

    public org.waveprotocol.box.common.ExceptionalIterator getWaveIdIterator()
    {
        com.google.common.collect.ImmutableSet$Builder $r0;
        org.waveprotocol.box.common.ExceptionalIterator $r7;
        java.util.Map $r2, $r11, $r13;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map$Entry r9;
        com.google.common.collect.ImmutableSet $r5;
        java.util.Iterator $r4, $r15;
        java.util.Collection $r14;
        java.util.Set $r3;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection r17;
        java.lang.Object $r8, $r10, $r12, $r16, $r18;
        com.google.common.collect.UnmodifiableIterator $r6;

        r1 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        $r0 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        $r2 = r1.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: java.util.Map data>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.util.Map) $r10;

        $z1 = interfaceinvoke $r11.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.util.Map) $r12;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Collection values()>();

        $r15 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection) $r16;

        $z3 = virtualinvoke r17.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaCollection: boolean isEmpty()>();

        if $z3 != 0 goto label3;

        $r18 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r18);

        goto label4;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        $r5 = virtualinvoke $r0.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();

        $r7 = staticinvoke <org.waveprotocol.box.common.ExceptionalIterator$FromIterator: org.waveprotocol.box.common.ExceptionalIterator create(java.util.Iterator)>($r6);

        return $r7;
    }

    public volatile org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader open(org.waveprotocol.wave.model.id.WaveletName) throws org.waveprotocol.box.server.persistence.PersistenceException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess $r2;
        org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        $r2 = virtualinvoke r0.<org.waveprotocol.box.server.persistence.memory.MemoryDeltaStore: org.waveprotocol.box.server.waveserver.DeltaStore$DeltasAccess open(org.waveprotocol.wave.model.id.WaveletName)>(r1);

        return $r2;
    }
}
