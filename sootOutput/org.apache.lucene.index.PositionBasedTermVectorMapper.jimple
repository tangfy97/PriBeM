public class org.apache.lucene.index.PositionBasedTermVectorMapper extends org.apache.lucene.index.TermVectorMapper
{
    private java.util.Map fieldToTerms;
    private java.lang.String currentField;
    private java.util.Map currentPositions;
    private boolean storeOffsets;

    public void <init>()
    {
        org.apache.lucene.index.PositionBasedTermVectorMapper r0;

        r0 := @this: org.apache.lucene.index.PositionBasedTermVectorMapper;

        specialinvoke r0.<org.apache.lucene.index.TermVectorMapper: void <init>(boolean,boolean)>(0, 0);

        return;
    }

    public void <init>(boolean)
    {
        org.apache.lucene.index.PositionBasedTermVectorMapper r0;
        boolean z0;

        r0 := @this: org.apache.lucene.index.PositionBasedTermVectorMapper;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.lucene.index.TermVectorMapper: void <init>(boolean,boolean)>(0, z0);

        return;
    }

    public boolean isIgnoringPositions()
    {
        org.apache.lucene.index.PositionBasedTermVectorMapper r0;

        r0 := @this: org.apache.lucene.index.PositionBasedTermVectorMapper;

        return 0;
    }

    public void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])
    {
        org.apache.lucene.index.PositionBasedTermVectorMapper r2;
        java.lang.Integer $r1;
        int[] r0;
        java.util.Map $r3, $r9;
        int $i0, $i1, $i2, i3, i4;
        java.lang.String r5;
        boolean $z0;
        org.apache.lucene.index.TermVectorOffsetInfo[] r6;
        org.apache.lucene.index.TermVectorOffsetInfo $r11;
        java.lang.Object $r4;
        org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo $r7, $r8, r10;

        r2 := @this: org.apache.lucene.index.PositionBasedTermVectorMapper;

        r5 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        r6 := @parameter2: org.apache.lucene.index.TermVectorOffsetInfo[];

        r0 := @parameter3: int[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label5;

        $i1 = r0[i4];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3 = r2.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map currentPositions>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r10 = (org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo) $r4;

        if r10 != null goto label2;

        $r8 = new org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo;

        $i2 = r0[i4];

        $z0 = r2.<org.apache.lucene.index.PositionBasedTermVectorMapper: boolean storeOffsets>;

        specialinvoke $r8.<org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo: void <init>(int,boolean)>($i2, $z0);

        r10 = $r8;

        $r9 = r2.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map currentPositions>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

     label2:
        $r7 = r10;

        if r6 == null goto label3;

        $r11 = r6[i4];

        goto label4;

     label3:
        $r11 = null;

     label4:
        virtualinvoke $r7.<org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo: void addTerm(java.lang.String,org.apache.lucene.index.TermVectorOffsetInfo)>(r5, $r11);

        i4 = i4 + 1;

        goto label1;

     label5:
        return;
    }

    public void setExpectations(java.lang.String, int, boolean, boolean)
    {
        org.apache.lucene.index.PositionBasedTermVectorMapper r0;
        java.util.HashMap $r1, $r3;
        java.lang.RuntimeException $r7;
        java.util.Map $r4, $r6;
        int i0;
        java.lang.String r2, $r5;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.index.PositionBasedTermVectorMapper;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z1 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        if z0 != 0 goto label1;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("You must store positions in order to use this Mapper");

        throw $r7;

     label1:
        if z1 != 1 goto label2;

     label2:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(i0);

        r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map fieldToTerms> = $r1;

        r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: boolean storeOffsets> = z1;

        r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.lang.String currentField> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map currentPositions> = $r3;

        $r6 = r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map fieldToTerms>;

        $r5 = r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.lang.String currentField>;

        $r4 = r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map currentPositions>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        return;
    }

    public java.util.Map getFieldToTerms()
    {
        org.apache.lucene.index.PositionBasedTermVectorMapper r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.index.PositionBasedTermVectorMapper;

        $r1 = r0.<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map fieldToTerms>;

        return $r1;
    }
}
