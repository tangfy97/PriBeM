public final class ucar.units.TimeScaleUnit$MyConverter extends ucar.units.ConverterImpl
{
    private final double offset;
    private final ucar.units.Converter converter;

    protected void <init>(ucar.units.TimeScaleUnit, ucar.units.Unit) throws ucar.units.ConversionException
    {
        java.util.Date $r8, $r10;
        ucar.units.Converter $r6;
        long $l0, $l1, $l2;
        double $d0, $d1, $d2;
        ucar.units.TimeScaleUnit r1, $r4, $r9, $r11;
        ucar.units.Unit r2, $r3, $r5, $r12;
        ucar.units.TimeScaleUnit$MyConverter r0;
        ucar.units.BaseUnit $r7;

        r0 := @this: ucar.units.TimeScaleUnit$MyConverter;

        r1 := @parameter0: ucar.units.TimeScaleUnit;

        r2 := @parameter1: ucar.units.Unit;

        specialinvoke r0.<ucar.units.ConverterImpl: void <init>(ucar.units.Unit,ucar.units.Unit)>(r1, r2);

        $r3 = virtualinvoke r1.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $r4 = (ucar.units.TimeScaleUnit) r2;

        $r5 = virtualinvoke $r4.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $r6 = interfaceinvoke $r3.<ucar.units.Unit: ucar.units.Converter getConverterTo(ucar.units.Unit)>($r5);

        r0.<ucar.units.TimeScaleUnit$MyConverter: ucar.units.Converter converter> = $r6;

        $r7 = <ucar.units.SI: ucar.units.BaseUnit SECOND>;

        $r8 = virtualinvoke r1.<ucar.units.TimeScaleUnit: java.util.Date getOrigin()>();

        $l0 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        $r9 = (ucar.units.TimeScaleUnit) r2;

        $r10 = virtualinvoke $r9.<ucar.units.TimeScaleUnit: java.util.Date getOrigin()>();

        $l1 = virtualinvoke $r10.<java.util.Date: long getTime()>();

        $l2 = $l0 - $l1;

        $d0 = (double) $l2;

        $d1 = $d0 / 1000.0;

        $r11 = (ucar.units.TimeScaleUnit) r2;

        $r12 = virtualinvoke $r11.<ucar.units.TimeScaleUnit: ucar.units.Unit getUnit()>();

        $d2 = virtualinvoke $r7.<ucar.units.BaseUnit: double convertTo(double,ucar.units.Unit)>($d1, $r12);

        r0.<ucar.units.TimeScaleUnit$MyConverter: double offset> = $d2;

        return;
    }

    public double convert(double)
    {
        ucar.units.TimeScaleUnit$MyConverter r0;
        ucar.units.Converter $r1;
        double d0, $d1, $d2, $d3;

        r0 := @this: ucar.units.TimeScaleUnit$MyConverter;

        d0 := @parameter0: double;

        $r1 = r0.<ucar.units.TimeScaleUnit$MyConverter: ucar.units.Converter converter>;

        $d1 = interfaceinvoke $r1.<ucar.units.Converter: double convert(double)>(d0);

        $d2 = r0.<ucar.units.TimeScaleUnit$MyConverter: double offset>;

        $d3 = $d1 + $d2;

        return $d3;
    }

    public float[] convert(float[], float[])
    {
        ucar.units.Converter $r2;
        float[] r1, $r3, r4;
        ucar.units.TimeScaleUnit$MyConverter r0;
        int i0, $i2;
        float $f0, $f1;
        double $d0, $d1, $d2;

        r0 := @this: ucar.units.TimeScaleUnit$MyConverter;

        r1 := @parameter0: float[];

        r4 := @parameter1: float[];

        $r2 = r0.<ucar.units.TimeScaleUnit$MyConverter: ucar.units.Converter converter>;

        $r3 = interfaceinvoke $r2.<ucar.units.Converter: float[] convert(float[],float[])>(r1, r4);

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $f0 = $r3[i0];

        $d1 = (double) $f0;

        $d0 = r0.<ucar.units.TimeScaleUnit$MyConverter: double offset>;

        $d2 = $d1 + $d0;

        $f1 = (float) $d2;

        $r3[i0] = $f1;

        goto label1;

     label2:
        return $r3;
    }

    public double[] convert(double[], double[])
    {
        ucar.units.Converter $r2;
        double[] r1, $r3, r4;
        ucar.units.TimeScaleUnit$MyConverter r0;
        int i0, $i2;
        double $d0, $d1, $d2;

        r0 := @this: ucar.units.TimeScaleUnit$MyConverter;

        r1 := @parameter0: double[];

        r4 := @parameter1: double[];

        $r2 = r0.<ucar.units.TimeScaleUnit$MyConverter: ucar.units.Converter converter>;

        $r3 = interfaceinvoke $r2.<ucar.units.Converter: double[] convert(double[],double[])>(r1, r4);

        i0 = lengthof r1;

     label1:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 < 0 goto label2;

        $d1 = $r3[i0];

        $d0 = r0.<ucar.units.TimeScaleUnit$MyConverter: double offset>;

        $d2 = $d1 + $d0;

        $r3[i0] = $d2;

        goto label1;

     label2:
        return $r3;
    }
}
