public class org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber extends java.lang.Object
{
    int offset;
    byte[] magicNumber;
    byte[] buffer;

    public void <init>(int, byte[])
    {
        byte[] r1, $r3, $r4;
        int i0, $i1;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber r0;

        r0 := @this: org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: int offset> = i0;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        r0.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] magicNumber> = $r3;

        $i1 = lengthof r1;

        $r4 = newarray (byte)[$i1];

        r0.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] buffer> = $r4;

        return;
    }

    int getReadlimit()
    {
        byte[] $r1;
        int $i0, $i1, $i2;
        org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber r0;

        r0 := @this: org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber;

        $i1 = r0.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: int offset>;

        $r1 = r0.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] magicNumber>;

        $i0 = lengthof $r1;

        $i2 = $i1 + $i0;

        return $i2;
    }

    boolean isMatch(java.io.InputStream) throws java.io.StreamCorruptedException
    {
        byte[] $r2, $r3, $r4, $r5, $r6, $r7;
        byte $b11, $b12;
        java.io.StreamCorruptedException $r28, $r29, $r30, $r31, $r32, $r33;
        java.lang.Throwable $r26;
        long $l4, $l5;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, i13, i14, i15, i16, $i18, $i20, $i21, $i22;
        java.lang.String $r10, $r13, $r16, $r19, $r22, $r25;
        java.io.IOException $r8, $r11, $r14, $r17, $r20, $r23, $r27;
        org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber r1;
        java.io.InputStream r0;

        r1 := @this: org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber;

        r0 := @parameter0: java.io.InputStream;

        i13 = 0;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: int getReadlimit()>();

        virtualinvoke r0.<java.io.InputStream: void mark(int)>($i0);

     label01:
        goto label05;

     label02:
        $i2 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: int offset>;

        $i3 = $i2 - i13;

        $l4 = (long) $i3;

        $l5 = virtualinvoke r0.<java.io.InputStream: long skip(long)>($l4);

        i14 = (int) $l5;

        $i18 = (int) -1;

        if i14 != $i18 goto label04;

        goto label21;

     label03:
        return 0;

     label04:
        i13 = i13 + i14;

     label05:
        $i1 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: int offset>;

        if i13 < $i1 goto label02;

        i15 = 0;

        goto label09;

     label06:
        $r4 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] buffer>;

        $r3 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] buffer>;

        $i7 = lengthof $r3;

        $i8 = $i7 - i15;

        $i9 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>($r4, i15, $i8);

        $i20 = (int) -1;

        if $i9 != $i20 goto label08;

        goto label25;

     label07:
        return 0;

     label08:
        i15 = i15 + $i9;

     label09:
        $r2 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] buffer>;

        $i6 = lengthof $r2;

        if i15 < $i6 goto label06;

        i16 = 0;

        goto label13;

     label10:
        $r6 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] magicNumber>;

        $b12 = $r6[i16];

        $r7 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] buffer>;

        $b11 = $r7[i16];

        $i21 = (int) $b12;

        $i22 = (int) $b11;

        if $i21 == $i22 goto label12;

        goto label29;

     label11:
        return 0;

     label12:
        i16 = i16 + 1;

     label13:
        $r5 = r1.<org.apache.batik.ext.awt.image.spi.MagicNumberRegistryEntry$MagicNumber: byte[] magicNumber>;

        $i10 = lengthof $r5;

        if i16 < $i10 goto label10;

     label14:
        goto label33;

     label15:
        goto label20;

     label16:
        $r27 := @caughtexception;

        goto label37;

     label17:
        return 0;

     label18:
        $r26 := @caughtexception;

        goto label41;

     label19:
        throw $r26;

     label20:
        return 1;

     label21:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label22:
        goto label24;

     label23:
        $r23 := @caughtexception;

        $r28 = new java.io.StreamCorruptedException;

        $r25 = virtualinvoke $r23.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r28.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r25);

        throw $r28;

     label24:
        goto label03;

     label25:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label26:
        goto label28;

     label27:
        $r20 := @caughtexception;

        $r29 = new java.io.StreamCorruptedException;

        $r22 = virtualinvoke $r20.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r29.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r22);

        throw $r29;

     label28:
        goto label07;

     label29:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label30:
        goto label32;

     label31:
        $r17 := @caughtexception;

        $r30 = new java.io.StreamCorruptedException;

        $r19 = virtualinvoke $r17.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r30.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r19);

        throw $r30;

     label32:
        goto label11;

     label33:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label34:
        goto label36;

     label35:
        $r14 := @caughtexception;

        $r31 = new java.io.StreamCorruptedException;

        $r16 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r31.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r16);

        throw $r31;

     label36:
        goto label15;

     label37:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label38:
        goto label40;

     label39:
        $r11 := @caughtexception;

        $r32 = new java.io.StreamCorruptedException;

        $r13 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r32.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r13);

        throw $r32;

     label40:
        goto label17;

     label41:
        virtualinvoke r0.<java.io.InputStream: void reset()>();

     label42:
        goto label44;

     label43:
        $r8 := @caughtexception;

        $r33 = new java.io.StreamCorruptedException;

        $r10 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r33.<java.io.StreamCorruptedException: void <init>(java.lang.String)>($r10);

        throw $r33;

     label44:
        goto label19;

        catch java.io.IOException from label01 to label14 with label16;
        catch java.lang.Throwable from label01 to label18 with label18;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.io.IOException from label37 to label38 with label39;
        catch java.io.IOException from label41 to label42 with label43;
    }
}
