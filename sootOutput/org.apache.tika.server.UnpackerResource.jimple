public class org.apache.tika.server.UnpackerResource extends java.lang.Object
{
    private static final org.apache.commons.logging.Log logger;
    public static final java.lang.String TEXT_FILENAME;
    private static final java.lang.String META_FILENAME;
    private org.apache.tika.config.TikaConfig tikaConfig;

    public void <init>(org.apache.tika.config.TikaConfig)
    {
        org.apache.tika.config.TikaConfig r1;
        org.apache.tika.server.UnpackerResource r0;

        r0 := @this: org.apache.tika.server.UnpackerResource;

        r1 := @parameter0: org.apache.tika.config.TikaConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.server.UnpackerResource: org.apache.tika.config.TikaConfig tikaConfig> = r1;

        return;
    }

    public java.util.Map unpack(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo) throws java.lang.Exception
    {
        javax.ws.rs.core.HttpHeaders r2;
        org.apache.tika.server.UnpackerResource r0;
        java.util.Map $r4;
        javax.ws.rs.core.UriInfo r3;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.server.UnpackerResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r3 := @parameter2: javax.ws.rs.core.UriInfo;

        $r4 = specialinvoke r0.<org.apache.tika.server.UnpackerResource: java.util.Map process(java.io.InputStream,javax.ws.rs.core.HttpHeaders,javax.ws.rs.core.UriInfo,boolean)>(r1, r2, r3, 0);

        return $r4;
    }

    public java.util.Map unpackAll(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo) throws java.lang.Exception
    {
        javax.ws.rs.core.HttpHeaders r2;
        org.apache.tika.server.UnpackerResource r0;
        java.util.Map $r4;
        javax.ws.rs.core.UriInfo r3;
        java.io.InputStream r1;

        r0 := @this: org.apache.tika.server.UnpackerResource;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r3 := @parameter2: javax.ws.rs.core.UriInfo;

        $r4 = specialinvoke r0.<org.apache.tika.server.UnpackerResource: java.util.Map process(java.io.InputStream,javax.ws.rs.core.HttpHeaders,javax.ws.rs.core.UriInfo,boolean)>(r1, r2, r3, 1);

        return $r4;
    }

    private java.util.Map process(java.io.InputStream, javax.ws.rs.core.HttpHeaders, javax.ws.rs.core.UriInfo, boolean) throws java.lang.Exception
    {
        byte[] $r15, $r17;
        org.apache.tika.server.UnpackerResource$MyEmbeddedDocumentExtractor $r13;
        org.apache.tika.metadata.Metadata $r0;
        java.util.Locale $r26;
        javax.ws.rs.core.Response$Status $r19;
        org.apache.commons.lang.mutable.MutableInt $r12;
        boolean z0;
        org.apache.tika.server.UnpackerResource r1;
        org.apache.tika.parser.AutoDetectParser $r3;
        org.apache.tika.server.RichTextContentHandler $r21;
        javax.ws.rs.core.HttpHeaders r4;
        org.apache.tika.parser.ParseContext $r10;
        javax.ws.rs.WebApplicationException $r18;
        javax.ws.rs.core.UriInfo r6;
        org.apache.tika.sax.BodyContentHandler $r20;
        java.lang.Object[] $r24;
        java.io.ByteArrayOutputStream $r8, $r16;
        org.apache.tika.config.TikaConfig $r2;
        java.util.HashMap $r11;
        org.apache.tika.exception.TikaException $r23;
        int $i0;
        java.io.OutputStreamWriter $r22;
        java.lang.String $r27, $r28;
        javax.ws.rs.core.MultivaluedMap $r5;
        org.xml.sax.helpers.DefaultHandler $r9, r29;
        org.apache.commons.logging.Log $r7, $r25;
        java.io.InputStream r14;

        r1 := @this: org.apache.tika.server.UnpackerResource;

        r14 := @parameter0: java.io.InputStream;

        r4 := @parameter1: javax.ws.rs.core.HttpHeaders;

        r6 := @parameter2: javax.ws.rs.core.UriInfo;

        z0 := @parameter3: boolean;

        $r0 = new org.apache.tika.metadata.Metadata;

        specialinvoke $r0.<org.apache.tika.metadata.Metadata: void <init>()>();

        $r2 = r1.<org.apache.tika.server.UnpackerResource: org.apache.tika.config.TikaConfig tikaConfig>;

        $r3 = staticinvoke <org.apache.tika.server.TikaResource: org.apache.tika.parser.AutoDetectParser createParser(org.apache.tika.config.TikaConfig)>($r2);

        $r5 = interfaceinvoke r4.<javax.ws.rs.core.HttpHeaders: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        staticinvoke <org.apache.tika.server.TikaResource: void fillMetadata(org.apache.tika.parser.AutoDetectParser,org.apache.tika.metadata.Metadata,javax.ws.rs.core.MultivaluedMap)>($r3, $r0, $r5);

        $r7 = <org.apache.tika.server.UnpackerResource: org.apache.commons.logging.Log logger>;

        staticinvoke <org.apache.tika.server.TikaResource: void logRequest(org.apache.commons.logging.Log,javax.ws.rs.core.UriInfo,org.apache.tika.metadata.Metadata)>($r7, r6, $r0);

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        if z0 == 0 goto label1;

        $r20 = new org.apache.tika.sax.BodyContentHandler;

        $r21 = new org.apache.tika.server.RichTextContentHandler;

        $r22 = new java.io.OutputStreamWriter;

        specialinvoke $r22.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r8, "UTF-8");

        specialinvoke $r21.<org.apache.tika.server.RichTextContentHandler: void <init>(java.io.Writer)>($r22);

        specialinvoke $r20.<org.apache.tika.sax.BodyContentHandler: void <init>(org.xml.sax.ContentHandler)>($r21);

        r29 = $r20;

        goto label2;

     label1:
        $r9 = new org.xml.sax.helpers.DefaultHandler;

        specialinvoke $r9.<org.xml.sax.helpers.DefaultHandler: void <init>()>();

        r29 = $r9;

     label2:
        $r10 = new org.apache.tika.parser.ParseContext;

        specialinvoke $r10.<org.apache.tika.parser.ParseContext: void <init>()>();

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        $r12 = new org.apache.commons.lang.mutable.MutableInt;

        specialinvoke $r12.<org.apache.commons.lang.mutable.MutableInt: void <init>()>();

        $r13 = new org.apache.tika.server.UnpackerResource$MyEmbeddedDocumentExtractor;

        specialinvoke $r13.<org.apache.tika.server.UnpackerResource$MyEmbeddedDocumentExtractor: void <init>(org.apache.tika.server.UnpackerResource,org.apache.commons.lang.mutable.MutableInt,java.util.Map)>(r1, $r12, $r11);

        virtualinvoke $r10.<org.apache.tika.parser.ParseContext: void set(java.lang.Class,java.lang.Object)>(class "Lorg/apache/tika/extractor/EmbeddedDocumentExtractor;", $r13);

     label3:
        virtualinvoke $r3.<org.apache.tika.parser.AutoDetectParser: void parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)>(r14, r29, $r0, $r10);

     label4:
        goto label6;

     label5:
        $r23 := @caughtexception;

        $r25 = <org.apache.tika.server.UnpackerResource: org.apache.commons.logging.Log logger>;

        $r26 = <java.util.Locale: java.util.Locale ROOT>;

        $r24 = newarray (java.lang.Object)[1];

        $r27 = interfaceinvoke r6.<javax.ws.rs.core.UriInfo: java.lang.String getPath()>();

        $r24[0] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r26, "%s: Unpacker failed", $r24);

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r28, $r23);

        throw $r23;

     label6:
        $i0 = virtualinvoke $r12.<org.apache.commons.lang.mutable.MutableInt: int intValue()>();

        if $i0 != 0 goto label7;

        if z0 != 0 goto label7;

        $r18 = new javax.ws.rs.WebApplicationException;

        $r19 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status NO_CONTENT>;

        specialinvoke $r18.<javax.ws.rs.WebApplicationException: void <init>(javax.ws.rs.core.Response$Status)>($r19);

        throw $r18;

     label7:
        if z0 == 0 goto label8;

        $r15 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("__TEXT__", $r15);

        $r16 = new java.io.ByteArrayOutputStream;

        specialinvoke $r16.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.tika.server.MetadataResource: void metadataToCsv(org.apache.tika.metadata.Metadata,java.io.OutputStream)>($r0, $r16);

        $r17 = virtualinvoke $r16.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("__METADATA__", $r17);

     label8:
        return $r11;

        catch org.apache.tika.exception.TikaException from label3 to label4 with label5;
    }

    static org.apache.tika.config.TikaConfig access$000(org.apache.tika.server.UnpackerResource)
    {
        org.apache.tika.config.TikaConfig $r1;
        org.apache.tika.server.UnpackerResource r0;

        r0 := @parameter0: org.apache.tika.server.UnpackerResource;

        $r1 = r0.<org.apache.tika.server.UnpackerResource: org.apache.tika.config.TikaConfig tikaConfig>;

        return $r1;
    }

    static org.apache.commons.logging.Log access$100()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = <org.apache.tika.server.UnpackerResource: org.apache.commons.logging.Log logger>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        <org.apache.tika.server.UnpackerResource: java.lang.String META_FILENAME> = "__METADATA__";

        <org.apache.tika.server.UnpackerResource: java.lang.String TEXT_FILENAME> = "__TEXT__";

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/tika/server/UnpackerResource;");

        <org.apache.tika.server.UnpackerResource: org.apache.commons.logging.Log logger> = $r0;

        return;
    }
}
