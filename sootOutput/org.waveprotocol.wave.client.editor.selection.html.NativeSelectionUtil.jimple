public class org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil extends java.lang.Object
{
    static final org.waveprotocol.wave.common.logging.LoggerBundle LOG;
    private static final org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl;
    private static final org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter;
    private static org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener transientMutationListener;
    private static boolean caching;
    private static org.waveprotocol.wave.model.document.util.FocusedPointRange cache;

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil r0;

        r0 := @this: org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setTransientMutationListener(org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener)
    {
        org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener r0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "null mutationListener");

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener transientMutationListener> = r0;

        return;
    }

    public static void cacheOn()
    {
        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean caching> = 1;

        return;
    }

    public static void cacheOff()
    {
        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean caching> = 0;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        return;
    }

    public static void cacheClear()
    {
        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        return;
    }

    public static org.waveprotocol.wave.model.document.util.FocusedPointRange get()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r1, $r2, $r3, $r5;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0, $r4;
        boolean $z0;

        $z0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean caching>;

        if $z0 == 0 goto label2;

        $r2 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache>;

        if $r2 != null goto label1;

        $r4 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = $r5;

     label1:
        $r3 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache>;

        return $r3;

     label2:
        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        return $r1;
    }

    public static org.waveprotocol.wave.model.document.util.PointRange getOrdered()
    {
        org.waveprotocol.wave.model.document.util.PointRange $r1;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        $r1 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: org.waveprotocol.wave.model.document.util.PointRange getOrdered()>();

        return $r1;
    }

    public static boolean isOrdered()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: boolean isOrdered()>();

        return $z0;
    }

    public static org.waveprotocol.wave.client.common.util.OffsetPosition slowGetPosition()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper $r0;
        org.waveprotocol.wave.client.common.util.OffsetPosition $r1;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper: org.waveprotocol.wave.client.common.util.OffsetPosition getFocusPosition()>();

        return $r1;
    }

    public static org.waveprotocol.wave.client.common.util.OffsetPosition slowGetAnchorPosition()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper $r0;
        org.waveprotocol.wave.client.common.util.OffsetPosition $r1;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper: org.waveprotocol.wave.client.common.util.OffsetPosition getAnchorPosition()>();

        return $r1;
    }

    public static void set(org.waveprotocol.wave.model.document.util.FocusedPointRange)
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange r0;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r1;
        org.waveprotocol.wave.model.document.util.Point $r2, $r3;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.FocusedPointRange;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        $r1 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void set(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r2, $r3);

        return;
    }

    public static void set(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.Point r0, r1;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        $r2 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void set(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r0, r1);

        return;
    }

    public static void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.Point r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void set(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r0, r0);

        return;
    }

    public static void clear()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void clear()>();

        return;
    }

    public static void saveSelection()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void saveSelection()>();

        return;
    }

    public static void restoreSelection()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: void restoreSelection()>();

        return;
    }

    public static boolean selectionExists()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionImpl $r0;
        boolean $z0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl>;

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionImpl: boolean selectionExists()>();

        return $z0;
    }

    public static org.waveprotocol.wave.model.util.IntRange getFocusBounds()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper $r0;
        org.waveprotocol.wave.model.util.IntRange $r1;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper: org.waveprotocol.wave.model.util.IntRange getFocusBounds()>();

        return $r1;
    }

    public static native com.google.gwt.dom.client.Element getActiveElement();

    static org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener access$000()
    {
        org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener $r0;

        $r0 = <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener transientMutationListener>;

        return $r0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperIEImpl $r11;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE $r10;
        org.waveprotocol.wave.client.debug.logger.BufferedLogger $r9;
        org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperW3C $r16;
        org.waveprotocol.wave.common.logging.LoggerBundle $r18;
        org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperDisabled $r13;
        org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$NoOpMutationListener $r17;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C $r14;
        org.waveprotocol.wave.client.editor.selection.html.SelectionImplDisabled $r12;
        org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$1 $r15;
        boolean $z0, $z1;

        $r9 = new org.waveprotocol.wave.client.debug.logger.BufferedLogger;

        specialinvoke $r9.<org.waveprotocol.wave.client.debug.logger.BufferedLogger: void <init>(java.lang.String)>("selection");

        $r18 = (org.waveprotocol.wave.common.logging.LoggerBundle) $r9;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.common.logging.LoggerBundle LOG> = $r18;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isIE()>();

        if $z0 == 0 goto label1;

        $r10 = new org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplIE: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl> = $r10;

        $r11 = new org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperIEImpl;

        specialinvoke $r11.<org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperIEImpl: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter> = $r11;

        goto label3;

     label1:
        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMobileWebkit()>();

        if $z1 == 0 goto label2;

        $r12 = new org.waveprotocol.wave.client.editor.selection.html.SelectionImplDisabled;

        specialinvoke $r12.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplDisabled: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl> = $r12;

        $r13 = new org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperDisabled;

        specialinvoke $r13.<org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperDisabled: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter> = $r13;

        goto label3;

     label2:
        $r14 = new org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C;

        specialinvoke $r14.<org.waveprotocol.wave.client.editor.selection.html.SelectionImplW3C: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionImpl impl> = $r14;

        $r16 = new org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperW3C;

        $r15 = new org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$1;

        specialinvoke $r15.<org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$1: void <init>()>();

        specialinvoke $r16.<org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelperW3C: void <init>(org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener)>($r15);

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.SelectionCoordinatesHelper coordinateGetter> = $r16;

     label3:
        $r17 = new org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$NoOpMutationListener;

        specialinvoke $r17.<org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$NoOpMutationListener: void <init>()>();

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil$MutationListener transientMutationListener> = $r17;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean caching> = 0;

        <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange cache> = null;

        return;
    }
}
