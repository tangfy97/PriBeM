final class org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl extends java.lang.Object implements org.apache.xmlbeans.impl.common.ValidatorListener$Event
{
    private int _attIndex;
    private javax.xml.stream.XMLStreamReader _xmlStream;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void setXMLStreamReader(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.XMLStreamReader r1;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream> = r1;

        return;
    }

    public org.apache.xmlbeans.XmlCursor getLocationAsCursor()
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        return null;
    }

    public javax.xml.stream.Location getLocation()
    {
        javax.xml.stream.XMLStreamReader $r1;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;
        javax.xml.stream.Location $r2;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        return $r2;
    }

    public java.lang.String getXsiType()
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getXsiNil()
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getXsiLoc()
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getXsiNoLoc()
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public javax.xml.namespace.QName getName()
    {
        java.lang.AssertionError $r7;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;
        javax.xml.stream.XMLStreamReader $r1, $r4, $r6;
        int $i0, $i1;
        java.lang.String $r2, $r5, $r8;
        javax.xml.namespace.QName $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r6 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z1 = interfaceinvoke $r6.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z1 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not on Start Element.");

        throw $r7;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: int _attIndex>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>($i0);

        $r3 = new javax.xml.namespace.QName;

        if $r2 != null goto label2;

        $r8 = "";

        goto label3;

     label2:
        $r8 = $r2;

     label3:
        $r4 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: int _attIndex>;

        $r5 = interfaceinvoke $r4.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>($i1);

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r8, $r5);

        return $r3;
    }

    public java.lang.String getText()
    {
        java.lang.AssertionError $r4;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;
        javax.xml.stream.XMLStreamReader $r1, $r3;
        int $i0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z1 = interfaceinvoke $r3.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not on Start Element.");

        throw $r4;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: int _attIndex>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>($i0);

        return $r2;
    }

    public java.lang.String getText(int)
    {
        java.lang.AssertionError $r5;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;
        javax.xml.stream.XMLStreamReader $r1, $r4;
        int $i0, i1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        i1 := @parameter0: int;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z1 = interfaceinvoke $r4.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not on Start Element.");

        throw $r5;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $i0 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: int _attIndex>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>($i0);

        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.XmlWhitespace: java.lang.String collapse(java.lang.String,int)>($r2, i1);

        return $r3;
    }

    public boolean textIsWhitespace()
    {
        java.lang.IllegalStateException $r0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r1;

        r1 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>()>();

        throw $r0;
    }

    public java.lang.String getNamespaceForPrefix(java.lang.String)
    {
        java.lang.AssertionError $r5;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;
        javax.xml.stream.XMLStreamReader $r2, $r4;
        java.lang.String r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r4 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $z1 = interfaceinvoke $r4.<javax.xml.stream.XMLStreamReader: boolean isStartElement()>();

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Not on Start Element.");

        throw $r5;

     label1:
        $r2 = r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: javax.xml.stream.XMLStreamReader _xmlStream>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(java.lang.String)>(r1);

        return $r3;
    }

    private void setAttributeIndex(int)
    {
        int i0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        i0 := @parameter0: int;

        r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: int _attIndex> = i0;

        return;
    }

    void <init>(org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$1)
    {
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$1 r1;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @this: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        r1 := @parameter0: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$1;

        specialinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: void <init>()>();

        return;
    }

    static void access$500(org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl, javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.XMLStreamReader r1;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @parameter0: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        r1 := @parameter1: javax.xml.stream.XMLStreamReader;

        specialinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: void setXMLStreamReader(javax.xml.stream.XMLStreamReader)>(r1);

        return;
    }

    static void access$700(org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl, int)
    {
        int i0;
        org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl r0;

        r0 := @parameter0: org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: void setAttributeIndex(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$org$apache$xmlbeans$impl$validator$ValidatingXMLStreamReader>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader");

        <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$org$apache$xmlbeans$impl$validator$ValidatingXMLStreamReader> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader: java.lang.Class class$org$apache$xmlbeans$impl$validator$ValidatingXMLStreamReader>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.validator.ValidatingXMLStreamReader$AttributeEventImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
