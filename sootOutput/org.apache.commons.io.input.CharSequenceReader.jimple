public class org.apache.commons.io.input.CharSequenceReader extends java.io.Reader implements java.io.Serializable
{
    private final java.lang.CharSequence charSequence;
    private int idx;
    private int mark;

    public void <init>(java.lang.CharSequence)
    {
        java.lang.CharSequence r1, $r2;
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = "";

     label2:
        r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence> = $r2;

        return;
    }

    public void close()
    {
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = 0;

        r0.<org.apache.commons.io.input.CharSequenceReader: int mark> = 0;

        return;
    }

    public void mark(int)
    {
        int $i0, i1;
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        r0.<org.apache.commons.io.input.CharSequenceReader: int mark> = $i0;

        return;
    }

    public boolean markSupported()
    {
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        return 1;
    }

    public int read()
    {
        java.lang.CharSequence $r1, $r2;
        char $c4;
        org.apache.commons.io.input.CharSequenceReader r0;
        int $i0, $i1, $i2, $i3, $i6, $i7;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 < $i1 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i2 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = $i3;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        $i7 = (int) $c4;

        return $i7;
    }

    public int read(char[], int, int)
    {
        java.lang.IndexOutOfBoundsException $r15;
        org.apache.commons.io.input.CharSequenceReader r0;
        java.lang.NullPointerException $r13;
        int $i0, $i1, i2, $i3, i4, $i5, $i6, $i7, $i9, i10, i11, $i13, $i15;
        java.lang.String $r11;
        java.lang.CharSequence $r1;
        char $c8;
        char[] r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r14;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        r2 := @parameter0: char[];

        i4 := @parameter1: int;

        i2 := @parameter2: int;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 < $i1 goto label1;

        $i13 = (int) -1;

        return $i13;

     label1:
        if r2 != null goto label2;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Character array is missing");

        throw $r13;

     label2:
        if i2 < 0 goto label3;

        $i6 = i4 + i2;

        $i5 = lengthof r2;

        if $i6 <= $i5 goto label4;

     label3:
        $r15 = new java.lang.IndexOutOfBoundsException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array Size=");

        $i3 = lengthof r2;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r11);

        throw $r15;

     label4:
        i10 = 0;

        i11 = 0;

     label5:
        if i11 >= i2 goto label7;

        $i7 = virtualinvoke r0.<org.apache.commons.io.input.CharSequenceReader: int read()>();

        $i15 = (int) -1;

        if $i7 != $i15 goto label6;

        return i10;

     label6:
        $i9 = i4 + i11;

        $c8 = (char) $i7;

        r2[$i9] = $c8;

        i10 = i10 + 1;

        i11 = i11 + 1;

        goto label5;

     label7:
        return i10;
    }

    public void reset()
    {
        int $i0;
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $i0 = r0.<org.apache.commons.io.input.CharSequenceReader: int mark>;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = $i0;

        return;
    }

    public long skip(long)
    {
        long l0, $l6, $l7, $l8, $l9, $l13;
        org.apache.commons.io.input.CharSequenceReader r0;
        byte $b1;
        int $i2, $i3, $i4, $i5, i10, $i11, i12, $i14;
        java.lang.String $r7;
        java.lang.CharSequence $r1, $r2;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i14 = (int) $b1;

        if $i14 >= 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of characters to skip is less than zero: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r9;

     label1:
        $i2 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i3 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i2 < $i3 goto label2;

        return -1L;

     label2:
        $r2 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $i4 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $l8 = (long) $i4;

        $i5 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        $l6 = (long) $i5;

        $l7 = $l6 + l0;

        $l9 = staticinvoke <java.lang.Math: long min(long,long)>($l8, $l7);

        i10 = (int) $l9;

        $i11 = r0.<org.apache.commons.io.input.CharSequenceReader: int idx>;

        i12 = i10 - $i11;

        r0.<org.apache.commons.io.input.CharSequenceReader: int idx> = i10;

        $l13 = (long) i12;

        return $l13;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        java.lang.CharSequence $r1;
        org.apache.commons.io.input.CharSequenceReader r0;

        r0 := @this: org.apache.commons.io.input.CharSequenceReader;

        $r1 = r0.<org.apache.commons.io.input.CharSequenceReader: java.lang.CharSequence charSequence>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
