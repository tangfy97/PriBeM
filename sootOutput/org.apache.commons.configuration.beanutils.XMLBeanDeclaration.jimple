public class org.apache.commons.configuration.beanutils.XMLBeanDeclaration extends java.lang.Object implements org.apache.commons.configuration.beanutils.BeanDeclaration
{
    public static final java.lang.String RESERVED_PREFIX;
    public static final java.lang.String ATTR_PREFIX;
    public static final java.lang.String ATTR_BEAN_CLASS;
    public static final java.lang.String ATTR_BEAN_FACTORY;
    public static final java.lang.String ATTR_FACTORY_PARAM;
    private org.apache.commons.configuration.SubnodeConfiguration configuration;
    private org.apache.commons.configuration.tree.ConfigurationNode node;

    public void <init>(org.apache.commons.configuration.HierarchicalConfiguration, java.lang.String)
    {
        org.apache.commons.configuration.HierarchicalConfiguration r1;
        java.lang.String r2;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r1 := @parameter0: org.apache.commons.configuration.HierarchicalConfiguration;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: void <init>(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(org.apache.commons.configuration.HierarchicalConfiguration, java.lang.String, boolean)
    {
        org.apache.commons.configuration.HierarchicalConfiguration r1;
        java.lang.IllegalArgumentException $r7, $r8;
        org.apache.commons.configuration.tree.ConfigurationNode $r5;
        org.apache.commons.configuration.tree.DefaultConfigurationNode $r10;
        int $i0;
        java.lang.String r2;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.SubnodeConfiguration $r3, $r4, $r6, $r9;
        boolean z0;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r1 := @parameter0: org.apache.commons.configuration.HierarchicalConfiguration;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Configuration must not be null!");

        throw $r7;

     label1:
        $r3 = virtualinvoke r1.<org.apache.commons.configuration.HierarchicalConfiguration: org.apache.commons.configuration.SubnodeConfiguration configurationAt(java.lang.String)>(r2);

        r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration configuration> = $r3;

        $r4 = r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration configuration>;

        $r5 = virtualinvoke $r4.<org.apache.commons.configuration.SubnodeConfiguration: org.apache.commons.configuration.tree.ConfigurationNode getRootNode()>();

        r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.tree.ConfigurationNode node> = $r5;

     label2:
        goto label6;

     label3:
        $r8 := @caughtexception;

        if z0 == 0 goto label4;

        $i0 = virtualinvoke r1.<org.apache.commons.configuration.HierarchicalConfiguration: int getMaxIndex(java.lang.String)>(r2);

        if $i0 <= 0 goto label5;

     label4:
        throw $r8;

     label5:
        $r9 = virtualinvoke r1.<org.apache.commons.configuration.HierarchicalConfiguration: org.apache.commons.configuration.SubnodeConfiguration configurationAt(java.lang.String)>(null);

        r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration configuration> = $r9;

        $r10 = new org.apache.commons.configuration.tree.DefaultConfigurationNode;

        specialinvoke $r10.<org.apache.commons.configuration.tree.DefaultConfigurationNode: void <init>()>();

        r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.tree.ConfigurationNode node> = $r10;

     label6:
        $r6 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration getConfiguration()>();

        specialinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: void initSubnodeConfiguration(org.apache.commons.configuration.SubnodeConfiguration)>($r6);

        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void <init>(org.apache.commons.configuration.HierarchicalConfiguration)
    {
        org.apache.commons.configuration.HierarchicalConfiguration r1;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r1 := @parameter0: org.apache.commons.configuration.HierarchicalConfiguration;

        specialinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: void <init>(org.apache.commons.configuration.HierarchicalConfiguration,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(org.apache.commons.configuration.SubnodeConfiguration, org.apache.commons.configuration.tree.ConfigurationNode)
    {
        java.lang.IllegalArgumentException $r3, $r4;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.SubnodeConfiguration r1;
        org.apache.commons.configuration.tree.ConfigurationNode r2;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r1 := @parameter0: org.apache.commons.configuration.SubnodeConfiguration;

        r2 := @parameter1: org.apache.commons.configuration.tree.ConfigurationNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Configuration must not be null!");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Node must not be null!");

        throw $r3;

     label2:
        r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.tree.ConfigurationNode node> = r2;

        r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration configuration> = r1;

        specialinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: void initSubnodeConfiguration(org.apache.commons.configuration.SubnodeConfiguration)>(r1);

        return;
    }

    public org.apache.commons.configuration.SubnodeConfiguration getConfiguration()
    {
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.SubnodeConfiguration $r1;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r1 = r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration configuration>;

        return $r1;
    }

    public org.apache.commons.configuration.tree.ConfigurationNode getNode()
    {
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.tree.ConfigurationNode $r1;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r1 = r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.tree.ConfigurationNode node>;

        return $r1;
    }

    public java.lang.String getBeanFactoryName()
    {
        java.lang.String $r2;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.SubnodeConfiguration $r1;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration getConfiguration()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.configuration.SubnodeConfiguration: java.lang.String getString(java.lang.String)>("[@config-factory]");

        return $r2;
    }

    public java.lang.Object getBeanFactoryParameter()
    {
        java.lang.Object $r2;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.SubnodeConfiguration $r1;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration getConfiguration()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.configuration.SubnodeConfiguration: java.lang.Object getProperty(java.lang.String)>("[@config-factoryParam]");

        return $r2;
    }

    public java.lang.String getBeanClassName()
    {
        java.lang.String $r2;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r0;
        org.apache.commons.configuration.SubnodeConfiguration $r1;

        r0 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r1 = virtualinvoke r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration getConfiguration()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.configuration.SubnodeConfiguration: java.lang.String getString(java.lang.String)>("[@config-class]");

        return $r2;
    }

    public java.util.Map getBeanProperties()
    {
        java.util.Iterator $r4;
        java.util.HashMap $r0;
        org.apache.commons.configuration.tree.ConfigurationNode $r2, r6;
        java.util.List $r3;
        java.lang.Object $r5, $r8, $r9;
        java.lang.String $r7;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.tree.ConfigurationNode getNode()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getAttributes()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.configuration.tree.ConfigurationNode) $r5;

        $z1 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: boolean isReservedNode(org.apache.commons.configuration.tree.ConfigurationNode)>(r6);

        if $z1 != 0 goto label2;

        $r7 = interfaceinvoke r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $r8 = interfaceinvoke r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.Object getValue()>();

        $r9 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: java.lang.Object interpolate(java.lang.Object)>($r8);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    public java.util.Map getNestedBeanDeclarations()
    {
        java.util.Iterator $r4;
        java.util.HashMap $r0;
        org.apache.commons.configuration.beanutils.BeanDeclaration $r8;
        org.apache.commons.configuration.tree.ConfigurationNode $r2, r6;
        java.util.List $r3;
        java.lang.Object $r5;
        java.lang.String $r7;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r1;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.tree.ConfigurationNode getNode()>();

        $r3 = interfaceinvoke $r2.<org.apache.commons.configuration.tree.ConfigurationNode: java.util.List getChildren()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.configuration.tree.ConfigurationNode) $r5;

        $z1 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: boolean isReservedNode(org.apache.commons.configuration.tree.ConfigurationNode)>(r6);

        if $z1 != 0 goto label2;

        $r7 = interfaceinvoke r6.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $r8 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.beanutils.BeanDeclaration createBeanDeclaration(org.apache.commons.configuration.tree.ConfigurationNode)>(r6);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

     label2:
        goto label1;

     label3:
        return $r0;
    }

    protected java.lang.Object interpolate(java.lang.Object)
    {
        org.apache.commons.configuration.HierarchicalConfiguration $r3;
        java.lang.Object r0, $r4;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r1;
        org.apache.commons.configuration.SubnodeConfiguration $r2;

        r1 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r0 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration getConfiguration()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.configuration.SubnodeConfiguration: org.apache.commons.configuration.HierarchicalConfiguration getParent()>();

        $r4 = staticinvoke <org.apache.commons.configuration.PropertyConverter: java.lang.Object interpolate(java.lang.Object,org.apache.commons.configuration.AbstractConfiguration)>(r0, $r3);

        return $r4;
    }

    protected boolean isReservedNode(org.apache.commons.configuration.tree.ConfigurationNode)
    {
        java.lang.String $r1, $r2;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r3;
        org.apache.commons.configuration.tree.ConfigurationNode r0;
        boolean $z0, $z1, $z2;

        r3 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r0 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        $z0 = interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: boolean isAttribute()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke r0.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("config-");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    protected org.apache.commons.configuration.beanutils.BeanDeclaration createBeanDeclaration(org.apache.commons.configuration.tree.ConfigurationNode)
    {
        java.lang.String $r4;
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration $r0, r1;
        org.apache.commons.configuration.SubnodeConfiguration $r2, $r5;
        org.apache.commons.configuration.tree.ConfigurationNode r3;

        r1 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r3 := @parameter0: org.apache.commons.configuration.tree.ConfigurationNode;

        $r0 = new org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        $r2 = virtualinvoke r1.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: org.apache.commons.configuration.SubnodeConfiguration getConfiguration()>();

        $r4 = interfaceinvoke r3.<org.apache.commons.configuration.tree.ConfigurationNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<org.apache.commons.configuration.SubnodeConfiguration: org.apache.commons.configuration.SubnodeConfiguration configurationAt(java.lang.String)>($r4);

        specialinvoke $r0.<org.apache.commons.configuration.beanutils.XMLBeanDeclaration: void <init>(org.apache.commons.configuration.SubnodeConfiguration,org.apache.commons.configuration.tree.ConfigurationNode)>($r5, r3);

        return $r0;
    }

    private void initSubnodeConfiguration(org.apache.commons.configuration.SubnodeConfiguration)
    {
        org.apache.commons.configuration.beanutils.XMLBeanDeclaration r1;
        org.apache.commons.configuration.SubnodeConfiguration r0;

        r1 := @this: org.apache.commons.configuration.beanutils.XMLBeanDeclaration;

        r0 := @parameter0: org.apache.commons.configuration.SubnodeConfiguration;

        virtualinvoke r0.<org.apache.commons.configuration.SubnodeConfiguration: void setThrowExceptionOnMissing(boolean)>(0);

        virtualinvoke r0.<org.apache.commons.configuration.SubnodeConfiguration: void setExpressionEngine(org.apache.commons.configuration.tree.ExpressionEngine)>(null);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.configuration.beanutils.XMLBeanDeclaration: java.lang.String ATTR_FACTORY_PARAM> = "[@config-factoryParam]";

        <org.apache.commons.configuration.beanutils.XMLBeanDeclaration: java.lang.String ATTR_BEAN_FACTORY> = "[@config-factory]";

        <org.apache.commons.configuration.beanutils.XMLBeanDeclaration: java.lang.String ATTR_BEAN_CLASS> = "[@config-class]";

        <org.apache.commons.configuration.beanutils.XMLBeanDeclaration: java.lang.String ATTR_PREFIX> = "[@config-";

        <org.apache.commons.configuration.beanutils.XMLBeanDeclaration: java.lang.String RESERVED_PREFIX> = "config-";

        return;
    }
}
