public abstract class org.springframework.util.CollectionUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.util.CollectionUtils r0;

        r0 := @this: org.springframework.util.CollectionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static boolean isEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static java.util.List arrayToList(java.lang.Object)
    {
        java.lang.Object r0;
        java.util.List $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>(r0);

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    public static void mergeArrayIntoCollection(java.lang.Object, java.util.Collection)
    {
        java.lang.Object[] $r2;
        java.util.Collection r0;
        int i0, i1;
        java.lang.Object r1, r3;
        java.lang.IllegalArgumentException $r4;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Collection;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Collection must not be null");

        throw $r4;

     label1:
        $r2 = staticinvoke <org.springframework.util.ObjectUtils: java.lang.Object[] toObjectArray(java.lang.Object)>(r1);

        i0 = lengthof $r2;

        i1 = 0;

        goto label3;

     label2:
        r3 = $r2[i1];

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        return;
    }

    public static void mergePropertiesIntoMap(java.util.Properties, java.util.Map)
    {
        java.util.Properties r1;
        java.util.Enumeration $r2;
        java.lang.IllegalArgumentException $r6;
        java.util.Map r0;
        java.lang.Object $r3, r7;
        java.lang.String r4, $r5;
        boolean $z0;

        r1 := @parameter0: java.util.Properties;

        r0 := @parameter1: java.util.Map;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map must not be null");

        throw $r6;

     label1:
        if r1 == null goto label5;

        $r2 = virtualinvoke r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

        goto label4;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r4);

        r7 = $r5;

        if $r5 != null goto label3;

        r7 = virtualinvoke r1.<java.util.Properties: java.lang.Object get(java.lang.Object)>(r4);

     label3:
        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r7);

     label4:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label2;

     label5:
        return;
    }

    public static boolean contains(java.util.Iterator, java.lang.Object)
    {
        java.util.Iterator r0;
        java.lang.Object $r1, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.lang.Object;

        if r0 == null goto label3;

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r1, r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return 0;
    }

    public static boolean contains(java.util.Enumeration, java.lang.Object)
    {
        java.util.Enumeration r0;
        java.lang.Object $r1, r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Enumeration;

        r2 := @parameter1: java.lang.Object;

        if r0 == null goto label3;

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r1, r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 != 0 goto label1;

     label3:
        return 0;
    }

    public static boolean containsInstance(java.util.Collection, java.lang.Object)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2, r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.lang.Object;

        if r0 == null goto label3;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 != r3 goto label2;

        return 1;

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return 0;
    }

    public static boolean containsAny(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0, r1;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        return 0;
    }

    public static java.lang.Object findFirstMatch(java.util.Collection, java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0, r1;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.Collection;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z3 = interfaceinvoke r0.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z3 == 0 goto label4;

        return $r3;

     label4:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        return null;
    }

    public static java.lang.Object findValueOfType(java.util.Collection, java.lang.Class)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2, r4;
        java.lang.Class r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        r3 := @parameter1: java.lang.Class;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r4 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if r3 == null goto label3;

        $z1 = virtualinvoke r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r2);

        if $z1 == 0 goto label5;

     label3:
        if r4 == null goto label4;

        return null;

     label4:
        r4 = $r2;

     label5:
        $z2 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        return r4;
    }

    public static java.lang.Object findValueOfType(java.util.Collection, java.lang.Class[])
    {
        java.util.Collection r0;
        java.lang.Class[] r1;
        int i0, i1;
        java.lang.Class r2;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Class[];

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        i0 = lengthof r1;

        i1 = 0;

        goto label5;

     label3:
        r2 = r1[i1];

        $r3 = staticinvoke <org.springframework.util.CollectionUtils: java.lang.Object findValueOfType(java.util.Collection,java.lang.Class)>(r0, r2);

        if $r3 == null goto label4;

        return $r3;

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label3;

        return null;
    }

    public static boolean hasUniqueObject(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2, r3;
        boolean $z0, z1, $z2;

        r0 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        z1 = 0;

        r3 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if z1 != 0 goto label3;

        z1 = 1;

        r3 = $r2;

        goto label4;

     label3:
        if r3 == $r2 goto label4;

        return 0;

     label4:
        $z2 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        return 1;
    }

    public static java.lang.Class findCommonElementType(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        java.lang.Class $r3, r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r4 = null;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label4;

     label2:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 == null goto label4;

        if r4 != null goto label3;

        r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        goto label4;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        if r4 == $r3 goto label4;

        return null;

     label4:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return r4;
    }

    public static java.util.Iterator toIterator(java.util.Enumeration)
    {
        org.springframework.util.CollectionUtils$EnumerationIterator $r0;
        java.util.Enumeration r1;

        r1 := @parameter0: java.util.Enumeration;

        $r0 = new org.springframework.util.CollectionUtils$EnumerationIterator;

        specialinvoke $r0.<org.springframework.util.CollectionUtils$EnumerationIterator: void <init>(java.util.Enumeration)>(r1);

        return $r0;
    }
}
