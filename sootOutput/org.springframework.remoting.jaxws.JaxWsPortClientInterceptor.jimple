public class org.springframework.remoting.jaxws.JaxWsPortClientInterceptor extends org.springframework.remoting.jaxws.LocalJaxWsServiceFactory implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean
{
    private javax.xml.ws.Service jaxWsService;
    private java.lang.String portName;
    private java.lang.String username;
    private java.lang.String password;
    private java.lang.String endpointAddress;
    private boolean maintainSession;
    private boolean useSoapAction;
    private java.lang.String soapActionUri;
    private java.util.Map customProperties;
    private java.lang.Object[] webServiceFeatures;
    private java.lang.Class serviceInterface;
    private boolean lookupServiceOnStartup;
    private java.lang.ClassLoader beanClassLoader;
    private javax.xml.namespace.QName portQName;
    private java.lang.Object portStub;
    private final java.lang.Object preparationMonitor;

    public void <init>()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.Object $r2;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.jaxws.LocalJaxWsServiceFactory: void <init>()>();

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean lookupServiceOnStartup> = 1;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.ClassLoader beanClassLoader> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object preparationMonitor> = $r2;

        return;
    }

    public void setJaxWsService(javax.xml.ws.Service)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        javax.xml.ws.Service r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: javax.xml.ws.Service;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.ws.Service jaxWsService> = r1;

        return;
    }

    public javax.xml.ws.Service getJaxWsService()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        javax.xml.ws.Service $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.ws.Service jaxWsService>;

        return $r1;
    }

    public void setPortName(java.lang.String)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String portName> = r1;

        return;
    }

    public java.lang.String getPortName()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String portName>;

        return $r1;
    }

    public void setUsername(java.lang.String)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String username> = r1;

        return;
    }

    public java.lang.String getUsername()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String username>;

        return $r1;
    }

    public void setPassword(java.lang.String)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String password> = r1;

        return;
    }

    public java.lang.String getPassword()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String password>;

        return $r1;
    }

    public void setEndpointAddress(java.lang.String)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String endpointAddress> = r1;

        return;
    }

    public java.lang.String getEndpointAddress()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String endpointAddress>;

        return $r1;
    }

    public void setMaintainSession(boolean)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean maintainSession> = z0;

        return;
    }

    public boolean isMaintainSession()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $z0 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean maintainSession>;

        return $z0;
    }

    public void setUseSoapAction(boolean)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean useSoapAction> = z0;

        return;
    }

    public boolean isUseSoapAction()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $z0 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean useSoapAction>;

        return $z0;
    }

    public void setSoapActionUri(java.lang.String)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String soapActionUri> = r1;

        return;
    }

    public java.lang.String getSoapActionUri()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String soapActionUri>;

        return $r1;
    }

    public void setCustomProperties(java.util.Map)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.util.Map r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.util.Map;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.util.Map customProperties> = r1;

        return;
    }

    public java.util.Map getCustomProperties()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.util.Map $r1, $r2;
        java.util.HashMap $r3;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.util.Map customProperties>;

        if $r1 != null goto label1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.util.Map customProperties> = $r3;

     label1:
        $r2 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.util.Map customProperties>;

        return $r2;
    }

    public void addCustomProperty(java.lang.String, java.lang.Object)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.util.Map $r1;
        java.lang.Object r3;
        java.lang.String r2;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.util.Map getCustomProperties()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public void setWebServiceFeatures(java.lang.Object[])
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.Object[] r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.Object[];

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object[] webServiceFeatures> = r1;

        return;
    }

    public void setServiceInterface(java.lang.Class)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r1;
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'serviceInterface\' must be an interface");

        throw $r2;

     label1:
        r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Class serviceInterface> = r0;

        return;
    }

    public java.lang.Class getServiceInterface()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.Class $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Class serviceInterface>;

        return $r1;
    }

    public void setLookupServiceOnStartup(boolean)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean lookupServiceOnStartup> = z0;

        return;
    }

    public void setBeanClassLoader(java.lang.ClassLoader)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.ClassLoader beanClassLoader> = r1;

        return;
    }

    protected java.lang.ClassLoader getBeanClassLoader()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.ClassLoader beanClassLoader>;

        return $r1;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $z0 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean lookupServiceOnStartup>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void prepare()>();

     label1:
        return;
    }

    public void prepare()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        javax.jws.WebService r3;
        javax.xml.ws.Service $r4, $r10, r12;
        java.lang.IllegalArgumentException $r11;
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class $r1, $r6;
        java.lang.Object $r9;
        java.lang.String $r5, $r8, $r13;
        javax.xml.namespace.QName $r7, $r14;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Class getServiceInterface()>();

        if $r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'serviceInterface\' is required");

        throw $r11;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/jws/WebService;");

        r3 = (javax.jws.WebService) $r2;

        if r3 == null goto label2;

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void applyDefaultsFromAnnotation(javax.jws.WebService)>(r3);

     label2:
        $r4 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.ws.Service getJaxWsService()>();

        r12 = $r4;

        if $r4 != null goto label3;

        r12 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.ws.Service createJaxWsService()>();

     label3:
        $r5 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getPortName()>();

        if $r5 == null goto label4;

        $r13 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getPortName()>();

        goto label5;

     label4:
        $r6 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Class getServiceInterface()>();

        $r13 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

     label5:
        $r7 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.namespace.QName getQName(java.lang.String)>($r13);

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.namespace.QName portQName> = $r7;

        $r10 = r12;

        $r8 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getPortName()>();

        if $r8 == null goto label6;

        $r14 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.namespace.QName portQName>;

        goto label7;

     label6:
        $r14 = null;

     label7:
        $r9 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object getPortStub(javax.xml.ws.Service,javax.xml.namespace.QName)>($r10, $r14);

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void preparePortStub(java.lang.Object)>($r9);

        r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object portStub> = $r9;

        return;
    }

    protected void applyDefaultsFromAnnotation(javax.jws.WebService)
    {
        java.lang.IllegalStateException $r9;
        java.net.URL $r1, $r7;
        java.lang.String $r3, $r4, $r5, $r6, $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        javax.jws.WebService r2;
        java.net.MalformedURLException $r8;
        java.lang.StringBuilder $r10, $r11, $r12;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r2 := @parameter0: javax.jws.WebService;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.net.URL getWsdlDocumentUrl()>();

        if $r1 != null goto label4;

        $r6 = interfaceinvoke r2.<javax.jws.WebService: java.lang.String wsdlLocation()>();

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r6);

        if $z3 == 0 goto label4;

     label1:
        $r7 = new java.net.URL;

        specialinvoke $r7.<java.net.URL: void <init>(java.lang.String)>($r6);

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void setWsdlDocumentUrl(java.net.URL)>($r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Encountered invalid @Service wsdlLocation value [");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r8);

        throw $r9;

     label4:
        $r14 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getNamespaceUri()>();

        if $r14 != null goto label5;

        $r5 = interfaceinvoke r2.<javax.jws.WebService: java.lang.String targetNamespace()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r5);

        if $z2 == 0 goto label5;

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void setNamespaceUri(java.lang.String)>($r5);

     label5:
        $r15 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getServiceName()>();

        if $r15 != null goto label6;

        $r4 = interfaceinvoke r2.<javax.jws.WebService: java.lang.String serviceName()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r4);

        if $z1 == 0 goto label6;

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void setServiceName(java.lang.String)>($r4);

     label6:
        $r16 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getPortName()>();

        if $r16 != null goto label7;

        $r3 = interfaceinvoke r2.<javax.jws.WebService: java.lang.String portName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r3);

        if $z0 == 0 goto label7;

        virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void setPortName(java.lang.String)>($r3);

     label7:
        return;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    protected boolean isPrepared()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.Throwable $r3;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object portStub>;

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected final javax.xml.namespace.QName getPortQName()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        javax.xml.namespace.QName $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: javax.xml.namespace.QName portQName>;

        return $r1;
    }

    protected java.lang.Object getPortStub(javax.xml.ws.Service, javax.xml.namespace.QName)
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.Object[] $r1, $r7;
        javax.xml.ws.Service r3;
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider $r6;
        java.lang.Class $r4, $r5;
        java.lang.Object $r8, $r9;
        javax.xml.namespace.QName r2;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r3 := @parameter0: javax.xml.ws.Service;

        r2 := @parameter1: javax.xml.namespace.QName;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object[] webServiceFeatures>;

        if $r1 == null goto label1;

        $r6 = new org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider;

        specialinvoke $r6.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider: void <init>(org.springframework.remoting.jaxws.JaxWsPortClientInterceptor,org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider)>(r0, null);

        $r7 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object[] webServiceFeatures>;

        $r8 = virtualinvoke $r6.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor$FeaturePortProvider: java.lang.Object getPortStub(javax.xml.ws.Service,javax.xml.namespace.QName,java.lang.Object[])>(r3, r2, $r7);

        return $r8;

     label1:
        if r2 == null goto label2;

        $r5 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Class getServiceInterface()>();

        $r9 = virtualinvoke r3.<javax.xml.ws.Service: java.lang.Object getPort(javax.xml.namespace.QName,java.lang.Class)>(r2, $r5);

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Class getServiceInterface()>();

        $r9 = virtualinvoke r3.<javax.xml.ws.Service: java.lang.Object getPort(java.lang.Class)>($r4);

     label3:
        return $r9;
    }

    protected void preparePortStub(java.lang.Object)
    {
        java.util.HashMap $r0;
        java.util.Map $r6, $r9;
        org.springframework.remoting.RemoteLookupFailureException $r10;
        java.lang.Boolean $r17, $r18;
        java.lang.String $r2, $r3, $r4, $r5, $r13, $r16;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r1;
        java.lang.Object r7;
        java.lang.StringBuilder $r11, $r14, $r15;
        java.lang.Class $r12;
        javax.xml.ws.BindingProvider $r8;

        r1 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r7 := @parameter0: java.lang.Object;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getUsername()>();

        if $r2 == null goto label1;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.security.auth.username", $r2);

     label1:
        $r3 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getPassword()>();

        if $r3 == null goto label2;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.security.auth.password", $r3);

     label2:
        $r4 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getEndpointAddress()>();

        if $r4 == null goto label3;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.service.endpoint.address", $r4);

     label3:
        $z0 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean isMaintainSession()>();

        if $z0 == 0 goto label4;

        $r18 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.session.maintain", $r18);

     label4:
        $z1 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean isUseSoapAction()>();

        if $z1 == 0 goto label5;

        $r17 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.soap.http.soapaction.use", $r17);

     label5:
        $r5 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getSoapActionUri()>();

        if $r5 == null goto label6;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.soap.http.soapaction.uri", $r5);

     label6:
        $r6 = virtualinvoke r1.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.util.Map getCustomProperties()>();

        interfaceinvoke $r0.<java.util.Map: void putAll(java.util.Map)>($r6);

        $z2 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label8;

        $z3 = r7 instanceof javax.xml.ws.BindingProvider;

        if $z3 != 0 goto label7;

        $r10 = new org.springframework.remoting.RemoteLookupFailureException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Port stub of class [");

        $r12 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a customizable JAX-WS stub: it does not implement interface [javax.xml.ws.BindingProvider]");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label7:
        $r8 = (javax.xml.ws.BindingProvider) r7;

        $r9 = interfaceinvoke $r8.<javax.xml.ws.BindingProvider: java.util.Map getRequestContext()>();

        interfaceinvoke $r9.<java.util.Map: void putAll(java.util.Map)>($r0);

     label8:
        return;
    }

    protected java.lang.Object getPortStub()
    {
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        java.lang.Object $r1;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object portStub>;

        return $r1;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r13;
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.String $r6, $r9, $r12;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1;
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r2;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11;

        r2 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isToStringMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("JAX-WS proxy for port [");

        $r6 = virtualinvoke r2.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getPortName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of service [");

        $r9 = virtualinvoke r2.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getServiceName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label1:
        $r3 = r2.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r3;

     label2:
        $z1 = virtualinvoke r2.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: boolean isPrepared()>();

        if $z1 != 0 goto label3;

        virtualinvoke r2.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: void prepare()>();

     label3:
        exitmonitor $r3;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r13;

     label7:
        $r4 = virtualinvoke r2.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation)>(r0);

        return $r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        javax.xml.ws.ProtocolException $r11;
        org.springframework.remoting.RemoteAccessException $r5;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.String $r7, $r10, $r14, $r17;
        org.springframework.remoting.RemoteConnectFailureException $r12;
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r0;
        org.springframework.remoting.jaxws.JaxWsSoapFaultException $r19;
        javax.xml.ws.WebServiceException $r4;
        javax.xml.ws.soap.SOAPFaultException $r18;
        java.lang.Object $r2, $r3;
        java.lang.StringBuilder $r6, $r8, $r9, $r13, $r15, $r16;

        r0 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object getPortStub()>();

        $r3 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r1, $r2);

     label2:
        return $r3;

     label3:
        $r18 := @caughtexception;

        $r19 = new org.springframework.remoting.jaxws.JaxWsSoapFaultException;

        specialinvoke $r19.<org.springframework.remoting.jaxws.JaxWsSoapFaultException: void <init>(javax.xml.ws.soap.SOAPFaultException)>($r18);

        throw $r19;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.springframework.remoting.RemoteConnectFailureException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not connect to remote service [");

        $r14 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getEndpointAddress()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.springframework.remoting.RemoteConnectFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r11);

        throw $r12;

     label5:
        $r4 := @caughtexception;

        $r5 = new org.springframework.remoting.RemoteAccessException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access remote service at [");

        $r7 = virtualinvoke r0.<org.springframework.remoting.jaxws.JaxWsPortClientInterceptor: java.lang.String getEndpointAddress()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.remoting.RemoteAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch javax.xml.ws.soap.SOAPFaultException from label1 to label2 with label3;
        catch javax.xml.ws.ProtocolException from label1 to label2 with label4;
        catch javax.xml.ws.WebServiceException from label1 to label2 with label5;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, java.lang.Object) throws java.lang.Throwable
    {
        java.lang.Throwable $r5, $r11;
        org.springframework.remoting.jaxws.JaxWsPortClientInterceptor r12;
        java.lang.Object[] $r3;
        java.lang.reflect.InvocationTargetException $r10;
        org.aopalliance.intercept.MethodInvocation r0;
        java.lang.Object r2, $r4;
        org.springframework.remoting.RemoteProxyFailureException $r6;
        java.lang.StringBuilder $r7, $r8;
        java.lang.String $r9;
        java.lang.reflect.Method $r1;

        r12 := @this: org.springframework.remoting.jaxws.JaxWsPortClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r2 := @parameter1: java.lang.Object;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

     label1:
        $r3 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r3);

     label2:
        return $r4;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r11;

     label4:
        $r5 := @caughtexception;

        $r6 = new org.springframework.remoting.RemoteProxyFailureException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of stub method failed: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.springframework.remoting.RemoteProxyFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r5);

        throw $r6;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
