public final class org.apache.poi.ss.formula.SheetNameFormatter extends java.lang.Object
{
    private static final char DELIMITER;
    private static final java.util.regex.Pattern CELL_REF_PATTERN;

    private void <init>()
    {
        org.apache.poi.ss.formula.SheetNameFormatter r0;

        r0 := @this: org.apache.poi.ss.formula.SheetNameFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String format(java.lang.String)
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 + 2;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>($i1);

        staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: void appendFormat(java.lang.StringBuffer,java.lang.String)>($r0, r1);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static void appendFormat(java.lang.StringBuffer, java.lang.String)
    {
        java.lang.String r0;
        java.lang.StringBuffer r1;
        boolean $z0;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean needsDelimiting(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: void appendAndEscape(java.lang.StringBuffer,java.lang.String)>(r1, r0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

     label2:
        return;
    }

    public static void appendFormat(java.lang.StringBuffer, java.lang.String, java.lang.String)
    {
        java.lang.StringBuffer r1;
        java.lang.String r0, r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean needsDelimiting(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean needsDelimiting(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        if $z2 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(91, 40);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(93, 41);

        staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: void appendAndEscape(java.lang.StringBuffer,java.lang.String)>(r1, $r4);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: void appendAndEscape(java.lang.StringBuffer,java.lang.String)>(r1, r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

     label5:
        return;
    }

    private static void appendAndEscape(java.lang.StringBuffer, java.lang.String)
    {
        java.lang.StringBuffer r1;
        int $i0, i2, $i3;
        char $c1;
        java.lang.String r0;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        if $i3 != 39 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

     label2:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private static boolean needsDelimiting(java.lang.String)
    {
        char $c1, $c2, $c4, $c5;
        java.lang.RuntimeException $r1;
        int $i0, $i3, i6;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 1 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Zero length string is an invalid sheet name");

        throw $r1;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i6 = 0;

     label3:
        if i6 >= $i0 goto label5;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        $z4 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean isSpecialChar(char)>($c5);

        if $z4 == 0 goto label4;

        return 1;

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c2);

        if $z1 == 0 goto label6;

        $i3 = $i0 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z2 == 0 goto label6;

        $z3 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean nameLooksLikePlainCellReference(java.lang.String)>(r0);

        if $z3 == 0 goto label6;

        return 1;

     label6:
        $z5 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean nameLooksLikeBooleanLiteral(java.lang.String)>(r0);

        if $z5 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    private static boolean nameLooksLikeBooleanLiteral(java.lang.String)
    {
        int $i1;
        char $c0;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 70: goto label2;
            case 84: goto label1;
            case 102: goto label2;
            case 116: goto label1;
            default: goto label3;
        };

     label1:
        $r1 = "TRUE";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;

     label2:
        $r2 = "FALSE";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z1;

     label3:
        return 0;
    }

    static boolean isSpecialChar(char)
    {
        char c0;
        java.lang.RuntimeException $r8;
        int $i1, $i2;
        java.lang.StringBuilder $r2, $r4, $r5, $r7;
        java.lang.String $r3, $r6;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = (int) c0;

        lookupswitch($i1)
        {
            case 9: goto label3;
            case 10: goto label3;
            case 13: goto label3;
            case 46: goto label2;
            case 95: goto label2;
            default: goto label4;
        };

     label2:
        return 0;

     label3:
        $r8 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (0x");

        $i2 = (int) c0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") found in sheet name");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label4:
        return 1;
    }

    static boolean cellReferenceIsWithinRange(java.lang.String, java.lang.String)
    {
        org.apache.poi.ss.SpreadsheetVersion $r2;
        java.lang.String r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.poi.ss.SpreadsheetVersion: org.apache.poi.ss.SpreadsheetVersion EXCEL97>;

        $z0 = staticinvoke <org.apache.poi.ss.util.CellReference: boolean cellReferenceIsWithinRange(java.lang.String,java.lang.String,org.apache.poi.ss.SpreadsheetVersion)>(r0, r1, $r2);

        return $z0;
    }

    static boolean nameLooksLikePlainCellReference(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String r0, $r3, $r4;
        java.util.regex.Pattern $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.poi.ss.formula.SheetNameFormatter: java.util.regex.Pattern CELL_REF_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r4 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $z1 = staticinvoke <org.apache.poi.ss.formula.SheetNameFormatter: boolean cellReferenceIsWithinRange(java.lang.String,java.lang.String)>($r3, $r4);

        return $z1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.poi.ss.formula.SheetNameFormatter: char DELIMITER> = 39;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([A-Za-z]+)([0-9]+)");

        <org.apache.poi.ss.formula.SheetNameFormatter: java.util.regex.Pattern CELL_REF_PATTERN> = $r0;

        return;
    }
}
