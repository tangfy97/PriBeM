public abstract class org.apache.lucene.util.SorterTemplate extends java.lang.Object
{
    private static final int TIMSORT_MINRUN;
    private static final int TIMSORT_THRESHOLD;
    private static final int TIMSORT_STACKSIZE;
    private static final int MERGESORT_THRESHOLD;
    private static final int QUICKSORT_THRESHOLD;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.SorterTemplate r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void swap(int, int);

    protected abstract int compare(int, int);

    protected abstract void setPivot(int);

    protected abstract int comparePivot(int);

    public final void insertionSort(int, int)
    {
        org.apache.lucene.util.SorterTemplate r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, $i8;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = i0 + 1;

     label1:
        if i5 > i1 goto label4;

        i6 = i5;

     label2:
        if i6 <= i0 goto label3;

        $i2 = i6 - 1;

        $i3 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>($i2, i6);

        if $i3 <= 0 goto label3;

        $i4 = i6 - 1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>($i4, i6);

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label2;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    public final void binarySort(int, int)
    {
        org.apache.lucene.util.SorterTemplate r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, $i11;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = i0 + 1;

     label1:
        if i5 > i1 goto label8;

        i6 = i0;

        i7 = i5 - 1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void setPivot(int)>(i5);

     label2:
        if i6 > i7 goto label5;

        $i3 = i6 + i7;

        i8 = $i3 >>> 1;

        $i4 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int comparePivot(int)>(i8);

        if $i4 >= 0 goto label3;

        i7 = i8 - 1;

        goto label4;

     label3:
        i6 = i8 + 1;

     label4:
        goto label2;

     label5:
        i9 = i5;

     label6:
        if i9 <= i6 goto label7;

        $i2 = i9 - 1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>($i2, i9);

        $i11 = (int) -1;

        i9 = i9 + $i11;

        goto label6;

     label7:
        i5 = i5 + 1;

        goto label1;

     label8:
        return;
    }

    public final void quickSort(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.lucene.util.SorterTemplate r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 > i1 goto label1;

        return;

     label1:
        $i2 = i0 - i1;

        $i3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2);

        $i4 = 32 - $i3;

        $i5 = $i4 << 1;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int,int)>(i1, i0, $i5);

        return;
    }

    private void quickSort(int, int, int)
    {
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i14, $i16, $i18, $i20;
        org.apache.lucene.util.SorterTemplate r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i10 := @parameter2: int;

        i2 = i0 - i1;

        if i2 > 7 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void insertionSort(int,int)>(i1, i0);

        return;

     label1:
        $i16 = (int) -1;

        i11 = i10 + $i16;

        if i11 != 0 goto label2;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(i1, i0);

        return;

     label2:
        $i3 = i2 >>> 1;

        i4 = i1 + $i3;

        $i5 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>(i1, i4);

        if $i5 <= 0 goto label3;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>(i1, i4);

     label3:
        $i6 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>(i4, i0);

        if $i6 <= 0 goto label4;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>(i4, i0);

        $i9 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>(i1, i4);

        if $i9 <= 0 goto label4;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>(i1, i4);

     label4:
        i12 = i1 + 1;

        i13 = i0 - 1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void setPivot(int)>(i4);

     label5:
        $i14 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int comparePivot(int)>(i13);

        if $i14 >= 0 goto label6;

        $i18 = (int) -1;

        i13 = i13 + $i18;

        goto label5;

     label6:
        if i12 >= i13 goto label7;

        $i8 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int comparePivot(int)>(i12);

        if $i8 < 0 goto label7;

        i12 = i12 + 1;

        goto label6;

     label7:
        if i12 >= i13 goto label8;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>(i12, i13);

        $i20 = (int) -1;

        i13 = i13 + $i20;

        goto label5;

     label8:
        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int,int)>(i1, i12, i11);

        $i7 = i12 + 1;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int,int)>($i7, i0, i11);

        return;
    }

    public final void timSort(int, int)
    {
        int i0, i1, $i2;
        org.apache.lucene.util.SorterTemplate r1;
        org.apache.lucene.util.SorterTemplate$TimSort $r0;

        r1 := @this: org.apache.lucene.util.SorterTemplate;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $i2 = i0 - i1;

        if $i2 > 64 goto label1;

        virtualinvoke r1.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>(i1, i0);

        return;

     label1:
        $r0 = new org.apache.lucene.util.SorterTemplate$TimSort;

        specialinvoke $r0.<org.apache.lucene.util.SorterTemplate$TimSort: void <init>(org.apache.lucene.util.SorterTemplate,int,int)>(r1, i1, i0);

        virtualinvoke $r0.<org.apache.lucene.util.SorterTemplate$TimSort: void sort()>();

        return;
    }

    public final void mergeSort(int, int)
    {
        org.apache.lucene.util.SorterTemplate r0;
        int i0, i1, i2, $i3, i4, $i5, $i6;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = i0 - i1;

        if i2 > 12 goto label1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void insertionSort(int,int)>(i1, i0);

        return;

     label1:
        $i3 = i2 >>> 1;

        i4 = i1 + $i3;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(i1, i4);

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(i4, i0);

        $i6 = i4 - i1;

        $i5 = i0 - i4;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void runMerge(int,int,int,int,int)>(i1, i4, i0, $i6, $i5);

        return;
    }

    private void runMerge(int, int, int, int, int)
    {
        java.lang.AssertionError $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13, $i15, $i17;
        boolean $z0, $z1;
        org.apache.lucene.util.SorterTemplate r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        i11 := @parameter4: int;

        if i10 == 0 goto label1;

        if i11 != 0 goto label2;

     label1:
        return;

     label2:
        $i1 = i0 - 1;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void setPivot(int)>($i1);

        $i2 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int comparePivot(int)>(i0);

        if $i2 > 0 goto label3;

        return;

     label3:
        $i3 = i9 - 1;

        $i4 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int comparePivot(int)>($i3);

        if $i4 > 0 goto label4;

        $i13 = (int) -1;

        i9 = i9 + $i13;

        $i15 = (int) -1;

        i11 = i11 + $i15;

        goto label3;

     label4:
        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void setPivot(int)>(i0);

     label5:
        $i5 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int comparePivot(int)>(i8);

        if $i5 < 0 goto label6;

        i8 = i8 + 1;

        $i17 = (int) -1;

        i10 = i10 + $i17;

        goto label5;

     label6:
        $i6 = i10 + i11;

        if $i6 != 2 goto label9;

        $z0 = <org.apache.lucene.util.SorterTemplate: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        if i10 == i11 goto label7;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label7:
        $z1 = <org.apache.lucene.util.SorterTemplate: boolean $assertionsDisabled>;

        if $z1 != 0 goto label8;

        $i7 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>(i8, i0);

        if $i7 > 0 goto label8;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label8:
        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>(i0, i8);

        return;

     label9:
        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void merge(int,int,int,int,int)>(i8, i0, i9, i10, i11);

        return;
    }

    protected void merge(int, int, int, int, int)
    {
        org.apache.lucene.util.SorterTemplate r0;
        int i0, i1, i2, i3, $i4, i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i3 := @parameter0: int;

        i2 := @parameter1: int;

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        if i0 <= i1 goto label1;

        i10 = i0 >>> 1;

        i11 = i3 + i10;

        $i8 = specialinvoke r0.<org.apache.lucene.util.SorterTemplate: int lower(int,int,int)>(i2, i5, i11);

        i12 = $i8;

        i13 = $i8 - i2;

        goto label2;

     label1:
        i13 = i1 >>> 1;

        i12 = i2 + i13;

        $i4 = specialinvoke r0.<org.apache.lucene.util.SorterTemplate: int upper(int,int,int)>(i3, i2, i12);

        i11 = $i4;

        i10 = $i4 - i3;

     label2:
        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void rotate(int,int,int)>(i11, i2, i12);

        $i9 = i11 + i13;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void runMerge(int,int,int,int,int)>(i3, i11, $i9, i10, i13);

        $i7 = i0 - i10;

        $i6 = i1 - i13;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void runMerge(int,int,int,int,int)>($i9, i12, i5, $i7, $i6);

        return;
    }

    private void rotate(int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, $i16, $i18, $i20;
        org.apache.lucene.util.SorterTemplate r0;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i9 = i0;

        i10 = i1 - 1;

     label1:
        if i9 >= i10 goto label2;

        $i7 = i9;

        i9 = i9 + 1;

        $i8 = i10;

        $i16 = (int) -1;

        i10 = i10 + $i16;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>($i7, $i8);

        goto label1;

     label2:
        i11 = i1;

        i12 = i2 - 1;

     label3:
        if i11 >= i12 goto label4;

        $i5 = i11;

        i11 = i11 + 1;

        $i6 = i12;

        $i18 = (int) -1;

        i12 = i12 + $i18;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>($i5, $i6);

        goto label3;

     label4:
        i13 = i0;

        i14 = i2 - 1;

     label5:
        if i13 >= i14 goto label6;

        $i3 = i13;

        i13 = i13 + 1;

        $i4 = i14;

        $i20 = (int) -1;

        i14 = i14 + $i20;

        virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: void swap(int,int)>($i3, $i4);

        goto label5;

     label6:
        return;
    }

    private int lower(int, int, int)
    {
        org.apache.lucene.util.SorterTemplate r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i7 = i0 - i6;

     label1:
        if i7 <= 0 goto label4;

        i1 = i7 >>> 1;

        i2 = i6 + i1;

        $i4 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>(i2, i3);

        if $i4 >= 0 goto label2;

        i6 = i2 + 1;

        $i5 = i7 - i1;

        i7 = $i5 - 1;

        goto label3;

     label2:
        i7 = i1;

     label3:
        goto label1;

     label4:
        return i6;
    }

    private int upper(int, int, int)
    {
        org.apache.lucene.util.SorterTemplate r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;

        r0 := @this: org.apache.lucene.util.SorterTemplate;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        i7 = i0 - i6;

     label1:
        if i7 <= 0 goto label4;

        i1 = i7 >>> 1;

        i2 = i6 + i1;

        $i4 = virtualinvoke r0.<org.apache.lucene.util.SorterTemplate: int compare(int,int)>(i3, i2);

        if $i4 >= 0 goto label2;

        i7 = i1;

        goto label3;

     label2:
        i6 = i2 + 1;

        $i5 = i7 - i1;

        i7 = $i5 - 1;

     label3:
        goto label1;

     label4:
        return i6;
    }

    static void access$000(org.apache.lucene.util.SorterTemplate, int, int, int, int, int)
    {
        int i0, i1, i2, i3, i4;
        org.apache.lucene.util.SorterTemplate r0;

        r0 := @parameter0: org.apache.lucene.util.SorterTemplate;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        specialinvoke r0.<org.apache.lucene.util.SorterTemplate: void runMerge(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        return;
    }

    static void <clinit>()
    {
        java.lang.Error $r3;
        long $l0, $l1, $l2, $l6, $l7, $l8, $l9;
        long[] $r2;
        byte $b3;
        int $i4, $i5, i10, $i11;
        boolean $z0, $z1;
        java.lang.Class $r0;

        <org.apache.lucene.util.SorterTemplate: int QUICKSORT_THRESHOLD> = 7;

        <org.apache.lucene.util.SorterTemplate: int MERGESORT_THRESHOLD> = 12;

        <org.apache.lucene.util.SorterTemplate: int TIMSORT_STACKSIZE> = 40;

        <org.apache.lucene.util.SorterTemplate: int TIMSORT_THRESHOLD> = 64;

        <org.apache.lucene.util.SorterTemplate: int TIMSORT_MINRUN> = 32;

        $r0 = class "Lorg/apache/lucene/util/SorterTemplate;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.SorterTemplate: boolean $assertionsDisabled> = $z1;

        $r2 = newarray (long)[40];

        $r2[0] = 32L;

        $l0 = $r2[0];

        $l1 = $l0 + 1L;

        $r2[1] = $l1;

        i10 = 2;

     label3:
        if i10 >= 40 goto label4;

        $i4 = i10 - 2;

        $l7 = $r2[$i4];

        $i5 = i10 - 1;

        $l6 = $r2[$i5];

        $l8 = $l7 + $l6;

        $l9 = $l8 + 1L;

        $r2[i10] = $l9;

        i10 = i10 + 1;

        goto label3;

     label4:
        $l2 = $r2[39];

        $b3 = $l2 cmp 2147483647L;

        $i11 = (int) $b3;

        if $i11 >= 0 goto label5;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("TIMSORT_STACKSIZE is too small");

        throw $r3;

     label5:
        return;
    }
}
