class org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream extends java.io.InputStream
{
    private int _lastIndex;
    private long _pos;
    private final long _size;
    private final java.io.InputStream _stream;
    private byte[] _chunk;
    private javax.crypto.Cipher _cipher;
    final org.apache.poi.poifs.crypt.agile.AgileDecryptor this$0;

    public void <init>(org.apache.poi.poifs.crypt.agile.AgileDecryptor, org.apache.poi.poifs.filesystem.DocumentInputStream, long) throws java.security.GeneralSecurityException
    {
        byte[] $r8;
        org.apache.poi.poifs.crypt.ChainingMode $r7;
        long l0;
        javax.crypto.Cipher $r9;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor r1;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        org.apache.poi.poifs.crypt.EncryptionHeader $r3;
        javax.crypto.SecretKey $r5;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r6;
        org.apache.poi.poifs.filesystem.DocumentInputStream r4;
        org.apache.poi.poifs.crypt.EncryptionInfo $r2;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        r1 := @parameter0: org.apache.poi.poifs.crypt.agile.AgileDecryptor;

        r4 := @parameter1: org.apache.poi.poifs.filesystem.DocumentInputStream;

        l0 := @parameter2: long;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: org.apache.poi.poifs.crypt.agile.AgileDecryptor this$0> = r1;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int _lastIndex> = 0;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos> = 0L;

        $r2 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo access$000(org.apache.poi.poifs.crypt.agile.AgileDecryptor)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionHeader getHeader()>();

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _size> = l0;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: java.io.InputStream _stream> = r4;

        $r5 = virtualinvoke r1.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: javax.crypto.SecretKey getSecretKey()>();

        $r6 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.EncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r7 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.EncryptionHeader: org.apache.poi.poifs.crypt.ChainingMode getChainingMode()>();

        $r8 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.EncryptionHeader: byte[] getKeySalt()>();

        $r9 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: javax.crypto.Cipher getCipher(javax.crypto.SecretKey,org.apache.poi.poifs.crypt.CipherAlgorithm,org.apache.poi.poifs.crypt.ChainingMode,byte[],int)>($r5, $r6, $r7, $r8, 2);

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: javax.crypto.Cipher _cipher> = $r9;

        return;
    }

    public int read() throws java.io.IOException
    {
        byte[] r0;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r1;
        byte $b1;
        int $i0, $i2, $i4;

        r1 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        r0 = newarray (byte)[1];

        $i0 = virtualinvoke r1.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int read(byte[])>(r0);

        if $i0 != 1 goto label1;

        $b1 = r0[0];

        $i2 = (int) $b1;

        return $i2;

     label1:
        $i4 = (int) -1;

        return $i4;
    }

    public int read(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        int $i0, $i1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] $r1, r2, $r3, $r4;
        long $l1, $l2, $l3, $l7, $l8, $l10, $l11, $l12, $l13, $l14;
        java.security.GeneralSecurityException $r5;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        byte $b15;
        int $i0, $i4, $i5, $i6, $i9, $i16, i17, i18, i19, $i21;
        java.lang.String $r7;
        org.apache.poi.EncryptedDocumentException $r8;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        r2 := @parameter0: byte[];

        i17 := @parameter1: int;

        i18 := @parameter2: int;

        i19 = 0;

        $i0 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int available()>();

        if $i0 > 0 goto label1;

        $i21 = (int) -1;

        return $i21;

     label1:
        if i18 <= 0 goto label8;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: byte[] _chunk>;

        if $r1 != null goto label5;

     label2:
        $r4 = specialinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: byte[] nextChunk()>();

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: byte[] _chunk> = $r4;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r8 = new org.apache.poi.EncryptedDocumentException;

        $r7 = virtualinvoke $r5.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        specialinvoke $r8.<org.apache.poi.EncryptedDocumentException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label5:
        $l1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l2 = $l1 & 4095L;

        $l3 = 4096L - $l2;

        $i16 = (int) $l3;

        $i4 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int available()>();

        if $i4 != 0 goto label6;

        return i19;

     label6:
        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i16, i18);

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        $r3 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: byte[] _chunk>;

        $l7 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l8 = $l7 & 4095L;

        $i9 = (int) $l8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i9, r2, i17, $i6);

        i17 = i17 + $i6;

        i18 = i18 - $i6;

        $l11 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l10 = (long) $i6;

        $l12 = $l11 + $l10;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos> = $l12;

        $l13 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l14 = $l13 & 4095L;

        $b15 = $l14 cmp 0L;

        if $b15 != 0 goto label7;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: byte[] _chunk> = null;

     label7:
        i19 = i19 + $i6;

        goto label1;

     label8:
        return i19;

        catch java.security.GeneralSecurityException from label2 to label3 with label4;
    }

    public long skip(long) throws java.io.IOException
    {
        long l0, l2, $l3, $l4, $l5, $l6, $l7, $l8, $l10, $l11;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        byte $b9;
        int $i1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        l2 := @parameter0: long;

        l0 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $i1 = virtualinvoke r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int available()>();

        $l3 = (long) $i1;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>($l3, l2);

        $l5 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l6 = $l5 + $l4;

        $l7 = $l6 ^ l0;

        $l8 = $l7 & -4096L;

        $b9 = $l8 cmp 0L;

        if $b9 == 0 goto label1;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: byte[] _chunk> = null;

     label1:
        $l10 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l11 = $l10 + $l4;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos> = $l11;

        return $l4;
    }

    public int available() throws java.io.IOException
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        int $i3;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        $l1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _size>;

        $l0 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l2 = $l1 - $l0;

        $i3 = (int) $l2;

        return $i3;
    }

    public void close() throws java.io.IOException
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        $r1 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: java.io.InputStream _stream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public boolean markSupported()
    {
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        return 0;
    }

    private byte[] nextChunk() throws java.security.GeneralSecurityException, java.io.IOException
    {
        byte[] r1, $r6, $r8, $r18, $r20, $r24;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream r0;
        java.security.spec.AlgorithmParameterSpec r25;
        org.apache.poi.poifs.crypt.EncryptionInfo $r3;
        org.apache.poi.poifs.crypt.EncryptionHeader $r4;
        javax.crypto.SecretKey $r14, $r23;
        long $l0, $l1, $l11;
        javax.crypto.Cipher $r13, $r17;
        javax.crypto.spec.IvParameterSpec $r11;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13;
        org.apache.poi.poifs.crypt.HashAlgorithm $r5;
        javax.crypto.spec.RC2ParameterSpec $r21;
        org.apache.poi.poifs.crypt.agile.AgileDecryptor $r2, $r7, $r12, $r22;
        org.apache.poi.poifs.crypt.CipherAlgorithm $r9, $r10;
        java.io.InputStream $r15, $r16, $r19;

        r0 := @this: org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream;

        $l0 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: long _pos>;

        $l1 = $l0 >> 12;

        i2 = (int) $l1;

        r1 = newarray (byte)[4];

        staticinvoke <org.apache.poi.util.LittleEndian: void putInt(byte[],int,int)>(r1, 0, i2);

        $r2 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: org.apache.poi.poifs.crypt.agile.AgileDecryptor this$0>;

        $r3 = staticinvoke <org.apache.poi.poifs.crypt.agile.AgileDecryptor: org.apache.poi.poifs.crypt.EncryptionInfo access$100(org.apache.poi.poifs.crypt.agile.AgileDecryptor)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.poi.poifs.crypt.EncryptionInfo: org.apache.poi.poifs.crypt.EncryptionHeader getHeader()>();

        $r5 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.EncryptionHeader: org.apache.poi.poifs.crypt.HashAlgorithm getHashAlgorithmEx()>();

        $r6 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.EncryptionHeader: byte[] getKeySalt()>();

        $r7 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: org.apache.poi.poifs.crypt.agile.AgileDecryptor this$0>;

        $i3 = virtualinvoke $r7.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: int getBlockSizeInBytes()>();

        $r8 = staticinvoke <org.apache.poi.poifs.crypt.CryptoFunctions: byte[] generateIv(org.apache.poi.poifs.crypt.HashAlgorithm,byte[],byte[],int)>($r5, $r6, r1, $i3);

        $r9 = virtualinvoke $r4.<org.apache.poi.poifs.crypt.EncryptionHeader: org.apache.poi.poifs.crypt.CipherAlgorithm getCipherAlgorithm()>();

        $r10 = <org.apache.poi.poifs.crypt.CipherAlgorithm: org.apache.poi.poifs.crypt.CipherAlgorithm rc2>;

        if $r9 != $r10 goto label1;

        $r21 = new javax.crypto.spec.RC2ParameterSpec;

        $r22 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: org.apache.poi.poifs.crypt.agile.AgileDecryptor this$0>;

        $r23 = virtualinvoke $r22.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: javax.crypto.SecretKey getSecretKey()>();

        $r24 = interfaceinvoke $r23.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $i12 = lengthof $r24;

        $i13 = $i12 * 8;

        specialinvoke $r21.<javax.crypto.spec.RC2ParameterSpec: void <init>(int,byte[])>($i13, $r8);

        r25 = $r21;

        goto label2;

     label1:
        $r11 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r8);

        r25 = $r11;

     label2:
        $r13 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: javax.crypto.Cipher _cipher>;

        $r12 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: org.apache.poi.poifs.crypt.agile.AgileDecryptor this$0>;

        $r14 = virtualinvoke $r12.<org.apache.poi.poifs.crypt.agile.AgileDecryptor: javax.crypto.SecretKey getSecretKey()>();

        virtualinvoke $r13.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r14, r25);

        $i4 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int _lastIndex>;

        if $i4 == i2 goto label3;

        $r19 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: java.io.InputStream _stream>;

        $i8 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int _lastIndex>;

        $i9 = i2 - $i8;

        $i10 = $i9 << 12;

        $l11 = (long) $i10;

        virtualinvoke $r19.<java.io.InputStream: long skip(long)>($l11);

     label3:
        $r15 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: java.io.InputStream _stream>;

        $i5 = virtualinvoke $r15.<java.io.InputStream: int available()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, 4096);

        $r20 = newarray (byte)[$i6];

        $r16 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: java.io.InputStream _stream>;

        virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r20);

        $i7 = i2 + 1;

        r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: int _lastIndex> = $i7;

        $r17 = r0.<org.apache.poi.poifs.crypt.agile.AgileDecryptor$ChunkedCipherInputStream: javax.crypto.Cipher _cipher>;

        $r18 = virtualinvoke $r17.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r20);

        return $r18;
    }
}
