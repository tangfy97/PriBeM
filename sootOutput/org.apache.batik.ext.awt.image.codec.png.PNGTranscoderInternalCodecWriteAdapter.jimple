public class org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter extends java.lang.Object implements org.apache.batik.transcoder.image.PNGTranscoder$WriteAdapter
{

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void writeImage(org.apache.batik.transcoder.image.PNGTranscoder, java.awt.image.BufferedImage, org.apache.batik.transcoder.TranscoderOutput) throws org.apache.batik.transcoder.TranscoderException
    {
        java.lang.Float $r10;
        java.lang.Integer $r16;
        byte $b0;
        int[] $r12;
        org.apache.batik.transcoder.TranscodingHints$Key $r2, $r3, $r8, $r14;
        boolean $z0, $z1, $z2;
        java.awt.image.BufferedImage r20;
        org.apache.batik.transcoder.TranscodingHints $r1;
        org.apache.batik.bridge.UserAgent $r4;
        float $f0, $f1, $f2;
        org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter r19;
        float[] $r11;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r13;
        int $i1, $i2, $i3, $i4;
        double $d0, $d1;
        java.io.OutputStream $r6;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam $r21;
        org.apache.batik.transcoder.TranscoderOutput r5;
        java.io.IOException $r17;
        org.apache.batik.transcoder.image.PNGTranscoder r0;
        org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder $r22;
        org.apache.batik.transcoder.TranscoderException $r23;
        java.lang.Object $r9, $r15;

        r19 := @this: org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter;

        r0 := @parameter0: org.apache.batik.transcoder.image.PNGTranscoder;

        r20 := @parameter1: java.awt.image.BufferedImage;

        r5 := @parameter2: org.apache.batik.transcoder.TranscoderOutput;

        $r1 = virtualinvoke r0.<org.apache.batik.transcoder.TranscoderSupport: org.apache.batik.transcoder.TranscodingHints getTranscodingHints()>();

        $r2 = <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INDEXED>;

        $z0 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $r14 = <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_INDEXED>;

        $r15 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (java.lang.Integer) $r15;

        $i2 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        if $i2 == 1 goto label01;

        if $i2 == 2 goto label01;

        if $i2 == 4 goto label01;

        if $i2 != 8 goto label02;

     label01:
        $i3 = 1 << $i2;

        r20 = staticinvoke <org.apache.batik.ext.awt.image.rendered.IndexImage: java.awt.image.BufferedImage getIndexedImage(java.awt.image.BufferedImage,int)>(r20, $i3);

     label02:
        $r21 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam getDefaultEncodeParam(java.awt.image.RenderedImage)>(r20);

        $z2 = $r21 instanceof org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        if $z2 == 0 goto label03;

        $r13 = (org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB) $r21;

        $r12 = newarray (int)[3];

        $r12[0] = 255;

        $r12[1] = 255;

        $r12[2] = 255;

        virtualinvoke $r13.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void setBackgroundRGB(int[])>($r12);

     label03:
        $r3 = <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_GAMMA>;

        $z1 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: boolean containsKey(java.lang.Object)>($r3);

        if $z1 == 0 goto label05;

        $r8 = <org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.transcoder.TranscodingHints$Key KEY_GAMMA>;

        $r9 = virtualinvoke $r1.<org.apache.batik.transcoder.TranscodingHints: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.Float) $r9;

        $f2 = virtualinvoke $r10.<java.lang.Float: float floatValue()>();

        $b0 = $f2 cmpl 0.0F;

        $i4 = (int) $b0;

        if $i4 <= 0 goto label04;

        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setGamma(float)>($f2);

     label04:
        $r11 = <org.apache.batik.transcoder.image.PNGTranscoder: float[] DEFAULT_CHROMA>;

        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setChromaticity(float[])>($r11);

        goto label06;

     label05:
        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setSRGBIntent(int)>(0);

     label06:
        $r4 = virtualinvoke r0.<org.apache.batik.transcoder.image.PNGTranscoder: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $f0 = interfaceinvoke $r4.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        $f1 = 1000.0F / $f0;

        $d0 = (double) $f1;

        $d1 = $d0 + 0.5;

        $i1 = (int) $d1;

        virtualinvoke $r21.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setPhysicalDimension(int,int,int)>($i1, $i1, 1);

     label07:
        $r6 = virtualinvoke r5.<org.apache.batik.transcoder.TranscoderOutput: java.io.OutputStream getOutputStream()>();

        $r22 = new org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder;

        specialinvoke $r22.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void <init>(java.io.OutputStream,org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam)>($r6, $r21);

        virtualinvoke $r22.<org.apache.batik.ext.awt.image.codec.png.PNGImageEncoder: void encode(java.awt.image.RenderedImage)>(r20);

        virtualinvoke $r6.<java.io.OutputStream: void flush()>();

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        $r23 = new org.apache.batik.transcoder.TranscoderException;

        specialinvoke $r23.<org.apache.batik.transcoder.TranscoderException: void <init>(java.lang.Exception)>($r17);

        throw $r23;

     label10:
        return;

        catch java.io.IOException from label07 to label08 with label09;
    }
}
