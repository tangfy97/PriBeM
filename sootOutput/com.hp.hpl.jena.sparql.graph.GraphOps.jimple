public class com.hp.hpl.jena.sparql.graph.GraphOps extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.graph.GraphOps r0;

        r0 := @this: com.hp.hpl.jena.sparql.graph.GraphOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean containsGraph(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: boolean containsGraph(com.hp.hpl.jena.graph.Node)>(r0);

        return $z2;
    }

    public static com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r1;
        com.hp.hpl.jena.graph.Graph $r2, $r3, $r4, $r5;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        return $r5;

     label1:
        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isDefaultGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        return $r4;

     label2:
        $z1 = staticinvoke <com.hp.hpl.jena.sparql.core.Quad: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z1 == 0 goto label3;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.graph.GraphOps: com.hp.hpl.jena.graph.Graph unionGraph(com.hp.hpl.jena.sparql.core.DatasetGraph)>(r1);

        return $r3;

     label3:
        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getGraph(com.hp.hpl.jena.graph.Node)>(r0);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Graph unionGraph(com.hp.hpl.jena.sparql.core.DatasetGraph)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.graph.GraphUnionRead $r3;
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraph r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraph;

        $r1 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraph: java.util.Iterator listGraphNodes()>();

        $r2 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.List toList(java.util.Iterator)>($r1);

        $r3 = new com.hp.hpl.jena.sparql.graph.GraphUnionRead;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.graph.GraphUnionRead: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,java.util.Collection)>(r0, $r2);

        return $r3;
    }

    public static void addAll(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r3);

        goto label1;

     label2:
        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>(r0);

        return;
    }

    public static void addAll(com.hp.hpl.jena.graph.Graph, java.lang.Iterable)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.graph.Graph r0;
        java.lang.Iterable r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        staticinvoke <com.hp.hpl.jena.sparql.graph.GraphOps: void addAll(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r2);

        return;
    }

    public static void deleteAll(com.hp.hpl.jena.graph.Graph, java.util.Iterator)
    {
        java.util.Iterator r0;
        java.lang.Object $r2;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0;
        com.hp.hpl.jena.graph.Triple $r3;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r0 := @parameter1: java.util.Iterator;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: void delete(com.hp.hpl.jena.graph.Triple)>($r3);

        goto label1;

     label2:
        staticinvoke <org.apache.jena.atlas.iterator.Iter: void close(java.util.Iterator)>(r0);

        return;
    }

    public static void deleteAll(com.hp.hpl.jena.graph.Graph, java.lang.Iterable)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.graph.Graph r0;
        java.lang.Iterable r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: java.lang.Iterable;

        $r2 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        staticinvoke <com.hp.hpl.jena.sparql.graph.GraphOps: void deleteAll(com.hp.hpl.jena.graph.Graph,java.util.Iterator)>(r0, $r2);

        return;
    }
}
