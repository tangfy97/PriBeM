class org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall extends java.lang.Object
{
    final java.lang.Class responseType;
    org.waveprotocol.wave.federation.xmpp.PacketCallback callback;
    java.util.concurrent.ScheduledFuture timeout;

    void <init>(java.lang.Class, org.waveprotocol.wave.federation.xmpp.PacketCallback)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall r0;
        java.lang.Class r1;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: java.lang.Class responseType> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: org.waveprotocol.wave.federation.xmpp.PacketCallback callback> = r2;

        return;
    }

    void start(java.util.concurrent.ScheduledFuture)
    {
        org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall r0;
        java.util.concurrent.ScheduledFuture $r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall;

        r2 := @parameter0: java.util.concurrent.ScheduledFuture;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: java.util.concurrent.ScheduledFuture timeout>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean)>($z0);

        r0.<org.waveprotocol.wave.federation.xmpp.XmppManager$OutgoingCall: java.util.concurrent.ScheduledFuture timeout> = r2;

        return;
    }
}
