public class org.apache.jena.riot.writer.RDFJSONWriter extends org.apache.jena.riot.writer.WriterGraphRIOTBase
{

    public void <init>()
    {
        org.apache.jena.riot.writer.RDFJSONWriter r0;

        r0 := @this: org.apache.jena.riot.writer.RDFJSONWriter;

        specialinvoke r0.<org.apache.jena.riot.writer.WriterGraphRIOTBase: void <init>()>();

        return;
    }

    public static void output(java.io.OutputStream, com.hp.hpl.jena.graph.Graph)
    {
        java.io.OutputStream r2;
        org.apache.jena.riot.out.NodeToLabel $r3;
        org.apache.jena.riot.system.Prologue $r0;
        org.apache.jena.riot.writer.SinkEntityOutput $r1;
        com.hp.hpl.jena.graph.Graph r4;

        r2 := @parameter0: java.io.OutputStream;

        r4 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = staticinvoke <org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.Prologue create(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(null, null);

        $r1 = new org.apache.jena.riot.writer.SinkEntityOutput;

        $r3 = staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.out.NodeToLabel createNodeToLabel()>();

        specialinvoke $r1.<org.apache.jena.riot.writer.SinkEntityOutput: void <init>(java.io.OutputStream,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r2, $r0, $r3);

        staticinvoke <org.apache.jena.riot.writer.RDFJSONWriter: void output(org.apache.jena.atlas.lib.Sink,com.hp.hpl.jena.graph.Graph)>($r1, r4);

        return;
    }

    public static void output(java.io.Writer, com.hp.hpl.jena.graph.Graph)
    {
        org.apache.jena.riot.out.NodeToLabel $r3;
        org.apache.jena.riot.system.Prologue $r0;
        java.io.Writer r2;
        org.apache.jena.riot.writer.SinkEntityOutput $r1;
        com.hp.hpl.jena.graph.Graph r4;

        r2 := @parameter0: java.io.Writer;

        r4 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r0 = staticinvoke <org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.Prologue create(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(null, null);

        $r1 = new org.apache.jena.riot.writer.SinkEntityOutput;

        $r3 = staticinvoke <org.apache.jena.riot.system.SyntaxLabels: org.apache.jena.riot.out.NodeToLabel createNodeToLabel()>();

        specialinvoke $r1.<org.apache.jena.riot.writer.SinkEntityOutput: void <init>(java.io.Writer,org.apache.jena.riot.system.Prologue,org.apache.jena.riot.out.NodeToLabel)>(r2, $r0, $r3);

        staticinvoke <org.apache.jena.riot.writer.RDFJSONWriter: void output(org.apache.jena.atlas.lib.Sink,com.hp.hpl.jena.graph.Graph)>($r1, r4);

        return;
    }

    private static void output(org.apache.jena.atlas.lib.Sink, com.hp.hpl.jena.graph.Graph)
    {
        java.lang.Throwable $r20, $r21;
        java.util.HashMap $r4;
        com.hp.hpl.jena.graph.Node $r1, $r2, r7, $r8, $r9, $r14, $r16, $r19;
        java.util.HashSet $r15;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0, $z1, $z2;
        org.apache.jena.atlas.lib.Sink r5;
        java.util.Set $r18;
        com.hp.hpl.jena.graph.Triple r13;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3, $r10;
        org.apache.jena.atlas.lib.Pair $r11;
        java.lang.Object $r6, $r12, $r17;

        r5 := @parameter0: org.apache.jena.atlas.lib.Sink;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = staticinvoke <com.hp.hpl.jena.graph.GraphUtil: com.hp.hpl.jena.util.iterator.ExtendedIterator listSubjects(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r2, $r1);

     label01:
        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

     label02:
        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r6 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Node) $r6;

        $r9 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r8 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r10 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r7, $r9, $r8);

     label03:
        $z1 = interfaceinvoke $r10.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r12 = interfaceinvoke $r10.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.graph.Triple) $r12;

        $r14 = virtualinvoke r13.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z2 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r14);

        if $z2 == 0 goto label04;

        $r17 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r18 = (java.util.Set) $r17;

        $r19 = virtualinvoke r13.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>($r19);

        goto label05;

     label04:
        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        $r16 = virtualinvoke r13.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>($r16);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

     label05:
        goto label03;

     label06:
        if $r10 == null goto label10;

        interfaceinvoke $r10.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        goto label10;

     label07:
        $r21 := @caughtexception;

     label08:
        if $r10 == null goto label09;

        interfaceinvoke $r10.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label09:
        throw $r21;

     label10:
        $r11 = new org.apache.jena.atlas.lib.Pair;

        specialinvoke $r11.<org.apache.jena.atlas.lib.Pair: void <init>(java.lang.Object,java.lang.Object)>(r7, $r4);

        interfaceinvoke r5.<org.apache.jena.atlas.lib.Sink: void send(java.lang.Object)>($r11);

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        goto label02;

     label11:
        if $r3 == null goto label12;

        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label12:
        interfaceinvoke r5.<org.apache.jena.atlas.lib.Sink: void close()>();

        goto label16;

     label13:
        $r20 := @caughtexception;

     label14:
        if $r3 == null goto label15;

        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

     label15:
        interfaceinvoke r5.<org.apache.jena.atlas.lib.Sink: void close()>();

        throw $r20;

     label16:
        return;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public org.apache.jena.riot.Lang getLang()
    {
        org.apache.jena.riot.writer.RDFJSONWriter r1;
        org.apache.jena.riot.Lang $r0;

        r1 := @this: org.apache.jena.riot.writer.RDFJSONWriter;

        $r0 = <org.apache.jena.riot.Lang: org.apache.jena.riot.Lang RDFJSON>;

        return $r0;
    }

    public void write(java.io.Writer, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        org.apache.jena.riot.system.PrefixMap r3;
        java.io.Writer r0;
        org.apache.jena.riot.writer.RDFJSONWriter r2;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.util.Context r5;
        com.hp.hpl.jena.graph.Graph r1;

        r2 := @this: org.apache.jena.riot.writer.RDFJSONWriter;

        r0 := @parameter0: java.io.Writer;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.writer.RDFJSONWriter: void output(java.io.Writer,com.hp.hpl.jena.graph.Graph)>(r0, r1);

        return;
    }

    public void write(java.io.OutputStream, com.hp.hpl.jena.graph.Graph, org.apache.jena.riot.system.PrefixMap, java.lang.String, com.hp.hpl.jena.sparql.util.Context)
    {
        java.io.OutputStream r0;
        org.apache.jena.riot.system.PrefixMap r3;
        org.apache.jena.riot.writer.RDFJSONWriter r2;
        java.lang.String r4;
        com.hp.hpl.jena.sparql.util.Context r5;
        com.hp.hpl.jena.graph.Graph r1;

        r2 := @this: org.apache.jena.riot.writer.RDFJSONWriter;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r3 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: com.hp.hpl.jena.sparql.util.Context;

        staticinvoke <org.apache.jena.riot.writer.RDFJSONWriter: void output(java.io.OutputStream,com.hp.hpl.jena.graph.Graph)>(r0, r1);

        return;
    }
}
