public final class org.codehaus.jackson.map.introspect.AnnotatedClass extends org.codehaus.jackson.map.introspect.Annotated
{
    private static final org.codehaus.jackson.map.introspect.AnnotationMap[] NO_ANNOTATION_MAPS;
    protected final java.lang.Class _class;
    protected final java.util.List _superTypes;
    protected final org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector;
    protected final org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver;
    protected final java.lang.Class _primaryMixIn;
    protected org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations;
    protected org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor;
    protected java.util.List _constructors;
    protected java.util.List _creatorMethods;
    protected org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods;
    protected java.util.List _fields;

    private void <init>(java.lang.Class, java.util.List, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.ClassIntrospector$MixInResolver, org.codehaus.jackson.map.introspect.AnnotationMap)
    {
        org.codehaus.jackson.map.introspect.AnnotationMap r8;
        org.codehaus.jackson.map.AnnotationIntrospector r3;
        java.util.List r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.Class r1, $r6, $r9;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4, $r5, $r7;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.codehaus.jackson.map.AnnotationIntrospector;

        r4 := @parameter3: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        r8 := @parameter4: org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke r0.<org.codehaus.jackson.map.introspect.Annotated: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class> = r1;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _superTypes> = r2;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector> = r3;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver> = r4;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r5 != null goto label1;

        $r9 = null;

        goto label2;

     label1:
        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r9 = interfaceinvoke $r7.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>($r6);

     label2:
        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn> = $r9;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations> = r8;

        return;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedClass withAnnotations(org.codehaus.jackson.map.introspect.AnnotationMap)
    {
        java.util.List $r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r0, r1;
        java.lang.Class $r6;
        org.codehaus.jackson.map.introspect.AnnotationMap r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r3;

        r1 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        $r0 = new org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r6 = r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r5 = r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _superTypes>;

        $r4 = r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r3 = r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void <init>(java.lang.Class,java.util.List,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver,org.codehaus.jackson.map.introspect.AnnotationMap)>($r6, $r5, $r4, $r3, r2);

        return $r0;
    }

    public static org.codehaus.jackson.map.introspect.AnnotatedClass construct(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        java.util.List $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r2;
        java.lang.Class r0;
        org.codehaus.jackson.map.AnnotationIntrospector r3;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class)>(r0, null);

        $r2 = new org.codehaus.jackson.map.introspect.AnnotatedClass;

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: void <init>(java.lang.Class,java.util.List,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver,org.codehaus.jackson.map.introspect.AnnotationMap)>(r0, $r1, r3, r4, null);

        virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveClassAnnotations()>();

        return $r2;
    }

    public static org.codehaus.jackson.map.introspect.AnnotatedClass constructWithoutSuperTypes(java.lang.Class, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.ClassIntrospector$MixInResolver)
    {
        java.util.List $r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r1;
        java.lang.Class r2;
        org.codehaus.jackson.map.AnnotationIntrospector r3;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver r4;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        r4 := @parameter2: org.codehaus.jackson.map.ClassIntrospector$MixInResolver;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r1 = new org.codehaus.jackson.map.introspect.AnnotatedClass;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: void <init>(java.lang.Class,java.util.List,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.ClassIntrospector$MixInResolver,org.codehaus.jackson.map.introspect.AnnotationMap)>(r2, $r0, r3, r4, null);

        virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveClassAnnotations()>();

        return $r1;
    }

    public java.lang.Class getAnnotated()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        return $r1;
    }

    public int getModifiers()
    {
        int $i0;
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.'annotation'.Annotation $r4;
        java.lang.Class r2;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1, $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: java.lang.Class;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotationMap: java.lang.'annotation'.Annotation get(java.lang.Class)>(r2);

        return $r4;
    }

    public java.lang.reflect.Type getGenericType()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        return $r1;
    }

    public java.lang.Class getRawType()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        return $r1;
    }

    protected org.codehaus.jackson.map.introspect.AnnotationMap getAllAnnotations()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        return $r1;
    }

    public org.codehaus.jackson.map.util.Annotations getAnnotations()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        return $r1;
    }

    public boolean hasAnnotations()
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedConstructor getDefaultConstructor()
    {
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        return $r1;
    }

    public java.util.List getConstructors()
    {
        java.util.List $r1, $r2, $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        return $r2;
    }

    public java.util.List getStaticMethods()
    {
        java.util.List $r1, $r2, $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        return $r2;
    }

    public java.lang.Iterable memberMethods()
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        return $r1;
    }

    public int getMemberMethodCount()
    {
        int $i0;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $i0 = virtualinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: int size()>();

        return $i0;
    }

    public org.codehaus.jackson.map.introspect.AnnotatedMethod findMethod(java.lang.String, java.lang.Class[])
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r4;
        java.lang.Class[] r2;
        java.lang.String r1;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.String,java.lang.Class[])>(r1, r2);

        return $r4;
    }

    public int getFieldCount()
    {
        java.util.List $r1, $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        return $i0;
    }

    public java.lang.Iterable fields()
    {
        java.util.List $r1, $r2, $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        return $r2;
    }

    public void resolveClassAnnotations()
    {
        java.lang.'annotation'.Annotation[] $r5, $r11;
        org.codehaus.jackson.map.introspect.AnnotationMap $r1, $r8, $r10, $r14, $r16, $r19;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, i1, i2, i3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r2, $r13, $r15;
        java.util.List $r6;
        java.lang.'annotation'.Annotation r12, r20;
        java.lang.Class $r3, $r4, $r17, $r18, r21;
        java.lang.Object $r9;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations> = $r1;

        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r2 != null goto label01;

        return;

     label01:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        if $r3 == null goto label02;

        $r19 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        $r18 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r17 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class,java.lang.Class)>($r19, $r18, $r17);

     label02:
        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $i0 = lengthof $r5;

        i1 = 0;

     label03:
        if i1 >= $i0 goto label05;

        r20 = $r5[i1];

        $r15 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z2 = virtualinvoke $r15.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r20);

        if $z2 == 0 goto label04;

        $r16 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke $r16.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>(r20);

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _superTypes>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.Class) $r9;

        $r10 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class)>($r10, r21);

        $r11 = virtualinvoke r21.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i2 = lengthof $r11;

        i3 = 0;

     label07:
        if i3 >= i2 goto label09;

        r12 = $r11[i3];

        $r13 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r13.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r12);

        if $z1 == 0 goto label08;

        $r14 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke $r14.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>(r12);

     label08:
        i3 = i3 + 1;

        goto label07;

     label09:
        goto label06;

     label10:
        $r8 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _classAnnotations>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class)>($r8, class "Ljava/lang/Object;");

        return;
    }

    public void resolveCreators(boolean)
    {
        java.lang.reflect.Method[] $r5;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.reflect.Method r42;
        boolean z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r12, $r19;
        org.codehaus.jackson.map.AnnotationIntrospector $r10, $r24, $r29, $r40, $r43;
        java.util.List $r7, $r8, $r9, $r13, $r14, $r17, $r18, $r22, $r23, $r27, $r32, $r34, $r35, $r41;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r21, $r26, $r28, $r30, $r36, $r38;
        java.lang.reflect.Constructor r39;
        java.util.ArrayList $r44, $r45;
        java.lang.reflect.Constructor[] $r2;
        int $i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, $i12, $i14;
        java.lang.Class[] $r16, $r33;
        java.lang.Class $r1, $r3, $r4, $r6, $r15, $r31;
        java.lang.Object $r11, $r25;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors> = null;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i5 = lengthof $r2;

        i6 = 0;

     label01:
        if i6 >= i5 goto label05;

        r39 = $r2[i6];

        $r33 = virtualinvoke r39.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof $r33;

        if $i2 != 0 goto label02;

        $r38 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor,boolean)>(r39, 1);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor> = $r38;

        goto label04;

     label02:
        if z0 == 0 goto label04;

        $r34 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r34 != null goto label03;

        $r44 = new java.util.ArrayList;

        $i3 = lengthof $r2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(10, $i3);

        specialinvoke $r44.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors> = $r44;

     label03:
        $r35 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r36 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor,boolean)>(r39, 0);

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r36);

     label04:
        i6 = i6 + 1;

        goto label01;

     label05:
        $r3 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        if $r3 == null goto label07;

        $r30 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        if $r30 != null goto label06;

        $r32 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r32 == null goto label07;

     label06:
        $r31 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addConstructorMixIns(java.lang.Class)>($r31);

     label07:
        $r40 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r40 == null goto label10;

        $r21 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        if $r21 == null goto label08;

        $r29 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r28 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        $z4 = virtualinvoke $r29.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor)>($r28);

        if $z4 == 0 goto label08;

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor> = null;

     label08:
        $r41 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r41 == null goto label10;

        $r22 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        i7 = interfaceinvoke $r22.<java.util.List: int size()>();

     label09:
        $i12 = (int) -1;

        i7 = i7 + $i12;

        if i7 < 0 goto label10;

        $r24 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r23 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r25 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i7);

        $r26 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r25;

        $z3 = virtualinvoke $r24.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableConstructor(org.codehaus.jackson.map.introspect.AnnotatedConstructor)>($r26);

        if $z3 == 0 goto label09;

        $r27 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        interfaceinvoke $r27.<java.util.List: java.lang.Object remove(int)>(i7);

        goto label09;

     label10:
        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods> = null;

        if z0 == 0 goto label19;

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i8 = lengthof $r5;

        i9 = 0;

     label11:
        if i9 >= i8 goto label16;

        r42 = $r5[i9];

        $i0 = virtualinvoke r42.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z2 != 0 goto label12;

        goto label15;

     label12:
        $r16 = virtualinvoke r42.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof $r16;

        if i1 >= 1 goto label13;

        goto label15;

     label13:
        $r17 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r17 != null goto label14;

        $r45 = new java.util.ArrayList;

        specialinvoke $r45.<java.util.ArrayList: void <init>(int)>(8);

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods> = $r45;

     label14:
        $r18 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r19 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructCreatorMethod(java.lang.reflect.Method)>(r42);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r19);

     label15:
        i9 = i9 + 1;

        goto label11;

     label16:
        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        if $r6 == null goto label17;

        $r14 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r14 == null goto label17;

        $r15 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFactoryMixIns(java.lang.Class)>($r15);

     label17:
        $r43 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r43 == null goto label19;

        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        if $r7 == null goto label19;

        $r8 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        i10 = interfaceinvoke $r8.<java.util.List: int size()>();

     label18:
        $i14 = (int) -1;

        i10 = i10 + $i14;

        if i10 < 0 goto label19;

        $r10 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $r9 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i10);

        $r12 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r11;

        $z1 = virtualinvoke $r10.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isIgnorableMethod(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r12);

        if $z1 == 0 goto label18;

        $r13 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        interfaceinvoke $r13.<java.util.List: java.lang.Object remove(int)>(i10);

        goto label18;

     label19:
        return;
    }

    public void resolveMemberMethods(org.codehaus.jackson.map.introspect.MethodFilter)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.reflect.Method $r15, $r17;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r16, r31;
        java.lang.Exception $r27;
        org.codehaus.jackson.map.AnnotationIntrospector $r30;
        java.util.List $r7;
        org.codehaus.jackson.map.introspect.MethodFilter r3;
        java.lang.String $r13;
        java.util.Iterator $r8, $r10;
        java.lang.Class[] $r14;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap $r1, $r2, $r5, $r18, $r21, $r26;
        java.lang.Class $r4, $r6, $r12, $r20, $r22, r28, $r29;
        java.lang.Object $r11, $r23;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r9, $r19, $r24, $r25;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter0: org.codehaus.jackson.map.introspect.MethodFilter;

        $r1 = new org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        specialinvoke $r1.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void <init>()>();

        r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods> = $r1;

        $r2 = new org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void <init>()>();

        $r6 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r5 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _primaryMixIn>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMemberMethods(java.lang.Class,org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>($r6, r3, $r5, $r4, $r2);

        $r7 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _superTypes>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r23 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.Class) $r23;

        $r24 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r24 != null goto label02;

        $r29 = null;

        goto label03;

     label02:
        $r25 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        $r29 = interfaceinvoke $r25.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>(r28);

     label03:
        $r26 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMemberMethods(java.lang.Class,org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>(r28, r3, $r26, $r29, $r2);

        goto label01;

     label04:
        $r9 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r9 == null goto label05;

        $r19 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        $r20 = interfaceinvoke $r19.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>(class "Ljava/lang/Object;");

        if $r20 == null goto label05;

        $r22 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r21 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMethodMixIns(java.lang.Class,org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>($r22, r3, $r21, $r20, $r2);

     label05:
        $r30 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r30 == null goto label11;

        $z1 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        $r10 = virtualinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r11;

     label07:
        $r12 = class "Ljava/lang/Object;";

        $r13 = virtualinvoke r31.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.String getName()>();

        $r14 = virtualinvoke r31.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class[] getParameterClasses()>();

        $r15 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r13, $r14);

        if $r15 == null goto label08;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>($r15);

        $r17 = virtualinvoke r31.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod,boolean)>($r17, $r16, 0);

        $r18 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethodMap _memberMethods>;

        virtualinvoke $r18.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r16);

     label08:
        goto label10;

     label09:
        $r27 := @caughtexception;

     label10:
        goto label06;

     label11:
        return;

        catch java.lang.Exception from label07 to label08 with label09;
    }

    public void resolveFields()
    {
        java.util.Collection $r5;
        java.util.ArrayList $r3;
        java.util.LinkedHashMap $r0;
        java.util.List $r4, $r6;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;
        int $i0;
        java.lang.Class $r2;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r2 = r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        virtualinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFields(java.util.Map,java.lang.Class)>($r0, $r2);

        $z0 = virtualinvoke $r0.<java.util.LinkedHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields> = $r6;

        goto label2;

     label1:
        $r3 = new java.util.ArrayList;

        $i0 = virtualinvoke $r0.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields> = $r3;

        $r4 = r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _fields>;

        $r5 = virtualinvoke $r0.<java.util.LinkedHashMap: java.util.Collection values()>();

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r5);

     label2:
        return;
    }

    public void resolveMemberMethods(org.codehaus.jackson.map.introspect.MethodFilter, boolean)
    {
        org.codehaus.jackson.map.introspect.MethodFilter r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.MethodFilter;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveMemberMethods(org.codehaus.jackson.map.introspect.MethodFilter)>(r1);

        return;
    }

    public void resolveFields(boolean)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void resolveFields()>();

        return;
    }

    protected void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap, java.lang.Class)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.Class r3, $r5;
        org.codehaus.jackson.map.introspect.AnnotationMap r2;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r1, $r4;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        r3 := @parameter1: java.lang.Class;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r1 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        $r5 = interfaceinvoke $r4.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>(r3);

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap,java.lang.Class,java.lang.Class)>(r2, r3, $r5);

     label1:
        return;
    }

    protected void _addClassMixIns(org.codehaus.jackson.map.introspect.AnnotationMap, java.lang.Class, java.lang.Class)
    {
        java.lang.'annotation'.Annotation[] $r1, $r6;
        org.codehaus.jackson.map.introspect.AnnotationMap r10;
        org.codehaus.jackson.map.introspect.AnnotatedClass r8;
        int i0, i1, i2, i3;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r9, $r11;
        java.util.List $r3;
        java.lang.'annotation'.Annotation r7, r12;
        java.lang.Class r0, r2, r13;
        java.lang.Object $r5;

        r8 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r10 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        r2 := @parameter1: java.lang.Class;

        r0 := @parameter2: java.lang.Class;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r12 = $r1[i1];

        $r11 = r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z2 = virtualinvoke $r11.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r12);

        if $z2 == 0 goto label3;

        virtualinvoke r10.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>(r12);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r3 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class)>(r0, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Class) $r5;

        $r6 = virtualinvoke r13.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i2 = lengthof $r6;

        i3 = 0;

     label6:
        if i3 >= i2 goto label8;

        r7 = $r6[i3];

        $r9 = r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r9.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r7);

        if $z1 == 0 goto label7;

        virtualinvoke r10.<org.codehaus.jackson.map.introspect.AnnotationMap: void addIfNotPresent(java.lang.'annotation'.Annotation)>(r7);

     label7:
        i3 = i3 + 1;

        goto label6;

     label8:
        goto label5;

     label9:
        return;
    }

    protected void _addConstructorMixIns(java.lang.Class)
    {
        java.lang.reflect.Constructor r5, $r16;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r11, $r15, $r17, $r18;
        java.lang.reflect.Constructor[] $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        boolean $z0;
        java.lang.Class[] $r6;
        org.codehaus.jackson.map.introspect.MemberKey $r7, $r8, $r12;
        java.util.List $r1, $r2, $r9, $r13;
        java.lang.Class r3;
        java.lang.Object $r10, $r14;
        org.codehaus.jackson.map.introspect.MemberKey[] r19;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter0: java.lang.Class;

        r19 = null;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        if $r1 != null goto label01;

        $i3 = 0;

        goto label02;

     label01:
        $r2 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

     label02:
        i0 = $i3;

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $i2 = lengthof $r4;

        i4 = 0;

     label03:
        if i4 >= $i2 goto label11;

        r5 = $r4[i4];

        $r6 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r6;

        if $i1 != 0 goto label04;

        $r17 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        if $r17 == null goto label10;

        $r18 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedConstructor _defaultConstructor>;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotatedConstructor,boolean)>(r5, $r18, 0);

        goto label10;

     label04:
        if r19 != null goto label06;

        r19 = newarray (org.codehaus.jackson.map.introspect.MemberKey)[i0];

        i5 = 0;

     label05:
        if i5 >= i0 goto label06;

        $r12 = new org.codehaus.jackson.map.introspect.MemberKey;

        $r13 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i5);

        $r15 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r14;

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: java.lang.reflect.Constructor getAnnotated()>();

        specialinvoke $r12.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Constructor)>($r16);

        r19[i5] = $r12;

        i5 = i5 + 1;

        goto label05;

     label06:
        $r7 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Constructor)>(r5);

        i6 = 0;

     label07:
        if i6 >= i0 goto label10;

        $r8 = r19[i6];

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label08;

        goto label09;

     label08:
        $r9 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _constructors>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i6);

        $r11 = (org.codehaus.jackson.map.introspect.AnnotatedConstructor) $r10;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotatedConstructor,boolean)>(r5, $r11, 1);

        goto label10;

     label09:
        i6 = i6 + 1;

        goto label07;

     label10:
        i4 = i4 + 1;

        goto label03;

     label11:
        return;
    }

    protected void _addFactoryMixIns(java.lang.Class)
    {
        java.lang.reflect.Method[] $r3;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        int $i0, i1, $i2, $i3, i4, i5, i6;
        java.lang.reflect.Method r4, $r15;
        boolean $z0, $z1;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r10, $r14;
        java.lang.Class[] $r5;
        org.codehaus.jackson.map.introspect.MemberKey $r6, $r7, $r11;
        java.util.List $r1, $r8, $r12;
        java.lang.Class r2;
        java.lang.Object $r9, $r13;
        org.codehaus.jackson.map.introspect.MemberKey[] r16;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: java.lang.Class;

        r16 = null;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i1 = lengthof $r3;

        i4 = 0;

     label01:
        if i4 >= i1 goto label10;

        r4 = $r3[i4];

        $i2 = virtualinvoke r4.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z0 != 0 goto label02;

        goto label09;

     label02:
        $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r5;

        if $i3 != 0 goto label03;

        goto label09;

     label03:
        if r16 != null goto label05;

        r16 = newarray (org.codehaus.jackson.map.introspect.MemberKey)[$i0];

        i5 = 0;

     label04:
        if i5 >= $i0 goto label05;

        $r11 = new org.codehaus.jackson.map.introspect.MemberKey;

        $r12 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i5);

        $r14 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r13;

        $r15 = virtualinvoke $r14.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        specialinvoke $r11.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>($r15);

        r16[i5] = $r11;

        i5 = i5 + 1;

        goto label04;

     label05:
        $r6 = new org.codehaus.jackson.map.introspect.MemberKey;

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.MemberKey: void <init>(java.lang.reflect.Method)>(r4);

        i6 = 0;

     label06:
        if i6 >= $i0 goto label09;

        $r7 = r16[i6];

        $z1 = virtualinvoke $r6.<org.codehaus.jackson.map.introspect.MemberKey: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label07;

        goto label08;

     label07:
        $r8 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.util.List _creatorMethods>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i6);

        $r10 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r9;

        virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod,boolean)>(r4, $r10, 1);

        goto label09;

     label08:
        i6 = i6 + 1;

        goto label06;

     label09:
        i4 = i4 + 1;

        goto label01;

     label10:
        return;
    }

    protected void _addMemberMethods(java.lang.Class, org.codehaus.jackson.map.introspect.MethodFilter, org.codehaus.jackson.map.introspect.AnnotatedMethodMap, java.lang.Class, org.codehaus.jackson.map.introspect.AnnotatedMethodMap)
    {
        java.lang.reflect.Method[] $r2;
        org.codehaus.jackson.map.introspect.AnnotatedClass r4;
        int i0, i1;
        java.lang.reflect.Method r3, $r14;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r7, $r10, $r11, $r13;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r6, r12;
        org.codehaus.jackson.map.introspect.MethodFilter r5;
        java.lang.Class r0, r1, $r8, $r9;

        r4 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: java.lang.Class;

        r5 := @parameter1: org.codehaus.jackson.map.introspect.MethodFilter;

        r6 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        r0 := @parameter3: java.lang.Class;

        r12 := @parameter4: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        if r0 == null goto label1;

        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMethodMixIns(java.lang.Class,org.codehaus.jackson.map.introspect.MethodFilter,org.codehaus.jackson.map.introspect.AnnotatedMethodMap,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethodMap)>(r1, r5, r6, r0, r12);

     label1:
        if r1 != null goto label2;

        return;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label8;

        r3 = $r2[i1];

        $z0 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableMethod(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.MethodFilter)>(r3, r5);

        if $z0 != 0 goto label4;

        goto label7;

     label4:
        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.reflect.Method)>(r3);

        if $r7 != null goto label6;

        $r11 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>(r3);

        virtualinvoke r6.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r11);

        $r13 = virtualinvoke r12.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod remove(java.lang.reflect.Method)>(r3);

        if $r13 == null goto label5;

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.reflect.Method getAnnotated()>();

        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixOvers(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod,boolean)>($r14, $r11, 0);

     label5:
        goto label7;

     label6:
        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixUnders(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod)>(r3, $r7);

        $r8 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getDeclaringClass()>();

        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label7;

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z2 = virtualinvoke $r9.<java.lang.Class: boolean isInterface()>();

        if $z2 != 0 goto label7;

        $r10 = virtualinvoke $r7.<org.codehaus.jackson.map.introspect.AnnotatedMethod: org.codehaus.jackson.map.introspect.AnnotatedMethod withMethod(java.lang.reflect.Method)>(r3);

        virtualinvoke r6.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r10);

     label7:
        i1 = i1 + 1;

        goto label3;

     label8:
        return;
    }

    protected void _addMethodMixIns(java.lang.Class, org.codehaus.jackson.map.introspect.MethodFilter, org.codehaus.jackson.map.introspect.AnnotatedMethodMap, java.lang.Class, org.codehaus.jackson.map.introspect.AnnotatedMethodMap)
    {
        java.lang.reflect.Method[] $r6;
        java.util.ArrayList $r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r8;
        int i0, i1;
        java.lang.reflect.Method r7;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r11, $r13;
        org.codehaus.jackson.map.introspect.AnnotatedMethodMap r10, r12;
        org.codehaus.jackson.map.introspect.MethodFilter r9;
        java.lang.Class r1, r2, r5;
        java.lang.Object $r4;

        r8 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: java.lang.Class;

        r9 := @parameter1: org.codehaus.jackson.map.introspect.MethodFilter;

        r10 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        r1 := @parameter3: java.lang.Class;

        r12 := @parameter4: org.codehaus.jackson.map.introspect.AnnotatedMethodMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class,java.util.List)>(r1, r2, $r0);

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r6;

        i1 = 0;

     label2:
        if i1 >= i0 goto label6;

        r7 = $r6[i1];

        $z1 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableMethod(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.MethodFilter)>(r7, r9);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $r11 = virtualinvoke r10.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: org.codehaus.jackson.map.introspect.AnnotatedMethod find(java.lang.reflect.Method)>(r7);

        if $r11 == null goto label4;

        virtualinvoke r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addMixUnders(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotatedMethod)>(r7, $r11);

        goto label5;

     label4:
        $r13 = virtualinvoke r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)>(r7);

        virtualinvoke r12.<org.codehaus.jackson.map.introspect.AnnotatedMethodMap: void add(org.codehaus.jackson.map.introspect.AnnotatedMethod)>($r13);

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        goto label1;

     label7:
        return;
    }

    protected void _addFields(java.util.Map, java.lang.Class)
    {
        java.lang.reflect.Field r8;
        java.lang.reflect.Field[] $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;
        java.util.Map r3;
        int i0, i1;
        java.lang.Class r0, $r1, $r7;
        org.codehaus.jackson.map.introspect.AnnotatedField $r10;
        java.lang.String $r9;
        org.codehaus.jackson.map.ClassIntrospector$MixInResolver $r5, $r6;
        boolean $z0;

        r2 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter0: java.util.Map;

        r0 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 == null goto label5;

        virtualinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFields(java.util.Map,java.lang.Class)>(r3, $r1);

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r8 = $r4[i1];

        $z0 = specialinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableField(java.lang.reflect.Field)>(r8);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r9 = virtualinvoke r8.<java.lang.reflect.Field: java.lang.String getName()>();

        $r10 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedField _constructField(java.lang.reflect.Field)>(r8);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        if $r5 == null goto label5;

        $r6 = r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.ClassIntrospector$MixInResolver _mixInResolver>;

        $r7 = interfaceinvoke $r6.<org.codehaus.jackson.map.ClassIntrospector$MixInResolver: java.lang.Class findMixInClassFor(java.lang.Class)>(r0);

        if $r7 == null goto label5;

        virtualinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: void _addFieldMixIns(java.lang.Class,java.lang.Class,java.util.Map)>($r1, $r7, r3);

     label5:
        return;
    }

    protected void _addFieldMixIns(java.lang.Class, java.lang.Class, java.util.Map)
    {
        java.lang.'annotation'.Annotation[] $r13;
        java.util.ArrayList $r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r8;
        java.util.Map r10;
        int i0, i1, i2, i3;
        java.lang.String $r9;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        java.lang.reflect.Field r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r15;
        java.lang.reflect.Field[] $r6;
        java.lang.'annotation'.Annotation r14;
        java.lang.Class r1, r2, r5;
        java.lang.Object $r4, $r11;
        org.codehaus.jackson.map.introspect.AnnotatedField r12;

        r8 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r10 := @parameter2: java.util.Map;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class,java.util.List)>(r1, r2, $r0);

        $r3 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r4;

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof $r6;

        i2 = 0;

     label2:
        if i2 >= i0 goto label7;

        r7 = $r6[i2];

        $z1 = specialinvoke r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: boolean _isIncludableField(java.lang.reflect.Field)>(r7);

        if $z1 != 0 goto label3;

        goto label6;

     label3:
        $r9 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $r11 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r12 = (org.codehaus.jackson.map.introspect.AnnotatedField) $r11;

        if r12 == null goto label6;

        $r13 = virtualinvoke r7.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i1 = lengthof $r13;

        i3 = 0;

     label4:
        if i3 >= i1 goto label6;

        r14 = $r13[i3];

        $r15 = r8.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z2 = virtualinvoke $r15.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r14);

        if $z2 == 0 goto label5;

        virtualinvoke r12.<org.codehaus.jackson.map.introspect.AnnotatedField: void addOrOverride(java.lang.'annotation'.Annotation)>(r14);

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        i2 = i2 + 1;

        goto label2;

     label7:
        goto label1;

     label8:
        return;
    }

    protected org.codehaus.jackson.map.introspect.AnnotatedMethod _constructMethod(java.lang.reflect.Method)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r2, $r6;
        java.lang.'annotation'.Annotation[] $r4;
        org.codehaus.jackson.map.introspect.AnnotationMap $r5, $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        java.lang.reflect.Method r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter0: java.lang.reflect.Method;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r1 != null goto label1;

        $r6 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r7 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r3, $r7, null);

        return $r6;

     label1:
        $r2 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r4);

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r3, $r5, null);

        return $r2;
    }

    protected org.codehaus.jackson.map.introspect.AnnotatedConstructor _constructConstructor(java.lang.reflect.Constructor, boolean)
    {
        java.lang.IllegalStateException $r9;
        org.codehaus.jackson.map.introspect.AnnotationMap $r7, $r23, $r25;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r27, r29;
        boolean z0, $z1, $z2;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19;
        java.lang.'annotation'.Annotation[] $r6, $r22;
        java.lang.reflect.Constructor r2;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor $r5, $r21, $r24;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r13, $r20;
        java.lang.'annotation'.Annotation[][] $r3, r28;
        java.lang.Class[] $r4, $r26;
        java.lang.Class $r8, $r12;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r2 := @parameter0: java.lang.reflect.Constructor;

        z0 := @parameter1: boolean;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r1 != null goto label1;

        $r24 = new org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $r25 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        $r26 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i13 = lengthof $r26;

        $r27 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _emptyAnnotationMaps(int)>($i13);

        specialinvoke $r24.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void <init>(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r2, $r25, $r27);

        return $r24;

     label1:
        if z0 == 0 goto label2;

        $r21 = new org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $r22 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r23 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r22);

        specialinvoke $r21.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void <init>(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r2, $r23, null);

        return $r21;

     label2:
        $r3 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        r28 = $r3;

        $r4 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r4;

        r29 = null;

        $i1 = lengthof $r3;

        if i0 == $i1 goto label6;

        $r8 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isEnum()>();

        if $z1 == 0 goto label3;

        $i8 = lengthof $r3;

        $i9 = $i8 + 2;

        if i0 != $i9 goto label3;

        $i10 = lengthof $r3;

        $i11 = $i10 + 2;

        r28 = newarray (java.lang.'annotation'.Annotation[])[$i11];

        $i12 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r28, 2, $i12);

        r29 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])>(r28);

        goto label4;

     label3:
        $z2 = virtualinvoke $r8.<java.lang.Class: boolean isMemberClass()>();

        if $z2 == 0 goto label4;

        $i3 = lengthof $r3;

        $i4 = $i3 + 1;

        if i0 != $i4 goto label4;

        $i5 = lengthof $r3;

        $i6 = $i5 + 1;

        r28 = newarray (java.lang.'annotation'.Annotation[])[$i6];

        $i7 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r28, 1, $i7);

        r29 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])>(r28);

     label4:
        if r29 != null goto label5;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: constructor for ");

        $r12 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has mismatch: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameters; ");

        $i2 = lengthof r28;

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sets of annotations");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r9;

     label5:
        goto label7;

     label6:
        r29 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])>($r3);

     label7:
        $r5 = new org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        $r6 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r6);

        specialinvoke $r5.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void <init>(java.lang.reflect.Constructor,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r2, $r7, r29);

        return $r5;
    }

    protected org.codehaus.jackson.map.introspect.AnnotatedMethod _constructCreatorMethod(java.lang.reflect.Method)
    {
        java.lang.'annotation'.Annotation[][] $r6;
        org.codehaus.jackson.map.introspect.AnnotatedMethod $r2, $r8;
        java.lang.Class[] $r10;
        java.lang.'annotation'.Annotation[] $r4;
        org.codehaus.jackson.map.introspect.AnnotationMap $r5, $r9;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r7, $r11;
        int $i0;
        java.lang.reflect.Method r3;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter0: java.lang.reflect.Method;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r1 != null goto label1;

        $r8 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r9 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        $r10 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r10;

        $r11 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _emptyAnnotationMaps(int)>($i0);

        specialinvoke $r8.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r3, $r9, $r11);

        return $r8;

     label1:
        $r2 = new org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r4);

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])>($r6);

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void <init>(java.lang.reflect.Method,org.codehaus.jackson.map.introspect.AnnotationMap,org.codehaus.jackson.map.introspect.AnnotationMap[])>(r3, $r5, $r7);

        return $r2;
    }

    protected org.codehaus.jackson.map.introspect.AnnotatedField _constructField(java.lang.reflect.Field)
    {
        java.lang.'annotation'.Annotation[] $r4;
        java.lang.reflect.Field r3;
        org.codehaus.jackson.map.introspect.AnnotationMap $r5, $r7;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;
        org.codehaus.jackson.map.introspect.AnnotatedField $r2, $r6;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r3 := @parameter0: java.lang.reflect.Field;

        $r1 = r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        if $r1 != null goto label1;

        $r6 = new org.codehaus.jackson.map.introspect.AnnotatedField;

        $r7 = specialinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        specialinvoke $r6.<org.codehaus.jackson.map.introspect.AnnotatedField: void <init>(java.lang.reflect.Field,org.codehaus.jackson.map.introspect.AnnotationMap)>(r3, $r7);

        return $r6;

     label1:
        $r2 = new org.codehaus.jackson.map.introspect.AnnotatedField;

        $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r4);

        specialinvoke $r2.<org.codehaus.jackson.map.introspect.AnnotatedField: void <init>(java.lang.reflect.Field,org.codehaus.jackson.map.introspect.AnnotationMap)>(r3, $r5);

        return $r2;
    }

    protected org.codehaus.jackson.map.introspect.AnnotationMap[] _collectRelevantAnnotations(java.lang.'annotation'.Annotation[][])
    {
        java.lang.'annotation'.Annotation[][] r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;
        int i0, i1;
        org.codehaus.jackson.map.introspect.AnnotationMap[] r1;
        java.lang.'annotation'.Annotation[] $r3;
        org.codehaus.jackson.map.introspect.AnnotationMap $r4;

        r2 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r0 := @parameter0: java.lang.'annotation'.Annotation[][];

        i0 = lengthof r0;

        r1 = newarray (org.codehaus.jackson.map.introspect.AnnotationMap)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0[i1];

        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])>($r3);

        r1[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected org.codehaus.jackson.map.introspect.AnnotationMap _collectRelevantAnnotations(java.lang.'annotation'.Annotation[])
    {
        java.lang.'annotation'.Annotation[] r1;
        org.codehaus.jackson.map.introspect.AnnotationMap $r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r3;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: java.lang.'annotation'.Annotation[];

        $r0 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        if r1 == null goto label3;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $r4 = r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r2);

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<org.codehaus.jackson.map.introspect.AnnotationMap: void add(java.lang.'annotation'.Annotation)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    private org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap $r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;

        r1 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r0 = new org.codehaus.jackson.map.introspect.AnnotationMap;

        specialinvoke $r0.<org.codehaus.jackson.map.introspect.AnnotationMap: void <init>()>();

        return $r0;
    }

    private org.codehaus.jackson.map.introspect.AnnotationMap[] _emptyAnnotationMaps(int)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;
        int i0, i1;
        org.codehaus.jackson.map.introspect.AnnotationMap[] r0, $r3;
        org.codehaus.jackson.map.introspect.AnnotationMap $r2;

        r1 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] NO_ANNOTATION_MAPS>;

        return $r3;

     label1:
        r0 = newarray (org.codehaus.jackson.map.introspect.AnnotationMap)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r2 = specialinvoke r1.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap _emptyAnnotationMap()>();

        r0[i1] = $r2;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r0;
    }

    protected boolean _isIncludableMethod(java.lang.reflect.Method, org.codehaus.jackson.map.introspect.MethodFilter)
    {
        org.codehaus.jackson.map.introspect.MethodFilter r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;
        java.lang.reflect.Method r1;
        boolean $z0, $z1, $z2;

        r2 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: org.codehaus.jackson.map.introspect.MethodFilter;

        if r0 == null goto label1;

        $z2 = interfaceinvoke r0.<org.codehaus.jackson.map.introspect.MethodFilter: boolean includeMethod(java.lang.reflect.Method)>(r1);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<java.lang.reflect.Method: boolean isSynthetic()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<java.lang.reflect.Method: boolean isBridge()>();

        if $z1 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    private boolean _isIncludableField(java.lang.reflect.Field)
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r1;
        int $i0;
        java.lang.reflect.Field r0;
        boolean $z0, $z1, $z2;

        r1 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r0 := @parameter0: java.lang.reflect.Field;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isSynthetic()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i0);

        if $z2 == 0 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    protected void _addMixOvers(java.lang.reflect.Constructor, org.codehaus.jackson.map.introspect.AnnotatedConstructor, boolean)
    {
        java.lang.'annotation'.Annotation[] $r1, r8;
        java.lang.reflect.Constructor r0;
        org.codehaus.jackson.map.introspect.AnnotatedConstructor r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r5;
        int i0, i1, i2, i3, i4, i5;
        boolean z0, $z1;
        java.lang.'annotation'.Annotation[][] $r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        java.lang.'annotation'.Annotation r3, r7;

        r5 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r4 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedConstructor;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i1 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r7 = $r1[i2];

        $r6 = r5.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r7);

        if $z1 == 0 goto label2;

        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void addOrOverride(java.lang.'annotation'.Annotation)>(r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label7;

        $r2 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        i3 = 0;

        i4 = lengthof $r2;

     label4:
        if i3 >= i4 goto label7;

        r8 = $r2[i3];

        i0 = lengthof r8;

        i5 = 0;

     label5:
        if i5 >= i0 goto label6;

        r3 = r8[i5];

        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedConstructor: void addOrOverrideParam(int,java.lang.'annotation'.Annotation)>(i3, r3);

        i5 = i5 + 1;

        goto label5;

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        return;
    }

    protected void _addMixOvers(java.lang.reflect.Method, org.codehaus.jackson.map.introspect.AnnotatedMethod, boolean)
    {
        java.lang.'annotation'.Annotation[] $r1, r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass r5;
        int i0, i1, i2, i3, i4, i5;
        java.lang.reflect.Method r0;
        boolean z0, $z1;
        java.lang.'annotation'.Annotation[][] $r2;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r4;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        java.lang.'annotation'.Annotation r3, r7;

        r5 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r0 := @parameter0: java.lang.reflect.Method;

        r4 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        z0 := @parameter2: boolean;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i1 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r7 = $r1[i2];

        $r6 = r5.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z1 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r7);

        if $z1 == 0 goto label2;

        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void addOrOverride(java.lang.'annotation'.Annotation)>(r7);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label7;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>();

        i3 = 0;

        i4 = lengthof $r2;

     label4:
        if i3 >= i4 goto label7;

        r8 = $r2[i3];

        i0 = lengthof r8;

        i5 = 0;

     label5:
        if i5 >= i0 goto label6;

        r3 = r8[i5];

        virtualinvoke r4.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void addOrOverrideParam(int,java.lang.'annotation'.Annotation)>(i3, r3);

        i5 = i5 + 1;

        goto label5;

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        return;
    }

    protected void _addMixUnders(java.lang.reflect.Method, org.codehaus.jackson.map.introspect.AnnotatedMethod)
    {
        org.codehaus.jackson.map.introspect.AnnotatedMethod r5;
        java.lang.'annotation'.Annotation[] $r1;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.introspect.AnnotatedClass r3;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        java.lang.reflect.Method r0;
        boolean $z0;

        r3 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r0 := @parameter0: java.lang.reflect.Method;

        r5 := @parameter1: org.codehaus.jackson.map.introspect.AnnotatedMethod;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $r4 = r3.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.AnnotationIntrospector _annotationIntrospector>;

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: boolean isHandled(java.lang.'annotation'.Annotation)>(r2);

        if $z0 == 0 goto label2;

        virtualinvoke r5.<org.codehaus.jackson.map.introspect.AnnotatedMethod: void addIfNotPresent(java.lang.'annotation'.Annotation)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r2 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[AnnotedClass ");

        $r3 = r2.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class _class>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public volatile java.lang.reflect.AnnotatedElement getAnnotated()
    {
        java.lang.Class $r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: java.lang.Class getAnnotated()>();

        return $r1;
    }

    public volatile org.codehaus.jackson.map.introspect.Annotated withAnnotations(org.codehaus.jackson.map.introspect.AnnotationMap)
    {
        org.codehaus.jackson.map.introspect.AnnotationMap r1;
        org.codehaus.jackson.map.introspect.AnnotatedClass r0, $r2;

        r0 := @this: org.codehaus.jackson.map.introspect.AnnotatedClass;

        r1 := @parameter0: org.codehaus.jackson.map.introspect.AnnotationMap;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotatedClass withAnnotations(org.codehaus.jackson.map.introspect.AnnotationMap)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.introspect.AnnotationMap[] $r0;

        $r0 = newarray (org.codehaus.jackson.map.introspect.AnnotationMap)[0];

        <org.codehaus.jackson.map.introspect.AnnotatedClass: org.codehaus.jackson.map.introspect.AnnotationMap[] NO_ANNOTATION_MAPS> = $r0;

        return;
    }
}
