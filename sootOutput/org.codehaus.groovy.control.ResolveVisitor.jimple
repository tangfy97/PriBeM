public class org.codehaus.groovy.control.ResolveVisitor extends org.codehaus.groovy.ast.ClassCodeExpressionTransformer
{
    private org.codehaus.groovy.ast.ClassNode currentClass;
    public static final java.lang.String[] DEFAULT_IMPORTS;
    private org.codehaus.groovy.control.CompilationUnit compilationUnit;
    private java.util.Map cachedClasses;
    private static final java.lang.Object NO_CLASS;
    private static final java.lang.Object SCRIPT;
    private org.codehaus.groovy.control.SourceUnit source;
    private org.codehaus.groovy.ast.VariableScope currentScope;
    private boolean isTopLevelProperty;
    private boolean inPropertyExpression;
    private boolean inClosure;
    private boolean isSpecialConstructorCall;
    private java.util.Map genericParameterNames;
    static java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression;
    static java.lang.Class class$java$lang$Exception;

    public void <init>(org.codehaus.groovy.control.CompilationUnit)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.control.CompilationUnit r3;
        java.util.HashMap $r1, $r2;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r3 := @parameter0: org.codehaus.groovy.control.CompilationUnit;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses> = $r1;

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean isTopLevelProperty> = 1;

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inPropertyExpression> = 0;

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inClosure> = 0;

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean isSpecialConstructorCall> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames> = $r2;

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit> = r3;

        return;
    }

    public void startResolving(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.control.SourceUnit r1;
        org.codehaus.groovy.ast.ClassNode r2;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 := @parameter1: org.codehaus.groovy.control.SourceUnit;

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.SourceUnit source> = r1;

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r2);

        return;
    }

    protected void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode, boolean)
    {
        org.codehaus.groovy.ast.VariableScope r1, $r3;
        java.util.HashMap $r5;
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.MethodNode r2;
        java.util.Map r4, $r6;
        int $i0, $i1, i2, i3;
        org.codehaus.groovy.ast.ClassNode[] $r9;
        org.codehaus.groovy.ast.GenericsType[] $r7;
        org.codehaus.groovy.ast.expr.Expression $r12, $r13;
        boolean z0;
        org.codehaus.groovy.ast.Parameter r16;
        org.codehaus.groovy.ast.ClassNode $r10, r11, $r14, $r15;
        org.codehaus.groovy.ast.Parameter[] $r8;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.MethodNode;

        z0 := @parameter1: boolean;

        r1 = r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = $r3;

        r4 = r0.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $r5 = new java.util.HashMap;

        $r6 = r0.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        specialinvoke $r5.<java.util.HashMap: void <init>(java.util.Map)>($r6);

        r0.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames> = $r5;

        $r7 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsHeader(org.codehaus.groovy.ast.GenericsType[])>($r7);

        $r8 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r8;

        if i2 >= $i0 goto label2;

        r16 = $r8[i2];

        $r12 = virtualinvoke r16.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.expr.Expression getInitialExpression()>();

        $r13 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r12);

        virtualinvoke r16.<org.codehaus.groovy.ast.Parameter: void setInitialExpression(org.codehaus.groovy.ast.expr.Expression)>($r13);

        $r14 = virtualinvoke r16.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        $r15 = virtualinvoke r16.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r14, $r15);

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)>(r16);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r9 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode[] getExceptions()>();

        i3 = 0;

     label3:
        $i1 = lengthof $r9;

        if i3 >= $i1 goto label4;

        r11 = $r9[i3];

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>(r11, r2);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r10 = virtualinvoke r2.<org.codehaus.groovy.ast.MethodNode: org.codehaus.groovy.ast.ClassNode getReturnType()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r10, r2);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitConstructorOrMethod(org.codehaus.groovy.ast.MethodNode,boolean)>(r2, z0);

        r0.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames> = r4;

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = r1;

        return;
    }

    public void visitField(org.codehaus.groovy.ast.FieldNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r2;
        org.codehaus.groovy.ast.FieldNode r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.FieldNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r1, r0);

        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitField(org.codehaus.groovy.ast.FieldNode)>(r0);

        return;
    }

    public void visitProperty(org.codehaus.groovy.ast.PropertyNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r2;
        org.codehaus.groovy.ast.PropertyNode r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.PropertyNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.PropertyNode: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r1, r0);

        specialinvoke r2.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitProperty(org.codehaus.groovy.ast.PropertyNode)>(r0);

        return;
    }

    private boolean resolveToInner(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r9;
        java.lang.StringBuffer $r4, $r5, $r7, $r11;
        int $i0, $i1, $i3;
        java.lang.String $r1, $r3, $r6, $r8, r10;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.ClassNode r0;

        r9 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        r10 = $r1;

     label2:
        $i0 = virtualinvoke r10.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 != $i3 goto label3;

        goto label5;

     label3:
        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r4 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $i1 = $i0 + 1;

        $r6 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        r10 = $r8;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String setName(java.lang.String)>($r8);

        $z1 = specialinvoke r9.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        goto label2;

     label5:
        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String setName(java.lang.String)>($r1);

        return 0;
    }

    private void resolveOrFail(org.codehaus.groovy.ast.ClassNode, java.lang.String, org.codehaus.groovy.ast.ASTNode)
    {
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.ASTNode r10;
        java.lang.StringBuffer $r2, $r3, $r5, $r6, $r8;
        java.lang.String $r4, r7, $r9;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r7 := @parameter1: java.lang.String;

        r10 := @parameter2: org.codehaus.groovy.ast.ASTNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveToInner(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to resolve class ");

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r9, r10);

        return;
    }

    private void resolveOrFail(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ASTNode, boolean)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.ASTNode r3;
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.GenericsType[] $r2;
        boolean z0, $z1;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r3 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        z0 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>($r2);

        if z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveAliasFromModule(org.codehaus.groovy.ast.ClassNode)>(r1);

        if $z1 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>(r1, r3);

        return;
    }

    private void resolveOrFail(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ASTNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.ASTNode r2;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.ASTNode;

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.ASTNode)>(r1, "", r2);

        return;
    }

    private boolean resolve(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.ClassNode r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>(r1, 1, 1, 1);

        return $z0;
    }

    private boolean resolve(org.codehaus.groovy.ast.ClassNode, boolean, boolean, boolean)
    {
        org.codehaus.groovy.control.ResolveVisitor r1;
        java.util.Map $r4, $r11;
        org.codehaus.groovy.ast.GenericsType[] $r2, $r15;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, z7, $z8, z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.String $r5, $r8, $r9, $r12;
        org.codehaus.groovy.ast.ClassNode r0, $r3, $r7, $r10, $r14, $r16, $r17;
        org.codehaus.groovy.ast.GenericsType r18;
        java.lang.Object $r6, $r13;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z4 := @parameter1: boolean;

        z7 := @parameter2: boolean;

        z9 := @parameter3: boolean;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z0 != 0 goto label01;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isPrimaryClassNode()>();

        if $z1 == 0 goto label02;

     label01:
        return 1;

     label02:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>($r2);

        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isArray()>();

        if $z2 == 0 goto label04;

        $r16 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getComponentType()>();

        $z14 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r16, z4, z7, z9);

        if $z14 == 0 goto label03;

        $r17 = virtualinvoke $r16.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r17);

     label03:
        return $z14;

     label04:
        $r3 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        if $r3 != r0 goto label05;

        return 1;

     label05:
        $r4 = r1.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 == null goto label06;

        $r11 = r1.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $r12 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r18 = (org.codehaus.groovy.ast.GenericsType) $r13;

        $r14 = virtualinvoke r18.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r14);

        $r15 = newarray (org.codehaus.groovy.ast.GenericsType)[1];

        $r15[0] = r18;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>($r15);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setGenericsPlaceHolder(boolean)>(1);

        return 1;

     label06:
        $r7 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: java.lang.String getNameWithoutPackage()>();

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label07;

        $r10 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r10);

        return 1;

     label07:
        $z5 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveFromModule(org.codehaus.groovy.ast.ClassNode,boolean)>(r0, z4);

        if $z5 != 0 goto label08;

        $z6 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveFromCompileUnit(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z6 != 0 goto label08;

        $z8 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveFromDefaultImports(org.codehaus.groovy.ast.ClassNode,boolean)>(r0, z7);

        if $z8 != 0 goto label08;

        $z10 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveFromStaticInnerClasses(org.codehaus.groovy.ast.ClassNode,boolean)>(r0, z9);

        if $z10 != 0 goto label08;

        $z11 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveFromClassCache(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z11 != 0 goto label08;

        $z12 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveToClass(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z12 != 0 goto label08;

        $z13 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveToScript(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z13 == 0 goto label09;

     label08:
        $z15 = 1;

        goto label10;

     label09:
        $z15 = 0;

     label10:
        return $z15;
    }

    private boolean resolveFromClassCache(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r2;
        org.codehaus.groovy.ast.ClassNode r0;
        java.util.Map $r3;
        java.lang.Object $r4, $r5;
        java.lang.Class $r6;
        java.lang.String $r1;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        if $r4 == null goto label1;

        $r5 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS>;

        if $r4 != $r5 goto label2;

     label1:
        return 0;

     label2:
        $r6 = (java.lang.Class) $r4;

        specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void setClass(org.codehaus.groovy.ast.ClassNode,java.lang.Class)>(r0, $r6);

        return 1;
    }

    private long getTimeStamp(java.lang.Class)
    {
        org.codehaus.groovy.control.ResolveVisitor r1;
        java.lang.Class r0;
        long $l0;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: java.lang.Class;

        $l0 = staticinvoke <org.codehaus.groovy.classgen.Verifier: long getTimestamp(java.lang.Class)>(r0);

        return $l0;
    }

    private boolean isSourceNewer(java.net.URL, java.lang.Class)
    {
        java.net.URL r0;
        long $l0, l3;
        org.codehaus.groovy.control.ResolveVisitor r4;
        byte $b1;
        java.net.URLConnection $r2;
        int $i4;
        java.lang.String $r1, $r6, $r7, $r8;
        boolean $z0, $z1;
        char $c2;
        java.io.IOException $r10;
        java.io.File $r11;
        java.lang.Class r5;
        java.io.InputStream $r3;

        r4 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: java.net.URL;

        r5 := @parameter1: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r0.<java.net.URL: java.lang.String getPath()>();

        $c2 = <java.io.File: char separatorChar>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(char,char)>(47, $c2);

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(char,char)>(124, 58);

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r8);

        l3 = virtualinvoke $r11.<java.io.File: long lastModified()>();

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<java.net.URL: java.net.URLConnection openConnection()>();

        l3 = virtualinvoke $r2.<java.net.URLConnection: long getLastModified()>();

        $r3 = virtualinvoke $r2.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke $r3.<java.io.InputStream: void close()>();

     label3:
        $l0 = specialinvoke r4.<org.codehaus.groovy.control.ResolveVisitor: long getTimeStamp(java.lang.Class)>(r5);

        $b1 = l3 cmp $l0;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;

     label6:
        $r10 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label5 with label6;
    }

    private boolean resolveToScript(org.codehaus.groovy.ast.ClassNode)
    {
        java.net.URL r26;
        org.codehaus.groovy.ast.ModuleNode $r10;
        org.codehaus.groovy.control.ResolveVisitor r2;
        java.util.Map $r3, $r6, $r19, $r22, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        groovy.lang.GroovyResourceLoader $r13;
        groovy.lang.GroovyClassLoader $r12;
        org.codehaus.groovy.control.CompilationUnit $r11, $r14;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r1, $r20;
        org.codehaus.groovy.control.SourceUnit $r15;
        java.net.MalformedURLException $r25;
        org.codehaus.groovy.ast.ClassNode r0, $r9, $r16;
        java.lang.Object $r4, $r5, $r7, $r8, $r21, $r23;
        org.codehaus.groovy.ast.CompileUnit $r17;
        java.lang.Class $r18;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z0 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass;

        if $z0 == 0 goto label01;

        $r24 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r23 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r23);

     label01:
        $r3 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS>;

        if $r4 != $r5 goto label02;

        return 0;

     label02:
        $r6 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object SCRIPT>;

        if $r7 != $r8 goto label03;

        $r22 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r21 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r21);

     label03:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        if $z1 == 0 goto label04;

        $z8 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        return $z8;

     label04:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(36);

        $i3 = (int) -1;

        if $i0 == $i3 goto label05;

        $z7 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        return $z7;

     label05:
        $r9 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        $z2 = virtualinvoke $r10.<org.codehaus.groovy.ast.ModuleNode: boolean hasPackageName()>();

        if $z2 == 0 goto label06;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        $i5 = (int) -1;

        if $i1 != $i5 goto label06;

        $z6 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        return $z6;

     label06:
        $r11 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit>;

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.control.CompilationUnit: groovy.lang.GroovyClassLoader getClassLoader()>();

        r26 = null;

     label07:
        $r13 = virtualinvoke $r12.<groovy.lang.GroovyClassLoader: groovy.lang.GroovyResourceLoader getResourceLoader()>();

        r26 = interfaceinvoke $r13.<groovy.lang.GroovyResourceLoader: java.net.URL loadGroovySource(java.lang.String)>($r1);

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

     label10:
        if r26 == null goto label13;

        $z4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        if $z4 == 0 goto label12;

        $r18 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.Class getTypeClass()>();

        $z5 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean isSourceNewer(java.net.URL,java.lang.Class)>(r26, $r18);

        if $z5 != 0 goto label11;

        return 1;

     label11:
        $r19 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r20 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r20);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>(null);

     label12:
        $r14 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit>;

        $r15 = virtualinvoke $r14.<org.codehaus.groovy.control.CompilationUnit: org.codehaus.groovy.control.SourceUnit addSource(java.net.URL)>(r26);

        $r16 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r17 = virtualinvoke $r16.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

        virtualinvoke $r17.<org.codehaus.groovy.ast.CompileUnit: void addClassNodeToCompile(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.control.SourceUnit)>(r0, $r15);

        return 1;

     label13:
        $z3 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        return $z3;

        catch java.net.MalformedURLException from label07 to label08 with label09;
    }

    private java.lang.String replaceLastPoint(java.lang.String)
    {
        org.codehaus.groovy.control.ResolveVisitor r7;
        java.lang.StringBuffer $r0, $r2, $r3, $r5;
        int $i0, $i1;
        java.lang.String $r1, $r4, $r6, r8;

        r7 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r8 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r8.<java.lang.String: int lastIndexOf(int)>(46);

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $i1 = $i0 + 1;

        $r4 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private boolean resolveFromStaticInnerClasses(org.codehaus.groovy.ast.ClassNode, boolean)
    {
        org.codehaus.groovy.control.ResolveVisitor r2;
        java.lang.String $r1, $r3, $r5, r8;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        org.codehaus.groovy.ast.ClassNode r0, $r6;
        org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage $r4, r7;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z5 := @parameter1: boolean;

        $z0 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean hasPackageName()>();

        z6 = z5 & $z1;

        if z6 == 0 goto label5;

        $z2 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        if $z2 == 0 goto label3;

        r7 = (org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage) r0;

        $r4 = (org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage) r0;

        r8 = $r4.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: java.lang.String className>;

        $r5 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: java.lang.String replaceLastPoint(java.lang.String)>(r8);

        r7.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: java.lang.String className> = $r5;

        $z4 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>(r7, 0, 1, 1);

        if $z4 == 0 goto label2;

        $r6 = virtualinvoke r7.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r6);

        return 1;

     label2:
        r7.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: java.lang.String className> = r8;

        goto label5;

     label3:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: java.lang.String replaceLastPoint(java.lang.String)>($r1);

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String setName(java.lang.String)>($r3);

        $z3 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>(r0, 0, 1, 1);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String setName(java.lang.String)>($r1);

     label5:
        return 0;
    }

    private boolean resolveFromDefaultImports(org.codehaus.groovy.ast.ClassNode, boolean)
    {
        java.lang.String[] $r1, $r5;
        org.codehaus.groovy.control.ResolveVisitor r9;
        int i0, i1;
        java.lang.String $r2, r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9;
        org.codehaus.groovy.ast.ClassNode r0, $r3, $r4, $r10;
        org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage $r8;

        r9 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z7 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean hasPackageName()>();

        if $z0 != 0 goto label1;

        $z8 = 1;

        goto label2;

     label1:
        $z8 = 0;

     label2:
        $z6 = z7 & $z8;

        $z1 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass;

        if $z1 != 0 goto label3;

        $z9 = 1;

        goto label4;

     label3:
        $z9 = 0;

     label4:
        $z5 = $z6 & $z9;

        if $z5 == 0 goto label9;

        i1 = 0;

        $r1 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.String[] DEFAULT_IMPORTS>;

        i0 = lengthof $r1;

     label5:
        if i1 >= i0 goto label7;

        $r5 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.String[] DEFAULT_IMPORTS>;

        r6 = $r5[i1];

        $r7 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r8 = new org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        specialinvoke $r8.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: void <init>(java.lang.String,java.lang.String)>(r6, $r7);

        $z4 = specialinvoke r9.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r8, 0, 0, 0);

        if $z4 == 0 goto label6;

        $r10 = virtualinvoke $r8.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r10);

        return 1;

     label6:
        i1 = i1 + 1;

        goto label5;

     label7:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("BigInteger");

        if $z2 == 0 goto label8;

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode BigInteger_TYPE>;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r4);

        return 1;

     label8:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("BigDecimal");

        if $z3 == 0 goto label9;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode BigDecimal_TYPE>;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r3);

        return 1;

     label9:
        return 0;
    }

    private boolean resolveFromCompileUnit(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.ClassNode $r1, r3, $r5;
        org.codehaus.groovy.ast.CompileUnit $r2;
        java.lang.String $r4;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r3 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r2 = virtualinvoke $r1.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.CompileUnit getCompileUnit()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<org.codehaus.groovy.ast.CompileUnit: org.codehaus.groovy.ast.ClassNode getClass(java.lang.String)>($r4);

        if $r5 == null goto label3;

        if r3 == $r5 goto label2;

        virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r5);

     label2:
        return 1;

     label3:
        return 0;
    }

    private void setClass(org.codehaus.groovy.ast.ClassNode, java.lang.Class)
    {
        org.codehaus.groovy.control.ResolveVisitor r3;
        org.codehaus.groovy.ast.ClassNode $r1, r2;
        java.lang.Class r0;

        r3 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0 := @parameter1: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>(r0);

        virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r1);

        return;
    }

    private void ambiguousClass(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ClassNode, java.lang.String)
    {
        org.codehaus.groovy.control.ResolveVisitor r4;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;
        java.lang.String $r1, $r3, r7, $r10, $r13, $r16;
        boolean $z0;
        org.codehaus.groovy.ast.ClassNode r0, r2;

        r4 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.ClassNode;

        r7 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("reference to ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is ambiguous, both class ");

        $r10 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r13 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" match");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r16, r0);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>(r2);

     label2:
        return;
    }

    private boolean resolveAliasFromModule(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ModuleNode $r3;
        org.codehaus.groovy.control.ResolveVisitor r1;
        java.lang.StringBuffer $r9, $r10, $r13, $r18, $r19, $r22, $r23;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r4, $r5, $r8, $r11, $r12, $r14, $r17, $r20;
        boolean $z0, $z1;
        org.codehaus.groovy.ast.ClassNode r0, $r2, $r6, $r21;
        org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage $r24;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $z0 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r3 = virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        if $r3 != null goto label2;

        return 0;

     label2:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        i5 = virtualinvoke $r4.<java.lang.String: int length()>();

     label3:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

        $r6 = virtualinvoke $r3.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.ast.ClassNode getImport(java.lang.String)>($r5);

        if $r6 == null goto label5;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 != $i2 goto label4;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r6);

        return 1;

     label4:
        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: java.lang.String getNameWithoutPackage()>();

        $r9 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(36);

        $i3 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i4 = $i3 + 1;

        $r11 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(char,char)>(46, 36);

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r24 = new org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r6.<org.codehaus.groovy.ast.ClassNode: java.lang.String getPackageName()>();

        $r18 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: void <init>(java.lang.String,java.lang.String)>($r20, $r14);

        $z1 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r24, 1, 1, 0);

        if $z1 == 0 goto label5;

        $r21 = virtualinvoke $r24.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r21);

        return 1;

     label5:
        $i0 = virtualinvoke $r5.<java.lang.String: int lastIndexOf(int)>(46);

        i5 = $i0;

        $i7 = (int) -1;

        if $i0 != $i7 goto label6;

        goto label7;

     label6:
        goto label3;

     label7:
        return 0;
    }

    private boolean resolveFromModule(org.codehaus.groovy.ast.ClassNode, boolean)
    {
        org.codehaus.groovy.ast.ModuleNode $r4;
        org.codehaus.groovy.control.ResolveVisitor r2;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12, $z13;
        java.util.List $r5, $r22;
        java.lang.StringBuffer $r17, $r19, $r20;
        java.lang.String $r1, r8, $r12, $r15, $r16, $r18, $r21;
        java.util.Iterator $r6, $r23;
        org.codehaus.groovy.ast.ClassNode r0, $r3, $r10, $r13, r24;
        java.lang.Object $r7, $r14;
        org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage $r9, $r11;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        z2 := @parameter1: boolean;

        $z0 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass;

        if $z0 == 0 goto label01;

        $z10 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveAliasFromModule(org.codehaus.groovy.ast.ClassNode)>(r0);

        return $z10;

     label01:
        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        if $r4 != null goto label02;

        return 0;

     label02:
        z11 = 0;

        $z1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: boolean hasPackageName()>();

        if $z1 != 0 goto label03;

        $z8 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: boolean hasPackageName()>();

        if $z8 == 0 goto label03;

        $z9 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        if $z9 != 0 goto label03;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.lang.String getPackageName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String setName(java.lang.String)>($r21);

        z11 = 1;

     label03:
        $r22 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.List getClasses()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z12 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label07;

        $r14 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (org.codehaus.groovy.ast.ClassNode) $r14;

        $r15 = virtualinvoke r24.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r16 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z7 == 0 goto label06;

        if r24 == r0 goto label05;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>(r24);

     label05:
        return 1;

     label06:
        goto label04;

     label07:
        if z11 == 0 goto label08;

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String setName(java.lang.String)>($r1);

     label08:
        if z2 == 0 goto label13;

        $z3 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean resolveAliasFromModule(org.codehaus.groovy.ast.ClassNode)>(r0);

        if $z3 == 0 goto label09;

        return 1;

     label09:
        $z4 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: boolean hasPackageName()>();

        if $z4 == 0 goto label10;

        $r11 = new org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        $r12 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.lang.String getPackageName()>();

        specialinvoke $r11.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: void <init>(java.lang.String,java.lang.String)>($r12, $r1);

        $z6 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r11, 0, 0, 0);

        if $z6 == 0 goto label10;

        $r13 = virtualinvoke $r11.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r13);

        return 1;

     label10:
        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.List getImportPackages()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z13 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label13;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r9 = new org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage;

        specialinvoke $r9.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: void <init>(java.lang.String,java.lang.String)>(r8, $r1);

        $z5 = specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r9, 0, 0, 1);

        if $z5 == 0 goto label12;

        specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void ambiguousClass(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,java.lang.String)>(r0, $r9, $r1);

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.control.ResolveVisitor$ConstructedClassWithPackage: org.codehaus.groovy.ast.ClassNode redirect()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r10);

        return 1;

     label12:
        goto label11;

     label13:
        return 0;
    }

    private boolean resolveToClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ModuleNode $r8;
        org.codehaus.groovy.control.ResolveVisitor r2;
        java.util.Map $r3, $r12, $r21, $r29;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.GroovyBugError $r31;
        org.codehaus.groovy.control.CompilationFailedException $r22;
        java.lang.ClassLoader $r13;
        groovy.lang.GroovyClassLoader $r10;
        org.codehaus.groovy.control.messages.ExceptionMessage $r32;
        org.codehaus.groovy.control.CompilationUnit $r9, $r23;
        java.lang.StringBuffer $r16, $r17, $r18, $r30;
        int $i0, $i2;
        java.lang.String $r1, $r19;
        org.codehaus.groovy.control.ErrorCollector $r24;
        org.codehaus.groovy.control.SourceUnit $r26;
        org.codehaus.groovy.ast.ClassNode r0, $r7;
        java.lang.Object $r4, $r5, $r6, $r20, $r28;
        java.lang.Class $r11;
        java.lang.ClassNotFoundException $r27;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $z0 = r0 instanceof org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass;

        if $z0 == 0 goto label01;

        $r21 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r20 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r20);

     label01:
        $r3 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS>;

        if $r4 != $r5 goto label02;

        return 0;

     label02:
        $r6 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object SCRIPT>;

        if $r4 != $r6 goto label03;

        $r31 = new org.codehaus.groovy.GroovyBugError;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("name ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" was marked as script, but was not resolved as such");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r31.<org.codehaus.groovy.GroovyBugError: void <init>(java.lang.String)>($r19);

        throw $r31;

     label03:
        if $r4 == null goto label04;

        return 1;

     label04:
        $r7 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        $z1 = virtualinvoke $r8.<org.codehaus.groovy.ast.ModuleNode: boolean hasPackageName()>();

        if $z1 == 0 goto label05;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 != $i2 goto label05;

        return 0;

     label05:
        $r9 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit>;

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.control.CompilationUnit: groovy.lang.GroovyClassLoader getClassLoader()>();

     label06:
        $r11 = virtualinvoke $r10.<groovy.lang.GroovyClassLoader: java.lang.Class loadClass(java.lang.String,boolean,boolean)>($r1, 0, 1);

     label07:
        goto label10;

     label08:
        $r27 := @caughtexception;

        $r29 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        $r28 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object SCRIPT>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r28);

        return 0;

     label09:
        $r22 := @caughtexception;

        $r23 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.CompilationUnit compilationUnit>;

        $r24 = virtualinvoke $r23.<org.codehaus.groovy.control.CompilationUnit: org.codehaus.groovy.control.ErrorCollector getErrorCollector()>();

        $r32 = new org.codehaus.groovy.control.messages.ExceptionMessage;

        $r26 = r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.SourceUnit source>;

        specialinvoke $r32.<org.codehaus.groovy.control.messages.ExceptionMessage: void <init>(java.lang.Exception,boolean,org.codehaus.groovy.control.ProcessingUnit)>($r22, 1, $r26);

        virtualinvoke $r24.<org.codehaus.groovy.control.ErrorCollector: void addErrorAndContinue(org.codehaus.groovy.control.messages.Message)>($r32);

        return 0;

     label10:
        if $r11 != null goto label11;

        return 0;

     label11:
        $r12 = r2.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map cachedClasses>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r11);

        specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void setClass(org.codehaus.groovy.ast.ClassNode,java.lang.Class)>(r0, $r11);

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r13 != $r10 goto label12;

        $z2 = 1;

        goto label13;

     label12:
        $z2 = 0;

     label13:
        return $z2;

        catch java.lang.ClassNotFoundException from label06 to label07 with label08;
        catch org.codehaus.groovy.control.CompilationFailedException from label06 to label07 with label09;
    }

    public org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression $r11;
        org.codehaus.groovy.control.ResolveVisitor r3;
        org.codehaus.groovy.ast.expr.MethodCallExpression $r8;
        org.codehaus.groovy.ast.expr.Expression r0, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression $r6;
        org.codehaus.groovy.ast.expr.VariableExpression $r12;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression $r5;
        org.codehaus.groovy.ast.expr.DeclarationExpression $r10;
        org.codehaus.groovy.ast.expr.ClosureExpression $r7;
        org.codehaus.groovy.ast.expr.BinaryExpression $r9;
        java.lang.Class $r1, $r2, $r14;

        r3 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        if r0 != null goto label01;

        return null;

     label01:
        $z0 = r0 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label02;

        $r12 = (org.codehaus.groovy.ast.expr.VariableExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)>($r12);

        goto label12;

     label02:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r2 != null goto label03;

        $r14 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r14;

        goto label04;

     label03:
        $r14 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label04:
        if $r1 != $r14 goto label05;

        $r11 = (org.codehaus.groovy.ast.expr.PropertyExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)>($r11);

        goto label12;

     label05:
        $z1 = r0 instanceof org.codehaus.groovy.ast.expr.DeclarationExpression;

        if $z1 == 0 goto label06;

        $r10 = (org.codehaus.groovy.ast.expr.DeclarationExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)>($r10);

        goto label12;

     label06:
        $z2 = r0 instanceof org.codehaus.groovy.ast.expr.BinaryExpression;

        if $z2 == 0 goto label07;

        $r9 = (org.codehaus.groovy.ast.expr.BinaryExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)>($r9);

        goto label12;

     label07:
        $z3 = r0 instanceof org.codehaus.groovy.ast.expr.MethodCallExpression;

        if $z3 == 0 goto label08;

        $r8 = (org.codehaus.groovy.ast.expr.MethodCallExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)>($r8);

        goto label12;

     label08:
        $z4 = r0 instanceof org.codehaus.groovy.ast.expr.ClosureExpression;

        if $z4 == 0 goto label09;

        $r7 = (org.codehaus.groovy.ast.expr.ClosureExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)>($r7);

        goto label12;

     label09:
        $z5 = r0 instanceof org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        if $z5 == 0 goto label10;

        $r6 = (org.codehaus.groovy.ast.expr.ConstructorCallExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)>($r6);

        goto label12;

     label10:
        $z6 = r0 instanceof org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        if $z6 == 0 goto label11;

        $r5 = (org.codehaus.groovy.ast.expr.AnnotationConstantExpression) r0;

        r13 = virtualinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transformAnnotationConstantExpression(org.codehaus.groovy.ast.expr.AnnotationConstantExpression)>($r5);

        goto label12;

     label11:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r3.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r4, r0);

        r13 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r3);

     label12:
        if r13 == null goto label13;

        if r13 == r0 goto label13;

        virtualinvoke r13.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r0);

     label13:
        return r13;
    }

    private java.lang.String lookupClassName(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r0, $r8, r21;
        org.codehaus.groovy.control.ResolveVisitor r9;
        java.lang.StringBuffer $r4, $r5, $r6, $r7, $r13, $r14, $r15, $r16;
        int $i0;
        java.lang.String $r3, $r12, r17;
        org.codehaus.groovy.ast.expr.Expression r18;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6;
        org.codehaus.groovy.ast.expr.VariableExpression $r10, $r11, r19;
        java.lang.Class $r1, $r2, $r20;

        r9 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        z4 = 1;

        z6 = 1;

        z5 = 1;

        r17 = "";

        r18 = r0;

     label01:
        if r18 == null goto label15;

        $z0 = r18 instanceof org.codehaus.groovy.ast.expr.VariableExpression;

        if $z0 == 0 goto label06;

        r19 = (org.codehaus.groovy.ast.expr.VariableExpression) r18;

        $r10 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        if r19 == $r10 goto label02;

        $r11 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        if r19 != $r11 goto label03;

     label02:
        return null;

     label03:
        $r12 = virtualinvoke r19.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        if z5 == 0 goto label05;

        $z3 = specialinvoke r9.<org.codehaus.groovy.control.ResolveVisitor: boolean testVanillaNameForClass(java.lang.String)>($r12);

        if $z3 != 0 goto label04;

        return null;

     label04:
        r17 = $r12;

        goto label15;

     label05:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label15;

     label06:
        $r1 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r2 != null goto label07;

        $r20 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r20;

        goto label08;

     label07:
        $r20 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label08:
        if $r1 == $r20 goto label09;

        return null;

     label09:
        r21 = (org.codehaus.groovy.ast.expr.PropertyExpression) r18;

        $r3 = virtualinvoke r21.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        if $r3 == null goto label10;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("class");

        if $z1 == 0 goto label11;

     label10:
        return null;

     label11:
        if z6 == 0 goto label13;

        $z2 = specialinvoke r9.<org.codehaus.groovy.control.ResolveVisitor: boolean testVanillaNameForClass(java.lang.String)>($r3);

        if $z2 != 0 goto label12;

        return null;

     label12:
        z4 = 0;

        z6 = 0;

        z5 = 0;

        r17 = $r3;

        goto label14;

     label13:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r17);

        r17 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

     label14:
        $r8 = (org.codehaus.groovy.ast.expr.PropertyExpression) r18;

        r18 = virtualinvoke $r8.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        goto label01;

     label15:
        $i0 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i0 != 0 goto label16;

        return null;

     label16:
        return r17;
    }

    private org.codehaus.groovy.ast.expr.Expression correctClassClassChain(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.ast.expr.PropertyExpression r1, r5, r10, $r13;
        org.codehaus.groovy.control.ResolveVisitor r14;
        java.lang.String $r6;
        org.codehaus.groovy.ast.expr.Expression r16;
        java.util.LinkedList $r0;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.groovy.ast.expr.ClassExpression r15;
        java.lang.Object $r2, $r7;
        java.lang.Class $r3, $r4, $r8, $r9, $r11, $r12, $r17, $r18, $r19;

        r14 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        r15 = null;

        r16 = r1;

     label01:
        if r16 == null goto label06;

        $z3 = r16 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z3 == 0 goto label02;

        r15 = (org.codehaus.groovy.ast.expr.ClassExpression) r16;

        goto label06;

     label02:
        $r11 = virtualinvoke r16.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r12 != null goto label03;

        $r17 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r17;

        goto label04;

     label03:
        $r17 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label04:
        if $r11 == $r17 goto label05;

        return r1;

     label05:
        virtualinvoke $r0.<java.util.LinkedList: void addFirst(java.lang.Object)>(r16);

        $r13 = (org.codehaus.groovy.ast.expr.PropertyExpression) r16;

        r16 = virtualinvoke $r13.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        goto label01;

     label06:
        if r15 != null goto label07;

        return r1;

     label07:
        $z0 = virtualinvoke $r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 == 0 goto label08;

        return r1;

     label08:
        $r2 = virtualinvoke $r0.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r4 != null goto label09;

        $r18 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r18;

        goto label10;

     label09:
        $r18 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label10:
        if $r3 == $r18 goto label11;

        return r1;

     label11:
        r5 = (org.codehaus.groovy.ast.expr.PropertyExpression) $r2;

        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        if $r6 == null goto label12;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("class");

        if $z1 != 0 goto label13;

     label12:
        return r1;

     label13:
        virtualinvoke r15.<org.codehaus.groovy.ast.expr.ClassExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r5);

        $z2 = virtualinvoke $r0.<java.util.LinkedList: boolean isEmpty()>();

        if $z2 == 0 goto label14;

        return r15;

     label14:
        $r7 = virtualinvoke $r0.<java.util.LinkedList: java.lang.Object removeFirst()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r9 != null goto label15;

        $r19 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r19;

        goto label16;

     label15:
        $r19 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label16:
        if $r8 == $r19 goto label17;

        return r1;

     label17:
        r10 = (org.codehaus.groovy.ast.expr.PropertyExpression) $r7;

        virtualinvoke r10.<org.codehaus.groovy.ast.expr.PropertyExpression: void setObjectExpression(org.codehaus.groovy.ast.expr.Expression)>(r15);

        return r1;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformPropertyExpression(org.codehaus.groovy.ast.expr.PropertyExpression)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.codehaus.groovy.ast.expr.PropertyExpression $r7, r22;
        java.lang.StringBuffer $r10, $r13, $r14, $r16;
        org.codehaus.groovy.ast.expr.Expression $r1, $r4, $r5, $r6, r25;
        java.lang.String $r8, $r9, $r12, $r15, $r17;
        org.codehaus.groovy.ast.ClassNode $r11, $r18, $r20;
        org.codehaus.groovy.ast.expr.ClassExpression $r19, $r21, r24;
        java.lang.Class $r2, $r3, $r23;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r22 := @parameter0: org.codehaus.groovy.ast.expr.PropertyExpression;

        z0 = r0.<org.codehaus.groovy.control.ResolveVisitor: boolean isTopLevelProperty>;

        z1 = r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inPropertyExpression>;

        $r1 = virtualinvoke r22.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inPropertyExpression> = 1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

        if $r3 != null goto label1;

        $r23 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.ast.expr.PropertyExpression");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression> = $r23;

        goto label2;

     label1:
        $r23 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$org$codehaus$groovy$ast$expr$PropertyExpression>;

     label2:
        if $r2 == $r23 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean isTopLevelProperty> = $z7;

        $r4 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r1);

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inPropertyExpression> = 0;

        $r5 = virtualinvoke r22.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getProperty()>();

        $r6 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean isTopLevelProperty> = z0;

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inPropertyExpression> = z1;

        $z2 = virtualinvoke r22.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isSpreadSafe()>();

        $r7 = new org.codehaus.groovy.ast.expr.PropertyExpression;

        $z3 = virtualinvoke r22.<org.codehaus.groovy.ast.expr.PropertyExpression: boolean isSafe()>();

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,boolean)>($r4, $r6, $z3);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: void setSpreadSafe(boolean)>($z2);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r22);

        $r8 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: java.lang.String lookupClassName(org.codehaus.groovy.ast.expr.PropertyExpression)>($r7);

        if $r8 == null goto label5;

        $r20 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r8);

        $z6 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode)>($r20);

        if $z6 == 0 goto label5;

        $r21 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r21.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r20);

        virtualinvoke $r21.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>($r7);

        return $r21;

     label5:
        $z4 = $r4 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z4 == 0 goto label6;

        $r9 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        if $r9 == null goto label6;

        r24 = (org.codehaus.groovy.ast.expr.ClassExpression) $r4;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke r24.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r15 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.PropertyExpression: java.lang.String getPropertyAsString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        $r18 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r17);

        $z5 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r18, 0, 0, 0);

        if $z5 == 0 goto label6;

        $r19 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r19.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r18);

        virtualinvoke $r19.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r24);

        return $r19;

     label6:
        r25 = $r7;

        $z8 = r0.<org.codehaus.groovy.control.ResolveVisitor: boolean isTopLevelProperty>;

        if $z8 == 0 goto label7;

        r25 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression correctClassClassChain(org.codehaus.groovy.ast.expr.PropertyExpression)>($r7);

     label7:
        return r25;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformVariableExpression(org.codehaus.groovy.ast.expr.VariableExpression)
    {
        org.codehaus.groovy.ast.VariableScope r14;
        org.codehaus.groovy.control.ResolveVisitor r4;
        org.codehaus.groovy.ast.Variable $r3;
        java.lang.String $r1, $r2, $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass $r10;
        org.codehaus.groovy.ast.expr.VariableExpression r0, $r11, $r12;
        org.codehaus.groovy.ast.ClassNode $r5, $r7, r13;
        char $c0;
        org.codehaus.groovy.ast.expr.ClassExpression $r15;
        java.lang.Object $r9;

        r4 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.VariableExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("this");

        if $z0 == 0 goto label1;

        $r12 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        return $r12;

     label1:
        $r2 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z1 == 0 goto label2;

        $r11 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression SUPER_EXPRESSION>;

        return $r11;

     label2:
        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.Variable getAccessedVariable()>();

        $z2 = $r3 instanceof org.codehaus.groovy.ast.DynamicVariable;

        if $z2 == 0 goto label9;

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r7 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.String)>($r6);

        r13 = $r7;

        $z3 = virtualinvoke $r7.<org.codehaus.groovy.ast.ClassNode: boolean isResolved()>();

        z7 = $z3;

        if $z3 != 0 goto label4;

        $c0 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        $z6 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c0);

        if $z6 == 0 goto label3;

        $r10 = new org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass;

        specialinvoke $r10.<org.codehaus.groovy.control.ResolveVisitor$LowerCaseClass: void <init>(java.lang.String)>($r6);

        r13 = $r10;

     label3:
        z7 = specialinvoke r4.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode)>(r13);

     label4:
        if z7 == 0 goto label9;

        r14 = r4.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

     label5:
        if r14 == null goto label8;

        $z4 = virtualinvoke r14.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z4 != 0 goto label8;

        $z5 = virtualinvoke r14.<org.codehaus.groovy.ast.VariableScope: boolean isRoot()>();

        if $z5 == 0 goto label6;

        goto label8;

     label6:
        $r8 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: java.lang.String getName()>();

        $r9 = virtualinvoke r14.<org.codehaus.groovy.ast.VariableScope: java.lang.Object removeReferencedClassVariable(java.lang.String)>($r8);

        if $r9 != null goto label7;

        goto label8;

     label7:
        r14 = virtualinvoke r14.<org.codehaus.groovy.ast.VariableScope: org.codehaus.groovy.ast.VariableScope getParent()>();

        goto label5;

     label8:
        $r15 = new org.codehaus.groovy.ast.expr.ClassExpression;

        specialinvoke $r15.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>(r13);

        virtualinvoke $r15.<org.codehaus.groovy.ast.expr.ClassExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r0);

        return $r15;

     label9:
        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r4.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r5, r0);

        return r0;
    }

    private boolean testVanillaNameForClass(java.lang.String)
    {
        org.codehaus.groovy.control.ResolveVisitor r1;
        int $i0;
        char $c1;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c1);

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformBinaryExpression(org.codehaus.groovy.ast.expr.BinaryExpression)
    {
        org.codehaus.groovy.ast.expr.ListExpression r25;
        org.codehaus.groovy.control.ResolveVisitor r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.groovy.syntax.Token $r4;
        java.util.List $r7;
        org.codehaus.groovy.ast.expr.BinaryExpression r1;
        java.lang.StringBuffer $r11, $r12, $r15, $r16, $r20, $r21, $r22;
        int $i0;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3, $r5, $r6, $r19, $r26, $r27;
        java.lang.String $r14, $r17, r24;
        org.codehaus.groovy.ast.ClassNode $r9, $r10, $r13, $r18;
        org.codehaus.groovy.ast.expr.ClassExpression $r8, r23;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BinaryExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        $i0 = virtualinvoke $r4.<org.codehaus.groovy.syntax.Token: int getType()>();

        if $i0 == 1100 goto label1;

        if $i0 != 100 goto label3;

     label1:
        $z0 = $r3 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z0 == 0 goto label3;

        r23 = (org.codehaus.groovy.ast.expr.ClassExpression) $r3;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("you tried to assign a value to the class \'");

        $r13 = virtualinvoke r23.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r14 = virtualinvoke $r13.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        r24 = $r17;

        $r18 = virtualinvoke r23.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $z4 = virtualinvoke $r18.<org.codehaus.groovy.ast.ClassNode: boolean isScript()>();

        if $z4 == 0 goto label2;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(". Do you have a script with this name?");

        r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r19 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>(r24, $r19);

        return r1;

     label3:
        $z1 = $r3 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z1 == 0 goto label4;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $z2 = $r5 instanceof org.codehaus.groovy.ast.expr.ListExpression;

        if $z2 == 0 goto label4;

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        r25 = (org.codehaus.groovy.ast.expr.ListExpression) $r6;

        $r7 = virtualinvoke r25.<org.codehaus.groovy.ast.expr.ListExpression: java.util.List getExpressions()>();

        $z3 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label4;

        $r8 = new org.codehaus.groovy.ast.expr.ClassExpression;

        $r9 = virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.ClassExpression: void <init>(org.codehaus.groovy.ast.ClassNode)>($r10);

        return $r8;

     label4:
        $r26 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $r27 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r26);

        virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: void setLeftExpression(org.codehaus.groovy.ast.expr.Expression)>($r3);

        virtualinvoke r1.<org.codehaus.groovy.ast.expr.BinaryExpression: void setRightExpression(org.codehaus.groovy.ast.expr.Expression)>($r27);

        return r1;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformClosureExpression(org.codehaus.groovy.ast.expr.ClosureExpression)
    {
        org.codehaus.groovy.ast.stmt.Statement $r3;
        org.codehaus.groovy.ast.Parameter $r4;
        org.codehaus.groovy.ast.ClassNode $r5;
        org.codehaus.groovy.ast.expr.ClosureExpression r1;
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.Parameter[] $r2;
        int $i0, i1;
        boolean z0;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ClosureExpression;

        z0 = r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inClosure>;

        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inClosure> = 1;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.Parameter[] getParameters()>();

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        $r4 = $r2[i1];

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.Parameter: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r5, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.ClosureExpression: org.codehaus.groovy.ast.stmt.Statement getCode()>();

        if $r3 == null goto label3;

        virtualinvoke $r3.<org.codehaus.groovy.ast.stmt.Statement: void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)>(r0);

     label3:
        r0.<org.codehaus.groovy.control.ResolveVisitor: boolean inClosure> = z0;

        return r1;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformConstructorCallExpression(org.codehaus.groovy.ast.expr.ConstructorCallExpression)
    {
        org.codehaus.groovy.control.ResolveVisitor r2;
        org.codehaus.groovy.ast.expr.ConstructorCallExpression r0;
        org.codehaus.groovy.ast.ClassNode $r1;
        org.codehaus.groovy.ast.expr.Expression $r3;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ConstructorCallExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        specialinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r1, r0);

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: boolean isSpecialCall()>();

        r2.<org.codehaus.groovy.control.ResolveVisitor: boolean isSpecialConstructorCall> = $z0;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ConstructorCallExpression: org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)>(r2);

        r2.<org.codehaus.groovy.control.ResolveVisitor: boolean isSpecialConstructorCall> = 0;

        return $r3;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformMethodCallExpression(org.codehaus.groovy.ast.expr.MethodCallExpression)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.expr.MethodCallExpression r1, $r8;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.MethodCallExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getArguments()>();

        $r3 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getMethod()>();

        $r5 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r4);

        $r6 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $r7 = virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r6);

        $r8 = new org.codehaus.groovy.ast.expr.MethodCallExpression;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.MethodCallExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r7, $r5, $r3);

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSafe()>();

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSafe(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isImplicitThis()>();

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setImplicitThis(boolean)>($z1);

        $z2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.MethodCallExpression: boolean isSpreadSafe()>();

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSpreadSafe(boolean)>($z2);

        virtualinvoke $r8.<org.codehaus.groovy.ast.expr.MethodCallExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return $r8;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformDeclarationExpression(org.codehaus.groovy.ast.expr.DeclarationExpression)
    {
        org.codehaus.groovy.control.ResolveVisitor r2;
        java.lang.StringBuffer $r10, $r11, $r14;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3, $r4, $r5, $r6;
        java.lang.String $r13, $r15;
        org.codehaus.groovy.ast.expr.VariableExpression $r8;
        org.codehaus.groovy.ast.ClassNode $r12;
        org.codehaus.groovy.syntax.Token $r9;
        org.codehaus.groovy.ast.expr.DeclarationExpression r0, $r7;
        org.codehaus.groovy.ast.expr.ClassExpression r16;

        r2 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getLeftExpression()>();

        $r3 = virtualinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r1);

        if $r3 == $r1 goto label1;

        r16 = (org.codehaus.groovy.ast.expr.ClassExpression) $r3;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("you tried to assign a value to the class ");

        $r12 = virtualinvoke r16.<org.codehaus.groovy.ast.expr.ClassExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r13 = virtualinvoke $r12.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r15, $r1);

        return r0;

     label1:
        $r4 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        $r5 = virtualinvoke r2.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r4);

        $r6 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.ast.expr.Expression getRightExpression()>();

        if $r5 != $r6 goto label2;

        return r0;

     label2:
        $r7 = new org.codehaus.groovy.ast.expr.DeclarationExpression;

        $r8 = (org.codehaus.groovy.ast.expr.VariableExpression) $r3;

        $r9 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.DeclarationExpression: org.codehaus.groovy.syntax.Token getOperation()>();

        specialinvoke $r7.<org.codehaus.groovy.ast.expr.DeclarationExpression: void <init>(org.codehaus.groovy.ast.expr.VariableExpression,org.codehaus.groovy.syntax.Token,org.codehaus.groovy.ast.expr.Expression)>($r8, $r9, $r5);

        virtualinvoke $r7.<org.codehaus.groovy.ast.expr.DeclarationExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r0);

        return $r7;
    }

    protected org.codehaus.groovy.ast.expr.Expression transformAnnotationConstantExpression(org.codehaus.groovy.ast.expr.AnnotationConstantExpression)
    {
        java.util.Map$Entry r9;
        org.codehaus.groovy.ast.AnnotationNode r2;
        java.util.Iterator $r7;
        org.codehaus.groovy.ast.ClassNode $r3;
        java.util.Set $r6;
        org.codehaus.groovy.ast.expr.AnnotationConstantExpression r0;
        org.codehaus.groovy.control.ResolveVisitor r4;
        java.util.Map $r5;
        java.lang.Object $r1, $r8, $r10;
        org.codehaus.groovy.ast.expr.Expression r11, $r12;
        boolean $z0;

        r4 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.AnnotationConstantExpression;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.AnnotationConstantExpression: java.lang.Object getValue()>();

        r2 = (org.codehaus.groovy.ast.AnnotationNode) $r1;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        specialinvoke r4.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r3, ", unable to find class for annotation", r2);

        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r11 = (org.codehaus.groovy.ast.expr.Expression) $r10;

        $r12 = virtualinvoke r4.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>(r11);

        interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r12);

        goto label1;

     label2:
        return r0;
    }

    public void visitAnnotations(org.codehaus.groovy.ast.AnnotatedNode)
    {
        org.codehaus.groovy.ast.AnnotationNode r5;
        org.codehaus.groovy.ast.expr.PropertyExpression r16;
        org.codehaus.groovy.ast.AnnotatedNode r0;
        org.codehaus.groovy.control.ResolveVisitor r7;
        java.util.Map $r1, $r8;
        org.codehaus.groovy.ast.expr.Expression r14, $r15, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Map$Entry r12;
        java.util.Iterator $r3, $r10;
        org.codehaus.groovy.ast.ClassNode $r6;
        java.util.Collection $r2;
        java.util.Set $r9;
        java.lang.Object $r4, $r11, $r13;

        r7 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.AnnotatedNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: java.util.Map getAnnotations()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.AnnotationNode) $r4;

        $z1 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: boolean isBuiltIn()>();

        if $z1 == 0 goto label3;

        goto label2;

     label3:
        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: org.codehaus.groovy.ast.ClassNode getClassNode()>();

        specialinvoke r7.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r6, ",  unable to find class for annotation", r5);

        $r8 = virtualinvoke r5.<org.codehaus.groovy.ast.AnnotationNode: java.util.Map getMembers()>();

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        r14 = (org.codehaus.groovy.ast.expr.Expression) $r13;

        $r15 = virtualinvoke r7.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>(r14);

        interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r15);

        $z3 = $r15 instanceof org.codehaus.groovy.ast.expr.PropertyExpression;

        if $z3 == 0 goto label5;

        r16 = (org.codehaus.groovy.ast.expr.PropertyExpression) $r15;

        $r17 = virtualinvoke r16.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        $z4 = $r17 instanceof org.codehaus.groovy.ast.expr.ClassExpression;

        if $z4 != 0 goto label5;

        $r18 = virtualinvoke r16.<org.codehaus.groovy.ast.expr.PropertyExpression: org.codehaus.groovy.ast.expr.Expression getObjectExpression()>();

        virtualinvoke r7.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>("unable to find class for enum", $r18);

     label5:
        goto label4;

     label6:
        goto label2;

     label7:
        return;
    }

    public void visitClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ModuleNode $r4;
        org.codehaus.groovy.control.ResolveVisitor r0;
        java.util.Map $r10, $r13, $r16;
        org.codehaus.groovy.ast.GenericsType[] $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r11, $r14, $r17;
        java.util.List $r8;
        java.lang.StringBuffer $r20, $r21, $r23, $r26, $r27, $r29, $r32, $r33, $r35, $r39, $r40, $r42;
        org.codehaus.groovy.ast.ClassNode[] $r6;
        int i0, $i1;
        java.lang.String $r22, $r24, $r28, $r30, $r34, $r36, $r41, $r43;
        java.util.Iterator $r9, $r12, $r15, $r18;
        org.codehaus.groovy.ast.ClassNode r1, r2, $r5, $r7, $r38, r45, r46, r47;
        org.codehaus.groovy.ast.ImportNode r44;
        java.lang.Object $r19, $r25, $r31, $r37;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r1 = r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass> = r2;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsHeader(org.codehaus.groovy.ast.GenericsType[])>($r3);

        $r4 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        $z0 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: boolean hasImportsResolved()>();

        if $z0 != 0 goto label13;

        $r8 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.List getImports()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z5 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label03;

        $r37 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r44 = (org.codehaus.groovy.ast.ImportNode) $r37;

        $r38 = virtualinvoke r44.<org.codehaus.groovy.ast.ImportNode: org.codehaus.groovy.ast.ClassNode getType()>();

        $z4 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>($r38, 0, 0, 1);

        if $z4 == 0 goto label02;

        goto label01;

     label02:
        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to resolve class ");

        $r41 = virtualinvoke $r38.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r43, $r38);

        goto label01;

     label03:
        $r10 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportClasses()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label06;

        $r31 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r45 = (org.codehaus.groovy.ast.ClassNode) $r31;

        $z3 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>(r45, 0, 0, 1);

        if $z3 == 0 goto label05;

        goto label04;

     label05:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to resolve class ");

        $r34 = virtualinvoke r45.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r36, r45);

        goto label04;

     label06:
        $r13 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportAliases()>();

        $r14 = interfaceinvoke $r13.<java.util.Map: java.util.Collection values()>();

        $r15 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z7 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label09;

        $r25 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r46 = (org.codehaus.groovy.ast.ClassNode) $r25;

        $z2 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>(r46, 1, 1, 1);

        if $z2 == 0 goto label08;

        goto label07;

     label08:
        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to resolve class ");

        $r28 = virtualinvoke r46.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r30, r46);

        goto label07;

     label09:
        $r16 = virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: java.util.Map getStaticImportClasses()>();

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>();

        $r18 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z8 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label12;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r47 = (org.codehaus.groovy.ast.ClassNode) $r19;

        $z1 = specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode,boolean,boolean,boolean)>(r47, 1, 1, 1);

        if $z1 == 0 goto label11;

        goto label10;

     label11:
        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unable to resolve class ");

        $r22 = virtualinvoke r47.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void addError(java.lang.String,org.codehaus.groovy.ast.ASTNode)>($r24, r47);

        goto label10;

     label12:
        virtualinvoke $r4.<org.codehaus.groovy.ast.ModuleNode: void setImportsResolved(boolean)>(1);

     label13:
        $r5 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode getUnresolvedSuperClass()>();

        if $r5 == null goto label14;

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode,boolean)>($r5, r2, 1);

     label14:
        $r6 = virtualinvoke r2.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode[] getInterfaces()>();

        i0 = 0;

     label15:
        $i1 = lengthof $r6;

        if i0 >= $i1 goto label16;

        $r7 = $r6[i0];

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode,boolean)>($r7, r2, 1);

        i0 = i0 + 1;

        goto label15;

     label16:
        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitClass(org.codehaus.groovy.ast.ClassNode)>(r2);

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass> = r1;

        return;
    }

    public void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)
    {
        org.codehaus.groovy.ast.Parameter $r5;
        org.codehaus.groovy.ast.ClassNode $r2, $r3, $r4, $r7;
        org.codehaus.groovy.ast.stmt.CatchStatement r1;
        org.codehaus.groovy.control.ResolveVisitor r0;
        java.lang.Class $r6, $r8;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.CatchStatement;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.ClassNode getExceptionType()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r2, r1);

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.ClassNode getExceptionType()>();

        $r4 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if $r3 != $r4 goto label3;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.CatchStatement: org.codehaus.groovy.ast.Parameter getVariable()>();

        $r6 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$java$lang$Exception>;

        if $r6 != null goto label1;

        $r8 = staticinvoke <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$(java.lang.String)>("java.lang.Exception");

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$java$lang$Exception> = $r8;

        goto label2;

     label1:
        $r8 = <org.codehaus.groovy.control.ResolveVisitor: java.lang.Class class$java$lang$Exception>;

     label2:
        $r7 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r8);

        virtualinvoke $r5.<org.codehaus.groovy.ast.Parameter: void setType(org.codehaus.groovy.ast.ClassNode)>($r7);

     label3:
        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitCatchStatement(org.codehaus.groovy.ast.stmt.CatchStatement)>(r1);

        return;
    }

    public void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.stmt.ForStatement r1;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r1 := @parameter0: org.codehaus.groovy.ast.stmt.ForStatement;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.stmt.ForStatement: org.codehaus.groovy.ast.ClassNode getVariableType()>();

        specialinvoke r0.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r2, r1);

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitForLoop(org.codehaus.groovy.ast.stmt.ForStatement)>(r1);

        return;
    }

    public void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.ast.VariableScope r1, $r3;
        org.codehaus.groovy.ast.stmt.BlockStatement r2;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r2 := @parameter0: org.codehaus.groovy.ast.stmt.BlockStatement;

        r1 = r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope>;

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.stmt.BlockStatement: org.codehaus.groovy.ast.VariableScope getVariableScope()>();

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = $r3;

        specialinvoke r0.<org.codehaus.groovy.ast.ClassCodeExpressionTransformer: void visitBlockStatement(org.codehaus.groovy.ast.stmt.BlockStatement)>(r2);

        r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.VariableScope currentScope> = r1;

        return;
    }

    protected org.codehaus.groovy.control.SourceUnit getSourceUnit()
    {
        org.codehaus.groovy.control.ResolveVisitor r0;
        org.codehaus.groovy.control.SourceUnit $r1;

        r0 := @this: org.codehaus.groovy.control.ResolveVisitor;

        $r1 = r0.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.control.SourceUnit source>;

        return $r1;
    }

    private void resolveGenericsTypes(org.codehaus.groovy.ast.GenericsType[])
    {
        org.codehaus.groovy.control.ResolveVisitor r1;
        org.codehaus.groovy.ast.ClassNode $r2;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType $r3;
        org.codehaus.groovy.ast.GenericsType[] r0;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.GenericsType[];

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: void setUsingGenerics(boolean)>(1);

        i1 = 0;

     label2:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r3 = r0[i1];

        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsType(org.codehaus.groovy.ast.GenericsType)>($r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void resolveGenericsHeader(org.codehaus.groovy.ast.GenericsType[])
    {
        org.codehaus.groovy.control.ResolveVisitor r1;
        java.util.Map $r9, $r14;
        int $i0, $i1, i2, i3;
        org.codehaus.groovy.ast.ClassNode[] $r7;
        org.codehaus.groovy.ast.GenericsType[] r0;
        java.lang.String $r5;
        boolean $z0, z1;
        org.codehaus.groovy.ast.ClassNode $r2, $r4, $r10, r12;
        org.codehaus.groovy.ast.GenericsType $r3, $r6, $r8, $r11, $r13, $r15;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.GenericsType[];

        if r0 != null goto label01;

        return;

     label01:
        $r2 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: void setUsingGenerics(boolean)>(1);

        i2 = 0;

     label02:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label10;

        $r3 = r0[i2];

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        $r5 = virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r6 = r0[i2];

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        if $r7 == null goto label08;

        z1 = 0;

        i3 = 0;

     label03:
        $i1 = lengthof $r7;

        if i3 >= $i1 goto label07;

        r12 = $r7[i3];

        if z1 != 0 goto label04;

        if r12 != null goto label05;

     label04:
        $z0 = specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: boolean resolve(org.codehaus.groovy.ast.ClassNode)>($r4);

        if $z0 != 0 goto label06;

     label05:
        $r14 = r1.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $r13 = r0[i2];

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r13);

        $r15 = r0[i2];

        virtualinvoke $r15.<org.codehaus.groovy.ast.GenericsType: void setPlaceholder(boolean)>(1);

        virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>(r12);

        z1 = 1;

     label06:
        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>(r12, $r4);

        i3 = i3 + 1;

        goto label03;

     label07:
        goto label09;

     label08:
        $r9 = r1.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $r8 = r0[i2];

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        $r10 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        virtualinvoke $r4.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r10);

        $r11 = r0[i2];

        virtualinvoke $r11.<org.codehaus.groovy.ast.GenericsType: void setPlaceholder(boolean)>(1);

     label09:
        i2 = i2 + 1;

        goto label02;

     label10:
        return;
    }

    private void resolveGenericsType(org.codehaus.groovy.ast.GenericsType)
    {
        org.codehaus.groovy.control.ResolveVisitor r1;
        java.util.Map $r6, $r7;
        org.codehaus.groovy.ast.ClassNode[] $r5;
        int $i0, i1;
        org.codehaus.groovy.ast.GenericsType[] $r10, $r14;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.ast.ClassNode $r2, $r3, $r9, $r11, $r12, r13, $r16;
        org.codehaus.groovy.ast.GenericsType r0, r15;
        java.lang.Object $r8;

        r1 := @this: org.codehaus.groovy.control.ResolveVisitor;

        r0 := @parameter0: org.codehaus.groovy.ast.GenericsType;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: boolean isResolved()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r1.<org.codehaus.groovy.control.ResolveVisitor: org.codehaus.groovy.ast.ClassNode currentClass>;

        virtualinvoke $r2.<org.codehaus.groovy.ast.ClassNode: void setUsingGenerics(boolean)>(1);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode[] getUpperBounds()>();

        $r6 = r1.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z1 != 0 goto label6;

        if $r5 == null goto label4;

        i1 = 0;

     label2:
        $i0 = lengthof $r5;

        if i1 >= $i0 goto label3;

        r13 = $r5[i1];

        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>(r13, r0);

        virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>(r13);

        $r14 = virtualinvoke r13.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>($r14);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label7;

     label4:
        $z2 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: boolean isWildcard()>();

        if $z2 == 0 goto label5;

        $r12 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r12);

        goto label7;

     label5:
        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r3, r0);

        goto label7;

     label6:
        $r7 = r1.<org.codehaus.groovy.control.ResolveVisitor: java.util.Map genericParameterNames>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r15 = (org.codehaus.groovy.ast.GenericsType) $r8;

        $r9 = virtualinvoke r15.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r9);

        virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: void setPlaceholder(boolean)>(1);

     label7:
        $r16 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        if $r16 == null goto label8;

        $r11 = virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: org.codehaus.groovy.ast.ClassNode getLowerBound()>();

        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveOrFail(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ASTNode)>($r11, r0);

     label8:
        $r10 = virtualinvoke $r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.GenericsType[] getGenericsTypes()>();

        specialinvoke r1.<org.codehaus.groovy.control.ResolveVisitor: void resolveGenericsTypes(org.codehaus.groovy.ast.GenericsType[])>($r10);

        virtualinvoke r0.<org.codehaus.groovy.ast.GenericsType: void setResolved(boolean)>(1);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.lang.Object $r1, $r2;

        $r0 = newarray (java.lang.String)[6];

        $r0[0] = "java.lang.";

        $r0[1] = "java.io.";

        $r0[2] = "java.net.";

        $r0[3] = "java.util.";

        $r0[4] = "groovy.lang.";

        $r0[5] = "groovy.util.";

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.String[] DEFAULT_IMPORTS> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object NO_CLASS> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <org.codehaus.groovy.control.ResolveVisitor: java.lang.Object SCRIPT> = $r2;

        return;
    }
}
