public class org.apache.commons.io.output.DeferredFileOutputStream extends org.apache.commons.io.output.ThresholdingOutputStream
{
    private org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream;
    private java.io.OutputStream currentOutputStream;
    private java.io.File outputFile;
    private final java.lang.String prefix;
    private final java.lang.String suffix;
    private final java.io.File directory;
    private boolean closed;

    public void <init>(int, java.io.File)
    {
        int i0;
        java.io.File r1;
        org.apache.commons.io.output.DeferredFileOutputStream r0;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File)>(i0, r1, null, null, null);

        return;
    }

    public void <init>(int, java.lang.String, java.lang.String, java.io.File)
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        int i0;
        java.lang.String r1, r2;
        java.lang.IllegalArgumentException $r4;
        java.io.File r3;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File)>(i0, null, r1, r2, r3);

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Temporary file prefix is missing");

        throw $r4;

     label1:
        return;
    }

    private void <init>(int, java.io.File, java.lang.String, java.lang.String, java.io.File)
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r2, $r3;
        java.io.File r1, r6;
        int i0;
        java.lang.String r4, r5;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        i0 := @parameter0: int;

        r1 := @parameter1: java.io.File;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.io.File;

        specialinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int)>(i0);

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> = 0;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile> = r1;

        $r2 = new org.apache.commons.io.output.ByteArrayOutputStream;

        specialinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>()>();

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream> = $r2;

        $r3 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = $r3;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix> = r4;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String suffix> = r5;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File directory> = r6;

        return;
    }

    protected java.io.OutputStream getStream() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.io.output.DeferredFileOutputStream r0;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r1 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream>;

        return $r1;
    }

    protected void thresholdReached() throws java.io.IOException
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r4;
        java.io.FileOutputStream $r2;
        java.io.File $r3, $r5, $r8;
        java.lang.String $r1, $r6, $r7;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r1 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix>;

        $r6 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String suffix>;

        $r5 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File directory>;

        $r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>($r7, $r6, $r5);

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile> = $r8;

     label1:
        $r2 = new java.io.FileOutputStream;

        $r3 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        $r4 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        virtualinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r2);

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = $r2;

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream> = null;

        return;
    }

    public boolean isInMemory()
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $z0 = virtualinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isThresholdExceeded()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public byte[] getData()
    {
        byte[] $r3;
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r1, $r2;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r1 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        $r3 = virtualinvoke $r2.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;

     label1:
        return null;
    }

    public java.io.File getFile()
    {
        java.io.File $r1;
        org.apache.commons.io.output.DeferredFileOutputStream r0;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        $r1 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.DeferredFileOutputStream r0;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        specialinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void close()>();

        r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> = 1;

        return;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        java.lang.Throwable $r6;
        org.apache.commons.io.output.DeferredFileOutputStream r0;
        org.apache.commons.io.output.ByteArrayOutputStream $r4;
        java.io.IOException $r5;
        java.io.FileInputStream $r1;
        java.io.File $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;

        r3 := @parameter0: java.io.OutputStream;

        $z0 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Stream not closed");

        throw $r5;

     label1:
        $z1 = virtualinvoke r0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;

        virtualinvoke $r4.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r3);

        goto label7;

     label2:
        $r1 = new java.io.FileInputStream;

        $r2 = r0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

     label3:
        staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r1, r3);

     label4:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1);

        goto label7;

     label5:
        $r6 := @caughtexception;

     label6:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>($r1);

        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
