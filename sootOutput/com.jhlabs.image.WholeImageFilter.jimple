public abstract class com.jhlabs.image.WholeImageFilter extends com.jhlabs.image.AbstractBufferedImageOp implements java.io.Serializable
{
    protected java.awt.Rectangle transformedSpace;
    protected java.awt.Rectangle originalSpace;

    public void <init>()
    {
        com.jhlabs.image.WholeImageFilter r0;

        r0 := @this: com.jhlabs.image.WholeImageFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.Rectangle $r2, $r3, $r4, $r6, $r8, $r9, $r12, $r13;
        int[] $r5, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.jhlabs.image.WholeImageFilter r1;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r11, r15;
        java.awt.image.ColorModel $r10;
        java.awt.image.WritableRaster $r14;

        r1 := @this: com.jhlabs.image.WholeImageFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r15 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = new java.awt.Rectangle;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle originalSpace> = $r2;

        $r3 = new java.awt.Rectangle;

        specialinvoke $r3.<java.awt.Rectangle: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace> = $r3;

        $r4 = r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace>;

        virtualinvoke r1.<com.jhlabs.image.WholeImageFilter: void transformSpace(java.awt.Rectangle)>($r4);

        if r15 != null goto label1;

        $r10 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r11 = new java.awt.image.BufferedImage;

        $r12 = r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace>;

        $i5 = $r12.<java.awt.Rectangle: int width>;

        $r13 = r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace>;

        $i4 = $r13.<java.awt.Rectangle: int height>;

        $r14 = virtualinvoke $r10.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>($i5, $i4);

        $z0 = virtualinvoke $r10.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r11.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r10, $r14, $z0, null);

        r15 = $r11;

     label1:
        virtualinvoke r15.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r5 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, null);

        $r6 = r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace>;

        $r7 = virtualinvoke r1.<com.jhlabs.image.WholeImageFilter: int[] filterPixels(int,int,int[],java.awt.Rectangle)>($i0, $i1, $r5, $r6);

        $r8 = r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace>;

        $i3 = $r8.<java.awt.Rectangle: int width>;

        $r9 = r1.<com.jhlabs.image.WholeImageFilter: java.awt.Rectangle transformedSpace>;

        $i2 = $r9.<java.awt.Rectangle: int height>;

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r15, 0, 0, $i3, $i2, $r7);

        return r15;
    }

    protected void transformSpace(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        com.jhlabs.image.WholeImageFilter r0;

        r0 := @this: com.jhlabs.image.WholeImageFilter;

        r1 := @parameter0: java.awt.Rectangle;

        return;
    }

    protected abstract int[] filterPixels(int, int, int[], java.awt.Rectangle);
}
