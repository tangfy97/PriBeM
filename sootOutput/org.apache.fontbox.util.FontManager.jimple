public class org.apache.fontbox.util.FontManager extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    private static java.util.HashMap ttfFontfiles;
    private static boolean fontsLoaded;
    private static java.util.HashMap fontMappingTTF;

    private void <init>()
    {
        org.apache.fontbox.util.FontManager r0;

        r0 := @this: org.apache.fontbox.util.FontManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void loadFonts()
    {
        java.lang.Throwable $r15;
        java.util.HashMap $r4;
        java.util.Map $r3;
        java.net.URI r6;
        java.lang.String $r8, $r9, $r14, $r22, $r24;
        boolean $z0, $z1;
        org.apache.fontbox.util.autodetect.FontFileFinder $r0;
        java.util.Iterator $r2;
        java.io.IOException $r16, $r18;
        java.io.File $r7;
        java.util.List $r1;
        java.lang.Object $r5;
        java.lang.StringBuilder $r10, $r12, $r13, $r19, $r21, $r23;
        org.apache.commons.logging.Log $r11, $r17, $r20;

     label01:
        $r0 = new org.apache.fontbox.util.autodetect.FontFileFinder;

        specialinvoke $r0.<org.apache.fontbox.util.autodetect.FontFileFinder: void <init>()>();

        $r1 = virtualinvoke $r0.<org.apache.fontbox.util.autodetect.FontFileFinder: java.util.List find()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.net.URI) $r5;

     label03:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.net.URI)>(r6);

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getPath()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".ttf");

        if $z1 == 0 goto label04;

        staticinvoke <org.apache.fontbox.util.FontManager: void analyzeTTF(java.lang.String)>($r8);

        goto label05;

     label04:
        $r11 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported font format for external font: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

        $r20 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read external font: ");

        $r22 = virtualinvoke r6.<java.net.URI: java.lang.String getPath()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r24, $r18);

     label07:
        goto label02;

     label08:
        $r3 = virtualinvoke $r0.<org.apache.fontbox.util.autodetect.FontFileFinder: java.util.Map getCommonTTFMapping()>();

        $r4 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontMapping(java.util.Map,java.util.Map)>($r3, $r4);

        staticinvoke <org.apache.fontbox.util.FontManager: void createFontmapping()>();

     label09:
        <org.apache.fontbox.util.FontManager: boolean fontsLoaded> = 1;

        goto label14;

     label10:
        $r16 := @caughtexception;

        $r17 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("An error occured when collecting external fonts.", $r16);

     label11:
        <org.apache.fontbox.util.FontManager: boolean fontsLoaded> = 1;

        goto label14;

     label12:
        $r15 := @caughtexception;

     label13:
        <org.apache.fontbox.util.FontManager: boolean fontsLoaded> = 1;

        throw $r15;

     label14:
        return;

        catch java.io.IOException from label03 to label05 with label06;
        catch java.io.IOException from label01 to label09 with label10;
        catch java.lang.Throwable from label01 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private static void analyzeTTF(java.lang.String) throws java.io.IOException
    {
        java.util.HashMap $r8, $r16, $r20, $r28;
        org.apache.fontbox.ttf.NamingTable $r3;
        java.lang.String r1, $r4, $r5, $r6, $r7, $r15, $r17, $r18, $r19, $r27;
        org.apache.fontbox.ttf.TTFParser $r0;
        boolean $z0, $z1;
        org.apache.fontbox.ttf.TrueTypeFont $r2;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r21, $r23, $r24, $r25, $r26;
        org.apache.commons.logging.Log $r10, $r22;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r0.<org.apache.fontbox.ttf.TTFParser: void <init>(boolean,boolean)>(0, 1);

        $r2 = virtualinvoke $r0.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.lang.String)>(r1);

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<org.apache.fontbox.ttf.TrueTypeFont: org.apache.fontbox.ttf.NamingTable getNaming()>();

        if $r3 == null goto label1;

        $r17 = virtualinvoke $r3.<org.apache.fontbox.ttf.NamingTable: java.lang.String getPSName()>();

        if $r17 == null goto label1;

        $r18 = virtualinvoke $r3.<org.apache.fontbox.ttf.NamingTable: java.lang.String getPSName()>();

        $r19 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String normalizeFontname(java.lang.String)>($r18);

        $r20 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $z1 = virtualinvoke $r20.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r19);

        if $z1 != 0 goto label1;

        $r22 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added font mapping ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -=> ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

        $r28 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r1);

     label1:
        if $r3 == null goto label2;

        $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.NamingTable: java.lang.String getFontFamily()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r3.<org.apache.fontbox.ttf.NamingTable: java.lang.String getFontFamily()>();

        $r6 = virtualinvoke $r3.<org.apache.fontbox.ttf.NamingTable: java.lang.String getPSName()>();

        $r7 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String normalizeFontFamily(java.lang.String,java.lang.String)>($r5, $r6);

        $r8 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $z0 = virtualinvoke $r8.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r7);

        if $z0 != 0 goto label2;

        $r10 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added font mapping ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -=> ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

        $r16 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1);

     label2:
        return;
    }

    private static java.lang.String normalizeFontname(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, r14, r15;
        boolean z0, z1, $z2, $z3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13, $r16, $r17;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(",", "");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-", "");

        r14 = $r4;

        $i0 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("+");

        $i7 = (int) -1;

        if $i0 <= $i7 goto label1;

        $i4 = virtualinvoke $r4.<java.lang.String: int indexOf(java.lang.String)>("+");

        $i5 = $i4 + 1;

        r14 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i5);

     label1:
        $i1 = virtualinvoke r14.<java.lang.String: int indexOf(java.lang.String)>("bold");

        $i9 = (int) -1;

        if $i1 <= $i9 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        $i2 = virtualinvoke r14.<java.lang.String: int indexOf(java.lang.String)>("italic");

        $i11 = (int) -1;

        if $i2 > $i11 goto label4;

        $i3 = virtualinvoke r14.<java.lang.String: int indexOf(java.lang.String)>("oblique");

        $i13 = (int) -1;

        if $i3 <= $i13 goto label5;

     label4:
        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        z1 = $z3;

        $r5 = virtualinvoke r14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("bold", "");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("italic", "");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("oblique", "");

        r15 = $r7;

        if z0 == 0 goto label7;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bold");

        r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        if z1 == 0 goto label8;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("italic");

        r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        return r15;
    }

    private static java.lang.String normalizeFontFamily(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i2, $i4, $i6, $i8;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, r12, r13;
        boolean z0, z1, $z2, $z3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r14, $r15;

        r0 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" ", "");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(",", "");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("-", "");

        r13 = $r4;

        if r12 == null goto label7;

        $r5 = virtualinvoke r12.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("bold");

        $i4 = (int) -1;

        if $i0 <= $i4 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("italic");

        $i6 = (int) -1;

        if $i1 > $i6 goto label3;

        $i2 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("oblique");

        $i8 = (int) -1;

        if $i2 <= $i8 goto label4;

     label3:
        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        z1 = $z3;

        if z0 == 0 goto label6;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bold");

        r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        if z1 == 0 goto label7;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("italic");

        r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        return r13;
    }

    private static void addFontMapping(java.lang.String, java.lang.String, java.util.Map)
    {
        java.util.HashMap $r5;
        java.util.Map r2;
        java.lang.Object $r6;
        java.lang.String r0, $r1, r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Map;

        $r1 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r0);

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r3);

        $r5 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $z1 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        goto label3;

     label2:
        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

     label3:
        return;
    }

    private static void addFontMapping(java.util.Map, java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.util.Map r0, r6;
        java.lang.Object $r3, $r5;
        java.lang.String r4, $r7;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        r6 := @parameter1: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r7 = (java.lang.String) $r5;

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontMapping(java.lang.String,java.lang.String,java.util.Map)>(r4, $r7, r6);

        goto label1;

     label2:
        return;
    }

    private static java.lang.String getMappedTTFName(java.lang.String)
    {
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        java.lang.String r0, $r1, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r0);

        $r2 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label1:
        return null;
    }

    private static void createFontmapping()
    {
        java.util.HashMap $r0, $r1, $r2, $r3;

        $r0 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontFamilyMapping(java.lang.String,java.lang.String,java.util.Map)>("ArialNarrow", "Arial", $r0);

        $r1 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontFamilyMapping(java.lang.String,java.lang.String,java.util.Map)>("ArialMT", "Arial", $r1);

        $r2 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontFamilyMapping(java.lang.String,java.lang.String,java.util.Map)>("CourierNew", "Courier", $r2);

        $r3 = <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF>;

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontFamilyMapping(java.lang.String,java.lang.String,java.util.Map)>("TimesNewRomanPSMT", "TimesNewRoman", $r3);

        return;
    }

    private static void addFontFamilyMapping(java.lang.String, java.lang.String, java.util.Map)
    {
        java.util.Map r10;
        java.lang.String r1, $r4, r6, $r9, $r14, $r18, $r22, $r26;
        java.lang.StringBuilder $r0, $r2, $r3, $r5, $r7, $r8, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r10 := @parameter2: java.util.Map;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",BoldItalic");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",BoldItalic");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontMapping(java.lang.String,java.lang.String,java.util.Map)>($r4, $r9, r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",Bold");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",Bold");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontMapping(java.lang.String,java.lang.String,java.util.Map)>($r14, $r18, r10);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",Italic");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",Italic");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontMapping(java.lang.String,java.lang.String,java.util.Map)>($r22, $r26, r10);

        staticinvoke <org.apache.fontbox.util.FontManager: void addFontMapping(java.lang.String,java.lang.String,java.util.Map)>(r1, r6, r10);

        return;
    }

    public static java.lang.String findTTFontname(java.lang.String)
    {
        java.util.HashMap $r2, $r16, $r17, $r19;
        java.lang.String r0, $r1, $r7, $r14, $r15, r21;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r10, $r11, $r12, $r13;
        org.apache.commons.logging.Log $r4, $r9;
        java.lang.Object $r18, $r20;

        r0 := @parameter0: java.lang.String;

        $z0 = <org.apache.fontbox.util.FontManager: boolean fontsLoaded>;

        if $z0 != 0 goto label1;

        staticinvoke <org.apache.fontbox.util.FontManager: void loadFonts()>();

     label1:
        r21 = null;

        $r1 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String normalizeFontname(java.lang.String)>(r0);

        $r2 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $z1 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        $r19 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $r20 = virtualinvoke $r19.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r21 = (java.lang.String) $r20;

     label2:
        if r21 != null goto label3;

        $r15 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String getMappedTTFName(java.lang.String)>(r0);

        if $r15 == null goto label3;

        $r16 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $z2 = virtualinvoke $r16.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r15);

        if $z2 == 0 goto label3;

        $r17 = <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles>;

        $r18 = virtualinvoke $r17.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r15);

        r21 = (java.lang.String) $r18;

     label3:
        if r21 == null goto label4;

        $r9 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using ttf mapping ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -=> ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

        goto label5;

     label4:
        $r4 = <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Font not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r7);

     label5:
        return r21;
    }

    public static org.apache.fontbox.ttf.TrueTypeFont findTTFont(java.lang.String) throws java.io.IOException
    {
        java.io.IOException $r4;
        org.apache.fontbox.ttf.TrueTypeFont r9;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r1, $r8;
        org.apache.fontbox.ttf.TTFParser $r2;
        java.io.InputStream $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.fontbox.util.FontManager: java.lang.String findTTFontname(java.lang.String)>(r0);

        r9 = null;

        if $r1 == null goto label2;

        $r2 = new org.apache.fontbox.ttf.TTFParser;

        specialinvoke $r2.<org.apache.fontbox.ttf.TTFParser: void <init>()>();

        $r3 = staticinvoke <org.apache.fontbox.util.ResourceLoader: java.io.InputStream loadResource(java.lang.String)>($r1);

        if $r3 != null goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load external font: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        r9 = virtualinvoke $r2.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parseTTF(java.io.InputStream)>($r3);

     label2:
        return r9;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;
        java.util.HashMap $r1, $r2;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/fontbox/util/FontManager;");

        <org.apache.fontbox.util.FontManager: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.fontbox.util.FontManager: java.util.HashMap ttfFontfiles> = $r1;

        <org.apache.fontbox.util.FontManager: boolean fontsLoaded> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.fontbox.util.FontManager: java.util.HashMap fontMappingTTF> = $r2;

        return;
    }
}
