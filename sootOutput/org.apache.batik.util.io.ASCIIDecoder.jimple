public class org.apache.batik.util.io.ASCIIDecoder extends org.apache.batik.util.io.AbstractCharDecoder
{

    public void <init>(java.io.InputStream)
    {
        org.apache.batik.util.io.ASCIIDecoder r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.batik.util.io.ASCIIDecoder;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.batik.util.io.AbstractCharDecoder: void <init>(java.io.InputStream)>(r1);

        return;
    }

    public int readChar() throws java.io.IOException
    {
        byte[] $r1;
        byte b5;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i9, $i10, $i11;
        org.apache.batik.util.io.ASCIIDecoder r0;

        r0 := @this: org.apache.batik.util.io.ASCIIDecoder;

        $i1 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int position>;

        $i0 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int count>;

        if $i1 != $i0 goto label1;

        virtualinvoke r0.<org.apache.batik.util.io.AbstractCharDecoder: void fillBuffer()>();

     label1:
        $i2 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int count>;

        $i7 = (int) -1;

        if $i2 != $i7 goto label2;

        $i9 = (int) -1;

        return $i9;

     label2:
        $r1 = r0.<org.apache.batik.util.io.AbstractCharDecoder: byte[] buffer>;

        $i3 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.util.io.AbstractCharDecoder: int position> = $i4;

        b5 = $r1[$i3];

        $i10 = (int) b5;

        if $i10 >= 0 goto label3;

        virtualinvoke r0.<org.apache.batik.util.io.AbstractCharDecoder: void charError(java.lang.String)>("ASCII");

     label3:
        $i11 = (int) b5;

        return $i11;
    }
}
