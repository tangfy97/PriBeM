public class org.apache.fontbox.util.autodetect.WindowsFontDirFinder extends java.lang.Object implements org.apache.fontbox.util.autodetect.FontDirFinder
{

    public void <init>()
    {
        org.apache.fontbox.util.autodetect.WindowsFontDirFinder r0;

        r0 := @this: org.apache.fontbox.util.autodetect.WindowsFontDirFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.lang.String getWinDir(java.lang.String) throws java.io.IOException
    {
        org.apache.fontbox.util.autodetect.WindowsFontDirFinder r6;
        java.lang.Process r7;
        java.lang.Runtime $r0;
        java.io.InputStreamReader $r3;
        java.lang.String r1, $r5;
        java.io.BufferedReader $r2;
        boolean $z0;
        java.io.InputStream $r4;

        r6 := @this: org.apache.fontbox.util.autodetect.WindowsFontDirFinder;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("Windows 9");

        if $z0 == 0 goto label1;

        r7 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>("command.com /c echo %windir%");

        goto label2;

     label1:
        r7 = virtualinvoke $r0.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>("cmd.exe /c echo %windir%");

     label2:
        $r2 = new java.io.BufferedReader;

        $r3 = new java.io.InputStreamReader;

        $r4 = virtualinvoke r7.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r4);

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3);

        $r5 = virtualinvoke $r2.<java.io.BufferedReader: java.lang.String readLine()>();

        return $r5;
    }

    public java.util.List find()
    {
        org.apache.fontbox.util.autodetect.WindowsFontDirFinder r29;
        java.lang.SecurityException $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r12, $r13, $r14, $r16, $r17, $r19, $r20, $r23, $r24, $r26, $r27, $r34, $r36, $r38, $r39;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, r2, $r7, $r10, $r15, $r18, $r21, $r25, $r28, r32, $r35, $r37, $r40, $r41;
        java.io.IOException $r30;
        char c4, c5;
        java.io.File $r3, $r11, $r22, $r33;

        r29 := @this: org.apache.fontbox.util.autodetect.WindowsFontDirFinder;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r32 = null;

     label01:
        r32 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("env.windir");

     label02:
        goto label04;

     label03:
        $r31 := @caughtexception;

     label04:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        if r32 != null goto label08;

     label05:
        r32 = specialinvoke r29.<org.apache.fontbox.util.autodetect.WindowsFontDirFinder: java.lang.String getWinDir(java.lang.String)>($r1);

     label06:
        goto label08;

     label07:
        $r30 := @caughtexception;

     label08:
        if r32 == null goto label11;

        $z5 = virtualinvoke r32.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z5 == 0 goto label09;

        $i2 = virtualinvoke r32.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r32 = virtualinvoke r32.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

     label09:
        $r22 = new java.io.File;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r25 = <java.io.File: java.lang.String separator>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FONTS");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>($r28);

        $z6 = virtualinvoke $r22.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label10;

        $z8 = virtualinvoke $r22.<java.io.File: boolean canRead()>();

        if $z8 == 0 goto label10;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r22);

     label10:
        $r33 = new java.io.File;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke r32.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = <java.io.File: java.lang.String separator>;

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PSFONTS");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.File: void <init>(java.lang.String)>($r40);

        $z9 = virtualinvoke $r33.<java.io.File: boolean exists()>();

        if $z9 == 0 goto label19;

        $z7 = virtualinvoke $r33.<java.io.File: boolean canRead()>();

        if $z7 == 0 goto label19;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r33);

        goto label19;

     label11:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("NT");

        if $z0 == 0 goto label12;

        $r41 = "WINNT";

        goto label13;

     label12:
        $r41 = "WINDOWS";

     label13:
        r2 = $r41;

        c4 = 67;

     label14:
        if c4 > 69 goto label16;

        $r11 = new java.io.File;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r15 = <java.io.File: java.lang.String separator>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = <java.io.File: java.lang.String separator>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FONTS");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r21);

        $z3 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label15;

        $z4 = virtualinvoke $r11.<java.io.File: boolean canRead()>();

        if $z4 == 0 goto label15;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label16;

     label15:
        $i1 = c4 + 1;

        c4 = (char) $i1;

        goto label14;

     label16:
        c5 = 67;

     label17:
        if c5 > 69 goto label19;

        $r3 = new java.io.File;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = <java.io.File: java.lang.String separator>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PSFONTS");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r10);

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label18;

        $z2 = virtualinvoke $r3.<java.io.File: boolean canRead()>();

        if $z2 == 0 goto label18;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        goto label19;

     label18:
        $i0 = c5 + 1;

        c5 = (char) $i0;

        goto label17;

     label19:
        return $r0;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
    }

    public java.util.Map getCommonTTFMapping()
    {
        org.apache.fontbox.util.autodetect.WindowsFontDirFinder r2;
        java.util.HashMap $r0;
        java.util.Map $r1;

        r2 := @this: org.apache.fontbox.util.autodetect.WindowsFontDirFinder;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Arial", "arialmt");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Arial,Bold", "arialmtbold");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Arial,Italic", "arialmtitalic");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Arial,BoldItalic", "arialmtbolditalic");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("TimesNewRoman", "timesnewromanpsmt");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("TimesNewRoman,Bold", "timesnewromanpsmtbold");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("TimesNewRoman,BoldItalic", "timesnewromanpsmtbolditalic");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("TimesNewRoman,Italic", "timesnewromanpsmtitalic");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier", "couriernewpsmt");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier,Bold", "couriernewpsmtbold");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier,Italic", "couriernewpsmtitalic");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Courier,BoldItalic", "couriernewpsmtbolditalic");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Symbol", "symbolmt");

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ZapfDingbats", "Wingdings");

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        return $r1;
    }
}
