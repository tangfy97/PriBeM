class org.springframework.util.xml.XMLEventStreamWriter extends java.lang.Object implements javax.xml.stream.XMLStreamWriter
{
    private static final java.lang.String DEFAULT_ENCODING;
    private final javax.xml.stream.XMLEventWriter eventWriter;
    private final javax.xml.stream.XMLEventFactory eventFactory;
    private java.util.List endElements;

    public void <init>(javax.xml.stream.XMLEventWriter, javax.xml.stream.XMLEventFactory)
    {
        javax.xml.stream.XMLEventWriter r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory r3;
        java.util.ArrayList $r1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r2 := @parameter0: javax.xml.stream.XMLEventWriter;

        r3 := @parameter1: javax.xml.stream.XMLEventFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements> = $r1;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r2, "\'eventWriter\' must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r3, "\'eventFactory\' must not be null");

        r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter> = r2;

        r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory> = r3;

        return;
    }

    public javax.xml.namespace.NamespaceContext getNamespaceContext()
    {
        javax.xml.stream.XMLEventWriter $r1;
        javax.xml.namespace.NamespaceContext $r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = interfaceinvoke $r1.<javax.xml.stream.XMLEventWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        return $r2;
    }

    public java.lang.String getPrefix(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r2;
        java.lang.String r1, $r3;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.XMLEventWriter: java.lang.String getPrefix(java.lang.String)>(r1);

        return $r3;
    }

    public void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        java.lang.String r1, r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void setPrefix(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r2;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r2.<javax.xml.stream.XMLEventWriter: void setDefaultNamespace(java.lang.String)>(r1);

        return;
    }

    public void setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.namespace.NamespaceContext r1;
        javax.xml.stream.XMLEventWriter $r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: javax.xml.namespace.NamespaceContext;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r2.<javax.xml.stream.XMLEventWriter: void setNamespaceContext(javax.xml.namespace.NamespaceContext)>(r1);

        return;
    }

    public void writeStartDocument() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r2;
        javax.xml.stream.events.StartDocument $r3;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r3 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument()>();

        interfaceinvoke $r2.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public void writeStartDocument(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        javax.xml.stream.events.StartDocument $r4;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument(java.lang.String,java.lang.String)>("UTF-8", r1);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeStartDocument(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r4;
        javax.xml.stream.events.StartDocument $r5;
        java.lang.String r1, r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r3;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r5 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument(java.lang.String,java.lang.String)>(r1, r2);

        interfaceinvoke $r4.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public void writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.namespace.QName $r1;
        java.lang.String r2;
        javax.xml.stream.events.StartElement $r4;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r3;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r2 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)>($r1, null, null);

        specialinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(javax.xml.stream.events.StartElement)>($r4);

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.namespace.QName $r1;
        java.lang.String r2, r3;
        javax.xml.stream.events.StartElement $r5;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r4;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)>($r1, null, null);

        specialinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(javax.xml.stream.events.StartElement)>($r5);

        return;
    }

    public void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.namespace.QName $r1;
        java.lang.String r2, r3, r4;
        javax.xml.stream.events.StartElement $r6;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r4 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4);

        $r6 = virtualinvoke $r5.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)>($r1, null, null);

        specialinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(javax.xml.stream.events.StartElement)>($r6);

        return;
    }

    public void writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(java.lang.String)>(r1);

        virtualinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeEndElement()>();

        return;
    }

    public void writeEmptyElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(java.lang.String,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeEndElement()>();

        return;
    }

    public void writeEmptyElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        java.lang.String r1, r2, r3;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        virtualinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeEndElement()>();

        return;
    }

    public void writeEndElement() throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamWriter r0;
        java.util.List $r1, $r2, $r6;
        javax.xml.stream.XMLEventWriter $r5;
        int $i0, i1;
        java.lang.Object $r3;
        javax.xml.stream.events.EndElement r4;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (javax.xml.stream.events.EndElement) $r3;

        $r5 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r5.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>(r4);

        $r6 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i1);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r4;
        javax.xml.stream.events.Attribute $r5;
        java.lang.String r1, r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r3;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r5 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Attribute createAttribute(java.lang.String,java.lang.String)>(r1, r2);

        interfaceinvoke $r4.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventWriter $r4;
        javax.xml.stream.events.Attribute $r7;
        javax.xml.namespace.QName $r1;
        java.lang.String r2, r3, r6;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r5 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new javax.xml.namespace.QName;

        specialinvoke $r1.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>(r2, r3);

        $r7 = virtualinvoke $r5.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Attribute createAttribute(javax.xml.namespace.QName,java.lang.String)>($r1, r6);

        interfaceinvoke $r4.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r7);

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventWriter $r6;
        javax.xml.stream.events.Attribute $r7;
        java.lang.String r1, r2, r3, r4;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r6 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r5 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r7 = virtualinvoke $r5.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Attribute createAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        interfaceinvoke $r6.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r7);

        return;
    }

    public void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Namespace $r4;
        java.lang.String r1, r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r3;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Namespace createNamespace(java.lang.String,java.lang.String)>(r1, r2);

        specialinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeNamespace(javax.xml.stream.events.Namespace)>($r4);

        return;
    }

    public void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Namespace $r3;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r3 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Namespace createNamespace(java.lang.String)>(r1);

        specialinvoke r0.<org.springframework.util.xml.XMLEventStreamWriter: void writeNamespace(javax.xml.stream.events.Namespace)>($r3);

        return;
    }

    public void writeCharacters(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        javax.xml.stream.events.Characters $r4;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCharacters(java.lang.String)>(r1);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeCharacters(char[], int, int) throws javax.xml.stream.XMLStreamException
    {
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventWriter $r3;
        javax.xml.stream.events.Characters $r5;
        int i0, i1;
        char[] r2;
        java.lang.String $r1;
        javax.xml.stream.XMLEventFactory $r4;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r2, i0, i1);

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCharacters(java.lang.String)>($r1);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public void writeCData(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        javax.xml.stream.events.Characters $r4;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCData(java.lang.String)>(r1);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeComment(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        javax.xml.stream.events.Comment $r4;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Comment createComment(java.lang.String)>(r1);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeProcessingInstruction(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        javax.xml.stream.events.ProcessingInstruction $r4;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>(r1, "");

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeProcessingInstruction(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r4;
        javax.xml.stream.events.ProcessingInstruction $r5;
        java.lang.String r1, r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r3;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r5 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>(r1, r2);

        interfaceinvoke $r4.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public void writeDTD(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.events.DTD $r4;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.DTD createDTD(java.lang.String)>(r1);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeEntityRef(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r3;
        java.lang.String r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.events.EntityReference $r4;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EntityReference createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)>(r1, null);

        interfaceinvoke $r3.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r4);

        return;
    }

    public void writeEndDocument() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r2;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r1;
        javax.xml.stream.events.EndDocument $r3;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r3 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndDocument createEndDocument()>();

        interfaceinvoke $r2.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r2;
        java.lang.IllegalArgumentException $r0;
        org.springframework.util.xml.XMLEventStreamWriter r1;

        r1 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public void flush() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r1.<javax.xml.stream.XMLEventWriter: void flush()>();

        return;
    }

    public void close() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r1;
        org.springframework.util.xml.XMLEventStreamWriter r0;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r1.<javax.xml.stream.XMLEventWriter: void close()>();

        return;
    }

    private void writeStartElement(javax.xml.stream.events.StartElement) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLEventWriter $r2;
        java.util.List $r3;
        javax.xml.stream.events.EndElement $r6;
        javax.xml.stream.events.StartElement r1;
        javax.xml.namespace.QName $r5;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        javax.xml.stream.XMLEventFactory $r4;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r1 := @parameter0: javax.xml.stream.events.StartElement;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r2.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>(r1);

        $r3 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        $r4 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r5 = interfaceinvoke r1.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r6 = virtualinvoke $r4.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)>($r5, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        return;
    }

    private void writeNamespace(javax.xml.stream.events.Namespace) throws javax.xml.stream.XMLStreamException
    {
        java.util.ArrayList $r6;
        javax.xml.stream.XMLEventWriter $r13;
        int $i0, i1;
        javax.xml.stream.events.EndElement r4, $r12;
        boolean $z0;
        java.util.Iterator $r5, $r11;
        org.springframework.util.xml.XMLEventStreamWriter r0;
        java.util.List $r1, $r2, $r14;
        javax.xml.stream.events.Namespace r8, r15;
        java.lang.Object $r3, $r7;
        javax.xml.namespace.QName $r10;
        javax.xml.stream.XMLEventFactory $r9;

        r0 := @this: org.springframework.util.xml.XMLEventStreamWriter;

        r8 := @parameter0: javax.xml.stream.events.Namespace;

        $r1 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

        $r2 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (javax.xml.stream.events.EndElement) $r3;

        $r5 = interfaceinvoke r4.<javax.xml.stream.events.EndElement: java.util.Iterator getNamespaces()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r15 = (javax.xml.stream.events.Namespace) $r7;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r15);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r8);

        $r9 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventFactory eventFactory>;

        $r10 = interfaceinvoke r4.<javax.xml.stream.events.EndElement: javax.xml.namespace.QName getName()>();

        $r11 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        $r12 = virtualinvoke $r9.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)>($r10, $r11);

        $r13 = r0.<org.springframework.util.xml.XMLEventStreamWriter: javax.xml.stream.XMLEventWriter eventWriter>;

        interfaceinvoke $r13.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.events.XMLEvent)>(r8);

        $r14 = r0.<org.springframework.util.xml.XMLEventStreamWriter: java.util.List endElements>;

        interfaceinvoke $r14.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i1, $r12);

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.util.xml.XMLEventStreamWriter: java.lang.String DEFAULT_ENCODING> = "UTF-8";

        return;
    }
}
