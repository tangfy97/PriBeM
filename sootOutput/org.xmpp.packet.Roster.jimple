public class org.xmpp.packet.Roster extends org.xmpp.packet.IQ
{

    public void <init>()
    {
        org.dom4j.Element $r1;
        org.xmpp.packet.Roster r0;

        r0 := @this: org.xmpp.packet.Roster;

        specialinvoke r0.<org.xmpp.packet.IQ: void <init>()>();

        $r1 = r0.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("query", "jabber:iq:roster");

        return;
    }

    public void <init>(org.xmpp.packet.IQ$Type)
    {
        org.dom4j.Element $r2;
        org.xmpp.packet.IQ$Type r1;
        org.xmpp.packet.Roster r0;

        r0 := @this: org.xmpp.packet.Roster;

        r1 := @parameter0: org.xmpp.packet.IQ$Type;

        specialinvoke r0.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type)>(r1);

        $r2 = r0.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("query", "jabber:iq:roster");

        return;
    }

    public void <init>(org.xmpp.packet.IQ$Type, java.lang.String)
    {
        org.dom4j.Element $r3;
        org.xmpp.packet.IQ$Type r1;
        java.lang.String r2;
        org.xmpp.packet.Roster r0;

        r0 := @this: org.xmpp.packet.Roster;

        r1 := @parameter0: org.xmpp.packet.IQ$Type;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.xmpp.packet.IQ: void <init>(org.xmpp.packet.IQ$Type,java.lang.String)>(r1, r2);

        $r3 = r0.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("query", "jabber:iq:roster");

        return;
    }

    private void <init>(org.xmpp.packet.Roster)
    {
        org.dom4j.Document $r5;
        org.dom4j.Element $r2, $r3;
        org.xmpp.packet.Roster r0, r1;
        org.dom4j.DocumentFactory $r4;

        r0 := @this: org.xmpp.packet.Roster;

        r1 := @parameter0: org.xmpp.packet.Roster;

        specialinvoke r0.<org.xmpp.packet.IQ: void <init>()>();

        $r2 = r1.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element createCopy()>();

        $r4 = <org.xmpp.packet.Roster: org.dom4j.DocumentFactory docFactory>;

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        interfaceinvoke $r5.<org.dom4j.Document: void add(org.dom4j.Element)>($r3);

        r0.<org.xmpp.packet.Roster: org.dom4j.Element element> = $r3;

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.dom4j.Element r1;
        org.xmpp.packet.Roster r0;

        r0 := @this: org.xmpp.packet.Roster;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<org.xmpp.packet.IQ: void <init>(org.dom4j.Element)>(r1);

        return;
    }

    public org.xmpp.packet.Roster$Item addItem(java.lang.String, org.xmpp.packet.Roster$Subscription)
    {
        java.lang.IllegalStateException $r3;
        org.xmpp.packet.JID $r7;
        java.lang.NullPointerException $r10;
        org.xmpp.packet.Roster$Subscription r8;
        org.xmpp.packet.Roster$Item $r9;
        org.xmpp.packet.IQ$Type $r1, $r2, $r4, $r5;
        java.lang.String r6;
        org.xmpp.packet.Roster r0;

        r0 := @this: org.xmpp.packet.Roster;

        r6 := @parameter0: java.lang.String;

        r8 := @parameter1: org.xmpp.packet.Roster$Subscription;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.IQ$Type getType()>();

        $r2 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type get>;

        if $r1 == $r2 goto label1;

        $r4 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.IQ$Type getType()>();

        $r5 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type error>;

        if $r4 != $r5 goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IQ type must be \'result\' or \'set\'");

        throw $r3;

     label2:
        if r6 != null goto label3;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("JID cannot be null");

        throw $r10;

     label3:
        $r7 = new org.xmpp.packet.JID;

        specialinvoke $r7.<org.xmpp.packet.JID: void <init>(java.lang.String)>(r6);

        $r9 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.Roster$Item addItem(org.xmpp.packet.JID,java.lang.String,org.xmpp.packet.Roster$Ask,org.xmpp.packet.Roster$Subscription,java.util.Collection)>($r7, null, null, r8, null);

        return $r9;
    }

    public org.xmpp.packet.Roster$Item addItem(org.xmpp.packet.JID, org.xmpp.packet.Roster$Subscription)
    {
        java.lang.IllegalStateException $r9;
        org.xmpp.packet.JID r3;
        java.lang.NullPointerException $r6;
        org.xmpp.packet.Roster$Subscription r4;
        org.xmpp.packet.Roster$Item $r5;
        org.xmpp.packet.IQ$Type $r1, $r2, $r7, $r8;
        org.xmpp.packet.Roster r0;

        r0 := @this: org.xmpp.packet.Roster;

        r3 := @parameter0: org.xmpp.packet.JID;

        r4 := @parameter1: org.xmpp.packet.Roster$Subscription;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.IQ$Type getType()>();

        $r2 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type result>;

        if $r1 == $r2 goto label1;

        $r7 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.IQ$Type getType()>();

        $r8 = <org.xmpp.packet.IQ$Type: org.xmpp.packet.IQ$Type set>;

        if $r7 == $r8 goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IQ type must be \'result\' or \'set\'");

        throw $r9;

     label1:
        if r3 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("JID cannot be null");

        throw $r6;

     label2:
        $r5 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.Roster$Item addItem(org.xmpp.packet.JID,java.lang.String,org.xmpp.packet.Roster$Ask,org.xmpp.packet.Roster$Subscription,java.util.Collection)>(r3, null, null, r4, null);

        return $r5;
    }

    public org.xmpp.packet.Roster$Item addItem(org.xmpp.packet.JID, java.lang.String, org.xmpp.packet.Roster$Ask, org.xmpp.packet.Roster$Subscription, java.util.Collection)
    {
        java.lang.NullPointerException $r25, $r26;
        boolean $z0, $z1, $z2, $z3;
        org.dom4j.Namespace $r5;
        org.xmpp.packet.Roster$Ask r10;
        java.util.Collection r13;
        org.xmpp.packet.Roster r2;
        org.xmpp.packet.JID r0;
        org.xmpp.packet.Roster$Subscription r1;
        org.xmpp.packet.Roster$Item $r14;
        java.lang.String $r8, r9, $r11, $r20, $r22, $r23, r30;
        java.util.Iterator $r7, $r12, $r15;
        org.dom4j.QName $r3;
        org.dom4j.Element $r4, $r6, $r17, $r19, $r24, r27, r28, r29;
        java.lang.Object $r16, $r18, $r21;

        r2 := @this: org.xmpp.packet.Roster;

        r0 := @parameter0: org.xmpp.packet.JID;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: org.xmpp.packet.Roster$Ask;

        r1 := @parameter3: org.xmpp.packet.Roster$Subscription;

        r13 := @parameter4: java.util.Collection;

        if r0 != null goto label01;

        $r26 = new java.lang.NullPointerException;

        specialinvoke $r26.<java.lang.NullPointerException: void <init>(java.lang.String)>("JID cannot be null");

        throw $r26;

     label01:
        if r1 != null goto label02;

        $r25 = new java.lang.NullPointerException;

        specialinvoke $r25.<java.lang.NullPointerException: void <init>(java.lang.String)>("Subscription cannot be null");

        throw $r25;

     label02:
        $r4 = r2.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        $r3 = new org.dom4j.QName;

        $r5 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String)>("jabber:iq:roster");

        specialinvoke $r3.<org.dom4j.QName: void <init>(java.lang.String,org.dom4j.Namespace)>("query", $r5);

        $r6 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r3);

        r27 = $r6;

        if $r6 != null goto label03;

        $r24 = r2.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        r27 = interfaceinvoke $r24.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("query", "jabber:iq:roster");

     label03:
        r28 = null;

        $r7 = interfaceinvoke r27.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("item");

     label04:
        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r21 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.dom4j.Element) $r21;

        $r22 = interfaceinvoke r29.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("jid");

        $r23 = virtualinvoke r0.<org.xmpp.packet.JID: java.lang.String toString()>();

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z1 == 0 goto label05;

        r28 = r29;

     label05:
        goto label04;

     label06:
        if r28 != null goto label07;

        r28 = interfaceinvoke r27.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

     label07:
        $r8 = virtualinvoke r0.<org.xmpp.packet.JID: java.lang.String toBareJID()>();

        interfaceinvoke r28.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("jid", $r8);

        interfaceinvoke r28.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("name", r9);

        if r10 == null goto label08;

        $r20 = virtualinvoke r10.<org.xmpp.packet.Roster$Ask: java.lang.String toString()>();

        interfaceinvoke r28.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("ask", $r20);

     label08:
        $r11 = virtualinvoke r1.<org.xmpp.packet.Roster$Subscription: java.lang.String toString()>();

        interfaceinvoke r28.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("subscription", $r11);

        $r12 = interfaceinvoke r28.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("group");

     label09:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r18 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (org.dom4j.Element) $r18;

        interfaceinvoke r28.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r19);

        goto label09;

     label10:
        if r13 == null goto label12;

        $r15 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.String) $r16;

        $r17 = interfaceinvoke r28.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("group");

        interfaceinvoke $r17.<org.dom4j.Element: void setText(java.lang.String)>(r30);

        goto label11;

     label12:
        $r14 = new org.xmpp.packet.Roster$Item;

        specialinvoke $r14.<org.xmpp.packet.Roster$Item: void <init>(org.xmpp.packet.JID,java.lang.String,org.xmpp.packet.Roster$Ask,org.xmpp.packet.Roster$Subscription,java.util.Collection,org.xmpp.packet.Roster$1)>(r0, r9, r10, r1, r13, null);

        return $r14;
    }

    public void removeItem(org.xmpp.packet.JID)
    {
        java.util.Iterator $r5;
        org.dom4j.Namespace $r3;
        org.xmpp.packet.JID r9;
        org.dom4j.QName $r1;
        org.dom4j.Element $r2, $r4, r7;
        java.lang.Object $r6;
        java.lang.String $r8, $r10;
        org.xmpp.packet.Roster r0;
        boolean $z0, $z1;

        r0 := @this: org.xmpp.packet.Roster;

        r9 := @parameter0: org.xmpp.packet.JID;

        $r2 = r0.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        $r1 = new org.dom4j.QName;

        $r3 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String)>("jabber:iq:roster");

        specialinvoke $r1.<org.dom4j.QName: void <init>(java.lang.String,org.dom4j.Namespace)>("query", $r3);

        $r4 = interfaceinvoke $r2.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r1);

        if $r4 == null goto label3;

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("item");

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.dom4j.Element) $r6;

        $r8 = interfaceinvoke r7.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("jid");

        $r10 = virtualinvoke r9.<org.xmpp.packet.JID: java.lang.String toString()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 == 0 goto label2;

        interfaceinvoke $r4.<org.dom4j.Element: boolean remove(org.dom4j.Element)>(r7);

        return;

     label2:
        goto label1;

     label3:
        return;
    }

    public java.util.Collection getItems()
    {
        org.xmpp.packet.JID $r17;
        java.util.ArrayList $r0, $r14;
        org.xmpp.packet.Roster$Subscription $r23;
        org.xmpp.packet.Roster$Item $r16;
        java.lang.String $r10, $r11, $r12, $r13, $r19;
        boolean $z0, $z1;
        java.util.Iterator $r7, $r15;
        org.dom4j.Namespace $r4;
        java.util.Collection $r6;
        org.xmpp.packet.Roster$Ask $r21, r22;
        org.dom4j.QName $r2;
        org.dom4j.Element $r3, $r5, r9, r20;
        java.lang.Object $r8, $r18;
        org.xmpp.packet.Roster r1;

        r1 := @this: org.xmpp.packet.Roster;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r3 = r1.<org.xmpp.packet.Roster: org.dom4j.Element element>;

        $r2 = new org.dom4j.QName;

        $r4 = staticinvoke <org.dom4j.Namespace: org.dom4j.Namespace get(java.lang.String)>("jabber:iq:roster");

        specialinvoke $r2.<org.dom4j.QName: void <init>(java.lang.String,org.dom4j.Namespace)>("query", $r4);

        $r5 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element element(org.dom4j.QName)>($r2);

        if $r5 == null goto label8;

        $r7 = interfaceinvoke $r5.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("item");

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.dom4j.Element) $r8;

        $r10 = interfaceinvoke r9.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("jid");

        $r11 = interfaceinvoke r9.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("name");

        $r12 = interfaceinvoke r9.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("ask");

        $r13 = interfaceinvoke r9.<org.dom4j.Element: java.lang.String attributeValue(java.lang.String)>("subscription");

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = interfaceinvoke r9.<org.dom4j.Element: java.util.Iterator elementIterator(java.lang.String)>("group");

     label2:
        $z1 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r18 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.dom4j.Element) $r18;

        $r19 = interfaceinvoke r20.<org.dom4j.Element: java.lang.String getTextTrim()>();

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r19);

        goto label2;

     label3:
        if $r12 != null goto label4;

        $r21 = null;

        goto label5;

     label4:
        $r21 = staticinvoke <org.xmpp.packet.Roster$Ask: org.xmpp.packet.Roster$Ask valueOf(java.lang.String)>($r12);

     label5:
        r22 = $r21;

        if $r13 != null goto label6;

        $r23 = null;

        goto label7;

     label6:
        $r23 = staticinvoke <org.xmpp.packet.Roster$Subscription: org.xmpp.packet.Roster$Subscription valueOf(java.lang.String)>($r13);

     label7:
        $r16 = new org.xmpp.packet.Roster$Item;

        $r17 = new org.xmpp.packet.JID;

        specialinvoke $r17.<org.xmpp.packet.JID: void <init>(java.lang.String)>($r10);

        specialinvoke $r16.<org.xmpp.packet.Roster$Item: void <init>(org.xmpp.packet.JID,java.lang.String,org.xmpp.packet.Roster$Ask,org.xmpp.packet.Roster$Subscription,java.util.Collection,org.xmpp.packet.Roster$1)>($r17, $r11, r22, $r23, $r14, null);

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r16);

        goto label1;

     label8:
        $r6 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r0);

        return $r6;
    }

    public org.xmpp.packet.Roster createCopy()
    {
        org.xmpp.packet.Roster $r0, r1;

        r1 := @this: org.xmpp.packet.Roster;

        $r0 = new org.xmpp.packet.Roster;

        specialinvoke $r0.<org.xmpp.packet.Roster: void <init>(org.xmpp.packet.Roster)>(r1);

        return $r0;
    }

    public volatile org.xmpp.packet.IQ createCopy()
    {
        org.xmpp.packet.Roster r0, $r1;

        r0 := @this: org.xmpp.packet.Roster;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.Roster createCopy()>();

        return $r1;
    }

    public volatile org.xmpp.packet.Packet createCopy()
    {
        org.xmpp.packet.Roster r0, $r1;

        r0 := @this: org.xmpp.packet.Roster;

        $r1 = virtualinvoke r0.<org.xmpp.packet.Roster: org.xmpp.packet.Roster createCopy()>();

        return $r1;
    }
}
