public class org.springframework.expression.spel.ast.Indexer extends org.springframework.expression.spel.ast.SpelNodeImpl
{
    private java.lang.String cachedReadName;
    private java.lang.Class cachedReadTargetType;
    private org.springframework.expression.PropertyAccessor cachedReadAccessor;
    private java.lang.String cachedWriteName;
    private java.lang.Class cachedWriteTargetType;
    private org.springframework.expression.PropertyAccessor cachedWriteAccessor;

    public void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl)
    {
        org.springframework.expression.spel.ast.Indexer r0;
        int i0;
        org.springframework.expression.spel.ast.SpelNodeImpl r2;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1;

        r0 := @this: org.springframework.expression.spel.ast.Indexer;

        i0 := @parameter0: int;

        r2 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl;

        $r1 = newarray (org.springframework.expression.spel.ast.SpelNodeImpl)[1];

        $r1[0] = r2;

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, $r1);

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.PropertyAccessor $r20, r82;
        java.lang.Integer $r27, $r28, $r37, $r38, $r74;
        java.util.Map $r46;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r6, $r56, $r58;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r7, $r57, $r59;
        org.springframework.expression.spel.SpelEvaluationException $r24, $r34, $r43, $r53, $r63, $r83;
        java.lang.Throwable $r67;
        java.lang.Object[] $r25, $r35, $r44, $r54, $r64, $r85;
        java.lang.String $r12, $r17, $r23, $r60, $r66, r77, r80, $r86;
        org.springframework.expression.TypedValue $r1, $r4, $r8, $r15, $r21, $r22, $r31, $r39, $r48, $r49, $r61, r70;
        org.springframework.expression.spel.SpelMessage $r26, $r36, $r45, $r55, $r65, $r84;
        org.springframework.expression.spel.support.ReflectivePropertyAccessor $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        java.util.Collection r76;
        org.springframework.expression.AccessException $r62;
        org.springframework.expression.EvaluationContext $r11;
        java.util.List $r81;
        org.springframework.expression.spel.ast.Indexer r5;
        org.springframework.core.convert.TypeDescriptor $r3, $r32, $r41, $r50, $r52, $r72, $r78;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12;
        org.springframework.expression.spel.ast.PropertyOrFieldReference r68;
        java.util.Iterator $r13, $r29;
        char $c1;
        java.lang.Object $r2, $r10, $r14, $r30, $r40, $r47, r69, r71, $r73;
        java.lang.Class $r9, $r18, $r19, $r33, $r42, $r51, $r75, $r79;

        r5 := @this: org.springframework.expression.spel.ast.Indexer;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $z0 = $r2 instanceof java.util.Map;

        if $z0 == 0 goto label01;

        $r56 = r5.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r57 = $r56[0];

        $z16 = $r57 instanceof org.springframework.expression.spel.ast.PropertyOrFieldReference;

        if $z16 == 0 goto label01;

        $r58 = r5.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r59 = $r58[0];

        r68 = (org.springframework.expression.spel.ast.PropertyOrFieldReference) $r59;

        $r60 = virtualinvoke r68.<org.springframework.expression.spel.ast.PropertyOrFieldReference: java.lang.String getName()>();

        r69 = $r60;

        $r61 = new org.springframework.expression.TypedValue;

        specialinvoke $r61.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r60);

        r70 = $r61;

        goto label04;

     label01:
        $r4 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getRootContextObject()>();

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void pushActiveContextObject(org.springframework.expression.TypedValue)>($r4);

        $r6 = r5.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r7 = $r6[0];

        $r8 = virtualinvoke $r7.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        r70 = $r8;

        r69 = virtualinvoke $r8.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        goto label03;

     label02:
        $r67 := @caughtexception;

        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

        throw $r67;

     label03:
        virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: void popActiveContextObject()>();

     label04:
        $z1 = $r2 instanceof java.util.Map;

        if $z1 == 0 goto label08;

        if $r2 != null goto label05;

        $r53 = new org.springframework.expression.spel.SpelEvaluationException;

        $i8 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r55 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CANNOT_INDEX_INTO_NULL_VALUE>;

        $r54 = newarray (java.lang.Object)[0];

        specialinvoke $r53.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i8, $r55, $r54);

        throw $r53;

     label05:
        r71 = r69;

        $z14 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: boolean isMapEntryTypeKnown()>();

        if $z14 == 0 goto label06;

        $r51 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapKeyType()>();

        $r52 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r51);

        r71 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r69, $r52);

     label06:
        $r46 = (java.util.Map) $r2;

        $r47 = interfaceinvoke $r46.<java.util.Map: java.lang.Object get(java.lang.Object)>(r71);

        $z15 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: boolean isMapEntryTypeKnown()>();

        if $z15 == 0 goto label07;

        $r49 = new org.springframework.expression.TypedValue;

        $r50 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getMapValueTypeDescriptor()>();

        specialinvoke $r49.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r47, $r50);

        return $r49;

     label07:
        $r48 = new org.springframework.expression.TypedValue;

        specialinvoke $r48.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r47);

        return $r48;

     label08:
        if $r2 != null goto label09;

        $r43 = new org.springframework.expression.spel.SpelEvaluationException;

        $i7 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r45 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CANNOT_INDEX_INTO_NULL_VALUE>;

        $r44 = newarray (java.lang.Object)[0];

        specialinvoke $r43.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i7, $r45, $r44);

        throw $r43;

     label09:
        $z2 = $r2 instanceof java.util.Collection;

        if $z2 != 0 goto label10;

        $r42 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z12 = virtualinvoke $r42.<java.lang.Class: boolean isArray()>();

        if $z12 != 0 goto label10;

        $z13 = $r2 instanceof java.lang.String;

        if $z13 == 0 goto label18;

     label10:
        $r72 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r73 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r69, $r72);

        $r74 = (java.lang.Integer) $r73;

        $i10 = virtualinvoke $r74.<java.lang.Integer: int intValue()>();

        $r75 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z17 = virtualinvoke $r75.<java.lang.Class: boolean isArray()>();

        if $z17 == 0 goto label11;

        $r39 = new org.springframework.expression.TypedValue;

        $r40 = specialinvoke r5.<org.springframework.expression.spel.ast.Indexer: java.lang.Object accessArrayElement(java.lang.Object,int)>($r2, $i10);

        $r41 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        specialinvoke $r39.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r40, $r41);

        return $r39;

     label11:
        $z3 = $r2 instanceof java.util.Collection;

        if $z3 == 0 goto label16;

        r76 = (java.util.Collection) $r2;

        $i4 = interfaceinvoke r76.<java.util.Collection: int size()>();

        if $i10 < $i4 goto label12;

        $r33 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $z11 = specialinvoke r5.<org.springframework.expression.spel.ast.Indexer: boolean growCollection(org.springframework.expression.spel.ExpressionState,java.lang.Class,int,java.util.Collection)>(r0, $r33, $i10, r76);

        if $z11 != 0 goto label12;

        $r34 = new org.springframework.expression.spel.SpelEvaluationException;

        $i5 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r36 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage COLLECTION_INDEX_OUT_OF_BOUNDS>;

        $r35 = newarray (java.lang.Object)[2];

        $i6 = interfaceinvoke r76.<java.util.Collection: int size()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r35[0] = $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r35[1] = $r38;

        specialinvoke $r34.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i5, $r36, $r35);

        throw $r34;

     label12:
        i11 = 0;

        $r29 = interfaceinvoke r76.<java.util.Collection: java.util.Iterator iterator()>();

        goto label15;

     label13:
        $r30 = interfaceinvoke $r29.<java.util.Iterator: java.lang.Object next()>();

        if i11 != $i10 goto label14;

        $r31 = new org.springframework.expression.TypedValue;

        $r32 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        specialinvoke $r31.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r30, $r32);

        return $r31;

     label14:
        i11 = i11 + 1;

     label15:
        $z10 = interfaceinvoke $r29.<java.util.Iterator: boolean hasNext()>();

        if $z10 != 0 goto label13;

        goto label18;

     label16:
        $z4 = $r2 instanceof java.lang.String;

        if $z4 == 0 goto label18;

        r77 = (java.lang.String) $r2;

        $i0 = virtualinvoke r77.<java.lang.String: int length()>();

        if $i10 < $i0 goto label17;

        $r24 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r26 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage STRING_INDEX_OUT_OF_BOUNDS>;

        $r25 = newarray (java.lang.Object)[2];

        $i3 = virtualinvoke r77.<java.lang.String: int length()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r25[0] = $r27;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r25[1] = $r28;

        specialinvoke $r24.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r26, $r25);

        throw $r24;

     label17:
        $r22 = new org.springframework.expression.TypedValue;

        $c1 = virtualinvoke r77.<java.lang.String: char charAt(int)>($i10);

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

        specialinvoke $r22.<org.springframework.expression.TypedValue: void <init>(java.lang.Object)>($r23);

        return $r22;

     label18:
        $r78 = virtualinvoke r70.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r79 = virtualinvoke $r78.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r79 != class "Ljava/lang/String;" goto label28;

        $r9 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: java.lang.Class getObjectClass(java.lang.Object)>($r2);

        $r10 = virtualinvoke r70.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r80 = (java.lang.String) $r10;

        $r11 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

     label19:
        $r12 = r5.<org.springframework.expression.spel.ast.Indexer: java.lang.String cachedReadName>;

        if $r12 == null goto label21;

        $r17 = r5.<org.springframework.expression.spel.ast.Indexer: java.lang.String cachedReadName>;

        $z8 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r80);

        if $z8 == 0 goto label21;

        $r18 = r5.<org.springframework.expression.spel.ast.Indexer: java.lang.Class cachedReadTargetType>;

        if $r18 == null goto label21;

        $r19 = r5.<org.springframework.expression.spel.ast.Indexer: java.lang.Class cachedReadTargetType>;

        $z9 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z9 == 0 goto label21;

        $r20 = r5.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.PropertyAccessor cachedReadAccessor>;

        $r21 = interfaceinvoke $r20.<org.springframework.expression.PropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r11, $r2, r80);

     label20:
        return $r21;

     label21:
        $r81 = staticinvoke <org.springframework.expression.spel.ast.AstUtils: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>($r9, r0);

        if $r81 == null goto label28;

        $r13 = interfaceinvoke $r81.<java.util.List: java.util.Iterator iterator()>();

        goto label25;

     label22:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r82 = (org.springframework.expression.PropertyAccessor) $r14;

        $z6 = interfaceinvoke r82.<org.springframework.expression.PropertyAccessor: boolean canRead(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r11, $r2, r80);

        if $z6 == 0 goto label25;

        $z7 = r82 instanceof org.springframework.expression.spel.support.ReflectivePropertyAccessor;

        if $z7 == 0 goto label23;

        $r16 = (org.springframework.expression.spel.support.ReflectivePropertyAccessor) r82;

        r82 = virtualinvoke $r16.<org.springframework.expression.spel.support.ReflectivePropertyAccessor: org.springframework.expression.PropertyAccessor createOptimalAccessor(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r11, $r2, r80);

     label23:
        r5.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.PropertyAccessor cachedReadAccessor> = r82;

        r5.<org.springframework.expression.spel.ast.Indexer: java.lang.String cachedReadName> = r80;

        r5.<org.springframework.expression.spel.ast.Indexer: java.lang.Class cachedReadTargetType> = $r9;

        $r15 = interfaceinvoke r82.<org.springframework.expression.PropertyAccessor: org.springframework.expression.TypedValue read(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r11, $r2, r80);

     label24:
        return $r15;

     label25:
        $z5 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label22;

     label26:
        goto label28;

     label27:
        $r62 := @caughtexception;

        $r63 = new org.springframework.expression.spel.SpelEvaluationException;

        $i9 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r65 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INDEXING_NOT_SUPPORTED_FOR_TYPE>;

        $r64 = newarray (java.lang.Object)[1];

        $r66 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.String asString()>();

        $r64[0] = $r66;

        specialinvoke $r63.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i9, $r62, $r65, $r64);

        throw $r63;

     label28:
        $r83 = new org.springframework.expression.spel.SpelEvaluationException;

        $i12 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r84 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INDEXING_NOT_SUPPORTED_FOR_TYPE>;

        $r85 = newarray (java.lang.Object)[1];

        $r86 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.String asString()>();

        $r85[0] = $r86;

        specialinvoke $r83.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i12, $r84, $r85);

        throw $r83;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch org.springframework.expression.AccessException from label19 to label20 with label27;
        catch org.springframework.expression.AccessException from label21 to label24 with label27;
        catch org.springframework.expression.AccessException from label25 to label26 with label27;
    }

    public boolean isWritable(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.ExpressionState r1;
        org.springframework.expression.spel.ast.Indexer r0;

        r0 := @this: org.springframework.expression.spel.ast.Indexer;

        r1 := @parameter0: org.springframework.expression.spel.ExpressionState;

        return 1;
    }

    public void setValue(org.springframework.expression.spel.ExpressionState, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.PropertyAccessor r17, $r24;
        java.lang.Integer $r27, $r38, $r39, $r42;
        java.util.Map r58;
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r5;
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.ast.SpelNodeImpl $r6;
        org.springframework.expression.spel.SpelEvaluationException $r28, $r35, $r50, $r54, $r65;
        java.lang.Object[] $r29, $r36, $r51, $r55, $r67;
        java.lang.String $r14, $r21, $r31, $r57, r63, $r68;
        org.springframework.expression.TypedValue $r1, $r7;
        org.springframework.expression.spel.SpelMessage $r30, $r37, $r52, $r56, $r66;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.Collection r61;
        org.springframework.expression.AccessException $r53;
        org.springframework.expression.EvaluationContext $r13;
        java.util.List r62, $r64;
        org.springframework.expression.spel.ast.Indexer r4;
        org.springframework.core.convert.TypeDescriptor $r3, $r8, $r25, $r32, $r40, $r47, $r49;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.Iterator $r15;
        java.lang.Object $r2, $r10, $r12, $r16, $r18, $r19, r20, $r26, $r33, $r41, $r43, $r45, r59, r60;
        java.lang.Class $r9, $r11, $r22, $r23, $r34, $r44, $r46, $r48;

        r4 := @this: org.springframework.expression.spel.ast.Indexer;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r20 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue getActiveContextObject()>();

        $r2 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r3 = virtualinvoke $r1.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r5 = r4.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r6 = $r5[0];

        $r7 = virtualinvoke $r6.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r0);

        if $r2 != null goto label01;

        $r50 = new org.springframework.expression.spel.SpelEvaluationException;

        $r52 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage CANNOT_INDEX_INTO_NULL_VALUE>;

        $r51 = newarray (java.lang.Object)[0];

        specialinvoke $r50.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r52, $r51);

        throw $r50;

     label01:
        $z0 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: boolean isMap()>();

        if $z0 == 0 goto label03;

        r58 = (java.util.Map) $r2;

        r59 = $r7;

        r60 = r20;

        $z9 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: boolean isMapEntryTypeKnown()>();

        if $z9 == 0 goto label02;

        $r45 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r46 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapKeyType()>();

        $r47 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r46);

        r59 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r45, $r47);

        $r48 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getMapValueType()>();

        $r49 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>($r48);

        r60 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r20, $r49);

     label02:
        interfaceinvoke r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r60);

        return;

     label03:
        $z1 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: boolean isArray()>();

        if $z1 == 0 goto label04;

        $r40 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r41 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(org.springframework.expression.TypedValue,org.springframework.core.convert.TypeDescriptor)>($r7, $r40);

        $r42 = (java.lang.Integer) $r41;

        $i5 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        $r43 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r44 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        specialinvoke r4.<org.springframework.expression.spel.ast.Indexer: void setArrayElement(org.springframework.expression.spel.ExpressionState,java.lang.Object,int,java.lang.Object,java.lang.Class)>(r0, $r43, $i5, r20, $r44);

        return;

     label04:
        $z2 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: boolean isCollection()>();

        if $z2 == 0 goto label07;

        $r25 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r26 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(org.springframework.expression.TypedValue,org.springframework.core.convert.TypeDescriptor)>($r7, $r25);

        $r27 = (java.lang.Integer) $r26;

        $i0 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        r61 = (java.util.Collection) $r2;

        $i1 = interfaceinvoke r61.<java.util.Collection: int size()>();

        if $i0 < $i1 goto label05;

        $r34 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getElementType()>();

        $z8 = specialinvoke r4.<org.springframework.expression.spel.ast.Indexer: boolean growCollection(org.springframework.expression.spel.ExpressionState,java.lang.Class,int,java.util.Collection)>(r0, $r34, $i0, r61);

        if $z8 != 0 goto label05;

        $r35 = new org.springframework.expression.spel.SpelEvaluationException;

        $i3 = virtualinvoke r4.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r37 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage COLLECTION_INDEX_OUT_OF_BOUNDS>;

        $r36 = newarray (java.lang.Object)[2];

        $i4 = interfaceinvoke r61.<java.util.Collection: int size()>();

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r36[0] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r36[1] = $r39;

        specialinvoke $r35.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r37, $r36);

        throw $r35;

     label05:
        $z7 = $r2 instanceof java.util.List;

        if $z7 == 0 goto label06;

        r62 = (java.util.List) $r2;

        $r32 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor getElementTypeDescriptor()>();

        $r33 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r20, $r32);

        interfaceinvoke r62.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, $r33);

        return;

     label06:
        $r28 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r4.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r30 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INDEXING_NOT_SUPPORTED_FOR_TYPE>;

        $r29 = newarray (java.lang.Object)[1];

        $r31 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.String asString()>();

        $r29[0] = $r31;

        specialinvoke $r28.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r30, $r29);

        throw $r28;

     label07:
        $r8 = virtualinvoke $r7.<org.springframework.expression.TypedValue: org.springframework.core.convert.TypeDescriptor getTypeDescriptor()>();

        $r9 = virtualinvoke $r8.<org.springframework.core.convert.TypeDescriptor: java.lang.Class getType()>();

        if $r9 != class "Ljava/lang/String;" goto label16;

        $r10 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r11 = virtualinvoke r4.<org.springframework.expression.spel.ast.Indexer: java.lang.Class getObjectClass(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r7.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        r63 = (java.lang.String) $r12;

        $r13 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext getEvaluationContext()>();

     label08:
        $r14 = r4.<org.springframework.expression.spel.ast.Indexer: java.lang.String cachedWriteName>;

        if $r14 == null goto label10;

        $r21 = r4.<org.springframework.expression.spel.ast.Indexer: java.lang.String cachedWriteName>;

        $z5 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r63);

        if $z5 == 0 goto label10;

        $r22 = r4.<org.springframework.expression.spel.ast.Indexer: java.lang.Class cachedWriteTargetType>;

        if $r22 == null goto label10;

        $r23 = r4.<org.springframework.expression.spel.ast.Indexer: java.lang.Class cachedWriteTargetType>;

        $z6 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label10;

        $r24 = r4.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.PropertyAccessor cachedWriteAccessor>;

        interfaceinvoke $r24.<org.springframework.expression.PropertyAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>($r13, $r2, r63, r20);

     label09:
        return;

     label10:
        $r64 = staticinvoke <org.springframework.expression.spel.ast.AstUtils: java.util.List getPropertyAccessorsToTry(java.lang.Class,org.springframework.expression.spel.ExpressionState)>($r11, r0);

        if $r64 == null goto label16;

        $r15 = interfaceinvoke $r64.<java.util.List: java.util.Iterator iterator()>();

        goto label13;

     label11:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.springframework.expression.PropertyAccessor) $r16;

        $r18 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z4 = interfaceinvoke r17.<org.springframework.expression.PropertyAccessor: boolean canWrite(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String)>($r13, $r18, r63);

        if $z4 == 0 goto label13;

        r4.<org.springframework.expression.spel.ast.Indexer: java.lang.String cachedWriteName> = r63;

        r4.<org.springframework.expression.spel.ast.Indexer: java.lang.Class cachedWriteTargetType> = $r11;

        r4.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.PropertyAccessor cachedWriteAccessor> = r17;

        $r19 = virtualinvoke $r1.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        interfaceinvoke r17.<org.springframework.expression.PropertyAccessor: void write(org.springframework.expression.EvaluationContext,java.lang.Object,java.lang.String,java.lang.Object)>($r13, $r19, r63, r20);

     label12:
        return;

     label13:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label11;

     label14:
        goto label16;

     label15:
        $r53 := @caughtexception;

        $r54 = new org.springframework.expression.spel.SpelEvaluationException;

        $i6 = virtualinvoke r4.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r56 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage EXCEPTION_DURING_PROPERTY_WRITE>;

        $r55 = newarray (java.lang.Object)[2];

        $r55[0] = r63;

        $r57 = virtualinvoke $r53.<org.springframework.expression.AccessException: java.lang.String getMessage()>();

        $r55[1] = $r57;

        specialinvoke $r54.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i6, $r53, $r56, $r55);

        throw $r54;

     label16:
        $r65 = new org.springframework.expression.spel.SpelEvaluationException;

        $i7 = virtualinvoke r4.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r66 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage INDEXING_NOT_SUPPORTED_FOR_TYPE>;

        $r67 = newarray (java.lang.Object)[1];

        $r68 = virtualinvoke $r3.<org.springframework.core.convert.TypeDescriptor: java.lang.String asString()>();

        $r67[0] = $r68;

        specialinvoke $r65.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i7, $r66, $r67);

        throw $r65;

        catch org.springframework.expression.AccessException from label08 to label09 with label15;
        catch org.springframework.expression.AccessException from label10 to label12 with label15;
        catch org.springframework.expression.AccessException from label13 to label14 with label15;
    }

    private boolean growCollection(org.springframework.expression.spel.ExpressionState, java.lang.Class, int, java.util.Collection)
    {
        org.springframework.expression.spel.SpelEvaluationException $r14, $r15;
        java.lang.Object[] $r6, $r12;
        org.springframework.expression.spel.ast.Indexer r5;
        int i0, $i1, $i2, $i3, i4, $i6;
        boolean $z0;
        org.springframework.expression.spel.SpelMessage $r7, $r13;
        java.util.Collection r2;
        org.springframework.expression.spel.SpelParserConfiguration $r1;
        java.lang.Exception $r10;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Class r3;
        java.lang.Object $r8, $r9;

        r5 := @this: org.springframework.expression.spel.ast.Indexer;

        r0 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        r2 := @parameter3: java.util.Collection;

        $r1 = virtualinvoke r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration getConfiguration()>();

        $z0 = virtualinvoke $r1.<org.springframework.expression.spel.SpelParserConfiguration: boolean isAutoGrowCollections()>();

        if $z0 == 0 goto label8;

     label1:
        $i1 = interfaceinvoke r2.<java.util.Collection: int size()>();

        i4 = i0 - $i1;

        if r3 == null goto label2;

        if r3 != class "Ljava/lang/Object;" goto label4;

     label2:
        $r14 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r7 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_GROW_COLLECTION_UNKNOWN_ELEMENT_TYPE>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r14.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r7, $r6);

        throw $r14;

     label3:
        $r8 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        $i6 = (int) -1;

        i4 = i4 + $i6;

     label4:
        if i4 > 0 goto label3;

        $r9 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $r15 = new org.springframework.expression.spel.SpelEvaluationException;

        $i3 = virtualinvoke r5.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r13 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage UNABLE_TO_GROW_COLLECTION>;

        $r12 = newarray (java.lang.Object)[0];

        specialinvoke $r15.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,java.lang.Throwable,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i3, $r10, $r13, $r12);

        throw $r15;

     label7:
        interfaceinvoke r2.<java.util.Collection: boolean add(java.lang.Object)>($r9);

        return 1;

     label8:
        return 0;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.Indexer r1;
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.String $r3, $r4;
        org.springframework.expression.spel.SpelNode $r2;

        r1 := @this: org.springframework.expression.spel.ast.Indexer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        i0 = 0;

        goto label3;

     label1:
        if i0 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.Indexer: org.springframework.expression.spel.SpelNode getChild(int)>(i0);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        i0 = i0 + 1;

     label3:
        $i1 = virtualinvoke r1.<org.springframework.expression.spel.ast.Indexer: int getChildCount()>();

        if i0 < $i1 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void setArrayElement(org.springframework.expression.spel.ExpressionState, java.lang.Object, int, java.lang.Object, java.lang.Class) throws org.springframework.expression.EvaluationException
    {
        java.lang.Float $r20;
        byte[] r46;
        java.lang.Integer $r38;
        byte $b3;
        java.lang.Character $r32;
        java.lang.Long $r29;
        org.springframework.expression.spel.ExpressionState r11;
        java.lang.Object[] r47;
        java.lang.Double $r23;
        double[] r44;
        long $l9;
        float[] r45;
        short $s7;
        boolean[] r40;
        char[] r41;
        int[] r39;
        java.lang.Short $r26;
        java.lang.Byte $r17;
        boolean $z0;
        float $f0;
        short[] r43;
        org.springframework.expression.spel.ast.Indexer r10;
        long[] r42;
        org.springframework.core.convert.TypeDescriptor $r13, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36;
        int i0, $i1, $i2, $i4, $i5, $i6, $i8, $i10, $i12, $i13, $i14;
        java.lang.Boolean $r35;
        double $d0;
        char $c11;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.Object r9, r12, $r14, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37;

        r10 := @this: org.springframework.expression.spel.ast.Indexer;

        r11 := @parameter0: org.springframework.expression.spel.ExpressionState;

        r9 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r12 := @parameter3: java.lang.Object;

        r0 := @parameter4: java.lang.Class;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        r39 = (int[]) r9;

        $i13 = lengthof r39;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i13, i0);

        $r36 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Integer;");

        $r37 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r36);

        $r38 = (java.lang.Integer) $r37;

        $i14 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        r39[i0] = $i14;

        goto label9;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r2 goto label2;

        r40 = (boolean[]) r9;

        $i12 = lengthof r40;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i12, i0);

        $r33 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $r34 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r33);

        $r35 = (java.lang.Boolean) $r34;

        $z0 = virtualinvoke $r35.<java.lang.Boolean: boolean booleanValue()>();

        r40[i0] = $z0;

        goto label9;

     label2:
        $r3 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r3 goto label3;

        r41 = (char[]) r9;

        $i10 = lengthof r41;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i10, i0);

        $r30 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Character;");

        $r31 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r30);

        $r32 = (java.lang.Character) $r31;

        $c11 = virtualinvoke $r32.<java.lang.Character: char charValue()>();

        r41[i0] = $c11;

        goto label9;

     label3:
        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r4 goto label4;

        r42 = (long[]) r9;

        $i8 = lengthof r42;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i8, i0);

        $r27 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Long;");

        $r28 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r27);

        $r29 = (java.lang.Long) $r28;

        $l9 = virtualinvoke $r29.<java.lang.Long: long longValue()>();

        r42[i0] = $l9;

        goto label9;

     label4:
        $r5 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r5 goto label5;

        r43 = (short[]) r9;

        $i6 = lengthof r43;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i6, i0);

        $r24 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Short;");

        $r25 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r24);

        $r26 = (java.lang.Short) $r25;

        $s7 = virtualinvoke $r26.<java.lang.Short: short shortValue()>();

        r43[i0] = $s7;

        goto label9;

     label5:
        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r6 goto label6;

        r44 = (double[]) r9;

        $i5 = lengthof r44;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i5, i0);

        $r21 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Double;");

        $r22 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r21);

        $r23 = (java.lang.Double) $r22;

        $d0 = virtualinvoke $r23.<java.lang.Double: double doubleValue()>();

        r44[i0] = $d0;

        goto label9;

     label6:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r7 goto label7;

        r45 = (float[]) r9;

        $i4 = lengthof r45;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i4, i0);

        $r18 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Float;");

        $r19 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r18);

        $r20 = (java.lang.Float) $r19;

        $f0 = virtualinvoke $r20.<java.lang.Float: float floatValue()>();

        r45[i0] = $f0;

        goto label9;

     label7:
        $r8 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r8 goto label8;

        r46 = (byte[]) r9;

        $i2 = lengthof r46;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i2, i0);

        $r15 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(class "Ljava/lang/Byte;");

        $r16 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r15);

        $r17 = (java.lang.Byte) $r16;

        $b3 = virtualinvoke $r17.<java.lang.Byte: byte byteValue()>();

        r46[i0] = $b3;

        goto label9;

     label8:
        r47 = (java.lang.Object[]) r9;

        $i1 = lengthof r47;

        specialinvoke r10.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i1, i0);

        $r13 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor valueOf(java.lang.Class)>(r0);

        $r14 = virtualinvoke r11.<org.springframework.expression.spel.ExpressionState: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>(r12, $r13);

        r47[i0] = $r14;

     label9:
        return;
    }

    private java.lang.Object accessArrayElement(java.lang.Object, int) throws org.springframework.expression.spel.SpelEvaluationException
    {
        java.lang.Float $r14;
        byte[] r28;
        java.lang.Integer $r20;
        byte $b3;
        java.lang.Character $r18;
        java.lang.Long $r17;
        int[] r21;
        java.lang.Short $r16;
        java.lang.Byte $r13;
        boolean $z0;
        float $f0;
        short[] r25;
        java.lang.Object[] r29;
        java.lang.Double $r15;
        double[] r26;
        long $l9;
        float[] r27;
        short $s7;
        org.springframework.expression.spel.ast.Indexer r11;
        long[] r24;
        int i0, $i1, $i2, $i4, $i5, $i6, $i8, $i10, $i12, $i13, $i14;
        java.lang.Boolean $r19;
        double $d0;
        boolean[] r22;
        char $c11;
        char[] r23;
        java.lang.Object r0, $r12;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r11 := @this: org.springframework.expression.spel.ast.Indexer;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r2 != $r3 goto label1;

        r21 = (int[]) r0;

        $i13 = lengthof r21;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i13, i0);

        $i14 = r21[i0];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        return $r20;

     label1:
        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r2 != $r4 goto label2;

        r22 = (boolean[]) r0;

        $i12 = lengthof r22;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i12, i0);

        $z0 = r22[i0];

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r19;

     label2:
        $r5 = <java.lang.Character: java.lang.Class TYPE>;

        if $r2 != $r5 goto label3;

        r23 = (char[]) r0;

        $i10 = lengthof r23;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i10, i0);

        $c11 = r23[i0];

        $r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c11);

        return $r18;

     label3:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if $r2 != $r6 goto label4;

        r24 = (long[]) r0;

        $i8 = lengthof r24;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i8, i0);

        $l9 = r24[i0];

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        return $r17;

     label4:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if $r2 != $r7 goto label5;

        r25 = (short[]) r0;

        $i6 = lengthof r25;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i6, i0);

        $s7 = r25[i0];

        $r16 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s7);

        return $r16;

     label5:
        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        if $r2 != $r8 goto label6;

        r26 = (double[]) r0;

        $i5 = lengthof r26;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i5, i0);

        $d0 = r26[i0];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r15;

     label6:
        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        if $r2 != $r9 goto label7;

        r27 = (float[]) r0;

        $i4 = lengthof r27;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i4, i0);

        $f0 = r27[i0];

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r14;

     label7:
        $r10 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r2 != $r10 goto label8;

        r28 = (byte[]) r0;

        $i2 = lengthof r28;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i2, i0);

        $b3 = r28[i0];

        $r13 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        return $r13;

     label8:
        r29 = (java.lang.Object[]) r0;

        $i1 = lengthof r29;

        specialinvoke r11.<org.springframework.expression.spel.ast.Indexer: void checkAccess(int,int)>($i1, i0);

        $r12 = r29[i0];

        return $r12;
    }

    private void checkAccess(int, int) throws org.springframework.expression.spel.SpelEvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r0;
        org.springframework.expression.spel.SpelMessage $r3;
        java.lang.Object[] $r2;
        java.lang.Integer $r4, $r5;
        org.springframework.expression.spel.ast.Indexer r1;
        int i0, i1, $i2;

        r1 := @this: org.springframework.expression.spel.ast.Indexer;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 <= i1 goto label1;

        $r0 = new org.springframework.expression.spel.SpelEvaluationException;

        $i2 = virtualinvoke r1.<org.springframework.expression.spel.ast.Indexer: int getStartPosition()>();

        $r3 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage ARRAY_INDEX_OUT_OF_BOUNDS>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r5;

        specialinvoke $r0.<org.springframework.expression.spel.SpelEvaluationException: void <init>(int,org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($i2, $r3, $r2);

        throw $r0;

     label1:
        return;
    }
}
