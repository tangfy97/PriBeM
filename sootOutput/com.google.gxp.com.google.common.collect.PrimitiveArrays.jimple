public final class com.google.gxp.com.google.common.collect.PrimitiveArrays extends java.lang.Object
{

    private void <init>()
    {
        com.google.gxp.com.google.common.collect.PrimitiveArrays r0;

        r0 := @this: com.google.gxp.com.google.common.collect.PrimitiveArrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static short[] toShortArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        short $s2;
        java.lang.Short r4;
        int $i0, $i1, i3;
        java.lang.Object $r3;
        short[] r1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        i3 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (short)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Short) $r3;

        $i1 = i3;

        i3 = i3 + 1;

        $s2 = virtualinvoke r4.<java.lang.Short: short shortValue()>();

        r1[$i1] = $s2;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(short[])
    {
        com.google.gxp.com.google.common.collect.PrimitiveArrays$ShortArray $r0;
        short[] r1;

        r1 := @parameter0: short[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$ShortArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$ShortArray: void <init>(short[])>(r1);

        return $r0;
    }

    public static int[] toIntArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.Integer r4;
        int[] r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        i3 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (int)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Integer) $r3;

        $i1 = i3;

        i3 = i3 + 1;

        $i2 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        r1[$i1] = $i2;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(int[])
    {
        int[] r1;
        com.google.gxp.com.google.common.collect.PrimitiveArrays$IntegerArray $r0;

        r1 := @parameter0: int[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$IntegerArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$IntegerArray: void <init>(int[])>(r1);

        return $r0;
    }

    public static double[] toDoubleArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.lang.Double r4;
        java.util.Collection r0;
        double[] r1;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        boolean $z0;
        double $d0;

        r0 := @parameter0: java.util.Collection;

        i2 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (double)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Double) $r3;

        $i1 = i2;

        i2 = i2 + 1;

        $d0 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        r1[$i1] = $d0;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(double[])
    {
        double[] r1;
        com.google.gxp.com.google.common.collect.PrimitiveArrays$DoubleArray $r0;

        r1 := @parameter0: double[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$DoubleArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$DoubleArray: void <init>(double[])>(r1);

        return $r0;
    }

    public static float[] toFloatArray(java.util.Collection)
    {
        java.lang.Float r4;
        java.util.Iterator $r2;
        java.util.Collection r0;
        float[] r1;
        int $i0, $i1, i2;
        float $f0;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        i2 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (float)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Float) $r3;

        $i1 = i2;

        i2 = i2 + 1;

        $f0 = virtualinvoke r4.<java.lang.Float: float floatValue()>();

        r1[$i1] = $f0;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(float[])
    {
        com.google.gxp.com.google.common.collect.PrimitiveArrays$FloatArray $r0;
        float[] r1;

        r1 := @parameter0: float[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$FloatArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$FloatArray: void <init>(float[])>(r1);

        return $r0;
    }

    public static long[] toLongArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        long $l2;
        long[] r1;
        java.lang.Long r4;
        int $i0, $i1, i3;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        i3 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (long)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Long) $r3;

        $i1 = i3;

        i3 = i3 + 1;

        $l2 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        r1[$i1] = $l2;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(long[])
    {
        long[] r1;
        com.google.gxp.com.google.common.collect.PrimitiveArrays$LongArray $r0;

        r1 := @parameter0: long[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$LongArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$LongArray: void <init>(long[])>(r1);

        return $r0;
    }

    public static char[] toCharArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        char $c2;
        java.lang.Character r4;
        int $i0, $i1, i3;
        char[] r1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        i3 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (char)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Character) $r3;

        $i1 = i3;

        i3 = i3 + 1;

        $c2 = virtualinvoke r4.<java.lang.Character: char charValue()>();

        r1[$i1] = $c2;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(char[])
    {
        com.google.gxp.com.google.common.collect.PrimitiveArrays$CharacterArray $r0;
        char[] r1;

        r1 := @parameter0: char[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$CharacterArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$CharacterArray: void <init>(char[])>(r1);

        return $r0;
    }

    public static boolean[] toBooleanArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        boolean[] r1;
        int $i0, $i1, i2;
        java.lang.Boolean r4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        i2 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (boolean)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Boolean) $r3;

        $i1 = i2;

        i2 = i2 + 1;

        $z1 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        r1[$i1] = $z1;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(boolean[])
    {
        boolean[] r1;
        com.google.gxp.com.google.common.collect.PrimitiveArrays$BooleanArray $r0;

        r1 := @parameter0: boolean[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$BooleanArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$BooleanArray: void <init>(boolean[])>(r1);

        return $r0;
    }

    public static byte[] toByteArray(java.util.Collection)
    {
        byte[] r1;
        java.util.Iterator $r2;
        java.util.Collection r0;
        byte $b2;
        int $i0, $i1, i3;
        java.lang.Object $r3;
        java.lang.Byte r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        i3 = 0;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (byte)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Byte) $r3;

        $i1 = i3;

        i3 = i3 + 1;

        $b2 = virtualinvoke r4.<java.lang.Byte: byte byteValue()>();

        r1[$i1] = $b2;

        goto label1;

     label2:
        return r1;
    }

    public static java.util.List asList(byte[])
    {
        byte[] r1;
        com.google.gxp.com.google.common.collect.PrimitiveArrays$ByteArray $r0;

        r1 := @parameter0: byte[];

        $r0 = new com.google.gxp.com.google.common.collect.PrimitiveArrays$ByteArray;

        specialinvoke $r0.<com.google.gxp.com.google.common.collect.PrimitiveArrays$ByteArray: void <init>(byte[])>(r1);

        return $r0;
    }
}
