public class org.codehaus.groovy.ast.expr.TernaryExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression;
    private org.codehaus.groovy.ast.expr.Expression trueExpression;
    private org.codehaus.groovy.ast.expr.Expression falseExpression;

    public void <init>(org.codehaus.groovy.ast.expr.BooleanExpression, org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression r1;
        org.codehaus.groovy.ast.expr.TernaryExpression r0;
        org.codehaus.groovy.ast.expr.Expression r2, r3;

        r0 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.BooleanExpression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        r3 := @parameter2: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression> = r1;

        r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression trueExpression> = r2;

        r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression falseExpression> = r3;

        return;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.TernaryExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitTernaryExpression(org.codehaus.groovy.ast.expr.TernaryExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r3, $r6;
        org.codehaus.groovy.ast.expr.TernaryExpression $r0, r2;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;
        org.codehaus.groovy.ast.expr.Expression $r4, $r5, $r7, $r8, $r9;

        r2 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.TernaryExpression;

        $r3 = r2.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression>;

        $r4 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r3);

        $r6 = (org.codehaus.groovy.ast.expr.BooleanExpression) $r4;

        $r5 = r2.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression trueExpression>;

        $r7 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r5);

        $r8 = r2.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression falseExpression>;

        $r9 = interfaceinvoke r1.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r8);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.TernaryExpression: void <init>(org.codehaus.groovy.ast.expr.BooleanExpression,org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r6, $r7, $r9);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r2);

        return $r0;
    }

    public java.lang.String toString()
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r5;
        org.codehaus.groovy.ast.expr.TernaryExpression r1;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.String $r2, $r14;
        org.codehaus.groovy.ast.expr.Expression $r8, $r11;

        r1 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r5 = r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ? ");

        $r8 = r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression trueExpression>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r11 = r1.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression falseExpression>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    public org.codehaus.groovy.ast.expr.BooleanExpression getBooleanExpression()
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r1;
        org.codehaus.groovy.ast.expr.TernaryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression>;

        return $r1;
    }

    public org.codehaus.groovy.ast.expr.Expression getFalseExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.TernaryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression falseExpression>;

        return $r1;
    }

    public org.codehaus.groovy.ast.expr.Expression getTrueExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.expr.TernaryExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression trueExpression>;

        return $r1;
    }

    public java.lang.String getText()
    {
        org.codehaus.groovy.ast.expr.BooleanExpression $r3;
        org.codehaus.groovy.ast.expr.TernaryExpression r2;
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r9, $r10, $r13;
        java.lang.String $r4, $r8, $r12, $r14;
        org.codehaus.groovy.ast.expr.Expression $r7, $r11;

        r2 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r3 = r2.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.BooleanExpression booleanExpression>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.expr.BooleanExpression: java.lang.String getText()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ? ");

        $r7 = r2.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression trueExpression>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r11 = r2.<org.codehaus.groovy.ast.expr.TernaryExpression: org.codehaus.groovy.ast.expr.Expression falseExpression>;

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r14;
    }

    public org.codehaus.groovy.ast.ClassNode getType()
    {
        org.codehaus.groovy.ast.expr.TernaryExpression r1;
        org.codehaus.groovy.ast.ClassNode $r0;

        r1 := @this: org.codehaus.groovy.ast.expr.TernaryExpression;

        $r0 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode OBJECT_TYPE>;

        return $r0;
    }
}
