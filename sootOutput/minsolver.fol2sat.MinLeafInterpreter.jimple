final class minsolver.fol2sat.MinLeafInterpreter extends java.lang.Object
{
    private final kodkod.engine.bool.BooleanFactory factory;
    private final kodkod.instance.Universe universe;
    private final java.util.Map vars;
    private final java.util.Map lowers;
    private final java.util.Map uppers;
    private final kodkod.util.ints.SparseSequence ints;

    private void <init>(kodkod.instance.Universe, java.util.Map, java.util.Map, kodkod.util.ints.SparseSequence, kodkod.engine.bool.BooleanFactory, java.util.Map)
    {
        kodkod.engine.bool.BooleanFactory r5;
        java.util.Map r2, r3, r6;
        kodkod.instance.Universe r1;
        kodkod.util.ints.SparseSequence r4;
        minsolver.fol2sat.MinLeafInterpreter r0;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        r1 := @parameter0: kodkod.instance.Universe;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: kodkod.util.ints.SparseSequence;

        r5 := @parameter4: kodkod.engine.bool.BooleanFactory;

        r6 := @parameter5: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe> = r1;

        r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map lowers> = r2;

        r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map uppers> = r3;

        r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.util.ints.SparseSequence ints> = r4;

        r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory> = r5;

        r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map vars> = r6;

        return;
    }

    private void <init>(kodkod.instance.Universe, java.util.Map, kodkod.util.ints.SparseSequence, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r4;
        kodkod.engine.bool.BooleanFactory $r5;
        java.util.Map r2, $r6;
        kodkod.instance.Universe r1;
        kodkod.util.ints.SparseSequence r3;
        minsolver.fol2sat.MinLeafInterpreter r0;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        r1 := @parameter0: kodkod.instance.Universe;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: kodkod.util.ints.SparseSequence;

        r4 := @parameter3: kodkod.engine.config.Options;

        $r5 = staticinvoke <kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanFactory constantFactory(kodkod.engine.config.Options)>(r4);

        $r6 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        specialinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: void <init>(kodkod.instance.Universe,java.util.Map,java.util.Map,kodkod.util.ints.SparseSequence,kodkod.engine.bool.BooleanFactory,java.util.Map)>(r1, r2, r2, r3, $r5, $r6);

        return;
    }

    static final minsolver.fol2sat.MinLeafInterpreter exact(kodkod.instance.Instance, kodkod.engine.config.Options)
    {
        kodkod.instance.Instance r1;
        kodkod.engine.config.Options r5;
        java.util.Map $r3;
        kodkod.instance.Universe $r2;
        kodkod.util.ints.SparseSequence $r4;
        minsolver.fol2sat.MinLeafInterpreter $r0;

        r1 := @parameter0: kodkod.instance.Instance;

        r5 := @parameter1: kodkod.engine.config.Options;

        $r0 = new minsolver.fol2sat.MinLeafInterpreter;

        $r2 = virtualinvoke r1.<kodkod.instance.Instance: kodkod.instance.Universe universe()>();

        $r3 = virtualinvoke r1.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r4 = virtualinvoke r1.<kodkod.instance.Instance: kodkod.util.ints.SparseSequence intTuples()>();

        specialinvoke $r0.<minsolver.fol2sat.MinLeafInterpreter: void <init>(kodkod.instance.Universe,java.util.Map,kodkod.util.ints.SparseSequence,kodkod.engine.config.Options)>($r2, $r3, $r4, r5);

        return $r0;
    }

    static final minsolver.fol2sat.MinLeafInterpreter exact(kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r14;
        kodkod.util.ints.IntRange $r8;
        minsolver.fol2sat.MinLeafInterpreter $r9;
        java.util.LinkedHashMap $r0;
        kodkod.instance.Bounds r1;
        java.util.Map $r11, $r12;
        int $i0, $i1, i2, $i3, $i4, $i5, i6;
        kodkod.instance.Universe $r10;
        kodkod.instance.TupleSet $r6, $r7;
        boolean $z0;
        java.util.Iterator $r3;
        kodkod.engine.bool.BooleanFactory $r15;
        java.util.Set $r2;
        kodkod.util.ints.SparseSequence $r13;
        java.lang.Object $r4;
        kodkod.ast.Relation r5;

        r1 := @parameter0: kodkod.instance.Bounds;

        r14 := @parameter1: kodkod.engine.config.Options;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        i6 = 1;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Relation) $r4;

        $r6 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r5);

        $i0 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $r7 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r5);

        $i1 = virtualinvoke $r7.<kodkod.instance.TupleSet: int size()>();

        i2 = $i0 - $i1;

        if i2 <= 0 goto label2;

        $i3 = i6 + i2;

        $i4 = $i3 - 1;

        $r8 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntRange range(int,int)>(i6, $i4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r8);

        i6 = i6 + i2;

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r9 = new minsolver.fol2sat.MinLeafInterpreter;

        $r10 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r11 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Map lowerBounds()>();

        $r12 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Map upperBounds()>();

        $r13 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intBounds()>();

        $i5 = i6 - 1;

        $r15 = staticinvoke <kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanFactory factory(int,kodkod.engine.config.Options)>($i5, r14);

        specialinvoke $r9.<minsolver.fol2sat.MinLeafInterpreter: void <init>(kodkod.instance.Universe,java.util.Map,java.util.Map,kodkod.util.ints.SparseSequence,kodkod.engine.bool.BooleanFactory,java.util.Map)>($r10, $r11, $r12, $r13, $r15, $r0);

        return $r9;
    }

    static final minsolver.fol2sat.MinLeafInterpreter overapproximating(kodkod.instance.Bounds, kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r5;
        kodkod.instance.Bounds r1;
        java.util.Map $r3;
        kodkod.instance.Universe $r2;
        kodkod.util.ints.SparseSequence $r4;
        minsolver.fol2sat.MinLeafInterpreter $r0;

        r1 := @parameter0: kodkod.instance.Bounds;

        r5 := @parameter1: kodkod.engine.config.Options;

        $r0 = new minsolver.fol2sat.MinLeafInterpreter;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r3 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Map upperBounds()>();

        $r4 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intBounds()>();

        specialinvoke $r0.<minsolver.fol2sat.MinLeafInterpreter: void <init>(kodkod.instance.Universe,java.util.Map,kodkod.util.ints.SparseSequence,kodkod.engine.config.Options)>($r2, $r3, $r4, r5);

        return $r0;
    }

    public final kodkod.engine.bool.BooleanFactory factory()
    {
        kodkod.engine.bool.BooleanFactory $r1;
        minsolver.fol2sat.MinLeafInterpreter r0;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        $r1 = r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory>;

        return $r1;
    }

    public final kodkod.instance.Universe universe()
    {
        kodkod.instance.Universe $r1;
        minsolver.fol2sat.MinLeafInterpreter r0;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        $r1 = r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe>;

        return $r1;
    }

    public final java.util.Map vars()
    {
        kodkod.util.ints.IntRange $r11;
        minsolver.fol2sat.MinLeafInterpreter r1;
        java.util.LinkedHashMap $r0;
        java.util.Map $r2, $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        kodkod.util.ints.IntSet $r12;
        java.util.Set $r4;
        java.lang.Object $r6, $r8, $r10;
        kodkod.ast.Relation $r9;

        r1 := @this: minsolver.fol2sat.MinLeafInterpreter;

        $r0 = new java.util.LinkedHashMap;

        $r2 = r1.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map vars>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i1 = $i0 * 4;

        $i2 = $i1 / 3;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int)>($i2);

        $r3 = r1.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map vars>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (kodkod.ast.Relation) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (kodkod.util.ints.IntRange) $r10;

        $r12 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet rangeSet(kodkod.util.ints.IntRange)>($r11);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return $r0;
    }

    public final kodkod.engine.bool.BooleanMatrix interpret(kodkod.ast.Relation)
    {
        kodkod.engine.bool.BooleanVariable $r20;
        kodkod.util.ints.IntIterator $r18;
        java.util.Map $r2, $r3, $r7, $r15;
        kodkod.engine.bool.Dimensions $r13;
        boolean $z0, $z1, $z2;
        kodkod.engine.bool.BooleanFactory $r11, $r19;
        kodkod.ast.Relation r1;
        kodkod.util.ints.IntRange $r17;
        minsolver.fol2sat.MinLeafInterpreter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        kodkod.instance.Universe $r12;
        kodkod.instance.TupleSet $r5, $r9;
        kodkod.util.ints.IntSet $r6, $r10;
        kodkod.engine.bool.BooleanMatrix $r14;
        java.lang.Object $r4, $r8, $r16;
        minsolver.fol2sat.MinUnboundLeafException $r21;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map lowers>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r21 = new minsolver.fol2sat.MinUnboundLeafException;

        specialinvoke $r21.<minsolver.fol2sat.MinUnboundLeafException: void <init>(java.lang.String,kodkod.ast.LeafExpression)>("Unbound relation: ", r1);

        throw $r21;

     label1:
        $r3 = r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map lowers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (kodkod.instance.TupleSet) $r4;

        $r6 = virtualinvoke $r5.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $r7 = r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map uppers>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (kodkod.instance.TupleSet) $r8;

        $r10 = virtualinvoke $r9.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $r11 = r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory>;

        $r12 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe()>();

        $i0 = virtualinvoke $r12.<kodkod.instance.Universe: int size()>();

        $i1 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        $r13 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, $i1);

        $r14 = virtualinvoke $r11.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>($r13, $r10, $r6);

        $i2 = interfaceinvoke $r10.<kodkod.util.ints.IntSet: int size()>();

        $i3 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: int size()>();

        if $i2 <= $i3 goto label4;

        $r15 = r0.<minsolver.fol2sat.MinLeafInterpreter: java.util.Map vars>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r17 = (kodkod.util.ints.IntRange) $r16;

        i6 = virtualinvoke $r17.<kodkod.util.ints.IntRange: int min()>();

        $r18 = interfaceinvoke $r10.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label3;

     label2:
        $i4 = interfaceinvoke $r18.<kodkod.util.ints.IntIterator: int next()>();

        $z1 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: boolean contains(int)>($i4);

        if $z1 != 0 goto label3;

        $r19 = r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory>;

        $i5 = i6;

        i6 = i6 + 1;

        $r20 = virtualinvoke $r19.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanVariable variable(int)>($i5);

        virtualinvoke $r14.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i4, $r20);

     label3:
        $z2 = interfaceinvoke $r18.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

     label4:
        return $r14;
    }

    public final kodkod.engine.bool.BooleanMatrix interpret(kodkod.ast.ConstantExpression)
    {
        kodkod.util.ints.IntIterator $r13;
        kodkod.engine.bool.Dimensions $r15, $r18, $r22, $r29;
        boolean $z0;
        kodkod.engine.bool.BooleanFactory $r14, $r17, $r24, $r28;
        kodkod.ast.Expression $r3, $r4, $r5, $r6;
        java.lang.StringBuilder $r8, $r9;
        kodkod.util.ints.IntRange $r26;
        minsolver.fol2sat.MinLeafInterpreter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        kodkod.ast.ConstantExpression r2;
        kodkod.instance.Universe $r1;
        java.lang.String $r10;
        kodkod.util.ints.IntSet $r11, $r12, $r19, $r20, $r23, $r27;
        java.lang.IllegalArgumentException $r7;
        kodkod.engine.bool.BooleanMatrix $r16, $r21, $r25, $r30;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        r2 := @parameter0: kodkod.ast.ConstantExpression;

        $r1 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.instance.Universe universe()>();

        $i0 = virtualinvoke $r1.<kodkod.instance.Universe: int size()>();

        $r3 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        if r2 != $r3 goto label1;

        $i6 = $i0 - 1;

        $r26 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntRange range(int,int)>(0, $i6);

        $r27 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet rangeSet(kodkod.util.ints.IntRange)>($r26);

        $r28 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r29 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, 1);

        $r30 = virtualinvoke $r28.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>($r29, $r27, $r27);

        return $r30;

     label1:
        $r4 = <kodkod.ast.Expression: kodkod.ast.Expression IDEN>;

        if r2 != $r4 goto label4;

        $r22 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, 2);

        $i3 = virtualinvoke $r22.<kodkod.engine.bool.Dimensions: int capacity()>();

        $r23 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i3);

        i7 = 0;

        goto label3;

     label2:
        $i4 = i7 * $i0;

        $i5 = $i4 + i7;

        interfaceinvoke $r23.<kodkod.util.ints.IntSet: boolean add(int)>($i5);

        i7 = i7 + 1;

     label3:
        if i7 < $i0 goto label2;

        $r24 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r25 = virtualinvoke $r24.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>($r22, $r23, $r23);

        return $r25;

     label4:
        $r5 = <kodkod.ast.Expression: kodkod.ast.Expression NONE>;

        if r2 != $r5 goto label5;

        $r17 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r18 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, 1);

        $r20 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        $r19 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        $r21 = virtualinvoke $r17.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>($r18, $r20, $r19);

        return $r21;

     label5:
        $r6 = <kodkod.ast.Expression: kodkod.ast.Expression INTS>;

        if r2 != $r6 goto label8;

        $r11 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i0);

        $r12 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.util.ints.IntSet ints()>();

        $r13 = interfaceinvoke $r12.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label7;

     label6:
        $i1 = interfaceinvoke $r13.<kodkod.util.ints.IntIterator: int next()>();

        $i2 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: int interpret(int)>($i1);

        interfaceinvoke $r11.<kodkod.util.ints.IntSet: boolean add(int)>($i2);

     label7:
        $z0 = interfaceinvoke $r13.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label6;

        $r14 = virtualinvoke r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r15 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i0, 1);

        $r16 = virtualinvoke $r14.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions,kodkod.util.ints.IntSet,kodkod.util.ints.IntSet)>($r15, $r11, $r11);

        return $r16;

     label8:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown constant expression: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r7;
    }

    public final kodkod.util.ints.IntSet ints()
    {
        kodkod.util.ints.SparseSequence $r1;
        minsolver.fol2sat.MinLeafInterpreter r0;
        kodkod.util.ints.IntSet $r2;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        $r1 = r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.util.ints.SparseSequence ints>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IntSet indices()>();

        return $r2;
    }

    public final int interpret(int)
    {
        kodkod.util.ints.IntSet $r4;
        int i0, $i1;
        java.lang.Object $r2;
        kodkod.util.ints.SparseSequence $r1;
        minsolver.fol2sat.MinLeafInterpreter r0;
        kodkod.instance.TupleSet $r3;

        r0 := @this: minsolver.fol2sat.MinLeafInterpreter;

        i0 := @parameter0: int;

        $r1 = r0.<minsolver.fol2sat.MinLeafInterpreter: kodkod.util.ints.SparseSequence ints>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i0);

        $r3 = (kodkod.instance.TupleSet) $r2;

        $r4 = virtualinvoke $r3.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $i1 = interfaceinvoke $r4.<kodkod.util.ints.IntSet: int min()>();

        return $i1;
    }
}
