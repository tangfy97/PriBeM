public final class org.apache.cxf.jaxrs.provider.AegisJSONProvider extends org.apache.cxf.jaxrs.provider.AegisElementProvider
{
    private java.util.List arrayKeys;
    private boolean serializeAsArray;
    private boolean dropRootElement;
    private boolean ignoreNamespaces;
    private java.util.concurrent.ConcurrentHashMap namespaceMap;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.AegisElementProvider: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap> = $r1;

        return;
    }

    public void setIgnoreNamespaces(boolean)
    {
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean ignoreNamespaces> = z0;

        return;
    }

    public void setDropRootElement(boolean)
    {
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean dropRootElement> = z0;

        return;
    }

    public void setArrayKeys(java.util.List)
    {
        java.util.List r1;
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.List arrayKeys> = r1;

        return;
    }

    public void setSerializeAsArray(boolean)
    {
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean serializeAsArray> = z0;

        return;
    }

    public boolean isReadable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        javax.ws.rs.core.MediaType r4;
        java.lang.reflect.Type r2;
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        java.lang.Class r1;
        java.lang.'annotation'.Annotation[] r3;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MediaType;

        return 1;
    }

    public void setNamespaceMap(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        java.util.Map r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        r2 := @parameter0: java.util.Map;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>(r2);

        r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap> = $r1;

        return;
    }

    public void writeTo(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.cxf.aegis.AegisWriter $r4;
        org.apache.cxf.jaxrs.provider.PrefixCollectingXMLStreamWriter $r6;
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        org.apache.cxf.aegis.type.TypeMapping $r2;
        java.lang.'annotation'.Annotation[] r16;
        javax.ws.rs.core.MediaType r17;
        org.w3c.dom.Document $r10;
        org.apache.cxf.aegis.AegisContext $r1;
        javax.xml.stream.XMLStreamWriter $r13;
        java.io.OutputStream r12;
        java.util.concurrent.ConcurrentHashMap $r7;
        java.lang.Exception $r14;
        org.apache.cxf.staxutils.W3CDOMStreamWriter $r5;
        javax.ws.rs.core.MultivaluedMap r18;
        java.lang.reflect.Type r20;
        javax.ws.rs.WebApplicationException $r15;
        org.apache.cxf.aegis.type.AegisType $r3;
        java.lang.Object r8;
        java.lang.Class r19;
        javax.xml.namespace.QName $r9, $r11;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        r8 := @parameter0: java.lang.Object;

        r19 := @parameter1: java.lang.Class;

        r20 := @parameter2: java.lang.reflect.Type;

        r16 := @parameter3: java.lang.'annotation'.Annotation[];

        r17 := @parameter4: javax.ws.rs.core.MediaType;

        r18 := @parameter5: javax.ws.rs.core.MultivaluedMap;

        r12 := @parameter6: java.io.OutputStream;

        if r19 != null goto label1;

        r19 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

     label1:
        if r20 != null goto label2;

        r20 = r19;

     label2:
        $r1 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: org.apache.cxf.aegis.AegisContext getAegisContext(java.lang.Class,java.lang.reflect.Type)>(r19, r20);

        $r2 = virtualinvoke $r1.<org.apache.cxf.aegis.AegisContext: org.apache.cxf.aegis.type.TypeMapping getTypeMapping()>();

        $r3 = interfaceinvoke $r2.<org.apache.cxf.aegis.type.TypeMapping: org.apache.cxf.aegis.type.AegisType getType(java.lang.reflect.Type)>(r20);

        $r4 = virtualinvoke $r1.<org.apache.cxf.aegis.AegisContext: org.apache.cxf.aegis.AegisWriter createXMLStreamWriter()>();

     label3:
        $r5 = new org.apache.cxf.staxutils.W3CDOMStreamWriter;

        specialinvoke $r5.<org.apache.cxf.staxutils.W3CDOMStreamWriter: void <init>()>();

        $r6 = new org.apache.cxf.jaxrs.provider.PrefixCollectingXMLStreamWriter;

        $r7 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        specialinvoke $r6.<org.apache.cxf.jaxrs.provider.PrefixCollectingXMLStreamWriter: void <init>(javax.xml.stream.XMLStreamWriter,java.util.Map)>($r5, $r7);

        interfaceinvoke $r6.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

        $r9 = virtualinvoke $r3.<org.apache.cxf.aegis.type.AegisType: javax.xml.namespace.QName getSchemaType()>();

        interfaceinvoke $r4.<org.apache.cxf.aegis.AegisWriter: void write(java.lang.Object,javax.xml.namespace.QName,boolean,java.lang.Object,org.apache.cxf.aegis.type.AegisType)>(r8, $r9, 0, $r6, $r3);

        interfaceinvoke $r6.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        interfaceinvoke $r6.<javax.xml.stream.XMLStreamWriter: void close()>();

        $r10 = virtualinvoke $r5.<org.apache.cxf.staxutils.W3CDOMStreamWriter: org.w3c.dom.Document getDocument()>();

        $r11 = virtualinvoke $r3.<org.apache.cxf.aegis.type.AegisType: javax.xml.namespace.QName getSchemaType()>();

        $r13 = virtualinvoke r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: javax.xml.stream.XMLStreamWriter createStreamWriter(javax.xml.namespace.QName,java.io.OutputStream)>($r11, r12);

        interfaceinvoke $r13.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(org.w3c.dom.Document,javax.xml.stream.XMLStreamWriter)>($r10, $r13);

        interfaceinvoke $r13.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        interfaceinvoke $r13.<javax.xml.stream.XMLStreamWriter: void flush()>();

        interfaceinvoke $r13.<javax.xml.stream.XMLStreamWriter: void close()>();

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r15 = new javax.ws.rs.WebApplicationException;

        specialinvoke $r15.<javax.ws.rs.WebApplicationException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    protected javax.xml.stream.XMLStreamWriter createStreamWriter(javax.xml.namespace.QName, java.io.OutputStream) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r0;
        org.codehaus.jettison.mapped.Configuration $r4;
        javax.xml.stream.XMLStreamWriter $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.OutputStream r1;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.List $r5;
        javax.xml.namespace.QName r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        r2 := @parameter0: javax.xml.namespace.QName;

        r1 := @parameter1: java.io.OutputStream;

        $r3 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $z0 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean writeXsiType>;

        if $z0 == 0 goto label1;

        $z2 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean ignoreNamespaces>;

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r4 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: org.codehaus.jettison.mapped.Configuration createConfiguration(java.util.concurrent.ConcurrentHashMap,boolean,boolean,org.codehaus.jettison.mapped.TypeConverter)>($r3, $z3, 0, null);

        $z4 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean writeXsiType>;

        if $z4 == 0 goto label3;

        $z1 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean ignoreNamespaces>;

        if $z1 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        $z6 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean serializeAsArray>;

        $r5 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.List arrayKeys>;

        $z7 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean dropRootElement>;

        $r6 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createStreamWriter(java.io.OutputStream,javax.xml.namespace.QName,boolean,org.codehaus.jettison.mapped.Configuration,boolean,java.util.List,boolean)>(r1, r2, $z5, $r4, $z6, $r5, $z7);

        $z8 = r0.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean ignoreNamespaces>;

        $r7 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createIgnoreNsWriterIfNeeded(javax.xml.stream.XMLStreamWriter,boolean)>($r6, $z8);

        return $r7;
    }

    protected javax.xml.stream.XMLStreamReader createStreamReader(org.apache.cxf.aegis.type.AegisType, java.io.InputStream) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.AegisJSONProvider r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r5;
        javax.xml.stream.XMLStreamReader $r4;
        org.apache.cxf.aegis.type.AegisType r0;
        javax.xml.namespace.QName $r6;
        java.lang.String $r7;
        java.io.InputStream r1;
        boolean $z0;

        r2 := @this: org.apache.cxf.jaxrs.provider.AegisJSONProvider;

        r0 := @parameter0: org.apache.cxf.aegis.type.AegisType;

        r1 := @parameter1: java.io.InputStream;

        if r0 == null goto label1;

        $r5 = r2.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r6 = virtualinvoke r0.<org.apache.cxf.aegis.type.AegisType: javax.xml.namespace.QName getSchemaType()>();

        $r7 = virtualinvoke $r6.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r7, "ns1");

     label1:
        $z0 = r2.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: boolean readXsiType>;

        $r3 = r2.<org.apache.cxf.jaxrs.provider.AegisJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r4 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamReader createStreamReader(java.io.InputStream,boolean,java.util.concurrent.ConcurrentHashMap)>(r1, $z0, $r3);

        return $r4;
    }
}
