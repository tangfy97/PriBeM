class ucar.util.prefs.XMLStore$OutputMunger extends java.io.BufferedOutputStream
{
    boolean done;
    boolean bean;
    int countNL;
    final ucar.util.prefs.XMLStore this$0;

    void <init>(ucar.util.prefs.XMLStore, java.io.OutputStream)
    {
        ucar.util.prefs.XMLStore r1;
        java.io.OutputStream r2;
        ucar.util.prefs.XMLStore$OutputMunger r0;

        r0 := @this: ucar.util.prefs.XMLStore$OutputMunger;

        r1 := @parameter0: ucar.util.prefs.XMLStore;

        r2 := @parameter1: java.io.OutputStream;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: ucar.util.prefs.XMLStore this$0> = r1;

        specialinvoke r0.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r2, 1024);

        r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean done> = 0;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean bean> = 0;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: int countNL> = 0;

        return;
    }

    void enterBeanStream()
    {
        ucar.util.prefs.XMLStore$OutputMunger r0;

        r0 := @this: ucar.util.prefs.XMLStore$OutputMunger;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean bean> = 1;

        return;
    }

    void exitBeanStream()
    {
        ucar.util.prefs.XMLStore$OutputMunger r0;

        r0 := @this: ucar.util.prefs.XMLStore$OutputMunger;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean bean> = 0;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        ucar.util.prefs.XMLStore$OutputMunger r0;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: ucar.util.prefs.XMLStore$OutputMunger;

        i0 := @parameter0: int;

        $z0 = r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean done>;

        if $z0 != 0 goto label1;

        $z1 = r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean bean>;

        if $z1 != 0 goto label2;

     label1:
        specialinvoke r0.<java.io.BufferedOutputStream: void write(int)>(i0);

        goto label4;

     label2:
        if i0 != 10 goto label3;

        $i2 = r0.<ucar.util.prefs.XMLStore$OutputMunger: int countNL>;

        $i3 = $i2 + 1;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: int countNL> = $i3;

     label3:
        $i1 = r0.<ucar.util.prefs.XMLStore$OutputMunger: int countNL>;

        if $i1 != 2 goto label4;

        r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean done> = 1;

     label4:
        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        ucar.util.prefs.XMLStore$OutputMunger r0;
        byte $b3;
        int i0, i1, $i2, i4, $i5;
        boolean $z0, $z1;

        r0 := @this: ucar.util.prefs.XMLStore$OutputMunger;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean done>;

        if $z0 != 0 goto label1;

        $z1 = r0.<ucar.util.prefs.XMLStore$OutputMunger: boolean bean>;

        if $z1 != 0 goto label2;

     label1:
        specialinvoke r0.<java.io.BufferedOutputStream: void write(byte[],int,int)>(r1, i0, i1);

        goto label4;

     label2:
        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        $i2 = i0 + i4;

        $b3 = r1[$i2];

        $i5 = (int) $b3;

        virtualinvoke r0.<ucar.util.prefs.XMLStore$OutputMunger: void write(int)>($i5);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }
}
