public class org.apache.velocity.runtime.parser.node.ASTIntegerRange extends org.apache.velocity.runtime.parser.node.SimpleNode
{

    public void <init>(int)
    {
        int i0;
        org.apache.velocity.runtime.parser.node.ASTIntegerRange r0;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTIntegerRange;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: void <init>(int)>(i0);

        return;
    }

    public void <init>(org.apache.velocity.runtime.parser.Parser, int)
    {
        int i0;
        org.apache.velocity.runtime.parser.node.ASTIntegerRange r0;
        org.apache.velocity.runtime.parser.Parser r1;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTIntegerRange;

        r1 := @parameter0: org.apache.velocity.runtime.parser.Parser;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.velocity.runtime.parser.node.SimpleNode: void <init>(org.apache.velocity.runtime.parser.Parser,int)>(r1, i0);

        return;
    }

    public java.lang.Object jjtAccept(org.apache.velocity.runtime.parser.node.ParserVisitor, java.lang.Object)
    {
        org.apache.velocity.runtime.parser.node.ASTIntegerRange r1;
        org.apache.velocity.runtime.parser.node.ParserVisitor r0;
        java.lang.Object r2, $r3;

        r1 := @this: org.apache.velocity.runtime.parser.node.ASTIntegerRange;

        r0 := @parameter0: org.apache.velocity.runtime.parser.node.ParserVisitor;

        r2 := @parameter1: java.lang.Object;

        $r3 = interfaceinvoke r0.<org.apache.velocity.runtime.parser.node.ParserVisitor: java.lang.Object visit(org.apache.velocity.runtime.parser.node.ASTIntegerRange,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.lang.Object value(org.apache.velocity.context.InternalContextAdapter) throws org.apache.velocity.exception.MethodInvocationException
    {
        java.lang.Integer $r25;
        byte b4, $b6;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r24;
        java.lang.StringBuffer $r6, $r8, $r9, $r10, $r12, $r14, $r16, $r17, $r18, $r20;
        int $i0, $i1, $i2, $i3, i5, i7, i8;
        java.lang.String $r11, $r13, $r19, $r21, $r26, $r27;
        org.apache.velocity.runtime.parser.node.Node $r1, $r4;
        java.lang.Number $r22, $r23;
        org.apache.velocity.context.InternalContextAdapter r2;
        org.apache.velocity.runtime.log.Log $r7, $r15;
        org.apache.velocity.runtime.parser.node.ASTIntegerRange r0;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.velocity.runtime.parser.node.ASTIntegerRange;

        r2 := @parameter0: org.apache.velocity.context.InternalContextAdapter;

        $r1 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTIntegerRange: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>(0);

        $r3 = interfaceinvoke $r1.<org.apache.velocity.runtime.parser.node.Node: java.lang.Object value(org.apache.velocity.context.InternalContextAdapter)>(r2);

        $r4 = virtualinvoke r0.<org.apache.velocity.runtime.parser.node.ASTIntegerRange: org.apache.velocity.runtime.parser.node.Node jjtGetChild(int)>(1);

        $r5 = interfaceinvoke $r4.<org.apache.velocity.runtime.parser.node.Node: java.lang.Object value(org.apache.velocity.context.InternalContextAdapter)>(r2);

        if $r3 == null goto label01;

        if $r5 != null goto label04;

     label01:
        $r7 = r0.<org.apache.velocity.runtime.parser.node.ASTIntegerRange: org.apache.velocity.runtime.log.Log log>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        if $r3 != null goto label02;

        $r26 = "Left";

        goto label03;

     label02:
        $r26 = "Right";

     label03:
        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" side of range operator [n..m] has null value.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Operation not possible. ");

        $r11 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(org.apache.velocity.runtime.parser.node.Node)>(r0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object)>($r13);

        return null;

     label04:
        $z0 = $r3 instanceof java.lang.Number;

        if $z0 == 0 goto label05;

        $z2 = $r5 instanceof java.lang.Number;

        if $z2 != 0 goto label08;

     label05:
        $r15 = r0.<org.apache.velocity.runtime.parser.node.ASTIntegerRange: org.apache.velocity.runtime.log.Log log>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $z1 = $r3 instanceof java.lang.Number;

        if $z1 != 0 goto label06;

        $r27 = "Left";

        goto label07;

     label06:
        $r27 = "Right";

     label07:
        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" side of range operator is not a valid type. ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Currently only integers (1,2,3...) and the Number type are supported. ");

        $r19 = staticinvoke <org.apache.velocity.runtime.log.Log: java.lang.String formatFileString(org.apache.velocity.runtime.parser.node.Node)>(r0);

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<org.apache.velocity.runtime.log.Log: void error(java.lang.Object)>($r21);

        return null;

     label08:
        $r22 = (java.lang.Number) $r3;

        $i0 = virtualinvoke $r22.<java.lang.Number: int intValue()>();

        $r23 = (java.lang.Number) $r5;

        $i1 = virtualinvoke $r23.<java.lang.Number: int intValue()>();

        $i2 = $i0 - $i1;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        i5 = $i3 + 1;

        if $i0 < $i1 goto label09;

        $b6 = -1;

        goto label10;

     label09:
        $b6 = 1;

     label10:
        b4 = $b6;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>(int)>(i5);

        i7 = $i0;

        i8 = 0;

     label11:
        if i8 >= i5 goto label12;

        $r25 = new java.lang.Integer;

        specialinvoke $r25.<java.lang.Integer: void <init>(int)>(i7);

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>($r25);

        i7 = i7 + b4;

        i8 = i8 + 1;

        goto label11;

     label12:
        return $r24;
    }
}
