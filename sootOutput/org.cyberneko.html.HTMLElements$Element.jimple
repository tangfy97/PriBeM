public class org.cyberneko.html.HTMLElements$Element extends java.lang.Object
{
    public static final int INLINE;
    public static final int BLOCK;
    public static final int EMPTY;
    public static final int CONTAINER;
    public static final int SPECIAL;
    public short code;
    public java.lang.String name;
    public int flags;
    public short[] parentCodes;
    public org.cyberneko.html.HTMLElements$Element[] parent;
    public short bounds;
    public short[] closes;
    boolean nestable;

    public void <init>(short, java.lang.String, int, short, short[])
    {
        short s0, s2, $s4;
        int i1;
        java.lang.String r1;
        short[] $r2, r3;
        org.cyberneko.html.HTMLElements$Element r0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        s2 := @parameter3: short;

        r3 := @parameter4: short[];

        $r2 = newarray (short)[1];

        $r2[0] = s2;

        $s4 = (short) -1;

        specialinvoke r0.<org.cyberneko.html.HTMLElements$Element: void <init>(short,java.lang.String,int,short[],short,short[])>(s0, r1, i1, $r2, $s4, r3);

        return;
    }

    public void <init>(short, java.lang.String, int, short, short, short[])
    {
        short s0, s2, s3;
        int i1;
        java.lang.String r1;
        short[] $r2, r3;
        org.cyberneko.html.HTMLElements$Element r0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        s2 := @parameter3: short;

        s3 := @parameter4: short;

        r3 := @parameter5: short[];

        $r2 = newarray (short)[1];

        $r2[0] = s2;

        specialinvoke r0.<org.cyberneko.html.HTMLElements$Element: void <init>(short,java.lang.String,int,short[],short,short[])>(s0, r1, i1, $r2, s3, r3);

        return;
    }

    public void <init>(short, java.lang.String, int, short[], short[])
    {
        short s0, $s3;
        int i1;
        java.lang.String r1;
        short[] r2, r3;
        org.cyberneko.html.HTMLElements$Element r0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 := @parameter3: short[];

        r3 := @parameter4: short[];

        $s3 = (short) -1;

        specialinvoke r0.<org.cyberneko.html.HTMLElements$Element: void <init>(short,java.lang.String,int,short[],short,short[])>(s0, r1, i1, r2, $s3, r3);

        return;
    }

    public void <init>(short, java.lang.String, int, short[], short, short[])
    {
        short s0, s2, $s4;
        int i1, $i3, i5, $i6, $i7;
        java.lang.String r1;
        short[] r2, r3;
        org.cyberneko.html.HTMLElements$Element r0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        s0 := @parameter0: short;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 := @parameter3: short[];

        s2 := @parameter4: short;

        r3 := @parameter5: short[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.cyberneko.html.HTMLElements$Element: boolean nestable> = 1;

        r0.<org.cyberneko.html.HTMLElements$Element: short code> = s0;

        r0.<org.cyberneko.html.HTMLElements$Element: java.lang.String name> = r1;

        r0.<org.cyberneko.html.HTMLElements$Element: int flags> = i1;

        r0.<org.cyberneko.html.HTMLElements$Element: short[] parentCodes> = r2;

        r0.<org.cyberneko.html.HTMLElements$Element: org.cyberneko.html.HTMLElements$Element[] parent> = null;

        r0.<org.cyberneko.html.HTMLElements$Element: short bounds> = s2;

        r0.<org.cyberneko.html.HTMLElements$Element: short[] closes> = r3;

        if r3 == null goto label3;

        i5 = 0;

     label1:
        $i3 = lengthof r3;

        if i5 >= $i3 goto label3;

        $s4 = r3[i5];

        $i6 = (int) $s4;

        $i7 = (int) s0;

        if $i6 != $i7 goto label2;

        r0.<org.cyberneko.html.HTMLElements$Element: boolean nestable> = 0;

        goto label3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    public final boolean isInline()
    {
        int $i0, $i1;
        org.cyberneko.html.HTMLElements$Element r0;
        boolean $z0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        $i0 = r0.<org.cyberneko.html.HTMLElements$Element: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isBlock()
    {
        int $i0, $i1;
        org.cyberneko.html.HTMLElements$Element r0;
        boolean $z0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        $i0 = r0.<org.cyberneko.html.HTMLElements$Element: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isEmpty()
    {
        int $i0, $i1;
        org.cyberneko.html.HTMLElements$Element r0;
        boolean $z0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        $i0 = r0.<org.cyberneko.html.HTMLElements$Element: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isContainer()
    {
        int $i0, $i1;
        org.cyberneko.html.HTMLElements$Element r0;
        boolean $z0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        $i0 = r0.<org.cyberneko.html.HTMLElements$Element: int flags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isSpecial()
    {
        int $i0, $i1;
        org.cyberneko.html.HTMLElements$Element r0;
        boolean $z0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        $i0 = r0.<org.cyberneko.html.HTMLElements$Element: int flags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean closes(short)
    {
        short s1, $s2;
        int $i0, i3, $i4, $i5;
        short[] $r1, $r2, $r3;
        org.cyberneko.html.HTMLElements$Element r0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        s1 := @parameter0: short;

        $r1 = r0.<org.cyberneko.html.HTMLElements$Element: short[] closes>;

        if $r1 == null goto label3;

        i3 = 0;

     label1:
        $r2 = r0.<org.cyberneko.html.HTMLElements$Element: short[] closes>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label3;

        $r3 = r0.<org.cyberneko.html.HTMLElements$Element: short[] closes>;

        $s2 = $r3[i3];

        $i4 = (int) $s2;

        $i5 = (int) s1;

        if $i4 != $i5 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.String $r1;
        org.cyberneko.html.HTMLElements$Element r0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        $r1 = r0.<org.cyberneko.html.HTMLElements$Element: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        java.lang.String $r2;
        org.cyberneko.html.HTMLElements$Element r0;
        boolean $z0;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.cyberneko.html.HTMLElements$Element: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r5, $r8;
        org.cyberneko.html.HTMLElements$Element r1;

        r1 := @this: org.cyberneko.html.HTMLElements$Element;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(name=");

        $r5 = r1.<org.cyberneko.html.HTMLElements$Element: java.lang.String name>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public boolean isParent(org.cyberneko.html.HTMLElements$Element)
    {
        org.cyberneko.html.HTMLElements$Element[] $r1, $r2, $r4;
        short $s1, $s2;
        int $i0, i3, $i4, $i5;
        org.cyberneko.html.HTMLElements$Element r0, r3, $r5;

        r0 := @this: org.cyberneko.html.HTMLElements$Element;

        r3 := @parameter0: org.cyberneko.html.HTMLElements$Element;

        $r1 = r0.<org.cyberneko.html.HTMLElements$Element: org.cyberneko.html.HTMLElements$Element[] parent>;

        if $r1 != null goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $r2 = r0.<org.cyberneko.html.HTMLElements$Element: org.cyberneko.html.HTMLElements$Element[] parent>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $s2 = r3.<org.cyberneko.html.HTMLElements$Element: short code>;

        $r4 = r0.<org.cyberneko.html.HTMLElements$Element: org.cyberneko.html.HTMLElements$Element[] parent>;

        $r5 = $r4[i3];

        $s1 = $r5.<org.cyberneko.html.HTMLElements$Element: short code>;

        $i4 = (int) $s2;

        $i5 = (int) $s1;

        if $i4 != $i5 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static void <clinit>()
    {
        <org.cyberneko.html.HTMLElements$Element: int SPECIAL> = 16;

        <org.cyberneko.html.HTMLElements$Element: int CONTAINER> = 8;

        <org.cyberneko.html.HTMLElements$Element: int EMPTY> = 4;

        <org.cyberneko.html.HTMLElements$Element: int BLOCK> = 2;

        <org.cyberneko.html.HTMLElements$Element: int INLINE> = 1;

        return;
    }
}
