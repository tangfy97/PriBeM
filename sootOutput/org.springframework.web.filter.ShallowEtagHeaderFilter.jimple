public class org.springframework.web.filter.ShallowEtagHeaderFilter extends org.springframework.web.filter.OncePerRequestFilter
{
    private static java.lang.String HEADER_ETAG;
    private static java.lang.String HEADER_IF_NONE_MATCH;

    static void <clinit>()
    {
        <org.springframework.web.filter.ShallowEtagHeaderFilter: java.lang.String HEADER_ETAG> = "ETag";

        <org.springframework.web.filter.ShallowEtagHeaderFilter: java.lang.String HEADER_IF_NONE_MATCH> = "If-None-Match";

        return;
    }

    public void <init>()
    {
        org.springframework.web.filter.ShallowEtagHeaderFilter r0;

        r0 := @this: org.springframework.web.filter.ShallowEtagHeaderFilter;

        specialinvoke r0.<org.springframework.web.filter.OncePerRequestFilter: void <init>()>();

        return;
    }

    protected void doFilterInternal(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.FilterChain) throws javax.servlet.ServletException, java.io.IOException
    {
        byte[] $r4;
        javax.servlet.FilterChain r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r7, $r9, $r10, $r17, $r19, $r20, $r21, $r22, $r25, $r27, $r28;
        javax.servlet.http.HttpServletRequest r3;
        org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper $r0;
        int $i0;
        java.lang.String $r11, $r12, $r13, $r14, $r15, $r23, $r29;
        org.springframework.web.filter.ShallowEtagHeaderFilter r5;
        javax.servlet.http.HttpServletResponse r1;
        org.apache.commons.logging.Log $r6, $r8, $r16, $r18, $r24, $r26;

        r5 := @this: org.springframework.web.filter.ShallowEtagHeaderFilter;

        r3 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: javax.servlet.http.HttpServletResponse;

        r2 := @parameter2: javax.servlet.FilterChain;

        $r0 = new org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper;

        specialinvoke $r0.<org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper: void <init>(javax.servlet.http.HttpServletResponse,org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper)>(r1, null);

        interfaceinvoke r2.<javax.servlet.FilterChain: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)>(r3, $r0);

        $r4 = staticinvoke <org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper: byte[] access$2(org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper)>($r0);

        $i0 = staticinvoke <org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper: int access$3(org.springframework.web.filter.ShallowEtagHeaderFilter$ShallowEtagResponseWrapper)>($r0);

        $z0 = virtualinvoke r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: boolean isEligibleForEtag(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int,byte[])>(r3, $r0, $i0, $r4);

        if $z0 == 0 goto label4;

        $r12 = virtualinvoke r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: java.lang.String generateETagHeaderValue(byte[])>($r4);

        $r13 = <org.springframework.web.filter.ShallowEtagHeaderFilter: java.lang.String HEADER_ETAG>;

        interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setHeader(java.lang.String,java.lang.String)>($r13, $r12);

        $r14 = <org.springframework.web.filter.ShallowEtagHeaderFilter: java.lang.String HEADER_IF_NONE_MATCH>;

        $r15 = interfaceinvoke r3.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>($r14);

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 == 0 goto label2;

        $r24 = r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r24.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z4 == 0 goto label1;

        $r26 = r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: org.apache.commons.logging.Log logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("ETag [");

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] equal to If-None-Match, sending 304");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r29);

     label1:
        interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(304);

        goto label6;

     label2:
        $r16 = r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r16.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z3 == 0 goto label3;

        $r18 = r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("ETag [");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not equal to If-None-Match [");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], sending normal response");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r23);

     label3:
        specialinvoke r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: void copyBodyToResponse(byte[],javax.servlet.http.HttpServletResponse)>($r4, r1);

        goto label6;

     label4:
        $r6 = r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label5;

        $r8 = r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: org.apache.commons.logging.Log logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Response with status code [");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] not eligible for ETag");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11);

     label5:
        specialinvoke r5.<org.springframework.web.filter.ShallowEtagHeaderFilter: void copyBodyToResponse(byte[],javax.servlet.http.HttpServletResponse)>($r4, r1);

     label6:
        return;
    }

    private void copyBodyToResponse(byte[], javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        byte[] r0;
        javax.servlet.ServletOutputStream $r2;
        int $i0, $i1;
        javax.servlet.http.HttpServletResponse r1;
        org.springframework.web.filter.ShallowEtagHeaderFilter r3;

        r3 := @this: org.springframework.web.filter.ShallowEtagHeaderFilter;

        r0 := @parameter0: byte[];

        r1 := @parameter1: javax.servlet.http.HttpServletResponse;

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $i1 = lengthof r0;

        interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: void setContentLength(int)>($i1);

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        staticinvoke <org.springframework.util.FileCopyUtils: void copy(byte[],java.io.OutputStream)>(r0, $r2);

     label1:
        return;
    }

    protected boolean isEligibleForEtag(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, int, byte[])
    {
        byte[] r3;
        javax.servlet.http.HttpServletRequest r1;
        int i0;
        javax.servlet.http.HttpServletResponse r2;
        org.springframework.web.filter.ShallowEtagHeaderFilter r0;

        r0 := @this: org.springframework.web.filter.ShallowEtagHeaderFilter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        if i0 < 200 goto label1;

        if i0 >= 300 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected java.lang.String generateETagHeaderValue(byte[])
    {
        byte[] r1;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;
        org.springframework.web.filter.ShallowEtagHeaderFilter r3;

        r3 := @this: org.springframework.web.filter.ShallowEtagHeaderFilter;

        r1 := @parameter0: byte[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("\"0");

        staticinvoke <org.springframework.util.DigestUtils: java.lang.StringBuilder appendMd5DigestAsHex(byte[],java.lang.StringBuilder)>(r1, $r0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
