public abstract class org.tukaani.xz.lzma.LZMAEncoder extends org.tukaani.xz.lzma.LZMACoder
{
    public static final int MODE_FAST;
    public static final int MODE_NORMAL;
    private static final int LZMA2_UNCOMPRESSED_LIMIT;
    private static final int LZMA2_COMPRESSED_LIMIT;
    private static final int DIST_PRICE_UPDATE_INTERVAL;
    private static final int ALIGN_PRICE_UPDATE_INTERVAL;
    private final org.tukaani.xz.rangecoder.RangeEncoder rc;
    final org.tukaani.xz.lz.LZEncoder lz;
    final org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder;
    final org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder;
    final org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder;
    final int niceLen;
    private int distPriceCount;
    private int alignPriceCount;
    private final int distSlotPricesSize;
    private final int[][] distSlotPrices;
    private final int[][] fullDistPrices;
    private final int[] alignPrices;
    int back;
    int readAhead;
    private int uncompressedSize;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder;

    public static int getMemoryUsage(int, int, int, int)
    {
        java.lang.IllegalArgumentException $r0;
        int i0, i1, i2, i3, $i4, $i5, i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $i5 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoderFast: int getMemoryUsage(int,int,int)>(i1, i2, i3);

        i6 = 80 + $i5;

        goto label4;

     label2:
        $i4 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoderNormal: int getMemoryUsage(int,int,int)>(i1, i2, i3);

        i6 = 80 + $i4;

        goto label4;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label4:
        return i6;
    }

    public static org.tukaani.xz.lzma.LZMAEncoder getInstance(org.tukaani.xz.rangecoder.RangeEncoder, int, int, int, int, int, int, int, int, int)
    {
        org.tukaani.xz.lzma.LZMAEncoderFast $r2;
        org.tukaani.xz.rangecoder.RangeEncoder r1;
        org.tukaani.xz.lzma.LZMAEncoderNormal $r0;
        java.lang.IllegalArgumentException $r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8;

        r1 := @parameter0: org.tukaani.xz.rangecoder.RangeEncoder;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        i8 := @parameter9: int;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = new org.tukaani.xz.lzma.LZMAEncoderFast;

        specialinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoderFast: void <init>(org.tukaani.xz.rangecoder.RangeEncoder,int,int,int,int,int,int,int,int)>(r1, i1, i2, i3, i4, i5, i6, i7, i8);

        return $r2;

     label2:
        $r0 = new org.tukaani.xz.lzma.LZMAEncoderNormal;

        specialinvoke $r0.<org.tukaani.xz.lzma.LZMAEncoderNormal: void <init>(org.tukaani.xz.rangecoder.RangeEncoder,int,int,int,int,int,int,int,int)>(r1, i1, i2, i3, i4, i5, i6, i7, i8);

        return $r0;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    public static int getDistSlot(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i14, $i16, $i18, $i20;

        i0 := @parameter0: int;

        if i0 > 4 goto label1;

        return i0;

     label1:
        i11 = i0;

        i12 = 31;

        $i1 = i0 & -65536;

        if $i1 != 0 goto label2;

        i11 = i0 << 16;

        i12 = 15;

     label2:
        $i2 = i11 & -16777216;

        if $i2 != 0 goto label3;

        i11 = i11 << 8;

        $i14 = (int) -8;

        i12 = i12 + $i14;

     label3:
        $i3 = i11 & -268435456;

        if $i3 != 0 goto label4;

        i11 = i11 << 4;

        $i16 = (int) -4;

        i12 = i12 + $i16;

     label4:
        $i4 = i11 & -1073741824;

        if $i4 != 0 goto label5;

        i11 = i11 << 2;

        $i18 = (int) -2;

        i12 = i12 + $i18;

     label5:
        $i5 = i11 & -2147483648;

        if $i5 != 0 goto label6;

        $i20 = (int) -1;

        i12 = i12 + $i20;

     label6:
        $i9 = i12 << 1;

        $i6 = i12 - 1;

        $i7 = i0 >>> $i6;

        $i8 = $i7 & 1;

        $i10 = $i9 + $i8;

        return $i10;
    }

    abstract int getNextSymbol();

    void <init>(org.tukaani.xz.rangecoder.RangeEncoder, org.tukaani.xz.lz.LZEncoder, int, int, int, int, int)
    {
        int[][] $r1, $r8;
        org.tukaani.xz.rangecoder.RangeEncoder r3;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r9;
        int[] $r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i10;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r10, $r11;
        org.tukaani.xz.lz.LZEncoder r4;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        r3 := @parameter0: org.tukaani.xz.rangecoder.RangeEncoder;

        r4 := @parameter1: org.tukaani.xz.lz.LZEncoder;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i4 := @parameter5: int;

        i1 := @parameter6: int;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder: void <init>(int)>(i0);

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = 0;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = 0;

        $r1 = newmultiarray (int)[4][128];

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices> = $r1;

        $r2 = newarray (int)[16];

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] alignPrices> = $r2;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int back> = 0;

        $i10 = (int) -1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i10;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = 0;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc> = r3;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz> = r4;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int niceLen> = i1;

        $r9 = new org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder;

        specialinvoke $r9.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder,int,int)>(r0, i2, i3);

        r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder> = $r9;

        $r10 = new org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        specialinvoke $r10.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder,int,int)>(r0, i0, i1);

        r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder> = $r10;

        $r11 = new org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder;

        specialinvoke $r11.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void <init>(org.tukaani.xz.lzma.LZMAEncoder,int,int)>(r0, i0, i1);

        r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder> = $r11;

        $i5 = i4 - 1;

        $i6 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>($i5);

        $i7 = $i6 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize> = $i7;

        $i8 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize>;

        $r8 = newmultiarray (int)[4][$i8];

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices> = $r8;

        virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void reset()>();

        return;
    }

    public org.tukaani.xz.lz.LZEncoder getLZEncoder()
    {
        org.tukaani.xz.lzma.LZMAEncoder r0;
        org.tukaani.xz.lz.LZEncoder $r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        return $r1;
    }

    public void reset()
    {
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r1;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r2, $r3;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMACoder: void reset()>();

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void reset()>();

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void reset()>();

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        virtualinvoke $r3.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void reset()>();

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = 0;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = 0;

        $i2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = $i0 + 1;

        $i3 = $i2 + $i1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = $i3;

        $i5 = (int) -1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i5;

        return;
    }

    public int getUncompressedSize()
    {
        int $i0;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        return $i0;
    }

    public void resetUncompressedSize()
    {
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = 0;

        return;
    }

    public boolean encodeForLZMA2()
    {
        org.tukaani.xz.rangecoder.RangeEncoder $r2;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        int $i0, $i1, $i3;
        org.tukaani.xz.lz.LZEncoder $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $z0 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: boolean isStarted()>();

        if $z0 != 0 goto label1;

        $z2 = specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeInit()>();

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        if $i1 > 2096879 goto label2;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $i0 = virtualinvoke $r2.<org.tukaani.xz.rangecoder.RangeEncoder: int getPendingSize()>();

        $i3 = (int) 65510;

        if $i0 > $i3 goto label2;

        $z1 = specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: boolean encodeSymbol()>();

        if $z1 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    private boolean encodeInit()
    {
        org.tukaani.xz.rangecoder.RangeEncoder $r3;
        short[][] $r4;
        java.lang.AssertionError $r10, $r11, $r12;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r6;
        org.tukaani.xz.lzma.State $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11;
        org.tukaani.xz.lz.LZEncoder $r1;
        boolean $z0, $z1, $z2, $z3;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        short[] $r5;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i9 = (int) -1;

        if $i7 == $i9 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $z1 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: boolean hasEnoughData(int)>(0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void skip(int)>(1);

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i0 = virtualinvoke $r2.<org.tukaani.xz.lzma.State: int get()>();

        $r5 = $r4[$i0];

        virtualinvoke $r3.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r5, 0, 0);

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        virtualinvoke $r6.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void encodeInit()>();

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i2 = $i1 - 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i2;

        $z2 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $i6 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i11 = (int) -1;

        if $i6 == $i11 goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        $i3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        $i4 = $i3 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = $i4;

        $z3 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z3 != 0 goto label4;

        $i5 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        if $i5 == 1 goto label4;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label4:
        return 1;
    }

    private boolean encodeSymbol()
    {
        short[][] $r5, $r20;
        org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder $r22;
        int[] $r15;
        org.tukaani.xz.lz.LZEncoder $r1, $r2, $r10, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        short[] $r6, $r9, $r14, $r21;
        org.tukaani.xz.rangecoder.RangeEncoder $r4, $r8, $r13, $r19;
        java.lang.AssertionError $r25, $r26, $r27, $r28;
        org.tukaani.xz.lzma.State $r3, $r7, $r12, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = $i0 + 1;

        $z0 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: boolean hasEnoughData(int)>($i1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: int getNextSymbol()>();

        $z1 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i26 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        if $i26 >= 0 goto label2;

        $r25 = new java.lang.AssertionError;

        specialinvoke $r25.<java.lang.AssertionError: void <init>()>();

        throw $r25;

     label2:
        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i3 = virtualinvoke $r2.<org.tukaani.xz.lz.LZEncoder: int getPos()>();

        $i4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i6 = $i3 - $i4;

        $i5 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int posMask>;

        $i27 = $i6 & $i5;

        $i7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i33 = (int) -1;

        if $i7 != $i33 goto label4;

        $z4 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z4 != 0 goto label3;

        if $i2 == 1 goto label3;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label3:
        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r20 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i25 = virtualinvoke $r18.<org.tukaani.xz.lzma.State: int get()>();

        $r21 = $r20[$i25];

        virtualinvoke $r19.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r21, $i27, 0);

        $r22 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder literalEncoder>;

        virtualinvoke $r22.<org.tukaani.xz.lzma.LZMAEncoder$LiteralEncoder: void encode()>();

        goto label8;

     label4:
        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i8 = virtualinvoke $r3.<org.tukaani.xz.lzma.State: int get()>();

        $r6 = $r5[$i8];

        virtualinvoke $r4.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r6, $i27, 1);

        $i9 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        if $i9 >= 4 goto label6;

        $z3 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z3 != 0 goto label5;

        $r16 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i20 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i23 = neg $i20;

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i21 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i22 = $r15[$i21];

        $i24 = virtualinvoke $r16.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i23, $i22, $i2);

        if $i24 == $i2 goto label5;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label5:
        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r14 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $r12 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i18 = virtualinvoke $r12.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r13.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r14, $i18, 1);

        $i19 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void encodeRepMatch(int,int,int)>($i19, $i2, $i27);

        goto label8;

     label6:
        $z2 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $i13 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i16 = neg $i13;

        $i14 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i15 = $i14 - 4;

        $i17 = virtualinvoke $r10.<org.tukaani.xz.lz.LZEncoder: int getMatchLen(int,int,int)>($i16, $i15, $i2);

        if $i17 == $i2 goto label7;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label7:
        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i10 = virtualinvoke $r7.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r9, $i10, 0);

        $i11 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int back>;

        $i12 = $i11 - 4;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void encodeMatch(int,int,int)>($i12, $i2, $i27);

     label8:
        $i28 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i29 = $i28 - $i2;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i29;

        $i30 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize>;

        $i31 = $i30 + $i2;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int uncompressedSize> = $i31;

        return 1;
    }

    private void encodeMatch(int, int, int)
    {
        short[][] $r4, $r9;
        int[] $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        short[] $r5, $r7, $r10;
        org.tukaani.xz.rangecoder.RangeEncoder $r3, $r6, $r8, $r11;
        org.tukaani.xz.lzma.State $r1;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7, $i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r2;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.State: void updateMatch()>();

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void encode(int,int)>(i0, i1);

        $i3 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>(i2);

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSlots>;

        $i4 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistState(int)>(i0);

        $r5 = $r4[$i4];

        virtualinvoke $r3.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBitTree(short[],int)>($r5, $i3);

        if $i3 < 4 goto label2;

        $i5 = $i3 >>> 1;

        i6 = $i5 - 1;

        $i7 = $i3 & 1;

        $i8 = 2 | $i7;

        i9 = $i8 << i6;

        i10 = i2 - i9;

        if $i3 >= 14 goto label1;

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSpecial>;

        $i16 = $i3 - 4;

        $r10 = $r9[$i16];

        virtualinvoke $r11.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeReverseBitTree(short[],int)>($r10, i10);

        goto label2;

     label1:
        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $i12 = i10 >>> 4;

        $i11 = i6 - 4;

        virtualinvoke $r6.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeDirectBits(int,int)>($i12, $i11);

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] distAlign>;

        $i13 = i10 & 15;

        virtualinvoke $r8.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeReverseBitTree(short[],int)>($r7, $i13);

        $i14 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount>;

        $i15 = $i14 - 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = $i15;

     label2:
        $r12 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i17 = $r13[2];

        $r12[3] = $i17;

        $r14 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i18 = $r15[1];

        $r14[2] = $i18;

        $r16 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i19 = $r17[0];

        $r16[1] = $i19;

        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r18[0] = i2;

        $i20 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount>;

        $i21 = $i20 - 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = $i21;

        return;
    }

    private void encodeRepMatch(int, int, int)
    {
        short[][] $r26;
        byte $b13;
        int[] $r1, $r11, $r12, $r16, $r17, $r28, $r29, $r30;
        short[] $r4, $r7, $r10, $r20, $r23, $r27;
        org.tukaani.xz.rangecoder.RangeEncoder $r3, $r6, $r9, $r19, $r22, $r25;
        org.tukaani.xz.lzma.State $r2, $r5, $r8, $r14, $r15, $r18, $r21, $r24;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i14;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r13;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        i8 := @parameter2: int;

        if i0 != 0 goto label3;

        $r22 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r23 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $r21 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i11 = virtualinvoke $r21.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r22.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r23, $i11, 0);

        $r25 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r26 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isRep0Long>;

        $r24 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i12 = virtualinvoke $r24.<org.tukaani.xz.lzma.State: int get()>();

        $r27 = $r26[$i12];

        if i7 != 1 goto label1;

        $b13 = 0;

        goto label2;

     label1:
        $b13 = 1;

     label2:
        virtualinvoke $r25.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r27, i8, $b13);

        goto label7;

     label3:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        i1 = $r1[i0];

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i2 = virtualinvoke $r2.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r3.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r4, $i2, 1);

        if i0 != 1 goto label4;

        $r19 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r20 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $r18 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i10 = virtualinvoke $r18.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r19.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r20, $i10, 0);

        goto label6;

     label4:
        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i3 = virtualinvoke $r5.<org.tukaani.xz.lzma.State: int get()>();

        virtualinvoke $r6.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r7, $i3, 1);

        $r9 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep2>;

        $r8 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        $i4 = virtualinvoke $r8.<org.tukaani.xz.lzma.State: int get()>();

        $i5 = i0 - 2;

        virtualinvoke $r9.<org.tukaani.xz.rangecoder.RangeEncoder: void encodeBit(short[],int,int)>($r10, $i4, $i5);

        if i0 != 3 goto label5;

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r16 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i9 = $r16[2];

        $r17[3] = $i9;

     label5:
        $r12 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i6 = $r11[1];

        $r12[2] = $i6;

     label6:
        $r28 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r29 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $i14 = $r29[0];

        $r28[1] = $i14;

        $r30 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] reps>;

        $r30[0] = i1;

     label7:
        if i7 != 1 goto label8;

        $r15 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r15.<org.tukaani.xz.lzma.State: void updateShortRep()>();

        goto label9;

     label8:
        $r13 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        virtualinvoke $r13.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void encode(int,int)>(i7, i8);

        $r14 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.State state>;

        virtualinvoke $r14.<org.tukaani.xz.lzma.State: void updateLongRep()>();

     label9:
        return;
    }

    org.tukaani.xz.lz.Matches getMatches()
    {
        java.lang.AssertionError $r4;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        org.tukaani.xz.lz.Matches $r2;
        int $i0, $i1;
        org.tukaani.xz.lz.LZEncoder $r1, $r3;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i1 = $i0 + 1;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i1;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $r2 = virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: org.tukaani.xz.lz.Matches getMatches()>();

        $z0 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        $z1 = virtualinvoke $r3.<org.tukaani.xz.lz.LZEncoder: boolean verifyMatches(org.tukaani.xz.lz.Matches)>($r2);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        return $r2;
    }

    void skip(int)
    {
        org.tukaani.xz.lzma.LZMAEncoder r0;
        int i0, $i1, $i2;
        org.tukaani.xz.lz.LZEncoder $r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead>;

        $i2 = $i1 + i0;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int readAhead> = $i2;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lz.LZEncoder lz>;

        virtualinvoke $r1.<org.tukaani.xz.lz.LZEncoder: void skip(int)>(i0);

        return;
    }

    int getAnyMatchPrice(org.tukaani.xz.lzma.State, int)
    {
        short[][] $r2;
        org.tukaani.xz.lzma.State r1;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        short $s2;
        int $i0, i1, $i3, $i4;
        short[] $r3;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        r1 := @parameter0: org.tukaani.xz.lzma.State;

        i1 := @parameter1: int;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isMatch>;

        $i0 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $r3 = $r2[$i0];

        $s2 = $r3[i1];

        $i4 = (int) $s2;

        $i3 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i4, 1);

        return $i3;
    }

    int getNormalMatchPrice(int, org.tukaani.xz.lzma.State)
    {
        org.tukaani.xz.lzma.State r1;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        short $s2;
        int i0, $i1, $i3, $i4, $i5;
        short[] $r2;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.tukaani.xz.lzma.State;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $i1 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s2 = $r2[$i1];

        $i5 = (int) $s2;

        $i3 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i5, 0);

        $i4 = i0 + $i3;

        return $i4;
    }

    int getAnyRepPrice(int, org.tukaani.xz.lzma.State)
    {
        org.tukaani.xz.lzma.State r1;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        short $s2;
        int i0, $i1, $i3, $i4, $i5;
        short[] $r2;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.tukaani.xz.lzma.State;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep>;

        $i1 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s2 = $r2[$i1];

        $i5 = (int) $s2;

        $i3 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i5, 1);

        $i4 = i0 + $i3;

        return $i4;
    }

    int getShortRepPrice(int, org.tukaani.xz.lzma.State, int)
    {
        short[][] $r3;
        org.tukaani.xz.lzma.State r1;
        short $s2, $s7;
        int i0, $i1, $i3, $i4, $i5, i6, $i8, $i9, $i10, $i11;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        short[] $r2, $r4;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.tukaani.xz.lzma.State;

        i6 := @parameter2: int;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $i1 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s2 = $r2[$i1];

        $i10 = (int) $s2;

        $i3 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i10, 0);

        $i4 = i0 + $i3;

        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isRep0Long>;

        $i5 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $r4 = $r3[$i5];

        $s7 = $r4[i6];

        $i11 = (int) $s7;

        $i8 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i11, 0);

        $i9 = $i4 + $i8;

        return $i9;
    }

    int getLongRepPrice(int, int, org.tukaani.xz.lzma.State, int)
    {
        short[][] $r7;
        short[] $r2, $r3, $r4, $r5, $r6, $r8;
        org.tukaani.xz.lzma.State r1;
        short $s3, $s6, $s10, $s14, $s17, $s21;
        int i0, i1, $i2, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13, $i15, $i16, $i18, $i19, i20, $i22, $i23, i24, i25, $i26, $i27, $i28, $i29, $i30, $i31;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.tukaani.xz.lzma.State;

        i20 := @parameter3: int;

        if i1 != 0 goto label1;

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $i16 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s17 = $r6[$i16];

        $i26 = (int) $s17;

        $i18 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i26, 0);

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] isRep0Long>;

        $i19 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $r8 = $r7[$i19];

        $s21 = $r8[i20];

        $i27 = (int) $s21;

        $i22 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i27, 1);

        $i23 = $i18 + $i22;

        i24 = i0 + $i23;

        goto label3;

     label1:
        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep0>;

        $i2 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s3 = $r2[$i2];

        $i28 = (int) $s3;

        $i4 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i28, 1);

        i25 = i0 + $i4;

        if i1 != 1 goto label2;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $i13 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s14 = $r5[$i13];

        $i29 = (int) $s14;

        $i15 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i29, 0);

        i24 = i25 + $i15;

        goto label3;

     label2:
        $r3 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep1>;

        $i5 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s6 = $r3[$i5];

        $i30 = (int) $s6;

        $i7 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i30, 1);

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] isRep2>;

        $i8 = virtualinvoke r1.<org.tukaani.xz.lzma.State: int get()>();

        $s10 = $r4[$i8];

        $i9 = i1 - 2;

        $i31 = (int) $s10;

        $i11 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitPrice(int,int)>($i31, $i9);

        $i12 = $i7 + $i11;

        i24 = i25 + $i12;

     label3:
        return i24;
    }

    int getLongRepAndLenPrice(int, int, org.tukaani.xz.lzma.State, int)
    {
        org.tukaani.xz.lzma.State r1;
        org.tukaani.xz.lzma.LZMAEncoder r0;
        int i0, $i1, $i2, i3, $i4, i5, $i6, $i7;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r2;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i3 := @parameter0: int;

        i5 := @parameter1: int;

        r1 := @parameter2: org.tukaani.xz.lzma.State;

        i0 := @parameter3: int;

        $i1 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: int getAnyMatchPrice(org.tukaani.xz.lzma.State,int)>(r1, i0);

        $i2 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: int getAnyRepPrice(int,org.tukaani.xz.lzma.State)>($i1, r1);

        $i4 = virtualinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: int getLongRepPrice(int,int,org.tukaani.xz.lzma.State,int)>($i2, i3, r1, i0);

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        $i6 = virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(i5, i0);

        $i7 = $i4 + $i6;

        return $i7;
    }

    int getMatchAndLenPrice(int, int, int, int)
    {
        int[][] $r2, $r5;
        int[] $r3, $r4, $r6;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r1;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        $i3 = virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: int getPrice(int,int)>(i1, i2);

        i12 = i0 + $i3;

        $i4 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistState(int)>(i1);

        if i5 >= 128 goto label1;

        $r5 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices>;

        $r6 = $r5[$i4];

        $i11 = $r6[i5];

        i13 = i12 + $i11;

        goto label2;

     label1:
        $i6 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: int getDistSlot(int)>(i5);

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r3 = $r2[$i4];

        $i9 = $r3[$i6];

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] alignPrices>;

        $i7 = i5 & 15;

        $i8 = $r4[$i7];

        $i10 = $i9 + $i8;

        i13 = i12 + $i10;

     label2:
        return i13;
    }

    private void updateDistPrices()
    {
        int[][] $r6, $r7, $r10, $r11, $r14, $r16;
        short[][] $r2, $r4, $r17;
        int[] $r8, $r9, $r12, $r13, $r15, $r19;
        boolean $z0;
        short[] $r3, $r5, $r18;
        java.lang.AssertionError $r1;
        int $i0, $i1, $i2, i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29;
        org.tukaani.xz.lzma.LZMAEncoder r0;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount> = 128;

        i20 = 0;

     label01:
        if i20 >= 4 goto label08;

        i21 = 0;

     label02:
        $i11 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize>;

        if i21 >= $i11 goto label03;

        $r16 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r19 = $r16[i20];

        $r17 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSlots>;

        $r18 = $r17[i20];

        $i19 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getBitTreePrice(short[],int)>($r18, i21);

        $r19[i21] = $i19;

        i21 = i21 + 1;

        goto label02;

     label03:
        i22 = 14;

     label04:
        $i12 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int distSlotPricesSize>;

        if i22 >= $i12 goto label05;

        $i14 = i22 >>> 1;

        $i15 = $i14 - 1;

        i23 = $i15 - 4;

        $r14 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r15 = $r14[i20];

        $i16 = $r15[i22];

        $i17 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getDirectBitsPrice(int)>(i23);

        $i18 = $i16 + $i17;

        $r15[i22] = $i18;

        i22 = i22 + 1;

        goto label04;

     label05:
        i24 = 0;

     label06:
        if i24 >= 4 goto label07;

        $r10 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices>;

        $r13 = $r10[i20];

        $r11 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r12 = $r11[i20];

        $i13 = $r12[i24];

        $r13[i24] = $i13;

        i24 = i24 + 1;

        goto label06;

     label07:
        i20 = i20 + 1;

        goto label01;

     label08:
        i25 = 4;

        i26 = 4;

     label09:
        if i26 >= 14 goto label14;

        $i0 = i26 >>> 1;

        i27 = $i0 - 1;

        $i1 = i26 & 1;

        $i2 = 2 | $i1;

        i3 = $i2 << i27;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSpecial>;

        $i4 = i26 - 4;

        $r3 = $r2[$i4];

        i5 = lengthof $r3;

        i28 = 0;

     label10:
        if i28 >= i5 goto label13;

        i6 = i25 - i3;

        $r4 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[][] distSpecial>;

        $i7 = i26 - 4;

        $r5 = $r4[$i7];

        $i8 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getReverseBitTreePrice(short[],int)>($r5, i6);

        i29 = 0;

     label11:
        if i29 >= 4 goto label12;

        $r6 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] fullDistPrices>;

        $r9 = $r6[i29];

        $r7 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[][] distSlotPrices>;

        $r8 = $r7[i29];

        $i9 = $r8[i26];

        $i10 = $i9 + $i8;

        $r9[i25] = $i10;

        i29 = i29 + 1;

        goto label11;

     label12:
        i25 = i25 + 1;

        i28 = i28 + 1;

        goto label10;

     label13:
        i26 = i26 + 1;

        goto label09;

     label14:
        $z0 = <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label15;

        if i25 == 128 goto label15;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label15:
        return;
    }

    private void updateAlignPrices()
    {
        org.tukaani.xz.lzma.LZMAEncoder r0;
        int[] $r2;
        int $i0, i1;
        short[] $r1;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        r0.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount> = 16;

        i1 = 0;

     label1:
        if i1 >= 16 goto label2;

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int[] alignPrices>;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: short[] distAlign>;

        $i0 = staticinvoke <org.tukaani.xz.rangecoder.RangeEncoder: int getReverseBitTreePrice(short[],int)>($r1, i1);

        $r2[i1] = $i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void updatePrices()
    {
        org.tukaani.xz.lzma.LZMAEncoder r0;
        int $i0, $i1;
        org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder $r1, $r2;

        r0 := @this: org.tukaani.xz.lzma.LZMAEncoder;

        $i0 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int distPriceCount>;

        if $i0 > 0 goto label1;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void updateDistPrices()>();

     label1:
        $i1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: int alignPriceCount>;

        if $i1 > 0 goto label2;

        specialinvoke r0.<org.tukaani.xz.lzma.LZMAEncoder: void updateAlignPrices()>();

     label2:
        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder matchLenEncoder>;

        virtualinvoke $r1.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void updatePrices()>();

        $r2 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder repLenEncoder>;

        virtualinvoke $r2.<org.tukaani.xz.lzma.LZMAEncoder$LengthEncoder: void updatePrices()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static org.tukaani.xz.rangecoder.RangeEncoder access$200(org.tukaani.xz.lzma.LZMAEncoder)
    {
        org.tukaani.xz.lzma.LZMAEncoder r0;
        org.tukaani.xz.rangecoder.RangeEncoder $r1;

        r0 := @parameter0: org.tukaani.xz.lzma.LZMAEncoder;

        $r1 = r0.<org.tukaani.xz.lzma.LZMAEncoder: org.tukaani.xz.rangecoder.RangeEncoder rc>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.tukaani.xz.lzma.LZMAEncoder: int ALIGN_PRICE_UPDATE_INTERVAL> = 16;

        <org.tukaani.xz.lzma.LZMAEncoder: int DIST_PRICE_UPDATE_INTERVAL> = 128;

        <org.tukaani.xz.lzma.LZMAEncoder: int LZMA2_COMPRESSED_LIMIT> = 65510;

        <org.tukaani.xz.lzma.LZMAEncoder: int LZMA2_UNCOMPRESSED_LIMIT> = 2096879;

        <org.tukaani.xz.lzma.LZMAEncoder: int MODE_NORMAL> = 2;

        <org.tukaani.xz.lzma.LZMAEncoder: int MODE_FAST> = 1;

        $r0 = <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.lzma.LZMAEncoder");

        <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.lzma.LZMAEncoder: java.lang.Class class$org$tukaani$xz$lzma$LZMAEncoder>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.lzma.LZMAEncoder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
