final class org.apache.lucene.util.packed.PackedReaderIterator extends org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl
{
    final int packedIntsVersion;
    final org.apache.lucene.util.packed.PackedInts$Format format;
    final org.apache.lucene.util.packed.BulkOperation bulkOperation;
    final byte[] nextBlocks;
    final org.apache.lucene.util.LongsRef nextValues;
    final int iterations;
    int position;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.util.packed.PackedInts$Format, int, int, int, org.apache.lucene.store.DataInput, int)
    {
        org.apache.lucene.store.DataInput r1;
        byte[] $r6;
        java.lang.AssertionError $r13;
        long[] $r9, $r12;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        boolean $z0;
        org.apache.lucene.util.packed.PackedInts$Format r2;
        org.apache.lucene.util.packed.PackedReaderIterator r0;
        org.apache.lucene.util.LongsRef $r10, $r11, $r14;
        org.apache.lucene.util.packed.BulkOperation $r3, $r5, $r8;

        r0 := @this: org.apache.lucene.util.packed.PackedReaderIterator;

        r2 := @parameter0: org.apache.lucene.util.packed.PackedInts$Format;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: org.apache.lucene.store.DataInput;

        i3 := @parameter5: int;

        specialinvoke r0.<org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl: void <init>(int,int,org.apache.lucene.store.DataInput)>(i0, i1, r1);

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.PackedInts$Format format> = r2;

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: int packedIntsVersion> = i2;

        $r3 = staticinvoke <org.apache.lucene.util.packed.BulkOperation: org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format,int)>(r2, i1);

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.BulkOperation bulkOperation> = $r3;

        $i4 = specialinvoke r0.<org.apache.lucene.util.packed.PackedReaderIterator: int iterations(int)>(i3);

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: int iterations> = $i4;

        $z0 = <org.apache.lucene.util.packed.PackedReaderIterator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 == 0 goto label1;

        $i5 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int iterations>;

        if $i5 > 0 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $i6 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int iterations>;

        $r5 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.BulkOperation bulkOperation>;

        $i7 = virtualinvoke $r5.<org.apache.lucene.util.packed.BulkOperation: int byteBlockCount()>();

        $i8 = $i6 * $i7;

        $r6 = newarray (byte)[$i8];

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks> = $r6;

        $r14 = new org.apache.lucene.util.LongsRef;

        $i9 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int iterations>;

        $r8 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.BulkOperation bulkOperation>;

        $i10 = virtualinvoke $r8.<org.apache.lucene.util.packed.BulkOperation: int byteValueCount()>();

        $i11 = $i9 * $i10;

        $r9 = newarray (long)[$i11];

        specialinvoke $r14.<org.apache.lucene.util.LongsRef: void <init>(long[],int,int)>($r9, 0, 0);

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues> = $r14;

        $r10 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r11 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r12 = $r11.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i12 = lengthof $r12;

        $r10.<org.apache.lucene.util.LongsRef: int offset> = $i12;

        $i14 = (int) -1;

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: int position> = $i14;

        return;
    }

    private int iterations(int)
    {
        org.apache.lucene.util.packed.PackedReaderIterator r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i7;
        org.apache.lucene.util.packed.BulkOperation $r1;

        r0 := @this: org.apache.lucene.util.packed.PackedReaderIterator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.BulkOperation bulkOperation>;

        $i1 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int valueCount>;

        $i2 = virtualinvoke $r1.<org.apache.lucene.util.packed.BulkOperation: int computeIterations(int,int)>($i1, i0);

        i5 = $i2;

        $i3 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int packedIntsVersion>;

        if $i3 >= 1 goto label1;

        $i4 = $i2 + 7;

        $i7 = (int) -8;

        i5 = $i4 & $i7;

     label1:
        return i5;
    }

    public org.apache.lucene.util.LongsRef next(int) throws java.io.IOException
    {
        byte[] $r7, $r8, $r10, $r13, $r16, $r17;
        org.apache.lucene.store.DataInput $r9;
        long $l11, $l13, $l14;
        java.lang.AssertionError $r23, $r24, $r26;
        org.apache.lucene.util.packed.PackedInts$Format $r6;
        org.apache.lucene.util.LongsRef $r1, $r2, $r3, $r4, $r11, $r15, $r19, $r20, $r21, $r25, $r27, $r28, $r30, $r31, $r32;
        boolean $z0, $z1, $z2;
        java.io.EOFException $r18;
        org.apache.lucene.util.packed.PackedReaderIterator r0;
        org.apache.lucene.util.packed.BulkOperation $r14;
        long[] $r5, $r12, $r22, $r29;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;

        r0 := @this: org.apache.lucene.util.packed.PackedReaderIterator;

        i25 := @parameter0: int;

        $z0 = <org.apache.lucene.util.packed.PackedReaderIterator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r25 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i24 = $r25.<org.apache.lucene.util.LongsRef: int length>;

        if $i24 >= 0 goto label1;

        $r26 = new java.lang.AssertionError;

        specialinvoke $r26.<java.lang.AssertionError: void <init>()>();

        throw $r26;

     label1:
        $z1 = <org.apache.lucene.util.packed.PackedReaderIterator: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if i25 > 0 goto label2;

        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label2:
        $z2 = <org.apache.lucene.util.packed.PackedReaderIterator: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r19 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i20 = $r19.<org.apache.lucene.util.LongsRef: int offset>;

        $r20 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i19 = $r20.<org.apache.lucene.util.LongsRef: int length>;

        $i22 = $i20 + $i19;

        $r21 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r22 = $r21.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i21 = lengthof $r22;

        if $i22 <= $i21 goto label3;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label3:
        $r1 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i1 = $r1.<org.apache.lucene.util.LongsRef: int offset>;

        $r2 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i0 = $r2.<org.apache.lucene.util.LongsRef: int length>;

        $i2 = $i1 + $i0;

        $r1.<org.apache.lucene.util.LongsRef: int offset> = $i2;

        $i4 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int valueCount>;

        $i3 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int position>;

        $i5 = $i4 - $i3;

        $i23 = $i5 - 1;

        if $i23 > 0 goto label4;

        $r18 = new java.io.EOFException;

        specialinvoke $r18.<java.io.EOFException: void <init>()>();

        throw $r18;

     label4:
        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i23, i25);

        $r3 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i8 = $r3.<org.apache.lucene.util.LongsRef: int offset>;

        $r4 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r5 = $r4.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i7 = lengthof $r5;

        if $i8 != $i7 goto label6;

        $r6 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.PackedInts$Format format>;

        $i10 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int packedIntsVersion>;

        $i9 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int bitsPerValue>;

        $l11 = virtualinvoke $r6.<org.apache.lucene.util.packed.PackedInts$Format: long byteCount(int,int,int)>($i10, $i23, $i9);

        $r7 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks>;

        $i12 = lengthof $r7;

        $l13 = (long) $i12;

        $l14 = staticinvoke <java.lang.Math: long min(long,long)>($l11, $l13);

        i15 = (int) $l14;

        $r9 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.store.DataInput in>;

        $r8 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks>;

        virtualinvoke $r9.<org.apache.lucene.store.DataInput: void readBytes(byte[],int,int)>($r8, 0, i15);

        $r10 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks>;

        $i16 = lengthof $r10;

        if i15 >= $i16 goto label5;

        $r17 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks>;

        $r16 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks>;

        $i18 = lengthof $r16;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r17, i15, $i18, 0);

     label5:
        $r14 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.packed.BulkOperation bulkOperation>;

        $r13 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: byte[] nextBlocks>;

        $r11 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r12 = $r11.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i17 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int iterations>;

        virtualinvoke $r14.<org.apache.lucene.util.packed.BulkOperation: void decode(byte[],int,long[],int,int)>($r13, 0, $r12, 0, $i17);

        $r15 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r15.<org.apache.lucene.util.LongsRef: int offset> = 0;

     label6:
        $r27 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r28 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $r29 = $r28.<org.apache.lucene.util.LongsRef: long[] longs>;

        $i26 = lengthof $r29;

        $r30 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i27 = $r30.<org.apache.lucene.util.LongsRef: int offset>;

        $i28 = $i26 - $i27;

        $i29 = staticinvoke <java.lang.Math: int min(int,int)>($i28, $i6);

        $r27.<org.apache.lucene.util.LongsRef: int length> = $i29;

        $i30 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int position>;

        $r31 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        $i31 = $r31.<org.apache.lucene.util.LongsRef: int length>;

        $i32 = $i30 + $i31;

        r0.<org.apache.lucene.util.packed.PackedReaderIterator: int position> = $i32;

        $r32 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: org.apache.lucene.util.LongsRef nextValues>;

        return $r32;
    }

    public int ord()
    {
        org.apache.lucene.util.packed.PackedReaderIterator r0;
        int $i0;

        r0 := @this: org.apache.lucene.util.packed.PackedReaderIterator;

        $i0 = r0.<org.apache.lucene.util.packed.PackedReaderIterator: int position>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/packed/PackedReaderIterator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.packed.PackedReaderIterator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
