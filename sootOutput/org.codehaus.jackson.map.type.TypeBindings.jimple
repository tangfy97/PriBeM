public class org.codehaus.jackson.map.type.TypeBindings extends java.lang.Object
{
    private static final org.codehaus.jackson.type.JavaType[] NO_TYPES;
    public static final org.codehaus.jackson.type.JavaType UNBOUND;
    protected final org.codehaus.jackson.map.type.TypeFactory _typeFactory;
    protected final org.codehaus.jackson.type.JavaType _contextType;
    protected final java.lang.Class _contextClass;
    protected java.util.Map _bindings;
    protected java.util.HashSet _placeholders;
    private final org.codehaus.jackson.map.type.TypeBindings _parentBindings;

    public void <init>(org.codehaus.jackson.map.type.TypeFactory, java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.lang.Class r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r1 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.map.type.TypeBindings,java.lang.Class,org.codehaus.jackson.type.JavaType)>(r1, null, r2, null);

        return;
    }

    public void <init>(org.codehaus.jackson.map.type.TypeFactory, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.type.JavaType r2;
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.lang.Class $r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r1 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        r2 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        specialinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.map.type.TypeBindings,java.lang.Class,org.codehaus.jackson.type.JavaType)>(r1, null, $r3, r2);

        return;
    }

    public org.codehaus.jackson.map.type.TypeBindings childInstance()
    {
        org.codehaus.jackson.map.type.TypeFactory $r4;
        org.codehaus.jackson.type.JavaType $r2;
        org.codehaus.jackson.map.type.TypeBindings $r0, r1;
        java.lang.Class $r3;

        r1 := @this: org.codehaus.jackson.map.type.TypeBindings;

        $r0 = new org.codehaus.jackson.map.type.TypeBindings;

        $r4 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r3 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        $r2 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        specialinvoke $r0.<org.codehaus.jackson.map.type.TypeBindings: void <init>(org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.map.type.TypeBindings,java.lang.Class,org.codehaus.jackson.type.JavaType)>($r4, r1, $r3, $r2);

        return $r0;
    }

    private void <init>(org.codehaus.jackson.map.type.TypeFactory, org.codehaus.jackson.map.type.TypeBindings, java.lang.Class, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeFactory r1;
        org.codehaus.jackson.type.JavaType r4;
        org.codehaus.jackson.map.type.TypeBindings r0, r2;
        java.lang.Class r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r1 := @parameter0: org.codehaus.jackson.map.type.TypeFactory;

        r2 := @parameter1: org.codehaus.jackson.map.type.TypeBindings;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: org.codehaus.jackson.type.JavaType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory> = r1;

        r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeBindings _parentBindings> = r2;

        r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass> = r3;

        r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType> = r4;

        return;
    }

    public org.codehaus.jackson.type.JavaType resolveType(java.lang.Class)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.lang.Class r1;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r1, r0);

        return $r3;
    }

    public org.codehaus.jackson.type.JavaType resolveType(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeFactory $r2;
        java.lang.reflect.Type r1;
        org.codehaus.jackson.type.JavaType $r3;
        org.codehaus.jackson.map.type.TypeBindings r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r1 := @parameter0: java.lang.reflect.Type;

        $r2 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r1, r0);

        return $r3;
    }

    public int getBindingCount()
    {
        java.util.Map $r1, $r2;
        int $i0;
        org.codehaus.jackson.map.type.TypeBindings r0;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void _resolve()>();

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public org.codehaus.jackson.type.JavaType findType(java.lang.String)
    {
        org.codehaus.jackson.map.type.TypeBindings r0, $r6, $r15;
        java.util.Map $r1, $r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r23, $r24, $r25, $r26, $r27, $r28;
        java.util.HashSet $r5, $r17;
        int $i0;
        org.codehaus.jackson.type.JavaType $r8, $r9, $r14, $r16, $r18, $r19;
        java.lang.String r2, r21, $r29;
        java.lang.IllegalArgumentException $r22;
        java.lang.Object $r4;
        java.lang.Class $r7, $r10, $r11, $r12, $r13, $r20;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void _resolve()>();

     label1:
        $r3 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r19 = (org.codehaus.jackson.type.JavaType) $r4;

        if $r19 == null goto label2;

        return $r19;

     label2:
        $r5 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.HashSet _placeholders>;

        if $r5 == null goto label3;

        $r17 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.HashSet _placeholders>;

        $z1 = virtualinvoke $r17.<java.util.HashSet: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        $r18 = <org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType UNBOUND>;

        return $r18;

     label3:
        $r6 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeBindings _parentBindings>;

        if $r6 == null goto label4;

        $r15 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeBindings _parentBindings>;

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType findType(java.lang.String)>(r2);

        return $r16;

     label4:
        $r7 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        if $r7 == null goto label5;

        $r11 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r12 == null goto label5;

        $r13 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        $i0 = virtualinvoke $r13.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label5;

        $r14 = <org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType UNBOUND>;

        return $r14;

     label5:
        $r20 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        if $r20 == null goto label6;

        $r10 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        r21 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        goto label8;

     label6:
        $r8 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        if $r8 == null goto label7;

        $r9 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        r21 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: java.lang.String toString()>();

        goto label8;

     label7:
        r21 = "UNKNOWN";

     label8:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type variable \'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' can not be resolved (with context of class ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r22;
    }

    public void addBinding(java.lang.String, org.codehaus.jackson.type.JavaType)
    {
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.util.LinkedHashMap $r2;
        java.util.Map $r1, $r5, $r6;
        int $i0;
        org.codehaus.jackson.type.JavaType r4;
        java.lang.String r3;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: org.codehaus.jackson.type.JavaType;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r1 == null goto label1;

        $r5 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings> = $r2;

     label2:
        $r6 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public org.codehaus.jackson.type.JavaType[] typesAsArray()
    {
        java.lang.Object[] $r7;
        java.util.Collection $r4;
        org.codehaus.jackson.map.type.TypeBindings r0;
        org.codehaus.jackson.type.JavaType[] $r6, $r8, $r9;
        java.util.Map $r1, $r2, $r3, $r5;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void _resolve()>();

     label1:
        $r2 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 0 goto label2;

        $r9 = <org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType[] NO_TYPES>;

        return $r9;

     label2:
        $r3 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r5 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $i1 = interfaceinvoke $r5.<java.util.Map: int size()>();

        $r6 = newarray (org.codehaus.jackson.type.JavaType)[$i1];

        $r7 = interfaceinvoke $r4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.codehaus.jackson.type.JavaType[]) $r7;

        return $r8;
    }

    protected void _resolve()
    {
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.util.LinkedHashMap $r11;
        java.util.Map $r3, $r5, $r10, $r12;
        int $i0, i1;
        org.codehaus.jackson.type.JavaType $r2, $r4, $r6, $r8, $r9;
        java.lang.Class $r1;
        java.lang.String $r7;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>($r1);

        $r2 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        if $r2 == null goto label3;

        $r4 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        $i0 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: int containedTypeCount()>();

        if $i0 <= 0 goto label3;

        $r5 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r5 != null goto label1;

        $r11 = new java.util.LinkedHashMap;

        specialinvoke $r11.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings> = $r11;

     label1:
        i1 = 0;

     label2:
        if i1 >= $i0 goto label3;

        $r6 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: java.lang.String containedTypeName(int)>(i1);

        $r8 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType containedType(int)>(i1);

        $r10 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r12 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r12 != null goto label4;

        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings> = $r3;

     label4:
        return;
    }

    public void _addPlaceholder(java.lang.String)
    {
        java.util.HashSet $r1, $r3, $r4;
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.lang.String r2;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.HashSet _placeholders>;

        if $r1 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.HashSet _placeholders> = $r4;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.HashSet _placeholders>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        return;
    }

    protected void _resolveBindings(java.lang.reflect.Type)
    {
        org.codehaus.jackson.map.type.TypeBindings r1;
        java.util.Map $r9, $r10, $r12, $r15, $r26, $r27, $r30;
        java.lang.StringBuilder $r34, $r35, $r37, $r38, $r39, $r40, $r41, $r42;
        org.codehaus.jackson.map.type.TypeFactory $r11, $r20, $r29;
        java.util.LinkedHashMap $r16, $r32;
        java.lang.String $r7, $r25, $r36, $r43;
        java.lang.reflect.TypeVariable r24, r49;
        java.lang.reflect.ParameterizedType r44;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.type.JavaType[] r48;
        java.lang.reflect.Type r0, $r4, $r22, $r28, $r46, r50, r51;
        java.lang.reflect.Type[] $r5, $r8, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, i11;
        org.codehaus.jackson.type.JavaType $r6, $r13, $r14, $r17, $r19, $r31;
        java.lang.IllegalArgumentException $r33;
        java.lang.reflect.TypeVariable[] $r3, $r23;
        java.lang.Class $r2, $r18, r45, r47;

        r1 := @this: org.codehaus.jackson.map.type.TypeBindings;

        r0 := @parameter0: java.lang.reflect.Type;

        if r0 != null goto label01;

        return;

     label01:
        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label08;

        r44 = (java.lang.reflect.ParameterizedType) r0;

        $r21 = interfaceinvoke r44.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        if $r21 == null goto label07;

        $i2 = lengthof $r21;

        if $i2 <= 0 goto label07;

        $r22 = interfaceinvoke r44.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r45 = (java.lang.Class) $r22;

        $r23 = virtualinvoke r45.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $i4 = lengthof $r23;

        $i3 = lengthof $r21;

        if $i4 == $i3 goto label02;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Strange parametrized type (in class ");

        $r36 = virtualinvoke r45.<java.lang.Class: java.lang.String getName()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): number of type arguments != number of type parameters (");

        $i5 = lengthof $r21;

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $i6 = lengthof $r23;

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r43);

        throw $r33;

     label02:
        i7 = 0;

        i8 = lengthof $r21;

     label03:
        if i7 >= i8 goto label07;

        r24 = $r23[i7];

        $r25 = interfaceinvoke r24.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r26 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r26 != null goto label04;

        $r32 = new java.util.LinkedHashMap;

        specialinvoke $r32.<java.util.LinkedHashMap: void <init>()>();

        r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings> = $r32;

        goto label05;

     label04:
        $r27 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $z4 = interfaceinvoke $r27.<java.util.Map: boolean containsKey(java.lang.Object)>($r25);

        if $z4 == 0 goto label05;

        goto label06;

     label05:
        virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBindings: void _addPlaceholder(java.lang.String)>($r25);

        $r30 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $r29 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r28 = $r21[i7];

        $r31 = virtualinvoke $r29.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>($r28, r1);

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r31);

     label06:
        i7 = i7 + 1;

        goto label03;

     label07:
        $r46 = interfaceinvoke r44.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        r47 = (java.lang.Class) $r46;

        goto label17;

     label08:
        $z1 = r0 instanceof java.lang.Class;

        if $z1 == 0 goto label16;

        r47 = (java.lang.Class) r0;

        $r2 = virtualinvoke r47.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>($r2);

        $r3 = virtualinvoke r47.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        if $r3 == null goto label15;

        $i0 = lengthof $r3;

        if $i0 <= 0 goto label15;

        r48 = null;

        $r6 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        if $r6 == null goto label09;

        $r17 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        $r18 = virtualinvoke $r17.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z3 = virtualinvoke r47.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r18);

        if $z3 == 0 goto label09;

        $r20 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r19 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        r48 = virtualinvoke $r20.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r19, r47);

     label09:
        i9 = 0;

     label10:
        $i10 = lengthof $r3;

        if i9 >= $i10 goto label15;

        r49 = $r3[i9];

        $r7 = interfaceinvoke r49.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $r8 = interfaceinvoke r49.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        r50 = $r8[0];

        if r50 == null goto label14;

        $r9 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r9 != null goto label11;

        $r16 = new java.util.LinkedHashMap;

        specialinvoke $r16.<java.util.LinkedHashMap: void <init>()>();

        r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings> = $r16;

        goto label12;

     label11:
        $r10 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z2 == 0 goto label12;

        goto label14;

     label12:
        virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBindings: void _addPlaceholder(java.lang.String)>($r7);

        if r48 == null goto label13;

        $r15 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $r14 = r48[i9];

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r14);

        goto label14;

     label13:
        $r12 = r1.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $r11 = r1.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.map.type.TypeFactory _typeFactory>;

        $r13 = virtualinvoke $r11.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType _constructType(java.lang.reflect.Type,org.codehaus.jackson.map.type.TypeBindings)>(r50, r1);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r13);

     label14:
        i9 = i9 + 1;

        goto label10;

     label15:
        goto label17;

     label16:
        return;

     label17:
        $r4 = virtualinvoke r47.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>($r4);

        $r5 = virtualinvoke r47.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $i1 = lengthof $r5;

        i11 = 0;

     label18:
        if i11 >= $i1 goto label19;

        r51 = $r5[i11];

        virtualinvoke r1.<org.codehaus.jackson.map.type.TypeBindings: void _resolveBindings(java.lang.reflect.Type)>(r51);

        i11 = i11 + 1;

        goto label18;

     label19:
        return;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.type.TypeBindings r0;
        java.util.Map $r1, $r7;
        org.codehaus.jackson.type.JavaType $r3, $r10;
        java.lang.StringBuilder $r2, $r6, $r8;
        java.lang.Class $r4;
        java.lang.String $r5, $r9, $r11;

        r0 := @this: org.codehaus.jackson.map.type.TypeBindings;

        $r1 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        if $r1 != null goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.type.TypeBindings: void _resolve()>();

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[TypeBindings for ");

        $r3 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        if $r3 == null goto label2;

        $r10 = r0.<org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType _contextType>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label3;

     label2:
        $r4 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.lang.Class _contextClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label3:
        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = r0.<org.codehaus.jackson.map.type.TypeBindings: java.util.Map _bindings>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.type.JavaType[] $r0;
        org.codehaus.jackson.map.type.SimpleType $r1;

        $r0 = newarray (org.codehaus.jackson.type.JavaType)[0];

        <org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType[] NO_TYPES> = $r0;

        $r1 = new org.codehaus.jackson.map.type.SimpleType;

        specialinvoke $r1.<org.codehaus.jackson.map.type.SimpleType: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        <org.codehaus.jackson.map.type.TypeBindings: org.codehaus.jackson.type.JavaType UNBOUND> = $r1;

        return;
    }
}
