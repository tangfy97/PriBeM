public class org.apache.xalan.extensions.ExtensionHandlerExsltFunction extends org.apache.xalan.extensions.ExtensionHandler
{
    private java.lang.String m_namespace;
    private org.apache.xalan.templates.StylesheetRoot m_stylesheet;
    private static final org.apache.xml.utils.QName RESULTQNAME;

    public void <init>(java.lang.String, org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.templates.StylesheetRoot r2;
        java.lang.String r1;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r0;

        r0 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.extensions.ExtensionHandler: void <init>(java.lang.String,java.lang.String)>(r1, "xml");

        r0.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: java.lang.String m_namespace> = r1;

        r0.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xalan.templates.StylesheetRoot m_stylesheet> = r2;

        return;
    }

    public void processElement(java.lang.String, org.apache.xalan.templates.ElemTemplateElement, org.apache.xalan.transformer.TransformerImpl, org.apache.xalan.templates.Stylesheet, java.lang.Object) throws javax.xml.transform.TransformerException, java.io.IOException
    {
        org.apache.xalan.templates.ElemTemplateElement r2;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r0;
        java.lang.Object r5;
        java.lang.String r1;
        org.apache.xalan.templates.Stylesheet r4;
        org.apache.xalan.transformer.TransformerImpl r3;

        r0 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        r3 := @parameter2: org.apache.xalan.transformer.TransformerImpl;

        r4 := @parameter3: org.apache.xalan.templates.Stylesheet;

        r5 := @parameter4: java.lang.Object;

        return;
    }

    public org.apache.xalan.templates.ElemExsltFunction getFunction(java.lang.String)
    {
        org.apache.xml.utils.QName $r0;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r1;
        org.apache.xalan.templates.StylesheetRoot $r4;
        org.apache.xalan.templates.ElemExsltFunction $r6;
        org.apache.xalan.templates.ElemTemplate $r5;
        java.lang.String r2, $r3;
        boolean $z0;

        r1 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.xml.utils.QName;

        $r3 = r1.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: java.lang.String m_namespace>;

        specialinvoke $r0.<org.apache.xml.utils.QName: void <init>(java.lang.String,java.lang.String)>($r3, r2);

        $r4 = r1.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xalan.templates.StylesheetRoot m_stylesheet>;

        $r5 = virtualinvoke $r4.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.ElemTemplate getTemplateComposed(org.apache.xml.utils.QName)>($r0);

        if $r5 == null goto label1;

        $z0 = $r5 instanceof org.apache.xalan.templates.ElemExsltFunction;

        if $z0 == 0 goto label1;

        $r6 = (org.apache.xalan.templates.ElemExsltFunction) $r5;

        return $r6;

     label1:
        return null;
    }

    public boolean isFunctionAvailable(java.lang.String)
    {
        org.apache.xalan.templates.ElemExsltFunction $r2;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xalan.templates.ElemExsltFunction getFunction(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isElementAvailable(java.lang.String)
    {
        org.apache.xml.utils.QName $r0, $r4;
        org.apache.xalan.templates.ElemTemplateElement $r7, r8, r9;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r1;
        org.apache.xalan.templates.StylesheetRoot $r5, $r6;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2;

        r1 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.xml.utils.QName;

        $r3 = r1.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: java.lang.String m_namespace>;

        specialinvoke $r0.<org.apache.xml.utils.QName: void <init>(java.lang.String,java.lang.String)>($r3, r2);

        $r4 = <org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xml.utils.QName RESULTQNAME>;

        $z0 = virtualinvoke $r0.<org.apache.xml.utils.QName: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = r1.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xalan.templates.StylesheetRoot m_stylesheet>;

        r8 = virtualinvoke $r5.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        goto label6;

     label2:
        $z1 = r8 instanceof org.apache.xalan.templates.ElemExsltFuncResult;

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r1.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: boolean ancestorIsFunction(org.apache.xalan.templates.ElemTemplateElement)>(r8);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $r7 = virtualinvoke r8.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        r9 = $r7;

        if $r7 != null goto label4;

        r9 = virtualinvoke r8.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

     label4:
        if r9 != null goto label5;

        r9 = virtualinvoke r8.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label5:
        r8 = r9;

     label6:
        if r8 == null goto label7;

        $r6 = r1.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xalan.templates.StylesheetRoot m_stylesheet>;

        if r8 != $r6 goto label2;

     label7:
        return 0;
    }

    private boolean ancestorIsFunction(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.ElemTemplateElement $r0, $r1, $r2, r4;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r3;
        boolean $z0, $z1;

        r3 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r4 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        goto label3;

     label1:
        $r2 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        $z1 = $r2 instanceof org.apache.xalan.templates.ElemExsltFunction;

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r4 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label3:
        $r0 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        if $r0 == null goto label4;

        $r1 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        $z0 = $r1 instanceof org.apache.xalan.templates.StylesheetRoot;

        if $z0 == 0 goto label1;

     label4:
        return 0;
    }

    public java.lang.Object callFunction(java.lang.String, java.util.Vector, java.lang.Object, org.apache.xalan.extensions.ExpressionContext) throws javax.xml.transform.TransformerException
    {
        java.util.Vector r3;
        javax.xml.transform.TransformerException $r0;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r1;
        org.apache.xalan.extensions.ExpressionContext r5;
        java.lang.Object r4;
        java.lang.String r2;

        r1 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Vector;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: org.apache.xalan.extensions.ExpressionContext;

        $r0 = new javax.xml.transform.TransformerException;

        specialinvoke $r0.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>("This method should not be called.");

        throw $r0;
    }

    public java.lang.Object callFunction(org.apache.xpath.functions.FuncExtFunction, java.util.Vector, org.apache.xalan.extensions.ExpressionContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.ExpressionNode r21;
        org.apache.xpath.functions.FuncExtFunction r0;
        java.lang.Object[] $r8;
        javax.xml.transform.TransformerException $r20, $r25, $r26;
        org.apache.xalan.extensions.ExpressionContext r11;
        org.apache.xpath.objects.XObject[] $r17;
        java.util.Vector r1;
        org.apache.xalan.templates.ElemTemplate $r22;
        org.apache.xpath.XPathContext $r12;
        int $i0, $i1, i2;
        java.lang.String $r5, $r9, $r10;
        boolean $z0;
        org.apache.xalan.extensions.ExtensionHandlerExsltFunction r4;
        org.apache.xpath.objects.XString $r24;
        java.lang.Exception $r18;
        org.apache.xalan.templates.ElemExsltFunction $r6;
        org.apache.xpath.objects.XObject $r3, r16, $r23;
        java.lang.Object $r2, $r13, $r15;
        org.apache.xalan.transformer.TransformerImpl r14;

        r4 := @this: org.apache.xalan.extensions.ExtensionHandlerExsltFunction;

        r0 := @parameter0: org.apache.xpath.functions.FuncExtFunction;

        r1 := @parameter1: java.util.Vector;

        r11 := @parameter2: org.apache.xalan.extensions.ExpressionContext;

        r21 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

        goto label02;

     label01:
        r21 = interfaceinvoke r21.<org.apache.xpath.ExpressionNode: org.apache.xpath.ExpressionNode exprGetParent()>();

     label02:
        if r21 == null goto label03;

        $z0 = r21 instanceof org.apache.xalan.templates.ElemTemplate;

        if $z0 == 0 goto label01;

     label03:
        if r21 == null goto label04;

        $r22 = (org.apache.xalan.templates.ElemTemplate) r21;

        goto label04;

     label04:
        $i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        $r17 = newarray (org.apache.xpath.objects.XObject)[$i0];

     label05:
        i2 = 0;

        goto label07;

     label06:
        $r2 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        $r3 = staticinvoke <org.apache.xpath.objects.XObject: org.apache.xpath.objects.XObject create(java.lang.Object)>($r2);

        $r17[i2] = $r3;

        i2 = i2 + 1;

     label07:
        $i1 = lengthof $r17;

        if i2 < $i1 goto label06;

        $r5 = virtualinvoke r0.<org.apache.xpath.functions.FuncExtFunction: java.lang.String getFunctionName()>();

        $r6 = virtualinvoke r4.<org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xalan.templates.ElemExsltFunction getFunction(java.lang.String)>($r5);

        if null == $r6 goto label10;

        $r12 = interfaceinvoke r11.<org.apache.xalan.extensions.ExpressionContext: org.apache.xpath.XPathContext getXPathContext()>();

        $r13 = virtualinvoke $r12.<org.apache.xpath.XPathContext: java.lang.Object getOwnerObject()>();

        r14 = (org.apache.xalan.transformer.TransformerImpl) $r13;

        virtualinvoke r14.<org.apache.xalan.transformer.TransformerImpl: void pushCurrentFuncResult(java.lang.Object)>(null);

        virtualinvoke $r6.<org.apache.xalan.templates.ElemExsltFunction: void execute(org.apache.xalan.transformer.TransformerImpl,org.apache.xpath.objects.XObject[])>(r14, $r17);

        $r15 = virtualinvoke r14.<org.apache.xalan.transformer.TransformerImpl: java.lang.Object popCurrentFuncResult()>();

        r16 = (org.apache.xpath.objects.XObject) $r15;

        if r16 != null goto label08;

        $r24 = new org.apache.xpath.objects.XString;

        $r23 = $r24;

        specialinvoke $r24.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>("");

        goto label09;

     label08:
        $r23 = r16;

     label09:
        return $r23;

     label10:
        $r25 = new javax.xml.transform.TransformerException;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r0.<org.apache.xpath.functions.FuncExtFunction: java.lang.String getFunctionName()>();

        $r8[0] = $r9;

        $r10 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_FUNCTION_NOT_FOUND", $r8);

        specialinvoke $r25.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>($r10);

        throw $r25;

     label11:
        $r20 := @caughtexception;

        throw $r20;

     label12:
        $r18 := @caughtexception;

        $r26 = new javax.xml.transform.TransformerException;

        specialinvoke $r26.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>($r18);

        throw $r26;

        catch javax.xml.transform.TransformerException from label05 to label11 with label11;
        catch java.lang.Exception from label05 to label11 with label12;
    }

    static void <clinit>()
    {
        org.apache.xml.utils.QName $r0;

        $r0 = new org.apache.xml.utils.QName;

        specialinvoke $r0.<org.apache.xml.utils.QName: void <init>(java.lang.String,java.lang.String)>("http://exslt.org/functions", "result");

        <org.apache.xalan.extensions.ExtensionHandlerExsltFunction: org.apache.xml.utils.QName RESULTQNAME> = $r0;

        return;
    }
}
