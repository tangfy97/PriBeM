public class org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference extends org.eclipse.jdt.internal.compiler.ast.TypeReference
{
    public char[] token;

    public void <init>(char[], int)
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;
        int i0;
        char[] r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: char[] token> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: int sourceStart> = i0;

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: int sourceEnd> = i0;

        return;
    }

    public org.eclipse.jdt.internal.compiler.ast.TypeReference copyDims(int)
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;
        int i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        i0 := @parameter0: int;

        return null;
    }

    protected org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.lookup.Scope r2;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r3;
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding enclosingReceiverType()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r3;

        return $r3;
    }

    public char[] getLastToken()
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;
        char[] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: char[] token>;

        return $r1;
    }

    public char[][] getTypeName()
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;
        char[] $r1, $r3;
        char[][] $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: char[] token>;

        if $r1 == null goto label1;

        $r2 = newarray (char[])[1];

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: char[] token>;

        $r2[0] = $r3;

        return $r2;

     label1:
        return null;
    }

    public boolean isThis()
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        return 1;
    }

    protected org.eclipse.jdt.internal.compiler.lookup.TypeBinding internalResolveType(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r9;
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r2, $r4, $r8, $r10, $r11, $r12, $r13, $r14, $r15, r16;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z7, $z8, $z9;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r5;
        org.eclipse.jdt.internal.compiler.lookup.Scope r3;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r7;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r6;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        if $r2 == null goto label04;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $z5 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isValidBinding()>();

        if $z5 == 0 goto label01;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r15;

     label01:
        $r12 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i1 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int problemId()>();

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label02;
            default: goto label03;
        };

     label02:
        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r14 = virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding closestMatch()>();

        return $r14;

     label03:
        return null;

     label04:
        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding getTypeBinding(org.eclipse.jdt.internal.compiler.lookup.Scope)>(r3);

        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r4;

        r16 = $r4;

        if $r4 != null goto label05;

        return null;

     label05:
        $z0 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isValidBinding()>();

        if $z0 == 0 goto label06;

        $z9 = 0;

        $z8 = 0;

        goto label07;

     label06:
        $z9 = 1;

        $z8 = 1;

     label07:
        z7 = $z8;

        if $z9 == 0 goto label10;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: void reportInvalidType(org.eclipse.jdt.internal.compiler.lookup.Scope)>(r3);

        $i0 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int problemId()>();

        tableswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label08;
            default: goto label09;
        };

     label08:
        $r10 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding closestMatch()>();

        r16 = $r10;

        if $r10 != null goto label10;

        return null;

     label09:
        return null;

     label10:
        $z1 = virtualinvoke r16.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z1 == 0 goto label11;

        $r6 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) r16;

        $r8 = $r6.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding leafComponentType>;

        $r7 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding VOID>;

        if $r8 != $r7 goto label11;

        $r9 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void cannotAllocateVoidArray(org.eclipse.jdt.internal.compiler.ast.Expression)>(r0);

        return null;

     label11:
        $z2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: boolean isTypeUseDeprecated(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.Scope)>(r16, r3);

        if $z2 == 0 goto label12;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: void reportDeprecatedType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.Scope)>(r16, r3);

     label12:
        $z3 = virtualinvoke r16.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isGenericType()>();

        if $z3 != 0 goto label13;

        $z4 = virtualinvoke r16.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isParameterizedType()>();

        if $z4 == 0 goto label14;

     label13:
        $r5 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment environment()>();

        r16 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.TypeBinding convertToRawType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,boolean)>(r16, 1);

     label14:
        if z7 == 0 goto label15;

        return r16;

     label15:
        r0.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = r16;

        return r16;
    }

    protected void reportInvalidType(org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r0;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r1;
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3;
        int $i0;

        r2 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $r3 = r2.<org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.Scope: int getDeclarationModifiers()>();

        virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void javadocInvalidType(org.eclipse.jdt.internal.compiler.ast.ASTNode,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,int)>(r2, $r3, $i0);

        return;
    }

    protected void reportDeprecatedType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding, org.eclipse.jdt.internal.compiler.lookup.Scope)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r0;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r1;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding r2;
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r3;
        int $i0;

        r3 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.Scope;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        $i0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.lookup.Scope: int getDeclarationModifiers()>();

        virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void javadocDeprecatedType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode,int)>(r2, r3, $i0);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.ClassScope)
    {
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.ClassScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.ClassScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference,org.eclipse.jdt.internal.compiler.lookup.ClassScope)>(r1, r2);

        return;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        java.lang.StringBuffer $r0, r2;
        org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference r1;
        int i0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.JavadocImplicitTypeReference;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.StringBuffer;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        return $r0;
    }
}
