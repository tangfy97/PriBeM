class org.apache.xpath.objects.LessThanComparator extends org.apache.xpath.objects.Comparator
{

    void <init>()
    {
        org.apache.xpath.objects.LessThanComparator r0;

        r0 := @this: org.apache.xpath.objects.LessThanComparator;

        specialinvoke r0.<org.apache.xpath.objects.Comparator: void <init>()>();

        return;
    }

    boolean compareStrings(org.apache.xml.utils.XMLString, org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.LessThanComparator r2;
        org.apache.xml.utils.XMLString r0, r1;
        byte $b0;
        int $i1;
        double $d0, $d1;
        boolean $z0;

        r2 := @this: org.apache.xpath.objects.LessThanComparator;

        r0 := @parameter0: org.apache.xml.utils.XMLString;

        r1 := @parameter1: org.apache.xml.utils.XMLString;

        $d0 = interfaceinvoke r0.<org.apache.xml.utils.XMLString: double toDouble()>();

        $d1 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: double toDouble()>();

        $b0 = $d0 cmpg $d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean compareNumbers(double, double)
    {
        byte $b0;
        int $i1;
        org.apache.xpath.objects.LessThanComparator r0;
        double d0, d1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.LessThanComparator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg d1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
