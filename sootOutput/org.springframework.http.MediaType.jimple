public class org.springframework.http.MediaType extends java.lang.Object implements java.lang.Comparable
{
    public static final org.springframework.http.MediaType ALL;
    public static final org.springframework.http.MediaType APPLICATION_ATOM_XML;
    public static final org.springframework.http.MediaType APPLICATION_FORM_URLENCODED;
    public static final org.springframework.http.MediaType APPLICATION_JSON;
    public static final org.springframework.http.MediaType APPLICATION_OCTET_STREAM;
    public static final org.springframework.http.MediaType APPLICATION_XHTML_XML;
    public static final org.springframework.http.MediaType APPLICATION_XML;
    public static final org.springframework.http.MediaType IMAGE_GIF;
    public static final org.springframework.http.MediaType IMAGE_JPEG;
    public static final org.springframework.http.MediaType IMAGE_PNG;
    public static final org.springframework.http.MediaType MULTIPART_FORM_DATA;
    public static final org.springframework.http.MediaType TEXT_HTML;
    public static final org.springframework.http.MediaType TEXT_PLAIN;
    public static final org.springframework.http.MediaType TEXT_XML;
    private static final java.util.BitSet TOKEN;
    private static final java.lang.String WILDCARD_TYPE;
    private static final java.lang.String PARAM_QUALITY_FACTOR;
    private static final java.lang.String PARAM_CHARSET;
    private final java.lang.String type;
    private final java.lang.String subtype;
    private final java.util.Map parameters;
    public static final java.util.Comparator SPECIFICITY_COMPARATOR;
    public static final java.util.Comparator QUALITY_VALUE_COMPARATOR;

    static void <clinit>()
    {
        org.springframework.http.MediaType$1 $r20;
        org.springframework.http.MediaType$2 $r21;
        int i0;
        org.springframework.http.MediaType $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.util.BitSet $r0, $r1, $r2, $r3, $r4, $r5;

        <org.springframework.http.MediaType: java.lang.String PARAM_CHARSET> = "charset";

        <org.springframework.http.MediaType: java.lang.String PARAM_QUALITY_FACTOR> = "q";

        <org.springframework.http.MediaType: java.lang.String WILDCARD_TYPE> = "*";

        $r0 = new java.util.BitSet;

        specialinvoke $r0.<java.util.BitSet: void <init>(int)>(128);

        i0 = 0;

        goto label2;

     label1:
        virtualinvoke $r0.<java.util.BitSet: void set(int)>(i0);

        i0 = i0 + 1;

     label2:
        if i0 <= 31 goto label1;

        virtualinvoke $r0.<java.util.BitSet: void set(int)>(127);

        $r1 = new java.util.BitSet;

        specialinvoke $r1.<java.util.BitSet: void <init>(int)>(128);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(40);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(41);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(60);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(62);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(64);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(44);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(59);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(58);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(92);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(34);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(47);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(91);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(93);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(63);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(61);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(123);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(125);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(32);

        virtualinvoke $r1.<java.util.BitSet: void set(int)>(9);

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>(int)>(128);

        <org.springframework.http.MediaType: java.util.BitSet TOKEN> = $r2;

        $r3 = <org.springframework.http.MediaType: java.util.BitSet TOKEN>;

        virtualinvoke $r3.<java.util.BitSet: void set(int,int)>(0, 128);

        $r4 = <org.springframework.http.MediaType: java.util.BitSet TOKEN>;

        virtualinvoke $r4.<java.util.BitSet: void andNot(java.util.BitSet)>($r0);

        $r5 = <org.springframework.http.MediaType: java.util.BitSet TOKEN>;

        virtualinvoke $r5.<java.util.BitSet: void andNot(java.util.BitSet)>($r1);

        $r6 = new org.springframework.http.MediaType;

        specialinvoke $r6.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("*", "*");

        <org.springframework.http.MediaType: org.springframework.http.MediaType ALL> = $r6;

        $r7 = new org.springframework.http.MediaType;

        specialinvoke $r7.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "atom+xml");

        <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_ATOM_XML> = $r7;

        $r8 = new org.springframework.http.MediaType;

        specialinvoke $r8.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "x-www-form-urlencoded");

        <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_FORM_URLENCODED> = $r8;

        $r9 = new org.springframework.http.MediaType;

        specialinvoke $r9.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "json");

        <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_JSON> = $r9;

        $r10 = new org.springframework.http.MediaType;

        specialinvoke $r10.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "octet-stream");

        <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_OCTET_STREAM> = $r10;

        $r11 = new org.springframework.http.MediaType;

        specialinvoke $r11.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "xhtml+xml");

        <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_XHTML_XML> = $r11;

        $r12 = new org.springframework.http.MediaType;

        specialinvoke $r12.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("application", "xml");

        <org.springframework.http.MediaType: org.springframework.http.MediaType APPLICATION_XML> = $r12;

        $r13 = new org.springframework.http.MediaType;

        specialinvoke $r13.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("image", "gif");

        <org.springframework.http.MediaType: org.springframework.http.MediaType IMAGE_GIF> = $r13;

        $r14 = new org.springframework.http.MediaType;

        specialinvoke $r14.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("image", "jpeg");

        <org.springframework.http.MediaType: org.springframework.http.MediaType IMAGE_JPEG> = $r14;

        $r15 = new org.springframework.http.MediaType;

        specialinvoke $r15.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("image", "png");

        <org.springframework.http.MediaType: org.springframework.http.MediaType IMAGE_PNG> = $r15;

        $r16 = new org.springframework.http.MediaType;

        specialinvoke $r16.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("multipart", "form-data");

        <org.springframework.http.MediaType: org.springframework.http.MediaType MULTIPART_FORM_DATA> = $r16;

        $r17 = new org.springframework.http.MediaType;

        specialinvoke $r17.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("text", "html");

        <org.springframework.http.MediaType: org.springframework.http.MediaType TEXT_HTML> = $r17;

        $r18 = new org.springframework.http.MediaType;

        specialinvoke $r18.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("text", "plain");

        <org.springframework.http.MediaType: org.springframework.http.MediaType TEXT_PLAIN> = $r18;

        $r19 = new org.springframework.http.MediaType;

        specialinvoke $r19.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>("text", "xml");

        <org.springframework.http.MediaType: org.springframework.http.MediaType TEXT_XML> = $r19;

        $r20 = new org.springframework.http.MediaType$1;

        specialinvoke $r20.<org.springframework.http.MediaType$1: void <init>()>();

        <org.springframework.http.MediaType: java.util.Comparator SPECIFICITY_COMPARATOR> = $r20;

        $r21 = new org.springframework.http.MediaType$2;

        specialinvoke $r21.<org.springframework.http.MediaType$2: void <init>()>();

        <org.springframework.http.MediaType: java.util.Comparator QUALITY_VALUE_COMPARATOR> = $r21;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.http.MediaType r0;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String)>(r1, "*");

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.springframework.http.MediaType r0;
        java.util.Map $r3;
        java.lang.String r1, r2;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        specialinvoke r0.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.util.Map)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.nio.charset.Charset)
    {
        java.nio.charset.Charset r3;
        org.springframework.http.MediaType r0;
        java.util.Map $r5;
        java.lang.String r1, r2, $r4;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.nio.charset.Charset;

        $r4 = virtualinvoke r3.<java.nio.charset.Charset: java.lang.String name()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("charset", $r4);

        specialinvoke r0.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.util.Map)>(r1, r2, $r5);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, double)
    {
        org.springframework.http.MediaType r0;
        java.util.Map $r4;
        java.lang.String r1, r2, $r3;
        double d0;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        $r3 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        $r4 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("q", $r3);

        specialinvoke r0.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.util.Map)>(r1, r2, $r4);

        return;
    }

    public void <init>(org.springframework.http.MediaType, java.util.Map)
    {
        org.springframework.http.MediaType r0, r1;
        java.util.Map r4;
        java.lang.String $r2, $r3;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: org.springframework.http.MediaType;

        r4 := @parameter1: java.util.Map;

        $r2 = virtualinvoke r1.<org.springframework.http.MediaType: java.lang.String getType()>();

        $r3 = virtualinvoke r1.<org.springframework.http.MediaType: java.lang.String getSubtype()>();

        specialinvoke r0.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.util.Map)>($r2, $r3, r4);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.util.Map)
    {
        org.springframework.util.LinkedCaseInsensitiveMap $r9;
        java.util.Locale $r3, $r5, $r10;
        java.util.Map r7, $r8, $r20;
        int $i0;
        java.lang.String r1, r2, $r4, $r6, r16, r18, $r19;
        boolean $z0, $z1;
        java.util.Map$Entry r14;
        java.util.Iterator $r12;
        org.springframework.http.MediaType r0;
        java.util.Set $r11;
        java.lang.Object $r13, $r15, $r17;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r1, "\'type\' must not be empty");

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r2, "\'subtype\' must not be empty");

        specialinvoke r0.<org.springframework.http.MediaType: void checkToken(java.lang.String)>(r1);

        specialinvoke r0.<org.springframework.http.MediaType: void checkToken(java.lang.String)>(r2);

        $r3 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        r0.<org.springframework.http.MediaType: java.lang.String type> = $r4;

        $r5 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

        r0.<org.springframework.http.MediaType: java.lang.String subtype> = $r6;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Map)>(r7);

        if $z0 != 0 goto label3;

        $r9 = new org.springframework.util.LinkedCaseInsensitiveMap;

        $i0 = interfaceinvoke r7.<java.util.Map: int size()>();

        $r10 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r9.<org.springframework.util.LinkedCaseInsensitiveMap: void <init>(int,java.util.Locale)>($i0, $r10);

        $r11 = interfaceinvoke r7.<java.util.Map: java.util.Set entrySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.util.Map$Entry) $r13;

        $r15 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        r16 = (java.lang.String) $r15;

        $r17 = interfaceinvoke r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        r18 = (java.lang.String) $r17;

        specialinvoke r0.<org.springframework.http.MediaType: void checkParameters(java.lang.String,java.lang.String)>(r16, r18);

        $r19 = specialinvoke r0.<org.springframework.http.MediaType: java.lang.String unquote(java.lang.String)>(r18);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, $r19);

     label2:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r20 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r9);

        r0.<org.springframework.http.MediaType: java.util.Map parameters> = $r20;

        goto label4;

     label3:
        $r8 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        r0.<org.springframework.http.MediaType: java.util.Map parameters> = $r8;

     label4:
        return;
    }

    private void checkToken(java.lang.String)
    {
        org.springframework.http.MediaType r9;
        char $c1;
        java.lang.IllegalArgumentException $r11;
        int $i0, i2, $i3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10;
        java.lang.String r0, $r8;
        java.util.BitSet $r1;
        boolean $z0;

        r9 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

        goto label3;

     label1:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        $r1 = <org.springframework.http.MediaType: java.util.BitSet TOKEN>;

        $i3 = (int) $c1;

        $z0 = virtualinvoke $r1.<java.util.BitSet: boolean get(int)>($i3);

        if $z0 != 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid token character \'");

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in token \"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r11;

     label2:
        i2 = i2 + 1;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 < $i0 goto label1;

        return;
    }

    private void checkParameters(java.lang.String, java.lang.String)
    {
        byte $b0, $b1;
        int $i2, $i3;
        java.lang.String r0, $r2, $r3, $r4, $r5, r6, $r10;
        boolean $z0, $z1, $z2, $z3;
        double $d0;
        org.springframework.http.MediaType r1;
        java.lang.StringBuilder $r8, $r9, $r11;

        r1 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r0, "parameter attribute must not be empty");

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r6, "parameter value must not be empty");

        specialinvoke r1.<org.springframework.http.MediaType: void checkToken(java.lang.String)>(r0);

        $r2 = "q";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label3;

        $r5 = specialinvoke r1.<org.springframework.http.MediaType: java.lang.String unquote(java.lang.String)>(r6);

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        $b0 = $d0 cmpl 0.0;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $b1 = $d0 cmpg 1.0;

        $i3 = (int) $b1;

        if $i3 > 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid quality value \"");

        $r8 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": should be between 0.0 and 1.0");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.springframework.util.Assert: void isTrue(boolean,java.lang.String)>($z3, $r10);

        goto label5;

     label3:
        $r3 = "charset";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label4;

        $r4 = specialinvoke r1.<org.springframework.http.MediaType: java.lang.String unquote(java.lang.String)>(r6);

        staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r4);

        goto label5;

     label4:
        $z2 = specialinvoke r1.<org.springframework.http.MediaType: boolean isQuotedString(java.lang.String)>(r6);

        if $z2 != 0 goto label5;

        specialinvoke r1.<org.springframework.http.MediaType: void checkToken(java.lang.String)>(r6);

     label5:
        return;
    }

    private boolean isQuotedString(java.lang.String)
    {
        org.springframework.http.MediaType r1;
        int $i0;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.lang.String unquote(java.lang.String)
    {
        org.springframework.http.MediaType r1;
        int $i0, $i1;
        java.lang.String r0, $r2;
        boolean $z0;

        r1 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = specialinvoke r1.<org.springframework.http.MediaType: boolean isQuotedString(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        goto label3;

     label2:
        $r2 = r0;

     label3:
        return $r2;
    }

    public java.lang.String getType()
    {
        java.lang.String $r1;
        org.springframework.http.MediaType r0;

        r0 := @this: org.springframework.http.MediaType;

        $r1 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        return $r1;
    }

    public boolean isWildcardType()
    {
        org.springframework.http.MediaType r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.http.MediaType;

        $r2 = "*";

        $r1 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public java.lang.String getSubtype()
    {
        java.lang.String $r1;
        org.springframework.http.MediaType r0;

        r0 := @this: org.springframework.http.MediaType;

        $r1 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        return $r1;
    }

    public boolean isWildcardSubtype()
    {
        org.springframework.http.MediaType r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.http.MediaType;

        $r2 = "*";

        $r1 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean isConcrete()
    {
        org.springframework.http.MediaType r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.http.MediaType;

        $z0 = virtualinvoke r0.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.nio.charset.Charset getCharSet()
    {
        java.lang.String $r1;
        java.nio.charset.Charset $r2;
        org.springframework.http.MediaType r0;

        r0 := @this: org.springframework.http.MediaType;

        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.lang.String getParameter(java.lang.String)>("charset");

        if $r1 == null goto label1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r1);

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public double getQualityValue()
    {
        java.lang.String $r1;
        org.springframework.http.MediaType r0;
        double $d0;

        r0 := @this: org.springframework.http.MediaType;

        $r1 = virtualinvoke r0.<org.springframework.http.MediaType: java.lang.String getParameter(java.lang.String)>("q");

        if $r1 == null goto label1;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

        goto label2;

     label1:
        $d0 = 1.0;

     label2:
        return $d0;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        org.springframework.http.MediaType r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.String r1, $r4;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public boolean includes(org.springframework.http.MediaType)
    {
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.http.MediaType r0, r1;

        r1 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r3 = r1.<org.springframework.http.MediaType: java.lang.String type>;

        $r2 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label5;

        $r5 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r4 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r1.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z3 == 0 goto label4;

     label3:
        return 1;

     label4:
        $r6 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(43);

        $r7 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i1 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(43);

        $i5 = (int) -1;

        if $i0 == $i5 goto label5;

        $i7 = (int) -1;

        if $i1 == $i7 goto label5;

        $r8 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r10 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i2 = $i0 + 1;

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>($i2);

        $r12 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i3 = $i1 + 1;

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int)>($i3);

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z4 == 0 goto label5;

        $r14 = "*";

        $z5 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    public boolean isCompatibleWith(org.springframework.http.MediaType)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.springframework.http.MediaType r0, r1;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        r1 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: org.springframework.http.MediaType;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.springframework.http.MediaType: boolean isWildcardType()>();

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        $r3 = r1.<org.springframework.http.MediaType: java.lang.String type>;

        $r2 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label7;

        $r5 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r4 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r1.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z4 != 0 goto label4;

        $z5 = virtualinvoke r0.<org.springframework.http.MediaType: boolean isWildcardSubtype()>();

        if $z5 == 0 goto label5;

     label4:
        return 1;

     label5:
        $r6 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(int)>(43);

        $r7 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i1 = virtualinvoke $r7.<java.lang.String: int indexOf(int)>(43);

        $i5 = (int) -1;

        if $i0 == $i5 goto label7;

        $i7 = (int) -1;

        if $i1 == $i7 goto label7;

        $r8 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r10 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r12 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i2 = $i0 + 1;

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int)>($i2);

        $r14 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i3 = $i1 + 1;

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>($i3);

        $z6 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z6 == 0 goto label7;

        $r16 = "*";

        $z7 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z7 != 0 goto label6;

        $r17 = "*";

        $z8 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z8 == 0 goto label7;

     label6:
        return 1;

     label7:
        return 0;
    }

    public int compareTo(org.springframework.http.MediaType)
    {
        java.util.Map $r6, $r7, $r10, $r15, $r24, $r27;
        boolean $z0;
        org.springframework.http.MediaType r0, r1;
        java.util.Collection $r12, $r17;
        java.util.Set $r11, $r16;
        java.util.TreeSet $r8, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r2, $r3, $r4, $r5, r21, r23, r26, r29;
        java.util.Iterator $r18, $r19;
        java.lang.Object $r20, $r22, $r25, $r28;
        java.util.Comparator $r9, $r14;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: org.springframework.http.MediaType;

        $r3 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        $r2 = r1.<org.springframework.http.MediaType: java.lang.String type>;

        $i0 = virtualinvoke $r3.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r2);

        if $i0 == 0 goto label1;

        return $i0;

     label1:
        $r5 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r4 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i1 = virtualinvoke $r5.<java.lang.String: int compareToIgnoreCase(java.lang.String)>($r4);

        if $i1 == 0 goto label2;

        return $i1;

     label2:
        $r6 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        $i2 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $r7 = r1.<org.springframework.http.MediaType: java.util.Map parameters>;

        $i3 = interfaceinvoke $r7.<java.util.Map: int size()>();

        i6 = $i2 - $i3;

        if i6 == 0 goto label3;

        return i6;

     label3:
        $r8 = new java.util.TreeSet;

        $r9 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r8.<java.util.TreeSet: void <init>(java.util.Comparator)>($r9);

        $r10 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r12 = (java.util.Collection) $r11;

        virtualinvoke $r8.<java.util.TreeSet: boolean addAll(java.util.Collection)>($r12);

        $r13 = new java.util.TreeSet;

        $r14 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r13.<java.util.TreeSet: void <init>(java.util.Comparator)>($r14);

        $r15 = r1.<org.springframework.http.MediaType: java.util.Map parameters>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.util.Set keySet()>();

        $r17 = (java.util.Collection) $r16;

        virtualinvoke $r13.<java.util.TreeSet: boolean addAll(java.util.Collection)>($r17);

        $r18 = virtualinvoke $r8.<java.util.TreeSet: java.util.Iterator iterator()>();

        $r19 = virtualinvoke $r13.<java.util.TreeSet: java.util.Iterator iterator()>();

        goto label7;

     label4:
        $r20 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r20;

        $r22 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r22;

        $i4 = virtualinvoke r21.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(r23);

        if $i4 == 0 goto label5;

        return $i4;

     label5:
        $r24 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r21);

        r26 = (java.lang.String) $r25;

        $r27 = r1.<org.springframework.http.MediaType: java.util.Map parameters>;

        $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r23);

        r29 = (java.lang.String) $r28;

        if r29 != null goto label6;

        r29 = "";

     label6:
        $i5 = virtualinvoke r26.<java.lang.String: int compareTo(java.lang.String)>(r29);

        if $i5 == 0 goto label7;

        return $i5;

     label7:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label4;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.springframework.http.MediaType r0, r2;
        java.util.Map $r7, $r8;
        java.lang.Object r1;
        java.lang.String $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.springframework.http.MediaType;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.springframework.http.MediaType) r1;

        $r4 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        $r3 = r2.<org.springframework.http.MediaType: java.lang.String type>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $r5 = r2.<org.springframework.http.MediaType: java.lang.String subtype>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z2 == 0 goto label3;

        $r8 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        $r7 = r2.<org.springframework.http.MediaType: java.util.Map parameters>;

        $z3 = interfaceinvoke $r8.<java.util.Map: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.springframework.http.MediaType r0;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r1, $r2;

        r0 := @this: org.springframework.http.MediaType;

        $r1 = r0.<org.springframework.http.MediaType: java.lang.String type>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = 31 * $i0;

        $r2 = r0.<org.springframework.http.MediaType: java.lang.String subtype>;

        $i2 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        i5 = $i1 + $i2;

        $i3 = 31 * i5;

        $r3 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        $i4 = interfaceinvoke $r3.<java.util.Map: int hashCode()>();

        i6 = $i3 + $i4;

        return i6;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r2;
        org.springframework.http.MediaType r1;

        r1 := @this: org.springframework.http.MediaType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r1.<org.springframework.http.MediaType: void appendTo(java.lang.StringBuilder)>($r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private void appendTo(java.lang.StringBuilder)
    {
        org.springframework.http.MediaType r1;
        java.util.Map $r4;
        java.lang.StringBuilder r0;
        java.lang.String $r2, $r3;

        r1 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: java.lang.StringBuilder;

        $r2 = r1.<org.springframework.http.MediaType: java.lang.String type>;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r3 = r1.<org.springframework.http.MediaType: java.lang.String subtype>;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = r1.<org.springframework.http.MediaType: java.util.Map parameters>;

        specialinvoke r1.<org.springframework.http.MediaType: void appendTo(java.util.Map,java.lang.StringBuilder)>($r4, r0);

        return;
    }

    private void appendTo(java.util.Map, java.lang.StringBuilder)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        org.springframework.http.MediaType r10;
        java.util.Set $r1;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r8;
        java.lang.StringBuilder r5;
        java.lang.String $r7, $r9;
        boolean $z0;

        r10 := @this: org.springframework.http.MediaType;

        r0 := @parameter0: java.util.Map;

        r5 := @parameter1: java.lang.StringBuilder;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public static org.springframework.http.MediaType valueOf(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.http.MediaType $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>(r0);

        return $r1;
    }

    public static org.springframework.http.MediaType parseMediaType(java.lang.String)
    {
        boolean $z0;
        org.springframework.http.MediaType $r29;
        java.lang.StringBuilder $r14, $r15, $r19, $r20, $r24, $r26;
        java.lang.String[] $r1;
        java.util.LinkedHashMap r23, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i14, $i16;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, r9, $r10, $r11, $r16, $r21, r22;
        java.lang.IllegalArgumentException $r25, $r27;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r0, "\'mediaType\' must not be empty");

        $r1 = staticinvoke <org.springframework.util.StringUtils: java.lang.String[] tokenizeToStringArray(java.lang.String,java.lang.String)>(r0, ";");

        $r2 = $r1[0];

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        r22 = $r3;

        $r4 = "*";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        r22 = "*/*";

     label1:
        $i0 = virtualinvoke r22.<java.lang.String: int indexOf(int)>(47);

        $i14 = (int) -1;

        if $i0 != $i14 goto label2;

        $r25 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("\"");

        $r19 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" does not contain \'/\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r25;

     label2:
        $i1 = virtualinvoke r22.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label3;

        $r27 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("\"");

        $r14 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" does not contain subtype after \'/\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r27;

     label3:
        $r5 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i3 = $i0 + 1;

        $i4 = virtualinvoke r22.<java.lang.String: int length()>();

        $r6 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>($i3, $i4);

        r23 = null;

        $i5 = lengthof $r1;

        if $i5 <= 1 goto label7;

        $r28 = new java.util.LinkedHashMap;

        $i6 = lengthof $r1;

        $i7 = $i6 - 1;

        specialinvoke $r28.<java.util.LinkedHashMap: void <init>(int)>($i7);

        r23 = $r28;

        i11 = 1;

        goto label6;

     label4:
        r9 = $r1[i11];

        $i8 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(61);

        $i16 = (int) -1;

        if $i8 == $i16 goto label5;

        $r10 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        $i9 = $i8 + 1;

        $i10 = virtualinvoke r9.<java.lang.String: int length()>();

        $r11 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>($i9, $i10);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label5:
        i11 = i11 + 1;

     label6:
        $i12 = lengthof $r1;

        if i11 < $i12 goto label4;

     label7:
        $r29 = new org.springframework.http.MediaType;

        specialinvoke $r29.<org.springframework.http.MediaType: void <init>(java.lang.String,java.lang.String,java.util.Map)>($r5, $r6, r23);

        return $r29;
    }

    public static java.util.List parseMediaTypes(java.lang.String)
    {
        org.springframework.http.MediaType $r4;
        java.lang.String[] $r1;
        java.util.ArrayList $r2;
        java.util.List $r5;
        int $i0, i1, i2;
        java.lang.String r0, r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",\\s*");

        $r2 = new java.util.ArrayList;

        $i0 = lengthof $r1;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        i1 = lengthof $r1;

        i2 = 0;

        goto label3;

     label2:
        r3 = $r1[i2];

        $r4 = staticinvoke <org.springframework.http.MediaType: org.springframework.http.MediaType parseMediaType(java.lang.String)>(r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        i2 = i2 + 1;

     label3:
        if i2 < i1 goto label2;

        return $r2;
    }

    public static java.lang.String toString(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        org.springframework.http.MediaType r4;
        java.lang.StringBuilder $r0;
        java.lang.Object $r3;
        java.lang.String $r5;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.Collection;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.http.MediaType) $r3;

        specialinvoke r4.<org.springframework.http.MediaType: void appendTo(java.lang.StringBuilder)>($r0);

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void sortBySpecificity(java.util.List)
    {
        int $i0;
        java.util.List r0;
        java.util.Comparator $r1;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'mediaTypes\' must not be null");

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $r1 = <org.springframework.http.MediaType: java.util.Comparator SPECIFICITY_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r0, $r1);

     label1:
        return;
    }

    public static void sortByQualityValue(java.util.List)
    {
        int $i0;
        java.util.List r0;
        java.util.Comparator $r1;

        r0 := @parameter0: java.util.List;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "\'mediaTypes\' must not be null");

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 1 goto label1;

        $r1 = <org.springframework.http.MediaType: java.util.Comparator QUALITY_VALUE_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r0, $r1);

     label1:
        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.springframework.http.MediaType r0, $r2;
        int $i0;
        java.lang.Object r1;

        r0 := @this: org.springframework.http.MediaType;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.springframework.http.MediaType) r1;

        $i0 = virtualinvoke r0.<org.springframework.http.MediaType: int compareTo(org.springframework.http.MediaType)>($r2);

        return $i0;
    }

    static java.util.Map access$1(org.springframework.http.MediaType)
    {
        org.springframework.http.MediaType r0;
        java.util.Map $r1;

        r0 := @parameter0: org.springframework.http.MediaType;

        $r1 = r0.<org.springframework.http.MediaType: java.util.Map parameters>;

        return $r1;
    }
}
