public class org.codehaus.jackson.map.ser.std.CollectionSerializer extends org.codehaus.jackson.map.ser.std.AsArraySerializerBase
{

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.map.ser.std.CollectionSerializer r0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonSerializer r4;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.CollectionSerializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r4 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.AsArraySerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(class "Ljava/util/Collection;", r1, z0, r2, r3, r4);

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.map.ser.std.CollectionSerializer $r0, r1;
        org.codehaus.jackson.type.JavaType $r5;
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.CollectionSerializer;

        r2 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.CollectionSerializer;

        $r5 = r1.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = r1.<org.codehaus.jackson.map.ser.std.CollectionSerializer: boolean _staticTyping>;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r5, $z0, r2, $r4, $r3);

        return $r0;
    }

    public void serializeContents(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.SerializerProvider r9;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.JsonGenerator r8;
        int i0;
        org.codehaus.jackson.type.JavaType $r10, $r11, $r12;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r15;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        java.util.Collection r2;
        org.codehaus.jackson.map.JsonSerializer $r1, $r7, $r13, r16;
        java.lang.Exception $r14;
        org.codehaus.jackson.map.ser.std.CollectionSerializer r0;
        java.lang.Object $r5;
        java.lang.Class $r6;

        r0 := @this: org.codehaus.jackson.map.ser.std.CollectionSerializer;

        r2 := @parameter0: java.util.Collection;

        r8 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r9 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r1 == null goto label01;

        $r13 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r2, r8, r9, $r13);

        return;

     label01:
        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        return;

     label02:
        r15 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

        r4 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i0 = 0;

     label03:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $r5 != null goto label04;

        virtualinvoke r9.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r8);

        goto label09;

     label04:
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r15.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r6);

        r16 = $r7;

        if $r7 != null goto label07;

        $r10 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z1 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        if $z1 == 0 goto label05;

        $r11 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r12 = virtualinvoke r9.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r11, $r6);

        r16 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider)>(r15, $r12, r9);

        goto label06;

     label05:
        r16 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r15, $r6, r9);

     label06:
        r15 = r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label07:
        if r4 != null goto label08;

        virtualinvoke r16.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r5, r8, r9);

        goto label09;

     label08:
        virtualinvoke r16.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, r8, r9, r4);

     label09:
        i0 = i0 + 1;

        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label03;

     label10:
        goto label12;

     label11:
        $r14 := @caughtexception;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>(r9, $r14, r2, i0);

     label12:
        return;

        catch java.lang.Exception from label03 to label10 with label11;
    }

    public void serializeContentsUsing(java.util.Collection, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.codehaus.jackson.map.SerializerProvider r7;
        org.codehaus.jackson.map.JsonSerializer r5;
        java.lang.Exception $r8;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.JsonGenerator r6;
        int i0;
        org.codehaus.jackson.map.ser.std.CollectionSerializer r2;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r2 := @this: org.codehaus.jackson.map.ser.std.CollectionSerializer;

        r0 := @parameter0: java.util.Collection;

        r6 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r7 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r5 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        r3 = r2.<org.codehaus.jackson.map.ser.std.CollectionSerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i0 = 0;

     label1:
        $r4 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

     label2:
        if $r4 != null goto label3;

        virtualinvoke r7.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r6);

        goto label5;

     label3:
        if r3 != null goto label4;

        virtualinvoke r5.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r6, r7);

        goto label5;

     label4:
        virtualinvoke r5.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r4, r6, r7, r3);

     label5:
        i0 = i0 + 1;

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r2.<org.codehaus.jackson.map.ser.std.CollectionSerializer: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>(r7, $r8, r0, i0);

     label8:
        $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

     label9:
        return;

        catch java.lang.Exception from label2 to label6 with label7;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.JsonGenerator r2;
        java.util.Collection $r4;
        org.codehaus.jackson.map.ser.std.CollectionSerializer r0;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.CollectionSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.util.Collection) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }
}
