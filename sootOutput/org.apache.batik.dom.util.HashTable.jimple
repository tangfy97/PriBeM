public class org.apache.batik.dom.util.HashTable extends java.lang.Object implements java.io.Serializable
{
    protected static final int INITIAL_CAPACITY;
    protected org.apache.batik.dom.util.HashTable$Entry[] table;
    protected int count;

    public void <init>()
    {
        org.apache.batik.dom.util.HashTable r0;
        org.apache.batik.dom.util.HashTable$Entry[] $r1;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.batik.dom.util.HashTable$Entry)[11];

        r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table> = $r1;

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.batik.dom.util.HashTable r0;
        org.apache.batik.dom.util.HashTable$Entry[] $r1;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (org.apache.batik.dom.util.HashTable$Entry)[i0];

        r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table> = $r1;

        return;
    }

    public void <init>(org.apache.batik.dom.util.HashTable)
    {
        org.apache.batik.dom.util.HashTable r0, r1;
        org.apache.batik.dom.util.HashTable$Entry $r5, $r9, r12, r13, r14;
        int $i0, $i1, $i2, $i3, i4, $i5;
        org.apache.batik.dom.util.HashTable$Entry[] $r2, $r3, $r4, $r8, $r15;
        java.lang.Object $r6, $r7, $r10, $r11;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        r1 := @parameter0: org.apache.batik.dom.util.HashTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = r1.<org.apache.batik.dom.util.HashTable: int count>;

        r0.<org.apache.batik.dom.util.HashTable: int count> = $i0;

        $r2 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i1 = lengthof $r2;

        $r3 = newarray (org.apache.batik.dom.util.HashTable$Entry)[$i1];

        r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table> = $r3;

        i4 = 0;

        goto label5;

     label1:
        $r4 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        r12 = $r4[i4];

        if r12 == null goto label4;

        $r5 = new org.apache.batik.dom.util.HashTable$Entry;

        $i2 = r12.<org.apache.batik.dom.util.HashTable$Entry: int hash>;

        $r7 = r12.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        $r6 = r12.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value>;

        specialinvoke $r5.<org.apache.batik.dom.util.HashTable$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.batik.dom.util.HashTable$Entry)>($i2, $r7, $r6, null);

        r13 = $r5;

        $r8 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r8[i4] = $r5;

        r14 = r12.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        goto label3;

     label2:
        $r9 = new org.apache.batik.dom.util.HashTable$Entry;

        $i3 = r14.<org.apache.batik.dom.util.HashTable$Entry: int hash>;

        $r11 = r14.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        $r10 = r14.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value>;

        specialinvoke $r9.<org.apache.batik.dom.util.HashTable$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.batik.dom.util.HashTable$Entry)>($i3, $r11, $r10, null);

        r13.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next> = $r9;

        r13 = r13.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        r14 = r14.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

     label3:
        if r14 != null goto label2;

     label4:
        i4 = i4 + 1;

     label5:
        $r15 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i5 = lengthof $r15;

        if i4 < $i5 goto label1;

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.batik.dom.util.HashTable r0;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        $i0 = r0.<org.apache.batik.dom.util.HashTable: int count>;

        return $i0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.batik.dom.util.HashTable r1;
        org.apache.batik.dom.util.HashTable$Entry r8;
        int $i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        org.apache.batik.dom.util.HashTable$Entry[] $r2, $r3;
        java.lang.Object r0, $r4, $r5, $r6, $r7;

        r1 := @this: org.apache.batik.dom.util.HashTable;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i5 = $i0 & 2147483647;

     label2:
        i1 = $i5;

        $r2 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i2 = lengthof $r2;

        $i4 = $i5 % $i2;

        $r3 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        r8 = $r3[$i4];

        goto label7;

     label3:
        $i3 = r8.<org.apache.batik.dom.util.HashTable$Entry: int hash>;

        if $i3 != i1 goto label6;

        $r4 = r8.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        if $r4 != null goto label4;

        if r0 == null goto label5;

     label4:
        $r5 = r8.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        if $r5 == null goto label6;

        $r6 = r8.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label6;

     label5:
        $r7 = r8.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value>;

        return $r7;

     label6:
        r8 = r8.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

     label7:
        if r8 != null goto label3;

        return null;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.batik.dom.util.HashTable r1;
        org.apache.batik.dom.util.HashTable$Entry $r10, $r12, r15;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        boolean $z0;
        org.apache.batik.dom.util.HashTable$Entry[] $r2, $r3, $r9, $r11, $r13, $r14;
        java.lang.Object r0, $r4, $r5, $r6, r7, $r8;

        r1 := @this: org.apache.batik.dom.util.HashTable;

        r0 := @parameter0: java.lang.Object;

        r7 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $i10 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i10 = $i0 & 2147483647;

     label2:
        i1 = $i10;

        $r2 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i2 = lengthof $r2;

        $i9 = $i10 % $i2;

        i11 = $i9;

        $r3 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        r15 = $r3[$i9];

        goto label7;

     label3:
        $i3 = r15.<org.apache.batik.dom.util.HashTable$Entry: int hash>;

        if $i3 != i1 goto label6;

        $r4 = r15.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        if $r4 != null goto label4;

        if r0 == null goto label5;

     label4:
        $r5 = r15.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        if $r5 == null goto label6;

        $r6 = r15.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label6;

     label5:
        $r8 = r15.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value>;

        r15.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value> = r7;

        return $r8;

     label6:
        r15 = r15.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

     label7:
        if r15 != null goto label3;

        $r9 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        i12 = lengthof $r9;

        $i4 = r1.<org.apache.batik.dom.util.HashTable: int count>;

        $i5 = $i4 + 1;

        r1.<org.apache.batik.dom.util.HashTable: int count> = $i5;

        $i6 = i12 >> 2;

        $i7 = i12 - $i6;

        if $i4 < $i7 goto label8;

        virtualinvoke r1.<org.apache.batik.dom.util.HashTable: void rehash()>();

        $r14 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i8 = lengthof $r14;

        i11 = i1 % $i8;

     label8:
        $r10 = new org.apache.batik.dom.util.HashTable$Entry;

        $r11 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r12 = $r11[i11];

        specialinvoke $r10.<org.apache.batik.dom.util.HashTable$Entry: void <init>(int,java.lang.Object,java.lang.Object,org.apache.batik.dom.util.HashTable$Entry)>(i1, r0, r7, $r12);

        $r13 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r13[i11] = $r10;

        return null;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.batik.dom.util.HashTable r1;
        org.apache.batik.dom.util.HashTable$Entry $r7, $r8, r11, r12;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        org.apache.batik.dom.util.HashTable$Entry[] $r2, $r3, $r9;
        java.lang.Object r0, $r4, $r5, $r6, $r10;

        r1 := @this: org.apache.batik.dom.util.HashTable;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $i7 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i7 = $i0 & 2147483647;

     label2:
        i1 = $i7;

        $r2 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i2 = lengthof $r2;

        $i6 = $i7 % $i2;

        r11 = null;

        $r3 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        r12 = $r3[$i6];

        goto label9;

     label3:
        $i3 = r12.<org.apache.batik.dom.util.HashTable$Entry: int hash>;

        if $i3 != i1 goto label8;

        $r4 = r12.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        if $r4 != null goto label4;

        if r0 == null goto label5;

     label4:
        $r5 = r12.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        if $r5 == null goto label8;

        $r6 = r12.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label8;

     label5:
        $r10 = r12.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value>;

        if r11 != null goto label6;

        $r9 = r1.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r8 = r12.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        $r9[$i6] = $r8;

        goto label7;

     label6:
        $r7 = r12.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        r11.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next> = $r7;

     label7:
        $i4 = r1.<org.apache.batik.dom.util.HashTable: int count>;

        $i5 = $i4 - 1;

        r1.<org.apache.batik.dom.util.HashTable: int count> = $i5;

        return $r10;

     label8:
        r11 = r12;

        r12 = r12.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

     label9:
        if r12 != null goto label3;

        return null;
    }

    public java.lang.Object key(int)
    {
        org.apache.batik.dom.util.HashTable$Entry[] $r1, $r4;
        org.apache.batik.dom.util.HashTable r0;
        org.apache.batik.dom.util.HashTable$Entry r3;
        int i0, $i1, $i2, i3, i4, $i5;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.batik.dom.util.HashTable: int count>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        i3 = 0;

        i4 = 0;

        goto label7;

     label3:
        $r1 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        r3 = $r1[i4];

        if r3 != null goto label4;

        goto label6;

     label4:
        $i2 = i3;

        i3 = i3 + 1;

        if $i2 != i0 goto label5;

        $r2 = r3.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object key>;

        return $r2;

     label5:
        r3 = r3.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        if r3 != null goto label4;

     label6:
        i4 = i4 + 1;

     label7:
        $r4 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i5 = lengthof $r4;

        if i4 < $i5 goto label3;

        return null;
    }

    public java.lang.Object item(int)
    {
        org.apache.batik.dom.util.HashTable$Entry[] $r1, $r4;
        org.apache.batik.dom.util.HashTable r0;
        org.apache.batik.dom.util.HashTable$Entry r3;
        int i0, $i1, $i2, i3, i4, $i5;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.batik.dom.util.HashTable: int count>;

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        i3 = 0;

        i4 = 0;

        goto label7;

     label3:
        $r1 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        r3 = $r1[i4];

        if r3 != null goto label4;

        goto label6;

     label4:
        $i2 = i3;

        i3 = i3 + 1;

        if $i2 != i0 goto label5;

        $r2 = r3.<org.apache.batik.dom.util.HashTable$Entry: java.lang.Object value>;

        return $r2;

     label5:
        r3 = r3.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        if r3 != null goto label4;

     label6:
        i4 = i4 + 1;

     label7:
        $r4 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i5 = lengthof $r4;

        if i4 < $i5 goto label3;

        return null;
    }

    public void clear()
    {
        org.apache.batik.dom.util.HashTable r0;
        org.apache.batik.dom.util.HashTable$Entry[] $r1, $r2;
        int $i0, i1;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r2[i1] = null;

        i1 = i1 + 1;

     label2:
        $r1 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

        r0.<org.apache.batik.dom.util.HashTable: int count> = 0;

        return;
    }

    protected void rehash()
    {
        org.apache.batik.dom.util.HashTable r0;
        org.apache.batik.dom.util.HashTable$Entry r3, $r6, r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i9;
        org.apache.batik.dom.util.HashTable$Entry[] r1, $r2, $r4, $r5, $r7;

        r0 := @this: org.apache.batik.dom.util.HashTable;

        r1 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i0 = lengthof r1;

        $i1 = $i0 * 2;

        $i2 = $i1 + 1;

        $r2 = newarray (org.apache.batik.dom.util.HashTable$Entry)[$i2];

        r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table> = $r2;

        $i3 = lengthof r1;

        i7 = $i3 - 1;

        goto label4;

     label1:
        r8 = r1[i7];

        goto label3;

     label2:
        r3 = r8;

        r8 = r8.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next>;

        $i5 = r3.<org.apache.batik.dom.util.HashTable$Entry: int hash>;

        $r4 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $i4 = lengthof $r4;

        i6 = $i5 % $i4;

        $r5 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r6 = $r5[i6];

        r3.<org.apache.batik.dom.util.HashTable$Entry: org.apache.batik.dom.util.HashTable$Entry next> = $r6;

        $r7 = r0.<org.apache.batik.dom.util.HashTable: org.apache.batik.dom.util.HashTable$Entry[] table>;

        $r7[i6] = r3;

     label3:
        if r8 != null goto label2;

        $i9 = (int) -1;

        i7 = i7 + $i9;

     label4:
        if i7 >= 0 goto label1;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.batik.dom.util.HashTable: int INITIAL_CAPACITY> = 11;

        return;
    }
}
