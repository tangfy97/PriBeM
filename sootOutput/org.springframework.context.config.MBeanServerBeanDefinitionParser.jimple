class org.springframework.context.config.MBeanServerBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser
{
    private static final java.lang.String MBEAN_SERVER_BEAN_NAME;
    private static final java.lang.String AGENT_ID_ATTRIBUTE;
    private static final boolean weblogicPresent;
    private static final boolean webspherePresent;

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        java.lang.ClassLoader $r1, $r3;
        boolean $z0, $z1;

        <org.springframework.context.config.MBeanServerBeanDefinitionParser: java.lang.String AGENT_ID_ATTRIBUTE> = "agent-id";

        <org.springframework.context.config.MBeanServerBeanDefinitionParser: java.lang.String MBEAN_SERVER_BEAN_NAME> = "mbeanServer";

        $r0 = class "Lorg/springframework/context/config/MBeanServerBeanDefinitionParser;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("weblogic.management.Helper", $r1);

        <org.springframework.context.config.MBeanServerBeanDefinitionParser: boolean weblogicPresent> = $z0;

        $r2 = class "Lorg/springframework/context/config/MBeanServerBeanDefinitionParser;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>("com.ibm.websphere.management.AdminServiceFactory", $r3);

        <org.springframework.context.config.MBeanServerBeanDefinitionParser: boolean webspherePresent> = $z1;

        return;
    }

    void <init>()
    {
        org.springframework.context.config.MBeanServerBeanDefinitionParser r0;

        r0 := @this: org.springframework.context.config.MBeanServerBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.String resolveId(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.xml.ParserContext)
    {
        org.w3c.dom.Element r0;
        org.springframework.context.config.MBeanServerBeanDefinitionParser r2;
        org.springframework.beans.factory.xml.ParserContext r4;
        org.springframework.beans.factory.support.AbstractBeanDefinition r3;
        java.lang.String $r1, $r5;
        boolean $z0;

        r2 := @this: org.springframework.context.config.MBeanServerBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r4 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("id");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r5 = $r1;

        goto label2;

     label1:
        $r5 = "mbeanServer";

     label2:
        return $r5;
    }

    protected org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r3, $r8;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r2;
        org.springframework.beans.MutablePropertyValues $r4, $r9;
        org.w3c.dom.Element r0;
        org.springframework.context.config.MBeanServerBeanDefinitionParser r10;
        org.springframework.beans.factory.xml.ParserContext r6;
        java.lang.Boolean $r5;
        java.lang.Object $r7;
        java.lang.String $r1;
        boolean $z0;

        r10 := @this: org.springframework.context.config.MBeanServerBeanDefinitionParser;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("agent-id");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r8 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r8.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>(class "Lorg/springframework/jmx/support/MBeanServerFactoryBean;");

        $r9 = virtualinvoke $r8.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        virtualinvoke $r9.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>("agentId", $r1);

        return $r8;

     label1:
        $r2 = staticinvoke <org.springframework.context.config.MBeanServerBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition findServerForSpecialEnvironment()>();

        if $r2 == null goto label2;

        return $r2;

     label2:
        $r3 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>(class "Lorg/springframework/jmx/support/MBeanServerFactoryBean;");

        $r4 = virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r4.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>("locateExistingServerIfPossible", $r5);

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setRole(int)>(2);

        $r7 = virtualinvoke r6.<org.springframework.beans.factory.xml.ParserContext: java.lang.Object extractSource(java.lang.Object)>(r0);

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setSource(java.lang.Object)>($r7);

        return $r3;
    }

    static org.springframework.beans.factory.support.AbstractBeanDefinition findServerForSpecialEnvironment()
    {
        org.springframework.beans.factory.support.RootBeanDefinition $r0, $r1;
        org.springframework.beans.MutablePropertyValues $r2;
        boolean $z0, $z1;

        $z0 = <org.springframework.context.config.MBeanServerBeanDefinitionParser: boolean weblogicPresent>;

        if $z0 == 0 goto label1;

        $r1 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r1.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>(class "Lorg/springframework/jndi/JndiObjectFactoryBean;");

        $r2 = virtualinvoke $r1.<org.springframework.beans.factory.support.RootBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        virtualinvoke $r2.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues add(java.lang.String,java.lang.Object)>("jndiName", "java:comp/env/jmx/runtime");

        return $r1;

     label1:
        $z1 = <org.springframework.context.config.MBeanServerBeanDefinitionParser: boolean webspherePresent>;

        if $z1 == 0 goto label2;

        $r0 = new org.springframework.beans.factory.support.RootBeanDefinition;

        specialinvoke $r0.<org.springframework.beans.factory.support.RootBeanDefinition: void <init>(java.lang.Class)>(class "Lorg/springframework/jmx/support/WebSphereMBeanServerFactoryBean;");

        return $r0;

     label2:
        return null;
    }
}
