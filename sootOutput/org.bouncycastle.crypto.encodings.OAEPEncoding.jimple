public class org.bouncycastle.crypto.encodings.OAEPEncoding extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private byte[] defHash;
    private org.bouncycastle.crypto.Digest hash;
    private org.bouncycastle.crypto.Digest mgf1Hash;
    private org.bouncycastle.crypto.AsymmetricBlockCipher engine;
    private java.security.SecureRandom random;
    private boolean forEncryption;

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher)
    {
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;
        org.bouncycastle.crypto.digests.SHA1Digest $r2;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        $r2 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r2.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,byte[])>(r1, $r2, null);

        return;
    }

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher, org.bouncycastle.crypto.Digest)
    {
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.Digest r2;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        r2 := @parameter1: org.bouncycastle.crypto.Digest;

        specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,byte[])>(r1, r2, null);

        return;
    }

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher, org.bouncycastle.crypto.Digest, byte[])
    {
        byte[] r3;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.Digest r2;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        r2 := @parameter1: org.bouncycastle.crypto.Digest;

        r3 := @parameter2: byte[];

        specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest,byte[])>(r1, r2, r2, r3);

        return;
    }

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher, org.bouncycastle.crypto.Digest, org.bouncycastle.crypto.Digest, byte[])
    {
        byte[] $r4, r5, $r6;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.Digest r2, r3;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;
        int $i0, $i1;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        r2 := @parameter1: org.bouncycastle.crypto.Digest;

        r3 := @parameter2: org.bouncycastle.crypto.Digest;

        r5 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine> = r1;

        r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest hash> = r2;

        r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash> = r3;

        $i0 = interfaceinvoke r2.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r4 = newarray (byte)[$i0];

        r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash> = $r4;

        if r5 == null goto label1;

        $i1 = lengthof r5;

        interfaceinvoke r2.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r5, 0, $i1);

     label1:
        $r6 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        interfaceinvoke r2.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>($r6, 0);

        return;
    }

    public org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        $r1 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        return $r1;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.encodings.OAEPEncoding r1;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r3;
        java.security.SecureRandom $r2, $r5;
        org.bouncycastle.crypto.params.ParametersWithRandom r4;
        org.bouncycastle.crypto.CipherParameters r0;
        boolean $z0, z1;

        r1 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        z1 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        r4 = (org.bouncycastle.crypto.params.ParametersWithRandom) r0;

        $r5 = virtualinvoke r4.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: java.security.SecureRandom random> = $r5;

        goto label2;

     label1:
        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: java.security.SecureRandom random> = $r2;

     label2:
        $r3 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z1, r0);

        r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: boolean forEncryption> = z1;

        return;
    }

    public int getInputBlockSize()
    {
        byte[] $r2;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        $r1 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $z0 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i3 = $i0 - 1;

        $r2 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r2;

        $i2 = 2 * $i1;

        $i4 = $i3 - $i2;

        return $i4;

     label1:
        return $i0;
    }

    public int getOutputBlockSize()
    {
        byte[] $r2;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        $r1 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        $z0 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $i3 = $i0 - 1;

        $r2 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r2;

        $i2 = 2 * $i1;

        $i4 = $i3 - $i2;

        return $i4;
    }

    public byte[] processBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r1, $r2, $r3;
        int i0, i1;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] encodeBlock(byte[],int,int)>(r1, i0, i1);

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] decodeBlock(byte[],int,int)>(r1, i0, i1);

        return $r2;
    }

    public byte[] encodeBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] $r1, r2, r3, $r4, $r5, $r6, $r7, r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21;
        java.security.SecureRandom $r9;
        byte $b28, $b29, $b30, $b31, $b34, $b35, $b36, $b37;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i32, $i33, i38, i39;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r19;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r3 := @parameter0: byte[];

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        $i0 = virtualinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: int getInputBlockSize()>();

        $i3 = $i0 + 1;

        $r1 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i1 = lengthof $r1;

        $i2 = 2 * $i1;

        $i4 = $i3 + $i2;

        r2 = newarray (byte)[$i4];

        $i7 = lengthof r2;

        $i8 = $i7 - i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i5, r2, $i8, i6);

        $i9 = lengthof r2;

        $i10 = $i9 - i6;

        $i11 = $i10 - 1;

        r2[$i11] = 1;

        $r6 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $r4 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i13 = lengthof $r4;

        $r5 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i12 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, $i13, $i12);

        $r7 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i14 = lengthof $r7;

        r8 = newarray (byte)[$i14];

        $r9 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: java.security.SecureRandom random>;

        virtualinvoke $r9.<java.security.SecureRandom: void nextBytes(byte[])>(r8);

        $i18 = lengthof r8;

        $i16 = lengthof r2;

        $r10 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i15 = lengthof $r10;

        $i17 = $i16 - $i15;

        $r11 = specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r8, 0, $i18, $i17);

        $r12 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        i38 = lengthof $r12;

     label1:
        $i19 = lengthof r2;

        if i38 == $i19 goto label2;

        $b35 = r2[i38];

        $r21 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i32 = lengthof $r21;

        $i33 = i38 - $i32;

        $b34 = $r11[$i33];

        $b36 = $b35 ^ $b34;

        $b37 = (byte) $b36;

        r2[i38] = $b37;

        i38 = i38 + 1;

        goto label1;

     label2:
        $r13 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i20 = lengthof $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r2, 0, $i20);

        $r14 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i25 = lengthof $r14;

        $i22 = lengthof r2;

        $r15 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i21 = lengthof $r15;

        $i24 = $i22 - $i21;

        $r16 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i23 = lengthof $r16;

        $r17 = specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r2, $i25, $i24, $i23);

        i39 = 0;

     label3:
        $r18 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i26 = lengthof $r18;

        if i39 == $i26 goto label4;

        $b29 = r2[i39];

        $b28 = $r17[i39];

        $b30 = $b29 ^ $b28;

        $b31 = (byte) $b30;

        r2[i39] = $b31;

        i39 = i39 + 1;

        goto label3;

     label4:
        $r19 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i27 = lengthof r2;

        $r20 = interfaceinvoke $r19.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r2, 0, $i27);

        return $r20;
    }

    public byte[] decodeBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r1, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, r22, $r23, $r24, $r26, r29;
        byte $b24, $b28, $b31, $b32, $b35, $b36, $b37, $b38, $b39, $b40, $b41, $b42;
        java.lang.StringBuilder $r19, $r20, $r32;
        org.bouncycastle.crypto.InvalidCipherTextException $r30, $r31, $r33;
        java.lang.String $r21;
        org.bouncycastle.crypto.encodings.OAEPEncoding r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, $i27, $i29, $i30, $i33, $i34, $i43, $i44, $i45, $i46, $i47, i48, i49, i50, i51, i52, $i53, $i54;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r2, $r4, $r28;

        r0 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>(r1, i0, i1);

        $i2 = lengthof $r3;

        $r4 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i3 = interfaceinvoke $r4.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        if $i2 >= $i3 goto label01;

        $r28 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i43 = interfaceinvoke $r28.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        r29 = newarray (byte)[$i43];

        $i45 = lengthof r29;

        $i44 = lengthof $r3;

        $i47 = $i45 - $i44;

        $i46 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r29, $i47, $i46);

        goto label02;

     label01:
        r29 = $r3;

     label02:
        $i7 = lengthof r29;

        $r5 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i4 = lengthof $r5;

        $i5 = 2 * $i4;

        $i6 = $i5 + 1;

        if $i7 >= $i6 goto label03;

        $r30 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r30.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("data too short");

        throw $r30;

     label03:
        $r6 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i12 = lengthof $r6;

        $i9 = lengthof r29;

        $r7 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i8 = lengthof $r7;

        $i11 = $i9 - $i8;

        $r8 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i10 = lengthof $r8;

        $r9 = specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r29, $i12, $i11, $i10);

        i48 = 0;

     label04:
        $r10 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i13 = lengthof $r10;

        if i48 == $i13 goto label05;

        $b40 = r29[i48];

        $b39 = $r9[i48];

        $b41 = $b40 ^ $b39;

        $b42 = (byte) $b41;

        r29[i48] = $b42;

        i48 = i48 + 1;

        goto label04;

     label05:
        $r11 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i17 = lengthof $r11;

        $i15 = lengthof r29;

        $r12 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i14 = lengthof $r12;

        $i16 = $i15 - $i14;

        $r13 = specialinvoke r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] maskGeneratorFunction1(byte[],int,int,int)>(r29, 0, $i17, $i16);

        $r14 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        i49 = lengthof $r14;

     label06:
        $i18 = lengthof r29;

        if i49 == $i18 goto label07;

        $b36 = r29[i49];

        $r26 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i33 = lengthof $r26;

        $i34 = i49 - $i33;

        $b35 = $r13[$i34];

        $b37 = $b36 ^ $b35;

        $b38 = (byte) $b37;

        r29[i49] = $b38;

        i49 = i49 + 1;

        goto label06;

     label07:
        i50 = 0;

     label08:
        $r15 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i19 = lengthof $r15;

        if i50 == $i19 goto label10;

        $r23 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $b32 = $r23[i50];

        $r24 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i29 = lengthof $r24;

        $i30 = $i29 + i50;

        $b31 = r29[$i30];

        $i53 = (int) $b32;

        $i54 = (int) $b31;

        if $i53 == $i54 goto label09;

        $r31 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r31.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("data hash wrong");

        throw $r31;

     label09:
        i50 = i50 + 1;

        goto label08;

     label10:
        $r16 = r0.<org.bouncycastle.crypto.encodings.OAEPEncoding: byte[] defHash>;

        $i20 = lengthof $r16;

        i51 = 2 * $i20;

     label11:
        $i21 = lengthof r29;

        if i51 == $i21 goto label13;

        $b28 = r29[i51];

        if $b28 == 0 goto label12;

        goto label13;

     label12:
        i51 = i51 + 1;

        goto label11;

     label13:
        $i22 = lengthof r29;

        $i23 = $i22 - 1;

        if i51 >= $i23 goto label14;

        $b24 = r29[i51];

        if $b24 == 1 goto label15;

     label14:
        $r33 = new org.bouncycastle.crypto.InvalidCipherTextException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data start wrong ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i51);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>($r21);

        throw $r33;

     label15:
        i52 = i51 + 1;

        $i25 = lengthof r29;

        $i26 = $i25 - i52;

        r22 = newarray (byte)[$i26];

        $i27 = lengthof r22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r29, i52, r22, 0, $i27);

        return r22;
    }

    private void ItoOSP(int, byte[])
    {
        byte[] r0;
        org.bouncycastle.crypto.encodings.OAEPEncoding r1;
        byte $b2, $b4, $b6, $b8;
        int i0, $i1, $i3, $i5, $i7;

        r1 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        $i1 = i0 >>> 24;

        $b2 = (byte) $i1;

        r0[0] = $b2;

        $i3 = i0 >>> 16;

        $b4 = (byte) $i3;

        r0[1] = $b4;

        $i5 = i0 >>> 8;

        $b6 = (byte) $i5;

        r0[2] = $b6;

        $i7 = i0 >>> 0;

        $b8 = (byte) $i7;

        r0[3] = $b8;

        return;
    }

    private byte[] maskGeneratorFunction1(byte[], int, int, int)
    {
        byte[] r0, r3, r4, r6;
        org.bouncycastle.crypto.Digest $r2, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        org.bouncycastle.crypto.encodings.OAEPEncoding r1;

        r1 := @this: org.bouncycastle.crypto.encodings.OAEPEncoding;

        r6 := @parameter0: byte[];

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r0 = newarray (byte)[i0];

        $r2 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        $i1 = interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        r3 = newarray (byte)[$i1];

        r4 = newarray (byte)[4];

        i19 = 0;

        $r5 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest hash>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.Digest: void reset()>();

     label1:
        specialinvoke r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: void ItoOSP(int,byte[])>(i19, r4);

        $r7 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r6, i2, i3);

        $r8 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        $i4 = lengthof r4;

        interfaceinvoke $r8.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i4);

        $r9 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r9.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i5 = lengthof r3;

        $i7 = i19 * $i5;

        $i6 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r0, $i7, $i6);

        i19 = i19 + 1;

        $i8 = lengthof r3;

        $i9 = i0 / $i8;

        if i19 < $i9 goto label1;

        $i10 = lengthof r3;

        $i11 = i19 * $i10;

        if $i11 >= i0 goto label2;

        specialinvoke r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: void ItoOSP(int,byte[])>(i19, r4);

        $r10 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r10.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r6, i2, i3);

        $r11 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        $i12 = lengthof r4;

        interfaceinvoke $r11.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>(r4, 0, $i12);

        $r12 = r1.<org.bouncycastle.crypto.encodings.OAEPEncoding: org.bouncycastle.crypto.Digest mgf1Hash>;

        interfaceinvoke $r12.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>(r3, 0);

        $i13 = lengthof r3;

        $i18 = i19 * $i13;

        $i16 = lengthof r0;

        $i14 = lengthof r3;

        $i15 = i19 * $i14;

        $i17 = $i16 - $i15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r0, $i18, $i17);

     label2:
        return r0;
    }
}
