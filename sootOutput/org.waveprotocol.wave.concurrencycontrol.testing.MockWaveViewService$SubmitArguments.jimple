public class org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments extends java.lang.Object
{
    public final org.waveprotocol.wave.model.id.WaveletName wavelet;
    public final org.waveprotocol.wave.model.operation.wave.WaveletDelta delta;
    public final java.lang.String channelId;
    public final org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback callback;

    private void <init>(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.operation.wave.WaveletDelta, java.lang.String, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback r4;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r2;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments: org.waveprotocol.wave.model.id.WaveletName wavelet> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments: org.waveprotocol.wave.model.operation.wave.WaveletDelta delta> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments: java.lang.String channelId> = r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback callback> = r4;

        return;
    }

    void <init>(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.operation.wave.WaveletDelta, java.lang.String, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback, org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$1)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments r0;
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback r4;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r2;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$1 r5;
        java.lang.String r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback;

        r5 := @parameter4: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments: void <init>(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.operation.wave.WaveletDelta,java.lang.String,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback)>(r1, r2, r3, r4);

        return;
    }
}
