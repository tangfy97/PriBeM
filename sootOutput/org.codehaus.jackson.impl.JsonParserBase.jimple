public abstract class org.codehaus.jackson.impl.JsonParserBase extends org.codehaus.jackson.JsonParser
{
    static final int INT_TAB;
    static final int INT_LF;
    static final int INT_CR;
    static final int INT_SPACE;
    static final int INT_LBRACKET;
    static final int INT_RBRACKET;
    static final int INT_LCURLY;
    static final int INT_RCURLY;
    static final int INT_QUOTE;
    static final int INT_BACKSLASH;
    static final int INT_SLASH;
    static final int INT_COLON;
    static final int INT_COMMA;
    static final int INT_ASTERISK;
    static final int INT_APOSTROPHE;
    static final int INT_b;
    static final int INT_f;
    static final int INT_n;
    static final int INT_r;
    static final int INT_t;
    static final int INT_u;
    protected final org.codehaus.jackson.io.IOContext _ioContext;
    protected boolean _closed;
    protected int _inputPtr;
    protected int _inputEnd;
    protected long _currInputProcessed;
    protected int _currInputRow;
    protected int _currInputRowStart;
    protected long _tokenInputTotal;
    protected int _tokenInputRow;
    protected int _tokenInputCol;
    protected org.codehaus.jackson.impl.JsonReadContext _parsingContext;
    protected org.codehaus.jackson.JsonToken _nextToken;
    protected boolean _tokenIncomplete;
    protected final org.codehaus.jackson.util.TextBuffer _textBuffer;
    protected char[] _nameCopyBuffer;
    protected boolean _nameCopied;
    org.codehaus.jackson.util.ByteArrayBuilder _byteArrayBuilder;
    protected byte[] _binaryValue;

    protected void <init>(org.codehaus.jackson.io.IOContext, int)
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.io.IOContext r1;
        org.codehaus.jackson.impl.JsonReadContext $r3;
        int i0, $i1, $i2;
        org.codehaus.jackson.util.TextBuffer $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        specialinvoke r0.<org.codehaus.jackson.JsonParser: void <init>()>();

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputEnd> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed> = 0L;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRow> = 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: long _tokenInputTotal> = 0L;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _tokenInputRow> = 1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _tokenInputCol> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer> = null;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _nameCopied> = 0;

        r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.ByteArrayBuilder _byteArrayBuilder> = null;

        r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext> = r1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: int _features> = i0;

        $r2 = virtualinvoke r1.<org.codehaus.jackson.io.IOContext: org.codehaus.jackson.util.TextBuffer constructTextBuffer()>();

        r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer> = $r2;

        $i2 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _tokenInputRow>;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _tokenInputCol>;

        $r3 = staticinvoke <org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.impl.JsonReadContext createRootContext(int,int)>($i2, $i1);

        r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext> = $r3;

        return;
    }

    protected abstract void _finishString() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public org.codehaus.jackson.JsonParser skipChildren() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r4, $r5, $r6;
        org.codehaus.jackson.impl.JsonParserBase r0;
        int[] $r3;
        int $i0, $i1, i2, $i4;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_OBJECT>;

        if $r2 == $r1 goto label1;

        $r5 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r4 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken START_ARRAY>;

        if $r5 == $r4 goto label1;

        return r0;

     label1:
        i2 = 1;

     label2:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken nextToken()>();

        if $r6 != null goto label3;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _handleEOF()>();

        return r0;

     label3:
        $r3 = <org.codehaus.jackson.impl.JsonParserBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke $r6.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label5;
            default: goto label6;
        };

     label4:
        i2 = i2 + 1;

        goto label6;

     label5:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        if i2 != 0 goto label6;

        return r0;

     label6:
        goto label2;
    }

    public java.lang.String getCurrentName() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        java.lang.String $r2;
        org.codehaus.jackson.impl.JsonReadContext $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getCurrentName()>();

        return $r2;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _closed> = 1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _closeInput()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _releaseBuffers()>();

        return;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $z0 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _closed>;

        return $z0;
    }

    public org.codehaus.jackson.impl.JsonReadContext getParsingContext()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.impl.JsonReadContext $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        return $r1;
    }

    public org.codehaus.jackson.JsonLocation getTokenLocation()
    {
        org.codehaus.jackson.impl.JsonParserBase r1;
        org.codehaus.jackson.io.IOContext $r2;
        int $i1, $i2;
        java.lang.Object $r3;
        long $l0;
        org.codehaus.jackson.JsonLocation $r0;

        r1 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r0 = new org.codehaus.jackson.JsonLocation;

        $r2 = r1.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: java.lang.Object getSourceReference()>();

        $l0 = virtualinvoke r1.<org.codehaus.jackson.impl.JsonParserBase: long getTokenCharacterOffset()>();

        $i1 = virtualinvoke r1.<org.codehaus.jackson.impl.JsonParserBase: int getTokenLineNr()>();

        $i2 = virtualinvoke r1.<org.codehaus.jackson.impl.JsonParserBase: int getTokenColumnNr()>();

        specialinvoke $r0.<org.codehaus.jackson.JsonLocation: void <init>(java.lang.Object,long,int,int)>($r3, $l0, $i1, $i2);

        return $r0;
    }

    public org.codehaus.jackson.JsonLocation getCurrentLocation()
    {
        org.codehaus.jackson.io.IOContext $r2;
        long $l5, $l6, $l7, $l9;
        org.codehaus.jackson.JsonLocation $r1;
        org.codehaus.jackson.impl.JsonParserBase r0;
        int $i0, $i1, $i2, i3, $i4, $i8;
        java.lang.Object $r3;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $i1 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRowStart>;

        $i2 = $i1 - $i0;

        i3 = $i2 + 1;

        $r1 = new org.codehaus.jackson.JsonLocation;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.io.IOContext: java.lang.Object getSourceReference()>();

        $l6 = r0.<org.codehaus.jackson.impl.JsonParserBase: long _currInputProcessed>;

        $i4 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _inputPtr>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        $l9 = $l7 - 1L;

        $i8 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _currInputRow>;

        specialinvoke $r1.<org.codehaus.jackson.JsonLocation: void <init>(java.lang.Object,long,int,int)>($r3, $l9, $i8, i3);

        return $r1;
    }

    public java.lang.String getText() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r6;
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.impl.JsonReadContext $r4;
        int[] $r3;
        int $i0, $i1;
        java.lang.String $r5, $r7, $r9;
        org.codehaus.jackson.util.TextBuffer $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label5;

        $r3 = <org.codehaus.jackson.impl.JsonParserBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getCurrentName()>();

        return $r5;

     label2:
        $z0 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete>;

        if $z0 == 0 goto label3;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _finishString()>();

     label3:
        $r8 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r9;

     label4:
        $r6 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.JsonToken: java.lang.String asString()>();

        return $r7;

     label5:
        return null;
    }

    public char[] getTextCharacters() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.io.IOContext $r9;
        org.codehaus.jackson.JsonToken $r1, $r2, $r11;
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.impl.JsonReadContext $r4;
        int[] $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5;
        org.codehaus.jackson.util.TextBuffer $r15;
        boolean $z0, $z1;
        char[] $r6, $r7, $r8, $r10, $r12, $r13, $r14, $r16;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label8;

        $r3 = <org.codehaus.jackson.impl.JsonParserBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label5;
            case 7: goto label6;
            case 8: goto label6;
            default: goto label7;
        };

     label1:
        $z1 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _nameCopied>;

        if $z1 != 0 goto label4;

        $r4 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getCurrentName()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer>;

        if $r6 != null goto label2;

        $r9 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.io.IOContext: char[] allocNameCopyBuffer(int)>($i2);

        r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer> = $r10;

        goto label3;

     label2:
        $r7 = r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer>;

        $i3 = lengthof $r7;

        if $i3 >= $i2 goto label3;

        $r8 = newarray (char)[$i2];

        r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer> = $r8;

     label3:
        $r13 = r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer>;

        virtualinvoke $r5.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r13, 0);

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _nameCopied> = 1;

     label4:
        $r14 = r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer>;

        return $r14;

     label5:
        $z0 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete>;

        if $z0 == 0 goto label6;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _finishString()>();

     label6:
        $r15 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.util.TextBuffer: char[] getTextBuffer()>();

        return $r16;

     label7:
        $r11 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.JsonToken: char[] asCharArray()>();

        return $r12;

     label8:
        return null;
    }

    public int getTextLength() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r6;
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.impl.JsonReadContext $r4;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r7;
        java.lang.String $r5;
        org.codehaus.jackson.util.TextBuffer $r8;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label5;

        $r3 = <org.codehaus.jackson.impl.JsonParserBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        $r4 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getCurrentName()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        return $i2;

     label2:
        $z0 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete>;

        if $z0 == 0 goto label3;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _finishString()>();

     label3:
        $r8 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $i4 = virtualinvoke $r8.<org.codehaus.jackson.util.TextBuffer: int size()>();

        return $i4;

     label4:
        $r6 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.JsonToken: char[] asCharArray()>();

        $i3 = lengthof $r7;

        return $i3;

     label5:
        return 0;
    }

    public int getTextOffset() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        org.codehaus.jackson.impl.JsonParserBase r0;
        int[] $r3;
        int $i0, $i1, $i2;
        org.codehaus.jackson.util.TextBuffer $r4;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label4;

        $r3 = <org.codehaus.jackson.impl.JsonParserBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label4;
        };

     label1:
        return 0;

     label2:
        $z0 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete>;

        if $z0 == 0 goto label3;

        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete> = 0;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _finishString()>();

     label3:
        $r4 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $i2 = virtualinvoke $r4.<org.codehaus.jackson.util.TextBuffer: int getTextOffset()>();

        return $i2;

     label4:
        return 0;
    }

    public final byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        byte[] $r3, $r5;
        org.codehaus.jackson.JsonToken $r1, $r2, $r8;
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.Base64Variant r4;
        java.lang.String $r11, $r17, $r19;
        boolean $z0;
        java.lang.IllegalArgumentException $r12;
        org.codehaus.jackson.JsonParseException $r20;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r13, $r14, $r15, $r16, $r18;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r4 := @parameter0: org.codehaus.jackson.Base64Variant;

        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_STRING>;

        if $r2 == $r1 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r8 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not VALUE_STRING, can not access as binary");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _reportError(java.lang.String)>($r11);

     label1:
        $z0 = r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete>;

        if $z0 == 0 goto label6;

     label2:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: byte[] _decodeBase64(org.codehaus.jackson.Base64Variant)>(r4);

        r0.<org.codehaus.jackson.impl.JsonParserBase: byte[] _binaryValue> = $r5;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode VALUE_STRING as base64 (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r17 = virtualinvoke $r12.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r19);

        throw $r20;

     label5:
        r0.<org.codehaus.jackson.impl.JsonParserBase: boolean _tokenIncomplete> = 0;

     label6:
        $r3 = r0.<org.codehaus.jackson.impl.JsonParserBase: byte[] _binaryValue>;

        return $r3;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    protected abstract byte[] _decodeBase64(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public final long getTokenCharacterOffset()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        long $l0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $l0 = r0.<org.codehaus.jackson.impl.JsonParserBase: long _tokenInputTotal>;

        return $l0;
    }

    public final int getTokenLineNr()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        int $i0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _tokenInputRow>;

        return $i0;
    }

    public final int getTokenColumnNr()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        int $i0, $i1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonParserBase: int _tokenInputCol>;

        $i1 = $i0 + 1;

        return $i1;
    }

    protected abstract boolean loadMore() throws java.io.IOException;

    protected final void loadMoreGuaranteed() throws java.io.IOException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: boolean loadMore()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _reportInvalidEOF()>();

     label1:
        return;
    }

    protected abstract void _closeInput() throws java.io.IOException;

    protected void _releaseBuffers() throws java.io.IOException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.io.IOContext $r3;
        char[] r2;
        org.codehaus.jackson.util.TextBuffer $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        virtualinvoke $r1.<org.codehaus.jackson.util.TextBuffer: void releaseBuffers()>();

        r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer>;

        if r2 == null goto label1;

        r0.<org.codehaus.jackson.impl.JsonParserBase: char[] _nameCopyBuffer> = null;

        $r3 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        virtualinvoke $r3.<org.codehaus.jackson.io.IOContext: void releaseNameCopyBuffer(char[])>(r2);

     label1:
        return;
    }

    protected void _handleEOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.io.IOContext $r8;
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.impl.JsonReadContext $r1, $r4, $r9;
        java.lang.String $r5, $r14;
        boolean $z0;
        org.codehaus.jackson.JsonLocation $r11;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r12, $r13;
        java.lang.Object $r10;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonReadContext: boolean inRoot()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": expected close marker for ");

        $r4 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getTypeDesc()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (from ");

        $r9 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r8 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $r10 = virtualinvoke $r8.<org.codehaus.jackson.io.IOContext: java.lang.Object getSourceReference()>();

        $r11 = virtualinvoke $r9.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.JsonLocation getStartLocation(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _reportInvalidEOF(java.lang.String)>($r14);

     label1:
        return;
    }

    protected void _reportUnexpectedChar(int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserBase r7;
        int i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r8, $r9, $r10, $r11;
        java.lang.String $r2, $r5, r6, r12;

        r7 := @this: org.codehaus.jackson.impl.JsonParserBase;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected character (");

        $r2 = staticinvoke <org.codehaus.jackson.impl.JsonParserBase: java.lang.String _getCharDesc(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r5;

        if r6 == null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r7.<org.codehaus.jackson.impl.JsonParserBase: void _reportError(java.lang.String)>(r12);

        return;
    }

    protected void _reportInvalidEOF() throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.JsonToken $r3;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r3 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _reportInvalidEOF(java.lang.String)>($r5);

        return;
    }

    protected void _reportInvalidEOF(java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected end-of-input");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _throwInvalidSpace(int) throws org.codehaus.jackson.JsonParseException
    {
        char c1;
        org.codehaus.jackson.impl.JsonParserBase r6;
        int i0, $i2;
        java.lang.StringBuilder $r1, $r3, $r4, $r7;
        java.lang.String $r2, $r5;

        r6 := @this: org.codehaus.jackson.impl.JsonParserBase;

        i0 := @parameter0: int;

        c1 = (char) i0;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (");

        $i2 = (int) c1;

        $r2 = staticinvoke <org.codehaus.jackson.impl.JsonParserBase: java.lang.String _getCharDesc(int)>($i2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): only regular white space (\\r, \\n, \\t) is allowed between tokens");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<org.codehaus.jackson.impl.JsonParserBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _throwUnquotedSpace(int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        char $c1;
        org.codehaus.jackson.impl.JsonParserBase r0;
        int i0, $i2;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r10;
        java.lang.String $r4, r7, $r9;
        org.codehaus.jackson.JsonParser$Feature $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        $r1 = <org.codehaus.jackson.JsonParser$Feature: org.codehaus.jackson.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>($r1);

        if $z0 == 0 goto label1;

        if i0 < 32 goto label2;

     label1:
        $c1 = (char) i0;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal unquoted character (");

        $i2 = (int) $c1;

        $r4 = staticinvoke <org.codehaus.jackson.impl.JsonParserBase: java.lang.String _getCharDesc(int)>($i2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): has to be escaped using backslash to be included in ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void _reportError(java.lang.String)>($r9);

     label2:
        return;
    }

    protected void _reportMismatchedEndMarker(int, char) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.io.IOContext $r3;
        org.codehaus.jackson.impl.JsonParserBase r2;
        org.codehaus.jackson.impl.JsonReadContext $r4, $r15;
        int i0;
        java.lang.String $r8, $r16, $r21;
        char $c1, c2;
        org.codehaus.jackson.JsonLocation $r6;
        java.lang.StringBuilder $r0, $r1, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20;
        java.lang.Object $r5;

        r2 := @this: org.codehaus.jackson.impl.JsonParserBase;

        i0 := @parameter0: int;

        c2 := @parameter1: char;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = r2.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r3 = r2.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.io.IOContext _ioContext>;

        $r5 = virtualinvoke $r3.<org.codehaus.jackson.io.IOContext: java.lang.Object getSourceReference()>();

        $r6 = virtualinvoke $r4.<org.codehaus.jackson.impl.JsonReadContext: org.codehaus.jackson.JsonLocation getStartLocation(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected close marker \'");

        $c1 = (char) i0;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': expected \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for ");

        $r15 = r2.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext _parsingContext>;

        $r16 = virtualinvoke $r15.<org.codehaus.jackson.impl.JsonReadContext: java.lang.String getTypeDesc()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starting at ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.codehaus.jackson.impl.JsonParserBase: void _reportError(java.lang.String)>($r21);

        return;
    }

    protected static final java.lang.String _getCharDesc(int)
    {
        int i0;
        java.lang.String $r6, $r13, $r16, $r21;
        boolean $z0;
        char c1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r20;

        i0 := @parameter0: int;

        c1 = (char) i0;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c1);

        if $z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(CTRL-CHAR, code ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label1:
        if i0 <= 255 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / 0x");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected final void _reportError(java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        java.lang.String r1;
        org.codehaus.jackson.JsonParseException $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>(r1);

        throw $r2;
    }

    protected final void _wrapError(java.lang.String, java.lang.Throwable) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        java.lang.Throwable r2;
        org.codehaus.jackson.JsonParseException $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonParseException _constructError(java.lang.String,java.lang.Throwable)>(r1, r2);

        throw $r3;
    }

    protected final void _throwInternal()
    {
        org.codehaus.jackson.impl.JsonParserBase r1;
        java.lang.RuntimeException $r0;

        r1 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: this code path should never get executed");

        throw $r0;
    }

    protected final org.codehaus.jackson.JsonParseException _constructError(java.lang.String, java.lang.Throwable)
    {
        org.codehaus.jackson.impl.JsonParserBase r2;
        java.lang.Throwable r4;
        org.codehaus.jackson.JsonParseException $r0;
        java.lang.String r1;
        org.codehaus.jackson.JsonLocation $r3;

        r2 := @this: org.codehaus.jackson.impl.JsonParserBase;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Throwable;

        $r0 = new org.codehaus.jackson.JsonParseException;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.JsonLocation getCurrentLocation()>();

        specialinvoke $r0.<org.codehaus.jackson.JsonParseException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>(r1, $r3, r4);

        return $r0;
    }

    public org.codehaus.jackson.util.ByteArrayBuilder _getByteArrayBuilder()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.util.ByteArrayBuilder $r1, $r2, $r3, $r4;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.ByteArrayBuilder _byteArrayBuilder>;

        if $r1 != null goto label1;

        $r4 = new org.codehaus.jackson.util.ByteArrayBuilder;

        specialinvoke $r4.<org.codehaus.jackson.util.ByteArrayBuilder: void <init>()>();

        r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.ByteArrayBuilder _byteArrayBuilder> = $r4;

        goto label2;

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.ByteArrayBuilder _byteArrayBuilder>;

        virtualinvoke $r2.<org.codehaus.jackson.util.ByteArrayBuilder: void reset()>();

     label2:
        $r3 = r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.util.ByteArrayBuilder _byteArrayBuilder>;

        return $r3;
    }

    public volatile org.codehaus.jackson.JsonStreamContext getParsingContext()
    {
        org.codehaus.jackson.impl.JsonParserBase r0;
        org.codehaus.jackson.impl.JsonReadContext $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonParserBase;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: org.codehaus.jackson.impl.JsonReadContext getParsingContext()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.impl.JsonParserBase: int INT_u> = 117;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_t> = 116;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_r> = 114;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_n> = 110;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_f> = 102;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_b> = 98;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_APOSTROPHE> = 39;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_ASTERISK> = 42;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_COMMA> = 44;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_COLON> = 58;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_SLASH> = 47;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_BACKSLASH> = 92;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_QUOTE> = 34;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_RCURLY> = 125;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_LCURLY> = 123;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_RBRACKET> = 93;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_LBRACKET> = 91;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_SPACE> = 32;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_CR> = 13;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_LF> = 10;

        <org.codehaus.jackson.impl.JsonParserBase: int INT_TAB> = 9;

        return;
    }
}
