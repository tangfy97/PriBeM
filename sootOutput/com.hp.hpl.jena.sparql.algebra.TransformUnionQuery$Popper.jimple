class com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    private java.util.Deque stack;

    void <init>(java.util.Deque)
    {
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper r0;
        java.util.Deque r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper;

        r1 := @parameter0: java.util.Deque;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper: java.util.Deque stack> = r1;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r4;
        com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper r0;
        com.hp.hpl.jena.graph.Node r3, $r5;
        java.util.Deque $r1;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r6;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.TransformUnionQuery$Popper: java.util.Deque stack>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object pop()>();

        r3 = (com.hp.hpl.jena.graph.Node) $r2;

        $r5 = virtualinvoke r4.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        $z0 = virtualinvoke $r5.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r6 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>()>();

        throw $r6;

     label1:
        return;
    }
}
