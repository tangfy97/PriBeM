public class org.eclipse.jdt.internal.compiler.batch.Main extends java.lang.Object implements org.eclipse.jdt.internal.compiler.problem.ProblemSeverities, org.eclipse.jdt.internal.compiler.util.SuffixConstants
{
    boolean enableJavadocOn;
    boolean warnJavadocOn;
    boolean warnAllJavadocOn;
    public org.eclipse.jdt.internal.compiler.Compiler batchCompiler;
    public java.util.ResourceBundle bundle;
    protected org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] checkedClasspaths;
    public java.util.Locale compilerLocale;
    public org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions;
    public org.eclipse.jdt.core.compiler.CompilationProgress progress;
    public java.lang.String destinationPath;
    public java.lang.String[] destinationPaths;
    private boolean didSpecifySource;
    private boolean didSpecifyTarget;
    public java.lang.String[] encodings;
    public int exportedClassFilesCounter;
    public java.lang.String[] filenames;
    public java.lang.String[] classNames;
    public int globalErrorsCount;
    public int globalProblemsCount;
    public int globalTasksCount;
    public int globalWarningsCount;
    private java.io.File javaHomeCache;
    private boolean javaHomeChecked;
    public long lineCount0;
    public java.lang.String log;
    public org.eclipse.jdt.internal.compiler.batch.Main$Logger logger;
    public int maxProblems;
    public java.util.Map options;
    protected java.io.PrintWriter out;
    public boolean proceed;
    public boolean proceedOnError;
    public boolean produceRefInfo;
    public int currentRepetition;
    public int maxRepetition;
    public boolean showProgress;
    public long startTime;
    public java.util.ArrayList pendingErrors;
    public boolean systemExitWhenFinished;
    public static final int TIMING_DISABLED;
    public static final int TIMING_ENABLED;
    public static final int TIMING_DETAILED;
    public int timing;
    public org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats;
    public boolean verbose;
    private java.lang.String[] expandedCommandLine;
    private java.io.PrintWriter err;
    java.util.ArrayList extraProblems;
    public static final java.lang.String bundleName;
    public static final int DEFAULT_SIZE_CLASSPATH;
    public static final java.lang.String NONE;
    static java.lang.Class class$0;

    public static boolean compile(java.lang.String)
    {
        java.io.PrintWriter $r1, $r3;
        java.io.PrintStream $r2, $r4;
        java.lang.String[] $r6;
        org.eclipse.jdt.internal.compiler.batch.Main $r0;
        java.lang.String r5;
        boolean $z0;

        r5 := @parameter0: java.lang.String;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        $r3 = new java.io.PrintWriter;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r4);

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: void <init>(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>($r1, $r3, 0, null, null);

        $r6 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] tokenize(java.lang.String)>(r5);

        $z0 = virtualinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean compile(java.lang.String[])>($r6);

        return $z0;
    }

    public static boolean compile(java.lang.String, java.io.PrintWriter, java.io.PrintWriter)
    {
        java.io.PrintWriter r1, r2;
        java.lang.String[] $r4;
        org.eclipse.jdt.internal.compiler.batch.Main $r0;
        java.lang.String r3;
        boolean $z0;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.io.PrintWriter;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: void <init>(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, 0, null, null);

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] tokenize(java.lang.String)>(r3);

        $z0 = virtualinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean compile(java.lang.String[])>($r4);

        return $z0;
    }

    public static boolean compile(java.lang.String[], java.io.PrintWriter, java.io.PrintWriter, org.eclipse.jdt.core.compiler.CompilationProgress)
    {
        java.io.PrintWriter r1, r2;
        org.eclipse.jdt.core.compiler.CompilationProgress r3;
        java.lang.String[] r4;
        org.eclipse.jdt.internal.compiler.batch.Main $r0;
        boolean $z0;

        r4 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.io.PrintWriter;

        r3 := @parameter3: org.eclipse.jdt.core.compiler.CompilationProgress;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: void <init>(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, 0, null, r3);

        $z0 = virtualinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean compile(java.lang.String[])>(r4);

        return $z0;
    }

    public static java.io.File[][] getLibrariesFiles(java.io.File[])
    {
        org.eclipse.jdt.internal.compiler.batch.Main$2 $r0;
        java.io.File[][] r2;
        java.io.File r3;
        int i0, i1;
        java.io.File[] r1, $r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.io.File[];

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main$2;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main$2: void <init>()>();

        i0 = lengthof r1;

        r2 = newarray (java.io.File[])[i0];

        i1 = 0;

        goto label3;

     label1:
        r3 = r1[i1];

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r0);

        r2[i1] = $r4;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        return r2;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintWriter $r1, $r3;
        java.io.PrintStream $r2, $r4;
        java.lang.String[] r5;
        org.eclipse.jdt.internal.compiler.batch.Main $r0;

        r5 := @parameter0: java.lang.String[];

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main;

        $r1 = new java.io.PrintWriter;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r2);

        $r3 = new java.io.PrintWriter;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r4);

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: void <init>(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>($r1, $r3, 1, null, null);

        virtualinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean compile(java.lang.String[])>(r5);

        return;
    }

    public static java.lang.String[] tokenize(java.lang.String)
    {
        boolean $z0, $z1, z2, z3, $z4, $z5, z6, z7;
        java.lang.String[] $r4, $r5, $r17, $r18, $r24, r25;
        java.util.StringTokenizer $r0;
        java.lang.StringBuffer $r6, $r9, $r11, $r14, $r19, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.lang.String r1, $r2, $r3, $r7, $r8, $r10, $r12, $r13, $r15, $r16, $r20, $r21, $r23, r26;

        r1 := @parameter0: java.lang.String;

        i11 = 0;

        r25 = newarray (java.lang.String)[10];

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r1, " \"", 1);

        r26 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        z2 = 0;

        z3 = 1;

        z7 = 1;

        z6 = 1;

        goto label13;

     label01:
        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(" ");

        if $z0 == 0 goto label03;

        if z2 == 0 goto label02;

        $i10 = i11 - 1;

        $r20 = r25[$i10];

        $r19 = new java.lang.StringBuffer;

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        r25[$i10] = $r23;

        z3 = 0;

        z7 = 0;

        z6 = 0;

        goto label13;

     label02:
        z3 = 1;

        z7 = 1;

        z6 = 1;

        goto label13;

     label03:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("\"");

        if $z1 == 0 goto label08;

        if z2 != 0 goto label05;

        if z6 == 0 goto label05;

        $i7 = lengthof r25;

        if i11 != $i7 goto label04;

        $r18 = r25;

        $i9 = i11 * 2;

        $r17 = newarray (java.lang.String)[$i9];

        r25 = $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, $r17, 0, i11);

     label04:
        $i8 = i11;

        i11 = i11 + 1;

        $r16 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        r25[$i8] = $r16;

     label05:
        if z2 == 0 goto label06;

        $z4 = 0;

        goto label07;

     label06:
        $z4 = 1;

     label07:
        z2 = $z4;

        z3 = 0;

        z7 = 0;

        z6 = 0;

        goto label13;

     label08:
        if z2 == 0 goto label09;

        $i6 = i11 - 1;

        $r12 = r25[$i6];

        $r11 = new java.lang.StringBuffer;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuffer: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        r25[$i6] = $r15;

        goto label12;

     label09:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

        if z7 != 0 goto label10;

        $i5 = i11 - 1;

        $r7 = r25[$i5];

        $r6 = new java.lang.StringBuffer;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>($r8);

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        r25[$i5] = $r10;

        goto label12;

     label10:
        $i1 = lengthof r25;

        if i11 != $i1 goto label11;

        $r5 = r25;

        $i4 = i11 * 2;

        $r4 = newarray (java.lang.String)[$i4];

        r25 = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, i11);

     label11:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 == 0 goto label12;

        $i3 = i11;

        i11 = i11 + 1;

        r25[$i3] = $r3;

     label12:
        z3 = 0;

        z7 = 0;

        z6 = 0;

     label13:
        $z5 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 != 0 goto label01;

        $r24 = newarray (java.lang.String)[i11];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r25, 0, $r24, 0, i11);

        return $r24;
    }

    public void <init>(java.io.PrintWriter, java.io.PrintWriter, boolean)
    {
        java.io.PrintWriter r1, r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void <init>(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, z0, null, null);

        return;
    }

    public void <init>(java.io.PrintWriter, java.io.PrintWriter, boolean, java.util.Map)
    {
        java.io.PrintWriter r1, r2;
        java.util.Map r3;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.Map;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void <init>(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, z0, r3, null);

        return;
    }

    public void <init>(java.io.PrintWriter, java.io.PrintWriter, boolean, java.util.Map, org.eclipse.jdt.core.compiler.CompilationProgress)
    {
        java.io.PrintWriter r1, r2;
        org.eclipse.jdt.core.compiler.CompilationProgress r4;
        java.util.Map r3;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.Map;

        r4 := @parameter4: org.eclipse.jdt.core.compiler.CompilationProgress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean javaHomeChecked> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceed> = 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceedOnError> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean produceRefInfo> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean showProgress> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean systemExitWhenFinished> = 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int timing> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean verbose> = 0;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void initialize(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, z0, r3, r4);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void relocalize()>();

        return;
    }

    public void addExtraProblems(org.eclipse.jdt.core.compiler.CategorizedProblem)
    {
        org.eclipse.jdt.core.compiler.CategorizedProblem r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.util.ArrayList $r1, $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r2 := @parameter0: org.eclipse.jdt.core.compiler.CategorizedProblem;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList extraProblems>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList extraProblems> = $r4;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList extraProblems>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return;
    }

    protected void addNewEntry(java.util.ArrayList, java.lang.String, java.util.ArrayList, java.lang.String, java.lang.String, boolean, boolean) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        org.eclipse.jdt.internal.compiler.env.AccessRuleSet r24, $r31;
        org.eclipse.jdt.internal.compiler.env.AccessRule[] r25;
        boolean $z0, z1, z2, $z3, z4, $z5;
        org.eclipse.jdt.internal.compiler.batch.Main r4;
        org.eclipse.jdt.internal.compiler.env.AccessRule $r27, $r28, $r29, $r30;
        java.util.ArrayList r0, r6;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11;
        java.lang.String $r1, r2, r3, $r5, $r8, r11, $r12, $r21, r23;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r26;
        java.util.Iterator $r9;
        char $c3;
        org.eclipse.jdt.core.compiler.InvalidInputException $r32;
        char[] $r14, $r16, $r18, $r20;
        java.lang.Object $r10;

        r4 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r6 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.ArrayList;

        r3 := @parameter3: java.lang.String;

        r23 := @parameter4: java.lang.String;

        z2 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        r24 = null;

        if $i0 == 0 goto label11;

        $i2 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        r25 = newarray (org.eclipse.jdt.internal.compiler.env.AccessRule)[$i2];

        z4 = 1;

        $r9 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>();

        i10 = 0;

        goto label08;

     label01:
        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $c3 = virtualinvoke r11.<java.lang.String: char charAt(int)>(0);

        $r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>(1);

        $i4 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i4 <= 0 goto label07;

        $i11 = (int) $c3;

        lookupswitch($i11)
        {
            case 43: goto label02;
            case 45: goto label04;
            case 63: goto label05;
            case 126: goto label03;
            default: goto label06;
        };

     label02:
        $i8 = i10;

        i10 = i10 + 1;

        $r27 = new org.eclipse.jdt.internal.compiler.env.AccessRule;

        $r20 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r27.<org.eclipse.jdt.internal.compiler.env.AccessRule: void <init>(char[],int)>($r20, 0);

        r25[$i8] = $r27;

        goto label08;

     label03:
        $i5 = i10;

        i10 = i10 + 1;

        $r28 = new org.eclipse.jdt.internal.compiler.env.AccessRule;

        $r14 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r28.<org.eclipse.jdt.internal.compiler.env.AccessRule: void <init>(char[],int)>($r14, 16777496);

        r25[$i5] = $r28;

        goto label08;

     label04:
        $i7 = i10;

        i10 = i10 + 1;

        $r29 = new org.eclipse.jdt.internal.compiler.env.AccessRule;

        $r18 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r29.<org.eclipse.jdt.internal.compiler.env.AccessRule: void <init>(char[],int)>($r18, 16777523);

        r25[$i7] = $r29;

        goto label08;

     label05:
        $i6 = i10;

        i10 = i10 + 1;

        $r30 = new org.eclipse.jdt.internal.compiler.env.AccessRule;

        $r16 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r30.<org.eclipse.jdt.internal.compiler.env.AccessRule: void <init>(char[],int,boolean)>($r16, 16777523, 1);

        r25[$i6] = $r30;

        goto label08;

     label06:
        z4 = 0;

        goto label08;

     label07:
        z4 = 0;

     label08:
        $z5 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z5 != 0 goto label01;

        if z4 == 0 goto label09;

        $r31 = new org.eclipse.jdt.internal.compiler.env.AccessRuleSet;

        specialinvoke $r31.<org.eclipse.jdt.internal.compiler.env.AccessRuleSet: void <init>(org.eclipse.jdt.internal.compiler.env.AccessRule[],byte,java.lang.String)>(r25, 0, r2);

        r24 = $r31;

        goto label11;

     label09:
        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i9 == 0 goto label10;

        $r21 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectClasspath", r2);

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r21);

     label10:
        return;

     label11:
        $r1 = "none";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r23);

        if $z0 == 0 goto label12;

        r23 = "none";

     label12:
        if z1 == 0 goto label13;

        if r23 == null goto label13;

        $z3 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: boolean isPotentialZipArchive(java.lang.String)>(r2);

        if $z3 == 0 goto label13;

        $r32 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r8 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedDestinationPathEntryFile", r2);

        specialinvoke $r32.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r8);

        throw $r32;

     label13:
        $r26 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,boolean,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>(r2, r3, z2, r24, r23);

        if $r26 == null goto label14;

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

        goto label15;

     label14:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 == 0 goto label15;

        $r5 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectClasspath", r2);

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r5);

     label15:
        return;
    }

    void addPendingErrors(java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String r2;
        java.util.ArrayList $r1, $r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList pendingErrors>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList pendingErrors> = $r4;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList pendingErrors>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return;
    }

    public java.lang.String bind(java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String r1, $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>(r1, null);

        return $r2;
    }

    public java.lang.String bind(java.lang.String, java.lang.String)
    {
        java.lang.String[] $r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String r1, r3, $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>(r1, $r2);

        return $r4;
    }

    public java.lang.String bind(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String[] $r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String r1, r3, r4, $r5;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = r3;

        $r2[1] = r4;

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>(r1, $r2);

        return $r5;
    }

    public java.lang.String bind(java.lang.String, java.lang.String[])
    {
        java.util.MissingResourceException $r6;
        java.lang.String[] r4;
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        java.util.ResourceBundle $r2;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        java.lang.String r0, $r3, $r5, $r11;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String[];

        if r0 != null goto label1;

        return "No message available";

     label1:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ResourceBundle bundle>;

        $r3 = virtualinvoke $r2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("Missing message: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("org.eclipse.jdt.internal.compiler.batch.messages");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;

     label4:
        $r5 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r3, r4);

        return $r5;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    private boolean checkVMVersion(long)
    {
        long l2;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        int $i0, $i1, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.String $r0, $r1;
        java.lang.NumberFormatException $r2;
        org.eclipse.jdt.internal.compiler.batch.Main r3;

        r3 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        l2 := @parameter0: long;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.version");

        if $r0 != null goto label01;

        return 0;

     label01:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(46);

        $i11 = (int) -1;

        if $i0 != $i11 goto label02;

        return 0;

     label02:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label03:
        goto label05;

     label04:
        $r2 := @caughtexception;

        return 0;

     label05:
        tableswitch($i1)
        {
            case 45: goto label06;
            case 46: goto label08;
            case 47: goto label10;
            case 48: goto label12;
            case 49: goto label14;
            case 50: goto label16;
            case 51: goto label18;
            default: goto label20;
        };

     label06:
        $b9 = 2949123L cmp l2;

        $i12 = (int) $b9;

        if $i12 < 0 goto label07;

        return 1;

     label07:
        return 0;

     label08:
        $b8 = 3014656L cmp l2;

        $i13 = (int) $b8;

        if $i13 < 0 goto label09;

        return 1;

     label09:
        return 0;

     label10:
        $b7 = 3080192L cmp l2;

        $i14 = (int) $b7;

        if $i14 < 0 goto label11;

        return 1;

     label11:
        return 0;

     label12:
        $b6 = 3145728L cmp l2;

        $i15 = (int) $b6;

        if $i15 < 0 goto label13;

        return 1;

     label13:
        return 0;

     label14:
        $b5 = 3211264L cmp l2;

        $i16 = (int) $b5;

        if $i16 < 0 goto label15;

        return 1;

     label15:
        return 0;

     label16:
        $b4 = 3276800L cmp l2;

        $i17 = (int) $b4;

        if $i17 < 0 goto label17;

        return 1;

     label17:
        return 0;

     label18:
        $b3 = 3342336L cmp l2;

        $i18 = (int) $b3;

        if $i18 < 0 goto label19;

        return 1;

     label19:
        return 0;

     label20:
        return 0;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
    }

    public boolean compile(java.lang.String[])
    {
        byte $b12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r3, $r4, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r21, $r22, $r26, $r28, $r29, $r31, $r32, $r33, $r34, $r35;
        java.lang.Throwable $r20;
        org.eclipse.jdt.core.compiler.CompilationProgress $r2, $r5, $r6, $r7, $r8, $r19, $r23, $r24, $r27, $r36;
        java.lang.String[] r1, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i16;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats[] $r13;
        java.lang.RuntimeException $r25;
        org.eclipse.jdt.core.compiler.InvalidInputException $r30;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.lang.String[];

     label01:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void configure(java.lang.String[])>(r1);

        $r2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        if $r2 == null goto label04;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        $r17 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        if $r17 != null goto label02;

        $i9 = 0;

        goto label03;

     label02:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $i8 = lengthof $r18;

        $i7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        $i9 = $i8 * $i7;

     label03:
        virtualinvoke $r19.<org.eclipse.jdt.core.compiler.CompilationProgress: void begin(int)>($i9);

     label04:
        $z5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceed>;

        if $z5 == 0 goto label10;

        $z1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean showProgress>;

        if $z1 == 0 goto label05;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void compiling()>();

     label05:
        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition> = 0;

        goto label08;

     label06:
        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalProblemsCount> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalWarningsCount> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalTasksCount> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int exportedClassFilesCounter> = 0;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        if $i2 <= 1 goto label07;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        $i6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition>;

        $i5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logRepetition(int,int)>($i6, $i5);

     label07:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void performCompilation()>();

        $i3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition>;

        $i4 = $i3 + 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition> = $i4;

     label08:
        $i10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition>;

        $i11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        if $i10 < $i11 goto label06;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats>;

        if $r13 == null goto label09;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logAverage()>();

     label09:
        $z2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean showProgress>;

        if $z2 == 0 goto label10;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printNewLine()>();

     label10:
        $z6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean systemExitWhenFinished>;

        if $z6 == 0 goto label20;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void close()>();

        $i1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount>;

        if $i1 <= 0 goto label11;

        $b12 = -1;

        goto label12;

     label11:
        $b12 = 0;

     label12:
        staticinvoke <java.lang.System: void exit(int)>($b12);

     label13:
        goto label20;

     label14:
        $r30 := @caughtexception;

        $r31 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logException(java.lang.Exception)>($r30);

        $z4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean systemExitWhenFinished>;

        if $z4 == 0 goto label15;

        $r32 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r32.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r33 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r33.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void close()>();

        $i14 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i14);

     label15:
        $r34 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r34.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r35 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r35.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void close()>();

        $r36 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        if $r36 == null goto label16;

        $r27 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        virtualinvoke $r27.<org.eclipse.jdt.core.compiler.CompilationProgress: void done()>();

     label16:
        return 0;

     label17:
        $r25 := @caughtexception;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r26.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logException(java.lang.Exception)>($r25);

        $z3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean systemExitWhenFinished>;

        if $z3 == 0 goto label15;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r29 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r29.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void close()>();

        $i16 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i16);

        goto label15;

     label18:
        $r20 := @caughtexception;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r22 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void close()>();

        $r23 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        if $r23 == null goto label19;

        $r24 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        virtualinvoke $r24.<org.eclipse.jdt.core.compiler.CompilationProgress: void done()>();

     label19:
        throw $r20;

     label20:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void close()>();

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        if $r5 == null goto label21;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        virtualinvoke $r8.<org.eclipse.jdt.core.compiler.CompilationProgress: void done()>();

     label21:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int globalErrorsCount>;

        if $i0 != 0 goto label23;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        if $r6 == null goto label22;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        $z0 = virtualinvoke $r7.<org.eclipse.jdt.core.compiler.CompilationProgress: boolean isCanceled()>();

        if $z0 != 0 goto label23;

     label22:
        return 1;

     label23:
        return 0;

        catch org.eclipse.jdt.core.compiler.InvalidInputException from label01 to label13 with label14;
        catch java.lang.RuntimeException from label01 to label13 with label17;
        catch java.lang.Throwable from label01 to label15 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
    }

    public void configure(java.lang.String[]) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.lang.StringBuffer $r18, $r221, $r277, $r293, $r295, $r297, $r299, $r301, $r327;
        java.io.StringReader $r275;
        java.io.ByteArrayInputStream $r282, $r318;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i61, $i62, $i63, $i64, i65, i66, i67, i68, i70, i71, i72, i73, i74, i75, i76, i77, i78, $i79, $i81, i82, i83, i84, i85, $i86, $i88, $i90, $i91, $i92, $i94, $i96, $i97, $i98;
        java.util.ArrayList $r186, $r187, r239, r240, $r270, $r271, $r272, $r323, $r326;
        java.lang.String $r5, $r6, $r7, $r12, $r19, $r20, $r23, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r55, $r61, $r63, $r67, $r69, $r71, $r80, $r83, $r86, $r89, $r91, $r96, $r98, $r101, $r103, $r108, $r109, $r111, $r122, $r123, $r124, $r127, $r128, $r129, $r132, $r133, $r134, $r137, $r138, $r139, $r140, $r143, $r144, $r145, $r148, $r151, $r153, $r155, $r156, $r158, $r171, $r176, $r178, $r180, $r184, $r199, $r209, $r210, $r217, $r220, $r222, $r225, $r228, $r231, $r234, $r237, r238, r241, r242, r243, r244, r245, $r248, r251, r252, $r254, r255, $r262, r267, r268, r269, $r274;
        char[] $r218;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z96, $z97, $z98, $z99, $z100, $z101, $z102, $z103, $z104, $z105, $z106, $z107, z108, z109, z110, z111, z112, z113, z114, $z115, $z116, z117, z118, $z119, $z120, $z121, z122, z123, z124, z125, z126, z127, z128, z129;
        java.io.LineNumberReader $r276;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r90, $r94, $r185, $r190, $r200, $r264, $r265;
        java.io.UnsupportedEncodingException $r223, $r232;
        byte[] $r57, $r173;
        byte $b60, b69, b80;
        java.util.Map $r53, $r59, $r64, $r65, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r81, $r84, $r87, $r92, $r93, $r95, $r99, $r104, $r105, $r106, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r146, $r149, $r181, $r182, $r183, $r196, $r198, $r201, $r202, $r203, $r204, $r205, $r206, $r207, $r208, $r256, $r257, $r258, $r259, $r260, $r261, $r266;
        long $l59;
        java.util.StringTokenizer $r303, $r307, $r322, $r325, $r329;
        java.io.IOException $r235;
        java.io.InputStreamReader $r283, $r319;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats[] $r195;
        java.lang.Object $r189, $r197;
        java.lang.NumberFormatException $r226, $r229;
        org.eclipse.jdt.core.compiler.InvalidInputException $r278, $r279, $r280, $r281, $r284, $r285, $r286, $r287, $r288, $r289, $r290, $r291, $r292, $r294, $r296, $r298, $r300, $r302, $r304, $r305, $r306, $r308, $r309, $r310, $r311, $r312, $r313, $r314, $r315, $r316, $r317, $r320, $r321, $r324, $r328, $r331;
        java.io.File $r273, $r330;
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        java.lang.String[] r0, $r9, $r10, $r11, $r13, $r14, $r15, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r191, $r192, $r193, $r194, $r211, $r212, r246, r247, $r249, $r250, r263;
        java.util.Iterator $r188;
        char $c11, $c14, $c25, $c26;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label001;

        $i0 = lengthof r0;

        if $i0 != 0 goto label002;

     label001:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void printUsage()>();

        return;

     label002:
        $r270 = new java.util.ArrayList;

        specialinvoke $r270.<java.util.ArrayList: void <init>(int)>(4);

        r238 = null;

        $r271 = new java.util.ArrayList;

        specialinvoke $r271.<java.util.ArrayList: void <init>(int)>(4);

        $r272 = new java.util.ArrayList;

        specialinvoke $r272.<java.util.ArrayList: void <init>(int)>(4);

        r239 = null;

        r240 = null;

        $i88 = (int) -1;

        i65 = $i88;

        i66 = 0;

        i67 = 0;

        i68 = lengthof r0;

        b69 = 0;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition> = 0;

        z108 = 0;

        r241 = null;

        r269 = null;

        r268 = null;

        z109 = 0;

        z110 = 0;

        z111 = 0;

        z112 = 0;

        z127 = 0;

        z126 = 0;

        z125 = 0;

        z124 = 0;

        z123 = 0;

        z122 = 0;

        z113 = 0;

        r242 = null;

        r243 = null;

        r244 = null;

        r245 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        z114 = 0;

        i70 = 0;

        goto label005;

     label003:
        $r5 = r0[i70];

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z0 == 0 goto label004;

        z114 = 1;

        goto label006;

     label004:
        i70 = i70 + 1;

     label005:
        if i70 < i68 goto label003;

     label006:
        if z114 == 0 goto label017;

        r246 = newarray (java.lang.String)[i68];

        i71 = 0;

        i72 = 0;

        goto label016;

     label007:
        r247 = (java.lang.String[]) null;

        $r209 = r0[i72];

        $r210 = virtualinvoke $r209.<java.lang.String: java.lang.String trim()>();

        $z106 = virtualinvoke $r210.<java.lang.String: boolean startsWith(java.lang.String)>("@");

        if $z106 == 0 goto label013;

     label008:
        $r276 = new java.io.LineNumberReader;

        $r275 = new java.io.StringReader;

        $r274 = new java.lang.String;

        $r273 = new java.io.File;

        $r217 = virtualinvoke $r210.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke $r273.<java.io.File: void <init>(java.lang.String)>($r217);

        $r218 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: char[] getFileCharContent(java.io.File,java.lang.String)>($r273, null);

        specialinvoke $r274.<java.lang.String: void <init>(char[])>($r218);

        specialinvoke $r275.<java.io.StringReader: void <init>(java.lang.String)>($r274);

        specialinvoke $r276.<java.io.LineNumberReader: void <init>(java.io.Reader)>($r275);

        $r277 = new java.lang.StringBuffer;

        specialinvoke $r277.<java.lang.StringBuffer: void <init>()>();

        goto label010;

     label009:
        $r220 = virtualinvoke $r248.<java.lang.String: java.lang.String trim()>();

        $z107 = virtualinvoke $r220.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z107 != 0 goto label010;

        $r221 = virtualinvoke $r277.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r220);

        virtualinvoke $r221.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

     label010:
        $r248 = virtualinvoke $r276.<java.io.LineNumberReader: java.lang.String readLine()>();

        if $r248 != null goto label009;

        $r222 = virtualinvoke $r277.<java.lang.StringBuffer: java.lang.String toString()>();

        r247 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] tokenize(java.lang.String)>($r222);

     label011:
        goto label013;

     label012:
        $r235 := @caughtexception;

        $r278 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r237 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidexpansionargumentname", $r210);

        specialinvoke $r278.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r237);

        throw $r278;

     label013:
        if r247 == null goto label014;

        i73 = lengthof r246;

        i74 = lengthof r247;

        $r212 = r246;

        $i62 = i73 + i74;

        $i63 = $i62 - 1;

        $r211 = newarray (java.lang.String)[$i63];

        r246 = $r211;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r212, 0, $r211, 0, i71);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r247, 0, $r211, i71, i74);

        i71 = i71 + i74;

        goto label015;

     label014:
        $i61 = i71;

        i71 = i71 + 1;

        r246[$i61] = $r210;

     label015:
        i72 = i72 + 1;

     label016:
        if i72 < i68 goto label007;

        $i90 = (int) -1;

        i65 = $i90;

        goto label020;

     label017:
        r246 = r0;

        i75 = 0;

        goto label019;

     label018:
        $r6 = r0[i75];

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        r0[i75] = $r7;

        i75 = i75 + 1;

     label019:
        if i75 < i68 goto label018;

     label020:
        $i64 = lengthof r246;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] expandedCommandLine> = r246;

        goto label203;

     label021:
        if r242 == null goto label022;

        $r279 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r180 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.unexpectedCustomEncoding", r245, r242);

        specialinvoke $r279.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r180);

        throw $r279;

     label022:
        r245 = r246[i65];

        tableswitch(b69)
        {
            case 0: goto label023;
            case 1: goto label171;
            case 2: goto label191;
            case 3: goto label168;
            case 4: goto label128;
            case 5: goto label143;
            case 6: goto label144;
            case 7: goto label152;
            case 8: goto label163;
            case 9: goto label172;
            case 10: goto label191;
            case 11: goto label147;
            case 12: goto label174;
            case 13: goto label173;
            case 14: goto label191;
            case 15: goto label178;
            case 16: goto label182;
            case 17: goto label184;
            case 18: goto label185;
            case 19: goto label186;
            case 20: goto label187;
            default: goto label191;
        };

     label023:
        $z36 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z36 == 0 goto label024;

        $r280 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r178 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r245);

        specialinvoke $r280.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r178);

        throw $r280;

     label024:
        $z37 = virtualinvoke r245.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z37 == 0 goto label030;

        $i52 = virtualinvoke r245.<java.lang.String: int indexOf(int)>(91);

        i76 = $i52 + 1;

        if i76 > 1 goto label025;

        $r281 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r176 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r245);

        specialinvoke $r281.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r176);

        throw $r281;

     label025:
        $i53 = virtualinvoke r245.<java.lang.String: int length()>();

        i77 = $i53 - 1;

        if i76 < 1 goto label030;

        if i76 >= i77 goto label029;

        $r171 = virtualinvoke r245.<java.lang.String: java.lang.String substring(int,int)>(i76, i77);

        r242 = $r171;

     label026:
        $r283 = new java.io.InputStreamReader;

        $r282 = new java.io.ByteArrayInputStream;

        $r173 = newarray (byte)[0];

        specialinvoke $r282.<java.io.ByteArrayInputStream: void <init>(byte[])>($r173);

        specialinvoke $r283.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r282, $r171);

     label027:
        goto label029;

     label028:
        $r232 := @caughtexception;

        $r284 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r234 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unsupportedEncoding", $r171);

        specialinvoke $r284.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r234);

        throw $r284;

     label029:
        $i54 = i76 - 1;

        r245 = virtualinvoke r245.<java.lang.String: java.lang.String substring(int,int)>(0, $i54);

     label030:
        $z115 = virtualinvoke r245.<java.lang.String: boolean endsWith(java.lang.String)>(".java");

        if $z115 == 0 goto label033;

        $r159 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        if $r159 != null goto label031;

        $i49 = $i64 - i65;

        $r168 = newarray (java.lang.String)[$i49];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames> = $r168;

        $i50 = $i64 - i65;

        $r169 = newarray (java.lang.String)[$i50];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings> = $r169;

        $i51 = $i64 - i65;

        $r170 = newarray (java.lang.String)[$i51];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths> = $r170;

        goto label032;

     label031:
        $r160 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $i42 = lengthof $r160;

        if i66 != $i42 goto label032;

        $r161 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        i78 = lengthof $r161;

        $r163 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $i43 = i78 + $i64;

        $i44 = $i43 - i65;

        $r162 = newarray (java.lang.String)[$i44];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames> = $r162;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r163, 0, $r162, 0, i78);

        $r165 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings>;

        $i45 = i78 + $i64;

        $i46 = $i45 - i65;

        $r164 = newarray (java.lang.String)[$i46];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings> = $r164;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r165, 0, $r164, 0, i78);

        $r167 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths>;

        $i47 = i78 + $i64;

        $i48 = $i47 - i65;

        $r166 = newarray (java.lang.String)[$i48];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths> = $r166;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r167, 0, $r166, 0, i78);

     label032:
        $r249 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r249[i66] = r245;

        $r250 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings>;

        $i79 = i66;

        i66 = i66 + 1;

        $r250[$i79] = r242;

        r242 = null;

        b69 = 0;

        goto label203;

     label033:
        $z38 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-log");

        if $z38 == 0 goto label035;

        $r156 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String log>;

        if $r156 == null goto label034;

        $r285 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r158 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateLog", r245);

        specialinvoke $r285.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r158);

        throw $r285;

     label034:
        b69 = 5;

        goto label203;

     label035:
        $z39 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-repeat");

        if $z39 == 0 goto label037;

        $i41 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        if $i41 <= 0 goto label036;

        $r286 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r155 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateRepeat", r245);

        specialinvoke $r286.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r155);

        throw $r286;

     label036:
        b69 = 6;

        goto label203;

     label037:
        $z40 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-maxProblems");

        if $z40 == 0 goto label039;

        $i40 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxProblems>;

        if $i40 <= 0 goto label038;

        $r287 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r153 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateMaxProblems", r245);

        specialinvoke $r287.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r153);

        throw $r287;

     label038:
        b69 = 11;

        goto label203;

     label039:
        $z41 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-source");

        if $z41 == 0 goto label040;

        b69 = 7;

        goto label203;

     label040:
        $z42 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-encoding");

        if $z42 == 0 goto label041;

        b69 = 8;

        goto label203;

     label041:
        $z43 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-1.3");

        if $z43 == 0 goto label043;

        if z123 == 0 goto label042;

        $r288 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r151 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateCompliance", r245);

        specialinvoke $r288.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r151);

        throw $r288;

     label042:
        z112 = 1;

        z127 = 1;

        z126 = 1;

        z125 = 1;

        z124 = 1;

        z123 = 1;

        z122 = 1;

        $r149 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r149.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.3");

        b69 = 0;

        goto label203;

     label043:
        $z44 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-1.4");

        if $z44 == 0 goto label045;

        if z127 == 0 goto label044;

        $r289 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r148 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateCompliance", r245);

        specialinvoke $r289.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r148);

        throw $r289;

     label044:
        z112 = 1;

        z127 = 1;

        z126 = 1;

        z125 = 1;

        z124 = 1;

        z123 = 1;

        z122 = 1;

        $r146 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r146.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.4");

        b69 = 0;

        goto label203;

     label045:
        $z45 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-1.5");

        if $z45 != 0 goto label046;

        $z46 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-5");

        if $z46 != 0 goto label046;

        $z47 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-5.0");

        if $z47 == 0 goto label048;

     label046:
        if z126 == 0 goto label047;

        $r290 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r83 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateCompliance", r245);

        specialinvoke $r290.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r83);

        throw $r290;

     label047:
        z112 = 1;

        z127 = 1;

        z126 = 1;

        z125 = 1;

        z124 = 1;

        z123 = 1;

        z122 = 1;

        $r81 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r81.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.5");

        b69 = 0;

        goto label203;

     label048:
        $z48 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-1.6");

        if $z48 != 0 goto label049;

        $z49 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-6");

        if $z49 != 0 goto label049;

        $z50 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-6.0");

        if $z50 == 0 goto label051;

     label049:
        if z122 == 0 goto label050;

        $r291 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r86 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateCompliance", r245);

        specialinvoke $r291.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r86);

        throw $r291;

     label050:
        z112 = 1;

        z127 = 1;

        z126 = 1;

        z125 = 1;

        z124 = 1;

        z123 = 1;

        z122 = 1;

        $r84 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r84.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.6");

        b69 = 0;

        goto label203;

     label051:
        $z51 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-1.7");

        if $z51 != 0 goto label052;

        $z52 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-7");

        if $z52 != 0 goto label052;

        $z53 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-7.0");

        if $z53 == 0 goto label054;

     label052:
        if z124 == 0 goto label053;

        $r292 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r89 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateCompliance", r245);

        specialinvoke $r292.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r89);

        throw $r292;

     label053:
        z112 = 1;

        z127 = 1;

        z126 = 1;

        z125 = 1;

        z124 = 1;

        z123 = 1;

        z122 = 1;

        $r87 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r87.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.7");

        b69 = 0;

        goto label203;

     label054:
        $z54 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-d");

        if $z54 == 0 goto label057;

        $r140 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String destinationPath>;

        if $r140 == null goto label056;

        $r293 = new java.lang.StringBuffer;

        specialinvoke $r293.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r293.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r245);

        $i38 = i65 + 1;

        if $i38 >= $i64 goto label055;

        virtualinvoke $r293.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $i39 = i65 + 1;

        $r145 = r246[$i39];

        virtualinvoke $r293.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r145);

     label055:
        $r294 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r143 = virtualinvoke $r293.<java.lang.StringBuffer: java.lang.String toString()>();

        $r144 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateOutputPath", $r143);

        specialinvoke $r294.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r144);

        throw $r294;

     label056:
        b69 = 3;

        goto label203;

     label057:
        $z55 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-classpath");

        if $z55 != 0 goto label058;

        $z56 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-cp");

        if $z56 == 0 goto label059;

     label058:
        b69 = 1;

        goto label203;

     label059:
        $z57 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-bootclasspath");

        if $z57 == 0 goto label062;

        $i35 = virtualinvoke $r270.<java.util.ArrayList: int size()>();

        if $i35 <= 0 goto label061;

        $r295 = new java.lang.StringBuffer;

        specialinvoke $r295.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r295.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r245);

        $i36 = i65 + 1;

        if $i36 >= $i64 goto label060;

        virtualinvoke $r295.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $i37 = i65 + 1;

        $r139 = r246[$i37];

        virtualinvoke $r295.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r139);

     label060:
        $r296 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r137 = virtualinvoke $r295.<java.lang.StringBuffer: java.lang.String toString()>();

        $r138 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateBootClasspath", $r137);

        specialinvoke $r296.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r138);

        throw $r296;

     label061:
        b69 = 9;

        goto label203;

     label062:
        $z58 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-sourcepath");

        if $z58 == 0 goto label065;

        if r238 == null goto label064;

        $r297 = new java.lang.StringBuffer;

        specialinvoke $r297.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r297.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r245);

        $i33 = i65 + 1;

        if $i33 >= $i64 goto label063;

        virtualinvoke $r297.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $i34 = i65 + 1;

        $r134 = r246[$i34];

        virtualinvoke $r297.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r134);

     label063:
        $r298 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r132 = virtualinvoke $r297.<java.lang.StringBuffer: java.lang.String toString()>();

        $r133 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateSourcepath", $r132);

        specialinvoke $r298.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r133);

        throw $r298;

     label064:
        b69 = 13;

        goto label203;

     label065:
        $z59 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-extdirs");

        if $z59 == 0 goto label068;

        if r239 == null goto label067;

        $r299 = new java.lang.StringBuffer;

        specialinvoke $r299.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r299.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r245);

        $i31 = i65 + 1;

        if $i31 >= $i64 goto label066;

        virtualinvoke $r299.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $i32 = i65 + 1;

        $r129 = r246[$i32];

        virtualinvoke $r299.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r129);

     label066:
        $r300 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r127 = virtualinvoke $r299.<java.lang.StringBuffer: java.lang.String toString()>();

        $r128 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateExtDirs", $r127);

        specialinvoke $r300.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r128);

        throw $r300;

     label067:
        b69 = 12;

        goto label203;

     label068:
        $z60 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-endorseddirs");

        if $z60 == 0 goto label071;

        if r240 == null goto label070;

        $r301 = new java.lang.StringBuffer;

        specialinvoke $r301.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r301.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r245);

        $i29 = i65 + 1;

        if $i29 >= $i64 goto label069;

        virtualinvoke $r301.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $i30 = i65 + 1;

        $r124 = r246[$i30];

        virtualinvoke $r301.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

     label069:
        $r302 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r122 = virtualinvoke $r301.<java.lang.StringBuffer: java.lang.String toString()>();

        $r123 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateEndorsedDirs", $r122);

        specialinvoke $r302.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r123);

        throw $r302;

     label070:
        b69 = 15;

        goto label203;

     label071:
        $z61 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-progress");

        if $z61 == 0 goto label072;

        b69 = 0;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean showProgress> = 1;

        goto label203;

     label072:
        $z62 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-proceedOnError");

        if $z62 == 0 goto label073;

        b69 = 0;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceedOnError> = 1;

        goto label203;

     label073:
        $z63 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-time");

        if $z63 == 0 goto label074;

        b69 = 0;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int timing> = 1;

        goto label203;

     label074:
        $z64 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-time:detail");

        if $z64 == 0 goto label075;

        b69 = 0;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int timing> = 3;

        goto label203;

     label075:
        $z65 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-version");

        if $z65 != 0 goto label076;

        $z66 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-v");

        if $z66 == 0 goto label077;

     label076:
        $r90 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r90.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logVersion(boolean)>(1);

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceed> = 0;

        return;

     label077:
        $z67 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-showversion");

        if $z67 == 0 goto label078;

        z109 = 1;

        b69 = 0;

        goto label203;

     label078:
        $r91 = "-deprecation";

        $z68 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>(r245);

        if $z68 == 0 goto label079;

        z111 = 1;

        $r119 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r119.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", "warning");

        b69 = 0;

        goto label203;

     label079:
        $z69 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-help");

        if $z69 != 0 goto label080;

        $z70 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-?");

        if $z70 == 0 goto label081;

     label080:
        z108 = 1;

        b69 = 0;

        goto label203;

     label081:
        $z71 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-help:warn");

        if $z71 != 0 goto label082;

        $z72 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-?:warn");

        if $z72 == 0 goto label083;

     label082:
        z108 = 1;

        r241 = "misc.usage.warn";

        r269 = "misc.usage.warn";

        r268 = "misc.usage.warn";

        goto label203;

     label083:
        $z73 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-noExit");

        if $z73 == 0 goto label084;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean systemExitWhenFinished> = 0;

        b69 = 0;

        goto label203;

     label084:
        $z74 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-verbose");

        if $z74 == 0 goto label085;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean verbose> = 1;

        b69 = 0;

        goto label203;

     label085:
        $z75 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-referenceInfo");

        if $z75 == 0 goto label086;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean produceRefInfo> = 1;

        b69 = 0;

        goto label203;

     label086:
        $z76 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-inlineJSR");

        if $z76 == 0 goto label087;

        b69 = 0;

        $r118 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r118.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode", "enabled");

        goto label203;

     label087:
        $z77 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("-g");

        if $z77 == 0 goto label096;

        b69 = 0;

        r251 = r245;

        $i27 = virtualinvoke r245.<java.lang.String: int length()>();

        if $i27 != 2 goto label088;

        $r115 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "generate");

        $r116 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "generate");

        $r117 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r117.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "generate");

        goto label203;

     label088:
        if $i27 <= 3 goto label095;

        $r104 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r104.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "do not generate");

        $r105 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "do not generate");

        $r106 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "do not generate");

        if $i27 != 7 goto label089;

        $z100 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-g:none");

        if $z100 == 0 goto label089;

        goto label203;

     label089:
        $r303 = new java.util.StringTokenizer;

        $i28 = virtualinvoke r251.<java.lang.String: int length()>();

        $r108 = virtualinvoke r251.<java.lang.String: java.lang.String substring(int,int)>(3, $i28);

        specialinvoke $r303.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r108, ",");

        goto label094;

     label090:
        $r109 = virtualinvoke $r303.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z97 = virtualinvoke $r109.<java.lang.String: boolean equals(java.lang.Object)>("vars");

        if $z97 == 0 goto label091;

        $r114 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r114.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.localVariable", "generate");

        goto label094;

     label091:
        $z98 = virtualinvoke $r109.<java.lang.String: boolean equals(java.lang.Object)>("lines");

        if $z98 == 0 goto label092;

        $r113 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.lineNumber", "generate");

        goto label094;

     label092:
        $z99 = virtualinvoke $r109.<java.lang.String: boolean equals(java.lang.Object)>("source");

        if $z99 == 0 goto label093;

        $r112 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r112.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.debug.sourceFile", "generate");

        goto label094;

     label093:
        $r304 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r111 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidDebugOption", r251);

        specialinvoke $r304.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r111);

        throw $r304;

     label094:
        $z116 = virtualinvoke $r303.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z116 != 0 goto label090;

        goto label203;

     label095:
        $r305 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r103 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidDebugOption", r245);

        specialinvoke $r305.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r103);

        throw $r305;

     label096:
        $z78 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("-nowarn");

        if $z78 == 0 goto label097;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void disableWarnings()>();

        b69 = 0;

        goto label203;

     label097:
        $z79 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("-warn");

        if $z79 == 0 goto label112;

        b69 = 0;

        r252 = r245;

        $i24 = virtualinvoke r245.<java.lang.String: int length()>();

        if $i24 != 10 goto label098;

        $z96 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-warn:none");

        if $z96 == 0 goto label098;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void disableWarnings()>();

        goto label203;

     label098:
        if $i24 > 6 goto label099;

        $r306 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r101 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidWarningConfiguration", r252);

        specialinvoke $r306.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r101);

        throw $r306;

     label099:
        $c25 = virtualinvoke r252.<java.lang.String: char charAt(int)>(6);

        $i91 = (int) $c25;

        tableswitch($i91)
        {
            case 43: goto label100;
            case 44: goto label102;
            case 45: goto label101;
            default: goto label102;
        };

     label100:
        b80 = 7;

        z117 = 1;

        z118 = 1;

        z129 = 1;

        z128 = 1;

        goto label103;

     label101:
        b80 = 7;

        z117 = 0;

        z118 = 1;

        z129 = 1;

        z128 = 1;

        goto label103;

     label102:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void disableWarnings()>();

        b80 = 6;

        z117 = 1;

        z118 = 0;

        z129 = 0;

        z128 = 0;

     label103:
        $r307 = new java.util.StringTokenizer;

        $i81 = virtualinvoke r252.<java.lang.String: int length()>();

        $r254 = virtualinvoke r252.<java.lang.String: java.lang.String substring(int,int)>(b80, $i81);

        specialinvoke $r307.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r254, ",");

        i82 = 0;

        if z111 == 0 goto label110;

        $r99 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", "warning");

        goto label110;

     label104:
        $r96 = virtualinvoke $r307.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r255 = $r96;

        i82 = i82 + 1;

        $c26 = virtualinvoke $r96.<java.lang.String: char charAt(int)>(0);

        $i92 = (int) $c26;

        tableswitch($i92)
        {
            case 43: goto label105;
            case 44: goto label109;
            case 45: goto label107;
            default: goto label109;
        };

     label105:
        if z129 == 0 goto label106;

        z117 = 1;

        r255 = virtualinvoke $r96.<java.lang.String: java.lang.String substring(int)>(1);

        goto label109;

     label106:
        i82 = 0;

        goto label111;

     label107:
        if z128 == 0 goto label108;

        z117 = 0;

        r255 = virtualinvoke $r96.<java.lang.String: java.lang.String substring(int)>(1);

        goto label109;

     label108:
        i82 = 0;

        goto label111;

     label109:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void handleWarningToken(java.lang.String,boolean)>(r255, z117);

     label110:
        $z119 = virtualinvoke $r307.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z119 != 0 goto label104;

     label111:
        if i82 != 0 goto label203;

        $r308 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r98 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidWarningOption", r245);

        specialinvoke $r308.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r98);

        throw $r308;

     label112:
        $z80 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-target");

        if $z80 == 0 goto label113;

        b69 = 4;

        goto label203;

     label113:
        $z81 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-preserveAllLocals");

        if $z81 == 0 goto label114;

        $r95 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r95.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.unusedLocal", "preserve");

        b69 = 0;

        goto label203;

     label114:
        $z82 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-enableJavadoc");

        if $z82 == 0 goto label115;

        b69 = 0;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean enableJavadocOn> = 1;

        goto label203;

     label115:
        $z83 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-Xemacs");

        if $z83 == 0 goto label116;

        b69 = 0;

        $r94 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r94.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void setEmacs()>();

        goto label203;

     label116:
        $z84 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("-A");

        if $z84 == 0 goto label117;

        b69 = 0;

        goto label203;

     label117:
        $z85 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-processorpath");

        if $z85 == 0 goto label118;

        b69 = 17;

        goto label203;

     label118:
        $z86 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-processor");

        if $z86 == 0 goto label119;

        b69 = 18;

        goto label203;

     label119:
        $z87 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-proc:only");

        if $z87 == 0 goto label120;

        $r93 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r93.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.generateClassFiles", "disabled");

        b69 = 0;

        goto label203;

     label120:
        $z88 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-proc:none");

        if $z88 == 0 goto label121;

        z113 = 1;

        $r92 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r92.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.processAnnotations", "disabled");

        b69 = 0;

        goto label203;

     label121:
        $z89 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-s");

        if $z89 == 0 goto label122;

        b69 = 19;

        goto label203;

     label122:
        $z90 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-XprintProcessorInfo");

        if $z90 != 0 goto label123;

        $z91 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-XprintRounds");

        if $z91 == 0 goto label124;

     label123:
        b69 = 0;

        goto label203;

     label124:
        $z92 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("-X");

        if $z92 == 0 goto label125;

        b69 = 0;

        goto label203;

     label125:
        $z93 = virtualinvoke r245.<java.lang.String: boolean startsWith(java.lang.String)>("-J");

        if $z93 == 0 goto label126;

        b69 = 0;

        goto label203;

     label126:
        $z94 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-O");

        if $z94 == 0 goto label127;

        b69 = 0;

        goto label203;

     label127:
        $z95 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("-classNames");

        if $z95 == 0 goto label191;

        b69 = 20;

        goto label203;

     label128:
        $z19 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z19 == 0 goto label129;

        $r309 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r80 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateTarget", r245);

        specialinvoke $r309.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r80);

        throw $r309;

     label129:
        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget> = 1;

        $z20 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.1");

        if $z20 == 0 goto label130;

        $r78 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r78.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.1");

        goto label142;

     label130:
        $z21 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.2");

        if $z21 == 0 goto label131;

        $r77 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.2");

        goto label142;

     label131:
        $z22 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.3");

        if $z22 == 0 goto label132;

        $r76 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.3");

        goto label142;

     label132:
        $z23 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.4");

        if $z23 == 0 goto label133;

        $r75 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r75.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.4");

        goto label142;

     label133:
        $z24 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.5");

        if $z24 != 0 goto label134;

        $z25 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("5");

        if $z25 != 0 goto label134;

        $z26 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("5.0");

        if $z26 == 0 goto label135;

     label134:
        $r256 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r256.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.5");

        goto label142;

     label135:
        $z27 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.6");

        if $z27 != 0 goto label136;

        $z28 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("6");

        if $z28 != 0 goto label136;

        $z29 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("6.0");

        if $z29 == 0 goto label137;

     label136:
        $r257 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r257.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.6");

        goto label142;

     label137:
        $z30 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.7");

        if $z30 != 0 goto label138;

        $z31 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("7");

        if $z31 != 0 goto label138;

        $z32 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("7.0");

        if $z32 == 0 goto label139;

     label138:
        $r258 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r258.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.7");

        goto label142;

     label139:
        $z33 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("jsr14");

        if $z33 == 0 goto label140;

        $r74 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r74.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "jsr14");

        goto label142;

     label140:
        $z34 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("cldc1.1");

        if $z34 == 0 goto label141;

        $r72 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r72.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "cldc1.1");

        $r73 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode", "enabled");

        goto label142;

     label141:
        $r310 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r71 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.targetJDK", r245);

        specialinvoke $r310.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r71);

        throw $r310;

     label142:
        b69 = 0;

        goto label203;

     label143:
        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String log> = r245;

        b69 = 0;

        goto label203;

     label144:
        $i21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r245);

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition> = $i21;

        $i22 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        if $i22 > 0 goto label146;

        $r311 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r69 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.repetition", r245);

        specialinvoke $r311.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r69);

        throw $r311;

     label145:
        $r229 := @caughtexception;

        $r312 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r231 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.repetition", r245);

        specialinvoke $r312.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r231);

        throw $r312;

     label146:
        b69 = 0;

        goto label203;

     label147:
        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r245);

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxProblems> = $i18;

        $i19 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxProblems>;

        if $i19 > 0 goto label148;

        $r313 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r55 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.maxProblems", r245);

        specialinvoke $r313.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r55);

        throw $r313;

     label148:
        $r53 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.maxProblemPerUnit", r245);

     label149:
        goto label151;

     label150:
        $r226 := @caughtexception;

        $r314 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r228 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.maxProblems", r245);

        specialinvoke $r314.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r228);

        throw $r314;

     label151:
        b69 = 0;

        goto label203;

     label152:
        $z7 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z7 == 0 goto label153;

        $r315 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r67 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateSource", r245);

        specialinvoke $r315.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r67);

        throw $r315;

     label153:
        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource> = 1;

        $z8 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.3");

        if $z8 == 0 goto label154;

        $r65 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.3");

        goto label162;

     label154:
        $z9 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.4");

        if $z9 == 0 goto label155;

        $r64 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.4");

        goto label162;

     label155:
        $z10 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.5");

        if $z10 != 0 goto label156;

        $z11 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("5");

        if $z11 != 0 goto label156;

        $z12 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("5.0");

        if $z12 == 0 goto label157;

     label156:
        $r259 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r259.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.5");

        goto label162;

     label157:
        $z13 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.6");

        if $z13 != 0 goto label158;

        $z14 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("6");

        if $z14 != 0 goto label158;

        $z15 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("6.0");

        if $z15 == 0 goto label159;

     label158:
        $r260 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r260.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.6");

        goto label162;

     label159:
        $z16 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("1.7");

        if $z16 != 0 goto label160;

        $z17 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("7");

        if $z17 != 0 goto label160;

        $z18 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("7.0");

        if $z18 == 0 goto label161;

     label160:
        $r261 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r261.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.7");

        goto label162;

     label161:
        $r316 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r63 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.source", r245);

        specialinvoke $r316.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r63);

        throw $r316;

     label162:
        b69 = 0;

        goto label203;

     label163:
        if z110 == 0 goto label164;

        $r317 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r61 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateDefaultEncoding", r245);

        specialinvoke $r317.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r61);

        throw $r317;

     label164:
        $r319 = new java.io.InputStreamReader;

        $r318 = new java.io.ByteArrayInputStream;

        $r57 = newarray (byte)[0];

        specialinvoke $r318.<java.io.ByteArrayInputStream: void <init>(byte[])>($r57);

        specialinvoke $r319.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r318, r245);

     label165:
        goto label167;

     label166:
        $r223 := @caughtexception;

        $r320 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r225 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unsupportedEncoding", r245);

        specialinvoke $r320.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r225);

        throw $r320;

     label167:
        $r59 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.encoding", r245);

        z110 = 1;

        b69 = 0;

        goto label203;

     label168:
        $z35 = virtualinvoke r245.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z35 == 0 goto label169;

        $r262 = "none";

        goto label170;

     label169:
        $r262 = r245;

     label170:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void setDestinationPath(java.lang.String)>($r262);

        b69 = 0;

        goto label203;

     label171:
        b69 = 0;

        $i23 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: int processPaths(java.lang.String[],int,java.lang.String,java.util.ArrayList)>(r246, i65, r245, $r272);

        i65 = i65 + $i23;

        goto label203;

     label172:
        b69 = 0;

        $i20 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: int processPaths(java.lang.String[],int,java.lang.String,java.util.ArrayList)>(r246, i65, r245, $r270);

        i65 = i65 + $i20;

        goto label203;

     label173:
        b69 = 0;

        r263 = newarray (java.lang.String)[1];

        $i16 = specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: int processPaths(java.lang.String[],int,java.lang.String,java.lang.String[])>(r246, i65, r245, r263);

        i65 = i65 + $i16;

        r238 = r263[0];

        goto label203;

     label174:
        $i17 = virtualinvoke r245.<java.lang.String: int indexOf(java.lang.String)>("[-d");

        $i94 = (int) -1;

        if $i17 == $i94 goto label175;

        $r321 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r52 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedDestinationPathEntry", "-extdir");

        specialinvoke $r321.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r52);

        throw $r321;

     label175:
        $r322 = new java.util.StringTokenizer;

        $r48 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r322.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r245, $r48, 0);

        $r323 = new java.util.ArrayList;

        specialinvoke $r323.<java.util.ArrayList: void <init>(int)>(4);

        r239 = $r323;

        goto label177;

     label176:
        $r50 = virtualinvoke $r322.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r323.<java.util.ArrayList: boolean add(java.lang.Object)>($r50);

     label177:
        $z6 = virtualinvoke $r322.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z6 != 0 goto label176;

        b69 = 0;

        goto label203;

     label178:
        $i15 = virtualinvoke r245.<java.lang.String: int indexOf(java.lang.String)>("[-d");

        $i96 = (int) -1;

        if $i15 == $i96 goto label179;

        $r324 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r46 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedDestinationPathEntry", "-endorseddirs");

        specialinvoke $r324.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r46);

        throw $r324;

     label179:
        $r325 = new java.util.StringTokenizer;

        $r42 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r325.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r245, $r42, 0);

        $r326 = new java.util.ArrayList;

        specialinvoke $r326.<java.util.ArrayList: void <init>(int)>(4);

        r240 = $r326;

        goto label181;

     label180:
        $r44 = virtualinvoke $r325.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r326.<java.util.ArrayList: boolean add(java.lang.Object)>($r44);

     label181:
        $z5 = virtualinvoke $r325.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 != 0 goto label180;

        b69 = 0;

        goto label203;

     label182:
        $z1 = virtualinvoke r245.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z1 == 0 goto label183;

        $i4 = virtualinvoke r245.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        r243 = virtualinvoke r245.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        goto label191;

     label183:
        $r328 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r327 = new java.lang.StringBuffer;

        specialinvoke $r327.<java.lang.StringBuffer: void <init>(java.lang.String)>("[-d ");

        $r18 = virtualinvoke $r327.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r245);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $r20 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectDestinationPathEntry", $r19);

        specialinvoke $r328.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r20);

        throw $r328;

     label184:
        b69 = 0;

        goto label203;

     label185:
        b69 = 0;

        goto label203;

     label186:
        b69 = 0;

        goto label203;

     label187:
        $r329 = new java.util.StringTokenizer;

        specialinvoke $r329.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r245, ",");

        $r9 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        if $r9 != null goto label190;

        $r15 = newarray (java.lang.String)[4];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames> = $r15;

        goto label190;

     label188:
        $r10 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        $i1 = lengthof $r10;

        if $i1 != i67 goto label189;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        $i3 = i67 * 2;

        $r13 = newarray (java.lang.String)[$i3];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames> = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, $r13, 0, i67);

     label189:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        $i2 = i67;

        i67 = i67 + 1;

        $r12 = virtualinvoke $r329.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r11[$i2] = $r12;

     label190:
        $z120 = virtualinvoke $r329.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z120 != 0 goto label188;

        b69 = 0;

        goto label203;

     label191:
        if r243 != null goto label194;

        $c11 = <java.io.File: char separatorChar>;

        $i97 = (int) $c11;

        if $i97 == 47 goto label192;

        $c14 = <java.io.File: char separatorChar>;

        r245 = virtualinvoke r245.<java.lang.String: java.lang.String replace(char,char)>(47, $c14);

     label192:
        $z4 = virtualinvoke r245.<java.lang.String: boolean endsWith(java.lang.String)>("[-d");

        if $z4 == 0 goto label193;

        $i12 = virtualinvoke r245.<java.lang.String: int length()>();

        $i13 = $i12 - 3;

        r244 = virtualinvoke r245.<java.lang.String: java.lang.String substring(int,int)>(0, $i13);

        b69 = 16;

        goto label203;

     label193:
        r244 = r245;

     label194:
        $r330 = new java.io.File;

        specialinvoke $r330.<java.io.File: void <init>(java.lang.String)>(r244);

        $z2 = virtualinvoke $r330.<java.io.File: boolean isDirectory()>();

        if $z2 != 0 goto label195;

        $r331 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r40 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unrecognizedOption", r244);

        specialinvoke $r331.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r40);

        throw $r331;

     label195:
        $r22 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileFinder: java.lang.String[] find(java.io.File,java.lang.String)>($r330, ".JAVA");

        $r23 = "none";

        $z3 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r243);

        if $z3 == 0 goto label196;

        r243 = "none";

     label196:
        $r24 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        if $r24 == null goto label199;

        i83 = lengthof $r22;

        $r31 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $i6 = i83 + i66;

        $r30 = newarray (java.lang.String)[$i6];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames> = $r30;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r31, 0, $r30, 0, i66);

        $r33 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings>;

        $i7 = i83 + i66;

        $r32 = newarray (java.lang.String)[$i7];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings> = $r32;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r33, 0, $r32, 0, i66);

        $r35 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths>;

        $i8 = i83 + i66;

        $r34 = newarray (java.lang.String)[$i8];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths> = $r34;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r35, 0, $r34, 0, i66);

        $r36 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, $r36, i66, i83);

        i84 = 0;

        goto label198;

     label197:
        $r37 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings>;

        $i9 = i66 + i84;

        $r37[$i9] = r242;

        $r38 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths>;

        $i10 = i66 + i84;

        $r38[$i10] = r243;

        i84 = i84 + 1;

     label198:
        if i84 < i83 goto label197;

        i66 = i66 + i83;

        r242 = null;

        r243 = null;

        r244 = null;

        goto label202;

     label199:
        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames> = $r22;

        $r25 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        i66 = lengthof $r25;

        $r26 = newarray (java.lang.String)[i66];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings> = $r26;

        $r27 = newarray (java.lang.String)[i66];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths> = $r27;

        i85 = 0;

        goto label201;

     label200:
        $r28 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings>;

        $r28[i85] = r242;

        $r29 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths>;

        $r29[i85] = r243;

        i85 = i85 + 1;

     label201:
        if i85 < i66 goto label200;

        r242 = null;

        r243 = null;

        r244 = null;

     label202:
        b69 = 0;

     label203:
        i65 = i65 + 1;

        if i65 < $i64 goto label021;

        $z101 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean enableJavadocOn>;

        if $z101 == 0 goto label204;

        $r208 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r208.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.doc.comment.support", "enabled");

        goto label206;

     label204:
        $z102 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnJavadocOn>;

        if $z102 != 0 goto label205;

        $z105 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnAllJavadocOn>;

        if $z105 == 0 goto label206;

     label205:
        $r181 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r181.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.doc.comment.support", "enabled");

        $r182 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r182.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference", "disabled");

        $r183 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r183.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference", "disabled");

     label206:
        $z121 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnJavadocOn>;

        if $z121 == 0 goto label207;

        $r202 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r202.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadoc", "warning");

        $r203 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r203.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTags", "enabled");

        $r204 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r204.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef", "enabled");

        $r205 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r205.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef", "enabled");

        $r206 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r206.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTags", "warning");

        $r207 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r207.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility", "private");

     label207:
        $z103 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnAllJavadocOn>;

        if $z103 == 0 goto label208;

        $r201 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r201.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingJavadocComments", "warning");

     label208:
        if z108 != 0 goto label209;

        if i66 != 0 goto label212;

        if i67 != 0 goto label212;

     label209:
        if r268 != null goto label210;

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void printUsage()>();

        goto label211;

     label210:
        specialinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void printUsage(java.lang.String)>(r269);

     label211:
        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceed> = 0;

        return;

     label212:
        $r184 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String log>;

        if $r184 == null goto label213;

        $r200 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        $r199 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String log>;

        virtualinvoke $r200.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void setLog(java.lang.String)>($r199);

        goto label214;

     label213:
        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean showProgress> = 0;

     label214:
        $r185 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r185.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logVersion(boolean)>(z109);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void validateOptions(boolean)>(z125);

        if z113 != 0 goto label215;

        $r196 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r197 = interfaceinvoke $r196.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $l59 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r197);

        $b60 = $l59 cmp 3276800L;

        $i98 = (int) $b60;

        if $i98 < 0 goto label215;

        $r198 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r198.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.processAnnotations", "enabled");

     label215:
        $r264 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r264.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logCommandLineArguments(java.lang.String[])>(r246);

        $r265 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        $r266 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        virtualinvoke $r265.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logOptions(java.util.Map)>($r266);

        $i86 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        if $i86 != 0 goto label216;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition> = 1;

     label216:
        $i55 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        if $i55 < 3 goto label217;

        $i56 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int timing>;

        $i57 = $i56 & 1;

        if $i57 == 0 goto label217;

        $i58 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        $r195 = newarray (org.eclipse.jdt.internal.compiler.impl.CompilerStats)[$i58];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats> = $r195;

     label217:
        if i66 == 0 goto label218;

        $r194 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r193 = newarray (java.lang.String)[i66];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames> = $r193;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r194, 0, $r193, 0, i66);

     label218:
        if i67 == 0 goto label219;

        $r192 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        $r191 = newarray (java.lang.String)[i67];

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames> = $r191;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r192, 0, $r191, 0, i67);

     label219:
        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void setPaths(java.util.ArrayList,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.String)>($r270, r238, $r271, $r272, r239, r240, r242);

        $r186 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList pendingErrors>;

        if $r186 == null goto label222;

        $r187 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList pendingErrors>;

        $r188 = virtualinvoke $r187.<java.util.ArrayList: java.util.Iterator iterator()>();

        goto label221;

     label220:
        $r189 = interfaceinvoke $r188.<java.util.Iterator: java.lang.Object next()>();

        r267 = (java.lang.String) $r189;

        $r190 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r190.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logPendingError(java.lang.String)>(r267);

     label221:
        $z104 = interfaceinvoke $r188.<java.util.Iterator: boolean hasNext()>();

        if $z104 != 0 goto label220;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList pendingErrors> = null;

     label222:
        return;

        catch java.io.IOException from label008 to label011 with label012;
        catch java.io.UnsupportedEncodingException from label026 to label027 with label028;
        catch java.lang.NumberFormatException from label144 to label145 with label145;
        catch java.lang.NumberFormatException from label147 to label149 with label150;
        catch java.io.UnsupportedEncodingException from label164 to label165 with label166;
    }

    protected void disableWarnings()
    {
        java.lang.Object[] $r3;
        java.util.Map $r1, $r10, $r13;
        int i0, i1;
        java.lang.String $r9, $r12;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r5;
        java.util.Set $r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.Object $r4, $r6, $r7, $r8, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>();

        i1 = 0;

        i0 = lengthof $r3;

        goto label5;

     label1:
        $r4 = $r3[i1];

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z0 = $r6 instanceof java.lang.String;

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r7 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = $r7 instanceof java.lang.String;

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.lang.String) $r8;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("warning");

        if $z2 == 0 goto label4;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, "ignore");

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < i0 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r12 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.taskTags", $r12);

        return;
    }

    public java.lang.String extractDestinationPathFromSourceFile(org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        char $c0;
        org.eclipse.jdt.internal.compiler.batch.Main r5;
        java.io.File $r8;
        int $i1, $i3;
        char[] $r2;
        java.lang.String $r6, $r7;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit r1;
        boolean $z0, $z1;

        r5 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.CompilationResult;

        r1 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit>;

        if r1 == null goto label1;

        $r2 = interfaceinvoke r1.<org.eclipse.jdt.internal.compiler.env.ICompilationUnit: char[] getFileName()>();

        $c0 = <java.io.File: char separatorChar>;

        $i1 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: int lastIndexOf(char,char[])>($c0, $r2);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i1);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r7);

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r8.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        return $r7;

     label1:
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        return $r6;
    }

    public org.eclipse.jdt.internal.compiler.ICompilerRequestor getBatchRequestor()
    {
        org.eclipse.jdt.internal.compiler.batch.Main$3 $r0;
        org.eclipse.jdt.internal.compiler.batch.Main r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main$3;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main$3: void <init>(org.eclipse.jdt.internal.compiler.batch.Main)>(r1);

        return $r0;
    }

    public org.eclipse.jdt.internal.compiler.batch.CompilationUnit[] getCompilationUnits() throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.util.Map $r4;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String[] $r1, $r7, $r12, $r14, $r16, $r17, $r21, $r25;
        int i0, i1;
        java.lang.String $r6, $r8, $r13, $r18, $r19, $r22, $r23, $r26, $r27, r28, r29;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r15;
        org.eclipse.jdt.core.compiler.InvalidInputException $r20, $r24;
        org.eclipse.jdt.internal.compiler.util.HashtableOfObject $r3;
        java.io.File $r11;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit[] r2;
        char[] $r9;
        java.lang.Object $r5, $r10;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        i0 = lengthof $r1;

        r2 = newarray (org.eclipse.jdt.internal.compiler.batch.CompilationUnit)[i0];

        $r3 = new org.eclipse.jdt.internal.compiler.util.HashtableOfObject;

        specialinvoke $r3.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: void <init>(int)>(i0);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.encoding");

        r28 = (java.lang.String) $r5;

        $r6 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r28);

        if $z0 == 0 goto label1;

        r28 = null;

     label1:
        i1 = 0;

        goto label6;

     label2:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r8 = $r7[i1];

        $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>();

        $r10 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object get(char[])>($r9);

        if $r10 == null goto label3;

        $r24 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r25 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r26 = $r25[i1];

        $r27 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("unit.more", $r26);

        specialinvoke $r24.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r27);

        throw $r24;

     label3:
        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.util.HashtableOfObject: java.lang.Object put(char[],java.lang.Object)>($r9, $r9);

        $r11 = new java.io.File;

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r13 = $r12[i1];

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r13);

        $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        $r20 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r22 = $r21[i1];

        $r23 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("unit.missing", $r22);

        specialinvoke $r20.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label4:
        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] encodings>;

        r29 = $r14[i1];

        if r29 != null goto label5;

        r29 = r28;

     label5:
        $r15 = new org.eclipse.jdt.internal.compiler.batch.CompilationUnit;

        $r16 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        $r19 = $r16[i1];

        $r17 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] destinationPaths>;

        $r18 = $r17[i1];

        specialinvoke $r15.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: void <init>(char[],java.lang.String,java.lang.String,java.lang.String)>(null, $r19, r29, $r18);

        r2[i1] = $r15;

        i1 = i1 + 1;

     label6:
        if i1 < i0 goto label2;

        return r2;
    }

    public org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy getHandlingPolicy()
    {
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        org.eclipse.jdt.internal.compiler.batch.Main$4 $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.Main$4;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.Main$4: void <init>(org.eclipse.jdt.internal.compiler.batch.Main)>(r1);

        return $r0;
    }

    public java.io.File getJavaHome()
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String $r1;
        java.io.File $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $z0 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean javaHomeChecked>;

        if $z0 != 0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean javaHomeChecked> = 1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        if $r1 == null goto label1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r1);

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File javaHomeCache> = $r2;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File javaHomeCache>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File javaHomeCache> = null;

     label1:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File javaHomeCache>;

        return $r4;
    }

    public org.eclipse.jdt.internal.compiler.batch.FileSystem getLibraryAccess()
    {
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r3;
        java.lang.String[] $r2;
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        org.eclipse.jdt.internal.compiler.batch.FileSystem $r0;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r0 = new org.eclipse.jdt.internal.compiler.batch.FileSystem;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] checkedClasspaths>;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] filenames>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.batch.FileSystem: void <init>(org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[],java.lang.String[])>($r3, $r2);

        return $r0;
    }

    public org.eclipse.jdt.internal.compiler.IProblemFactory getProblemFactory()
    {
        org.eclipse.jdt.internal.compiler.batch.Main r1;
        org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory $r0;
        java.util.Locale $r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r0 = new org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Locale compilerLocale>;

        specialinvoke $r0.<org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory: void <init>(java.util.Locale)>($r2);

        return $r0;
    }

    protected java.util.ArrayList handleBootclasspath(java.util.ArrayList, java.lang.String) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.batch.Main r4;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r21;
        java.io.File[][] $r9;
        java.lang.String[] r24;
        java.util.ArrayList $r0, r23;
        java.util.StringTokenizer $r16;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String $r1, $r2, $r3, $r6, $r12, $r17, $r18, r19, $r22, r25;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r13, $r20;
        java.io.File $r5, $r8, $r11, $r15;
        java.io.File[] $r7, r10, $r14, r26;

        r4 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r23 := @parameter0: java.util.ArrayList;

        r19 := @parameter1: java.lang.String;

        if r23 != null goto label01;

        $i6 = 0;

        goto label02;

     label01:
        $i6 = virtualinvoke r23.<java.util.ArrayList: int size()>();

     label02:
        i0 = $i6;

        if $i6 == 0 goto label05;

        r24 = newarray (java.lang.String)[$i6];

        virtualinvoke r23.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r24);

        virtualinvoke r23.<java.util.ArrayList: void clear()>();

        i7 = 0;

        goto label04;

     label03:
        $r22 = r24[i7];

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: void processPathEntries(int,java.util.ArrayList,java.lang.String,java.lang.String,boolean,boolean)>(4, r23, $r22, r19, 0, 1);

        i7 = i7 + 1;

     label04:
        if i7 < i0 goto label03;

        goto label21;

     label05:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4);

        r23 = $r0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        if $r1 == null goto label06;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("1.1.8");

        if $z1 == 0 goto label06;

        $r21 = r4.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r21.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logWrongJDK()>();

        r4.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceed> = 0;

        return null;

     label06:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("sun.boot.class.path");

        r25 = $r2;

        if $r2 == null goto label07;

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i5 != 0 goto label09;

     label07:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vm.boot.class.path");

        r25 = $r3;

        if $r3 == null goto label08;

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i4 != 0 goto label09;

     label08:
        r25 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.harmony.boot.class.path");

     label09:
        if r25 == null goto label12;

        $i3 = virtualinvoke r25.<java.lang.String: int length()>();

        if $i3 == 0 goto label12;

        $r16 = new java.util.StringTokenizer;

        $r17 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r16.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r25, $r17);

        goto label11;

     label10:
        $r18 = virtualinvoke $r16.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r20 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>($r18, r19, null);

        if $r20 == null goto label11;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

     label11:
        $z2 = virtualinvoke $r16.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 != 0 goto label10;

        goto label21;

     label12:
        $r5 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File getJavaHome()>();

        if $r5 == null goto label21;

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("Mac");

        if $z0 == 0 goto label13;

        $r14 = newarray (java.io.File)[1];

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "../Classes");

        $r14[0] = $r15;

        r26 = $r14;

        goto label14;

     label13:
        $r7 = newarray (java.io.File)[1];

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "lib");

        $r7[0] = $r8;

        r26 = $r7;

     label14:
        $r9 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main: java.io.File[][] getLibrariesFiles(java.io.File[])>(r26);

        if $r9 == null goto label21;

        i8 = 0;

        i1 = lengthof $r9;

        goto label20;

     label15:
        r10 = $r9[i8];

        if r10 == null goto label19;

        i9 = 0;

        i2 = lengthof r10;

        goto label18;

     label16:
        $r11 = r10[i9];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,boolean,org.eclipse.jdt.internal.compiler.env.AccessRuleSet,java.lang.String)>($r12, null, 0, null, null);

        if $r13 == null goto label17;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label17:
        i9 = i9 + 1;

     label18:
        if i9 < i2 goto label16;

     label19:
        i8 = i8 + 1;

     label20:
        if i8 < i1 goto label15;

     label21:
        return r23;
    }

    protected java.util.ArrayList handleClasspath(java.util.ArrayList, java.lang.String) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.lang.String[] r18;
        java.util.HashMap $r20;
        java.util.ArrayList $r0, r17, $r19;
        java.util.StringTokenizer $r11;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String $r1, $r3, $r4, r5, $r8, $r12, $r13, $r15, $r16;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r6, $r14, r22;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.batch.Main r2;
        java.util.List $r10;
        java.lang.Object $r7, $r9;
        org.eclipse.jdt.internal.compiler.batch.Main$5 $r21;

        r2 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r17 := @parameter0: java.util.ArrayList;

        r5 := @parameter1: java.lang.String;

        if r17 != null goto label01;

        $i3 = 0;

        goto label02;

     label01:
        $i3 = virtualinvoke r17.<java.util.ArrayList: int size()>();

     label02:
        i0 = $i3;

        if $i3 == 0 goto label05;

        r18 = newarray (java.lang.String)[$i3];

        virtualinvoke r17.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r18);

        virtualinvoke r17.<java.util.ArrayList: void clear()>();

        i4 = 0;

        goto label04;

     label03:
        $r16 = r18[i4];

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main: void processPathEntries(int,java.util.ArrayList,java.lang.String,java.lang.String,boolean,boolean)>(4, r17, $r16, r5, 0, 1);

        i4 = i4 + 1;

     label04:
        if i4 < i0 goto label03;

        goto label11;

     label05:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4);

        r17 = $r0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        if $r1 == null goto label06;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label07;

     label06:
        $r3 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("configure.noClasspath");

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r3);

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $r6 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>($r4, r5, null);

        if $r6 == null goto label11;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label11;

     label07:
        $r11 = new java.util.StringTokenizer;

        $r12 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, $r12);

        goto label10;

     label08:
        $r13 = virtualinvoke $r11.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r14 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>($r13, r5, null);

        if $r14 == null goto label09;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        goto label10;

     label09:
        $i2 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i2 == 0 goto label10;

        $r15 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectClasspath", $r13);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r15);

     label10:
        $z0 = virtualinvoke $r11.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label08;

     label11:
        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        $r21 = new org.eclipse.jdt.internal.compiler.batch.Main$5;

        specialinvoke $r21.<org.eclipse.jdt.internal.compiler.batch.Main$5: void <init>(org.eclipse.jdt.internal.compiler.batch.Main)>(r2);

        goto label13;

     label12:
        $r7 = virtualinvoke r17.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        r22 = (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath) $r7;

        $r8 = interfaceinvoke r22.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: java.lang.String getPath()>();

        $r9 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        if $r9 != null goto label13;

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r22);

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r22);

        $r10 = interfaceinvoke r22.<org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath: java.util.List fetchLinkedJars(org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathSectionProblemReporter)>($r21);

        if $r10 == null goto label13;

        virtualinvoke r17.<java.util.ArrayList: boolean addAll(int,java.util.Collection)>(0, $r10);

     label13:
        $z1 = virtualinvoke r17.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label12;

        return $r19;
    }

    protected java.util.ArrayList handleEndorseddirs(java.util.ArrayList)
    {
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.io.File[][] $r5;
        java.util.ArrayList $r14, r24;
        java.util.StringTokenizer $r16;
        java.lang.StringBuffer $r19, $r22;
        int $i0, $i1, i2, i3, $i4, i5, i6, i7;
        java.lang.String $r4, $r9, $r10, $r12, $r15, $r17, $r18, $r20, $r21, $r23;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r13;
        java.io.File $r1, $r2, $r7, $r8, $r11;
        java.lang.Object $r3;
        java.io.File[] r6, r25;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r24 := @parameter0: java.util.ArrayList;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File getJavaHome()>();

        if r24 != null goto label04;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(4);

        r24 = $r14;

        $r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.endorsed.dirs");

        if $r15 != null goto label01;

        if $r1 == null goto label04;

        $r19 = new java.lang.StringBuffer;

        $r20 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/lib/endorsed");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        goto label04;

     label01:
        $r16 = new java.util.StringTokenizer;

        $r17 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r16.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r15, $r17);

        goto label03;

     label02:
        $r18 = virtualinvoke $r16.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

     label03:
        $z1 = virtualinvoke $r16.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label02;

     label04:
        $i4 = virtualinvoke r24.<java.util.ArrayList: int size()>();

        if $i4 == 0 goto label14;

        $i0 = virtualinvoke r24.<java.util.ArrayList: int size()>();

        r25 = newarray (java.io.File)[$i0];

        i5 = 0;

        goto label06;

     label05:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r24.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r4 = (java.lang.String) $r3;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);

        r25[i5] = $r2;

        i5 = i5 + 1;

     label06:
        $i1 = lengthof r25;

        if i5 < $i1 goto label05;

        virtualinvoke r24.<java.util.ArrayList: void clear()>();

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main: java.io.File[][] getLibrariesFiles(java.io.File[])>(r25);

        if $r5 == null goto label14;

        i6 = 0;

        i2 = lengthof $r5;

        goto label13;

     label07:
        r6 = $r5[i6];

        if r6 == null goto label11;

        i7 = 0;

        i3 = lengthof r6;

        goto label10;

     label08:
        $r11 = r6[i7];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>($r12, null, null);

        if $r13 == null goto label09;

        virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label09:
        i7 = i7 + 1;

     label10:
        if i7 < i3 goto label08;

        goto label12;

     label11:
        $r7 = r25[i6];

        $z0 = virtualinvoke $r7.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label12;

        $r8 = r25[i6];

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectEndorsedDirsEntry", $r9);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r10);

     label12:
        i6 = i6 + 1;

     label13:
        if i6 < i2 goto label07;

     label14:
        return r24;
    }

    protected java.util.ArrayList handleExtdirs(java.util.ArrayList)
    {
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.io.File[][] $r5;
        java.util.ArrayList $r14, r24;
        java.util.StringTokenizer $r16;
        java.lang.StringBuffer $r19, $r22;
        int $i0, $i1, i2, i3, $i4, i5, i6, i7;
        java.lang.String $r4, $r9, $r10, $r12, $r15, $r17, $r18, $r20, $r21, $r23;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath $r13;
        java.io.File $r1, $r2, $r7, $r8, $r11;
        java.lang.Object $r3;
        java.io.File[] r6, r25;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r24 := @parameter0: java.util.ArrayList;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.File getJavaHome()>();

        if r24 != null goto label04;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>(4);

        r24 = $r14;

        $r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dirs");

        if $r15 != null goto label01;

        $r19 = new java.lang.StringBuffer;

        $r20 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>($r21);

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/lib/ext");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        goto label04;

     label01:
        $r16 = new java.util.StringTokenizer;

        $r17 = <java.io.File: java.lang.String pathSeparator>;

        specialinvoke $r16.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r15, $r17);

        goto label03;

     label02:
        $r18 = virtualinvoke $r16.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

     label03:
        $z1 = virtualinvoke $r16.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 != 0 goto label02;

     label04:
        $i4 = virtualinvoke r24.<java.util.ArrayList: int size()>();

        if $i4 == 0 goto label14;

        $i0 = virtualinvoke r24.<java.util.ArrayList: int size()>();

        r25 = newarray (java.io.File)[$i0];

        i5 = 0;

        goto label06;

     label05:
        $r2 = new java.io.File;

        $r3 = virtualinvoke r24.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r4 = (java.lang.String) $r3;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);

        r25[i5] = $r2;

        i5 = i5 + 1;

     label06:
        $i1 = lengthof r25;

        if i5 < $i1 goto label05;

        virtualinvoke r24.<java.util.ArrayList: void clear()>();

        $r5 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main: java.io.File[][] getLibrariesFiles(java.io.File[])>(r25);

        if $r5 == null goto label14;

        i6 = 0;

        i2 = lengthof $r5;

        goto label13;

     label07:
        r6 = $r5[i6];

        if r6 == null goto label11;

        i7 = 0;

        i3 = lengthof r6;

        goto label10;

     label08:
        $r11 = r6[i7];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath getClasspath(java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.env.AccessRuleSet)>($r12, null, null);

        if $r13 == null goto label09;

        virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label09:
        i7 = i7 + 1;

     label10:
        if i7 < i3 goto label08;

        goto label12;

     label11:
        $r7 = r25[i6];

        $z0 = virtualinvoke $r7.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label12;

        $r8 = r25[i6];

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectExtDirsEntry", $r9);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r10);

     label12:
        i6 = i6 + 1;

     label13:
        if i6 < i2 goto label07;

     label14:
        return r24;
    }

    protected void handleWarningToken(java.lang.String, boolean) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.util.Map $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r13, $r55, $r56, $r57, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r141, $r142, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r151;
        org.eclipse.jdt.core.compiler.InvalidInputException $r54;
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68;
        org.eclipse.jdt.internal.compiler.batch.Main r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r0 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("constructorName");

        if $z0 == 0 goto label003;

        $r84 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label001;

        $r85 = "warning";

        goto label002;

     label001:
        $r85 = "ignore";

     label002:
        interfaceinvoke $r84.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.methodWithConstructorName", $r85);

        goto label205;

     label003:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("pkgDefaultMethod");

        if $z1 != 0 goto label004;

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("packageDefaultMethod");

        if $z3 == 0 goto label007;

     label004:
        $r2 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label005;

        $r86 = "warning";

        goto label006;

     label005:
        $r86 = "ignore";

     label006:
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod", $r86);

        goto label205;

     label007:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("maskedCatchBlock");

        if $z4 != 0 goto label008;

        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("maskedCatchBlocks");

        if $z5 == 0 goto label011;

     label008:
        $r3 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label009;

        $r87 = "warning";

        goto label010;

     label009:
        $r87 = "ignore";

     label010:
        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock", $r87);

        goto label205;

     label011:
        $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("deprecation");

        if $z6 == 0 goto label014;

        $r81 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label012;

        $r88 = "warning";

        goto label013;

     label012:
        $r88 = "ignore";

     label013:
        interfaceinvoke $r81.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", $r88);

        $r82 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r82.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", "disabled");

        $r83 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r83.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", "disabled");

        goto label205;

     label014:
        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("allDeprecation");

        if $z7 == 0 goto label021;

        $r78 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label015;

        $r89 = "warning";

        goto label016;

     label015:
        $r89 = "ignore";

     label016:
        interfaceinvoke $r78.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecation", $r89);

        $r79 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label017;

        $r90 = "enabled";

        goto label018;

     label017:
        $r90 = "disabled";

     label018:
        interfaceinvoke $r79.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode", $r90);

        $r80 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label019;

        $r91 = "enabled";

        goto label020;

     label019:
        $r91 = "disabled";

     label020:
        interfaceinvoke $r80.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod", $r91);

        goto label205;

     label021:
        $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedLocal");

        if $z8 != 0 goto label022;

        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedLocals");

        if $z9 == 0 goto label025;

     label022:
        $r4 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label023;

        $r92 = "warning";

        goto label024;

     label023:
        $r92 = "ignore";

     label024:
        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLocal", $r92);

        goto label205;

     label025:
        $z10 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedArgument");

        if $z10 != 0 goto label026;

        $z11 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedArguments");

        if $z11 == 0 goto label029;

     label026:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label027;

        $r93 = "warning";

        goto label028;

     label027:
        $r93 = "ignore";

     label028:
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameter", $r93);

        goto label205;

     label029:
        $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedImport");

        if $z12 != 0 goto label030;

        $z13 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedImports");

        if $z13 == 0 goto label033;

     label030:
        $r6 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label031;

        $r94 = "warning";

        goto label032;

     label031:
        $r94 = "ignore";

     label032:
        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedImport", $r94);

        goto label205;

     label033:
        $z14 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedPrivate");

        if $z14 == 0 goto label036;

        $r77 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label034;

        $r95 = "warning";

        goto label035;

     label034:
        $r95 = "ignore";

     label035:
        interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedPrivateMember", $r95);

        goto label205;

     label036:
        $z15 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedLabel");

        if $z15 == 0 goto label039;

        $r76 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label037;

        $r96 = "warning";

        goto label038;

     label037:
        $r96 = "ignore";

     label038:
        interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLabel", $r96);

        goto label205;

     label039:
        $z16 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("localHiding");

        if $z16 == 0 goto label042;

        $r75 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label040;

        $r97 = "warning";

        goto label041;

     label040:
        $r97 = "ignore";

     label041:
        interfaceinvoke $r75.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.localVariableHiding", $r97);

        goto label205;

     label042:
        $z17 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("fieldHiding");

        if $z17 == 0 goto label045;

        $r74 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label043;

        $r98 = "warning";

        goto label044;

     label043:
        $r98 = "ignore";

     label044:
        interfaceinvoke $r74.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fieldHiding", $r98);

        goto label205;

     label045:
        $z18 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("specialParamHiding");

        if $z18 == 0 goto label048;

        $r73 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label046;

        $r99 = "enabled";

        goto label047;

     label046:
        $r99 = "disabled";

     label047:
        interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.specialParameterHidingField", $r99);

        goto label205;

     label048:
        $z19 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("conditionAssign");

        if $z19 == 0 goto label051;

        $r72 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label049;

        $r100 = "warning";

        goto label050;

     label049:
        $r100 = "ignore";

     label050:
        interfaceinvoke $r72.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment", $r100);

        goto label205;

     label051:
        $z20 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("syntheticAccess");

        if $z20 != 0 goto label052;

        $z21 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("synthetic-access");

        if $z21 == 0 goto label055;

     label052:
        $r7 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label053;

        $r101 = "warning";

        goto label054;

     label053:
        $r101 = "ignore";

     label054:
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation", $r101);

        goto label205;

     label055:
        $z22 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("nls");

        if $z22 == 0 goto label058;

        $r71 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label056;

        $r102 = "warning";

        goto label057;

     label056:
        $r102 = "ignore";

     label057:
        interfaceinvoke $r71.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral", $r102);

        goto label205;

     label058:
        $z23 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("staticReceiver");

        if $z23 == 0 goto label061;

        $r70 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label059;

        $r103 = "warning";

        goto label060;

     label059:
        $r103 = "ignore";

     label060:
        interfaceinvoke $r70.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.staticAccessReceiver", $r103);

        goto label205;

     label061:
        $z24 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("indirectStatic");

        if $z24 == 0 goto label064;

        $r69 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label062;

        $r104 = "warning";

        goto label063;

     label062:
        $r104 = "ignore";

     label063:
        interfaceinvoke $r69.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.indirectStaticAccess", $r104);

        goto label205;

     label064:
        $z25 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("noEffectAssign");

        if $z25 == 0 goto label067;

        $r68 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label065;

        $r105 = "warning";

        goto label066;

     label065:
        $r105 = "ignore";

     label066:
        interfaceinvoke $r68.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.noEffectAssignment", $r105);

        goto label205;

     label067:
        $z26 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("intfNonInherited");

        if $z26 != 0 goto label068;

        $z27 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("interfaceNonInherited");

        if $z27 == 0 goto label071;

     label068:
        $r8 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label069;

        $r106 = "warning";

        goto label070;

     label069:
        $r106 = "ignore";

     label070:
        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod", $r106);

        goto label205;

     label071:
        $z28 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("charConcat");

        if $z28 != 0 goto label072;

        $z29 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("noImplicitStringConversion");

        if $z29 == 0 goto label075;

     label072:
        $r9 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label073;

        $r107 = "warning";

        goto label074;

     label073:
        $r107 = "ignore";

     label074:
        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion", $r107);

        goto label205;

     label075:
        $z30 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("semicolon");

        if $z30 == 0 goto label078;

        $r67 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label076;

        $r108 = "warning";

        goto label077;

     label076:
        $r108 = "ignore";

     label077:
        interfaceinvoke $r67.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.emptyStatement", $r108);

        goto label205;

     label078:
        $z31 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("serial");

        if $z31 == 0 goto label081;

        $r66 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label079;

        $r109 = "warning";

        goto label080;

     label079:
        $r109 = "ignore";

     label080:
        interfaceinvoke $r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingSerialVersion", $r109);

        goto label205;

     label081:
        $z32 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("emptyBlock");

        if $z32 == 0 goto label084;

        $r65 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label082;

        $r110 = "warning";

        goto label083;

     label082:
        $r110 = "ignore";

     label083:
        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock", $r110);

        goto label205;

     label084:
        $z33 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("uselessTypeCheck");

        if $z33 == 0 goto label087;

        $r64 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label085;

        $r111 = "warning";

        goto label086;

     label085:
        $r111 = "ignore";

     label086:
        interfaceinvoke $r64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck", $r111);

        goto label205;

     label087:
        $z34 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unchecked");

        if $z34 != 0 goto label088;

        $z35 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unsafe");

        if $z35 == 0 goto label091;

     label088:
        $r10 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label089;

        $r112 = "warning";

        goto label090;

     label089:
        $r112 = "ignore";

     label090:
        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation", $r112);

        goto label205;

     label091:
        $z36 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("raw");

        if $z36 == 0 goto label094;

        $r63 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label092;

        $r113 = "warning";

        goto label093;

     label092:
        $r113 = "ignore";

     label093:
        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.rawTypeReference", $r113);

        goto label205;

     label094:
        $z37 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("finalBound");

        if $z37 == 0 goto label097;

        $r62 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label095;

        $r114 = "warning";

        goto label096;

     label095:
        $r114 = "ignore";

     label096:
        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.finalParameterBound", $r114);

        goto label205;

     label097:
        $z38 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("suppress");

        if $z38 == 0 goto label100;

        $r61 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label098;

        $r115 = "enabled";

        goto label099;

     label098:
        $r115 = "disabled";

     label099:
        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.suppressWarnings", $r115);

        goto label205;

     label100:
        $z39 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("warningToken");

        if $z39 == 0 goto label105;

        $r59 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label101;

        $r116 = "warning";

        goto label102;

     label101:
        $r116 = "ignore";

     label102:
        interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unhandledWarningToken", $r116);

        $r60 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label103;

        $r117 = "warning";

        goto label104;

     label103:
        $r117 = "ignore";

     label104:
        interfaceinvoke $r60.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedWarningToken", $r117);

        goto label205;

     label105:
        $z40 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unnecessaryElse");

        if $z40 == 0 goto label108;

        $r58 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label106;

        $r118 = "warning";

        goto label107;

     label106:
        $r118 = "ignore";

     label107:
        interfaceinvoke $r58.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unnecessaryElse", $r118);

        goto label205;

     label108:
        $z41 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("javadoc");

        if $z41 == 0 goto label109;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnJavadocOn> = z2;

        goto label205;

     label109:
        $z42 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("allJavadoc");

        if $z42 == 0 goto label110;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnJavadocOn> = z2;

        r1.<org.eclipse.jdt.internal.compiler.batch.Main: boolean warnAllJavadocOn> = z2;

        goto label205;

     label110:
        $z43 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("tasks");

        if $z43 == 0 goto label115;

        r119 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(40);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(41);

        if $i0 < 0 goto label111;

        if $i1 < 0 goto label111;

        if $i0 >= $i1 goto label111;

        $i2 = $i0 + 1;

        $r56 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $r57 = virtualinvoke $r56.<java.lang.String: java.lang.String trim()>();

        r119 = virtualinvoke $r57.<java.lang.String: java.lang.String replace(char,char)>(124, 44);

     label111:
        $i3 = virtualinvoke r119.<java.lang.String: int length()>();

        if $i3 != 0 goto label112;

        $r54 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r55 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidTaskTag", r0);

        specialinvoke $r54.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r55);

        throw $r54;

     label112:
        $r53 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label113;

        $r120 = r119;

        goto label114;

     label113:
        $r120 = <org.eclipse.jdt.internal.compiler.util.Util: java.lang.String EMPTY_STRING>;

     label114:
        interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.taskTags", $r120);

        goto label205;

     label115:
        $z44 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("assertIdentifier");

        if $z44 == 0 goto label118;

        $r52 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label116;

        $r121 = "warning";

        goto label117;

     label116:
        $r121 = "ignore";

     label117:
        interfaceinvoke $r52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.assertIdentifier", $r121);

        goto label205;

     label118:
        $z45 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("enumIdentifier");

        if $z45 == 0 goto label121;

        $r51 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label119;

        $r122 = "warning";

        goto label120;

     label119:
        $r122 = "ignore";

     label120:
        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.enumIdentifier", $r122);

        goto label205;

     label121:
        $z46 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("finally");

        if $z46 == 0 goto label124;

        $r50 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label122;

        $r123 = "warning";

        goto label123;

     label122:
        $r123 = "ignore";

     label123:
        interfaceinvoke $r50.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally", $r123);

        goto label205;

     label124:
        $z47 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedThrown");

        if $z47 == 0 goto label127;

        $r49 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label125;

        $r124 = "warning";

        goto label126;

     label125:
        $r124 = "ignore";

     label126:
        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException", $r124);

        goto label205;

     label127:
        $z48 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unqualifiedField");

        if $z48 != 0 goto label128;

        $z49 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unqualified-field-access");

        if $z49 == 0 goto label131;

     label128:
        $r11 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label129;

        $r125 = "warning";

        goto label130;

     label129:
        $r125 = "ignore";

     label130:
        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess", $r125);

        goto label205;

     label131:
        $z50 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("typeHiding");

        if $z50 == 0 goto label134;

        $r48 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label132;

        $r126 = "warning";

        goto label133;

     label132:
        $r126 = "ignore";

     label133:
        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.typeParameterHiding", $r126);

        goto label205;

     label134:
        $z51 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("varargsCast");

        if $z51 == 0 goto label137;

        $r47 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label135;

        $r127 = "warning";

        goto label136;

     label135:
        $r127 = "ignore";

     label136:
        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast", $r127);

        goto label205;

     label137:
        $z52 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z52 == 0 goto label139;

        if z2 == 0 goto label138;

        $r44 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nullReference", "warning");

        $r45 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.potentialNullReference", "warning");

        $r46 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantNullCheck", "warning");

        goto label205;

     label138:
        $r41 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nullReference", "ignore");

        $r42 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.potentialNullReference", "ignore");

        $r43 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantNullCheck", "ignore");

        goto label205;

     label139:
        $z53 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("nullDereference");

        if $z53 == 0 goto label141;

        if z2 == 0 goto label140;

        $r40 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nullReference", "warning");

        goto label205;

     label140:
        $r37 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.nullReference", "ignore");

        $r38 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.potentialNullReference", "ignore");

        $r39 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.redundantNullCheck", "ignore");

        goto label205;

     label141:
        $z54 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("boxing");

        if $z54 == 0 goto label144;

        $r36 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label142;

        $r128 = "warning";

        goto label143;

     label142:
        $r128 = "ignore";

     label143:
        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.autoboxing", $r128);

        goto label205;

     label144:
        $z55 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("over-ann");

        if $z55 == 0 goto label147;

        $r35 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label145;

        $r129 = "warning";

        goto label146;

     label145:
        $r129 = "ignore";

     label146:
        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation", $r129);

        goto label205;

     label147:
        $z56 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("dep-ann");

        if $z56 == 0 goto label150;

        $r34 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label148;

        $r130 = "warning";

        goto label149;

     label148:
        $r130 = "ignore";

     label149:
        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation", $r130);

        goto label205;

     label150:
        $z57 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("intfAnnotation");

        if $z57 == 0 goto label153;

        $r33 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label151;

        $r131 = "warning";

        goto label152;

     label151:
        $r131 = "ignore";

     label152:
        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.annotationSuperInterface", $r131);

        goto label205;

     label153:
        $z58 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("enumSwitch");

        if $z58 != 0 goto label154;

        $z59 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("incomplete-switch");

        if $z59 == 0 goto label157;

     label154:
        $r12 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label155;

        $r132 = "warning";

        goto label156;

     label155:
        $r132 = "ignore";

     label156:
        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch", $r132);

        goto label205;

     label157:
        $z60 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("hiding");

        if $z60 == 0 goto label166;

        $r29 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label158;

        $r133 = "warning";

        goto label159;

     label158:
        $r133 = "ignore";

     label159:
        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock", $r133);

        $r30 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label160;

        $r134 = "warning";

        goto label161;

     label160:
        $r134 = "ignore";

     label161:
        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.localVariableHiding", $r134);

        $r31 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label162;

        $r135 = "warning";

        goto label163;

     label162:
        $r135 = "ignore";

     label163:
        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fieldHiding", $r135);

        $r32 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label164;

        $r136 = "warning";

        goto label165;

     label164:
        $r136 = "ignore";

     label165:
        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.typeParameterHiding", $r136);

        goto label205;

     label166:
        $z61 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("static-access");

        if $z61 == 0 goto label171;

        $r27 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label167;

        $r137 = "warning";

        goto label168;

     label167:
        $r137 = "ignore";

     label168:
        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.staticAccessReceiver", $r137);

        $r28 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label169;

        $r138 = "warning";

        goto label170;

     label169:
        $r138 = "ignore";

     label170:
        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.indirectStaticAccess", $r138);

        goto label205;

     label171:
        $z62 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unused");

        if $z62 == 0 goto label186;

        $r20 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label172;

        $r139 = "warning";

        goto label173;

     label172:
        $r139 = "ignore";

     label173:
        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLocal", $r139);

        $r21 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label174;

        $r140 = "warning";

        goto label175;

     label174:
        $r140 = "ignore";

     label175:
        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedParameter", $r140);

        $r22 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label176;

        $r141 = "warning";

        goto label177;

     label176:
        $r141 = "ignore";

     label177:
        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedImport", $r141);

        $r23 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label178;

        $r142 = "warning";

        goto label179;

     label178:
        $r142 = "ignore";

     label179:
        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedPrivateMember", $r142);

        $r24 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label180;

        $r143 = "warning";

        goto label181;

     label180:
        $r143 = "ignore";

     label181:
        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException", $r143);

        $r25 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label182;

        $r144 = "warning";

        goto label183;

     label182:
        $r144 = "ignore";

     label183:
        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedLabel", $r144);

        $r26 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label184;

        $r145 = "warning";

        goto label185;

     label184:
        $r145 = "ignore";

     label185:
        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation", $r145);

        goto label205;

     label186:
        $z63 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("paramAssign");

        if $z63 == 0 goto label189;

        $r19 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label187;

        $r146 = "warning";

        goto label188;

     label187:
        $r146 = "ignore";

     label188:
        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.parameterAssignment", $r146);

        goto label205;

     label189:
        $z64 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("discouraged");

        if $z64 == 0 goto label192;

        $r18 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label190;

        $r147 = "warning";

        goto label191;

     label190:
        $r147 = "ignore";

     label191:
        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.discouragedReference", $r147);

        goto label205;

     label192:
        $z65 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("forbidden");

        if $z65 == 0 goto label195;

        $r17 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label193;

        $r148 = "warning";

        goto label194;

     label193:
        $r148 = "ignore";

     label194:
        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.forbiddenReference", $r148);

        goto label205;

     label195:
        $z66 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("fallthrough");

        if $z66 == 0 goto label198;

        $r16 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label196;

        $r149 = "warning";

        goto label197;

     label196:
        $r149 = "ignore";

     label197:
        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.fallthroughCase", $r149);

        goto label205;

     label198:
        $z67 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("super");

        if $z67 == 0 goto label201;

        $r15 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label199;

        $r150 = "warning";

        goto label200;

     label199:
        $r150 = "ignore";

     label200:
        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.overridingMethodWithoutSuperInvocation", $r150);

        goto label205;

     label201:
        $z68 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unusedTypeArgs");

        if $z68 == 0 goto label204;

        $r14 = r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        if z2 == 0 goto label202;

        $r151 = "warning";

        goto label203;

     label202:
        $r151 = "ignore";

     label203:
        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.problem.unusedTypeArgumentsForMethodInvocation", $r151);

        goto label205;

     label204:
        $r13 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidWarning", r0);

        virtualinvoke r1.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r13);

     label205:
        return;
    }

    protected void initialize(java.io.PrintWriter, java.io.PrintWriter, boolean)
    {
        java.io.PrintWriter r1, r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void initialize(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, z0, null, null);

        return;
    }

    protected void initialize(java.io.PrintWriter, java.io.PrintWriter, boolean, java.util.Map)
    {
        java.io.PrintWriter r1, r2;
        java.util.Map r3;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.Map;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void initialize(java.io.PrintWriter,java.io.PrintWriter,boolean,java.util.Map,org.eclipse.jdt.core.compiler.CompilationProgress)>(r1, r2, z0, r3, null);

        return;
    }

    protected void initialize(java.io.PrintWriter, java.io.PrintWriter, boolean, java.util.Map, org.eclipse.jdt.core.compiler.CompilationProgress)
    {
        org.eclipse.jdt.core.compiler.CompilationProgress r6;
        java.util.Map $r5, r7, $r14;
        boolean z0, $z1, $z2, $z3;
        java.io.PrintWriter r2, r3;
        java.util.Map$Entry r13;
        java.util.Iterator $r11;
        java.util.Set $r10;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r1;
        java.lang.Object $r8, $r9, $r12, $r15, $r16;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r2 := @parameter0: java.io.PrintWriter;

        r3 := @parameter1: java.io.PrintWriter;

        z0 := @parameter2: boolean;

        r7 := @parameter3: java.util.Map;

        r6 := @parameter4: org.eclipse.jdt.core.compiler.CompilationProgress;

        $r1 = new org.eclipse.jdt.internal.compiler.batch.Main$Logger;

        specialinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void <init>(org.eclipse.jdt.internal.compiler.batch.Main,java.io.PrintWriter,java.io.PrintWriter)>(r0, r2, r3);

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger> = $r1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceed> = 1;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.PrintWriter out> = r2;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.PrintWriter err> = r3;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean systemExitWhenFinished> = z0;

        $r4 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        specialinvoke $r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>()>();

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: java.util.Map getMap()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options> = $r5;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress> = r6;

        if r7 == null goto label7;

        $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        if $r8 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource> = $z2;

        $r9 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform");

        if $r9 == null goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget> = $z3;

        $r10 = interfaceinvoke r7.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r12;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r15 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

     label6:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

        goto label8;

     label7:
        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource> = 0;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget> = 0;

     label8:
        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames> = null;

        return;
    }

    protected void initializeAnnotationProcessorManager()
    {
        java.io.PrintWriter $r5, $r6;
        java.lang.IllegalAccessException $r10;
        java.lang.UnsupportedClassVersionError $r8;
        java.lang.String[] $r4;
        org.eclipse.jdt.internal.compiler.batch.Main r3;
        org.eclipse.jdt.internal.compiler.Compiler $r7;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r9;
        org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager r2;
        java.lang.InstantiationException $r12;
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.ClassNotFoundException $r14;
        org.eclipse.jdt.internal.compiler.problem.AbortCompilation $r11, $r13;

        r3 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager");

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager) $r1;

        $r4 = r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] expandedCommandLine>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager: void configure(java.lang.Object,java.lang.String[])>(r3, $r4);

        $r5 = r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.PrintWriter err>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager: void setErr(java.io.PrintWriter)>($r5);

        $r6 = r3.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.PrintWriter out>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager: void setOut(java.io.PrintWriter)>($r6);

        $r7 = r3.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $r7.<org.eclipse.jdt.internal.compiler.Compiler: org.eclipse.jdt.internal.compiler.AbstractAnnotationProcessorManager annotationProcessorManager> = r2;

     label2:
        goto label7;

     label3:
        $r14 := @caughtexception;

        goto label7;

     label4:
        $r12 := @caughtexception;

        $r13 = new org.eclipse.jdt.internal.compiler.problem.AbortCompilation;

        specialinvoke $r13.<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>()>();

        throw $r13;

     label5:
        $r10 := @caughtexception;

        $r11 = new org.eclipse.jdt.internal.compiler.problem.AbortCompilation;

        specialinvoke $r11.<org.eclipse.jdt.internal.compiler.problem.AbortCompilation: void <init>()>();

        throw $r11;

     label6:
        $r8 := @caughtexception;

        $r9 = r3.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logIncorrectVMVersionForAnnotationProcessing()>();

     label7:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.UnsupportedClassVersionError from label1 to label2 with label6;
    }

    public void outputClassFiles(org.eclipse.jdt.internal.compiler.CompilationResult)
    {
        boolean $z0, $z1, $z2, z3, z4, z5;
        java.io.PrintWriter $r14;
        org.eclipse.jdt.internal.compiler.ClassFile r5;
        org.eclipse.jdt.internal.compiler.CompilationResult r0;
        org.eclipse.jdt.internal.compiler.batch.Main r10;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r12, $r24;
        org.eclipse.jdt.internal.compiler.ClassFile[] $r1;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r11;
        org.eclipse.jdt.internal.compiler.env.ICompilationUnit $r2;
        java.lang.String[] $r13;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, i8;
        java.lang.String $r3, $r4, $r9, $r15, $r16, $r17, $r20, $r21, r25;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r19;
        char $c3;
        java.io.IOException $r23;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit $r22;
        org.eclipse.jdt.internal.compiler.Compiler $r18;
        char[] $r6, r7, $r8;

        r10 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.CompilationResult;

        if r0 == null goto label12;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: boolean hasErrors()>();

        if $z0 == 0 goto label01;

        $z2 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: boolean proceedOnError>;

        if $z2 == 0 goto label12;

     label01:
        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.ClassFile[] getClassFiles()>();

        r25 = null;

        z3 = 0;

        z5 = 0;

        z4 = 0;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.CompilationResult: org.eclipse.jdt.internal.compiler.env.ICompilationUnit compilationUnit>;

        $r22 = (org.eclipse.jdt.internal.compiler.batch.CompilationUnit) $r2;

        $r3 = $r22.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: java.lang.String destinationPath>;

        if $r3 != null goto label03;

        $r20 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String destinationPath>;

        if $r20 != null goto label02;

        r25 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String extractDestinationPathFromSourceFile(org.eclipse.jdt.internal.compiler.CompilationResult)>(r0);

        goto label04;

     label02:
        $r21 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String destinationPath>;

        if $r21 == "none" goto label04;

        r25 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String destinationPath>;

        z3 = 1;

        z5 = 1;

        z4 = 1;

        goto label04;

     label03:
        $r4 = $r22.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: java.lang.String destinationPath>;

        if $r4 == "none" goto label04;

        r25 = $r22.<org.eclipse.jdt.internal.compiler.batch.CompilationUnit: java.lang.String destinationPath>;

        z3 = 1;

        z5 = 1;

        z4 = 1;

     label04:
        if r25 == null goto label12;

        i8 = 0;

        i0 = lengthof $r1;

        goto label11;

     label05:
        r5 = $r1[i8];

        $r6 = virtualinvoke r5.<org.eclipse.jdt.internal.compiler.ClassFile: char[] fileName()>();

        i1 = lengthof $r6;

        $i2 = i1 + 6;

        r7 = newarray (char)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r7, 0, i1);

        $r8 = <org.eclipse.jdt.internal.compiler.util.SuffixConstants: char[] SUFFIX_class>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r7, i1, 6);

        $c3 = <java.io.File: char separatorChar>;

        staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: void replace(char[],char,char)>(r7, 47, $c3);

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(char[])>(r7);

     label06:
        $r11 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $z1 = $r11.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean verbose>;

        if $z1 == 0 goto label07;

        $r14 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.PrintWriter out>;

        $r15 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String compilation_write>;

        $r13 = newarray (java.lang.String)[2];

        $i6 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: int exportedClassFilesCounter>;

        $i7 = $i6 + 1;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        $r13[0] = $r16;

        $r13[1] = $r9;

        $r17 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object[])>($r15, $r13);

        virtualinvoke $r14.<java.io.PrintWriter: void println(java.lang.String)>($r17);

     label07:
        staticinvoke <org.eclipse.jdt.internal.compiler.util.Util: void writeToDisk(boolean,java.lang.String,java.lang.String,org.eclipse.jdt.internal.compiler.ClassFile)>(z5, r25, $r9, r5);

        $r12 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logClassFile(boolean,java.lang.String,java.lang.String)>(z4, r25, $r9);

        $i4 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: int exportedClassFilesCounter>;

        $i5 = $i4 + 1;

        r10.<org.eclipse.jdt.internal.compiler.batch.Main: int exportedClassFilesCounter> = $i5;

     label08:
        goto label10;

     label09:
        $r23 := @caughtexception;

        $r24 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logNoClassFileCreated(java.lang.String,java.lang.String,java.io.IOException)>(r25, $r9, $r23);

     label10:
        i8 = i8 + 1;

     label11:
        if i8 < i0 goto label05;

        $r18 = r10.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $r19 = $r18.<org.eclipse.jdt.internal.compiler.Compiler: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment lookupEnvironment>;

        virtualinvoke $r19.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: void releaseClassFiles(org.eclipse.jdt.internal.compiler.ClassFile[])>($r1);

     label12:
        return;

        catch java.io.IOException from label06 to label08 with label09;
    }

    public void performCompilation() throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] $r29;
        byte $b6;
        java.util.Map $r3;
        org.eclipse.jdt.internal.compiler.batch.FileSystem $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.PrintWriter $r12;
        org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy $r7;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r15, $r18, $r22, $r24, $r31, $r36;
        org.eclipse.jdt.internal.compiler.impl.CompilerOptions $r4, $r5, $r8, $r23, $r33, $r34, $r35, $r39;
        java.lang.Throwable $r30;
        org.eclipse.jdt.core.compiler.CompilationProgress $r11;
        long $l0, $l5;
        java.lang.String[] $r25;
        java.util.ArrayList $r16;
        int $i1, $i2, $i3, $i4, $i7;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats[] $r17, $r21;
        java.lang.String $r14;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment $r27;
        org.eclipse.jdt.internal.compiler.IProblemFactory $r10;
        org.eclipse.jdt.internal.compiler.ICompilerRequestor $r9;
        org.eclipse.jdt.internal.compiler.Compiler $r13, $r19, $r26, $r28, $r32, $r37, $r40;
        org.eclipse.jdt.internal.compiler.impl.CompilerStats $r20;
        org.eclipse.jdt.internal.compiler.batch.CompilationUnit[] $r38;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: long startTime> = $l0;

        $r1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.FileSystem getLibraryAccess()>();

        $r39 = new org.eclipse.jdt.internal.compiler.impl.CompilerOptions;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        specialinvoke $r39.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: void <init>(java.util.Map)>($r3);

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions> = $r39;

        $r4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $r4.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performMethodsFullRecovery> = 0;

        $r5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $r5.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean performStatementsRecovery> = 0;

        $r40 = new org.eclipse.jdt.internal.compiler.Compiler;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy getHandlingPolicy()>();

        $r8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $r9 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.ICompilerRequestor getBatchRequestor()>();

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.IProblemFactory getProblemFactory()>();

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.io.PrintWriter out>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.core.compiler.CompilationProgress progress>;

        specialinvoke $r40.<org.eclipse.jdt.internal.compiler.Compiler: void <init>(org.eclipse.jdt.internal.compiler.env.INameEnvironment,org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy,org.eclipse.jdt.internal.compiler.impl.CompilerOptions,org.eclipse.jdt.internal.compiler.ICompilerRequestor,org.eclipse.jdt.internal.compiler.IProblemFactory,java.io.PrintWriter,org.eclipse.jdt.core.compiler.CompilationProgress)>($r1, $r7, $r8, $r9, $r10, $r12, $r11);

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler> = $r40;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int maxRepetition>;

        $i1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition>;

        $i3 = $i2 - $i1;

        $r13.<org.eclipse.jdt.internal.compiler.Compiler: int remainingIterations> = $i3;

        $r14 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jdt.compiler.useSingleThread");

        $r32 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        if $r14 == null goto label1;

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $r32.<org.eclipse.jdt.internal.compiler.Compiler: boolean useSingleThread> = $z3;

        $r33 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $l5 = $r33.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long complianceLevel>;

        $b6 = $l5 cmp 3276800L;

        $i7 = (int) $b6;

        if $i7 < 0 goto label4;

        $r23 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $z0 = $r23.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean processAnnotations>;

        if $z0 == 0 goto label4;

        $z1 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean checkVMVersion(long)>(3276800L);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void initializeAnnotationProcessorManager()>();

        $r25 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        if $r25 == null goto label4;

        $r28 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $r26 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $r27 = $r26.<org.eclipse.jdt.internal.compiler.Compiler: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment lookupEnvironment>;

        $r29 = specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] processClassNames(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment)>($r27);

        virtualinvoke $r28.<org.eclipse.jdt.internal.compiler.Compiler: void setBinaryTypes(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[])>($r29);

        goto label4;

     label3:
        $r24 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r24.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logIncorrectVMVersionForAnnotationProcessing()>();

     label4:
        $r34 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $z4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean verbose>;

        $r34.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean verbose> = $z4;

        $r35 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerOptions compilerOptions>;

        $z5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean produceRefInfo>;

        $r35.<org.eclipse.jdt.internal.compiler.impl.CompilerOptions: boolean produceReferenceInfo> = $z5;

     label5:
        $r36 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r36.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void startLoggingSources()>();

        $r37 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $r38 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.CompilationUnit[] getCompilationUnits()>();

        virtualinvoke $r37.<org.eclipse.jdt.internal.compiler.Compiler: void compile(org.eclipse.jdt.internal.compiler.env.ICompilationUnit[])>($r38);

        goto label7;

     label6:
        $r30 := @caughtexception;

        $r31 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r31.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endLoggingSources()>();

        throw $r30;

     label7:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void endLoggingSources()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList extraProblems>;

        if $r16 == null goto label8;

        $r22 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r22.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void loggingExtraProblems(org.eclipse.jdt.internal.compiler.batch.Main)>(r0);

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList extraProblems> = null;

     label8:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats>;

        if $r17 == null goto label9;

        $r21 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.impl.CompilerStats[] compilerStats>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: int currentRepetition>;

        $r19 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.Compiler batchCompiler>;

        $r20 = $r19.<org.eclipse.jdt.internal.compiler.Compiler: org.eclipse.jdt.internal.compiler.impl.CompilerStats stats>;

        $r21[$i4] = $r20;

     label9:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void printStats()>();

        virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.batch.FileSystem: void cleanup()>();

        return;

        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void printUsage()
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void printUsage(java.lang.String)>("misc.usage");

        return;
    }

    private void printUsage(java.lang.String)
    {
        java.lang.String[] $r2;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r3, $r9;
        java.lang.String r1, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        $r2 = newarray (java.lang.String)[4];

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator");

        $r2[0] = $r4;

        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.name");

        $r2[1] = $r5;

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.version");

        $r2[2] = $r6;

        $r7 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String)>("compiler.copyright");

        $r2[3] = $r7;

        $r8 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String[])>(r1, $r2);

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logUsage(java.lang.String)>($r8);

        $r9 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void flush()>();

        return;
    }

    private org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] processClassNames(org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.lang.String[] $r1, $r3;
        char[][] $r5, r12;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding[] r2;
        int i0, $i1, i2, $i4;
        java.lang.String r4, $r10;
        org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment r7;
        boolean $z0, $z1;
        org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding $r8;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.core.compiler.InvalidInputException $r13;
        char[] $r6, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r7 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        i0 = lengthof $r1;

        r2 = newarray (org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)[i0];

        i2 = 0;

        goto label6;

     label1:
        $r3 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String[] classNames>;

        r4 = $r3[i2];

        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(46);

        $i4 = (int) -1;

        if $i1 == $i4 goto label2;

        $r11 = virtualinvoke r4.<java.lang.String: char[] toCharArray()>();

        r12 = staticinvoke <org.eclipse.jdt.core.compiler.CharOperation: char[][] splitOn(char,char[])>(46, $r11);

        goto label3;

     label2:
        $r5 = newarray (char[])[1];

        $r6 = virtualinvoke r4.<java.lang.String: char[] toCharArray()>();

        $r5[0] = $r6;

        r12 = $r5;

     label3:
        $r8 = virtualinvoke r7.<org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment: org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding getType(char[][])>(r12);

        if $r8 == null goto label4;

        $z0 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isValidBinding()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding: boolean isBinaryBinding()>();

        if $z1 == 0 goto label5;

        r2[i2] = $r8;

        goto label5;

     label4:
        $r13 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.invalidClassName", r4);

        specialinvoke $r13.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r10);

        throw $r13;

     label5:
        i2 = i2 + 1;

     label6:
        if i2 < i0 goto label1;

        return r2;
    }

    public void processPathEntries(int, java.util.ArrayList, java.lang.String, java.lang.String, boolean, boolean) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        byte b4, b8, b9, b10, b11, b12, b13, b14;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6, $z7;
        org.eclipse.jdt.internal.compiler.batch.Main r10;
        java.util.ArrayList r11, $r32, $r35;
        java.lang.StringBuffer $r6, $r20, $r33, $r39;
        java.util.StringTokenizer $r34;
        int i0, $i1, $i2, $i3, i5, i6, i7, $i16;
        java.lang.String r2, $r4, $r5, $r7, $r9, r12, $r13, $r15, $r17, $r19, $r21, $r23, $r24, $r26, $r28, r29, r30, r31;
        org.eclipse.jdt.core.compiler.InvalidInputException $r36, $r37, $r38;
        java.lang.Object $r14, $r18;

        r10 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        i0 := @parameter0: int;

        r11 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: java.lang.String;

        r12 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        r29 = null;

        r30 = null;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>(int)>(i0);

        $r34 = new java.util.StringTokenizer;

        $r33 = new java.lang.StringBuffer;

        $r4 = <java.io.File: java.lang.String pathSeparator>;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r33.<java.lang.StringBuffer: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>(r2, $r7, 1);

        $r35 = new java.util.ArrayList;

        specialinvoke $r35.<java.util.ArrayList: void <init>()>();

        goto label02;

     label01:
        $r9 = virtualinvoke $r34.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r35.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label02:
        $z0 = virtualinvoke $r34.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label01;

        b4 = 0;

        b14 = 0;

        b13 = 0;

        b12 = 0;

        b11 = 0;

        b10 = 0;

        b9 = 0;

        b8 = 0;

        i5 = 0;

        $i1 = virtualinvoke $r35.<java.util.ArrayList: int size()>();

        $i16 = (int) -1;

        i6 = $i16;

        goto label36;

     label03:
        $i3 = i5;

        i5 = i5 + 1;

        $r14 = virtualinvoke $r35.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        r31 = (java.lang.String) $r14;

        $r15 = <java.io.File: java.lang.String pathSeparator>;

        $z3 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label10;

        tableswitch(b13)
        {
            case 0: goto label04;
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label04;
            case 4: goto label09;
            case 5: goto label09;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label05;
            case 9: goto label09;
            case 10: goto label04;
            case 11: goto label08;
            default: goto label09;
        };

     label04:
        goto label35;

     label05:
        b4 = 3;

        b14 = 3;

        b13 = 3;

        b12 = 3;

        b11 = 3;

        b10 = 3;

        b9 = 3;

        b8 = 3;

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: void addNewEntry(java.util.ArrayList,java.lang.String,java.util.ArrayList,java.lang.String,java.lang.String,boolean,boolean)>(r11, r29, $r32, r12, r30, z1, z2);

        virtualinvoke $r32.<java.util.ArrayList: void clear()>();

        goto label35;

     label06:
        b4 = 4;

        b14 = 4;

        b13 = 4;

        b12 = 4;

        b11 = 4;

        b10 = 4;

        b9 = 4;

        b8 = 4;

        goto label35;

     label07:
        $r36 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r28 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectDestinationPathEntry", r2);

        specialinvoke $r36.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r28);

        throw $r36;

     label08:
        i5 = i6 + 1;

        b4 = 5;

        b14 = 5;

        b13 = 5;

        b12 = 5;

        b11 = 5;

        b10 = 5;

        b9 = 5;

        b8 = 5;

        goto label35;

     label09:
        b4 = 99;

        b14 = 99;

        b13 = 99;

        b12 = 99;

        b11 = 99;

        b10 = 99;

        b9 = 99;

        b8 = 99;

        goto label35;

     label10:
        $z4 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("[");

        if $z4 == 0 goto label17;

        tableswitch(b14)
        {
            case 0: goto label11;
            case 1: goto label12;
            case 2: goto label14;
            case 3: goto label16;
            case 4: goto label16;
            case 5: goto label16;
            case 6: goto label16;
            case 7: goto label16;
            case 8: goto label15;
            case 9: goto label16;
            case 10: goto label16;
            case 11: goto label13;
            default: goto label16;
        };

     label11:
        r29 = "";

     label12:
        i6 = i5 - 1;

     label13:
        b4 = 10;

        b14 = 10;

        b13 = 10;

        b12 = 10;

        b11 = 10;

        b10 = 10;

        b9 = 10;

        b8 = 10;

        goto label35;

     label14:
        b4 = 9;

        b14 = 9;

        b13 = 9;

        b12 = 9;

        b11 = 9;

        b10 = 9;

        b9 = 9;

        b8 = 9;

        goto label35;

     label15:
        b4 = 5;

        b14 = 5;

        b13 = 5;

        b12 = 5;

        b11 = 5;

        b10 = 5;

        b9 = 5;

        b8 = 5;

        goto label35;

     label16:
        b4 = 99;

        b14 = 99;

        b13 = 99;

        b12 = 99;

        b11 = 99;

        b10 = 99;

        b9 = 99;

        b8 = 99;

        goto label35;

     label17:
        $z5 = virtualinvoke r31.<java.lang.String: boolean equals(java.lang.Object)>("]");

        if $z5 == 0 goto label22;

        tableswitch(b11)
        {
            case 6: goto label18;
            case 7: goto label19;
            case 8: goto label21;
            case 9: goto label21;
            case 10: goto label20;
            case 11: goto label21;
            default: goto label21;
        };

     label18:
        b4 = 2;

        b14 = 2;

        b13 = 2;

        b12 = 2;

        b11 = 2;

        b10 = 2;

        b9 = 2;

        b8 = 2;

        goto label35;

     label19:
        b4 = 8;

        b14 = 8;

        b13 = 8;

        b12 = 8;

        b11 = 8;

        b10 = 8;

        b9 = 8;

        b8 = 8;

        goto label35;

     label20:
        b4 = 11;

        b14 = 11;

        b13 = 11;

        b12 = 11;

        b11 = 11;

        b10 = 11;

        b9 = 11;

        b8 = 11;

        goto label35;

     label21:
        b4 = 99;

        b14 = 99;

        b13 = 99;

        b12 = 99;

        b11 = 99;

        b10 = 99;

        b9 = 99;

        b8 = 99;

        goto label35;

     label22:
        tableswitch(b9)
        {
            case 0: goto label23;
            case 1: goto label34;
            case 2: goto label34;
            case 3: goto label23;
            case 4: goto label26;
            case 5: goto label24;
            case 6: goto label34;
            case 7: goto label34;
            case 8: goto label34;
            case 9: goto label28;
            case 10: goto label33;
            case 11: goto label30;
            default: goto label34;
        };

     label23:
        b4 = 1;

        b14 = 1;

        b13 = 1;

        b12 = 1;

        b11 = 1;

        b10 = 1;

        b9 = 1;

        b8 = 1;

        r29 = r31;

        goto label35;

     label24:
        $z7 = virtualinvoke r31.<java.lang.String: boolean startsWith(java.lang.String)>("-d ");

        if $z7 == 0 goto label26;

        if r30 == null goto label25;

        $r37 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r26 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.duplicateDestinationPathEntry", r2);

        specialinvoke $r37.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r26);

        throw $r37;

     label25:
        $r24 = virtualinvoke r31.<java.lang.String: java.lang.String substring(int)>(3);

        r30 = virtualinvoke $r24.<java.lang.String: java.lang.String trim()>();

        b4 = 7;

        b14 = 7;

        b13 = 7;

        b12 = 7;

        b11 = 7;

        b10 = 7;

        b9 = 7;

        b8 = 7;

        goto label35;

     label26:
        if r30 == null goto label27;

        $r38 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r23 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.accessRuleAfterDestinationPath", r2);

        specialinvoke $r38.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r23);

        throw $r38;

     label27:
        b4 = 6;

        b14 = 6;

        b13 = 6;

        b12 = 6;

        b11 = 6;

        b10 = 6;

        b9 = 6;

        b8 = 6;

        virtualinvoke $r32.<java.util.ArrayList: boolean add(java.lang.Object)>(r31);

        goto label35;

     label28:
        $z6 = virtualinvoke r31.<java.lang.String: boolean startsWith(java.lang.String)>("-d ");

        if $z6 != 0 goto label29;

        b4 = 99;

        b14 = 99;

        b13 = 99;

        b12 = 99;

        b11 = 99;

        b10 = 99;

        b9 = 99;

        b8 = 99;

        goto label35;

     label29:
        $r21 = virtualinvoke r31.<java.lang.String: java.lang.String substring(int)>(3);

        r30 = virtualinvoke $r21.<java.lang.String: java.lang.String trim()>();

        b4 = 7;

        b14 = 7;

        b13 = 7;

        b12 = 7;

        b11 = 7;

        b10 = 7;

        b9 = 7;

        b8 = 7;

        goto label35;

     label30:
        i7 = i6;

        goto label32;

     label31:
        $r39 = new java.lang.StringBuffer;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r29);

        specialinvoke $r39.<java.lang.StringBuffer: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r35.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r19 = (java.lang.String) $r18;

        $r20 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        r29 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        i7 = i7 + 1;

     label32:
        if i7 < i5 goto label31;

        b4 = 1;

        b14 = 1;

        b13 = 1;

        b12 = 1;

        b11 = 1;

        b10 = 1;

        b9 = 1;

        b8 = 1;

        goto label35;

     label33:
        goto label35;

     label34:
        b4 = 99;

        b14 = 99;

        b13 = 99;

        b12 = 99;

        b11 = 99;

        b10 = 99;

        b9 = 99;

        b8 = 99;

     label35:
        if b8 != 11 goto label36;

        if i5 != $i1 goto label36;

        i5 = i6 + 1;

        b4 = 5;

        b14 = 5;

        b13 = 5;

        b12 = 5;

        b11 = 5;

        b10 = 5;

        b9 = 5;

        b8 = 5;

     label36:
        if i5 >= $i1 goto label37;

        if b12 != 99 goto label03;

     label37:
        tableswitch(b10)
        {
            case 1: goto label39;
            case 2: goto label39;
            case 3: goto label38;
            case 4: goto label40;
            case 5: goto label40;
            case 6: goto label40;
            case 7: goto label40;
            case 8: goto label39;
            case 9: goto label40;
            case 10: goto label40;
            case 11: goto label40;
            default: goto label40;
        };

     label38:
        goto label41;

     label39:
        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: void addNewEntry(java.util.ArrayList,java.lang.String,java.util.ArrayList,java.lang.String,java.lang.String,boolean,boolean)>(r11, r29, $r32, r12, r30, z1, z2);

        goto label41;

     label40:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i2 == 0 goto label41;

        $r13 = virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.incorrectClasspath", r2);

        virtualinvoke r10.<org.eclipse.jdt.internal.compiler.batch.Main: void addPendingErrors(java.lang.String)>($r13);

     label41:
        return;
    }

    private int processPaths(java.lang.String[], int, java.lang.String, java.util.ArrayList) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.lang.String[] r2;
        java.util.ArrayList r8;
        java.lang.StringBuffer $r16;
        int i0, $i1, $i3, $i4, $i6, $i7, i8, i9, i10, i11, $i12, $i14, $i15, $i17;
        java.lang.String r0, $r5, $r7, $r9, $r11, $r13, r14;
        char $c2, $c5;
        org.eclipse.jdt.internal.compiler.batch.Main r4;
        org.eclipse.jdt.core.compiler.InvalidInputException $r15, $r17, $r18, $r19;

        r4 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r2 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r8 := @parameter3: java.util.ArrayList;

        i8 = i0;

        i9 = 0;

        i10 = 0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label05;

     label01:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i12 = (int) $c2;

        tableswitch($i12)
        {
            case 91: goto label02;
            case 92: goto label04;
            case 93: goto label03;
            default: goto label04;
        };

     label02:
        i9 = i9 + 1;

        goto label04;

     label03:
        $i14 = (int) -1;

        i9 = i9 + $i14;

     label04:
        i10 = i10 + 1;

     label05:
        if i10 < $i1 goto label01;

        if i9 != 0 goto label06;

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        goto label18;

     label06:
        if i9 <= 1 goto label07;

        $r15 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r13 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r0);

        specialinvoke $r15.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r13);

        throw $r15;

     label07:
        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);

     label08:
        $i3 = lengthof r2;

        if i8 < $i3 goto label09;

        $r17 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r11 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r0);

        specialinvoke $r17.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r11);

        throw $r17;

     label09:
        i8 = i8 + 1;

        r14 = r2[i8];

        i11 = 0;

        $i4 = virtualinvoke r14.<java.lang.String: int length()>();

        goto label15;

     label10:
        $c5 = virtualinvoke r14.<java.lang.String: char charAt(int)>(i11);

        $i15 = (int) $c5;

        tableswitch($i15)
        {
            case 91: goto label11;
            case 92: goto label14;
            case 93: goto label13;
            default: goto label14;
        };

     label11:
        if i9 <= 1 goto label12;

        $r18 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r5 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r14);

        specialinvoke $r18.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r5);

        throw $r18;

     label12:
        i9 = i9 + 1;

        goto label14;

     label13:
        $i17 = (int) -1;

        i9 = i9 + $i17;

     label14:
        i11 = i11 + 1;

     label15:
        if i11 < $i4 goto label10;

        if i9 != 0 goto label16;

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        $r9 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $i6 = i8 - i0;

        return $i6;

     label16:
        if i9 >= 0 goto label17;

        $r19 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r7 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r14);

        specialinvoke $r19.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r7);

        throw $r19;

     label17:
        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r14);

        goto label08;

     label18:
        $i7 = i0 - i0;

        return $i7;
    }

    private int processPaths(java.lang.String[], int, java.lang.String, java.lang.String[]) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.lang.String[] r2, r8;
        java.lang.StringBuffer $r13;
        int i0, $i1, $i3, $i4, $i6, $i7, i8, i9, i10, i11, $i12, $i14, $i15, $i17;
        java.lang.String r0, $r5, $r7, $r9, $r11, r12;
        char $c2, $c5;
        org.eclipse.jdt.internal.compiler.batch.Main r4;
        org.eclipse.jdt.core.compiler.InvalidInputException $r14, $r15, $r16;

        r4 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r2 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String[];

        i8 = i0;

        i9 = 0;

        i10 = 0;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label05;

     label01:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        $i12 = (int) $c2;

        tableswitch($i12)
        {
            case 91: goto label02;
            case 92: goto label04;
            case 93: goto label03;
            default: goto label04;
        };

     label02:
        i9 = i9 + 1;

        goto label04;

     label03:
        $i14 = (int) -1;

        i9 = i9 + $i14;

     label04:
        i10 = i10 + 1;

     label05:
        if i10 < $i1 goto label01;

        if i9 != 0 goto label06;

        r8[0] = r0;

        goto label17;

     label06:
        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(java.lang.String)>(r0);

     label07:
        i8 = i8 + 1;

        $i3 = lengthof r2;

        if i8 < $i3 goto label08;

        $r14 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r11 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r0);

        specialinvoke $r14.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r11);

        throw $r14;

     label08:
        r12 = r2[i8];

        i11 = 0;

        $i4 = virtualinvoke r12.<java.lang.String: int length()>();

        goto label14;

     label09:
        $c5 = virtualinvoke r12.<java.lang.String: char charAt(int)>(i11);

        $i15 = (int) $c5;

        tableswitch($i15)
        {
            case 91: goto label10;
            case 92: goto label13;
            case 93: goto label12;
            default: goto label13;
        };

     label10:
        if i9 <= 1 goto label11;

        $r15 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r5 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r0);

        specialinvoke $r15.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r5);

        throw $r15;

     label11:
        i9 = i9 + 1;

        goto label13;

     label12:
        $i17 = (int) -1;

        i9 = i9 + $i17;

     label13:
        i11 = i11 + 1;

     label14:
        if i11 < $i4 goto label09;

        if i9 != 0 goto label15;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        r8[0] = $r9;

        $i6 = i8 - i0;

        return $i6;

     label15:
        if i9 >= 0 goto label16;

        $r16 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r7 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String)>("configure.unexpectedBracket", r0);

        specialinvoke $r16.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r7);

        throw $r16;

     label16:
        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r12);

        goto label07;

     label17:
        $i7 = i0 - i0;

        return $i7;
    }

    public void relocalize()
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.util.Locale $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void relocalize(java.util.Locale)>($r1);

        return;
    }

    private void relocalize(java.util.Locale)
    {
        java.io.PrintStream $r5;
        java.util.MissingResourceException $r3;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.util.ResourceBundle $r2;
        java.util.Locale r1;
        java.lang.StringBuffer $r4, $r8, $r9, $r10;
        java.lang.String $r6, $r7, $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.util.Locale;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Locale compilerLocale> = r1;

     label1:
        $r2 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.Main$ResourceBundleFactory: java.util.ResourceBundle getBundle(java.util.Locale)>(r1);

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ResourceBundle bundle> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>("Missing resource : ");

        $r6 = "org.eclipse.jdt.internal.compiler.batch.messages";

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".properties for locale ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

        throw $r3;

     label4:
        return;

        catch java.util.MissingResourceException from label1 to label2 with label3;
    }

    public void setDestinationPath(java.lang.String)
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String destinationPath> = r1;

        return;
    }

    public void setLocale(java.util.Locale)
    {
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        java.util.Locale r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void relocalize(java.util.Locale)>(r1);

        return;
    }

    protected void setPaths(java.util.ArrayList, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.lang.String) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        java.util.ArrayList $r2, $r3, $r5, $r6, r7, $r8, r13, r14, r15, r16;
        int $i0;
        java.lang.String r1, r4;
        org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] $r9, $r10, $r11;
        org.eclipse.jdt.internal.compiler.batch.Main r0;
        org.eclipse.jdt.internal.compiler.batch.Main$Logger $r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        r13 := @parameter0: java.util.ArrayList;

        r4 := @parameter1: java.lang.String;

        r7 := @parameter2: java.util.ArrayList;

        r14 := @parameter3: java.util.ArrayList;

        r15 := @parameter4: java.util.ArrayList;

        r16 := @parameter5: java.util.ArrayList;

        r1 := @parameter6: java.lang.String;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList handleBootclasspath(java.util.ArrayList,java.lang.String)>(r13, r1);

        $r3 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList handleClasspath(java.util.ArrayList,java.lang.String)>(r14, r1);

        if r4 == null goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: void processPathEntries(int,java.util.ArrayList,java.lang.String,java.lang.String,boolean,boolean)>(4, r7, r4, r1, 1, 0);

     label1:
        $r5 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList handleExtdirs(java.util.ArrayList)>(r15);

        $r6 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.ArrayList handleEndorseddirs(java.util.ArrayList)>(r16);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r5);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r7);

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r3);

        $r8 = staticinvoke <org.eclipse.jdt.internal.compiler.batch.FileSystem$ClasspathNormalizer: java.util.ArrayList normalize(java.util.ArrayList)>($r2);

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $r9 = newarray (org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath)[$i0];

        r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] checkedClasspaths> = $r9;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] checkedClasspaths>;

        virtualinvoke $r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.Main$Logger logger>;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[] checkedClasspaths>;

        virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.batch.Main$Logger: void logClasspath(org.eclipse.jdt.internal.compiler.batch.FileSystem$Classpath[])>($r11);

        return;
    }

    protected void validateOptions(boolean) throws org.eclipse.jdt.core.compiler.InvalidInputException
    {
        byte $b1, $b3, $b5, $b7, $b10, $b12, $b14, $b16, $b18, $b20, $b22, $b24, $b26, $b28, $b30, $b32;
        java.util.Map $r1, $r6, $r36, $r41, $r46, $r51, $r55, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r76, $r77, $r78, $r81, $r84, $r87, $r88, $r89, $r90, $r93, $r96, $r98, $r99, $r100, $r103, $r106, $r107, $r108, $r109, $r113, $r114, $r115, $r116, $r117, $r119;
        long $l0, $l2, $l4, $l6, $l8, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31;
        int $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48;
        java.lang.Object $r2, $r7, $r37, $r42, $r47, $r52, $r56, $r70, $r79, $r91, $r101, $r110, $r118, $r120;
        java.lang.String $r3, $r4, $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r26, $r28, $r29, $r30, $r32, $r33, $r34, $r38, $r39, $r43, $r44, $r48, $r49, $r53, $r54, $r57, $r58, $r59, $r60, $r71, $r72, $r73, $r74, $r75, $r80, $r82, $r83, $r85, $r86, $r92, $r94, $r95, $r97, $r102, $r104, $r105, $r111, $r112;
        org.eclipse.jdt.core.compiler.InvalidInputException $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55;
        org.eclipse.jdt.internal.compiler.batch.Main r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.batch.Main;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label20;

        $r69 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r70 = interfaceinvoke $r69.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $r71 = "1.3";

        $z17 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>($r70);

        if $z17 == 0 goto label02;

        $z53 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z53 != 0 goto label01;

        $r116 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.3");

     label01:
        $z54 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z54 != 0 goto label28;

        $r115 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.1");

        goto label28;

     label02:
        $r72 = "1.4";

        $z18 = virtualinvoke $r72.<java.lang.String: boolean equals(java.lang.Object)>($r70);

        if $z18 == 0 goto label05;

        $z47 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z47 == 0 goto label04;

        $r109 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r110 = interfaceinvoke $r109.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        $r111 = "1.3";

        $z49 = virtualinvoke $r111.<java.lang.String: boolean equals(java.lang.Object)>($r110);

        if $z49 == 0 goto label03;

        $z52 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z52 != 0 goto label28;

        $r114 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r114.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.2");

        goto label28;

     label03:
        $r112 = "1.4";

        $z50 = virtualinvoke $r112.<java.lang.String: boolean equals(java.lang.Object)>($r110);

        if $z50 == 0 goto label28;

        $z51 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z51 != 0 goto label28;

        $r113 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.4");

        goto label28;

     label04:
        $r107 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r107.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.3");

        $z48 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z48 != 0 goto label28;

        $r108 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r108.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.2");

        goto label28;

     label05:
        $r73 = "1.5";

        $z19 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>($r70);

        if $z19 == 0 goto label09;

        $z40 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z40 == 0 goto label08;

        $r100 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r101 = interfaceinvoke $r100.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        $r102 = "1.3";

        $z42 = virtualinvoke $r102.<java.lang.String: boolean equals(java.lang.Object)>($r101);

        if $z42 != 0 goto label06;

        $r104 = "1.4";

        $z44 = virtualinvoke $r104.<java.lang.String: boolean equals(java.lang.Object)>($r101);

        if $z44 == 0 goto label07;

     label06:
        $z43 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z43 != 0 goto label28;

        $r103 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r103.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.4");

        goto label28;

     label07:
        $r105 = "1.5";

        $z45 = virtualinvoke $r105.<java.lang.String: boolean equals(java.lang.Object)>($r101);

        if $z45 == 0 goto label28;

        $z46 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z46 != 0 goto label28;

        $r106 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.5");

        goto label28;

     label08:
        $r98 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.5");

        $z41 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z41 != 0 goto label28;

        $r99 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.5");

        goto label28;

     label09:
        $r74 = "1.6";

        $z20 = virtualinvoke $r74.<java.lang.String: boolean equals(java.lang.Object)>($r70);

        if $z20 == 0 goto label14;

        $z32 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z32 == 0 goto label13;

        $r90 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r91 = interfaceinvoke $r90.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        $r92 = "1.3";

        $z34 = virtualinvoke $r92.<java.lang.String: boolean equals(java.lang.Object)>($r91);

        if $z34 != 0 goto label10;

        $r94 = "1.4";

        $z36 = virtualinvoke $r94.<java.lang.String: boolean equals(java.lang.Object)>($r91);

        if $z36 == 0 goto label11;

     label10:
        $z35 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z35 != 0 goto label28;

        $r93 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r93.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.4");

        goto label28;

     label11:
        $r95 = "1.5";

        $z37 = virtualinvoke $r95.<java.lang.String: boolean equals(java.lang.Object)>($r91);

        if $z37 != 0 goto label12;

        $r97 = "1.6";

        $z39 = virtualinvoke $r97.<java.lang.String: boolean equals(java.lang.Object)>($r91);

        if $z39 == 0 goto label28;

     label12:
        $z38 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z38 != 0 goto label28;

        $r96 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r96.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.6");

        goto label28;

     label13:
        $r88 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r88.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.6");

        $z33 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z33 != 0 goto label28;

        $r89 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r89.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.6");

        goto label28;

     label14:
        $r75 = "1.7";

        $z21 = virtualinvoke $r75.<java.lang.String: boolean equals(java.lang.Object)>($r70);

        if $z21 == 0 goto label28;

        $z22 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z22 == 0 goto label19;

        $r78 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r79 = interfaceinvoke $r78.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        $r80 = "1.3";

        $z24 = virtualinvoke $r80.<java.lang.String: boolean equals(java.lang.Object)>($r79);

        if $z24 != 0 goto label15;

        $r82 = "1.4";

        $z26 = virtualinvoke $r82.<java.lang.String: boolean equals(java.lang.Object)>($r79);

        if $z26 == 0 goto label16;

     label15:
        $z25 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z25 != 0 goto label28;

        $r81 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r81.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.4");

        goto label28;

     label16:
        $r83 = "1.5";

        $z27 = virtualinvoke $r83.<java.lang.String: boolean equals(java.lang.Object)>($r79);

        if $z27 != 0 goto label17;

        $r85 = "1.6";

        $z29 = virtualinvoke $r85.<java.lang.String: boolean equals(java.lang.Object)>($r79);

        if $z29 == 0 goto label18;

     label17:
        $z28 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z28 != 0 goto label28;

        $r84 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r84.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.6");

        goto label28;

     label18:
        $r86 = "1.7";

        $z30 = virtualinvoke $r86.<java.lang.String: boolean equals(java.lang.Object)>($r79);

        if $z30 == 0 goto label28;

        $z31 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z31 != 0 goto label28;

        $r87 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r87.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.7");

        goto label28;

     label19:
        $r76 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.source", "1.7");

        $z23 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z23 != 0 goto label28;

        $r77 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.7");

        goto label28;

     label20:
        $z1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z1 == 0 goto label28;

        $r55 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r56 = interfaceinvoke $r55.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        $r57 = "1.4";

        $z9 = virtualinvoke $r57.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z9 == 0 goto label22;

        if z0 != 0 goto label21;

        $r68 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r68.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.4");

     label21:
        $z16 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z16 != 0 goto label28;

        $r67 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r67.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.4");

        goto label28;

     label22:
        $r58 = "1.5";

        $z10 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z10 == 0 goto label24;

        if z0 != 0 goto label23;

        $r66 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.5");

     label23:
        $z15 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z15 != 0 goto label28;

        $r65 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.5");

        goto label28;

     label24:
        $r59 = "1.6";

        $z11 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z11 == 0 goto label26;

        if z0 != 0 goto label25;

        $r64 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.6");

     label25:
        $z14 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z14 != 0 goto label28;

        $r63 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.6");

        goto label28;

     label26:
        $r60 = "1.7";

        $z12 = virtualinvoke $r60.<java.lang.String: boolean equals(java.lang.Object)>($r56);

        if $z12 == 0 goto label28;

        if z0 != 0 goto label27;

        $r62 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance", "1.7");

     label27:
        $z13 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z13 != 0 goto label28;

        $r61 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform", "1.7");

     label28:
        $r117 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r118 = interfaceinvoke $r117.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.source");

        $r119 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r120 = interfaceinvoke $r119.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $z55 = virtualinvoke $r118.<java.lang.Object: boolean equals(java.lang.Object)>("1.7");

        if $z55 == 0 goto label29;

        $l31 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r120);

        $b32 = $l31 cmp 3342336L;

        $i33 = (int) $b32;

        if $i33 >= 0 goto label29;

        $r121 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r51 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r52 = interfaceinvoke $r51.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $r53 = (java.lang.String) $r52;

        $r54 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleComplianceForSource", $r53, "1.7");

        specialinvoke $r121.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r54);

        throw $r121;

     label29:
        $z2 = virtualinvoke $r118.<java.lang.Object: boolean equals(java.lang.Object)>("1.6");

        if $z2 == 0 goto label30;

        $l29 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r120);

        $b30 = $l29 cmp 3276800L;

        $i34 = (int) $b30;

        if $i34 >= 0 goto label30;

        $r122 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r46 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r47 = interfaceinvoke $r46.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $r48 = (java.lang.String) $r47;

        $r49 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleComplianceForSource", $r48, "1.6");

        specialinvoke $r122.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r49);

        throw $r122;

     label30:
        $z3 = virtualinvoke $r118.<java.lang.Object: boolean equals(java.lang.Object)>("1.5");

        if $z3 == 0 goto label31;

        $l27 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r120);

        $b28 = $l27 cmp 3211264L;

        $i35 = (int) $b28;

        if $i35 >= 0 goto label31;

        $r123 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r41 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r42 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $r43 = (java.lang.String) $r42;

        $r44 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleComplianceForSource", $r43, "1.5");

        specialinvoke $r123.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r44);

        throw $r123;

     label31:
        $z4 = virtualinvoke $r118.<java.lang.Object: boolean equals(java.lang.Object)>("1.4");

        if $z4 == 0 goto label32;

        $l25 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r120);

        $b26 = $l25 cmp 3145728L;

        $i36 = (int) $b26;

        if $i36 >= 0 goto label32;

        $r124 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r36 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $r38 = (java.lang.String) $r37;

        $r39 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleComplianceForSource", $r38, "1.4");

        specialinvoke $r124.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r39);

        throw $r124;

     label32:
        $z5 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifyTarget>;

        if $z5 == 0 goto label40;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.codegen.targetPlatform");

        $r3 = "jsr14";

        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z6 == 0 goto label33;

        $l23 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r118);

        $b24 = $l23 cmp 3211264L;

        $i37 = (int) $b24;

        if $i37 >= 0 goto label40;

        $r125 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r33 = (java.lang.String) $r2;

        $r32 = (java.lang.String) $r118;

        $r34 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleTargetForGenericSource", $r33, $r32);

        specialinvoke $r125.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r34);

        throw $r125;

     label33:
        $r4 = "cldc1.1";

        $z7 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z7 == 0 goto label35;

        $z8 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: boolean didSpecifySource>;

        if $z8 == 0 goto label34;

        $l21 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r118);

        $b22 = $l21 cmp 3145728L;

        $i38 = (int) $b22;

        if $i38 < 0 goto label34;

        $r126 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r29 = (java.lang.String) $r2;

        $r28 = (java.lang.String) $r118;

        $r30 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleSourceForCldcTarget", $r29, $r28);

        specialinvoke $r126.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r30);

        throw $r126;

     label34:
        $l19 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r120);

        $b20 = $l19 cmp 3211264L;

        $i39 = (int) $b20;

        if $i39 < 0 goto label40;

        $r127 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r25 = (java.lang.String) $r2;

        $r24 = (java.lang.String) $r118;

        $r26 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleComplianceForCldcTarget", $r25, $r24);

        specialinvoke $r127.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r26);

        throw $r127;

     label35:
        $l0 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r118);

        $b1 = $l0 cmp 3342336L;

        $i40 = (int) $b1;

        if $i40 < 0 goto label36;

        $l17 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r2);

        $b18 = $l17 cmp 3342336L;

        $i41 = (int) $b18;

        if $i41 >= 0 goto label36;

        $r128 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r21 = (java.lang.String) $r2;

        $r22 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleTargetForSource", $r21, "1.7");

        specialinvoke $r128.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r22);

        throw $r128;

     label36:
        $l2 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r118);

        $b3 = $l2 cmp 3276800L;

        $i42 = (int) $b3;

        if $i42 < 0 goto label37;

        $l15 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r2);

        $b16 = $l15 cmp 3276800L;

        $i43 = (int) $b16;

        if $i43 >= 0 goto label37;

        $r129 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r18 = (java.lang.String) $r2;

        $r19 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleTargetForSource", $r18, "1.6");

        specialinvoke $r129.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r19);

        throw $r129;

     label37:
        $l4 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r118);

        $b5 = $l4 cmp 3211264L;

        $i44 = (int) $b5;

        if $i44 < 0 goto label38;

        $l13 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r2);

        $b14 = $l13 cmp 3211264L;

        $i45 = (int) $b14;

        if $i45 >= 0 goto label38;

        $r130 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r15 = (java.lang.String) $r2;

        $r16 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleTargetForSource", $r15, "1.5");

        specialinvoke $r130.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r16);

        throw $r130;

     label38:
        $l6 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r118);

        $b7 = $l6 cmp 3145728L;

        $i46 = (int) $b7;

        if $i46 < 0 goto label39;

        $l11 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r2);

        $b12 = $l11 cmp 3145728L;

        $i47 = (int) $b12;

        if $i47 >= 0 goto label39;

        $r131 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r12 = (java.lang.String) $r2;

        $r13 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleTargetForSource", $r12, "1.4");

        specialinvoke $r131.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r13);

        throw $r131;

     label39:
        $l8 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r120);

        $l9 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.CompilerOptions: long versionToJdkLevel(java.lang.Object)>($r2);

        $b10 = $l8 cmp $l9;

        $i48 = (int) $b10;

        if $i48 >= 0 goto label40;

        $r132 = new org.eclipse.jdt.core.compiler.InvalidInputException;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.util.Map options>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.eclipse.jdt.core.compiler.compliance");

        $r9 = (java.lang.String) $r7;

        $r8 = (java.lang.String) $r2;

        $r10 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bind(java.lang.String,java.lang.String,java.lang.String)>("configure.incompatibleComplianceForTarget", $r9, $r8);

        specialinvoke $r132.<org.eclipse.jdt.core.compiler.InvalidInputException: void <init>(java.lang.String)>($r10);

        throw $r132;

     label40:
        return;
    }

    public static void <clinit>()
    {
        <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String NONE> = "none";

        <org.eclipse.jdt.internal.compiler.batch.Main: int DEFAULT_SIZE_CLASSPATH> = 4;

        <org.eclipse.jdt.internal.compiler.batch.Main: java.lang.String bundleName> = "org.eclipse.jdt.internal.compiler.batch.messages";

        <org.eclipse.jdt.internal.compiler.batch.Main: int TIMING_DETAILED> = 2;

        <org.eclipse.jdt.internal.compiler.batch.Main: int TIMING_ENABLED> = 1;

        <org.eclipse.jdt.internal.compiler.batch.Main: int TIMING_DISABLED> = 0;

        return;
    }
}
