class org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins extends org.waveprotocol.wave.client.editor.testing.MockTypingSink$Op
{
    org.waveprotocol.wave.model.document.util.Point start;
    java.lang.String text;

    private void <init>(org.waveprotocol.wave.model.document.util.Point, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Op: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins: org.waveprotocol.wave.model.document.util.Point start> = r1;

        r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins: java.lang.String text> = r2;

        return;
    }

    void <init>(org.waveprotocol.wave.model.document.util.Point, java.lang.String, org.waveprotocol.wave.client.editor.testing.MockTypingSink$1)
    {
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins r0;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.util.Point r1;
        org.waveprotocol.wave.client.editor.testing.MockTypingSink$1 r3;

        r0 := @this: org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.testing.MockTypingSink$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.testing.MockTypingSink$Ins: void <init>(org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r1, r2);

        return;
    }
}
