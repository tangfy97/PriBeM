public class org.codehaus.groovy.ast.expr.CastExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private final org.codehaus.groovy.ast.expr.Expression expression;
    private boolean ignoreAutoboxing;
    private boolean coerce;

    public static org.codehaus.groovy.ast.expr.CastExpression asExpression(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.CastExpression $r0;
        org.codehaus.groovy.ast.expr.Expression r2;
        org.codehaus.groovy.ast.ClassNode r1;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        $r0 = new org.codehaus.groovy.ast.expr.CastExpression;

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>(r1, r2);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.CastExpression: void setCoerce(boolean)>(1);

        return $r0;
    }

    public void <init>(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        org.codehaus.groovy.ast.expr.Expression r2;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression,boolean)>(r1, r2, 0);

        return;
    }

    public void <init>(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression, boolean)
    {
        org.codehaus.groovy.ast.ClassNode r1;
        org.codehaus.groovy.ast.expr.CastExpression r0;
        org.codehaus.groovy.ast.expr.Expression r2;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean ignoreAutoboxing> = 0;

        r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean coerce> = 0;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void setType(org.codehaus.groovy.ast.ClassNode)>(r1);

        r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression expression> = r2;

        r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean ignoreAutoboxing> = z0;

        return;
    }

    public boolean isIgnoringAutoboxing()
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean ignoreAutoboxing>;

        return $z0;
    }

    public boolean isCoerce()
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        $z0 = r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean coerce>;

        return $z0;
    }

    public void setCoerce(boolean)
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.expr.CastExpression: boolean coerce> = z0;

        return;
    }

    public java.lang.String toString()
    {
        org.codehaus.groovy.ast.ClassNode $r5;
        java.lang.StringBuffer $r0, $r3, $r4, $r7, $r8, $r10, $r11;
        org.codehaus.groovy.ast.expr.CastExpression r1;
        java.lang.String $r2, $r6, $r12;
        org.codehaus.groovy.ast.expr.Expression $r9;

        r1 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[(");

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r6 = virtualinvoke $r5.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r9 = r1.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.CastExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitCastExpression(org.codehaus.groovy.ast.expr.CastExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ExpressionTransformer r3;
        org.codehaus.groovy.ast.ClassNode $r2;
        org.codehaus.groovy.ast.expr.CastExpression $r0, r1;
        org.codehaus.groovy.ast.expr.Expression $r4, $r5;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        r3 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r0 = new org.codehaus.groovy.ast.expr.CastExpression;

        $r2 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = r1.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        $r5 = interfaceinvoke r3.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r4);

        specialinvoke $r0.<org.codehaus.groovy.ast.expr.CastExpression: void <init>(org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>($r2, $r5);

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.CastExpression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        $z0 = virtualinvoke r1.<org.codehaus.groovy.ast.expr.CastExpression: boolean isCoerce()>();

        virtualinvoke $r0.<org.codehaus.groovy.ast.expr.CastExpression: void setCoerce(boolean)>($z0);

        return $r0;
    }

    public java.lang.String getText()
    {
        org.codehaus.groovy.ast.ClassNode $r3;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r8;
        org.codehaus.groovy.ast.expr.CastExpression r2;
        org.codehaus.groovy.ast.expr.Expression $r6;
        java.lang.String $r7, $r9;

        r2 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r3 = virtualinvoke r2.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.ClassNode getType()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") ");

        $r6 = r2.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public org.codehaus.groovy.ast.expr.Expression getExpression()
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.CastExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        return $r1;
    }

    public void setType(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.expr.CastExpression r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.ast.expr.CastExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void setType(org.codehaus.groovy.ast.ClassNode)>(r1);

        return;
    }
}
