public class org.apache.commons.collections.map.LRUMap extends org.apache.commons.collections.map.AbstractLinkedMap implements org.apache.commons.collections.BoundedMap, java.io.Serializable, java.lang.Cloneable
{
    private static final long serialVersionUID;
    protected static final int DEFAULT_MAX_SIZE;
    private transient int maxSize;
    private boolean scanUntilRemovable;

    public void <init>()
    {
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        specialinvoke r0.<org.apache.commons.collections.map.LRUMap: void <init>(int,float,boolean)>(100, 0.75F, 0);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.collections.map.LRUMap: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    public void <init>(int, boolean)
    {
        int i0;
        org.apache.commons.collections.map.LRUMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.collections.map.LRUMap: void <init>(int,float,boolean)>(i0, 0.75F, z0);

        return;
    }

    public void <init>(int, float)
    {
        int i0;
        float f0;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<org.apache.commons.collections.map.LRUMap: void <init>(int,float,boolean)>(i0, f0, 0);

        return;
    }

    public void <init>(int, float, boolean)
    {
        int i0, $i1;
        float f0;
        java.lang.IllegalArgumentException $r1;
        org.apache.commons.collections.map.LRUMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        if i0 >= 1 goto label1;

        $i1 = 16;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        specialinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: void <init>(int,float)>($i1, f0);

        if i0 >= 1 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("LRUMap max size must be greater than 0");

        throw $r1;

     label3:
        r0.<org.apache.commons.collections.map.LRUMap: int maxSize> = i0;

        r0.<org.apache.commons.collections.map.LRUMap: boolean scanUntilRemovable> = z0;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.commons.collections.map.LRUMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.commons.collections.map.LRUMap: void <init>(java.util.Map,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.util.Map, boolean)
    {
        java.util.Map r1;
        int $i0;
        org.apache.commons.collections.map.LRUMap r0;
        boolean z0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: java.util.Map;

        z0 := @parameter1: boolean;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke r0.<org.apache.commons.collections.map.LRUMap: void <init>(int,float,boolean)>($i0, 0.75F, z0);

        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object r1, $r4;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r2;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r3;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry getEntry(java.lang.Object)>(r1);

        r3 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void moveToMRU(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)>(r3);

        $r4 = virtualinvoke r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: java.lang.Object getValue()>();

        return $r4;
    }

    protected void moveToMRU(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)
    {
        java.lang.IllegalStateException $r5;
        int $i0, $i1;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r0, $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        org.apache.commons.collections.map.LRUMap r1;

        r1 := @this: org.apache.commons.collections.map.LRUMap;

        r0 := @parameter0: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry;

        $r3 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r2 = r1.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if $r3 == $r2 goto label1;

        $i0 = r1.<org.apache.commons.collections.map.LRUMap: int modCount>;

        $i1 = $i0 + 1;

        r1.<org.apache.commons.collections.map.LRUMap: int modCount> = $i1;

        $r7 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r6 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r7.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = $r6;

        $r9 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r8 = r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r9.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = $r8;

        $r10 = r1.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = $r10;

        $r11 = r1.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r12 = $r11.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        r0.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = $r12;

        $r13 = r1.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r14 = $r13.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r14.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after> = r0;

        $r15 = r1.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r15.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before> = r0;

        goto label2;

     label1:
        $r4 = r1.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if r0 != $r4 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t move header to MRU (please report this to commons-dev@jakarta.apache.org)");

        throw $r5;

     label2:
        return;
    }

    protected void updateEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry, java.lang.Object)
    {
        java.lang.Object r3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r2;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        r3 := @parameter1: java.lang.Object;

        $r2 = (org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry) r1;

        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void moveToMRU(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)>($r2);

        virtualinvoke r1.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object setValue(java.lang.Object)>(r3);

        return;
    }

    protected void addMapping(int, int, java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r4, $r26;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry $r3, $r7, $r8, $r11, $r12, $r25, $r29, $r30, $r33, $r34, r47;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuffer $r5, $r6, $r9, $r10, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r27, $r28, $r31, $r32, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String $r24, $r46;
        java.lang.Object r1, r2;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: boolean isFull()>();

        if $z0 == 0 goto label09;

        $r3 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        r47 = $r3.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        z3 = 0;

        $z1 = r0.<org.apache.commons.collections.map.LRUMap: boolean scanUntilRemovable>;

        if $z1 == 0 goto label04;

     label01:
        $r25 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if r47 == $r25 goto label03;

        if r47 == null goto label03;

        $z2 = virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: boolean removeLRU(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)>(r47);

        if $z2 == 0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        r47 = r47.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        goto label01;

     label03:
        if r47 != null goto label05;

        $r26 = new java.lang.IllegalStateException;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Entry.after=null, header.after");

        $r29 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r30 = $r29.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" header.before");

        $r33 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r34 = $r33.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r35 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key=");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value=");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" size=");

        $i4 = r0.<org.apache.commons.collections.map.LRUMap: int size>;

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" maxSize=");

        $i5 = r0.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Please check that your keys are immutable, and that you have used synchronization properly.");

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" If so, then please report this to commons-dev@jakarta.apache.org as a bug.");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r46);

        throw $r26;

     label04:
        z3 = virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: boolean removeLRU(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)>(r47);

     label05:
        if z3 == 0 goto label07;

        if r47 != null goto label06;

        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("reuse=null, header.after=");

        $r7 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r8 = $r7.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry after>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" header.before");

        $r11 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        $r12 = $r11.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry before>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" size=");

        $i2 = r0.<org.apache.commons.collections.map.LRUMap: int size>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" maxSize=");

        $i3 = r0.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Please check that your keys are immutable, and that you have used synchronization properly.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" If so, then please report this to commons-dev@jakarta.apache.org as a bug.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r4;

     label06:
        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void reuseMapping(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry,int,int,java.lang.Object,java.lang.Object)>(r47, i0, i1, r1, r2);

        goto label08;

     label07:
        specialinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>(i0, i1, r1, r2);

     label08:
        goto label10;

     label09:
        specialinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>(i0, i1, r1, r2);

     label10:
        return;
    }

    protected void reuseMapping(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry, int, int, java.lang.Object, java.lang.Object)
    {
        java.lang.IllegalStateException $r6, $r26;
        java.lang.NullPointerException $r25;
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r1, $r31;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r2, r3, $r9;
        java.lang.StringBuffer $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10;
        java.lang.String $r24, $r43;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry $r10, r44, r45;
        java.lang.Object r4, r5;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry;

        i5 := @parameter1: int;

        i6 := @parameter2: int;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

     label1:
        $i1 = r1.<org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry: int hashCode>;

        $r2 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i0 = lengthof $r2;

        $i2 = virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: int hashIndex(int,int)>($i1, $i0);

        r3 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r44 = r3[$i2];

        r45 = null;

     label2:
        if r44 == r1 goto label3;

        if r44 == null goto label3;

        r45 = r44;

        r44 = r44.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: org.apache.commons.collections.map.AbstractHashedMap$HashEntry next>;

        goto label2;

     label3:
        if r44 != null goto label4;

        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Entry.next=null, data[removeIndex]=");

        $r9 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $r10 = $r9[$i2];

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" previous=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r45);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" size=");

        $i7 = r0.<org.apache.commons.collections.map.LRUMap: int size>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" maxSize=");

        $i8 = r0.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Please check that your keys are immutable, and that you have used synchronization properly.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" If so, then please report this to commons-dev@jakarta.apache.org as a bug.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r6;

     label4:
        $i3 = r0.<org.apache.commons.collections.map.LRUMap: int modCount>;

        $i4 = $i3 + 1;

        r0.<org.apache.commons.collections.map.LRUMap: int modCount> = $i4;

        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void removeEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r1, $i2, r45);

        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void reuseEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int,int,java.lang.Object,java.lang.Object)>(r1, i5, i6, r4, r5);

        virtualinvoke r0.<org.apache.commons.collections.map.LRUMap: void addEntry(org.apache.commons.collections.map.AbstractHashedMap$HashEntry,int)>(r1, i5);

     label5:
        goto label9;

     label6:
        $r25 := @caughtexception;

        $r26 = new java.lang.IllegalStateException;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NPE, entry=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" entryIsHeader=");

        $r31 = r0.<org.apache.commons.collections.map.LRUMap: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry header>;

        if r1 != $r31 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" key=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value=");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r5);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" size=");

        $i9 = r0.<org.apache.commons.collections.map.LRUMap: int size>;

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" maxSize=");

        $i10 = r0.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Please check that your keys are immutable, and that you have used synchronization properly.");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" If so, then please report this to commons-dev@jakarta.apache.org as a bug.");

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r43);

        throw $r26;

     label9:
        return;

        catch java.lang.NullPointerException from label1 to label5 with label6;
    }

    protected boolean removeLRU(org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry)
    {
        org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry r1;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: org.apache.commons.collections.map.AbstractLinkedMap$LinkEntry;

        return 1;
    }

    public boolean isFull()
    {
        int $i0, $i1;
        org.apache.commons.collections.map.LRUMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        $i1 = r0.<org.apache.commons.collections.map.LRUMap: int size>;

        $i0 = r0.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int maxSize()
    {
        int $i0;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        $i0 = r0.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        return $i0;
    }

    public boolean isScanUntilRemovable()
    {
        org.apache.commons.collections.map.LRUMap r0;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        $z0 = r0.<org.apache.commons.collections.map.LRUMap: boolean scanUntilRemovable>;

        return $z0;
    }

    public java.lang.Object clone()
    {
        java.lang.Object $r1;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        $r1 = specialinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: java.lang.Object clone()>();

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.apache.commons.collections.map.LRUMap r1;

        r1 := @this: org.apache.commons.collections.map.LRUMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        virtualinvoke r1.<org.apache.commons.collections.map.LRUMap: void doWriteObject(java.io.ObjectOutputStream)>(r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        org.apache.commons.collections.map.LRUMap r1;

        r1 := @this: org.apache.commons.collections.map.LRUMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r1.<org.apache.commons.collections.map.LRUMap: void doReadObject(java.io.ObjectInputStream)>(r0);

        return;
    }

    protected void doWriteObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        int $i0;
        java.io.ObjectOutputStream r0;
        org.apache.commons.collections.map.LRUMap r1;

        r1 := @this: org.apache.commons.collections.map.LRUMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        $i0 = r1.<org.apache.commons.collections.map.LRUMap: int maxSize>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        specialinvoke r1.<org.apache.commons.collections.map.AbstractLinkedMap: void doWriteObject(java.io.ObjectOutputStream)>(r0);

        return;
    }

    protected void doReadObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r1;
        int $i0;
        org.apache.commons.collections.map.LRUMap r0;

        r0 := @this: org.apache.commons.collections.map.LRUMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r0.<org.apache.commons.collections.map.LRUMap: int maxSize> = $i0;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractLinkedMap: void doReadObject(java.io.ObjectInputStream)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.map.LRUMap: int DEFAULT_MAX_SIZE> = 100;

        <org.apache.commons.collections.map.LRUMap: long serialVersionUID> = -612114643488955218L;

        return;
    }
}
