abstract class org.apache.cxf.configuration.spring.AbstractSpringBeanMap extends java.lang.Object implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.apache.cxf.configuration.spring.MapProvider, java.io.Serializable
{
    private static final long serialVersionUID;
    protected org.springframework.context.ApplicationContext context;
    protected java.lang.Class type;
    protected java.lang.String idsProperty;
    protected java.lang.String staticFieldName;
    protected java.util.concurrent.ConcurrentHashMap idToBeanName;
    protected java.util.concurrent.ConcurrentHashMap putStore;

    void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(4, 0.75F, 4);

        r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore> = $r2;

        return;
    }

    public void setApplicationContext(org.springframework.context.ApplicationContext) throws org.springframework.beans.BeansException
    {
        org.springframework.context.ApplicationContext r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: org.springframework.context.ApplicationContext;

        r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: org.springframework.context.ApplicationContext context> = r1;

        return;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        org.springframework.context.ApplicationContext $r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r1 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: org.springframework.context.ApplicationContext context>;

        virtualinvoke r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: void processBeans(org.springframework.context.ApplicationContext)>($r1);

        return;
    }

    public java.util.Map createMap()
    {
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap$SpringBeanMapWrapper $r0;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r0 = new org.apache.cxf.configuration.spring.AbstractSpringBeanMap$SpringBeanMapWrapper;

        specialinvoke $r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap$SpringBeanMapWrapper: void <init>(org.apache.cxf.configuration.spring.AbstractSpringBeanMap,org.apache.cxf.configuration.spring.AbstractSpringBeanMap$1)>(r1, null);

        return $r0;
    }

    protected abstract void processBeans(org.springframework.context.ApplicationContext);

    protected java.util.List getBeanListForId(java.lang.Object)
    {
        java.util.List r5, r6;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.Object r2, $r4;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;
        java.util.concurrent.CopyOnWriteArrayList $r0;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r6 = $r0;

        $r3 = r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, $r0);

        r5 = (java.util.List) $r4;

        if r5 == null goto label1;

        r6 = r5;

     label1:
        return r6;
    }

    protected java.util.Collection getIds(java.lang.Object)
    {
        java.lang.Throwable $r27, $r28, $r29, $r30;
        java.lang.Object[] $r6, $r8, r9, $r11;
        org.springframework.beans.factory.BeanInitializationException $r23, $r24, $r25, $r26;
        java.lang.SecurityException $r15;
        java.lang.String $r3;
        java.lang.reflect.Method $r5;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r2;
        boolean $z0;
        java.lang.IllegalAccessException $r19;
        java.util.Collection $r13, $r14;
        java.lang.IllegalArgumentException $r21;
        java.lang.reflect.InvocationTargetException $r17;
        java.util.List $r10;
        java.beans.PropertyDescriptor $r4;
        java.lang.Object r0, $r7, $r12;
        java.lang.Class $r1;

        r2 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r0 := @parameter0: java.lang.Object;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = r2.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.String idsProperty>;

        $r4 = staticinvoke <org.springframework.beans.BeanUtils: java.beans.PropertyDescriptor getPropertyDescriptor(java.lang.Class,java.lang.String)>($r1, $r3);

        $r5 = virtualinvoke $r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r6 = newarray (java.lang.Object)[0];

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r6);

        $z0 = $r7 instanceof java.util.Collection;

        if $z0 == 0 goto label3;

        $r11 = newarray (java.lang.Object)[0];

        $r12 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r11);

        $r13 = (java.util.Collection) $r12;

        $r14 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Collection cast(java.util.Collection)>($r13);

     label2:
        return $r14;

     label3:
        $r8 = (java.lang.Object[]) $r7;

        r9 = (java.lang.Object[]) $r8;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r9);

     label4:
        return $r10;

     label5:
        $r21 := @caughtexception;

        $r23 = new org.springframework.beans.factory.BeanInitializationException;

        specialinvoke $r23.<org.springframework.beans.factory.BeanInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Could not retrieve ids.", $r21);

        $r27 = (java.lang.Throwable) $r23;

        throw $r27;

     label6:
        $r19 := @caughtexception;

        $r24 = new org.springframework.beans.factory.BeanInitializationException;

        specialinvoke $r24.<org.springframework.beans.factory.BeanInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Could not access id getter.", $r19);

        $r28 = (java.lang.Throwable) $r24;

        throw $r28;

     label7:
        $r17 := @caughtexception;

        $r25 = new org.springframework.beans.factory.BeanInitializationException;

        specialinvoke $r25.<org.springframework.beans.factory.BeanInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Could not invoke id getter.", $r17);

        $r29 = (java.lang.Throwable) $r25;

        throw $r29;

     label8:
        $r15 := @caughtexception;

        $r26 = new org.springframework.beans.factory.BeanInitializationException;

        specialinvoke $r26.<org.springframework.beans.factory.BeanInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Could not invoke id getter.", $r15);

        $r30 = (java.lang.Throwable) $r26;

        throw $r30;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label6;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
        catch java.lang.SecurityException from label1 to label2 with label8;
        catch java.lang.SecurityException from label3 to label4 with label8;
    }

    public java.lang.Object postProcessBeforeInitialization(java.lang.Object, java.lang.String) throws org.springframework.beans.BeansException
    {
        java.lang.Object r0;
        java.lang.String r2;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r0 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        return r0;
    }

    public java.lang.Class getType()
    {
        java.lang.Class $r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r1 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.Class type>;

        return $r1;
    }

    public void setType(java.lang.Class)
    {
        java.lang.Class r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.Class;

        r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.Class type> = r1;

        return;
    }

    public java.lang.String getIdsProperty()
    {
        java.lang.String $r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r1 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.String idsProperty>;

        return $r1;
    }

    public void setIdsProperty(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.String idsProperty> = r1;

        return;
    }

    public java.lang.String getStaticFieldName()
    {
        java.lang.String $r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r1 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.String staticFieldName>;

        return $r1;
    }

    public void setStaticFieldName(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.String staticFieldName> = r1;

        return;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap $r2, $r3;
        java.lang.Object r1;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public java.util.Set entrySet()
    {
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap$Entry $r5;
        java.util.LinkedHashSet $r0;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;
        boolean $z0;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = new org.apache.cxf.configuration.spring.AbstractSpringBeanMap$Entry;

        specialinvoke $r5.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap$Entry: void <init>(org.apache.cxf.configuration.spring.AbstractSpringBeanMap,java.lang.Object)>(r1, $r4);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.String $r10, r17;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;
        boolean $z0;
        java.util.Iterator $r7;
        java.util.concurrent.ConcurrentHashMap $r2, $r5, $r12, $r14;
        org.springframework.context.ApplicationContext $r8, $r16;
        java.util.List r4;
        java.lang.Object r1, $r3, $r6, $r9, $r11, $r13, $r15, r18;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.List) $r3;

        if r4 == null goto label4;

        $r7 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r15;

        $r16 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: org.springframework.context.ApplicationContext context>;

        interfaceinvoke $r16.<org.springframework.context.ApplicationContext: java.lang.Object getBean(java.lang.String)>(r17);

        goto label1;

     label2:
        $r8 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: org.springframework.context.ApplicationContext context>;

        $r9 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke $r8.<org.springframework.context.ApplicationContext: java.lang.Object getBean(java.lang.String)>($r10);

        r18 = $r11;

        $r12 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $r13 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r11);

        if $r13 == null goto label3;

        r18 = $r13;

     label3:
        $r14 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return r18;

     label4:
        $r5 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r6;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r1 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.util.Set keySet()
    {
        java.util.concurrent.ConcurrentHashMap $r2, $r4;
        java.util.Set $r3, $r5;
        java.util.LinkedHashSet $r0;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        $r2 = r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r3);

        $r4 = r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r5);

        return $r0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap $r2, $r4;
        java.lang.Object r1, r3, $r5;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return $r5;
    }

    public void putAll(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap $r3, $r4;
        java.lang.Object r1, $r2, r5;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.Object get(java.lang.Object)>(r1);

        r5 = $r2;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        r5 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

     label2:
        return r5;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        int $i0, $i1, $i2;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r0;

        r0 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r1 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $r2 = r0.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $i1 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public java.util.Collection values()
    {
        java.util.Iterator $r6;
        java.util.Collection $r3;
        java.util.concurrent.ConcurrentHashMap $r2, $r4;
        java.util.Set $r5;
        java.util.ArrayList $r0;
        java.lang.Object $r7, $r8;
        org.apache.cxf.configuration.spring.AbstractSpringBeanMap r1;
        boolean $z0;

        r1 := @this: org.apache.cxf.configuration.spring.AbstractSpringBeanMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap putStore>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r4 = r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.util.concurrent.ConcurrentHashMap idToBeanName>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = virtualinvoke r1.<org.apache.cxf.configuration.spring.AbstractSpringBeanMap: java.lang.Object get(java.lang.Object)>($r7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return $r0;
    }

    public static void <clinit>()
    {
        <org.apache.cxf.configuration.spring.AbstractSpringBeanMap: long serialVersionUID> = -6825008027450218536L;

        return;
    }
}
