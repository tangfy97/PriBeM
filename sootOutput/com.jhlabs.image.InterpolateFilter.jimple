public class com.jhlabs.image.InterpolateFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private java.awt.image.BufferedImage destination;
    private float interpolation;

    public void <init>()
    {
        com.jhlabs.image.InterpolateFilter r0;

        r0 := @this: com.jhlabs.image.InterpolateFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        return;
    }

    public void setDestination(java.awt.image.BufferedImage)
    {
        com.jhlabs.image.InterpolateFilter r0;
        java.awt.image.BufferedImage r1;

        r0 := @this: com.jhlabs.image.InterpolateFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r0.<com.jhlabs.image.InterpolateFilter: java.awt.image.BufferedImage destination> = r1;

        return;
    }

    public java.awt.image.BufferedImage getDestination()
    {
        com.jhlabs.image.InterpolateFilter r0;
        java.awt.image.BufferedImage $r1;

        r0 := @this: com.jhlabs.image.InterpolateFilter;

        $r1 = r0.<com.jhlabs.image.InterpolateFilter: java.awt.image.BufferedImage destination>;

        return $r1;
    }

    public void setInterpolation(float)
    {
        float f0;
        com.jhlabs.image.InterpolateFilter r0;

        r0 := @this: com.jhlabs.image.InterpolateFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.InterpolateFilter: float interpolation> = f0;

        return;
    }

    public float getInterpolation()
    {
        float $f0;
        com.jhlabs.image.InterpolateFilter r0;

        r0 := @this: com.jhlabs.image.InterpolateFilter;

        $f0 = r0.<com.jhlabs.image.InterpolateFilter: float interpolation>;

        return $f0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        int[] $r5, $r7, r9, r10;
        java.awt.image.BufferedImage r0, $r2, $r3, $r4, $r6, r8;
        com.jhlabs.image.InterpolateFilter r1;
        float $f0, $f1, $f2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, i9, $i10, $i11, $i12, i13, $i14, i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33;

        r1 := @this: com.jhlabs.image.InterpolateFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r8 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        if r8 != null goto label1;

        r8 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: java.awt.image.BufferedImage createCompatibleDestImage(java.awt.image.BufferedImage,java.awt.image.ColorModel)>(r0, null);

     label1:
        virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = r1.<com.jhlabs.image.InterpolateFilter: java.awt.image.BufferedImage destination>;

        if $r2 == null goto label5;

        $r3 = r1.<com.jhlabs.image.InterpolateFilter: java.awt.image.BufferedImage destination>;

        $i2 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        $r4 = r1.<com.jhlabs.image.InterpolateFilter: java.awt.image.BufferedImage destination>;

        $i4 = virtualinvoke $r4.<java.awt.image.BufferedImage: int getWidth()>();

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i4);

        r9 = null;

        r10 = null;

        i29 = 0;

     label2:
        if i29 >= $i5 goto label5;

        $r5 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i29, $i3, 1, r9);

        r9 = $r5;

        $r6 = r1.<com.jhlabs.image.InterpolateFilter: java.awt.image.BufferedImage destination>;

        $r7 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>($r6, 0, i29, $i3, 1, r10);

        r10 = $r7;

        i30 = 0;

     label3:
        if i30 >= $i3 goto label4;

        i6 = $r5[i30];

        i7 = $r7[i30];

        $i8 = i6 >> 24;

        i9 = $i8 & 255;

        $i10 = i6 >> 16;

        i31 = $i10 & 255;

        $i11 = i6 >> 8;

        i32 = $i11 & 255;

        i33 = i6 & 255;

        $i12 = i7 >> 16;

        i13 = $i12 & 255;

        $i14 = i7 >> 8;

        i15 = $i14 & 255;

        i16 = i7 & 255;

        $f0 = r1.<com.jhlabs.image.InterpolateFilter: float interpolation>;

        $i17 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>($f0, i31, i13);

        $i18 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i17);

        $f1 = r1.<com.jhlabs.image.InterpolateFilter: float interpolation>;

        $i19 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>($f1, i32, i15);

        $i20 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i19);

        $f2 = r1.<com.jhlabs.image.InterpolateFilter: float interpolation>;

        $i21 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>($f2, i33, i16);

        $i22 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i21);

        $i24 = i9 << 24;

        $i23 = $i18 << 16;

        $i26 = $i24 | $i23;

        $i25 = $i20 << 8;

        $i27 = $i26 | $i25;

        $i28 = $i27 | $i22;

        $r5[i30] = $i28;

        i30 = i30 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r8, 0, i29, $i3, 1, $r5);

        i29 = i29 + 1;

        goto label2;

     label5:
        return r8;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.InterpolateFilter r0;

        r0 := @this: com.jhlabs.image.InterpolateFilter;

        return "Effects/Interpolate...";
    }
}
