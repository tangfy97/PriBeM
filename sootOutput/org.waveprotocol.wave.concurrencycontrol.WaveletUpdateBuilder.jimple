public final class org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder extends java.lang.Object
{
    private org.waveprotocol.wave.federation.ProtocolWaveletDelta delta;
    private org.waveprotocol.wave.federation.ProtocolHashedVersion resultingVersion;
    private java.lang.Long applicationTimpstamp;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder r0;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolWaveletDelta;

        r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder: org.waveprotocol.wave.federation.ProtocolWaveletDelta delta> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder r0;
        org.waveprotocol.wave.federation.ProtocolHashedVersion r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder;

        r1 := @parameter0: org.waveprotocol.wave.federation.ProtocolHashedVersion;

        r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder: org.waveprotocol.wave.federation.ProtocolHashedVersion resultingVersion> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder setApplicationTimpstamp(long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder r0;
        java.lang.Long $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder: java.lang.Long applicationTimpstamp> = $r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.WaveletUpdate build(org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder$Factory)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder$Factory r0;
        org.waveprotocol.wave.federation.ProtocolWaveletDelta $r3;
        java.lang.Long $r5;
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdate $r1;
        org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder r2;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r4;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder$Factory;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder$Factory: org.waveprotocol.wave.concurrencycontrol.WaveletUpdate create()>();

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder: org.waveprotocol.wave.federation.ProtocolWaveletDelta delta>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: void setDelta(org.waveprotocol.wave.federation.ProtocolWaveletDelta)>($r3);

        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder: org.waveprotocol.wave.federation.ProtocolHashedVersion resultingVersion>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: void setResultingVersion(org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r4);

        $r5 = r2.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdateBuilder: java.lang.Long applicationTimpstamp>;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.WaveletUpdate: void setApplicationTimpstamp(long)>($l0);

        return $r1;
    }
}
