final class org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState extends java.lang.Object implements org.waveprotocol.wave.model.supplement.WaveletThreadState
{
    private final org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates;
    private final org.waveprotocol.wave.model.document.util.DocumentEventRouter router;
    private final java.lang.Object container;
    private final org.waveprotocol.wave.model.util.Serializer$EnumSerializer threadStateSerializer;

    void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap $r6;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState r0;
        org.waveprotocol.wave.model.util.Serializer $r5;
        java.lang.Object r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r2;
        org.waveprotocol.wave.model.util.Serializer$EnumSerializer $r1, $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r3 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.waveprotocol.wave.model.util.Serializer$EnumSerializer;

        specialinvoke $r1.<org.waveprotocol.wave.model.util.Serializer$EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/waveprotocol/wave/model/supplement/ThreadState;");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.util.Serializer$EnumSerializer threadStateSerializer> = $r1;

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.document.util.DocumentEventRouter router> = r2;

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: java.lang.Object container> = r3;

        $r5 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.util.Serializer$EnumSerializer threadStateSerializer>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap: org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicMap create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object,org.waveprotocol.wave.model.util.Serializer,org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, $r5, $r4, "thread", "i", "state");

        r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates> = $r6;

        return;
    }

    public static org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState create(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState $r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.id.WaveletId r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.waveprotocol.wave.model.id.WaveletId;

        r4 := @parameter3: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r0 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: void <init>(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>(r1, r2);

        specialinvoke $r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: void installListeners(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)>(r3, r4);

        return $r0;
    }

    private void installListeners(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r4;
        org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState$1 $r1;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState r0;
        org.waveprotocol.wave.model.id.WaveletId r3;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener;

        $r4 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates>;

        $r1 = new org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState$1;

        specialinvoke $r1.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState$1: void <init>(org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState,org.waveprotocol.wave.model.supplement.ObservablePrimitiveSupplement$Listener,org.waveprotocol.wave.model.id.WaveletId)>(r0, r2, r3);

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap: void addListener(org.waveprotocol.wave.model.adt.ObservableBasicMap$Listener)>($r1);

        return;
    }

    public void remove()
    {
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState r0;
        org.waveprotocol.wave.model.document.ObservableMutableDocument $r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter $r1;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.document.util.DocumentEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocumentEventRouter: org.waveprotocol.wave.model.document.ObservableMutableDocument getDocument()>();

        $r3 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: java.lang.Object container>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ObservableMutableDocument: void deleteNode(java.lang.Object)>($r3);

        return;
    }

    public void setThreadState(java.lang.String, org.waveprotocol.wave.model.supplement.ThreadState)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r3, $r4;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.supplement.ThreadState r0;

        r1 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.supplement.ThreadState;

        if r0 != null goto label1;

        $r4 = r1.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.adt.ObservableBasicMap: void remove(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = r1.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.ObservableBasicMap: boolean put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    public org.waveprotocol.wave.model.supplement.ThreadState getThreadState(java.lang.String)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState r0;
        java.lang.Object $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.supplement.ThreadState $r4;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.waveprotocol.wave.model.supplement.ThreadState) $r3;

        return $r4;
    }

    public java.lang.Iterable getThreads()
    {
        org.waveprotocol.wave.model.adt.ObservableBasicMap $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.DocumentBasedWaveletThreadState: org.waveprotocol.wave.model.adt.ObservableBasicMap threadStates>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.adt.ObservableBasicMap: java.util.Set keySet()>();

        return $r2;
    }
}
