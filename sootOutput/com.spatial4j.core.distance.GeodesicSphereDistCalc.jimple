public abstract class com.spatial4j.core.distance.GeodesicSphereDistCalc extends com.spatial4j.core.distance.AbstractDistanceCalculator
{
    private static final double radiusDEG;

    public void <init>()
    {
        com.spatial4j.core.distance.GeodesicSphereDistCalc r0;

        r0 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        specialinvoke r0.<com.spatial4j.core.distance.AbstractDistanceCalculator: void <init>()>();

        return;
    }

    public com.spatial4j.core.shape.Point pointOnBearing(com.spatial4j.core.shape.Point, double, double, com.spatial4j.core.context.SpatialContext, com.spatial4j.core.shape.Point)
    {
        byte $b0;
        com.spatial4j.core.shape.Point r0, r2, $r3;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        com.spatial4j.core.context.SpatialContext r1;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r4;

        r4 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r0 := @parameter0: com.spatial4j.core.shape.Point;

        d0 := @parameter1: double;

        d6 := @parameter2: double;

        r1 := @parameter3: com.spatial4j.core.context.SpatialContext;

        r2 := @parameter4: com.spatial4j.core.shape.Point;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label2;

        if r2 != null goto label1;

        return r0;

     label1:
        $d12 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getX()>();

        $d13 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getY()>();

        interfaceinvoke r2.<com.spatial4j.core.shape.Point: void reset(double,double)>($d12, $d13);

        return r2;

     label2:
        $d1 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getY()>();

        $d2 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d1);

        $d3 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getX()>();

        $d4 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d3);

        $d5 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d0);

        $d7 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d6);

        $r3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: com.spatial4j.core.shape.Point pointOnBearingRAD(double,double,double,double,com.spatial4j.core.context.SpatialContext,com.spatial4j.core.shape.Point)>($d2, $d4, $d5, $d7, r1, r2);

        $d8 = interfaceinvoke $r3.<com.spatial4j.core.shape.Point: double getX()>();

        $d9 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>($d8);

        $d10 = interfaceinvoke $r3.<com.spatial4j.core.shape.Point: double getY()>();

        $d11 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>($d10);

        interfaceinvoke $r3.<com.spatial4j.core.shape.Point: void reset(double,double)>($d9, $d11);

        return $r3;
    }

    public com.spatial4j.core.shape.Rectangle calcBoxByDistFromPt(com.spatial4j.core.shape.Point, double, com.spatial4j.core.context.SpatialContext, com.spatial4j.core.shape.Rectangle)
    {
        com.spatial4j.core.shape.Rectangle r2, $r3;
        com.spatial4j.core.context.SpatialContext r1;
        com.spatial4j.core.shape.Point r0;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r4;
        double $d0, $d1, d2;

        r4 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r0 := @parameter0: com.spatial4j.core.shape.Point;

        d2 := @parameter1: double;

        r1 := @parameter2: com.spatial4j.core.context.SpatialContext;

        r2 := @parameter3: com.spatial4j.core.shape.Rectangle;

        $d0 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getY()>();

        $d1 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getX()>();

        $r3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: com.spatial4j.core.shape.Rectangle calcBoxByDistFromPtDEG(double,double,double,com.spatial4j.core.context.SpatialContext,com.spatial4j.core.shape.Rectangle)>($d0, $d1, d2, r1, r2);

        return $r3;
    }

    public double calcBoxByDistFromPt_yHorizAxisDEG(com.spatial4j.core.shape.Point, double, com.spatial4j.core.context.SpatialContext)
    {
        com.spatial4j.core.shape.Point r0;
        com.spatial4j.core.context.SpatialContext r2;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r1;
        double $d0, $d1, d2, $d3;

        r1 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r0 := @parameter0: com.spatial4j.core.shape.Point;

        d2 := @parameter1: double;

        r2 := @parameter2: com.spatial4j.core.context.SpatialContext;

        $d0 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getY()>();

        $d1 = interfaceinvoke r0.<com.spatial4j.core.shape.Point: double getX()>();

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double calcBoxByDistFromPt_latHorizAxisDEG(double,double,double)>($d0, $d1, d2);

        return $d3;
    }

    public double area(com.spatial4j.core.shape.Rectangle)
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        com.spatial4j.core.shape.Rectangle r0;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r1;

        r1 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r0 := @parameter0: com.spatial4j.core.shape.Rectangle;

        $d0 = interfaceinvoke r0.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

        $d1 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d0);

        $d2 = interfaceinvoke r0.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d2);

        $d4 = <com.spatial4j.core.distance.GeodesicSphereDistCalc: double radiusDEG>;

        $d6 = 0.017453292519943295 * $d4;

        $d5 = <com.spatial4j.core.distance.GeodesicSphereDistCalc: double radiusDEG>;

        $d7 = $d6 * $d5;

        $d8 = staticinvoke <java.lang.Math: double sin(double)>($d1);

        $d9 = staticinvoke <java.lang.Math: double sin(double)>($d3);

        $d10 = $d8 - $d9;

        $d11 = staticinvoke <java.lang.Math: double abs(double)>($d10);

        $d12 = $d7 * $d11;

        $d13 = interfaceinvoke r0.<com.spatial4j.core.shape.Rectangle: double getWidth()>();

        $d14 = $d12 * $d13;

        return $d14;
    }

    public double area(com.spatial4j.core.shape.Circle)
    {
        com.spatial4j.core.shape.Circle r0;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r1 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r0 := @parameter0: com.spatial4j.core.shape.Circle;

        $d0 = interfaceinvoke r0.<com.spatial4j.core.shape.Circle: double getRadius()>();

        $d1 = 90.0 - $d0;

        $d2 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d1);

        $d3 = <com.spatial4j.core.distance.GeodesicSphereDistCalc: double radiusDEG>;

        $d5 = 6.283185307179586 * $d3;

        $d4 = <com.spatial4j.core.distance.GeodesicSphereDistCalc: double radiusDEG>;

        $d6 = $d5 * $d4;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $d8 = 1.0 - $d7;

        $d9 = $d6 * $d8;

        return $d9;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r1;
        boolean $z0;

        r1 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        java.lang.Class $r1;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r0;

        r0 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final double distance(com.spatial4j.core.shape.Point, double, double)
    {
        com.spatial4j.core.shape.Point r1;
        com.spatial4j.core.distance.GeodesicSphereDistCalc r0;
        double $d0, $d1, $d2, $d3, d4, $d5, d6, $d7, $d8, $d9;

        r0 := @this: com.spatial4j.core.distance.GeodesicSphereDistCalc;

        r1 := @parameter0: com.spatial4j.core.shape.Point;

        d6 := @parameter1: double;

        d4 := @parameter2: double;

        $d0 = interfaceinvoke r1.<com.spatial4j.core.shape.Point: double getY()>();

        $d1 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d0);

        $d2 = interfaceinvoke r1.<com.spatial4j.core.shape.Point: double getX()>();

        $d3 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>($d2);

        $d5 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d4);

        $d7 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toRadians(double)>(d6);

        $d8 = virtualinvoke r0.<com.spatial4j.core.distance.GeodesicSphereDistCalc: double distanceLatLonRAD(double,double,double,double)>($d1, $d3, $d5, $d7);

        $d9 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>($d8);

        return $d9;
    }

    protected abstract double distanceLatLonRAD(double, double, double, double);

    static void <clinit>()
    {
        double $d0;

        $d0 = staticinvoke <com.spatial4j.core.distance.DistanceUtils: double toDegrees(double)>(1.0);

        <com.spatial4j.core.distance.GeodesicSphereDistCalc: double radiusDEG> = $d0;

        return;
    }
}
