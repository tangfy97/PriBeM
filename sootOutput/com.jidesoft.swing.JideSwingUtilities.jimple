public class com.jidesoft.swing.JideSwingUtilities extends java.lang.Object implements javax.swing.SwingConstants
{
    private static final java.util.logging.Logger LOGGER_FOCUS;
    private static final boolean AA_TEXT;
    private static final boolean AA_TEXT_DEFINED;
    public static final java.lang.Object AA_TEXT_PROPERTY_KEY;
    private static java.beans.PropertyChangeListener _setOpaqueTrueListener;
    private static java.beans.PropertyChangeListener _setOpaqueFalseListener;
    private static final java.lang.String OPAQUE_LISTENER;
    public static final java.lang.String SET_OPAQUE_RECURSIVELY_EXCLUDED;
    static java.util.Map renderingHints;
    private static java.lang.Class _radialGradientPaintClass;
    private static java.lang.reflect.Constructor _radialGradientPaintConstructor1;
    private static java.lang.reflect.Constructor _radialGradientPaintConstructor2;
    private static java.lang.Class _linearGradientPaintClass;
    private static java.lang.reflect.Constructor _linearGradientPaintConstructor1;
    private static java.lang.reflect.Constructor _linearGradientPaintConstructor2;
    protected static boolean tracingFocus;
    private static javax.swing.event.ChangeListener _viewportSyncListener;

    public void <init>()
    {
        com.jidesoft.swing.JideSwingUtilities r0;

        r0 := @this: com.jidesoft.swing.JideSwingUtilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javax.swing.JPanel createLeftPanel(java.awt.Component)
    {
        com.jidesoft.swing.NullPanel $r0;
        java.awt.BorderLayout $r1;
        java.awt.Component r2;

        r2 := @parameter0: java.awt.Component;

        $r0 = new com.jidesoft.swing.NullPanel;

        $r1 = new java.awt.BorderLayout;

        specialinvoke $r1.<java.awt.BorderLayout: void <init>()>();

        specialinvoke $r0.<com.jidesoft.swing.NullPanel: void <init>(java.awt.LayoutManager)>($r1);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>(r2, "Before");

        return $r0;
    }

    public static javax.swing.JPanel createRightPanel(java.awt.Component)
    {
        com.jidesoft.swing.NullPanel $r0;
        java.awt.BorderLayout $r1;
        java.awt.Component r2;

        r2 := @parameter0: java.awt.Component;

        $r0 = new com.jidesoft.swing.NullPanel;

        $r1 = new java.awt.BorderLayout;

        specialinvoke $r1.<java.awt.BorderLayout: void <init>()>();

        specialinvoke $r0.<com.jidesoft.swing.NullPanel: void <init>(java.awt.LayoutManager)>($r1);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>(r2, "After");

        return $r0;
    }

    public static javax.swing.JPanel createTopPanel(java.awt.Component)
    {
        com.jidesoft.swing.NullPanel $r0;
        java.awt.BorderLayout $r1;
        java.awt.Component r2;

        r2 := @parameter0: java.awt.Component;

        $r0 = new com.jidesoft.swing.NullPanel;

        $r1 = new java.awt.BorderLayout;

        specialinvoke $r1.<java.awt.BorderLayout: void <init>()>();

        specialinvoke $r0.<com.jidesoft.swing.NullPanel: void <init>(java.awt.LayoutManager)>($r1);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>(r2, "First");

        return $r0;
    }

    public static javax.swing.JPanel createBottomPanel(java.awt.Component)
    {
        com.jidesoft.swing.NullPanel $r0;
        java.awt.BorderLayout $r1;
        java.awt.Component r2;

        r2 := @parameter0: java.awt.Component;

        $r0 = new com.jidesoft.swing.NullPanel;

        $r1 = new java.awt.BorderLayout;

        specialinvoke $r1.<java.awt.BorderLayout: void <init>()>();

        specialinvoke $r0.<com.jidesoft.swing.NullPanel: void <init>(java.awt.LayoutManager)>($r1);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>(r2, "Last");

        return $r0;
    }

    public static javax.swing.JPanel createCenterPanel(java.awt.Component)
    {
        com.jidesoft.swing.NullPanel $r0;
        java.awt.GridBagLayout $r1;
        java.awt.GridBagConstraints $r3;
        java.awt.Component r2;

        r2 := @parameter0: java.awt.Component;

        $r0 = new com.jidesoft.swing.NullPanel;

        $r1 = new java.awt.GridBagLayout;

        specialinvoke $r1.<java.awt.GridBagLayout: void <init>()>();

        specialinvoke $r0.<com.jidesoft.swing.NullPanel: void <init>(java.awt.LayoutManager)>($r1);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(0);

        $r3 = new java.awt.GridBagConstraints;

        specialinvoke $r3.<java.awt.GridBagConstraints: void <init>()>();

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>(r2, $r3);

        return $r0;
    }

    public static javax.swing.JPanel createLabeledComponent(javax.swing.JLabel, java.awt.Component, java.lang.Object)
    {
        com.jidesoft.swing.JideBorderLayout $r1;
        javax.swing.JLabel r2;
        com.jidesoft.swing.NullPanel $r0;
        java.lang.Object r3;
        java.awt.Component r4;

        r2 := @parameter0: javax.swing.JLabel;

        r4 := @parameter1: java.awt.Component;

        r3 := @parameter2: java.lang.Object;

        $r0 = new com.jidesoft.swing.NullPanel;

        $r1 = new com.jidesoft.swing.JideBorderLayout;

        specialinvoke $r1.<com.jidesoft.swing.JideBorderLayout: void <init>(int,int)>(3, 3);

        specialinvoke $r0.<com.jidesoft.swing.NullPanel: void <init>(java.awt.LayoutManager)>($r1);

        virtualinvoke $r0.<javax.swing.JPanel: void setOpaque(boolean)>(0);

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>(r2, r3);

        virtualinvoke r2.<javax.swing.JLabel: void setLabelFor(java.awt.Component)>(r4);

        virtualinvoke $r0.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>(r4);

        return $r0;
    }

    public static void centerWindow(java.awt.Window)
    {
        java.awt.Container $r1;
        java.awt.Window r0;

        r0 := @parameter0: java.awt.Window;

        $r1 = virtualinvoke r0.<java.awt.Window: java.awt.Container getParent()>();

        virtualinvoke r0.<java.awt.Window: void setLocationRelativeTo(java.awt.Component)>($r1);

        return;
    }

    public static void globalCenterWindow(java.awt.Window)
    {
        java.awt.Window r0;

        r0 := @parameter0: java.awt.Window;

        virtualinvoke r0.<java.awt.Window: void setLocationRelativeTo(java.awt.Component)>(null);

        return;
    }

    public static void paintArrow(java.awt.Graphics, java.awt.Color, int, int, int, int)
    {
        java.awt.Color $r1, r2;
        int $i0, $i1, i2, $i3, $i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        r2 := @parameter1: java.awt.Color;

        i5 := @parameter2: int;

        i6 := @parameter3: int;

        i21 := @parameter4: int;

        i2 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);

        $i0 = i21 / 2;

        $i1 = $i0 * 2;

        i22 = $i1 + 1;

        if i2 != 0 goto label3;

        i23 = 0;

     label1:
        $i13 = i22 + 1;

        $i14 = $i13 / 2;

        if i23 >= $i14 goto label2;

        $i20 = i5 + i23;

        $i19 = i6 + i23;

        $i15 = i5 + i22;

        $i16 = $i15 - i23;

        $i18 = $i16 - 1;

        $i17 = i6 + i23;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i20, $i19, $i18, $i17);

        i23 = i23 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        if i2 != 1 goto label5;

        i24 = 0;

     label4:
        $i3 = i22 + 1;

        $i4 = $i3 / 2;

        if i24 >= $i4 goto label5;

        $i12 = i5 + i24;

        $i11 = i6 + i24;

        $i10 = i5 + i24;

        $i7 = i6 + i22;

        $i8 = $i7 - i24;

        $i9 = $i8 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i12, $i11, $i10, $i9);

        i24 = i24 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public static void paintArrow(javax.swing.JComponent, java.awt.Graphics, java.awt.Color, int, int, int, int)
    {
        java.awt.Color r3, $r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17;
        boolean $z0;
        javax.swing.JComponent r0;
        java.awt.ComponentOrientation $r1;
        java.awt.Graphics r2;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: java.awt.Graphics;

        r3 := @parameter2: java.awt.Color;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i15 := @parameter5: int;

        i2 := @parameter6: int;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r1.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke r2.<java.awt.Graphics: java.awt.Color getColor()>();

        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>(r3);

        $i3 = i15 / 2;

        $i4 = $i3 * 2;

        i16 = $i4 + 1;

        i17 = 0;

     label1:
        $i5 = i16 + 1;

        $i6 = $i5 / 2;

        if i17 >= $i6 goto label2;

        $i7 = i0 + i16;

        $i14 = $i7 - i17;

        $i13 = i1 + i17;

        $i8 = i0 + i16;

        $i12 = $i8 - i17;

        $i9 = i1 + i16;

        $i10 = $i9 - i17;

        $i11 = $i10 - 1;

        virtualinvoke r2.<java.awt.Graphics: void drawLine(int,int,int,int)>($i14, $i13, $i12, $i11);

        i17 = i17 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        return;

     label3:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void paintArrow(java.awt.Graphics,java.awt.Color,int,int,int,int)>(r2, r3, i0, i1, i15, i2);

        return;
    }

    public static void paintCross(java.awt.Graphics, java.awt.Color, int, int, int, int)
    {
        java.awt.Color r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        r1 := @parameter1: java.awt.Color;

        i10 := @parameter2: int;

        i1 := @parameter3: int;

        i11 := @parameter4: int;

        i0 := @parameter5: int;

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r1);

        i12 = i11 / 2;

        i13 = 0;

     label1:
        if i13 >= i0 goto label2;

        $i5 = i10 - i12;

        $i4 = i1 - i12;

        $i3 = i10 + i12;

        $i2 = i1 + i12;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i5, $i4, $i3, $i2);

        $i9 = i10 + i12;

        $i8 = i1 - i12;

        $i7 = i10 - i12;

        $i6 = i1 + i12;

        virtualinvoke r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i9, $i8, $i7, $i6);

        i10 = i10 + 1;

        i13 = i13 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.awt.Frame getFrame(java.awt.Component)
    {
        java.awt.Frame $r1, $r2;
        java.awt.Container r3;
        java.awt.Component r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.awt.Frame;

        if $z0 == 0 goto label2;

        $r2 = (java.awt.Frame) r0;

        return $r2;

     label2:
        r3 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

     label3:
        if r3 == null goto label5;

        $z1 = r3 instanceof java.awt.Frame;

        if $z1 == 0 goto label4;

        $r1 = (java.awt.Frame) r3;

        return $r1;

     label4:
        r3 = virtualinvoke r3.<java.awt.Container: java.awt.Container getParent()>();

        goto label3;

     label5:
        return null;
    }

    public static void toggleRTLnLTR(java.awt.Component)
    {
        java.awt.Component r0;
        java.awt.ComponentOrientation $r1, $r2, r3;

        r0 := @parameter0: java.awt.Component;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.ComponentOrientation getComponentOrientation()>();

        $r2 = <java.awt.ComponentOrientation: java.awt.ComponentOrientation RIGHT_TO_LEFT>;

        if $r1 != $r2 goto label1;

        r3 = <java.awt.ComponentOrientation: java.awt.ComponentOrientation LEFT_TO_RIGHT>;

        goto label2;

     label1:
        r3 = <java.awt.ComponentOrientation: java.awt.ComponentOrientation RIGHT_TO_LEFT>;

     label2:
        virtualinvoke r0.<java.awt.Component: void applyComponentOrientation(java.awt.ComponentOrientation)>(r3);

        return;
    }

    public static void synchronizeView(javax.swing.JViewport, javax.swing.JViewport, int)
    {
        javax.swing.event.ChangeListener[] $r2;
        java.util.HashMap $r7, $r9;
        java.lang.Integer $r4, $r6;
        java.util.Map $r8, $r10;
        int $i0, $i1, i2, i3;
        javax.swing.event.ChangeListener $r11, $r12, $r13;
        boolean $z0, $z1;
        java.lang.Object $r3, $r5, r14, r15;
        javax.swing.JViewport r0, r1;

        r0 := @parameter0: javax.swing.JViewport;

        r1 := @parameter1: javax.swing.JViewport;

        i2 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = virtualinvoke r0.<javax.swing.JViewport: javax.swing.event.ChangeListener[] getChangeListeners()>();

        i3 = 0;

     label3:
        $i0 = lengthof $r2;

        if i3 >= $i0 goto label5;

        $r12 = $r2[i3];

        $r13 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: javax.swing.event.ChangeListener getViewportSynchronizationChangeListener()>();

        if $r12 != $r13 goto label4;

        goto label5;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $i1 = lengthof $r2;

        if i3 < $i1 goto label6;

        $r11 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: javax.swing.event.ChangeListener getViewportSynchronizationChangeListener()>();

        virtualinvoke r0.<javax.swing.JViewport: void addChangeListener(javax.swing.event.ChangeListener)>($r11);

     label6:
        $r3 = virtualinvoke r0.<javax.swing.JViewport: java.lang.Object getClientProperty(java.lang.Object)>("synchronizeViewSlaveViewport");

        r14 = $r3;

        $z0 = $r3 instanceof java.util.Map;

        if $z0 != 0 goto label7;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r14 = $r9;

     label7:
        $r10 = (java.util.Map) r14;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        virtualinvoke r0.<javax.swing.JViewport: void putClientProperty(java.lang.Object,java.lang.Object)>("synchronizeViewSlaveViewport", $r10);

        $r5 = virtualinvoke r1.<javax.swing.JViewport: java.lang.Object getClientProperty(java.lang.Object)>("synchronizeViewMasterViewport");

        r15 = $r5;

        $z1 = $r5 instanceof java.util.Map;

        if $z1 != 0 goto label8;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r15 = $r7;

     label8:
        $r8 = (java.util.Map) r15;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

        virtualinvoke r1.<javax.swing.JViewport: void putClientProperty(java.lang.Object,java.lang.Object)>("synchronizeViewMasterViewport", $r8);

        return;
    }

    public static void unsynchronizeView(javax.swing.JViewport, javax.swing.JViewport)
    {
        java.util.Map r4, r6;
        java.lang.Object $r2, $r5;
        javax.swing.event.ChangeListener $r3;
        javax.swing.JViewport r0, r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: javax.swing.JViewport;

        r1 := @parameter1: javax.swing.JViewport;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = virtualinvoke r0.<javax.swing.JViewport: java.lang.Object getClientProperty(java.lang.Object)>("synchronizeViewSlaveViewport");

        $z0 = $r2 instanceof java.util.Map;

        if $z0 == 0 goto label4;

        r4 = (java.util.Map) $r2;

        interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $z2 = interfaceinvoke r4.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        r4 = null;

        $r3 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: javax.swing.event.ChangeListener getViewportSynchronizationChangeListener()>();

        virtualinvoke r0.<javax.swing.JViewport: void removeChangeListener(javax.swing.event.ChangeListener)>($r3);

     label3:
        virtualinvoke r0.<javax.swing.JViewport: void putClientProperty(java.lang.Object,java.lang.Object)>("synchronizeViewSlaveViewport", r4);

     label4:
        $r5 = virtualinvoke r1.<javax.swing.JViewport: java.lang.Object getClientProperty(java.lang.Object)>("synchronizeViewMasterViewport");

        $z3 = $r5 instanceof java.util.Map;

        if $z3 == 0 goto label6;

        r6 = (java.util.Map) $r5;

        interfaceinvoke r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $z1 = interfaceinvoke r6.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        r6 = null;

     label5:
        virtualinvoke r1.<javax.swing.JViewport: void putClientProperty(java.lang.Object,java.lang.Object)>("synchronizeViewMasterViewport", r6);

     label6:
        return;
    }

    public static int getButtonState(javax.swing.AbstractButton)
    {
        javax.swing.AbstractButton r0;
        javax.swing.ButtonModel $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;

        r0 := @parameter0: javax.swing.AbstractButton;

        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: javax.swing.ButtonModel getModel()>();

        $z0 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isEnabled()>();

        if $z0 != 0 goto label2;

        $z12 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z12 == 0 goto label1;

        return 5;

     label1:
        return 4;

     label2:
        $z1 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isPressed()>();

        if $z1 == 0 goto label4;

        $z9 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isArmed()>();

        if $z9 == 0 goto label4;

        $z10 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z10 == 0 goto label3;

        return 1;

     label3:
        $z11 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z11 == 0 goto label9;

        return 3;

     label4:
        $z2 = virtualinvoke r0.<javax.swing.AbstractButton: boolean isRolloverEnabled()>();

        if $z2 == 0 goto label6;

        $z7 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isRollover()>();

        if $z7 == 0 goto label6;

        $z8 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z8 == 0 goto label5;

        return 1;

     label5:
        return 2;

     label6:
        $z3 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z3 == 0 goto label7;

        return 3;

     label7:
        $z4 = virtualinvoke r0.<javax.swing.AbstractButton: boolean hasFocus()>();

        if $z4 == 0 goto label9;

        $z5 = virtualinvoke r0.<javax.swing.AbstractButton: boolean isFocusPainted()>();

        if $z5 == 0 goto label9;

        $z6 = interfaceinvoke $r1.<javax.swing.ButtonModel: boolean isSelected()>();

        if $z6 == 0 goto label8;

        return 1;

     label8:
        return 2;

     label9:
        return 0;
    }

    public static int[] getButtonState(com.jidesoft.swing.JideSplitButton)
    {
        int[] r0;
        com.jidesoft.swing.JideSplitButton r1;
        javax.swing.ButtonModel $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        com.jidesoft.swing.SplitButtonModel r3;

        r1 := @parameter0: com.jidesoft.swing.JideSplitButton;

        r0 = newarray (int)[2];

        $r2 = virtualinvoke r1.<com.jidesoft.swing.JideSplitButton: javax.swing.ButtonModel getModel()>();

        r3 = (com.jidesoft.swing.SplitButtonModel) $r2;

        $z0 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isEnabled()>();

        if $z0 != 0 goto label02;

        $z19 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonSelected()>();

        if $z19 == 0 goto label01;

        r0[0] = 5;

        goto label16;

     label01:
        r0[0] = 4;

        goto label16;

     label02:
        $z1 = virtualinvoke r1.<com.jidesoft.swing.JideSplitButton: boolean hasFocus()>();

        if $z1 == 0 goto label05;

        $z16 = virtualinvoke r1.<com.jidesoft.swing.JideSplitButton: boolean isFocusPainted()>();

        if $z16 == 0 goto label05;

        $z17 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonSelected()>();

        if $z17 == 0 goto label03;

        r0[0] = 3;

        r0[1] = 7;

        goto label16;

     label03:
        $z18 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isSelected()>();

        if $z18 == 0 goto label04;

        r0[0] = 7;

        r0[1] = 3;

        goto label16;

     label04:
        r0[0] = 2;

        r0[1] = 7;

        goto label16;

     label05:
        $z2 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isPressed()>();

        if $z2 == 0 goto label07;

        $z13 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isArmed()>();

        if $z13 == 0 goto label07;

        $z14 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonRollover()>();

        if $z14 == 0 goto label06;

        r0[0] = 1;

        r0[1] = 7;

        goto label16;

     label06:
        $z15 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isRollover()>();

        if $z15 == 0 goto label16;

        r0[0] = 7;

        r0[1] = 2;

        goto label16;

     label07:
        $z3 = virtualinvoke r1.<com.jidesoft.swing.JideSplitButton: boolean isRolloverEnabled()>();

        if $z3 == 0 goto label10;

        $z10 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonRollover()>();

        if $z10 == 0 goto label10;

        $z11 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonSelected()>();

        if $z11 == 0 goto label08;

        r0[0] = 1;

        r0[1] = 7;

        goto label16;

     label08:
        $z12 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isSelected()>();

        if $z12 == 0 goto label09;

        r0[0] = 2;

        r0[1] = 1;

        goto label16;

     label09:
        r0[0] = 2;

        r0[1] = 7;

        goto label16;

     label10:
        $z4 = virtualinvoke r1.<com.jidesoft.swing.JideSplitButton: boolean isRolloverEnabled()>();

        if $z4 == 0 goto label13;

        $z7 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isRollover()>();

        if $z7 == 0 goto label13;

        $z8 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonSelected()>();

        if $z8 == 0 goto label11;

        r0[0] = 1;

        r0[1] = 2;

        goto label16;

     label11:
        $z9 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isSelected()>();

        if $z9 == 0 goto label12;

        r0[0] = 7;

        r0[1] = 1;

        goto label16;

     label12:
        r0[0] = 7;

        r0[1] = 2;

        goto label16;

     label13:
        $z5 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isButtonSelected()>();

        if $z5 == 0 goto label14;

        r0[0] = 3;

        r0[1] = 7;

        goto label16;

     label14:
        $z6 = interfaceinvoke r3.<com.jidesoft.swing.SplitButtonModel: boolean isSelected()>();

        if $z6 == 0 goto label15;

        r0[0] = 7;

        r0[1] = 3;

        goto label16;

     label15:
        r0[0] = 0;

        r0[1] = 0;

     label16:
        return r0;
    }

    public static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean equals(java.lang.Object,java.lang.Object,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean equals(java.lang.Object, java.lang.Object, boolean)
    {
        boolean $z0, $z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.CharSequence $r18, $r19;
        java.util.List $r6, $r7, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.Object r0, r1, $r4, $r5, $r9, $r11;
        java.lang.Class $r2, $r3, $r12, $r13, $r15, $r16;
        java.lang.Comparable $r14, $r17;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        z2 := @parameter2: boolean;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r0 == null goto label02;

        if r1 != null goto label02;

        return 0;

     label02:
        if r0 != null goto label03;

        return 0;

     label03:
        $z0 = r0 instanceof java.lang.CharSequence;

        if $z0 == 0 goto label04;

        $z13 = r1 instanceof java.lang.CharSequence;

        if $z13 == 0 goto label04;

        $r19 = (java.lang.CharSequence) r0;

        $r18 = (java.lang.CharSequence) r1;

        $z14 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean equals(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r19, $r18, 1);

        return $z14;

     label04:
        $z1 = r0 instanceof java.lang.Comparable;

        if $z1 == 0 goto label07;

        $z11 = r1 instanceof java.lang.Comparable;

        if $z11 == 0 goto label07;

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z12 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        if $z12 == 0 goto label07;

        $r17 = (java.lang.Comparable) r0;

        $i5 = interfaceinvoke $r17.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i5 != 0 goto label05;

        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        return $z15;

     label07:
        $z16 = r0 instanceof java.lang.Comparable;

        if $z16 == 0 goto label10;

        $z9 = r1 instanceof java.lang.Comparable;

        if $z9 == 0 goto label10;

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z10 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r13);

        if $z10 == 0 goto label10;

        $r14 = (java.lang.Comparable) r1;

        $i4 = interfaceinvoke $r14.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i4 != 0 goto label08;

        $z17 = 1;

        goto label09;

     label08:
        $z17 = 0;

     label09:
        return $z17;

     label10:
        if z2 == 0 goto label15;

        $z6 = r0 instanceof java.util.List;

        if $z6 == 0 goto label15;

        $z7 = r1 instanceof java.util.List;

        if $z7 == 0 goto label15;

        $r6 = (java.util.List) r0;

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = (java.util.List) r1;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i2 == $i3 goto label11;

        return 0;

     label11:
        i6 = 0;

     label12:
        if i6 >= $i2 goto label14;

        $r8 = (java.util.List) r0;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i6);

        $r10 = (java.util.List) r1;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i6);

        $z8 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean equals(java.lang.Object,java.lang.Object,boolean)>($r9, $r11, 1);

        if $z8 != 0 goto label13;

        return 0;

     label13:
        i6 = i6 + 1;

        goto label12;

     label14:
        return 1;

     label15:
        if z2 == 0 goto label20;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z3 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z3 == 0 goto label20;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z4 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z4 == 0 goto label20;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        if $i0 == $i1 goto label16;

        return 0;

     label16:
        i7 = 0;

     label17:
        if i7 >= $i0 goto label19;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i7);

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r1, i7);

        $z5 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean equals(java.lang.Object,java.lang.Object,boolean)>($r4, $r5, 1);

        if $z5 != 0 goto label18;

        return 0;

     label18:
        i7 = i7 + 1;

        goto label17;

     label19:
        return 1;

     label20:
        $z18 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z18;
    }

    public static boolean equals(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        int $i0, $i1, $i2, $i4, i6, i7, i8, $i9, $i11, $i12, $i13;
        boolean z0, $z1;
        java.lang.CharSequence r0, r1;
        char $c3, $c5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        i6 = 0;

        i7 = 0;

        i8 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

     label5:
        $i9 = i8;

        $i11 = (int) -1;

        i8 = i8 + $i11;

        if $i9 <= 0 goto label8;

        $i2 = i6;

        i6 = i6 + 1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $i4 = i7;

        i7 = i7 + 1;

        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i4);

        $i12 = (int) $c3;

        $i13 = (int) $c5;

        if $i12 != $i13 goto label6;

        goto label5;

     label6:
        if z0 != 0 goto label7;

        $z1 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean charsEqualIgnoreCase(char,char)>($c3, $c5);

        if $z1 == 0 goto label7;

        goto label5;

     label7:
        return 0;

     label8:
        return 1;
    }

    public static boolean charsEqualIgnoreCase(char, char)
    {
        char c0, c1, $c2, $c3, $c4, $c5;
        int $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i6 = (int) c0;

        $i7 = (int) c1;

        if $i6 == $i7 goto label1;

        $c2 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: char toUpperCase(char)>(c0);

        $c3 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: char toUpperCase(char)>(c1);

        $i8 = (int) $c2;

        $i9 = (int) $c3;

        if $i8 == $i9 goto label1;

        $c4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: char toLowerCase(char)>(c0);

        $c5 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: char toLowerCase(char)>(c1);

        $i10 = (int) $c4;

        $i11 = (int) $c5;

        if $i10 != $i11 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static char toUpperCase(char)
    {
        char c0, $c1, $c3;
        int $i2, $i4, $i5, $i6, $i7, $i9;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 >= 97 goto label1;

        return c0;

     label1:
        $i5 = (int) c0;

        if $i5 < 97 goto label2;

        $i6 = (int) c0;

        if $i6 > 122 goto label2;

        $i7 = (int) c0;

        $i9 = (int) -32;

        $i2 = $i7 + $i9;

        $c3 = (char) $i2;

        return $c3;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c0);

        return $c1;
    }

    public static char toLowerCase(char)
    {
        char c0, $c1, $c3;
        int $i2, $i4, $i5, $i6, $i7, $i8, $i9;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 < 65 goto label1;

        $i5 = (int) c0;

        if $i5 < 97 goto label2;

        $i6 = (int) c0;

        if $i6 > 122 goto label2;

     label1:
        return c0;

     label2:
        $i7 = (int) c0;

        if $i7 < 65 goto label3;

        $i8 = (int) c0;

        if $i8 > 90 goto label3;

        $i9 = (int) c0;

        $i2 = $i9 + 32;

        $c3 = (char) $i2;

        return $c3;

     label3:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        return $c1;
    }

    public static java.awt.image.BufferedImage getFasterScaledInstance(java.awt.image.BufferedImage, int, int, java.lang.Object, boolean)
    {
        byte b1, $b7;
        java.awt.Graphics2D $r3, r8;
        int $i0, $i2, i3, i4, $i5, $i6, i8, i9, i10, i11;
        boolean z0, z1, $z2;
        java.awt.image.BufferedImage r0, $r1, $r2, r6, r7;
        java.awt.RenderingHints$Key $r5;
        java.lang.Object r4;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        r4 := @parameter3: java.lang.Object;

        z1 := @parameter4: boolean;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getTransparency()>();

        if $i0 != 1 goto label01;

        $b7 = 1;

        goto label02;

     label01:
        $b7 = 2;

     label02:
        b1 = $b7;

        r6 = r0;

        r7 = null;

        r8 = null;

        i8 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        i9 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        $i2 = virtualinvoke r0.<java.awt.image.BufferedImage: int getTransparency()>();

        if $i2 == 1 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z0 = $z2;

        if z1 == 0 goto label05;

        i10 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        i11 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        goto label06;

     label05:
        i10 = i3;

        i11 = i4;

     label06:
        if z1 == 0 goto label07;

        if i10 <= i3 goto label07;

        i10 = i10 / 2;

        if i10 >= i3 goto label07;

        i10 = i3;

     label07:
        if z1 == 0 goto label08;

        if i11 <= i4 goto label08;

        i11 = i11 / 2;

        if i11 >= i4 goto label08;

        i11 = i4;

     label08:
        if r7 == null goto label09;

        if z0 == 0 goto label10;

     label09:
        $r1 = new java.awt.image.BufferedImage;

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i10, i11, b1);

        r7 = $r1;

        r8 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

     label10:
        if r8 == null goto label11;

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        virtualinvoke r8.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, r4);

        virtualinvoke r8.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, i10, i11, 0, 0, i8, i9, null);

     label11:
        i8 = i10;

        i9 = i11;

        r6 = r7;

        if i10 != i3 goto label06;

        if i11 != i4 goto label06;

        if r8 == null goto label12;

        virtualinvoke r8.<java.awt.Graphics2D: void dispose()>();

     label12:
        $i5 = virtualinvoke r6.<java.awt.image.BufferedImage: int getWidth()>();

        if i3 != $i5 goto label13;

        $i6 = virtualinvoke r6.<java.awt.image.BufferedImage: int getHeight()>();

        if i4 == $i6 goto label14;

     label13:
        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i3, i4, b1);

        $r3 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r3.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, null);

        virtualinvoke $r3.<java.awt.Graphics2D: void dispose()>();

        r6 = $r2;

     label14:
        return r6;
    }

    public static boolean shouldUseSystemFont()
    {
        java.lang.Boolean $r6, $r7;
        java.lang.String $r0, $r1, $r2, r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z7, $z8, $z9, $z10, $z11, $z12;
        java.security.AccessControlException $r8;
        java.lang.Object $r4, $r5;
        com.jidesoft.swing.JideSwingUtilities$GetPropertyAction $r3;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("jide.useSystemfont", "");

        $r1 = "false";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $r2 = "true";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z1 == 0 goto label02;

        return 1;

     label02:
        $z2 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk15Above()>();

        if $z2 != 0 goto label03;

        $z3 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isCJKLocale()>();

        if $z3 == 0 goto label04;

     label03:
        return 1;

     label04:
        r9 = null;

     label05:
        $r3 = new com.jidesoft.swing.JideSwingUtilities$GetPropertyAction;

        specialinvoke $r3.<com.jidesoft.swing.JideSwingUtilities$GetPropertyAction: void <init>(java.lang.String)>("swing.useSystemFontSettings");

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);

        r9 = (java.lang.String) $r4;

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

     label08:
        if r9 == null goto label09;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r9);

        $z5 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == 0 goto label09;

        $z12 = 1;

        $z11 = 1;

        goto label10;

     label09:
        $z12 = 0;

        $z11 = 0;

     label10:
        z7 = $z11;

        if $z12 == 0 goto label14;

        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>("Application.useSystemFontSettings");

        if $r5 != null goto label11;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z4 = virtualinvoke $r6.<java.lang.Boolean: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label12;

     label11:
        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        z7 = $z8;

     label14:
        $r10 = "true";

        $r11 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("defaultFont", "false");

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z9 != 0 goto label15;

        if z7 == 0 goto label16;

     label15:
        $z10 = 1;

        goto label17;

     label16:
        $z10 = 0;

     label17:
        return $z10;

        catch java.security.AccessControlException from label05 to label06 with label07;
    }

    public static void printUIDefaults()
    {
        java.util.Enumeration $r1;
        java.util.ArrayList $r2;
        java.lang.String r8, $r15, $r23, $r24;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r3, $r4, $r5, $r10, $r18;
        java.util.Iterator $r6;
        javax.swing.UIDefaults $r0;
        java.lang.Object $r7, $r13, $r16, $r21;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r17, $r19, $r20, $r22;

        $r0 = staticinvoke <javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>();

        $r1 = virtualinvoke $r0.<javax.swing.UIDefaults: java.util.Enumeration keys()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Non-string keys ---");

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r16 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        $z2 = $r16 instanceof java.lang.String;

        if $z2 == 0 goto label2;

        $r24 = (java.lang.String) $r16;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label3;

     label2:
        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r21 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>($r16);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label3:
        goto label1;

     label4:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println()>();

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("String keys ---");

        $r6 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ");

        $r13 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.Object get(java.lang.Object)>(r8);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r15);

        goto label5;

     label6:
        return;
    }

    public static void setRecursively(java.awt.Component, com.jidesoft.swing.JideSwingUtilities$Handler)
    {
        java.awt.Component r0;
        com.jidesoft.swing.JideSwingUtilities$Handler r1;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: com.jidesoft.swing.JideSwingUtilities$Handler;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively0(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, r1);

        interfaceinvoke r1.<com.jidesoft.swing.JideSwingUtilities$Handler: void postAction(java.awt.Component)>(r0);

        return;
    }

    private static void setRecursively0(java.awt.Component, com.jidesoft.swing.JideSwingUtilities$Handler)
    {
        javax.swing.JTabbedPane r8;
        int $i0, $i1, i2, i3, i4;
        java.awt.Component[] r7, r9;
        java.awt.Container $r3;
        com.jidesoft.swing.JideSwingUtilities$ConditionHandler $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.jidesoft.swing.JideSwingUtilities$Handler r0;
        javax.swing.JMenu $r5;
        java.awt.Component r1, r2, $r4;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.swing.JideSwingUtilities$Handler;

        $z0 = interfaceinvoke r0.<com.jidesoft.swing.JideSwingUtilities$Handler: boolean condition(java.awt.Component)>(r1);

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<com.jidesoft.swing.JideSwingUtilities$Handler: void action(java.awt.Component)>(r1);

     label1:
        $z1 = r0 instanceof com.jidesoft.swing.JideSwingUtilities$ConditionHandler;

        if $z1 == 0 goto label2;

        $r6 = (com.jidesoft.swing.JideSwingUtilities$ConditionHandler) r0;

        $z5 = interfaceinvoke $r6.<com.jidesoft.swing.JideSwingUtilities$ConditionHandler: boolean stopCondition(java.awt.Component)>(r1);

        if $z5 == 0 goto label2;

        return;

     label2:
        r7 = null;

        $z2 = r1 instanceof javax.swing.JMenu;

        if $z2 == 0 goto label3;

        $r5 = (javax.swing.JMenu) r1;

        r7 = virtualinvoke $r5.<javax.swing.JMenu: java.awt.Component[] getMenuComponents()>();

        goto label7;

     label3:
        $z3 = r1 instanceof javax.swing.JTabbedPane;

        if $z3 == 0 goto label6;

        r8 = (javax.swing.JTabbedPane) r1;

        $i0 = virtualinvoke r8.<javax.swing.JTabbedPane: int getTabCount()>();

        r7 = newarray (java.awt.Component)[$i0];

        i2 = 0;

     label4:
        $i1 = lengthof r7;

        if i2 >= $i1 goto label5;

        $r4 = virtualinvoke r8.<javax.swing.JTabbedPane: java.awt.Component getComponentAt(int)>(i2);

        r7[i2] = $r4;

        i2 = i2 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        $z4 = r1 instanceof java.awt.Container;

        if $z4 == 0 goto label7;

        $r3 = (java.awt.Container) r1;

        r7 = virtualinvoke $r3.<java.awt.Container: java.awt.Component[] getComponents()>();

     label7:
        if r7 == null goto label9;

        r9 = r7;

        i3 = lengthof r7;

        i4 = 0;

     label8:
        if i4 >= i3 goto label9;

        r2 = r9[i4];

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively0(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r2, r0);

        i4 = i4 + 1;

        goto label8;

     label9:
        return;
    }

    public static java.awt.Component findFirstComponentByName(java.awt.Container, java.lang.String)
    {
        int $i0;
        com.jidesoft.swing.JideSwingUtilities$1 $r3;
        java.lang.String r0, $r1;
        java.awt.Container r2;
        java.awt.Component $r4;

        r2 := @parameter0: java.awt.Container;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label1;

        $r3 = new com.jidesoft.swing.JideSwingUtilities$1;

        specialinvoke $r3.<com.jidesoft.swing.JideSwingUtilities$1: void <init>(java.lang.String)>(r0);

        $r4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$GetHandler)>(r2, $r3);

        return $r4;

     label1:
        return null;
    }

    public static java.awt.Component findFirstComponentByClass(java.awt.Container, java.lang.Class)
    {
        com.jidesoft.swing.JideSwingUtilities$2 $r2;
        java.lang.Class r0;
        java.awt.Container r1;
        java.awt.Component $r3;

        r1 := @parameter0: java.awt.Container;

        r0 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        $r2 = new com.jidesoft.swing.JideSwingUtilities$2;

        specialinvoke $r2.<com.jidesoft.swing.JideSwingUtilities$2: void <init>(java.lang.Class)>(r0);

        $r3 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$GetHandler)>(r1, $r2);

        return $r3;

     label1:
        return null;
    }

    public static java.awt.Component getRecursively(java.awt.Component, com.jidesoft.swing.JideSwingUtilities$GetHandler)
    {
        com.jidesoft.swing.JideSwingUtilities$GetHandler r1;
        java.awt.Component r0, $r2;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: com.jidesoft.swing.JideSwingUtilities$GetHandler;

        $r2 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getRecursively0(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$GetHandler)>(r0, r1);

        return $r2;
    }

    private static java.awt.Component getRecursively0(java.awt.Component, com.jidesoft.swing.JideSwingUtilities$GetHandler)
    {
        javax.swing.JMenu $r6;
        java.awt.Component r1, r3, $r4, $r7;
        com.jidesoft.swing.JideSwingUtilities$GetHandler r0;
        java.awt.Component[] r2, r8;
        int i0, i1;
        java.awt.Container $r5;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: com.jidesoft.swing.JideSwingUtilities$GetHandler;

        $z0 = interfaceinvoke r0.<com.jidesoft.swing.JideSwingUtilities$GetHandler: boolean condition(java.awt.Component)>(r1);

        if $z0 == 0 goto label1;

        $r7 = interfaceinvoke r0.<com.jidesoft.swing.JideSwingUtilities$GetHandler: java.awt.Component action(java.awt.Component)>(r1);

        return $r7;

     label1:
        r8 = null;

        $z1 = r1 instanceof javax.swing.JMenu;

        if $z1 == 0 goto label2;

        $r6 = (javax.swing.JMenu) r1;

        r8 = virtualinvoke $r6.<javax.swing.JMenu: java.awt.Component[] getMenuComponents()>();

        goto label3;

     label2:
        $z2 = r1 instanceof java.awt.Container;

        if $z2 == 0 goto label3;

        $r5 = (java.awt.Container) r1;

        r8 = virtualinvoke $r5.<java.awt.Container: java.awt.Component[] getComponents()>();

     label3:
        if r8 == null goto label6;

        r2 = r8;

        i0 = lengthof r8;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        $r4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getRecursively0(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$GetHandler)>(r3, r0);

        if $r4 == null goto label5;

        return $r4;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return null;
    }

    public static void setEnabledRecursively(java.awt.Component, boolean)
    {
        com.jidesoft.swing.JideSwingUtilities$3 $r1;
        java.awt.Component r0;
        boolean z0;

        r0 := @parameter0: java.awt.Component;

        z0 := @parameter1: boolean;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$3;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$3: void <init>(boolean)>(z0);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

        return;
    }

    public static void putClientPropertyRecursively(java.awt.Component, java.lang.String, java.lang.Object)
    {
        java.lang.Object r3;
        com.jidesoft.swing.JideSwingUtilities$4 $r1;
        java.lang.String r2;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$4;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$4: void <init>(java.lang.String,java.lang.Object)>(r2, r3);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

        return;
    }

    public static void setRequestFocusEnabledRecursively(java.awt.Component, boolean)
    {
        com.jidesoft.swing.JideSwingUtilities$5 $r1;
        java.awt.Component r0;
        boolean z0;

        r0 := @parameter0: java.awt.Component;

        z0 := @parameter1: boolean;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$5;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$5: void <init>(boolean)>(z0);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

        return;
    }

    public static void setOpaqueRecursively(java.awt.Component, boolean)
    {
        java.awt.Component r0;
        com.jidesoft.swing.JideSwingUtilities$6 $r1;
        boolean z0;

        r0 := @parameter0: java.awt.Component;

        z0 := @parameter1: boolean;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$6;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$6: void <init>(boolean)>(z0);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

        return;
    }

    public static java.awt.Dimension getPreferredButtonSize(javax.swing.AbstractButton, int, boolean)
    {
        java.awt.Rectangle $r5, $r6, $r7, $r8;
        java.awt.Insets $r9;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        javax.swing.AbstractButton r0;
        java.lang.String $r2;
        boolean z0;
        java.awt.Font $r3;
        javax.swing.Icon $r1;
        java.awt.Dimension $r10;
        java.awt.FontMetrics $r4;

        r0 := @parameter0: javax.swing.AbstractButton;

        i5 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<javax.swing.AbstractButton: int getComponentCount()>();

        if $i0 <= 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<javax.swing.AbstractButton: javax.swing.Icon getIcon()>();

        $r2 = virtualinvoke r0.<javax.swing.AbstractButton: java.lang.String getText()>();

        $r3 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.Font getFont()>();

        $r4 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r3);

        $r5 = new java.awt.Rectangle;

        specialinvoke $r5.<java.awt.Rectangle: void <init>()>();

        $r6 = new java.awt.Rectangle;

        specialinvoke $r6.<java.awt.Rectangle: void <init>()>();

        $r7 = new java.awt.Rectangle;

        specialinvoke $r7.<java.awt.Rectangle: void <init>(int,int)>(32767, 32767);

        $i1 = virtualinvoke r0.<javax.swing.AbstractButton: int getVerticalAlignment()>();

        $i2 = virtualinvoke r0.<javax.swing.AbstractButton: int getHorizontalAlignment()>();

        $i3 = virtualinvoke r0.<javax.swing.AbstractButton: int getVerticalTextPosition()>();

        $i4 = virtualinvoke r0.<javax.swing.AbstractButton: int getHorizontalTextPosition()>();

        if $r2 != null goto label2;

        $i16 = 0;

        goto label3;

     label2:
        $i16 = i5;

     label3:
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.String layoutCompoundLabel(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,boolean,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, $r4, $r2, $r1, z0, $i1, $i2, $i3, $i4, $r7, $r5, $r6, $i16);

        $r8 = virtualinvoke $r5.<java.awt.Rectangle: java.awt.Rectangle union(java.awt.Rectangle)>($r6);

        $r9 = virtualinvoke r0.<javax.swing.AbstractButton: java.awt.Insets getInsets()>();

        $i9 = $r8.<java.awt.Rectangle: int width>;

        $i7 = $r9.<java.awt.Insets: int left>;

        $i6 = $r9.<java.awt.Insets: int right>;

        $i8 = $i7 + $i6;

        $i10 = $i9 + $i8;

        $r8.<java.awt.Rectangle: int width> = $i10;

        $i14 = $r8.<java.awt.Rectangle: int height>;

        $i12 = $r9.<java.awt.Insets: int top>;

        $i11 = $r9.<java.awt.Insets: int bottom>;

        $i13 = $i12 + $i11;

        $i15 = $i14 + $i13;

        $r8.<java.awt.Rectangle: int height> = $i15;

        $r10 = virtualinvoke $r8.<java.awt.Rectangle: java.awt.Dimension getSize()>();

        return $r10;
    }

    public static java.lang.String layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, boolean, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)
    {
        java.awt.Rectangle r4, r5, r6;
        byte $b7, $b8, $b9, $b10;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.String r2, $r8;
        boolean z0, $z1, z2, z3, z4, z5, z6;
        javax.swing.JComponent r0;
        javax.swing.Icon r3;
        java.awt.ComponentOrientation $r7;
        java.awt.FontMetrics r1;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.FontMetrics;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: javax.swing.Icon;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        i0 := @parameter6: int;

        i3 := @parameter7: int;

        i1 := @parameter8: int;

        r4 := @parameter9: java.awt.Rectangle;

        r5 := @parameter10: java.awt.Rectangle;

        r6 := @parameter11: java.awt.Rectangle;

        i4 := @parameter12: int;

        z2 = 1;

        z6 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        i5 = i0;

        i6 = i1;

        if r0 == null goto label01;

        $r7 = virtualinvoke r0.<javax.swing.JComponent: java.awt.ComponentOrientation getComponentOrientation()>();

        $z1 = virtualinvoke $r7.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z1 != 0 goto label01;

        z2 = 0;

        z6 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

     label01:
        lookupswitch(i0)
        {
            case 10: goto label02;
            case 11: goto label05;
            default: goto label08;
        };

     label02:
        if z5 == 0 goto label03;

        $b7 = 2;

        goto label04;

     label03:
        $b7 = 4;

     label04:
        i5 = $b7;

        goto label08;

     label05:
        if z3 == 0 goto label06;

        $b8 = 4;

        goto label07;

     label06:
        $b8 = 2;

     label07:
        i5 = $b8;

     label08:
        lookupswitch(i1)
        {
            case 10: goto label09;
            case 11: goto label12;
            default: goto label15;
        };

     label09:
        if z6 == 0 goto label10;

        $b9 = 2;

        goto label11;

     label10:
        $b9 = 4;

     label11:
        i6 = $b9;

        goto label15;

     label12:
        if z4 == 0 goto label13;

        $b10 = 4;

        goto label14;

     label13:
        $b10 = 2;

     label14:
        i6 = $b10;

     label15:
        $r8 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,boolean,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, r1, r2, r3, z0, i2, i5, i3, i6, r4, r5, r6, i4);

        return $r8;
    }

    public static java.lang.String layoutCompoundLabel(java.awt.FontMetrics, java.lang.String, javax.swing.Icon, boolean, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)
    {
        java.awt.Rectangle r3, r4, r5;
        javax.swing.Icon r2;
        java.awt.FontMetrics r0;
        int i0, i1, i2, i3, i4;
        java.lang.String r1, $r6;
        boolean z0;

        r0 := @parameter0: java.awt.FontMetrics;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javax.swing.Icon;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        r3 := @parameter8: java.awt.Rectangle;

        r4 := @parameter9: java.awt.Rectangle;

        r5 := @parameter10: java.awt.Rectangle;

        i4 := @parameter11: int;

        $r6 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,boolean,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(null, r0, r1, r2, z0, i0, i1, i2, i3, r3, r4, r5, i4);

        return $r6;
    }

    private static java.lang.String layoutCompoundLabelImpl(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, boolean, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)
    {
        javax.swing.JComponent r0;
        java.awt.Rectangle r4, r5, r6;
        javax.swing.Icon r3;
        java.awt.FontMetrics r1;
        int i0, i1, i2, i3, i4;
        java.lang.String r2, $r7, $r8;
        boolean z0;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.FontMetrics;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: javax.swing.Icon;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        i3 := @parameter8: int;

        r4 := @parameter9: java.awt.Rectangle;

        r5 := @parameter10: java.awt.Rectangle;

        r6 := @parameter11: java.awt.Rectangle;

        i4 := @parameter12: int;

        if z0 == 0 goto label1;

        $r8 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.String layoutCompoundLabelImplHorizontal(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, r1, r2, r3, i0, i1, i2, i3, r4, r5, r6, i4);

        return $r8;

     label1:
        $r7 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.String layoutCompoundLabelImplVertical(javax.swing.JComponent,java.awt.FontMetrics,java.lang.String,javax.swing.Icon,int,int,int,int,java.awt.Rectangle,java.awt.Rectangle,java.awt.Rectangle,int)>(r0, r1, r2, r3, i0, i1, i2, i3, r4, r5, r6, i4);

        return $r7;
    }

    private static java.lang.String getMaxLengthWord(java.lang.String)
    {
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i12, $i14, $i16, $i18;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        $i12 = (int) -1;

        if $i0 != $i12 goto label1;

        return r0;

     label1:
        i8 = virtualinvoke r0.<java.lang.String: int length()>();

        $i14 = (int) -1;

        i9 = $i14;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = $i1 / 2;

        $i16 = (int) -1;

        i10 = $i16;

     label2:
        $i3 = i10 + 1;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(32, $i3);

        i10 = $i4;

        $i18 = (int) -1;

        if $i4 != $i18 goto label3;

        goto label5;

     label3:
        $i5 = $i4 - i2;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i6 >= i8 goto label4;

        i8 = $i6;

        i9 = $i4;

     label4:
        goto label2;

     label5:
        if i9 < i2 goto label6;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i9);

        goto label7;

     label6:
        $i7 = i9 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i7);

     label7:
        return $r1;
    }

    private static java.lang.String layoutCompoundLabelImplHorizontal(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)
    {
        javax.swing.text.View r13, $r14;
        java.lang.StringBuilder $r6, $r8, $r9;
        java.lang.String $r7, $r10, r12;
        java.awt.FontMetrics r4;
        boolean z0, $z1, $z3, $z4;
        javax.swing.Icon r0;
        float $f0, $f1;
        java.awt.Rectangle r1, r3, r5;
        int $i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i59, i60, $i61, $i62, $i63, $i64, $i65, i66, i67, i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, i91, i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100;
        javax.swing.JComponent r2;
        char $c58;
        java.lang.Object $r11;

        r2 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: java.awt.FontMetrics;

        r12 := @parameter2: java.lang.String;

        r0 := @parameter3: javax.swing.Icon;

        i9 := @parameter4: int;

        i14 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        r5 := @parameter8: java.awt.Rectangle;

        r1 := @parameter9: java.awt.Rectangle;

        r3 := @parameter10: java.awt.Rectangle;

        i60 := @parameter11: int;

        if r0 == null goto label01;

        $i63 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        r1.<java.awt.Rectangle: int width> = $i63;

        $i64 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        r1.<java.awt.Rectangle: int height> = $i64;

        goto label02;

     label01:
        r1.<java.awt.Rectangle: int height> = 0;

        r1.<java.awt.Rectangle: int width> = 0;

     label02:
        if r12 == null goto label03;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label04;

     label03:
        $z4 = 1;

        $z3 = 1;

        goto label05;

     label04:
        $z4 = 0;

        $z3 = 0;

     label05:
        z0 = $z3;

        r13 = null;

        if $z4 == 0 goto label06;

        r3.<java.awt.Rectangle: int height> = 0;

        r3.<java.awt.Rectangle: int width> = 0;

        r12 = "";

        goto label10;

     label06:
        if r2 == null goto label07;

        $r11 = virtualinvoke r2.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>("html");

        $r14 = (javax.swing.text.View) $r11;

        goto label08;

     label07:
        $r14 = null;

     label08:
        r13 = $r14;

        if $r14 == null goto label09;

        $f0 = virtualinvoke $r14.<javax.swing.text.View: float getPreferredSpan(int)>(0);

        $i61 = (int) $f0;

        r3.<java.awt.Rectangle: int width> = $i61;

        $f1 = virtualinvoke $r14.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        $i62 = (int) $f1;

        r3.<java.awt.Rectangle: int height> = $i62;

        goto label10;

     label09:
        $i0 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>(r4, r12);

        r3.<java.awt.Rectangle: int width> = $i0;

        $i1 = virtualinvoke r4.<java.awt.FontMetrics: int getHeight()>();

        r3.<java.awt.Rectangle: int height> = $i1;

     label10:
        if z0 != 0 goto label11;

        if r0 != null goto label12;

     label11:
        $i65 = 0;

        goto label13;

     label12:
        $i65 = i60;

     label13:
        i2 = $i65;

        if z0 != 0 goto label20;

        if i4 != 0 goto label14;

        i66 = r5.<java.awt.Rectangle: int width>;

        goto label15;

     label14:
        $i54 = r5.<java.awt.Rectangle: int width>;

        $i52 = r1.<java.awt.Rectangle: int width>;

        $i53 = $i52 + $i65;

        i66 = $i54 - $i53;

     label15:
        $i55 = r3.<java.awt.Rectangle: int width>;

        if $i55 <= i66 goto label20;

        if r13 == null goto label16;

        r3.<java.awt.Rectangle: int width> = i66;

        goto label20;

     label16:
        i67 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>(r4, "...");

        i68 = 0;

     label17:
        $i56 = virtualinvoke r12.<java.lang.String: int length()>();

        if i68 >= $i56 goto label19;

        $c58 = virtualinvoke r12.<java.lang.String: char charAt(int)>(i68);

        $i59 = virtualinvoke r4.<java.awt.FontMetrics: int charWidth(char)>($c58);

        i67 = i67 + $i59;

        if i67 <= i66 goto label18;

        goto label19;

     label18:
        i68 = i68 + 1;

        goto label17;

     label19:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>(0, i68);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r10;

        $i57 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>(r4, $r10);

        r3.<java.awt.Rectangle: int width> = $i57;

     label20:
        if i3 != 1 goto label22;

        if i4 == 0 goto label21;

        r3.<java.awt.Rectangle: int y> = 0;

        goto label25;

     label21:
        $i49 = r3.<java.awt.Rectangle: int height>;

        $i50 = $i49 + i2;

        $i51 = neg $i50;

        r3.<java.awt.Rectangle: int y> = $i51;

        goto label25;

     label22:
        if i3 != 0 goto label23;

        $i44 = r1.<java.awt.Rectangle: int height>;

        $i47 = $i44 >> 1;

        $i45 = r3.<java.awt.Rectangle: int height>;

        $i46 = $i45 >> 1;

        $i48 = $i47 - $i46;

        r3.<java.awt.Rectangle: int y> = $i48;

        goto label25;

     label23:
        if i4 == 0 goto label24;

        $i42 = r1.<java.awt.Rectangle: int height>;

        $i41 = r3.<java.awt.Rectangle: int height>;

        $i43 = $i42 - $i41;

        r3.<java.awt.Rectangle: int y> = $i43;

        goto label25;

     label24:
        $i5 = r1.<java.awt.Rectangle: int height>;

        $i6 = $i5 + i2;

        r3.<java.awt.Rectangle: int y> = $i6;

     label25:
        if i4 != 2 goto label26;

        $i38 = r3.<java.awt.Rectangle: int width>;

        $i39 = $i38 + i2;

        $i40 = neg $i39;

        r3.<java.awt.Rectangle: int x> = $i40;

        goto label28;

     label26:
        if i4 != 0 goto label27;

        $i33 = r1.<java.awt.Rectangle: int width>;

        $i36 = $i33 >> 1;

        $i34 = r3.<java.awt.Rectangle: int width>;

        $i35 = $i34 >> 1;

        $i37 = $i36 - $i35;

        r3.<java.awt.Rectangle: int x> = $i37;

        goto label28;

     label27:
        $i7 = r1.<java.awt.Rectangle: int width>;

        $i8 = $i7 + i2;

        r3.<java.awt.Rectangle: int x> = $i8;

     label28:
        $i69 = r1.<java.awt.Rectangle: int x>;

        $i70 = r3.<java.awt.Rectangle: int x>;

        $i71 = staticinvoke <java.lang.Math: int min(int,int)>($i69, $i70);

        $i72 = r1.<java.awt.Rectangle: int x>;

        $i73 = r1.<java.awt.Rectangle: int width>;

        $i74 = $i72 + $i73;

        $i75 = r3.<java.awt.Rectangle: int x>;

        $i76 = r3.<java.awt.Rectangle: int width>;

        $i77 = $i75 + $i76;

        $i78 = staticinvoke <java.lang.Math: int max(int,int)>($i74, $i77);

        $i79 = $i78 - $i71;

        $i80 = r1.<java.awt.Rectangle: int y>;

        $i81 = r3.<java.awt.Rectangle: int y>;

        $i82 = staticinvoke <java.lang.Math: int min(int,int)>($i80, $i81);

        $i83 = r1.<java.awt.Rectangle: int y>;

        $i84 = r1.<java.awt.Rectangle: int height>;

        $i85 = $i83 + $i84;

        $i86 = r3.<java.awt.Rectangle: int y>;

        $i87 = r3.<java.awt.Rectangle: int height>;

        $i88 = $i86 + $i87;

        $i89 = staticinvoke <java.lang.Math: int max(int,int)>($i85, $i88);

        $i90 = $i89 - $i82;

        if i9 != 1 goto label29;

        $i32 = r5.<java.awt.Rectangle: int y>;

        i91 = $i32 - $i82;

        goto label31;

     label29:
        if i9 != 0 goto label30;

        $i28 = r5.<java.awt.Rectangle: int y>;

        $i26 = r5.<java.awt.Rectangle: int height>;

        $i27 = $i26 >> 1;

        $i31 = $i28 + $i27;

        $i29 = $i90 >> 1;

        $i30 = $i82 + $i29;

        i91 = $i31 - $i30;

        goto label31;

     label30:
        $i11 = r5.<java.awt.Rectangle: int y>;

        $i10 = r5.<java.awt.Rectangle: int height>;

        $i13 = $i11 + $i10;

        $i12 = $i82 + $i90;

        i91 = $i13 - $i12;

     label31:
        if i14 != 2 goto label32;

        $i25 = r5.<java.awt.Rectangle: int x>;

        i92 = $i25 - $i71;

        goto label34;

     label32:
        if i14 != 4 goto label33;

        $i22 = r5.<java.awt.Rectangle: int x>;

        $i21 = r5.<java.awt.Rectangle: int width>;

        $i24 = $i22 + $i21;

        $i23 = $i71 + $i79;

        i92 = $i24 - $i23;

        goto label34;

     label33:
        $i17 = r5.<java.awt.Rectangle: int x>;

        $i15 = r5.<java.awt.Rectangle: int width>;

        $i16 = $i15 >> 1;

        $i20 = $i17 + $i16;

        $i18 = $i79 >> 1;

        $i19 = $i71 + $i18;

        i92 = $i20 - $i19;

     label34:
        $i93 = r3.<java.awt.Rectangle: int x>;

        $i94 = $i93 + i92;

        r3.<java.awt.Rectangle: int x> = $i94;

        $i95 = r3.<java.awt.Rectangle: int y>;

        $i96 = $i95 + i91;

        r3.<java.awt.Rectangle: int y> = $i96;

        $i97 = r1.<java.awt.Rectangle: int x>;

        $i98 = $i97 + i92;

        r1.<java.awt.Rectangle: int x> = $i98;

        $i99 = r1.<java.awt.Rectangle: int y>;

        $i100 = $i99 + i91;

        r1.<java.awt.Rectangle: int y> = $i100;

        return r12;
    }

    private static java.lang.String layoutCompoundLabelImplVertical(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)
    {
        java.lang.StringBuilder $r6, $r8, $r9;
        int $i0, $i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i64, i65, $i66, $i67, $i68, $i69, $i70, i71, i72, i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, i96, i97, i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106;
        java.lang.Object $r11;
        javax.swing.text.View r13, $r14;
        java.lang.String $r7, $r10, r12;
        java.awt.FontMetrics r4;
        boolean z0, $z1, $z3, $z4;
        javax.swing.Icon r0;
        float $f0, $f1;
        java.awt.Rectangle r1, r3, r5;
        javax.swing.JComponent r2;
        char $c63;

        r2 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: java.awt.FontMetrics;

        r12 := @parameter2: java.lang.String;

        r0 := @parameter3: javax.swing.Icon;

        i9 := @parameter4: int;

        i15 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        r5 := @parameter8: java.awt.Rectangle;

        r1 := @parameter9: java.awt.Rectangle;

        r3 := @parameter10: java.awt.Rectangle;

        i65 := @parameter11: int;

        if r0 == null goto label01;

        $i68 = interfaceinvoke r0.<javax.swing.Icon: int getIconWidth()>();

        r1.<java.awt.Rectangle: int width> = $i68;

        $i69 = interfaceinvoke r0.<javax.swing.Icon: int getIconHeight()>();

        r1.<java.awt.Rectangle: int height> = $i69;

        goto label02;

     label01:
        r1.<java.awt.Rectangle: int height> = 0;

        r1.<java.awt.Rectangle: int width> = 0;

     label02:
        if r12 == null goto label03;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label04;

     label03:
        $z4 = 1;

        $z3 = 1;

        goto label05;

     label04:
        $z4 = 0;

        $z3 = 0;

     label05:
        z0 = $z3;

        r13 = null;

        if $z4 == 0 goto label06;

        r3.<java.awt.Rectangle: int height> = 0;

        r3.<java.awt.Rectangle: int width> = 0;

        r12 = "";

        goto label10;

     label06:
        if r2 == null goto label07;

        $r11 = virtualinvoke r2.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>("html");

        $r14 = (javax.swing.text.View) $r11;

        goto label08;

     label07:
        $r14 = null;

     label08:
        r13 = $r14;

        if $r14 == null goto label09;

        $f0 = virtualinvoke $r14.<javax.swing.text.View: float getPreferredSpan(int)>(0);

        $i66 = (int) $f0;

        r3.<java.awt.Rectangle: int height> = $i66;

        $f1 = virtualinvoke $r14.<javax.swing.text.View: float getPreferredSpan(int)>(1);

        $i67 = (int) $f1;

        r3.<java.awt.Rectangle: int width> = $i67;

        goto label10;

     label09:
        $i0 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>(r4, r12);

        r3.<java.awt.Rectangle: int height> = $i0;

        $i1 = virtualinvoke r4.<java.awt.FontMetrics: int getHeight()>();

        r3.<java.awt.Rectangle: int width> = $i1;

     label10:
        if z0 != 0 goto label11;

        if r0 != null goto label12;

     label11:
        $i70 = 0;

        goto label13;

     label12:
        $i70 = i65;

     label13:
        i2 = $i70;

        if z0 != 0 goto label20;

        if i4 != 0 goto label14;

        i71 = r5.<java.awt.Rectangle: int height>;

        goto label15;

     label14:
        $i59 = r5.<java.awt.Rectangle: int height>;

        $i57 = r1.<java.awt.Rectangle: int height>;

        $i58 = $i57 + $i70;

        i71 = $i59 - $i58;

     label15:
        $i60 = r3.<java.awt.Rectangle: int height>;

        if $i60 <= i71 goto label20;

        if r13 == null goto label16;

        r3.<java.awt.Rectangle: int height> = i71;

        goto label20;

     label16:
        i72 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>(r4, "...");

        i73 = 0;

     label17:
        $i61 = virtualinvoke r12.<java.lang.String: int length()>();

        if i73 >= $i61 goto label19;

        $c63 = virtualinvoke r12.<java.lang.String: char charAt(int)>(i73);

        $i64 = virtualinvoke r4.<java.awt.FontMetrics: int charWidth(char)>($c63);

        i72 = i72 + $i64;

        if i72 <= i71 goto label18;

        goto label19;

     label18:
        i73 = i73 + 1;

        goto label17;

     label19:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int,int)>(0, i73);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r10;

        $i62 = staticinvoke <javax.swing.SwingUtilities: int computeStringWidth(java.awt.FontMetrics,java.lang.String)>(r4, $r10);

        r3.<java.awt.Rectangle: int height> = $i62;

     label20:
        if i3 != 1 goto label22;

        if i4 == 0 goto label21;

        r3.<java.awt.Rectangle: int x> = 0;

        goto label25;

     label21:
        $i54 = r3.<java.awt.Rectangle: int width>;

        $i55 = $i54 + i2;

        $i56 = neg $i55;

        r3.<java.awt.Rectangle: int x> = $i56;

        goto label25;

     label22:
        if i3 != 0 goto label23;

        $i49 = r1.<java.awt.Rectangle: int width>;

        $i52 = $i49 >> 1;

        $i50 = r3.<java.awt.Rectangle: int width>;

        $i51 = $i50 >> 1;

        $i53 = $i52 - $i51;

        r3.<java.awt.Rectangle: int y> = $i53;

        goto label25;

     label23:
        if i4 == 0 goto label24;

        $i47 = r1.<java.awt.Rectangle: int width>;

        $i46 = r3.<java.awt.Rectangle: int width>;

        $i48 = $i47 - $i46;

        r3.<java.awt.Rectangle: int x> = $i48;

        goto label25;

     label24:
        $i5 = r1.<java.awt.Rectangle: int width>;

        $i6 = $i5 + i2;

        r3.<java.awt.Rectangle: int x> = $i6;

     label25:
        if i4 != 2 goto label26;

        $i43 = r3.<java.awt.Rectangle: int height>;

        $i44 = $i43 + i2;

        $i45 = neg $i44;

        r3.<java.awt.Rectangle: int y> = $i45;

        goto label28;

     label26:
        if i4 != 0 goto label27;

        $i38 = r1.<java.awt.Rectangle: int height>;

        $i41 = $i38 >> 1;

        $i39 = r3.<java.awt.Rectangle: int height>;

        $i40 = $i39 >> 1;

        $i42 = $i41 - $i40;

        r3.<java.awt.Rectangle: int y> = $i42;

        goto label28;

     label27:
        $i7 = r1.<java.awt.Rectangle: int height>;

        $i8 = $i7 + i2;

        r3.<java.awt.Rectangle: int y> = $i8;

     label28:
        $i74 = r1.<java.awt.Rectangle: int y>;

        $i75 = r3.<java.awt.Rectangle: int y>;

        $i76 = staticinvoke <java.lang.Math: int min(int,int)>($i74, $i75);

        $i77 = r1.<java.awt.Rectangle: int y>;

        $i78 = r1.<java.awt.Rectangle: int height>;

        $i79 = $i77 + $i78;

        $i80 = r3.<java.awt.Rectangle: int y>;

        $i81 = r3.<java.awt.Rectangle: int height>;

        $i82 = $i80 + $i81;

        $i83 = staticinvoke <java.lang.Math: int max(int,int)>($i79, $i82);

        $i84 = $i83 - $i76;

        $i85 = r1.<java.awt.Rectangle: int x>;

        $i86 = r3.<java.awt.Rectangle: int x>;

        $i87 = staticinvoke <java.lang.Math: int min(int,int)>($i85, $i86);

        $i88 = r1.<java.awt.Rectangle: int x>;

        $i89 = r1.<java.awt.Rectangle: int width>;

        $i90 = $i88 + $i89;

        $i91 = r3.<java.awt.Rectangle: int x>;

        $i92 = r3.<java.awt.Rectangle: int width>;

        $i93 = $i91 + $i92;

        $i94 = staticinvoke <java.lang.Math: int max(int,int)>($i90, $i93);

        $i95 = $i94 - $i87;

        if i9 != 1 goto label29;

        $i33 = r5.<java.awt.Rectangle: int x>;

        i96 = $i33 - $i87;

        $i35 = r5.<java.awt.Rectangle: int x>;

        $i34 = r5.<java.awt.Rectangle: int width>;

        $i37 = $i35 + $i34;

        $i36 = $i87 + $i95;

        i97 = $i37 - $i36;

        goto label31;

     label29:
        if i9 != 0 goto label30;

        $i29 = r5.<java.awt.Rectangle: int x>;

        $i27 = r5.<java.awt.Rectangle: int width>;

        $i28 = $i27 >> 1;

        $i32 = $i29 + $i28;

        $i30 = $i95 >> 1;

        $i31 = $i87 + $i30;

        i96 = $i32 - $i31;

        i97 = i96;

        goto label31;

     label30:
        $i11 = r5.<java.awt.Rectangle: int x>;

        $i10 = r5.<java.awt.Rectangle: int width>;

        $i13 = $i11 + $i10;

        $i12 = $i87 + $i95;

        i96 = $i13 - $i12;

        $i14 = r5.<java.awt.Rectangle: int x>;

        i97 = $i14 - $i87;

     label31:
        if i15 != 2 goto label32;

        $i26 = r5.<java.awt.Rectangle: int y>;

        i98 = $i26 - $i76;

        goto label34;

     label32:
        if i15 != 4 goto label33;

        $i23 = r5.<java.awt.Rectangle: int y>;

        $i22 = r5.<java.awt.Rectangle: int height>;

        $i25 = $i23 + $i22;

        $i24 = $i76 + $i84;

        i98 = $i25 - $i24;

        goto label34;

     label33:
        $i18 = r5.<java.awt.Rectangle: int y>;

        $i16 = r5.<java.awt.Rectangle: int height>;

        $i17 = $i16 >> 1;

        $i21 = $i18 + $i17;

        $i19 = $i84 >> 1;

        $i20 = $i76 + $i19;

        i98 = $i21 - $i20;

     label34:
        $i99 = r3.<java.awt.Rectangle: int y>;

        $i100 = $i99 + i98;

        r3.<java.awt.Rectangle: int y> = $i100;

        $i101 = r3.<java.awt.Rectangle: int x>;

        $i102 = $i101 + i96;

        r3.<java.awt.Rectangle: int x> = $i102;

        $i103 = r1.<java.awt.Rectangle: int y>;

        $i104 = $i103 + i98;

        r1.<java.awt.Rectangle: int y> = $i104;

        $i105 = r1.<java.awt.Rectangle: int x>;

        $i106 = $i105 + i97;

        r1.<java.awt.Rectangle: int x> = $i106;

        return r12;
    }

    public static int getOrientationOf(java.awt.Component)
    {
        javax.swing.JComponent $r1;
        java.awt.Component r0;
        java.lang.Integer r3;
        int $i0, $i1;
        java.lang.Object $r2;
        com.jidesoft.swing.Alignable $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        $z0 = r0 instanceof com.jidesoft.swing.Alignable;

        if $z0 == 0 goto label1;

        $r4 = (com.jidesoft.swing.Alignable) r0;

        $i1 = interfaceinvoke $r4.<com.jidesoft.swing.Alignable: int getOrientation()>();

        return $i1;

     label1:
        $z1 = r0 instanceof javax.swing.JComponent;

        if $z1 == 0 goto label2;

        $r1 = (javax.swing.JComponent) r0;

        $r2 = virtualinvoke $r1.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>("orientation");

        r3 = (java.lang.Integer) $r2;

        if r3 == null goto label2;

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        return $i0;

     label2:
        return 0;
    }

    public static void setOrientationOf(java.awt.Component, int)
    {
        javax.swing.JComponent $r1;
        java.awt.Component r0;
        java.lang.Integer $r2;
        int $i0, i1;
        com.jidesoft.swing.Alignable $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        i1 := @parameter1: int;

        $i0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: int getOrientationOf(java.awt.Component)>(r0);

        if i1 == $i0 goto label2;

        $z0 = r0 instanceof com.jidesoft.swing.Alignable;

        if $z0 == 0 goto label1;

        $r3 = (com.jidesoft.swing.Alignable) r0;

        interfaceinvoke $r3.<com.jidesoft.swing.Alignable: void setOrientation(int)>(i1);

        goto label2;

     label1:
        $z1 = r0 instanceof javax.swing.JComponent;

        if $z1 == 0 goto label2;

        $r1 = (javax.swing.JComponent) r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r1.<javax.swing.JComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("orientation", $r2);

     label2:
        return;
    }

    public static void setChildrenOrientationOf(java.awt.Container, int)
    {
        java.awt.Component[] $r1;
        int i0, i1, i2;
        java.awt.Container r0;
        java.awt.Component r2;

        r0 := @parameter0: java.awt.Container;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.Component[] getComponents()>();

        i0 = lengthof $r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r2 = $r1[i2];

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setOrientationOf(java.awt.Component,int)>(r2, i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.util.Map disableDoubleBuffered(java.awt.Component)
    {
        java.util.HashMap $r0;
        java.awt.Component r1;
        com.jidesoft.swing.JideSwingUtilities$7 $r2;
        boolean $z0;

        r1 := @parameter0: java.awt.Component;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $z0 = r1 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r2 = new com.jidesoft.swing.JideSwingUtilities$7;

        specialinvoke $r2.<com.jidesoft.swing.JideSwingUtilities$7: void <init>(java.util.Map)>($r0);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r1, $r2);

     label1:
        return $r0;
    }

    public static java.util.Map enableDoubleBuffered(java.awt.Component)
    {
        java.util.HashMap $r0;
        java.awt.Component r1;
        boolean $z0;
        com.jidesoft.swing.JideSwingUtilities$8 $r2;

        r1 := @parameter0: java.awt.Component;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $z0 = r1 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r2 = new com.jidesoft.swing.JideSwingUtilities$8;

        specialinvoke $r2.<com.jidesoft.swing.JideSwingUtilities$8: void <init>(java.util.Map)>($r0);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r1, $r2);

     label1:
        return $r0;
    }

    public static void restoreDoubleBuffered(java.awt.Component, java.util.Map)
    {
        com.jidesoft.swing.JideSwingUtilities$9 $r1;
        java.awt.Component r0;
        java.util.Map r2;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.util.Map;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$9;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$9: void <init>(java.util.Map)>(r2);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

        return;
    }

    public static void paintBackground(java.awt.Graphics, java.awt.Rectangle, java.awt.Color, java.awt.Color)
    {
        java.awt.Color $r1, r2, r4;
        java.awt.Rectangle r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        r3 := @parameter1: java.awt.Rectangle;

        r4 := @parameter2: java.awt.Color;

        r2 := @parameter3: java.awt.Color;

        $r1 = virtualinvoke r0.<java.awt.Graphics: java.awt.Color getColor()>();

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r2);

        $i0 = r3.<java.awt.Rectangle: int x>;

        $i7 = $i0 + 1;

        $i1 = r3.<java.awt.Rectangle: int y>;

        $i6 = $i1 + 1;

        $i2 = r3.<java.awt.Rectangle: int width>;

        $i5 = $i2 - 2;

        $i3 = r3.<java.awt.Rectangle: int height>;

        $i4 = $i3 - 2;

        virtualinvoke r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i7, $i6, $i5, $i4);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>(r4);

        $i13 = r3.<java.awt.Rectangle: int x>;

        $i12 = r3.<java.awt.Rectangle: int y>;

        $i8 = r3.<java.awt.Rectangle: int width>;

        $i11 = $i8 - 1;

        $i9 = r3.<java.awt.Rectangle: int height>;

        $i10 = $i9 - 1;

        virtualinvoke r0.<java.awt.Graphics: void drawRect(int,int,int,int)>($i13, $i12, $i11, $i10);

        virtualinvoke r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);

        return;
    }

    public static void paintBackground(java.awt.Graphics2D, java.awt.Rectangle, java.awt.Color, java.awt.Paint)
    {
        java.awt.Color $r1, r4;
        java.awt.Rectangle r3;
        java.awt.Graphics2D r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.awt.Paint r2;

        r0 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.awt.Rectangle;

        r4 := @parameter2: java.awt.Color;

        r2 := @parameter3: java.awt.Paint;

        $r1 = virtualinvoke r0.<java.awt.Graphics2D: java.awt.Color getColor()>();

        virtualinvoke r0.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r2);

        $i0 = r3.<java.awt.Rectangle: int x>;

        $i7 = $i0 + 1;

        $i1 = r3.<java.awt.Rectangle: int y>;

        $i6 = $i1 + 1;

        $i2 = r3.<java.awt.Rectangle: int width>;

        $i5 = $i2 - 2;

        $i3 = r3.<java.awt.Rectangle: int height>;

        $i4 = $i3 - 2;

        virtualinvoke r0.<java.awt.Graphics2D: void fillRect(int,int,int,int)>($i7, $i6, $i5, $i4);

        virtualinvoke r0.<java.awt.Graphics2D: void setColor(java.awt.Color)>(r4);

        $i13 = r3.<java.awt.Rectangle: int x>;

        $i12 = r3.<java.awt.Rectangle: int y>;

        $i8 = r3.<java.awt.Rectangle: int width>;

        $i11 = $i8 - 1;

        $i9 = r3.<java.awt.Rectangle: int height>;

        $i10 = $i9 - 1;

        virtualinvoke r0.<java.awt.Graphics2D: void drawRect(int,int,int,int)>($i13, $i12, $i11, $i10);

        virtualinvoke r0.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r1);

        return;
    }

    private static boolean drawTextAntialiased(java.awt.Component)
    {
        javax.swing.JComponent $r2;
        java.awt.Component r0;
        java.lang.Boolean r4;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.awt.Component;

        $z0 = <com.jidesoft.swing.JideSwingUtilities: boolean AA_TEXT_DEFINED>;

        if $z0 != 0 goto label5;

        if r0 == null goto label4;

        $z2 = r0 instanceof javax.swing.JComponent;

        if $z2 == 0 goto label3;

        $r2 = (javax.swing.JComponent) r0;

        $r1 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Object AA_TEXT_PROPERTY_KEY>;

        $r3 = virtualinvoke $r2.<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>($r1);

        r4 = (java.lang.Boolean) $r3;

        if r4 == null goto label1;

        $z3 = virtualinvoke r4.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;

     label4:
        return 0;

     label5:
        $z1 = <com.jidesoft.swing.JideSwingUtilities: boolean AA_TEXT>;

        return $z1;
    }

    public static boolean drawTextAntialiased(boolean)
    {
        boolean $z0, $z1, z2;

        z2 := @parameter0: boolean;

        $z0 = <com.jidesoft.swing.JideSwingUtilities: boolean AA_TEXT_DEFINED>;

        if $z0 != 0 goto label1;

        return z2;

     label1:
        $z1 = <com.jidesoft.swing.JideSwingUtilities: boolean AA_TEXT>;

        return $z1;
    }

    public static void drawStringUnderlineCharAt(javax.swing.JComponent, java.awt.Graphics, java.lang.String, int, int, int)
    {
        int i0, i1, i2, $i3, $i4, i5, $i7, $i8, $i9, $i10;
        java.lang.String r2, $r4;
        javax.swing.JComponent r0;
        char $c6;
        java.awt.FontMetrics $r3;
        java.awt.Graphics r1;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void drawString(javax.swing.JComponent,java.awt.Graphics,java.lang.String,int,int)>(r0, r1, r2, i0, i1);

        if i2 < 0 goto label1;

        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i2 >= $i3 goto label1;

        $r3 = virtualinvoke r1.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $i4 = virtualinvoke $r3.<java.awt.FontMetrics: int stringWidth(java.lang.String)>($r4);

        i5 = i0 + $i4;

        $c6 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i2);

        $i7 = virtualinvoke $r3.<java.awt.FontMetrics: int charWidth(char)>($c6);

        $i8 = virtualinvoke $r3.<java.awt.FontMetrics: int getDescent()>();

        $i9 = i1 + $i8;

        $i10 = $i9 - 1;

        virtualinvoke r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(i5, $i10, $i7, 1);

     label1:
        return;
    }

    private static java.util.Map getRenderingHints(java.awt.Graphics2D, java.util.Map, java.util.Map)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        java.awt.RenderingHints $r7;
        java.awt.Graphics2D r5;
        java.util.Map r0, r8;
        int $i0;
        java.awt.RenderingHints$Key r4;
        java.lang.Object $r3, $r6;
        boolean $z0;

        r5 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.util.Map;

        r8 := @parameter2: java.util.Map;

        if r8 != null goto label1;

        $r7 = new java.awt.RenderingHints;

        specialinvoke $r7.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r8 = $r7;

        goto label2;

     label1:
        interfaceinvoke r8.<java.util.Map: void clear()>();

     label2:
        if r0 == null goto label3;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 != 0 goto label4;

     label3:
        return r8;

     label4:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.awt.RenderingHints$Key) $r3;

        $r6 = virtualinvoke r5.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>(r4);

        if $r6 == null goto label6;

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r6);

     label6:
        goto label5;

     label7:
        return r8;
    }

    public static void drawString(javax.swing.JComponent, java.awt.Graphics, java.lang.String, int, int)
    {
        java.awt.Graphics2D r11, r13;
        java.util.Map $r8, $r9, $r10, r12;
        int i0, i1;
        java.lang.String r2;
        boolean $z0, $z1, $z2;
        javax.swing.JComponent r0;
        java.awt.Graphics r1;
        java.awt.RenderingHints$Key $r3, $r6, $r7;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: javax.swing.JComponent;

        r1 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label3;

        r11 = (java.awt.Graphics2D) r1;

        r12 = null;

        $r8 = <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints>;

        if $r8 == null goto label1;

        $r9 = <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints>;

        r12 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.util.Map getRenderingHints(java.awt.Graphics2D,java.util.Map,java.util.Map)>(r11, $r9, null);

        $r10 = <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints>;

        virtualinvoke r11.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>($r10);

     label1:
        virtualinvoke r11.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>(r2, i0, i1);

        if r12 == null goto label2;

        virtualinvoke r11.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>(r12);

     label2:
        goto label5;

     label3:
        $z1 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean drawTextAntialiased(java.awt.Component)>(r0);

        if $z1 == 0 goto label4;

        $z2 = r1 instanceof java.awt.Graphics2D;

        if $z2 == 0 goto label4;

        r13 = (java.awt.Graphics2D) r1;

        $r3 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r4 = virtualinvoke r13.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        virtualinvoke r13.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        virtualinvoke r13.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>(r2, i0, i1);

        $r7 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        virtualinvoke r13.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r7, $r4);

        goto label5;

     label4:
        virtualinvoke r1.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(r2, i0, i1);

     label5:
        return;
    }

    public static java.lang.Object setupAntialiasing(java.awt.Component, java.awt.Graphics)
    {
        java.awt.Component r3;
        java.awt.Graphics2D r1;
        java.util.Map $r6, $r7, $r8;
        java.awt.Graphics r0;
        java.awt.RenderingHints$Key $r2, $r5;
        java.lang.Object $r4, r9;
        boolean $z0, $z1;

        r3 := @parameter0: java.awt.Component;

        r0 := @parameter1: java.awt.Graphics;

        r1 = (java.awt.Graphics2D) r0;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label1;

        $r6 = <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints>;

        r9 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.util.Map getRenderingHints(java.awt.Graphics2D,java.util.Map,java.util.Map)>(r1, $r6, null);

        $r7 = <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints>;

        if $r7 == null goto label2;

        $r8 = <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints>;

        virtualinvoke r1.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>($r8);

        goto label2;

     label1:
        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        r9 = virtualinvoke r1.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r2);

        $z1 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean drawTextAntialiased(java.awt.Component)>(r3);

        if $z1 == 0 goto label2;

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4);

     label2:
        return r9;
    }

    public static void restoreAntialiasing(java.awt.Component, java.awt.Graphics, java.lang.Object)
    {
        java.awt.RenderingHints $r4;
        java.awt.Component r5;
        java.awt.Graphics2D r1;
        java.awt.Graphics r0;
        java.awt.RenderingHints$Key $r3;
        java.lang.Object r2;
        boolean $z0, $z1;

        r5 := @parameter0: java.awt.Component;

        r0 := @parameter1: java.awt.Graphics;

        r2 := @parameter2: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof java.awt.RenderingHints;

        if $z1 == 0 goto label2;

        $r4 = (java.awt.RenderingHints) r2;

        virtualinvoke r1.<java.awt.Graphics2D: void addRenderingHints(java.util.Map)>($r4);

        goto label2;

     label1:
        $r3 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r3, r2);

     label2:
        return;
    }

    public static java.lang.Object setupShapeAntialiasing(java.awt.Graphics)
    {
        java.awt.Graphics2D r1;
        java.awt.Graphics r0;
        java.awt.RenderingHints$Key $r2, $r5;
        java.lang.Object $r3, $r4;

        r0 := @parameter0: java.awt.Graphics;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r3 = virtualinvoke r1.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r2);

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4);

        return $r3;
    }

    public static void restoreShapeAntialiasing(java.awt.Graphics, java.lang.Object)
    {
        java.awt.Graphics2D r1;
        java.awt.Graphics r0;
        java.awt.RenderingHints$Key $r3;
        java.lang.Object r2;

        r0 := @parameter0: java.awt.Graphics;

        r2 := @parameter1: java.lang.Object;

        r1 = (java.awt.Graphics2D) r0;

        $r3 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        virtualinvoke r1.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r3, r2);

        return;
    }

    public static void drawGrip(java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Rectangle r1;
        java.awt.Graphics r0;
        int i0, i1;

        r0 := @parameter0: java.awt.Graphics;

        r1 := @parameter1: java.awt.Rectangle;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void drawGrip(java.awt.Graphics,java.awt.Rectangle,int,int,boolean)>(r0, r1, i0, i1, 1);

        return;
    }

    public static void drawGrip(java.awt.Graphics, java.awt.Rectangle, int, int, boolean)
    {
        java.awt.Color $r2, $r3, $r4, $r5;
        boolean z0;
        java.awt.Graphics r1;
        java.awt.Rectangle r0;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, i74, i75, i76, i77, i78, i79;

        r1 := @parameter0: java.awt.Graphics;

        r0 := @parameter1: java.awt.Rectangle;

        i2 := @parameter2: int;

        i5 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i1 = r0.<java.awt.Rectangle: int width>;

        $i0 = r0.<java.awt.Rectangle: int height>;

        if $i1 <= $i0 goto label07;

        i74 = i2;

        $i40 = i2 * 3;

        $i39 = r0.<java.awt.Rectangle: int width>;

        if $i40 <= $i39 goto label01;

        $i71 = r0.<java.awt.Rectangle: int width>;

        i74 = $i71 / 3;

     label01:
        $i45 = r0.<java.awt.Rectangle: int x>;

        $i42 = r0.<java.awt.Rectangle: int width>;

        $i41 = i74 * 3;

        $i43 = $i42 - $i41;

        $i44 = $i43 >> 1;

        $i72 = $i45 + $i44;

        $i50 = r0.<java.awt.Rectangle: int y>;

        $i47 = r0.<java.awt.Rectangle: int height>;

        $i46 = i5 * 3;

        $i48 = $i47 - $i46;

        $i49 = $i48 >> 1;

        $i73 = $i50 + $i49;

        i75 = 0;

     label02:
        if i75 >= i5 goto label06;

        i76 = 0;

     label03:
        if i76 >= i74 goto label05;

        if z0 == 0 goto label04;

        $r5 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r5);

        $i63 = i76 * 3;

        $i70 = $i72 + $i63;

        $i64 = i75 * 3;

        $i69 = $i73 + $i64;

        $i65 = i76 * 3;

        $i68 = $i72 + $i65;

        $i66 = i75 * 3;

        $i67 = $i73 + $i66;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i70, $i69, $i68, $i67);

     label04:
        $r4 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r4);

        $i51 = i76 * 3;

        $i52 = $i72 + $i51;

        $i62 = $i52 + 1;

        $i53 = i75 * 3;

        $i54 = $i73 + $i53;

        $i61 = $i54 + 1;

        $i55 = i76 * 3;

        $i56 = $i72 + $i55;

        $i60 = $i56 + 1;

        $i57 = i75 * 3;

        $i58 = $i73 + $i57;

        $i59 = $i58 + 1;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i62, $i61, $i60, $i59);

        i76 = i76 + 1;

        goto label03;

     label05:
        i75 = i75 + 1;

        goto label02;

     label06:
        goto label13;

     label07:
        i77 = i2;

        $i4 = i2 * 3;

        $i3 = r0.<java.awt.Rectangle: int height>;

        if $i4 <= $i3 goto label08;

        $i36 = r0.<java.awt.Rectangle: int height>;

        i77 = $i36 / 3;

     label08:
        $i10 = r0.<java.awt.Rectangle: int x>;

        $i7 = r0.<java.awt.Rectangle: int width>;

        $i6 = i5 * 3;

        $i8 = $i7 - $i6;

        $i9 = $i8 >> 1;

        $i37 = $i10 + $i9;

        $i15 = r0.<java.awt.Rectangle: int y>;

        $i12 = r0.<java.awt.Rectangle: int height>;

        $i11 = i77 * 3;

        $i13 = $i12 - $i11;

        $i14 = $i13 >> 1;

        $i38 = $i15 + $i14;

        i78 = 0;

     label09:
        if i78 >= i5 goto label13;

        i79 = 0;

     label10:
        if i79 >= i77 goto label12;

        if z0 == 0 goto label11;

        $r3 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlLtHighlight");

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r3);

        $i28 = i78 * 3;

        $i35 = $i37 + $i28;

        $i29 = i79 * 3;

        $i34 = $i38 + $i29;

        $i30 = i78 * 3;

        $i33 = $i37 + $i30;

        $i31 = i79 * 3;

        $i32 = $i38 + $i31;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i35, $i34, $i33, $i32);

     label11:
        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.awt.Color getColor(java.lang.Object)>("controlShadow");

        virtualinvoke r1.<java.awt.Graphics: void setColor(java.awt.Color)>($r2);

        $i16 = i78 * 3;

        $i17 = $i37 + $i16;

        $i27 = $i17 + 1;

        $i18 = i79 * 3;

        $i19 = $i38 + $i18;

        $i26 = $i19 + 1;

        $i20 = i78 * 3;

        $i21 = $i37 + $i20;

        $i25 = $i21 + 1;

        $i22 = i79 * 3;

        $i23 = $i38 + $i22;

        $i24 = $i23 + 1;

        virtualinvoke r1.<java.awt.Graphics: void drawLine(int,int,int,int)>($i27, $i26, $i25, $i24);

        i79 = i79 + 1;

        goto label10;

     label12:
        i78 = i78 + 1;

        goto label09;

     label13:
        return;
    }

    public static void registerTabKey(java.awt.Container)
    {
        com.jidesoft.swing.JideSwingUtilities$12 $r2;
        javax.swing.JComponent $r3, $r6;
        javax.swing.KeyStroke $r4, $r7;
        com.jidesoft.swing.JideSwingUtilities$11 $r5;
        java.awt.Component $r1;
        int $i0, i1;
        java.awt.Container r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.awt.Container;

        $z0 = r0 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r6 = (javax.swing.JComponent) r0;

        $r5 = new com.jidesoft.swing.JideSwingUtilities$11;

        specialinvoke $r5.<com.jidesoft.swing.JideSwingUtilities$11: void <init>()>();

        $r7 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(9, 0);

        virtualinvoke $r6.<javax.swing.JComponent: void registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)>($r5, $r7, 0);

        goto label4;

     label1:
        i1 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.awt.Container: int getComponentCount()>();

        if i1 >= $i0 goto label4;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.Component getComponent(int)>(i1);

        $z1 = $r1 instanceof javax.swing.JComponent;

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke $r1.<java.awt.Component: boolean isFocusable()>();

        if $z2 == 0 goto label3;

        $r3 = (javax.swing.JComponent) r0;

        $r2 = new com.jidesoft.swing.JideSwingUtilities$12;

        specialinvoke $r2.<com.jidesoft.swing.JideSwingUtilities$12: void <init>()>();

        $r4 = staticinvoke <javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>(9, 0);

        virtualinvoke $r3.<javax.swing.JComponent: void registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)>($r2, $r4, 0);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public static void fillGradient(java.awt.Graphics, java.awt.Rectangle, int)
    {
        java.awt.Color $r2, $r3, $r4, $r5;
        java.awt.Graphics r0;
        java.awt.Rectangle $r6, r7, $r8, $r9, $r10;
        java.awt.Graphics2D r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26;

        r0 := @parameter0: java.awt.Graphics;

        r7 := @parameter1: java.awt.Rectangle;

        i0 := @parameter2: int;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int,int)>(255, 255, 255, 0);

        $r3 = new java.awt.Color;

        specialinvoke $r3.<java.awt.Color: void <init>(int,int,int,int)>(255, 255, 255, 48);

        $r4 = new java.awt.Color;

        specialinvoke $r4.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 0);

        $r5 = new java.awt.Color;

        specialinvoke $r5.<java.awt.Color: void <init>(int,int,int,int)>(0, 0, 0, 32);

        if i0 != 0 goto label1;

        $r9 = new java.awt.Rectangle;

        $i18 = r7.<java.awt.Rectangle: int x>;

        $i17 = r7.<java.awt.Rectangle: int y>;

        $i16 = r7.<java.awt.Rectangle: int width>;

        $i14 = r7.<java.awt.Rectangle: int height>;

        $i15 = $i14 >> 1;

        specialinvoke $r9.<java.awt.Rectangle: void <init>(int,int,int,int)>($i18, $i17, $i16, $i15);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r9, $r3, $r2, 1);

        $r10 = new java.awt.Rectangle;

        $i26 = r7.<java.awt.Rectangle: int x>;

        $i21 = r7.<java.awt.Rectangle: int y>;

        $i19 = r7.<java.awt.Rectangle: int height>;

        $i20 = $i19 >> 1;

        $i25 = $i21 + $i20;

        $i24 = r7.<java.awt.Rectangle: int width>;

        $i22 = r7.<java.awt.Rectangle: int height>;

        $i23 = $i22 >> 1;

        specialinvoke $r10.<java.awt.Rectangle: void <init>(int,int,int,int)>($i26, $i25, $i24, $i23);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r10, $r4, $r5, 1);

        goto label2;

     label1:
        $r6 = new java.awt.Rectangle;

        $i5 = r7.<java.awt.Rectangle: int x>;

        $i4 = r7.<java.awt.Rectangle: int y>;

        $i1 = r7.<java.awt.Rectangle: int width>;

        $i3 = $i1 >> 1;

        $i2 = r7.<java.awt.Rectangle: int height>;

        specialinvoke $r6.<java.awt.Rectangle: void <init>(int,int,int,int)>($i5, $i4, $i3, $i2);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r6, $r3, $r2, 0);

        $r8 = new java.awt.Rectangle;

        $i8 = r7.<java.awt.Rectangle: int x>;

        $i6 = r7.<java.awt.Rectangle: int width>;

        $i7 = $i6 >> 1;

        $i13 = $i8 + $i7;

        $i12 = r7.<java.awt.Rectangle: int y>;

        $i9 = r7.<java.awt.Rectangle: int width>;

        $i11 = $i9 >> 1;

        $i10 = r7.<java.awt.Rectangle: int height>;

        specialinvoke $r8.<java.awt.Rectangle: void <init>(int,int,int,int)>($i13, $i12, $i11, $i10);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r8, $r4, $r5, 0);

     label2:
        return;
    }

    public static void fillSingleGradient(java.awt.Graphics, java.awt.Rectangle, int)
    {
        java.awt.Graphics r0;
        int i0;
        java.awt.Rectangle r1;

        r0 := @parameter0: java.awt.Graphics;

        r1 := @parameter1: java.awt.Rectangle;

        i0 := @parameter2: int;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillSingleGradient(java.awt.Graphics,java.awt.Rectangle,int,int)>(r0, r1, i0, 127);

        return;
    }

    public static void fillSingleGradient(java.awt.Graphics, java.awt.Rectangle, int, int)
    {
        java.awt.Color $r2, $r3;
        java.awt.Rectangle $r4, r5, $r6, $r7, $r8;
        java.awt.Graphics2D r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.awt.Graphics r0;

        r0 := @parameter0: java.awt.Graphics;

        r5 := @parameter1: java.awt.Rectangle;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r1 = (java.awt.Graphics2D) r0;

        $r2 = new java.awt.Color;

        specialinvoke $r2.<java.awt.Color: void <init>(int,int,int,int)>(255, 255, 255, 0);

        $r3 = new java.awt.Color;

        specialinvoke $r3.<java.awt.Color: void <init>(int,int,int,int)>(255, 255, 255, i0);

        if i1 != 5 goto label1;

        $r8 = new java.awt.Rectangle;

        $i17 = r5.<java.awt.Rectangle: int x>;

        $i16 = r5.<java.awt.Rectangle: int y>;

        $i15 = r5.<java.awt.Rectangle: int width>;

        $i14 = r5.<java.awt.Rectangle: int height>;

        specialinvoke $r8.<java.awt.Rectangle: void <init>(int,int,int,int)>($i17, $i16, $i15, $i14);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r8, $r3, $r2, 1);

        goto label4;

     label1:
        if i1 != 1 goto label2;

        $r7 = new java.awt.Rectangle;

        $i13 = r5.<java.awt.Rectangle: int x>;

        $i12 = r5.<java.awt.Rectangle: int y>;

        $i11 = r5.<java.awt.Rectangle: int width>;

        $i10 = r5.<java.awt.Rectangle: int height>;

        specialinvoke $r7.<java.awt.Rectangle: void <init>(int,int,int,int)>($i13, $i12, $i11, $i10);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r7, $r2, $r3, 1);

        goto label4;

     label2:
        if i1 != 3 goto label3;

        $r6 = new java.awt.Rectangle;

        $i9 = r5.<java.awt.Rectangle: int x>;

        $i8 = r5.<java.awt.Rectangle: int y>;

        $i7 = r5.<java.awt.Rectangle: int width>;

        $i6 = r5.<java.awt.Rectangle: int height>;

        specialinvoke $r6.<java.awt.Rectangle: void <init>(int,int,int,int)>($i9, $i8, $i7, $i6);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r6, $r3, $r2, 0);

        goto label4;

     label3:
        if i1 != 7 goto label4;

        $r4 = new java.awt.Rectangle;

        $i5 = r5.<java.awt.Rectangle: int x>;

        $i4 = r5.<java.awt.Rectangle: int y>;

        $i3 = r5.<java.awt.Rectangle: int width>;

        $i2 = r5.<java.awt.Rectangle: int height>;

        specialinvoke $r4.<java.awt.Rectangle: void <init>(int,int,int,int)>($i5, $i4, $i3, $i2);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r1, $r4, $r2, $r3, 0);

     label4:
        return;
    }

    public static java.awt.Paint getRadialGradientPaint(java.awt.geom.Point2D, float, float[], java.awt.Color[])
    {
        java.awt.Color $r19;
        java.lang.Float $r5;
        java.lang.Object[] $r2;
        java.awt.geom.Point2D r3;
        java.lang.NoSuchMethodException $r15;
        float[] r6;
        java.lang.reflect.Constructor $r1, $r4, $r11;
        java.lang.InstantiationException $r14;
        boolean $z0;
        java.io.PrintStream $r18;
        java.lang.IllegalAccessException $r13;
        java.lang.Class[] $r9;
        java.lang.reflect.InvocationTargetException $r12;
        java.awt.Paint $r8;
        float f0;
        java.lang.Object $r7;
        java.lang.Class $r10, r17;
        java.lang.ClassNotFoundException $r16;
        java.awt.Color[] r0;

        r3 := @parameter0: java.awt.geom.Point2D;

        f0 := @parameter1: float;

        r6 := @parameter2: float[];

        r0 := @parameter3: java.awt.Color[];

        r17 = null;

     label01:
        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label02;

        r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.RadialGradientPaint");

        goto label03;

     label02:
        r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.batik.ext.awt.RadialGradientPaint");

     label03:
        goto label05;

     label04:
        $r16 := @caughtexception;

     label05:
        if r17 == null goto label13;

     label06:
        $r1 = <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _radialGradientPaintConstructor2>;

        if $r1 != null goto label07;

        $r9 = newarray (java.lang.Class)[4];

        $r9[0] = class "Ljava/awt/geom/Point2D;";

        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        $r9[1] = $r10;

        $r9[2] = class "[F";

        $r9[3] = class "[Ljava/awt/Color;";

        $r11 = virtualinvoke r17.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r9);

        <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _radialGradientPaintConstructor2> = $r11;

     label07:
        $r4 = <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _radialGradientPaintConstructor2>;

        $r2 = newarray (java.lang.Object)[4];

        $r2[0] = r3;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r2[1] = $r5;

        $r2[2] = r6;

        $r2[3] = r0;

        $r7 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

        $r8 = (java.awt.Paint) $r7;

     label08:
        return $r8;

     label09:
        $r15 := @caughtexception;

        goto label13;

     label10:
        $r14 := @caughtexception;

        goto label13;

     label11:
        $r13 := @caughtexception;

        goto label13;

     label12:
        $r12 := @caughtexception;

     label13:
        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Warning - radial gradients are only supported in Java 6 and higher or use batik-aw-util.jar, using a plain color instead");

        $r19 = r0[0];

        return $r19;

        catch java.lang.ClassNotFoundException from label01 to label03 with label04;
        catch java.lang.NoSuchMethodException from label06 to label08 with label09;
        catch java.lang.InstantiationException from label06 to label08 with label10;
        catch java.lang.IllegalAccessException from label06 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label06 to label08 with label12;
    }

    public static java.awt.Paint getRadialGradientPaint(float, float, float, float[], java.awt.Color[])
    {
        java.awt.Color $r26;
        java.lang.Float $r5, $r6, $r7;
        java.lang.Object[] $r3;
        java.lang.NoSuchMethodException $r22;
        float[] r8;
        java.lang.reflect.Constructor $r2, $r4, $r16;
        java.lang.InstantiationException $r21;
        boolean $z0;
        java.io.PrintStream $r25;
        java.lang.IllegalAccessException $r20;
        java.lang.Class[] $r11;
        java.lang.reflect.InvocationTargetException $r19;
        java.awt.Paint $r10;
        float f0, f1, f2;
        java.lang.Class $r0, $r12, $r13, $r14, $r15, $r17, $r18, $r24;
        java.lang.Object $r9;
        java.lang.ClassNotFoundException $r23;
        java.awt.Color[] r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r8 := @parameter3: float[];

        r1 := @parameter4: java.awt.Color[];

        $r0 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _radialGradientPaintClass>;

        if $r0 != null goto label05;

     label01:
        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label02;

        $r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.RadialGradientPaint");

        <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _radialGradientPaintClass> = $r18;

        goto label03;

     label02:
        $r17 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.batik.ext.awt.RadialGradientPaint");

        <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _radialGradientPaintClass> = $r17;

     label03:
        goto label05;

     label04:
        $r23 := @caughtexception;

     label05:
        $r24 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _radialGradientPaintClass>;

        if $r24 == null goto label13;

     label06:
        $r2 = <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _radialGradientPaintConstructor1>;

        if $r2 != null goto label07;

        $r15 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _radialGradientPaintClass>;

        $r11 = newarray (java.lang.Class)[5];

        $r12 = <java.lang.Float: java.lang.Class TYPE>;

        $r11[0] = $r12;

        $r13 = <java.lang.Float: java.lang.Class TYPE>;

        $r11[1] = $r13;

        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        $r11[2] = $r14;

        $r11[3] = class "[F";

        $r11[4] = class "[Ljava/awt/Color;";

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11);

        <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _radialGradientPaintConstructor1> = $r16;

     label07:
        $r4 = <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _radialGradientPaintConstructor1>;

        $r3 = newarray (java.lang.Object)[5];

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r3[2] = $r7;

        $r3[3] = r8;

        $r3[4] = r1;

        $r9 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        $r10 = (java.awt.Paint) $r9;

     label08:
        return $r10;

     label09:
        $r22 := @caughtexception;

        goto label13;

     label10:
        $r21 := @caughtexception;

        goto label13;

     label11:
        $r20 := @caughtexception;

        goto label13;

     label12:
        $r19 := @caughtexception;

     label13:
        $r25 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("Warning - radial gradients are only supported in Java 6 and higher or use batik-aw-util.jar, using a plain color instead");

        $r26 = r1[0];

        return $r26;

        catch java.lang.ClassNotFoundException from label01 to label03 with label04;
        catch java.lang.NoSuchMethodException from label06 to label08 with label09;
        catch java.lang.InstantiationException from label06 to label08 with label10;
        catch java.lang.IllegalAccessException from label06 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label06 to label08 with label12;
    }

    public static java.awt.Paint getLinearGradientPaint(float, float, float, float, float[], java.awt.Color[])
    {
        java.awt.Color $r28;
        java.lang.Float $r5, $r6, $r7, $r8;
        java.lang.NoSuchMethodException $r24;
        java.lang.InstantiationException $r23;
        boolean $z0;
        java.lang.IllegalAccessException $r22;
        java.lang.reflect.InvocationTargetException $r21;
        java.awt.Paint $r11;
        float f0, f1, f2, f3;
        java.lang.Object[] $r3;
        float[] r9;
        java.lang.reflect.Constructor $r2, $r4, $r18;
        java.io.PrintStream $r27;
        java.lang.Class[] $r12;
        java.lang.Class $r0, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r26;
        java.lang.Object $r10;
        java.lang.ClassNotFoundException $r25;
        java.awt.Color[] r1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        r9 := @parameter4: float[];

        r1 := @parameter5: java.awt.Color[];

        $r0 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _linearGradientPaintClass>;

        if $r0 != null goto label05;

     label01:
        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z0 == 0 goto label02;

        $r20 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.awt.LinearGradientPaint");

        <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _linearGradientPaintClass> = $r20;

        goto label03;

     label02:
        $r19 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.batik.ext.awt.LinearGradientPaint");

        <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _linearGradientPaintClass> = $r19;

     label03:
        goto label05;

     label04:
        $r25 := @caughtexception;

     label05:
        $r26 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _linearGradientPaintClass>;

        if $r26 == null goto label13;

     label06:
        $r2 = <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _linearGradientPaintConstructor1>;

        if $r2 != null goto label07;

        $r17 = <com.jidesoft.swing.JideSwingUtilities: java.lang.Class _linearGradientPaintClass>;

        $r12 = newarray (java.lang.Class)[6];

        $r13 = <java.lang.Float: java.lang.Class TYPE>;

        $r12[0] = $r13;

        $r14 = <java.lang.Float: java.lang.Class TYPE>;

        $r12[1] = $r14;

        $r15 = <java.lang.Float: java.lang.Class TYPE>;

        $r12[2] = $r15;

        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        $r12[3] = $r16;

        $r12[4] = class "[F";

        $r12[5] = class "[Ljava/awt/Color;";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r12);

        <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _linearGradientPaintConstructor1> = $r18;

     label07:
        $r4 = <com.jidesoft.swing.JideSwingUtilities: java.lang.reflect.Constructor _linearGradientPaintConstructor1>;

        $r3 = newarray (java.lang.Object)[6];

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f3);

        $r3[3] = $r8;

        $r3[4] = r9;

        $r3[5] = r1;

        $r10 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        $r11 = (java.awt.Paint) $r10;

     label08:
        return $r11;

     label09:
        $r24 := @caughtexception;

        goto label13;

     label10:
        $r23 := @caughtexception;

        goto label13;

     label11:
        $r22 := @caughtexception;

        goto label13;

     label12:
        $r21 := @caughtexception;

     label13:
        $r27 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("Warning - linear gradients are only supported in Java 6 and higher or use batik-aw-util.jar, using a plain color instead");

        $r28 = r1[0];

        return $r28;

        catch java.lang.ClassNotFoundException from label01 to label03 with label04;
        catch java.lang.NoSuchMethodException from label06 to label08 with label09;
        catch java.lang.InstantiationException from label06 to label08 with label10;
        catch java.lang.IllegalAccessException from label06 to label08 with label11;
        catch java.lang.reflect.InvocationTargetException from label06 to label08 with label12;
    }

    public static boolean containerContainsFocus(java.awt.Container)
    {
        java.awt.Component $r1, $r3;
        java.awt.KeyboardFocusManager $r0, $r2;
        java.awt.Container r4;
        boolean $z0, $z1, z3, $z4, $z5, $z6;

        r4 := @parameter0: java.awt.Container;

        $r0 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r1 = virtualinvoke $r0.<java.awt.KeyboardFocusManager: java.awt.Component getFocusOwner()>();

        $r2 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r3 = virtualinvoke $r2.<java.awt.KeyboardFocusManager: java.awt.Component getPermanentFocusOwner()>();

        if $r1 == null goto label1;

        $z1 = staticinvoke <javax.swing.SwingUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>($r1, r4);

        if $z1 == 0 goto label1;

        $z6 = 1;

        $z5 = 1;

        goto label2;

     label1:
        $z6 = 0;

        $z5 = 0;

     label2:
        z3 = $z6;

        if $z5 != 0 goto label5;

        if $r3 == null goto label3;

        $z0 = staticinvoke <javax.swing.SwingUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>($r3, r4);

        if $z0 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        z3 = $z4;

     label5:
        return z3;
    }

    public static boolean componentIsPermanentFocusOwner(java.awt.Component)
    {
        java.awt.KeyboardFocusManager $r1;
        java.awt.Component r0, $r2;
        boolean $z0;

        r0 := @parameter0: java.awt.Component;

        if r0 == null goto label1;

        $r1 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r2 = virtualinvoke $r1.<java.awt.KeyboardFocusManager: java.awt.Component getPermanentFocusOwner()>();

        if $r2 != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void installColorsAndFont(java.awt.Component, java.awt.Color, java.awt.Color, java.awt.Font)
    {
        java.awt.Color r2, r3;
        java.awt.Font r1;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.Color;

        r3 := @parameter2: java.awt.Color;

        r1 := @parameter3: java.awt.Font;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void installFont(java.awt.Component,java.awt.Font)>(r0, r1);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void installColors(java.awt.Component,java.awt.Color,java.awt.Color)>(r0, r2, r3);

        return;
    }

    public static void installFont(java.awt.Component, java.awt.Font)
    {
        java.awt.Font $r1, r2;
        java.awt.Component r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.Font;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Font getFont()>();

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<java.awt.Component: void setFont(java.awt.Font)>(r2);

     label2:
        return;
    }

    public static void installColors(java.awt.Component, java.awt.Color, java.awt.Color)
    {
        java.awt.Color $r1, r2, r3, $r4;
        java.awt.Component r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.Color;

        r3 := @parameter2: java.awt.Color;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Color getBackground()>();

        if r2 == null goto label2;

        if $r1 == null goto label1;

        $z1 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r0.<java.awt.Component: void setBackground(java.awt.Color)>(r2);

     label2:
        $r4 = virtualinvoke r0.<java.awt.Component: java.awt.Color getForeground()>();

        if r3 == null goto label4;

        if $r4 == null goto label3;

        $z0 = $r4 instanceof javax.swing.plaf.UIResource;

        if $z0 == 0 goto label4;

     label3:
        virtualinvoke r0.<java.awt.Component: void setForeground(java.awt.Color)>(r3);

     label4:
        return;
    }

    public static void installBorder(javax.swing.JComponent, javax.swing.border.Border)
    {
        javax.swing.JComponent r0;
        javax.swing.border.Border $r1, r2;
        boolean $z0;

        r0 := @parameter0: javax.swing.JComponent;

        r2 := @parameter1: javax.swing.border.Border;

        $r1 = virtualinvoke r0.<javax.swing.JComponent: javax.swing.border.Border getBorder()>();

        if $r1 == null goto label1;

        $z0 = $r1 instanceof javax.swing.plaf.UIResource;

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<javax.swing.JComponent: void setBorder(javax.swing.border.Border)>(r2);

     label2:
        return;
    }

    public static void fillNormalGradient(java.awt.Graphics2D, java.awt.Shape, java.awt.Color, java.awt.Color, boolean)
    {
        java.awt.Color r3, r4;
        java.awt.Rectangle $r1;
        java.awt.Graphics2D r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0;
        java.awt.Shape r0;
        java.awt.Paint $r6;
        java.awt.GradientPaint $r2, $r7, r8;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r5 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.awt.Shape;

        r3 := @parameter2: java.awt.Color;

        r4 := @parameter3: java.awt.Color;

        z0 := @parameter4: boolean;

        $r1 = interfaceinvoke r0.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        if z0 == 0 goto label1;

        $r7 = new java.awt.GradientPaint;

        $i6 = $r1.<java.awt.Rectangle: int x>;

        $f7 = (float) $i6;

        $i7 = $r1.<java.awt.Rectangle: int y>;

        $f6 = (float) $i7;

        $i8 = $r1.<java.awt.Rectangle: int x>;

        $f5 = (float) $i8;

        $i10 = $r1.<java.awt.Rectangle: int height>;

        $i9 = $r1.<java.awt.Rectangle: int y>;

        $i11 = $i10 + $i9;

        $f4 = (float) $i11;

        specialinvoke $r7.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color,boolean)>($f7, $f6, r3, $f5, $f4, r4, 1);

        r8 = $r7;

        goto label2;

     label1:
        $r2 = new java.awt.GradientPaint;

        $i0 = $r1.<java.awt.Rectangle: int x>;

        $f3 = (float) $i0;

        $i1 = $r1.<java.awt.Rectangle: int y>;

        $f2 = (float) $i1;

        $i3 = $r1.<java.awt.Rectangle: int width>;

        $i2 = $r1.<java.awt.Rectangle: int x>;

        $i4 = $i3 + $i2;

        $f1 = (float) $i4;

        $i5 = $r1.<java.awt.Rectangle: int y>;

        $f0 = (float) $i5;

        specialinvoke $r2.<java.awt.GradientPaint: void <init>(float,float,java.awt.Color,float,float,java.awt.Color,boolean)>($f3, $f2, r3, $f1, $f0, r4, 1);

        r8 = $r2;

     label2:
        $r6 = virtualinvoke r5.<java.awt.Graphics2D: java.awt.Paint getPaint()>();

        virtualinvoke r5.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>(r8);

        virtualinvoke r5.<java.awt.Graphics2D: void fill(java.awt.Shape)>(r0);

        virtualinvoke r5.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r6);

        return;
    }

    public static void fillGradient(java.awt.Graphics2D, java.awt.Shape, java.awt.Color, java.awt.Color, boolean)
    {
        java.awt.Shape r3;
        java.awt.Color r4, r5;
        java.awt.Graphics2D r2;
        java.lang.String $r0, $r1;
        boolean $z0, z1;

        r2 := @parameter0: java.awt.Graphics2D;

        r3 := @parameter1: java.awt.Shape;

        r4 := @parameter2: java.awt.Color;

        r5 := @parameter3: java.awt.Color;

        z1 := @parameter4: boolean;

        $r0 = "true";

        $r1 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("normalGradientPaint", "false");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void fillNormalGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r2, r3, r4, r5, z1);

        goto label2;

     label1:
        staticinvoke <com.jidesoft.swing.FastGradientPainter: void drawGradient(java.awt.Graphics2D,java.awt.Shape,java.awt.Color,java.awt.Color,boolean)>(r2, r3, r4, r5, z1);

     label2:
        return;
    }

    public static void clearGradientCache()
    {
        staticinvoke <com.jidesoft.swing.FastGradientPainter: void clearGradientCache()>();

        return;
    }

    public static java.awt.Window getTopModalDialog(java.awt.Window)
    {
        java.awt.Window r0, r2, $r4;
        java.awt.Window[] $r1;
        int i0, i1;
        java.awt.Dialog $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.awt.Window;

        $r1 = virtualinvoke r0.<java.awt.Window: java.awt.Window[] getOwnedWindows()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        $z0 = virtualinvoke r2.<java.awt.Window: boolean isVisible()>();

        if $z0 == 0 goto label2;

        $z1 = r2 instanceof java.awt.Dialog;

        if $z1 == 0 goto label2;

        $r3 = (java.awt.Dialog) r2;

        $z2 = virtualinvoke $r3.<java.awt.Dialog: boolean isModal()>();

        if $z2 == 0 goto label2;

        $r4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Window getTopModalDialog(java.awt.Window)>(r2);

        return $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r0;
    }

    public static void traceFocus()
    {
        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void traceFocus(boolean)>(0);

        return;
    }

    public static void traceFocus(boolean)
    {
        com.jidesoft.swing.JideSwingUtilities$13 $r0;
        java.awt.KeyboardFocusManager $r1, $r2, $r3;
        boolean $z0, z1;

        z1 := @parameter0: boolean;

        $z0 = <com.jidesoft.swing.JideSwingUtilities: boolean tracingFocus>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new com.jidesoft.swing.JideSwingUtilities$13;

        specialinvoke $r0.<com.jidesoft.swing.JideSwingUtilities$13: void <init>(boolean)>(z1);

        $r1 = staticinvoke <java.awt.DefaultKeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        virtualinvoke $r1.<java.awt.KeyboardFocusManager: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("focusOwner", $r0);

        $r2 = staticinvoke <java.awt.DefaultKeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        virtualinvoke $r2.<java.awt.KeyboardFocusManager: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("permanentFocusOwner", $r0);

        $r3 = staticinvoke <java.awt.DefaultKeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        virtualinvoke $r3.<java.awt.KeyboardFocusManager: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("activeWindow", $r0);

        <com.jidesoft.swing.JideSwingUtilities: boolean tracingFocus> = 1;

        return;
    }

    public static void runGCAndPrintFreeMemory()
    {
        java.lang.Runtime $r1, $r3, $r5, $r6, $r18, $r20, $r22, $r23;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15;
        java.lang.String $r2, $r4, $r7, $r17, $r19, $r21, $r24, $r34;
        java.io.PrintStream $r9, $r26;
        java.text.DecimalFormat $r0;
        java.lang.InterruptedException $r35;

        $r0 = new java.text.DecimalFormat;

        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String)>("###,###,##0.####");

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l0 = virtualinvoke $r1.<java.lang.Runtime: long freeMemory()>();

        $l1 = $l0 / 1024L;

        $r2 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(long)>($l1);

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l2 = virtualinvoke $r3.<java.lang.Runtime: long totalMemory()>();

        $l3 = $l2 / 1024L;

        $r4 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(long)>($l3);

        $r5 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l4 = virtualinvoke $r5.<java.lang.Runtime: long totalMemory()>();

        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l5 = virtualinvoke $r6.<java.lang.Runtime: long freeMemory()>();

        $l6 = $l4 - $l5;

        $l7 = $l6 / 1024L;

        $r7 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(long)>($l7);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("before gc: (Total [");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k] - Free [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k]) = Used [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r17);

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label2:
        goto label4;

     label3:
        $r35 := @caughtexception;

     label4:
        $r18 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l8 = virtualinvoke $r18.<java.lang.Runtime: long freeMemory()>();

        $l9 = $l8 / 1024L;

        $r19 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(long)>($l9);

        $r20 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l10 = virtualinvoke $r20.<java.lang.Runtime: long totalMemory()>();

        $l11 = $l10 / 1024L;

        $r21 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(long)>($l11);

        $r22 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l12 = virtualinvoke $r22.<java.lang.Runtime: long totalMemory()>();

        $r23 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l13 = virtualinvoke $r23.<java.lang.Runtime: long freeMemory()>();

        $l14 = $l12 - $l13;

        $l15 = $l14 / 1024L;

        $r24 = virtualinvoke $r0.<java.text.DecimalFormat: java.lang.String format(long)>($l15);

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("after gc: (Total [");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k] - Free [");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k]) = Used [");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k]");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r34);

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static javax.swing.JPanel createTableModelModifier(javax.swing.table.DefaultTableModel)
    {
        javax.swing.JButton $r6, $r8, $r10;
        com.jidesoft.swing.JideSwingUtilities$16 $r11;
        javax.swing.table.DefaultTableModel r3;
        com.jidesoft.swing.JideSwingUtilities$14 $r7;
        com.jidesoft.swing.JideSwingUtilities$15 $r9;
        com.jidesoft.dialog.ButtonPanel $r5;
        javax.swing.JScrollPane $r4;
        javax.swing.JTable $r2;
        java.awt.BorderLayout $r1;
        javax.swing.JPanel $r0;

        r3 := @parameter0: javax.swing.table.DefaultTableModel;

        $r0 = new javax.swing.JPanel;

        $r1 = new java.awt.BorderLayout;

        specialinvoke $r1.<java.awt.BorderLayout: void <init>(int,int)>(6, 6);

        specialinvoke $r0.<javax.swing.JPanel: void <init>(java.awt.LayoutManager)>($r1);

        $r2 = new javax.swing.JTable;

        specialinvoke $r2.<javax.swing.JTable: void <init>(javax.swing.table.TableModel)>(r3);

        $r4 = new javax.swing.JScrollPane;

        specialinvoke $r4.<javax.swing.JScrollPane: void <init>(java.awt.Component)>($r2);

        virtualinvoke $r0.<javax.swing.JPanel: java.awt.Component add(java.awt.Component)>($r4);

        $r5 = new com.jidesoft.dialog.ButtonPanel;

        specialinvoke $r5.<com.jidesoft.dialog.ButtonPanel: void <init>()>();

        $r6 = new javax.swing.JButton;

        specialinvoke $r6.<javax.swing.JButton: void <init>(java.lang.String)>("Insert");

        $r7 = new com.jidesoft.swing.JideSwingUtilities$14;

        specialinvoke $r7.<com.jidesoft.swing.JideSwingUtilities$14: void <init>(javax.swing.table.DefaultTableModel,javax.swing.JTable)>(r3, $r2);

        virtualinvoke $r6.<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>($r7);

        $r8 = new javax.swing.JButton;

        specialinvoke $r8.<javax.swing.JButton: void <init>(java.lang.String)>("Delete");

        $r9 = new com.jidesoft.swing.JideSwingUtilities$15;

        specialinvoke $r9.<com.jidesoft.swing.JideSwingUtilities$15: void <init>(javax.swing.JTable,javax.swing.table.DefaultTableModel)>($r2, r3);

        virtualinvoke $r8.<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>($r9);

        $r10 = new javax.swing.JButton;

        specialinvoke $r10.<javax.swing.JButton: void <init>(java.lang.String)>("Clear");

        $r11 = new com.jidesoft.swing.JideSwingUtilities$16;

        specialinvoke $r11.<com.jidesoft.swing.JideSwingUtilities$16: void <init>(javax.swing.table.DefaultTableModel)>(r3);

        virtualinvoke $r10.<javax.swing.JButton: void addActionListener(java.awt.event.ActionListener)>($r11);

        virtualinvoke $r5.<com.jidesoft.dialog.ButtonPanel: java.awt.Component add(java.awt.Component)>($r6);

        virtualinvoke $r5.<com.jidesoft.dialog.ButtonPanel: java.awt.Component add(java.awt.Component)>($r8);

        virtualinvoke $r5.<com.jidesoft.dialog.ButtonPanel: java.awt.Component add(java.awt.Component)>($r10);

        virtualinvoke $r0.<javax.swing.JPanel: void add(java.awt.Component,java.lang.Object)>($r5, "Last");

        return $r0;
    }

    public static java.awt.Component findSomethingFocusable(java.awt.Container)
    {
        java.awt.Component r2, $r5;
        java.awt.Component[] $r1;
        int i0, i1;
        java.awt.Container r0, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.awt.Container;

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean passesFocusabilityTest(java.awt.Component)>(r0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<java.awt.Container: boolean requestFocusInWindow()>();

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.Component[] getComponents()>();

        i0 = lengthof $r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r2 = $r1[i1];

        $z1 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean passesFocusabilityTest(java.awt.Component)>(r2);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<java.awt.Container: boolean requestFocusInWindow()>();

        return r0;

     label3:
        $z2 = r2 instanceof java.awt.Container;

        if $z2 == 0 goto label4;

        $r3 = (java.awt.Container) r2;

        $r4 = (java.awt.Container) $r3;

        $r5 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component findSomethingFocusable(java.awt.Container)>($r4);

        if $r5 == null goto label4;

        return $r5;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return null;
    }

    public static boolean passesFocusabilityTest(java.awt.Component)
    {
        java.awt.Component r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.awt.Component;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.awt.Component: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.awt.Component: boolean isDisplayable()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<java.awt.Component: boolean isVisible()>();

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke r0.<java.awt.Component: boolean isFocusable()>();

        if $z3 == 0 goto label1;

        $z4 = virtualinvoke r0.<java.awt.Component: boolean isShowing()>();

        if $z4 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;
    }

    public static void ignoreException(java.lang.Exception)
    {
        java.lang.Exception r0;

        r0 := @parameter0: java.lang.Exception;

        return;
    }

    public static void printException(java.lang.Exception)
    {
        java.io.PrintStream $r1;
        java.lang.String $r2;
        java.lang.Exception r0;

        r0 := @parameter0: java.lang.Exception;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = virtualinvoke r0.<java.lang.Exception: java.lang.String getLocalizedMessage()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2);

        return;
    }

    public static void throwException(java.lang.Exception)
    {
        java.lang.RuntimeException $r1, $r2;
        java.lang.Exception r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Exception;

        $z0 = r0 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.RuntimeException) r0;

        throw $r2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r1;
    }

    public static void throwInvocationTargetException(java.lang.reflect.InvocationTargetException)
    {
        java.lang.Throwable $r1, $r2, $r4, $r5, $r7;
        java.lang.Error $r6;
        java.lang.RuntimeException $r3, $r8;
        java.lang.reflect.InvocationTargetException r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.InvocationTargetException;

        $r1 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r1 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r8 = (java.lang.RuntimeException) $r7;

        throw $r8;

     label1:
        $r2 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r2 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r6 = (java.lang.Error) $r5;

        throw $r6;

     label2:
        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke r0.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;
    }

    public static int findDisplayedMnemonicIndex(java.lang.String, int)
    {
        char $c1, $c2, $c3, $c4;
        int i0, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i15;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        $i9 = (int) -1;

        return $i9;

     label2:
        $c1 = (char) i0;

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        $c3 = (char) i0;

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $i10 = (int) $c2;

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i10);

        $i11 = (int) $c4;

        $i6 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i11);

        $i13 = (int) -1;

        if $i5 != $i13 goto label3;

        return $i6;

     label3:
        $i15 = (int) -1;

        if $i6 != $i15 goto label4;

        return $i5;

     label4:
        if $i6 >= $i5 goto label5;

        $i7 = $i6;

        goto label6;

     label5:
        $i7 = $i5;

     label6:
        return $i7;
    }

    public static java.awt.Component getDescendantOfClass(java.lang.Class, java.awt.Container)
    {
        java.awt.Component r3, $r5;
        java.awt.Component[] $r2;
        int i0, i1;
        java.lang.Class r1;
        java.awt.Container r0, $r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.awt.Container;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = virtualinvoke r0.<java.awt.Container: java.awt.Component[] getComponents()>();

        i0 = lengthof $r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r3 = $r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r3);

        if $z0 == 0 goto label4;

        return r3;

     label4:
        $z1 = r3 instanceof java.awt.Container;

        if $z1 == 0 goto label5;

        $r4 = (java.awt.Container) r3;

        $r5 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getDescendantOfClass(java.lang.Class,java.awt.Container)>(r1, $r4);

        if $r5 == null goto label5;

        return $r5;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        return null;
    }

    public static float getDefaultFontSize()
    {
        float f0;
        java.lang.NumberFormatException $r1;
        java.lang.String $r0;

        $r0 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("jide.fontSize", null);

        f0 = -1.0F;

     label1:
        if $r0 == null goto label2;

        f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.Object getMenuFont(java.awt.Toolkit, javax.swing.UIDefaults)
    {
        java.awt.Font $r1, $r6;
        javax.swing.UIDefaults r0;
        byte $b0, $b1, $b2;
        com.jidesoft.plaf.WindowsDesktopProperty $r5;
        int $i3, $i4;
        float $f0;
        java.lang.Object $r4, r7;
        java.lang.String $r2;
        boolean $z0;
        java.awt.Toolkit r3;

        r3 := @parameter0: java.awt.Toolkit;

        r0 := @parameter1: javax.swing.UIDefaults;

        $f0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: float getDefaultFontSize()>();

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean shouldUseSystemFont()>();

        if $z0 == 0 goto label2;

        $b2 = $f0 cmpl -1.0F;

        if $b2 != 0 goto label1;

        r7 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("ToolBar.font");

        goto label8;

     label1:
        $r5 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r6 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("ToolBar.font");

        specialinvoke $r5.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit,float)>("win.menu.font", $r6, r3, $f0);

        r7 = $r5;

        goto label8;

     label2:
        $r1 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("ToolBar.font");

        if $r1 != null goto label5;

        $b1 = $f0 cmpl -1.0F;

        if $b1 == 0 goto label3;

        $i3 = (int) $f0;

        goto label4;

     label3:
        $i3 = 11;

     label4:
        r7 = staticinvoke <com.jidesoft.utils.SecurityUtils: javax.swing.plaf.FontUIResource createFontUIResource(java.lang.String,int,int)>("Tahoma", 0, $i3);

        goto label8;

     label5:
        $r2 = virtualinvoke $r1.<java.awt.Font: java.lang.String getFontName()>();

        $b0 = $f0 cmpl -1.0F;

        if $b0 == 0 goto label6;

        $i4 = (int) $f0;

        goto label7;

     label6:
        $i4 = virtualinvoke $r1.<java.awt.Font: int getSize()>();

     label7:
        r7 = staticinvoke <com.jidesoft.utils.SecurityUtils: javax.swing.plaf.FontUIResource createFontUIResource(java.lang.String,int,int)>($r2, 0, $i4);

     label8:
        if r7 != null goto label9;

        $r4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getControlFont(java.awt.Toolkit,javax.swing.UIDefaults)>(r3, r0);

        return $r4;

     label9:
        return r7;
    }

    public static java.lang.Object getControlFont(java.awt.Toolkit, javax.swing.UIDefaults)
    {
        byte $b0, $b1, $b2;
        int $i3;
        boolean $z0;
        java.awt.Font $r1, $r3, r6, $r9;
        javax.swing.UIDefaults r0;
        com.jidesoft.plaf.WindowsDesktopProperty $r10, $r11;
        float $f0;
        java.lang.Object r7, $r8;
        java.awt.Toolkit r2;

        r2 := @parameter0: java.awt.Toolkit;

        r0 := @parameter1: javax.swing.UIDefaults;

        $f0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: float getDefaultFontSize()>();

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean shouldUseSystemFont()>();

        if $z0 == 0 goto label04;

        $r3 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("Label.font");

        r6 = $r3;

        if $r3 != null goto label01;

        $r9 = new java.awt.Font;

        specialinvoke $r9.<java.awt.Font: void <init>(java.lang.String,int,int)>("Tahoma", 0, 12);

        r6 = $r9;

     label01:
        $b2 = $f0 cmpl -1.0F;

        if $b2 != 0 goto label02;

        r7 = r6;

        goto label03;

     label02:
        $r10 = new com.jidesoft.plaf.WindowsDesktopProperty;

        specialinvoke $r10.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit,float)>("win.defaultGUI.font", r6, r2, $f0);

        r7 = $r10;

     label03:
        goto label10;

     label04:
        $r1 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("Label.font");

        if $r1 != null goto label07;

        $b1 = $f0 cmpl -1.0F;

        if $b1 == 0 goto label05;

        $i3 = (int) $f0;

        goto label06;

     label05:
        $i3 = 11;

     label06:
        r7 = staticinvoke <com.jidesoft.utils.SecurityUtils: javax.swing.plaf.FontUIResource createFontUIResource(java.lang.String,int,int)>("Tahoma", 0, $i3);

        goto label10;

     label07:
        $b0 = $f0 cmpl -1.0F;

        if $b0 != 0 goto label08;

        $r8 = $r1;

        goto label09;

     label08:
        $r11 = new com.jidesoft.plaf.WindowsDesktopProperty;

        $r8 = $r11;

        specialinvoke $r11.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit,float)>("win.defaultGUI.font", $r1, r2, $f0);

     label09:
        r7 = $r8;

     label10:
        return r7;
    }

    public static java.lang.Object getBoldFont(java.awt.Toolkit, javax.swing.UIDefaults)
    {
        javax.swing.plaf.FontUIResource $r6;
        byte $b0, $b1, $b2;
        int $i3, $i4;
        java.lang.String $r2;
        boolean $z0, $z1;
        java.awt.Font $r1, $r3, $r7, $r8, r10;
        javax.swing.UIDefaults r0;
        com.jidesoft.plaf.WindowsDesktopProperty $r4;
        float $f0;
        java.lang.Object $r9, r11;
        java.awt.Toolkit r5;

        r5 := @parameter0: java.awt.Toolkit;

        r0 := @parameter1: javax.swing.UIDefaults;

        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isCJKLocale()>();

        if $z0 == 0 goto label01;

        $r9 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.lang.Object getControlFont(java.awt.Toolkit,javax.swing.UIDefaults)>(r5, r0);

        return $r9;

     label01:
        $f0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: float getDefaultFontSize()>();

        $z1 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean shouldUseSystemFont()>();

        if $z1 == 0 goto label05;

        $r3 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("Label.font");

        r10 = $r3;

        if $r3 != null goto label02;

        $r8 = new java.awt.Font;

        specialinvoke $r8.<java.awt.Font: void <init>(java.lang.String,int,int)>("Tahoma", 0, 12);

        r10 = $r8;

     label02:
        $b2 = $f0 cmpl -1.0F;

        if $b2 != 0 goto label03;

        $r6 = new javax.swing.plaf.FontUIResource;

        $r7 = virtualinvoke r10.<java.awt.Font: java.awt.Font deriveFont(int)>(1);

        specialinvoke $r6.<javax.swing.plaf.FontUIResource: void <init>(java.awt.Font)>($r7);

        r11 = $r6;

        goto label04;

     label03:
        $r4 = new com.jidesoft.plaf.WindowsDesktopProperty;

        specialinvoke $r4.<com.jidesoft.plaf.WindowsDesktopProperty: void <init>(java.lang.String,java.lang.Object,java.awt.Toolkit,float,int)>("win.defaultGUI.font", r10, r5, $f0, 1);

        r11 = $r4;

     label04:
        goto label11;

     label05:
        $r1 = virtualinvoke r0.<javax.swing.UIDefaults: java.awt.Font getFont(java.lang.Object)>("Label.font");

        if $r1 != null goto label08;

        $b1 = $f0 cmpl -1.0F;

        if $b1 == 0 goto label06;

        $i3 = (int) $f0;

        goto label07;

     label06:
        $i3 = 11;

     label07:
        r11 = staticinvoke <com.jidesoft.utils.SecurityUtils: javax.swing.plaf.FontUIResource createFontUIResource(java.lang.String,int,int)>("Tahoma", 1, $i3);

        goto label11;

     label08:
        $r2 = virtualinvoke $r1.<java.awt.Font: java.lang.String getFontName()>();

        $b0 = $f0 cmpl -1.0F;

        if $b0 == 0 goto label09;

        $i4 = (int) $f0;

        goto label10;

     label09:
        $i4 = virtualinvoke $r1.<java.awt.Font: int getSize()>();

     label10:
        r11 = staticinvoke <com.jidesoft.utils.SecurityUtils: javax.swing.plaf.FontUIResource createFontUIResource(java.lang.String,int,int)>($r2, 1, $i4);

     label11:
        return r11;
    }

    public static void drawShadow(java.awt.Graphics, java.awt.Component, int, int, int, int)
    {
        java.awt.Color $r1, $r6;
        java.awt.Graphics2D $r3;
        int i0, i1, $i2, $i3, i4, i5;
        com.jidesoft.swing.ShadowFactory $r0;
        java.awt.image.BufferedImage $r2, $r7;
        java.awt.Component r9;
        java.awt.RenderingHints$Key $r5;
        java.awt.Graphics r8;
        java.lang.Object $r4;

        r8 := @parameter0: java.awt.Graphics;

        r9 := @parameter1: java.awt.Component;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        if i0 <= 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        return;

     label2:
        $r0 = new com.jidesoft.swing.ShadowFactory;

        $r1 = <java.awt.Color: java.awt.Color GRAY>;

        specialinvoke $r0.<com.jidesoft.swing.ShadowFactory: void <init>(int,float,java.awt.Color)>(6, 0.7F, $r1);

        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        $r3 = virtualinvoke $r2.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BILINEAR>;

        virtualinvoke $r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4);

        $r6 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke $r3.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r6);

        $i2 = virtualinvoke $r2.<java.awt.image.BufferedImage: int getWidth()>();

        $i3 = virtualinvoke $r2.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke $r3.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i2, $i3);

        virtualinvoke $r3.<java.awt.Graphics2D: void dispose()>();

        $r7 = virtualinvoke $r0.<com.jidesoft.swing.ShadowFactory: java.awt.image.BufferedImage createShadow(java.awt.image.BufferedImage)>($r2);

        virtualinvoke r8.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r7, i4, i5, r9);

        return;
    }

    public static void drawImageBorder(java.awt.Graphics, javax.swing.ImageIcon, java.awt.Rectangle, java.awt.Insets, boolean)
    {
        javax.swing.ImageIcon r3;
        boolean z0;
        java.awt.Image $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.awt.Graphics r2;
        java.awt.Rectangle r1;
        java.awt.Insets r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89;

        r2 := @parameter0: java.awt.Graphics;

        r3 := @parameter1: javax.swing.ImageIcon;

        r1 := @parameter2: java.awt.Rectangle;

        r0 := @parameter3: java.awt.Insets;

        z0 := @parameter4: boolean;

        i0 = r0.<java.awt.Insets: int left>;

        i1 = r0.<java.awt.Insets: int right>;

        i2 = r0.<java.awt.Insets: int top>;

        i3 = r0.<java.awt.Insets: int bottom>;

        i4 = r1.<java.awt.Rectangle: int x>;

        i5 = r1.<java.awt.Rectangle: int y>;

        i6 = r1.<java.awt.Rectangle: int width>;

        i7 = r1.<java.awt.Rectangle: int height>;

        $r4 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i9 = i4 + i0;

        $i8 = i5 + i2;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r4, i4, i5, $i9, $i8, 0, 0, i0, i2, null);

        $r5 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i11 = i4 + i0;

        $i10 = i4 + i6;

        $i12 = $i10 - i1;

        $i13 = i5 + i2;

        $i14 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i15 = $i14 - i1;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r5, $i11, i5, $i12, $i13, i0, 0, $i15, i2, null);

        $r6 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i16 = i4 + i6;

        $i17 = $i16 - i1;

        $i18 = i4 + i6;

        $i19 = i5 + i2;

        $i20 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i21 = $i20 - i1;

        $i22 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r6, $i17, i5, $i18, $i19, $i21, 0, $i22, i2, null);

        $r7 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i24 = i5 + i2;

        $i25 = i4 + i0;

        $i23 = i5 + i7;

        $i26 = $i23 - i3;

        $i27 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i28 = $i27 - i3;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r7, i4, $i24, $i25, $i26, 0, i2, i0, $i28, null);

        $r8 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i31 = i4 + i0;

        $i32 = i5 + i2;

        $i29 = i4 + i6;

        $i33 = $i29 - i1;

        $i30 = i5 + i7;

        $i34 = $i30 - i3;

        $i35 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i36 = $i35 - i1;

        $i37 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i38 = $i37 - i3;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r8, $i31, $i32, $i33, $i34, i0, i2, $i36, $i38, null);

        $r9 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i39 = i4 + i6;

        $i41 = $i39 - i1;

        $i42 = i5 + i2;

        $i43 = i4 + i6;

        $i40 = i5 + i7;

        $i44 = $i40 - i3;

        $i45 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i46 = $i45 - i1;

        $i47 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i48 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i49 = $i48 - i3;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r9, $i41, $i42, $i43, $i44, $i46, i2, $i47, $i49, null);

        $r10 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i50 = i5 + i7;

        $i51 = $i50 - i3;

        $i52 = i4 + i0;

        $i53 = i5 + i7;

        $i54 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i55 = $i54 - i3;

        $i56 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r10, i4, $i51, $i52, $i53, 0, $i55, i0, $i56, null);

        $r11 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i59 = i4 + i0;

        $i57 = i5 + i7;

        $i60 = $i57 - i3;

        $i58 = i4 + i6;

        $i61 = $i58 - i1;

        $i62 = i5 + i7;

        $i63 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i64 = $i63 - i3;

        $i65 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i66 = $i65 - i1;

        $i67 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r11, $i59, $i60, $i61, $i62, i0, $i64, $i66, $i67, null);

        $r12 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i68 = i4 + i6;

        $i70 = $i68 - i1;

        $i69 = i5 + i7;

        $i71 = $i69 - i3;

        $i72 = i4 + i6;

        $i73 = i5 + i7;

        $i74 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i75 = $i74 - i1;

        $i76 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i77 = $i76 - i3;

        $i78 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i79 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r12, $i70, $i71, $i72, $i73, $i75, $i77, $i78, $i79, null);

        if z0 == 0 goto label1;

        $r13 = virtualinvoke r3.<javax.swing.ImageIcon: java.awt.Image getImage()>();

        $i82 = i4 + i0;

        $i83 = i5 + i2;

        $i80 = i4 + i6;

        $i84 = $i80 - i1;

        $i81 = i5 + i7;

        $i85 = $i81 - i3;

        $i86 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconWidth()>();

        $i87 = $i86 - i1;

        $i88 = virtualinvoke r3.<javax.swing.ImageIcon: int getIconHeight()>();

        $i89 = $i88 - i3;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>($r13, $i82, $i83, $i84, $i85, i0, i2, $i87, $i89, null);

     label1:
        return;
    }

    public static boolean compositeRequestFocus(java.awt.Component)
    {
        java.awt.Component r3, $r41, r59;
        java.lang.Exception $r57;
        java.lang.StringBuilder $r0, $r2, $r4, $r6, $r8, $r9, $r11, $r13, $r14, $r18, $r20, $r21, $r24, $r26, $r27, $r29, $r31, $r32, $r34, $r36, $r37, $r42, $r44, $r45, $r47, $r49, $r50, $r52, $r54, $r55;
        java.lang.String $r5, $r10, $r15, $r22, $r28, $r33, $r38, $r46, $r51, $r56;
        java.awt.Container r17, $r58;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.awt.FocusTraversalPolicy $r23, $r40;
        java.util.logging.Logger $r1, $r7, $r12, $r16, $r19, $r25, $r30, $r35, $r39, $r43, $r48, $r53;
        int $i0;

        r3 := @parameter0: java.awt.Component;

        $r1 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.util.logging.Logger: void fine(java.lang.String)>($r5);

        $z0 = r3 instanceof java.awt.Container;

        if $z0 == 0 goto label6;

        $r16 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        virtualinvoke $r16.<java.util.logging.Logger: void fine(java.lang.String)>("compositeRequestFocus is container.");

        r17 = (java.awt.Container) r3;

        $z2 = virtualinvoke r17.<java.awt.Container: boolean isFocusCycleRoot()>();

        if $z2 == 0 goto label1;

        $r39 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        virtualinvoke $r39.<java.util.logging.Logger: void fine(java.lang.String)>("compositeRequestFocus is focuscycleroot.");

        $r40 = virtualinvoke r17.<java.awt.Container: java.awt.FocusTraversalPolicy getFocusTraversalPolicy()>();

        $r41 = virtualinvoke $r40.<java.awt.FocusTraversalPolicy: java.awt.Component getDefaultComponent(java.awt.Container)>(r17);

        $r43 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus default component = ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r43.<java.util.logging.Logger: void fine(java.lang.String)>($r46);

        if $r41 == null goto label1;

        $z6 = virtualinvoke $r41.<java.awt.Component: boolean isShowing()>();

        if $z6 == 0 goto label1;

        $i0 = virtualinvoke r17.<java.awt.Container: int getComponentCount()>();

        if $i0 <= 0 goto label1;

        $r48 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus default component passesFocusabilityTest =");

        $z7 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean passesFocusabilityTest(java.awt.Component)>($r41);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<java.util.logging.Logger: void fine(java.lang.String)>($r51);

        $r53 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus requestFocus for ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r53.<java.util.logging.Logger: void fine(java.lang.String)>($r56);

        $z8 = virtualinvoke $r41.<java.awt.Component: boolean requestFocusInWindow()>();

        return $z8;

     label1:
        $r58 = virtualinvoke r17.<java.awt.Container: java.awt.Container getFocusCycleRootAncestor()>();

        if $r58 == null goto label6;

        $r19 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus using rootAncestor =");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r58);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.util.logging.Logger: void fine(java.lang.String)>($r22);

        $r23 = virtualinvoke $r58.<java.awt.Container: java.awt.FocusTraversalPolicy getFocusTraversalPolicy()>();

        r59 = null;

     label2:
        r59 = virtualinvoke $r23.<java.awt.FocusTraversalPolicy: java.awt.Component getComponentAfter(java.awt.Container,java.awt.Component)>($r58, r17);

     label3:
        goto label5;

     label4:
        $r57 := @caughtexception;

     label5:
        $r25 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus getComponentAfter =");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r59);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r25.<java.util.logging.Logger: void fine(java.lang.String)>($r28);

        if r59 == null goto label6;

        $z3 = staticinvoke <javax.swing.SwingUtilities: boolean isDescendingFrom(java.awt.Component,java.awt.Component)>(r59, r17);

        if $z3 == 0 goto label6;

        $r30 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus getComponentAfter passesFocusabilityTest =");

        $z4 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean passesFocusabilityTest(java.awt.Component)>(r59);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<java.util.logging.Logger: void fine(java.lang.String)>($r33);

        $r35 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus requestFocus for ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r59);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r35.<java.util.logging.Logger: void fine(java.lang.String)>($r38);

        $z5 = virtualinvoke r59.<java.awt.Component: boolean requestFocusInWindow()>();

        return $z5;

     label6:
        $z9 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean passesFocusabilityTest(java.awt.Component)>(r3);

        if $z9 != 0 goto label7;

        $r12 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus returingfalse because !passesFocusabilityTest");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void fine(java.lang.String)>($r15);

        return 0;

     label7:
        $r7 = <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("compositeRequestFocus component=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void fine(java.lang.String)>($r10);

        $z1 = virtualinvoke r3.<java.awt.Component: boolean requestFocusInWindow()>();

        return $z1;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static boolean isAncestorOfFocusOwner(java.awt.Component)
    {
        java.awt.KeyboardFocusManager $r0;
        java.awt.Container $r3;
        java.awt.Component $r1, r2;
        boolean $z0, $z1, z2;

        r2 := @parameter0: java.awt.Component;

        z2 = 0;

        $r0 = staticinvoke <java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>();

        $r1 = virtualinvoke $r0.<java.awt.KeyboardFocusManager: java.awt.Component getFocusOwner()>();

        if r2 == $r1 goto label1;

        $z0 = r2 instanceof java.awt.Container;

        if $z0 == 0 goto label2;

        $r3 = (java.awt.Container) r2;

        $z1 = virtualinvoke $r3.<java.awt.Container: boolean isAncestorOf(java.awt.Component)>($r1);

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

     label2:
        return z2;
    }

    public static java.awt.Window getWindowForComponent(java.awt.Component) throws java.awt.HeadlessException
    {
        java.awt.Frame $r4;
        java.awt.Window $r1, $r3;
        java.awt.Container $r2;
        java.awt.Component r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        if r0 != null goto label1;

        $r4 = staticinvoke <javax.swing.JOptionPane: java.awt.Frame getRootFrame()>();

        return $r4;

     label1:
        $z0 = r0 instanceof java.awt.Frame;

        if $z0 != 0 goto label2;

        $z1 = r0 instanceof java.awt.Dialog;

        if $z1 == 0 goto label3;

     label2:
        $r1 = (java.awt.Window) r0;

        return $r1;

     label3:
        $r2 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        $r3 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Window getWindowForComponent(java.awt.Component)>($r2);

        return $r3;
    }

    public static boolean isKeyListenerRegistered(java.awt.Component, java.awt.event.KeyListener)
    {
        java.awt.event.KeyListener r2, r3;
        int i0, i1;
        java.awt.event.KeyListener[] $r1;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r3 := @parameter1: java.awt.event.KeyListener;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.event.KeyListener[] getKeyListeners()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 != r3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void insertKeyListener(java.awt.Component, java.awt.event.KeyListener, int)
    {
        java.awt.event.KeyListener r2, r3, r4;
        java.awt.event.KeyListener[] $r1;
        java.awt.Component r0;
        int $i0, i1, $i2, $i3, i4, i5, i6;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.event.KeyListener;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.event.KeyListener[] getKeyListeners()>();

        i4 = lengthof $r1;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r3 = $r1[i5];

        virtualinvoke r0.<java.awt.Component: void removeKeyListener(java.awt.event.KeyListener)>(r3);

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        $i0 = lengthof $r1;

        if i6 >= $i0 goto label5;

        r4 = $r1[i6];

        if i1 != i6 goto label4;

        virtualinvoke r0.<java.awt.Component: void addKeyListener(java.awt.event.KeyListener)>(r2);

     label4:
        virtualinvoke r0.<java.awt.Component: void addKeyListener(java.awt.event.KeyListener)>(r4);

        i6 = i6 + 1;

        goto label3;

     label5:
        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        if i1 <= $i3 goto label6;

        virtualinvoke r0.<java.awt.Component: void addKeyListener(java.awt.event.KeyListener)>(r2);

     label6:
        return;
    }

    public static void insertTableModelListener(javax.swing.table.TableModel, javax.swing.event.TableModelListener, int)
    {
        javax.swing.event.TableModelListener r3, r4, r5;
        javax.swing.table.AbstractTableModel $r1;
        int $i0, i1, $i2, $i3, i4, i5, i6;
        javax.swing.event.TableModelListener[] $r2;
        javax.swing.table.TableModel r0;
        boolean $z0;

        r0 := @parameter0: javax.swing.table.TableModel;

        r3 := @parameter1: javax.swing.event.TableModelListener;

        i1 := @parameter2: int;

        $z0 = r0 instanceof javax.swing.table.AbstractTableModel;

        if $z0 != 0 goto label1;

        interfaceinvoke r0.<javax.swing.table.TableModel: void addTableModelListener(javax.swing.event.TableModelListener)>(r3);

        return;

     label1:
        $r1 = (javax.swing.table.AbstractTableModel) r0;

        $r2 = virtualinvoke $r1.<javax.swing.table.AbstractTableModel: javax.swing.event.TableModelListener[] getTableModelListeners()>();

        i4 = lengthof $r2;

        i5 = 0;

     label2:
        if i5 >= i4 goto label3;

        r4 = $r2[i5];

        interfaceinvoke r0.<javax.swing.table.TableModel: void removeTableModelListener(javax.swing.event.TableModelListener)>(r4);

        i5 = i5 + 1;

        goto label2;

     label3:
        i6 = 0;

     label4:
        $i0 = lengthof $r2;

        if i6 >= $i0 goto label6;

        r5 = $r2[i6];

        if i1 != i6 goto label5;

        interfaceinvoke r0.<javax.swing.table.TableModel: void addTableModelListener(javax.swing.event.TableModelListener)>(r3);

     label5:
        interfaceinvoke r0.<javax.swing.table.TableModel: void addTableModelListener(javax.swing.event.TableModelListener)>(r5);

        i6 = i6 + 1;

        goto label4;

     label6:
        if i1 < 0 goto label7;

        $i2 = lengthof $r2;

        $i3 = $i2 - 1;

        if i1 <= $i3 goto label8;

     label7:
        interfaceinvoke r0.<javax.swing.table.TableModel: void addTableModelListener(javax.swing.event.TableModelListener)>(r3);

     label8:
        return;
    }

    public static boolean isPropertyChangeListenerRegistered(java.awt.Component, java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeListener[] $r1;
        java.beans.PropertyChangeListener r2, r3;
        int i0, i1;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r3 := @parameter1: java.beans.PropertyChangeListener;

        $r1 = virtualinvoke r0.<java.awt.Component: java.beans.PropertyChangeListener[] getPropertyChangeListeners()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 != r3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static boolean isPropertyChangeListenerRegistered(java.awt.Component, java.lang.String, java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeListener[] $r2;
        java.awt.Component r1;
        java.beans.PropertyChangeListener r3, r4;
        int i0, i1;
        java.lang.String r0;
        boolean $z0;

        r1 := @parameter0: java.awt.Component;

        r0 := @parameter1: java.lang.String;

        r4 := @parameter2: java.beans.PropertyChangeListener;

        if r0 != null goto label1;

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean isPropertyChangeListenerRegistered(java.awt.Component,java.beans.PropertyChangeListener)>(r1, r4);

        return $z0;

     label1:
        $r2 = virtualinvoke r1.<java.awt.Component: java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)>(r0);

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = $r2[i1];

        if r3 != r4 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static boolean isMouseListenerRegistered(java.awt.Component, java.awt.event.MouseListener)
    {
        int i0, i1;
        java.awt.Component r0;
        java.awt.event.MouseListener r2, r3;
        java.awt.event.MouseListener[] $r1;

        r0 := @parameter0: java.awt.Component;

        r3 := @parameter1: java.awt.event.MouseListener;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.event.MouseListener[] getMouseListeners()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 != r3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void insertMouseListener(java.awt.Component, java.awt.event.MouseListener, int)
    {
        java.awt.Component r0;
        java.awt.event.MouseListener[] $r1;
        int $i0, i1, $i2, $i3, i4, i5, i6;
        java.awt.event.MouseListener r2, r3, r4;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.event.MouseListener;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.event.MouseListener[] getMouseListeners()>();

        i4 = lengthof $r1;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r3 = $r1[i5];

        virtualinvoke r0.<java.awt.Component: void removeMouseListener(java.awt.event.MouseListener)>(r3);

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        $i0 = lengthof $r1;

        if i6 >= $i0 goto label5;

        r4 = $r1[i6];

        if i1 != i6 goto label4;

        virtualinvoke r0.<java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>(r2);

     label4:
        virtualinvoke r0.<java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>(r4);

        i6 = i6 + 1;

        goto label3;

     label5:
        if i1 < 0 goto label6;

        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        if i1 <= $i3 goto label7;

     label6:
        virtualinvoke r0.<java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>(r2);

     label7:
        return;
    }

    public static boolean isMouseMotionListenerRegistered(java.awt.Component, java.awt.event.MouseMotionListener)
    {
        java.awt.event.MouseMotionListener r2, r3;
        java.awt.event.MouseMotionListener[] $r1;
        int i0, i1;
        java.awt.Component r0;

        r0 := @parameter0: java.awt.Component;

        r3 := @parameter1: java.awt.event.MouseMotionListener;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.event.MouseMotionListener[] getMouseMotionListeners()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = $r1[i1];

        if r2 != r3 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void insertMouseMotionListener(java.awt.Component, java.awt.event.MouseMotionListener, int)
    {
        java.awt.Component r0;
        java.awt.event.MouseMotionListener r2, r3, r4;
        java.awt.event.MouseMotionListener[] $r1;
        int $i0, i1, $i2, $i3, i4, i5, i6;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.event.MouseMotionListener;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.event.MouseMotionListener[] getMouseMotionListeners()>();

        i4 = lengthof $r1;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r3 = $r1[i5];

        virtualinvoke r0.<java.awt.Component: void removeMouseMotionListener(java.awt.event.MouseMotionListener)>(r3);

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        $i0 = lengthof $r1;

        if i6 >= $i0 goto label5;

        r4 = $r1[i6];

        if i1 != i6 goto label4;

        virtualinvoke r0.<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>(r2);

     label4:
        virtualinvoke r0.<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>(r4);

        i6 = i6 + 1;

        goto label3;

     label5:
        if i1 < 0 goto label6;

        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        if i1 <= $i3 goto label7;

     label6:
        virtualinvoke r0.<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>(r2);

     label7:
        return;
    }

    public static java.awt.Component getScrollPane(java.awt.Component)
    {
        java.awt.Component r0;
        java.awt.Container $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.awt.Component;

        $z0 = r0 instanceof javax.swing.JScrollPane;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        $r3 = virtualinvoke $r2.<java.awt.Container: java.awt.Container getParent()>();

        if $r3 == null goto label2;

        $r4 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        $r5 = virtualinvoke $r4.<java.awt.Container: java.awt.Container getParent()>();

        $z1 = $r5 instanceof javax.swing.JScrollPane;

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        $r7 = virtualinvoke $r6.<java.awt.Container: java.awt.Container getParent()>();

        return $r7;

     label2:
        return null;
    }

    public static boolean isListenerRegistered(javax.swing.event.EventListenerList, java.lang.Class, java.util.EventListener)
    {
        java.util.EventListener r3;
        java.lang.Object[] $r1;
        javax.swing.event.EventListenerList r0;
        java.lang.Class r2;
        boolean $z0;

        r0 := @parameter0: javax.swing.event.EventListenerList;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.EventListener;

        $r1 = virtualinvoke r0.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>();

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean isListenerRegistered(java.lang.Object[],java.lang.Class,java.util.EventListener)>($r1, r2, r3);

        return $z0;
    }

    public static boolean isListenerRegistered(java.awt.Component, java.lang.Class, java.util.EventListener)
    {
        java.util.EventListener r3;
        java.util.EventListener[] $r2;
        java.lang.Class r1;
        java.awt.Component r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Component;

        r1 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.EventListener;

        $r2 = virtualinvoke r0.<java.awt.Component: java.util.EventListener[] getListeners(java.lang.Class)>(r1);

        $z0 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: boolean isListenerRegistered(java.lang.Object[],java.lang.Class,java.util.EventListener)>($r2, r1, r3);

        return $z0;
    }

    private static boolean isListenerRegistered(java.lang.Object[], java.lang.Class, java.util.EventListener)
    {
        java.lang.Object[] r0;
        java.util.EventListener r3;
        int $i0, $i1, i2, $i4;
        java.lang.Class r1;
        java.lang.Object $r2, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.EventListener;

        $i0 = lengthof r0;

        i2 = $i0 - 2;

     label1:
        if i2 < 0 goto label3;

        $r2 = r0[i2];

        if $r2 != r1 goto label2;

        $i1 = i2 + 1;

        $r4 = r0[$i1];

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i4 = (int) -2;

        i2 = i2 + $i4;

        goto label1;

     label3:
        return 0;
    }

    public static java.awt.Component getFirstChildOf(java.lang.Class, java.awt.Component)
    {
        com.jidesoft.swing.JideSwingUtilities$17 $r1;
        java.lang.Class r2;
        java.awt.Component r0, $r3;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.awt.Component;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$17;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$17: void <init>(java.lang.Class)>(r2);

        $r3 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$GetHandler)>(r0, $r1);

        return $r3;
    }

    public static int getComponentIndex(java.awt.Container, java.awt.Component)
    {
        java.awt.Component r0, $r4;
        java.awt.Component[] $r3;
        int $i0, i1, $i3, $i5;
        java.awt.Container $r1, r2;

        r2 := @parameter0: java.awt.Container;

        r0 := @parameter1: java.awt.Component;

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        if $r1 == r2 goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r3 = virtualinvoke r2.<java.awt.Container: java.awt.Component[] getComponents()>();

        i1 = 0;

     label2:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        $r4 = $r3[i1];

        if $r4 != r0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $i5 = (int) -1;

        return $i5;
    }

    public static java.util.Vector convertDefaultComboBoxModelToVector(javax.swing.DefaultComboBoxModel)
    {
        java.util.Vector $r0;
        int $i0, i1;
        javax.swing.DefaultComboBoxModel r1;
        java.lang.Object $r2;

        r1 := @parameter0: javax.swing.DefaultComboBoxModel;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<javax.swing.DefaultComboBoxModel: int getSize()>();

        if i1 >= $i0 goto label2;

        $r2 = virtualinvoke r1.<javax.swing.DefaultComboBoxModel: java.lang.Object getElementAt(int)>(i1);

        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static void ensureRowVisible(javax.swing.JTable, int)
    {
        java.awt.Rectangle $r1, $r2, $r4, r5, r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        javax.swing.table.TableModel $r3;
        double $d0, $d1, $d2, $d3;
        boolean $z0;
        javax.swing.JTable r0;

        r0 := @parameter0: javax.swing.JTable;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<javax.swing.JTable: java.awt.Rectangle getVisibleRect()>();

        $r2 = virtualinvoke r0.<javax.swing.JTable: java.awt.Rectangle getCellRect(int,int,boolean)>(i0, 0, 1);

        r5 = null;

        r6 = null;

        $r3 = virtualinvoke r0.<javax.swing.JTable: javax.swing.table.TableModel getModel()>();

        $i1 = interfaceinvoke $r3.<javax.swing.table.TableModel: int getRowCount()>();

        $i2 = $i1 - 1;

        if i0 >= $i2 goto label1;

        $i11 = i0 + 1;

        r6 = virtualinvoke r0.<javax.swing.JTable: java.awt.Rectangle getCellRect(int,int,boolean)>($i11, 0, 1);

     label1:
        if i0 <= 0 goto label2;

        $i8 = i0 - 1;

        r5 = virtualinvoke r0.<javax.swing.JTable: java.awt.Rectangle getCellRect(int,int,boolean)>($i8, 0, 1);

     label2:
        $d0 = virtualinvoke $r2.<java.awt.Rectangle: double getMinY()>();

        i12 = (int) $d0;

        $d1 = virtualinvoke $r2.<java.awt.Rectangle: double getMaxY()>();

        i13 = (int) $d1;

        $i9 = $r1.<java.awt.Rectangle: int x>;

        $i4 = $r1.<java.awt.Rectangle: int x>;

        $i3 = $r1.<java.awt.Rectangle: int width>;

        $i10 = $i4 + $i3;

        if r5 == null goto label3;

        $d3 = virtualinvoke r5.<java.awt.Rectangle: double getMinY()>();

        i12 = (int) $d3;

     label3:
        if r6 == null goto label4;

        $d2 = virtualinvoke r6.<java.awt.Rectangle: double getMaxY()>();

        i13 = (int) $d2;

     label4:
        $r4 = new java.awt.Rectangle;

        $i6 = $i10 - $i9;

        $i5 = i13 - i12;

        specialinvoke $r4.<java.awt.Rectangle: void <init>(int,int,int,int)>($i9, i12, $i6, $i5);

        $z0 = virtualinvoke $r1.<java.awt.Rectangle: boolean contains(java.awt.Rectangle)>($r4);

        if $z0 != 0 goto label5;

        $i7 = $r4.<java.awt.Rectangle: int height>;

        if $i7 == 0 goto label5;

        virtualinvoke r0.<javax.swing.JTable: void scrollRectToVisible(java.awt.Rectangle)>($r4);

     label5:
        return;
    }

    public static void retargetMouseEvent(int, java.awt.event.MouseEvent, java.awt.Component)
    {
        java.awt.Point $r5;
        long $l3;
        int $i0, $i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        java.awt.Component r0, $r4;
        java.awt.event.MouseEvent r1, $r6;
        java.lang.Object $r2, $r3;

        i2 := @parameter0: int;

        r1 := @parameter1: java.awt.event.MouseEvent;

        r0 := @parameter2: java.awt.Component;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<java.awt.event.MouseEvent: java.lang.Object getSource()>();

        if r0 != $r2 goto label2;

        $i10 = virtualinvoke r1.<java.awt.event.MouseEvent: int getID()>();

        if i2 != $i10 goto label2;

     label1:
        return;

     label2:
        $z0 = virtualinvoke r1.<java.awt.event.MouseEvent: boolean isConsumed()>();

        if $z0 == 0 goto label3;

        return;

     label3:
        $r3 = virtualinvoke r1.<java.awt.event.MouseEvent: java.lang.Object getSource()>();

        $r4 = (java.awt.Component) $r3;

        $i0 = virtualinvoke r1.<java.awt.event.MouseEvent: int getX()>();

        $i1 = virtualinvoke r1.<java.awt.event.MouseEvent: int getY()>();

        $r5 = staticinvoke <javax.swing.SwingUtilities: java.awt.Point convertPoint(java.awt.Component,int,int,java.awt.Component)>($r4, $i0, $i1, r0);

        $r6 = new java.awt.event.MouseEvent;

        $l3 = virtualinvoke r1.<java.awt.event.MouseEvent: long getWhen()>();

        $i4 = virtualinvoke r1.<java.awt.event.MouseEvent: int getModifiersEx()>();

        $i5 = virtualinvoke r1.<java.awt.event.MouseEvent: int getModifiers()>();

        $i6 = $i4 | $i5;

        $i7 = $r5.<java.awt.Point: int x>;

        $i8 = $r5.<java.awt.Point: int y>;

        $i9 = virtualinvoke r1.<java.awt.event.MouseEvent: int getClickCount()>();

        $z1 = virtualinvoke r1.<java.awt.event.MouseEvent: boolean isPopupTrigger()>();

        specialinvoke $r6.<java.awt.event.MouseEvent: void <init>(java.awt.Component,int,long,int,int,int,int,boolean)>(r0, i2, $l3, $i6, $i7, $i8, $i9, $z1);

        virtualinvoke r0.<java.awt.Component: void dispatchEvent(java.awt.AWTEvent)>($r6);

        return;
    }

    public static javax.swing.JRootPane getOutermostRootPane(java.awt.Component)
    {
        java.awt.Container $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.swing.JRootPane r0, $r10;
        javax.swing.RootPaneContainer $r9;
        java.awt.Component r11;

        r11 := @parameter0: java.awt.Component;

        $z0 = r11 instanceof javax.swing.RootPaneContainer;

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        if $r8 != null goto label1;

        $r9 = (javax.swing.RootPaneContainer) r11;

        $r10 = interfaceinvoke $r9.<javax.swing.RootPaneContainer: javax.swing.JRootPane getRootPane()>();

        return $r10;

     label1:
        if r11 == null goto label6;

        $z1 = r11 instanceof javax.swing.JRootPane;

        if $z1 == 0 goto label5;

        r0 = (javax.swing.JRootPane) r11;

        $r1 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        $r2 = virtualinvoke $r1.<java.awt.Container: java.awt.Container getParent()>();

        if $r2 != null goto label2;

        return r0;

     label2:
        $r3 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        $z2 = $r3 instanceof javax.swing.JDialog;

        if $z2 != 0 goto label3;

        $r4 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        $z3 = $r4 instanceof javax.swing.JWindow;

        if $z3 != 0 goto label3;

        $r5 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        $z4 = $r5 instanceof javax.swing.JFrame;

        if $z4 != 0 goto label3;

        $r6 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        $z5 = $r6 instanceof javax.swing.JApplet;

        if $z5 == 0 goto label4;

     label3:
        return r0;

     label4:
        $r7 = virtualinvoke r11.<java.awt.Component: java.awt.Container getParent()>();

        r11 = virtualinvoke $r7.<java.awt.Container: java.awt.Container getParent()>();

     label5:
        r11 = staticinvoke <javax.swing.SwingUtilities: javax.swing.JRootPane getRootPane(java.awt.Component)>(r11);

        goto label1;

     label6:
        return null;
    }

    public static boolean isFixedWidthFont(java.lang.String, java.awt.Component)
    {
        java.lang.Throwable $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.awt.Font $r1, $r2;
        java.awt.Component r3;
        java.awt.FontMetrics $r4, $r5;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: java.awt.Component;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(" Bold");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(" ITC");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(" MT");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(" LET");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".bold");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".italic");

        if $z5 == 0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = new java.awt.Font;

        specialinvoke $r1.<java.awt.Font: void <init>(java.lang.String,int,int)>(r0, 0, 12);

        $z6 = virtualinvoke $r1.<java.awt.Font: boolean canDisplay(char)>(87);

        if $z6 != 0 goto label4;

     label3:
        return 0;

     label4:
        $r2 = virtualinvoke $r1.<java.awt.Font: java.awt.Font deriveFont(int)>(1);

        $r4 = virtualinvoke r3.<java.awt.Component: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        $r5 = virtualinvoke r3.<java.awt.Component: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        $i0 = virtualinvoke $r4.<java.awt.FontMetrics: int charWidth(char)>(108);

        $i1 = virtualinvoke $r5.<java.awt.FontMetrics: int charWidth(char)>(108);

        if $i0 != $i1 goto label6;

        $i2 = virtualinvoke $r4.<java.awt.FontMetrics: int charWidth(char)>(87);

        $i3 = virtualinvoke $r5.<java.awt.FontMetrics: int charWidth(char)>(87);

        if $i2 != $i3 goto label6;

        if $i0 != $i2 goto label6;

        $i4 = virtualinvoke $r4.<java.awt.FontMetrics: int charWidth(char)>(32);

        $i5 = virtualinvoke $r5.<java.awt.FontMetrics: int charWidth(char)>(32);

        if $i4 != $i5 goto label6;

     label5:
        return 1;

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

     label8:
        return 0;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public static void setLocaleRecursively(java.awt.Component, java.util.Locale)
    {
        com.jidesoft.swing.JideSwingUtilities$18 $r1;
        java.awt.Component r0;
        java.util.Locale r2;

        r0 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.util.Locale;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$18;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$18: void <init>(java.util.Locale)>(r2);

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

        return;
    }

    public static void setBounds(java.awt.Container, java.awt.Component, java.awt.Rectangle)
    {
        java.awt.Rectangle $r2, r3;
        java.awt.Component r4;
        java.awt.ComponentOrientation $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.awt.Container r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Container;

        r4 := @parameter1: java.awt.Component;

        r3 := @parameter2: java.awt.Rectangle;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r1.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 == 0 goto label1;

        virtualinvoke r4.<java.awt.Component: void setBounds(java.awt.Rectangle)>(r3);

        goto label2;

     label1:
        $r2 = new java.awt.Rectangle;

        specialinvoke $r2.<java.awt.Rectangle: void <init>(java.awt.Rectangle)>(r3);

        $i0 = virtualinvoke r0.<java.awt.Container: int getWidth()>();

        $i2 = r3.<java.awt.Rectangle: int x>;

        $i1 = r3.<java.awt.Rectangle: int width>;

        $i3 = $i2 + $i1;

        $i4 = $i0 - $i3;

        $r2.<java.awt.Rectangle: int x> = $i4;

        virtualinvoke r4.<java.awt.Component: void setBounds(java.awt.Rectangle)>($r2);

     label2:
        return;
    }

    public static void setBounds(java.awt.Container, java.awt.Component, int, int, int, int)
    {
        java.awt.Component r2;
        java.awt.ComponentOrientation $r1;
        int $i0, i1, i2, $i3, i4, i5, $i6;
        java.awt.Container r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Container;

        r2 := @parameter1: java.awt.Component;

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        i2 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = virtualinvoke r0.<java.awt.Container: java.awt.ComponentOrientation getComponentOrientation()>();

        $z0 = virtualinvoke $r1.<java.awt.ComponentOrientation: boolean isLeftToRight()>();

        if $z0 == 0 goto label1;

        virtualinvoke r2.<java.awt.Component: void setBounds(int,int,int,int)>(i1, i4, i2, i5);

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.awt.Container: int getWidth()>();

        $i3 = $i0 - i1;

        $i6 = $i3 - i2;

        virtualinvoke r2.<java.awt.Component: void setBounds(int,int,int,int)>($i6, i4, i2, i5);

     label2:
        return;
    }

    public static void invalidateRecursively(java.awt.Component)
    {
        com.jidesoft.swing.JideSwingUtilities$19 $r1;
        java.awt.Component r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Component;

        $z0 = r0 instanceof javax.swing.JComponent;

        if $z0 == 0 goto label1;

        $r1 = new com.jidesoft.swing.JideSwingUtilities$19;

        specialinvoke $r1.<com.jidesoft.swing.JideSwingUtilities$19: void <init>()>();

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$Handler)>(r0, $r1);

     label1:
        virtualinvoke r0.<java.awt.Component: void doLayout()>();

        virtualinvoke r0.<java.awt.Component: void repaint()>();

        return;
    }

    public static void synchronizeKeyboardActions(javax.swing.JComponent, javax.swing.JComponent, javax.swing.KeyStroke[], int)
    {
        javax.swing.KeyStroke r1;
        javax.swing.JComponent r2, r4;
        java.awt.event.ActionListener $r3;
        javax.swing.KeyStroke[] r0;
        int i0, i1, i2;

        r2 := @parameter0: javax.swing.JComponent;

        r4 := @parameter1: javax.swing.JComponent;

        r0 := @parameter2: javax.swing.KeyStroke[];

        i1 := @parameter3: int;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r1 = r0[i2];

        $r3 = virtualinvoke r2.<javax.swing.JComponent: java.awt.event.ActionListener getActionForKeyStroke(javax.swing.KeyStroke)>(r1);

        if $r3 == null goto label2;

        virtualinvoke r4.<javax.swing.JComponent: void registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)>($r3, r1, i1);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public static javax.swing.JComponent getFirstJComponent(javax.swing.RootPaneContainer)
    {
        javax.swing.JComponent $r4;
        javax.swing.RootPaneContainer r0;
        java.awt.Container $r1;
        com.jidesoft.swing.JideSwingUtilities$20 $r2;
        java.awt.Component $r3;

        r0 := @parameter0: javax.swing.RootPaneContainer;

        $r1 = interfaceinvoke r0.<javax.swing.RootPaneContainer: java.awt.Container getContentPane()>();

        $r2 = new com.jidesoft.swing.JideSwingUtilities$20;

        specialinvoke $r2.<com.jidesoft.swing.JideSwingUtilities$20: void <init>()>();

        $r3 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: java.awt.Component getRecursively(java.awt.Component,com.jidesoft.swing.JideSwingUtilities$GetHandler)>($r1, $r2);

        $r4 = (javax.swing.JComponent) $r3;

        return $r4;
    }

    public static java.awt.Dimension adjustPreferredScrollableViewportSize(javax.swing.JList, java.awt.Dimension)
    {
        java.awt.Rectangle $r1, $r6;
        javax.swing.JList r0;
        java.awt.Component $r4;
        java.lang.Exception $r7;
        javax.swing.ListCellRenderer $r3;
        java.awt.Dimension r2, $r5;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: javax.swing.JList;

        r2 := @parameter1: java.awt.Dimension;

        $r1 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>(0, 0);

        if $r1 == null goto label5;

        $i2 = $r1.<java.awt.Rectangle: int height>;

        if $i2 >= 3 goto label5;

        $r3 = virtualinvoke r0.<javax.swing.JList: javax.swing.ListCellRenderer getCellRenderer()>();

        if $r3 == null goto label5;

        $r4 = interfaceinvoke $r3.<javax.swing.ListCellRenderer: java.awt.Component getListCellRendererComponent(javax.swing.JList,java.lang.Object,int,boolean,boolean)>(r0, "DUMMY STRING", 0, 0, 0);

        if $r4 == null goto label5;

        $r5 = virtualinvoke $r4.<java.awt.Component: java.awt.Dimension getPreferredSize()>();

        if $r5 == null goto label5;

        i3 = $r5.<java.awt.Dimension: int height>;

        if i3 >= 3 goto label4;

     label1:
        $r6 = virtualinvoke r0.<javax.swing.JList: java.awt.Rectangle getCellBounds(int,int)>(1, 1);

        i3 = $r6.<java.awt.Rectangle: int height>;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        i3 = 16;

     label4:
        virtualinvoke r0.<javax.swing.JList: void setFixedCellHeight(int)>(i3);

     label5:
        $z0 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk15Above()>();

        if $z0 == 0 goto label6;

        return r2;

     label6:
        $i0 = r2.<java.awt.Dimension: int height>;

        $i1 = $i0 + 1;

        r2.<java.awt.Dimension: int height> = $i1;

        return r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void removeFromParentWithFocusTransfer(java.awt.Component)
    {
        java.awt.Container $r1, $r2;
        java.awt.Component r0;
        boolean $z0;

        r0 := @parameter0: java.awt.Component;

        $z0 = virtualinvoke r0.<java.awt.Component: boolean isVisible()>();

        virtualinvoke r0.<java.awt.Component: void setVisible(boolean)>(0);

        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.awt.Component: java.awt.Container getParent()>();

        virtualinvoke $r2.<java.awt.Container: void remove(java.awt.Component)>(r0);

     label1:
        virtualinvoke r0.<java.awt.Component: void setVisible(boolean)>($z0);

        return;
    }

    public static int getLineHeight(java.awt.Component, int)
    {
        java.awt.Font $r2;
        java.awt.Component r0;
        java.awt.FontMetrics $r1;
        int $i0, $i1, $i2, i3;
        float $f0, f1, f2;

        r0 := @parameter0: java.awt.Component;

        i3 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.awt.Component: java.awt.Font getFont()>();

     label2:
        if $r2 != null goto label3;

        return i3;

     label3:
        $r1 = virtualinvoke r0.<java.awt.Component: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r2);

        $i0 = virtualinvoke $r1.<java.awt.FontMetrics: int getHeight()>();

        f1 = (float) $i0;

        $i1 = virtualinvoke $r1.<java.awt.FontMetrics: int getDescent()>();

        $f0 = (float) $i1;

        f2 = f1 + $f0;

        $i2 = (int) f2;

        return $i2;
    }

    public static void addSeparatorIfNecessary(javax.swing.JPopupMenu)
    {
        javax.swing.JPopupMenu r0;
        int $i0, $i1;
        java.awt.Component $r1;
        boolean $z0;

        r0 := @parameter0: javax.swing.JPopupMenu;

        $i0 = virtualinvoke r0.<javax.swing.JPopupMenu: int getComponentCount()>();

        if $i0 <= 0 goto label1;

        $i1 = $i0 - 1;

        $r1 = virtualinvoke r0.<javax.swing.JPopupMenu: java.awt.Component getComponent(int)>($i1);

        $z0 = $r1 instanceof javax.swing.JSeparator;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<javax.swing.JPopupMenu: void addSeparator()>();

     label1:
        return;
    }

    public static void removeExtraSeparators(javax.swing.JPopupMenu)
    {
        javax.swing.JPopupMenu r0;
        java.awt.Component r2, $r3;
        java.awt.Component[] $r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0, $z1;

        r0 := @parameter0: javax.swing.JPopupMenu;

        $r1 = virtualinvoke r0.<javax.swing.JPopupMenu: java.awt.Component[] getComponents()>();

        $i0 = lengthof $r1;

        if $i0 > 1 goto label1;

        return;

     label1:
        i5 = 0;

     label2:
        $i1 = lengthof $r1;

        if i5 >= $i1 goto label6;

        r2 = $r1[i5];

        $z0 = r2 instanceof javax.swing.JSeparator;

        if $z0 == 0 goto label5;

        if i5 == 0 goto label3;

        $i2 = lengthof $r1;

        $i3 = $i2 - 1;

        if i5 != $i3 goto label4;

     label3:
        virtualinvoke r0.<javax.swing.JPopupMenu: void remove(java.awt.Component)>(r2);

        goto label5;

     label4:
        $i4 = i5 - 1;

        $r3 = $r1[$i4];

        $z1 = $r3 instanceof javax.swing.JSeparator;

        if $z1 == 0 goto label5;

        virtualinvoke r0.<javax.swing.JPopupMenu: void remove(java.awt.Component)>(r2);

     label5:
        i5 = i5 + 1;

        goto label2;

     label6:
        return;
    }

    public static void setTextComponentTransparent(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;

        r0 := @parameter0: javax.swing.JComponent;

        staticinvoke <com.jidesoft.swing.JideSwingUtilities: void setComponentTransparent(javax.swing.JComponent)>(r0);

        return;
    }

    public static void setComponentTransparent(javax.swing.JComponent)
    {
        javax.swing.JComponent r0;
        javax.swing.UIDefaults $r3;
        java.lang.Boolean $r1, $r2;

        r0 := @parameter0: javax.swing.JComponent;

        virtualinvoke r0.<javax.swing.JComponent: void setOpaque(boolean)>(0);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r0.<javax.swing.JComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("Synthetica.opaque", $r1);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r0.<javax.swing.JComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("Nimbus.Overrides.InheritDefaults", $r2);

        $r3 = new javax.swing.UIDefaults;

        specialinvoke $r3.<javax.swing.UIDefaults: void <init>()>();

        virtualinvoke r0.<javax.swing.JComponent: void putClientProperty(java.lang.Object,java.lang.Object)>("Nimbus.Overrides", $r3);

        return;
    }

    public static int binarySearch(java.util.List, java.lang.Object)
    {
        java.util.List r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i9;
        java.lang.Object $r1, $r2, r3;
        java.lang.Comparable $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: java.lang.Object;

        i5 = 0;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i6 = $i0;

        i7 = $i0 / 2;

     label1:
        if i5 >= i6 goto label6;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i7);

        $z0 = $r1 instanceof java.lang.Comparable;

        if $z0 != 0 goto label2;

        return i7;

     label2:
        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i7);

        $r4 = (java.lang.Comparable) $r2;

        $i2 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i2 != 0 goto label3;

        return i7;

     label3:
        if $i2 >= 0 goto label4;

        i5 = i7 + 1;

        goto label5;

     label4:
        i6 = i7;

     label5:
        $i3 = i6 - i5;

        $i4 = $i3 / 2;

        i7 = i5 + $i4;

        goto label1;

     label6:
        $i9 = (int) -1;

        $i1 = $i9 * i7;

        return $i1;
    }

    public static int binarySearch(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i8;
        java.lang.Object $r1, $r2, r3;
        java.lang.Comparable $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r3 := @parameter1: java.lang.Object;

        i4 = 0;

        i5 = lengthof r0;

        i6 = i5 / 2;

     label1:
        if i4 >= i5 goto label6;

        $r1 = r0[i6];

        $z0 = $r1 instanceof java.lang.Comparable;

        if $z0 != 0 goto label2;

        return i6;

     label2:
        $r2 = r0[i6];

        $r4 = (java.lang.Comparable) $r2;

        $i1 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r3);

        if $i1 != 0 goto label3;

        return i6;

     label3:
        if $i1 >= 0 goto label4;

        i4 = i6 + 1;

        goto label5;

     label4:
        i5 = i6;

     label5:
        $i2 = i5 - i4;

        $i3 = $i2 / 2;

        i6 = i4 + $i3;

        goto label1;

     label6:
        $i8 = (int) -1;

        $i0 = $i8 * i6;

        return $i0;
    }

    public static int binarySearch(int[], int)
    {
        int[] r0;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.jidesoft.swing.JideSwingUtilities: int binarySearch(int[],int,int,int)>(r0, i0, 0, $i1);

        return $i2;
    }

    public static int binarySearch(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i12;

        r0 := @parameter0: int[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i8 = i0;

        i9 = i1;

        i10 = i1 / 2;

     label1:
        if i8 >= i9 goto label5;

        $i4 = r0[i10];

        if $i4 != i3 goto label2;

        return i10;

     label2:
        $i5 = r0[i10];

        if $i5 >= i3 goto label3;

        i8 = i10 + 1;

        goto label4;

     label3:
        i9 = i10;

     label4:
        $i6 = i9 - i8;

        $i7 = $i6 / 2;

        i10 = i8 + $i7;

        goto label1;

     label5:
        $i12 = (int) -1;

        $i2 = $i12 * i10;

        return $i2;
    }

    public static boolean isMenuShortcutKeyDown(java.awt.event.InputEvent)
    {
        java.awt.event.InputEvent r0;
        int $i0, $i1, $i2;
        java.awt.Toolkit $r1;
        boolean $z0;

        r0 := @parameter0: java.awt.event.InputEvent;

        $i0 = virtualinvoke r0.<java.awt.event.InputEvent: int getModifiers()>();

        $r1 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $i1 = virtualinvoke $r1.<java.awt.Toolkit: int getMenuShortcutKeyMask()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isMenuShortcutKeyDown(java.awt.event.ActionEvent)
    {
        int $i0, $i1, $i2;
        java.awt.event.ActionEvent r0;
        java.awt.Toolkit $r1;
        boolean $z0;

        r0 := @parameter0: java.awt.event.ActionEvent;

        $i0 = virtualinvoke r0.<java.awt.event.ActionEvent: int getModifiers()>();

        $r1 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $i1 = virtualinvoke $r1.<java.awt.Toolkit: int getMenuShortcutKeyMask()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static javax.swing.event.ChangeListener getViewportSynchronizationChangeListener()
    {
        com.jidesoft.swing.JideSwingUtilities$viewportSynchronizationChangeListener $r2;
        javax.swing.event.ChangeListener $r0, $r1;

        $r0 = <com.jidesoft.swing.JideSwingUtilities: javax.swing.event.ChangeListener _viewportSyncListener>;

        if $r0 != null goto label1;

        $r2 = new com.jidesoft.swing.JideSwingUtilities$viewportSynchronizationChangeListener;

        specialinvoke $r2.<com.jidesoft.swing.JideSwingUtilities$viewportSynchronizationChangeListener: void <init>(com.jidesoft.swing.JideSwingUtilities$1)>(null);

        <com.jidesoft.swing.JideSwingUtilities: javax.swing.event.ChangeListener _viewportSyncListener> = $r2;

     label1:
        $r1 = <com.jidesoft.swing.JideSwingUtilities: javax.swing.event.ChangeListener _viewportSyncListener>;

        return $r1;
    }

    public static void setWindowOpaque(java.awt.Window, boolean)
    {
        java.lang.Object[] $r4;
        java.awt.Window r5;
        java.lang.Class[] $r1;
        java.lang.Exception $r7;
        java.lang.Boolean $r6;
        java.lang.Class $r0, $r2;
        java.lang.reflect.Method $r3;
        boolean z0;

        r5 := @parameter0: java.awt.Window;

        z0 := @parameter1: boolean;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.awt.AWTUtilities");

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/awt/Window;";

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1[1] = $r2;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setWindowOpaque", $r1);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r4[1] = $r6;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void setWindowOpacity(java.awt.Window, float)
    {
        java.lang.Float $r6;
        java.lang.Object[] $r4;
        java.awt.Window r5;
        java.lang.Class[] $r1;
        java.lang.Exception $r7;
        float f0;
        java.lang.Class $r0, $r2;
        java.lang.reflect.Method $r3;

        r5 := @parameter0: java.awt.Window;

        f0 := @parameter1: float;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.awt.AWTUtilities");

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/awt/Window;";

        $r2 = <java.lang.Float: java.lang.Class TYPE>;

        $r1[1] = $r2;

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setWindowOpacity", $r1);

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r4[1] = $r6;

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void setWindowShape(java.awt.Window, java.awt.Shape)
    {
        java.awt.Shape r5;
        java.lang.Object[] $r3;
        java.awt.Window r4;
        java.lang.Class[] $r1;
        java.lang.Class $r0;
        java.lang.reflect.Method $r2;
        java.lang.Exception $r6;

        r4 := @parameter0: java.awt.Window;

        r5 := @parameter1: java.awt.Shape;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.awt.AWTUtilities");

        $r1 = newarray (java.lang.Class)[2];

        $r1[0] = class "Ljava/awt/Window;";

        $r1[1] = class "Ljava/awt/Shape;";

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setWindowShape", $r1);

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r4;

        $r3[1] = r5;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String getOKString(java.util.Locale)
    {
        java.util.ResourceBundle $r3;
        java.util.Locale r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, r4;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.String getString(java.lang.Object,java.util.Locale)>("OptionPane.okButtonText", r0);

        r4 = $r1;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 > 0 goto label3;

     label1:
        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.String getString(java.lang.Object)>("ColorChooser.okText");

        r4 = $r2;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 > 0 goto label3;

     label2:
        $r3 = staticinvoke <com.jidesoft.dialog.ButtonResources: java.util.ResourceBundle getResourceBundle(java.util.Locale)>(r0);

        r4 = virtualinvoke $r3.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Button.ok");

     label3:
        return r4;
    }

    public static java.lang.String getCancelString(java.util.Locale)
    {
        java.util.ResourceBundle $r3;
        java.util.Locale r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, r4;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.String getString(java.lang.Object,java.util.Locale)>("OptionPane.cancelButtonText", r0);

        r4 = $r1;

        if $r1 == null goto label1;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 > 0 goto label3;

     label1:
        $r2 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.String getString(java.lang.Object)>("ColorChooser.cancelText");

        r4 = $r2;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 > 0 goto label3;

     label2:
        $r3 = staticinvoke <com.jidesoft.dialog.ButtonResources: java.util.ResourceBundle getResourceBundle(java.util.Locale)>(r0);

        r4 = virtualinvoke $r3.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Button.cancel");

     label3:
        return r4;
    }

    public static java.lang.String getYesString(java.util.Locale)
    {
        java.util.ResourceBundle $r2;
        java.util.Locale r0;
        int $i0;
        java.lang.String $r1, r3;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.String getString(java.lang.Object,java.util.Locale)>("OptionPane.yesButtonText", r0);

        r3 = $r1;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label2;

     label1:
        $r2 = staticinvoke <com.jidesoft.dialog.ButtonResources: java.util.ResourceBundle getResourceBundle(java.util.Locale)>(r0);

        r3 = virtualinvoke $r2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Button.yes");

     label2:
        return r3;
    }

    public static java.lang.String getNoString(java.util.Locale)
    {
        java.util.ResourceBundle $r2;
        java.util.Locale r0;
        int $i0;
        java.lang.String $r1, r3;

        r0 := @parameter0: java.util.Locale;

        $r1 = staticinvoke <com.jidesoft.plaf.UIDefaultsLookup: java.lang.String getString(java.lang.Object,java.util.Locale)>("OptionPane.noButtonText", r0);

        r3 = $r1;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label2;

     label1:
        $r2 = staticinvoke <com.jidesoft.dialog.ButtonResources: java.util.ResourceBundle getResourceBundle(java.util.Locale)>(r0);

        r3 = virtualinvoke $r2.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>("Button.no");

     label2:
        return r3;
    }

    static java.beans.PropertyChangeListener access$000()
    {
        java.beans.PropertyChangeListener $r0;

        $r0 = <com.jidesoft.swing.JideSwingUtilities: java.beans.PropertyChangeListener _setOpaqueTrueListener>;

        return $r0;
    }

    static java.beans.PropertyChangeListener access$002(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeListener r0;

        r0 := @parameter0: java.beans.PropertyChangeListener;

        <com.jidesoft.swing.JideSwingUtilities: java.beans.PropertyChangeListener _setOpaqueTrueListener> = r0;

        return r0;
    }

    static java.beans.PropertyChangeListener access$100()
    {
        java.beans.PropertyChangeListener $r0;

        $r0 = <com.jidesoft.swing.JideSwingUtilities: java.beans.PropertyChangeListener _setOpaqueFalseListener>;

        return $r0;
    }

    static java.beans.PropertyChangeListener access$102(java.beans.PropertyChangeListener)
    {
        java.beans.PropertyChangeListener r0;

        r0 := @parameter0: java.beans.PropertyChangeListener;

        <com.jidesoft.swing.JideSwingUtilities: java.beans.PropertyChangeListener _setOpaqueFalseListener> = r0;

        return r0;
    }

    static void <clinit>()
    {
        java.lang.StringBuffer $r7;
        java.util.Map $r12, $r13;
        java.lang.String $r2, $r5, $r8, $r9;
        boolean $z0, $z1, $z2;
        com.jidesoft.swing.JideSwingUtilities$10 $r14;
        java.util.logging.Logger $r6;
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.Object $r11;
        java.awt.Toolkit $r10;

        <com.jidesoft.swing.JideSwingUtilities: java.lang.String SET_OPAQUE_RECURSIVELY_EXCLUDED> = "setOpaqueRecursively.excluded";

        <com.jidesoft.swing.JideSwingUtilities: java.lang.String OPAQUE_LISTENER> = "setOpaqueRecursively.opaqueListener";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Lcom/jidesoft/swing/JideSwingUtilities;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".focus");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r5);

        <com.jidesoft.swing.JideSwingUtilities: java.util.logging.Logger LOGGER_FOCUS> = $r6;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>("AATextPropertyKey");

        <com.jidesoft.swing.JideSwingUtilities: java.lang.Object AA_TEXT_PROPERTY_KEY> = $r7;

        $r8 = staticinvoke <com.jidesoft.utils.SecurityUtils: java.lang.String getProperty(java.lang.String,java.lang.String)>("swing.aatext", "false");

        if $r8 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <com.jidesoft.swing.JideSwingUtilities: boolean AA_TEXT_DEFINED> = $z2;

        $r9 = "true";

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        <com.jidesoft.swing.JideSwingUtilities: boolean AA_TEXT> = $z0;

        <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints> = null;

        $z1 = staticinvoke <com.jidesoft.utils.SystemInfo: boolean isJdk6Above()>();

        if $z1 == 0 goto label3;

        $r10 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r11 = virtualinvoke $r10.<java.awt.Toolkit: java.lang.Object getDesktopProperty(java.lang.String)>("awt.font.desktophints");

        $r12 = (java.util.Map) $r11;

        $r13 = (java.util.Map) $r12;

        <com.jidesoft.swing.JideSwingUtilities: java.util.Map renderingHints> = $r13;

        $r14 = new com.jidesoft.swing.JideSwingUtilities$10;

        specialinvoke $r14.<com.jidesoft.swing.JideSwingUtilities$10: void <init>()>();

        virtualinvoke $r10.<java.awt.Toolkit: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>("awt.font.desktophints", $r14);

     label3:
        <com.jidesoft.swing.JideSwingUtilities: boolean tracingFocus> = 0;

        staticinvoke <java.awt.Font: java.awt.Font getFont(java.lang.String)>("defaultFont");

        staticinvoke <java.awt.Font: java.awt.Font getFont(java.lang.String)>("emphasizedFont");

        return;
    }
}
