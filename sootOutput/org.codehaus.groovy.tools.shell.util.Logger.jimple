public final class org.codehaus.groovy.tools.shell.util.Logger extends java.lang.Object
{
    public static org.codehaus.groovy.tools.shell.IO io;
    public final java.lang.String name;
    private static final java.lang.String DEBUG;
    private static final java.lang.String WARN;
    private static final java.lang.String ERROR;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger;

    private void <init>(java.lang.String)
    {
        org.codehaus.groovy.tools.shell.util.Logger r0;
        java.lang.String r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.codehaus.groovy.tools.shell.util.Logger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.codehaus.groovy.tools.shell.util.Logger: java.lang.String name> = r1;

        return;
    }

    private void log(java.lang.String, java.lang.Object, java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable r11;
        java.lang.AssertionError $r8, $r9;
        byte b0;
        java.lang.StringBuffer $r12;
        java.lang.String r1, $r6, $r13, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintWriter $r5, $r17;
        org.codehaus.groovy.tools.shell.IO $r0, $r3, $r4, $r7, $r16;
        java.lang.Object r10;
        org.codehaus.groovy.tools.shell.util.Logger r2;

        r2 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.Object;

        r11 := @parameter2: java.lang.Throwable;

        $z0 = <org.codehaus.groovy.tools.shell.util.Logger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        $z1 = <org.codehaus.groovy.tools.shell.util.Logger: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r10 != null goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r0 = <org.codehaus.groovy.tools.shell.util.Logger: org.codehaus.groovy.tools.shell.IO io>;

        if $r0 != null goto label3;

        $r7 = new org.codehaus.groovy.tools.shell.IO;

        specialinvoke $r7.<org.codehaus.groovy.tools.shell.IO: void <init>()>();

        <org.codehaus.groovy.tools.shell.util.Logger: org.codehaus.groovy.tools.shell.IO io> = $r7;

     label3:
        if r11 != null goto label4;

        $z3 = r10 instanceof java.lang.Throwable;

        if $z3 == 0 goto label4;

        r11 = (java.lang.Throwable) r10;

        r10 = virtualinvoke r11.<java.lang.Throwable: java.lang.String getMessage()>();

     label4:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        b0 = 1;

        $r13 = "WARN";

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label5;

        $r6 = "ERROR";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label6;

     label5:
        b0 = 31;

     label6:
        $r14 = staticinvoke <org.codehaus.groovy.tools.shell.util.ANSI$Renderer: java.lang.String encode(java.lang.String,int)>(r1, b0);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        $r15 = r2.<org.codehaus.groovy.tools.shell.util.Logger: java.lang.String name>;

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r10);

        $r16 = <org.codehaus.groovy.tools.shell.util.Logger: org.codehaus.groovy.tools.shell.IO io>;

        $r17 = $r16.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter out>;

        virtualinvoke $r17.<java.io.PrintWriter: void println(java.lang.Object)>($r12);

        if r11 == null goto label7;

        $r4 = <org.codehaus.groovy.tools.shell.util.Logger: org.codehaus.groovy.tools.shell.IO io>;

        $r5 = $r4.<org.codehaus.groovy.tools.shell.IO: java.io.PrintWriter out>;

        virtualinvoke r11.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r5);

     label7:
        $r3 = <org.codehaus.groovy.tools.shell.util.Logger: org.codehaus.groovy.tools.shell.IO io>;

        virtualinvoke $r3.<org.codehaus.groovy.tools.shell.IO: void flush()>();

        return;
    }

    public boolean isDebugEnabled()
    {
        org.codehaus.groovy.tools.shell.IO$Verbosity $r0, $r1;
        org.codehaus.groovy.tools.shell.util.Logger r2;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        $r1 = <org.codehaus.groovy.tools.shell.util.Preferences: org.codehaus.groovy.tools.shell.IO$Verbosity verbosity>;

        $r0 = <org.codehaus.groovy.tools.shell.IO$Verbosity: org.codehaus.groovy.tools.shell.IO$Verbosity DEBUG>;

        if $r1 != $r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isDebug()
    {
        org.codehaus.groovy.tools.shell.util.Logger r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: boolean isDebugEnabled()>();

        return $z0;
    }

    public void debug(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.Logger r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: void log(java.lang.String,java.lang.Object,java.lang.Throwable)>("DEBUG", r1, null);

     label1:
        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable r2;
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.Logger r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: void log(java.lang.String,java.lang.Object,java.lang.Throwable)>("DEBUG", r1, r2);

     label1:
        return;
    }

    public void warn(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.Logger r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: void log(java.lang.String,java.lang.Object,java.lang.Throwable)>("WARN", r1, null);

        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable r2;
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.Logger r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: void log(java.lang.String,java.lang.Object,java.lang.Throwable)>("WARN", r1, r2);

        return;
    }

    public void error(java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.Logger r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: void log(java.lang.String,java.lang.Object,java.lang.Throwable)>("ERROR", r1, null);

        return;
    }

    public void error(java.lang.Object, java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable r2;
        java.lang.Object r1;
        org.codehaus.groovy.tools.shell.util.Logger r0;

        r0 := @this: org.codehaus.groovy.tools.shell.util.Logger;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<org.codehaus.groovy.tools.shell.util.Logger: void log(java.lang.String,java.lang.Object,java.lang.Throwable)>("ERROR", r1, r2);

        return;
    }

    public static org.codehaus.groovy.tools.shell.util.Logger create(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.groovy.tools.shell.util.Logger $r0;
        java.lang.String $r2;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.codehaus.groovy.tools.shell.util.Logger;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<org.codehaus.groovy.tools.shell.util.Logger: void <init>(java.lang.String)>($r2);

        return $r0;
    }

    public static org.codehaus.groovy.tools.shell.util.Logger create(java.lang.Class, java.lang.String)
    {
        java.lang.StringBuffer $r1, $r4, $r5, $r7;
        java.lang.Class r2;
        org.codehaus.groovy.tools.shell.util.Logger $r0;
        java.lang.String $r3, r6, $r8;

        r2 := @parameter0: java.lang.Class;

        r6 := @parameter1: java.lang.String;

        $r0 = new org.codehaus.groovy.tools.shell.util.Logger;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.codehaus.groovy.tools.shell.util.Logger: void <init>(java.lang.String)>($r8);

        return $r0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        <org.codehaus.groovy.tools.shell.util.Logger: java.lang.String ERROR> = "ERROR";

        <org.codehaus.groovy.tools.shell.util.Logger: java.lang.String WARN> = "WARN";

        <org.codehaus.groovy.tools.shell.util.Logger: java.lang.String DEBUG> = "DEBUG";

        $r0 = <org.codehaus.groovy.tools.shell.util.Logger: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.codehaus.groovy.tools.shell.util.Logger: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.tools.shell.util.Logger");

        <org.codehaus.groovy.tools.shell.util.Logger: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger> = $r1;

        goto label2;

     label1:
        $r1 = <org.codehaus.groovy.tools.shell.util.Logger: java.lang.Class class$org$codehaus$groovy$tools$shell$util$Logger>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.codehaus.groovy.tools.shell.util.Logger: boolean $assertionsDisabled> = $z1;

        return;
    }
}
