public class thredds.catalog.parser.jdom.InvCatalogFactory10 extends java.lang.Object implements thredds.catalog.InvCatalogConvertIF, thredds.catalog.MetadataConverterIF
{
    private static org.slf4j.Logger logger;
    private static final org.jdom.Namespace defNS;
    private static final org.jdom.Namespace xlinkNS;
    private static final org.jdom.Namespace ncmlNS;
    private static boolean useBytesForDataSize;
    private thredds.catalog.InvCatalogFactory factory;
    private java.lang.String version;
    private boolean debugMetadataRead;
    private java.util.List dataRootLocAliasExpanders;
    private java.util.Map metadataHash;
    private org.jdom.input.SAXBuilder saxBuilder;
    private boolean raw;

    public void <init>()
    {
        java.util.List $r1;
        java.util.HashMap $r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory> = null;

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String version> = "1.0.1";

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean debugMetadataRead> = 0;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.List dataRootLocAliasExpanders> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(10);

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.Map metadataHash> = $r2;

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw> = 0;

        return;
    }

    public static void useBytesForDataSize(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <thredds.catalog.parser.jdom.InvCatalogFactory10: boolean useBytesForDataSize> = z0;

        return;
    }

    public void setDataRootLocationAliasExpanders(java.util.List)
    {
        java.util.List r0, $r3;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r1;
        java.util.ArrayList $r2;

        r1 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.List dataRootLocAliasExpanders> = $r3;

        goto label2;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.List dataRootLocAliasExpanders> = $r2;

     label2:
        return;
    }

    public java.util.List getDataRootLocationAliasExpanders()
    {
        java.util.List $r1, $r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        $r1 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.List dataRootLocAliasExpanders>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    private java.lang.String expandDataRootLocationAlias(java.lang.String)
    {
        java.util.Iterator $r2;
        thredds.util.PathAliasReplacement r5;
        java.util.List $r1;
        java.lang.Object $r4;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        java.lang.String r3, $r6;
        boolean $z0, $z1;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.List dataRootLocAliasExpanders>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (thredds.util.PathAliasReplacement) $r4;

        $z1 = interfaceinvoke r5.<thredds.util.PathAliasReplacement: boolean containsPathAlias(java.lang.String)>(r3);

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r5.<thredds.util.PathAliasReplacement: java.lang.String replacePathAlias(java.lang.String)>(r3);

        return $r6;

     label2:
        goto label1;

     label3:
        return r3;
    }

    public thredds.catalog.InvCatalogImpl parseXML(thredds.catalog.InvCatalogFactory, org.jdom.Document, java.net.URI)
    {
        org.jdom.Document r2;
        thredds.catalog.InvCatalogImpl $r5;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        java.net.URI r4;
        thredds.catalog.InvCatalogFactory r1;
        org.jdom.Element $r3;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.InvCatalogFactory;

        r2 := @parameter1: org.jdom.Document;

        r4 := @parameter2: java.net.URI;

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory> = r1;

        $r3 = virtualinvoke r2.<org.jdom.Document: org.jdom.Element getRootElement()>();

        $r5 = virtualinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogImpl readCatalog(org.jdom.Element,java.net.URI)>($r3, r4);

        return $r5;
    }

    public void registerMetadataConverter(thredds.catalog.MetadataType, thredds.catalog.MetadataConverterIF)
    {
        java.util.Map $r3;
        thredds.catalog.MetadataType r1;
        thredds.catalog.MetadataConverterIF r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.MetadataType;

        r2 := @parameter1: thredds.catalog.MetadataConverterIF;

        $r3 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.Map metadataHash>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setVersion(java.lang.String)
    {
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        java.lang.String r1;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: java.lang.String;

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String version> = r1;

        return;
    }

    protected thredds.catalog.InvAccessImpl readAccess(thredds.catalog.InvDatasetImpl, org.jdom.Element)
    {
        thredds.catalog.InvAccessImpl $r4;
        java.lang.String $r1, $r2, $r3;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r6;
        org.jdom.Element r0;
        thredds.catalog.InvDatasetImpl r5;
        double $d0;

        r6 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r5 := @parameter0: thredds.catalog.InvDatasetImpl;

        r0 := @parameter1: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("urlPath");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("serviceName");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("dataFormat");

        $r4 = new thredds.catalog.InvAccessImpl;

        $d0 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: double readDataSize(org.jdom.Element)>(r0);

        specialinvoke $r4.<thredds.catalog.InvAccessImpl: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,java.lang.String,double)>(r5, $r1, $r2, null, $r3, $d0);

        return $r4;
    }

    protected thredds.catalog.InvCatalogImpl readCatalog(org.jdom.Element, java.net.URI)
    {
        java.net.URISyntaxException $r33;
        thredds.catalog.InvCatalogRef $r21;
        thredds.catalog.InvDatasetScan $r22;
        org.jdom.Namespace $r7, $r10, $r45;
        java.net.URI r5, $r32, r42;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        thredds.catalog.InvProperty $r29;
        java.util.List $r8, $r11, $r13, $r46;
        thredds.catalog.InvCatalogImpl $r43;
        java.lang.StringBuilder $r34, $r36, $r37, $r38, $r40;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r6;
        ucar.nc2.units.DateType $r44;
        java.lang.String $r1, $r2, $r3, $r4, $r16, $r17, $r18, $r19, $r20, $r39, $r41;
        thredds.catalog.DataRootConfig $r27;
        org.slf4j.Logger $r35;
        java.util.Iterator $r9, $r12, $r14, $r47;
        thredds.catalog.InvService $r31;
        java.lang.Object $r15, $r26, $r28, $r30;
        org.jdom.Element r0, r48, r49, r50, r51;
        thredds.catalog.InvDatasetImpl $r23, $r24, $r25;

        r6 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r5 := @parameter1: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("base");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("expires");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("version");

        r42 = r5;

        if $r2 == null goto label04;

     label01:
        $r32 = new java.net.URI;

        specialinvoke $r32.<java.net.URI: void <init>(java.lang.String)>($r2);

        r42 = $r32;

     label02:
        goto label04;

     label03:
        $r33 := @caughtexception;

        $r35 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readCatalog(): bad catalog specified base URI <");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">: ");

        $r39 = virtualinvoke $r33.<java.net.URISyntaxException: java.lang.String getMessage()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r35.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r41, $r33);

        r42 = r5;

     label04:
        $r43 = new thredds.catalog.InvCatalogImpl;

        $r44 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.DateType makeDateType(java.lang.String,java.lang.String,java.lang.String)>($r3, null, null);

        specialinvoke $r43.<thredds.catalog.InvCatalogImpl: void <init>(java.lang.String,java.lang.String,ucar.nc2.units.DateType,java.net.URI)>($r1, $r4, $r44, r42);

        $r45 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r46 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("service", $r45);

        $r47 = interfaceinvoke $r46.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z8 = interfaceinvoke $r47.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label06;

        $r30 = interfaceinvoke $r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (org.jdom.Element) $r30;

        $r31 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvService readService(org.jdom.Element,java.net.URI)>(r48, r42);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addService(thredds.catalog.InvService)>($r31);

        goto label05;

     label06:
        $r7 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r8 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("property", $r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r28 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.jdom.Element) $r28;

        $r29 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvProperty readProperty(org.jdom.Element)>(r49);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addProperty(thredds.catalog.InvProperty)>($r29);

        goto label07;

     label08:
        $r10 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r11 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("datasetRoot", $r10);

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r26 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r50 = (org.jdom.Element) $r26;

        $r27 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.DataRootConfig readDatasetRoot(org.jdom.Element)>(r50);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addDatasetRoot(thredds.catalog.DataRootConfig)>($r27);

        goto label09;

     label10:
        $r13 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label17;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r51 = (org.jdom.Element) $r15;

        $r16 = virtualinvoke r51.<org.jdom.Element: java.lang.String getName()>();

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("dataset");

        if $z3 == 0 goto label12;

        $r25 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetImpl readDataset(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>($r43, null, r51, r42);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r25);

        goto label16;

     label12:
        $r17 = virtualinvoke r51.<org.jdom.Element: java.lang.String getName()>();

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("featureCollection");

        if $z4 == 0 goto label13;

        $r24 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetImpl readFeatureCollection(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>($r43, null, r51, r42);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r24);

        goto label16;

     label13:
        $r18 = virtualinvoke r51.<org.jdom.Element: java.lang.String getName()>();

        $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("datasetFmrc");

        if $z5 == 0 goto label14;

        $r23 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetImpl readDatasetFmrc(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>($r43, null, r51, r42);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r23);

        goto label16;

     label14:
        $r19 = virtualinvoke r51.<org.jdom.Element: java.lang.String getName()>();

        $z6 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("datasetScan");

        if $z6 == 0 goto label15;

        $r22 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetScan readDatasetScan(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>($r43, null, r51, r42);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r22);

        goto label16;

     label15:
        $r20 = virtualinvoke r51.<org.jdom.Element: java.lang.String getName()>();

        $z7 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("catalogRef");

        if $z7 == 0 goto label16;

        $r21 = virtualinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogRef readCatalogRef(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>($r43, null, r51, r42);

        virtualinvoke $r43.<thredds.catalog.InvCatalogImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r21);

     label16:
        goto label11;

     label17:
        return $r43;

        catch java.net.URISyntaxException from label01 to label02 with label03;
    }

    protected thredds.catalog.InvCatalogRef readCatalogRef(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        thredds.catalog.InvCatalogRef $r5;
        thredds.catalog.InvCatalogImpl r8;
        org.jdom.Namespace $r1, $r3;
        java.lang.String $r2, $r4, r10;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r7;
        java.net.URI r9;
        org.jdom.Element r0;
        thredds.catalog.InvDatasetImpl r6;

        r7 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r8 := @parameter0: thredds.catalog.InvCatalogImpl;

        r6 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r9 := @parameter3: java.net.URI;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("title", $r1);

        r10 = $r2;

        if $r2 != null goto label1;

        r10 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

     label1:
        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("href", $r3);

        $r5 = new thredds.catalog.InvCatalogRef;

        specialinvoke $r5.<thredds.catalog.InvCatalogRef: void <init>(thredds.catalog.InvDatasetImpl,java.lang.String,java.lang.String)>(r6, r10, $r4);

        virtualinvoke r7.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readDatasetInfo(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r8, $r5, r0, r9);

        return $r5;
    }

    protected thredds.catalog.ThreddsMetadata$Contributor readContributor(org.jdom.Element)
    {
        thredds.catalog.ThreddsMetadata$Contributor $r1;
        java.lang.String $r2, $r3;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r4;
        org.jdom.Element r0;

        r4 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new thredds.catalog.ThreddsMetadata$Contributor;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("role");

        specialinvoke $r1.<thredds.catalog.ThreddsMetadata$Contributor: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r1;
    }

    protected thredds.catalog.ThreddsMetadata$Vocab readControlledVocabulary(org.jdom.Element)
    {
        thredds.catalog.ThreddsMetadata$Vocab $r1;
        java.lang.String $r2, $r3;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r4;
        org.jdom.Element r0;

        r4 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new thredds.catalog.ThreddsMetadata$Vocab;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("vocabulary");

        specialinvoke $r1.<thredds.catalog.ThreddsMetadata$Vocab: void <init>(java.lang.String,java.lang.String)>($r2, $r3);

        return $r1;
    }

    protected thredds.catalog.InvDatasetImpl readDataset(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        java.lang.String $r1, $r2, $r11, $r13, $r23;
        java.net.URI r7;
        thredds.catalog.InvCatalogFactory $r17;
        thredds.catalog.InvDatasetImplProxy $r15;
        boolean $z0;
        thredds.catalog.InvDataset $r14;
        java.io.PrintStream $r9;
        thredds.catalog.InvCatalogImpl r6;
        java.lang.StringBuilder $r8, $r10, $r12, $r16, $r18, $r19, $r20, $r21, $r22;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        org.jdom.Element r0;
        thredds.catalog.InvDatasetImpl $r3, r4, r24;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r6 := @parameter0: thredds.catalog.InvCatalogImpl;

        r4 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r7 := @parameter3: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("alias");

        if $r2 == null goto label2;

        $r14 = virtualinvoke r6.<thredds.catalog.InvCatalogImpl: thredds.catalog.InvDataset findDatasetByID(java.lang.String)>($r2);

        r24 = (thredds.catalog.InvDatasetImpl) $r14;

        if r24 != null goto label1;

        $r17 = r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Parse error: dataset named ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has illegal alias = ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r23);

     label1:
        $r15 = new thredds.catalog.InvDatasetImplProxy;

        specialinvoke $r15.<thredds.catalog.InvDatasetImplProxy: void <init>(java.lang.String,thredds.catalog.InvDatasetImpl)>($r1, r24);

        return $r15;

     label2:
        $r3 = new thredds.catalog.InvDatasetImpl;

        specialinvoke $r3.<thredds.catalog.InvDatasetImpl: void <init>(thredds.catalog.InvDataset,java.lang.String)>(r4, $r1);

        virtualinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readDatasetInfo(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r6, $r3, r0, r7);

        $z0 = <thredds.catalog.InvCatalogFactory: boolean debugXML>;

        if $z0 == 0 goto label3;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Dataset added: ");

        $r11 = virtualinvoke $r3.<thredds.catalog.InvDatasetImpl: java.lang.String dump()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label3:
        return $r3;
    }

    protected void readDatasetInfo(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        thredds.catalog.InvCatalogRef $r31;
        org.jdom.Namespace $r13, $r16, $r54;
        thredds.catalog.CollectionType $r37, r53;
        thredds.catalog.InvCatalogFactory $r39, $r47;
        ucar.nc2.constants.FeatureType $r45, r52;
        thredds.catalog.InvAccessImpl $r34;
        thredds.catalog.InvCatalogImpl r9;
        java.lang.StringBuilder $r38, $r40, $r41, $r42, $r46, $r48, $r49, $r50;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r22, $r23, $r24, $r25, $r26, $r43, $r44, $r51;
        org.jdom.Element r0, $r17, r21, r57, r58;
        thredds.catalog.InvDatasetImpl r10, $r28, $r29, $r32;
        thredds.catalog.InvDatasetScan $r30;
        java.net.URI r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List $r14, $r18, $r55;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r12;
        java.util.Iterator $r15, $r19, $r56;
        thredds.catalog.InvService $r36;
        thredds.catalog.ThreddsMetadata $r11;
        java.lang.Object $r20, $r33, $r35;

        r12 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r9 := @parameter0: thredds.catalog.InvCatalogImpl;

        r10 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r27 := @parameter3: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("authority");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("collectionType");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("dataType");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("harvest");

        $r5 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("ID");

        $r6 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("serviceName");

        $r7 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("urlPath");

        $r8 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("restrictAccess");

        r52 = null;

        if $r3 == null goto label01;

        $r44 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        $r45 = staticinvoke <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType getType(java.lang.String)>($r44);

        r52 = $r45;

        if $r45 != null goto label01;

        $r47 = r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** warning: non-standard data type = ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r47.<thredds.catalog.InvCatalogFactory: void appendWarning(java.lang.String)>($r51);

     label01:
        if r52 == null goto label02;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setDataType(ucar.nc2.constants.FeatureType)>(r52);

     label02:
        if $r6 == null goto label03;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setServiceName(java.lang.String)>($r6);

     label03:
        if $r7 == null goto label04;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setUrlPath(java.lang.String)>($r7);

     label04:
        if $r1 == null goto label05;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setAuthority(java.lang.String)>($r1);

     label05:
        if $r5 == null goto label06;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setID(java.lang.String)>($r5);

     label06:
        if $r4 == null goto label07;

        $z6 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setHarvest(boolean)>($z6);

     label07:
        if $r8 == null goto label08;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setResourceControl(java.lang.String)>($r8);

     label08:
        if $r2 == null goto label10;

        $r37 = staticinvoke <thredds.catalog.CollectionType: thredds.catalog.CollectionType findType(java.lang.String)>($r2);

        r53 = $r37;

        if $r37 != null goto label09;

        r53 = staticinvoke <thredds.catalog.CollectionType: thredds.catalog.CollectionType getType(java.lang.String)>($r2);

        $r39 = r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** warning: non-standard collection type = ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<thredds.catalog.InvCatalogFactory: void appendWarning(java.lang.String)>($r43);

     label09:
        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setCollectionType(thredds.catalog.CollectionType)>(r53);

     label10:
        virtualinvoke r9.<thredds.catalog.InvCatalogImpl: void addDatasetByID(thredds.catalog.InvDatasetImpl)>(r10);

        $r54 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r55 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("service", $r54);

        $r56 = interfaceinvoke $r55.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z7 = interfaceinvoke $r56.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label12;

        $r35 = interfaceinvoke $r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (org.jdom.Element) $r35;

        $r36 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvService readService(org.jdom.Element,java.net.URI)>(r57, r27);

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addService(thredds.catalog.InvService)>($r36);

        goto label11;

     label12:
        $r11 = virtualinvoke r10.<thredds.catalog.InvDatasetImpl: thredds.catalog.ThreddsMetadata getLocalMetadata()>();

        virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readThreddsMetadata(thredds.catalog.InvCatalog,thredds.catalog.InvDatasetImpl,org.jdom.Element,thredds.catalog.ThreddsMetadata)>(r9, r10, r0, $r11);

        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r14 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("access", $r13);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r33 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r58 = (org.jdom.Element) $r33;

        $r34 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvAccessImpl readAccess(thredds.catalog.InvDatasetImpl,org.jdom.Element)>(r10, r58);

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addAccess(thredds.catalog.InvAccess)>($r34);

        goto label13;

     label14:
        $r16 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace ncmlNS>;

        $r17 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("netcdf", $r16);

        if $r17 == null goto label15;

        virtualinvoke $r17.<org.jdom.Element: org.jdom.Content detach()>();

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void setNcmlElement(org.jdom.Element)>($r17);

     label15:
        $r18 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z8 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label23;

        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.jdom.Element) $r20;

        $r22 = virtualinvoke r21.<org.jdom.Element: java.lang.String getName()>();

        $z1 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("dataset");

        if $z1 == 0 goto label18;

        $r32 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetImpl readDataset(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r9, r10, r21, r27);

        if $r32 == null goto label17;

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r32);

     label17:
        goto label22;

     label18:
        $r23 = virtualinvoke r21.<org.jdom.Element: java.lang.String getName()>();

        $z2 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>("catalogRef");

        if $z2 == 0 goto label19;

        $r31 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogRef readCatalogRef(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r9, r10, r21, r27);

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r31);

        goto label22;

     label19:
        $r24 = virtualinvoke r21.<org.jdom.Element: java.lang.String getName()>();

        $z3 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("datasetScan");

        if $z3 == 0 goto label20;

        $r30 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetScan readDatasetScan(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r9, r10, r21, r27);

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r30);

        goto label22;

     label20:
        $r25 = virtualinvoke r21.<org.jdom.Element: java.lang.String getName()>();

        $z4 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("datasetFmrc");

        if $z4 == 0 goto label21;

        $r29 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetImpl readDatasetFmrc(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r9, r10, r21, r27);

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r29);

        goto label22;

     label21:
        $r26 = virtualinvoke r21.<org.jdom.Element: java.lang.String getName()>();

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("featureCollection");

        if $z5 == 0 goto label22;

        $r28 = virtualinvoke r12.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetImpl readFeatureCollection(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r9, r10, r21, r27);

        virtualinvoke r10.<thredds.catalog.InvDatasetImpl: void addDataset(thredds.catalog.InvDatasetImpl)>($r28);

     label22:
        goto label16;

     label23:
        return;
    }

    protected thredds.catalog.InvDatasetImpl readFeatureCollection(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        org.jdom.Namespace $r4, $r10, $r13, $r15, $r17, $r19, $r37, $r49;
        ucar.nc2.constants.FeatureType $r70;
        thredds.catalog.InvCatalogImpl r23;
        java.lang.StringBuilder $r25, $r27, $r28, $r29, $r30, $r56, $r58, $r59, $r60, $r62, $r64, $r65, $r66;
        thredds.inventory.FeatureCollectionConfig$FmrcConfig $r35, $r44, $r45;
        thredds.inventory.FeatureCollectionConfig$UpdateConfig $r55;
        thredds.catalog.InvDatasetFeatureCollection $r71;
        java.lang.String $r1, $r2, $r3, $r6, $r7, $r8, $r9, $r31, $r32, $r34, $r36, $r42, $r43, $r46, $r47, $r48, $r52, $r53, $r54, $r61, $r67, r68, $r69;
        thredds.inventory.FeatureCollectionConfig$PointConfig $r33;
        org.jdom.Element r0, $r5, $r11, $r14, $r16, $r18, $r20, r41, $r50;
        thredds.catalog.InvDatasetImpl r21;
        java.net.URI r24;
        boolean $z0;
        java.util.List $r38;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r22;
        thredds.inventory.FeatureCollectionConfig$ProtoConfig $r51;
        double $d0;
        thredds.inventory.FeatureCollectionConfig $r12;
        org.slf4j.Logger $r26, $r57, $r63;
        java.util.Iterator $r39;
        java.lang.Object $r40;

        r22 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r23 := @parameter0: thredds.catalog.InvCatalogImpl;

        r21 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r24 := @parameter3: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("path");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("featureType");

        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r5 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("collection", $r4);

        if $r5 != null goto label01;

        $r63 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("featureCollection ");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have a <collection> element.");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r63.<org.slf4j.Logger: void error(java.lang.String)>($r67);

        return null;

     label01:
        $r6 = virtualinvoke $r5.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r7 = virtualinvoke $r5.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("spec");

        $r8 = virtualinvoke $r5.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("olderThan");

        $r9 = virtualinvoke $r5.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("recheckAfter");

        r68 = $r9;

        if $r9 != null goto label02;

        r68 = virtualinvoke $r5.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("recheckEvery");

     label02:
        if $r7 != null goto label03;

        $r57 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("featureCollection ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have a spec attribute.");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r57.<org.slf4j.Logger: void error(java.lang.String)>($r61);

        return null;

     label03:
        if $r6 == null goto label04;

        $r69 = $r6;

        goto label05;

     label04:
        $r69 = $r1;

     label05:
        $r10 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace ncmlNS>;

        $r11 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("netcdf", $r10);

        $r12 = new thredds.inventory.FeatureCollectionConfig;

        specialinvoke $r12.<thredds.inventory.FeatureCollectionConfig: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jdom.Element)>($r69, $r7, $r8, r68, $r11);

        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r14 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("update", $r13);

        if $r14 == null goto label06;

        $r52 = virtualinvoke $r14.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("startup");

        $r53 = virtualinvoke $r14.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("rescan");

        $r54 = virtualinvoke $r14.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("trigger");

        $r55 = new thredds.inventory.FeatureCollectionConfig$UpdateConfig;

        specialinvoke $r55.<thredds.inventory.FeatureCollectionConfig$UpdateConfig: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r52, $r53, $r54);

        $r12.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$UpdateConfig updateConfig> = $r55;

     label06:
        $r15 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r16 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("protoDataset", $r15);

        if $r16 == null goto label07;

        $r46 = virtualinvoke $r16.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("choice");

        $r47 = virtualinvoke $r16.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("change");

        $r48 = virtualinvoke $r16.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("param");

        $r49 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace ncmlNS>;

        $r50 = virtualinvoke $r16.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("netcdf", $r49);

        $r51 = new thredds.inventory.FeatureCollectionConfig$ProtoConfig;

        specialinvoke $r51.<thredds.inventory.FeatureCollectionConfig$ProtoConfig: void <init>(java.lang.String,java.lang.String,java.lang.String,org.jdom.Element)>($r46, $r47, $r48, $r50);

        $r12.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$ProtoConfig protoConfig> = $r51;

     label07:
        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r18 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("fmrcConfig", $r17);

        if $r18 == null goto label10;

        $r34 = virtualinvoke $r18.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("regularize");

        $r35 = new thredds.inventory.FeatureCollectionConfig$FmrcConfig;

        specialinvoke $r35.<thredds.inventory.FeatureCollectionConfig$FmrcConfig: void <init>(java.lang.String)>($r34);

        $r12.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$FmrcConfig fmrcConfig> = $r35;

        $r36 = virtualinvoke $r18.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("datasetTypes");

        if null == $r36 goto label08;

        $r45 = $r12.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$FmrcConfig fmrcConfig>;

        virtualinvoke $r45.<thredds.inventory.FeatureCollectionConfig$FmrcConfig: void addDatasetType(java.lang.String)>($r36);

     label08:
        $r37 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r38 = virtualinvoke $r18.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("dataset", $r37);

        $r39 = interfaceinvoke $r38.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.jdom.Element) $r40;

        $r42 = virtualinvoke r41.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r43 = virtualinvoke r41.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("offsetsGreaterEqual");

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r43);

        $r44 = $r12.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$FmrcConfig fmrcConfig>;

        virtualinvoke $r44.<thredds.inventory.FeatureCollectionConfig$FmrcConfig: void addBestDataset(java.lang.String,double)>($r42, $d0);

        goto label09;

     label10:
        $r19 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r20 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("pointConfig", $r19);

        if $r20 == null goto label11;

        $r32 = virtualinvoke $r20.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("datasetTypes");

        if null == $r32 goto label11;

        $r33 = $r12.<thredds.inventory.FeatureCollectionConfig: thredds.inventory.FeatureCollectionConfig$PointConfig pointConfig>;

        virtualinvoke $r33.<thredds.inventory.FeatureCollectionConfig$PointConfig: void addDatasetType(java.lang.String)>($r32);

     label11:
        $r70 = staticinvoke <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType getType(java.lang.String)>($r3);

        $r71 = staticinvoke <thredds.catalog.InvDatasetFeatureCollection: thredds.catalog.InvDatasetFeatureCollection factory(thredds.catalog.InvDatasetImpl,java.lang.String,java.lang.String,ucar.nc2.constants.FeatureType,thredds.inventory.FeatureCollectionConfig)>(r21, $r1, $r2, $r70, $r12);

        if $r71 != null goto label12;

        $r26 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("featureCollection ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have a valid featureType attribute, found ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.slf4j.Logger: void error(java.lang.String)>($r31);

        return null;

     label12:
        virtualinvoke r22.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readDatasetInfo(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r23, $r71, r0, r24);

        return $r71;
    }

    protected thredds.catalog.InvDatasetImpl readDatasetFmrc(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        thredds.catalog.InvDatasetFmrc $r4;
        org.jdom.Namespace $r7;
        java.lang.String $r1, $r2, $r3, $r6, $r12, $r13, $r14, $r15, $r16, $r17;
        java.net.URI r11;
        boolean $z0;
        thredds.catalog.InvCatalogImpl r10;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r9;
        org.jdom.Element r0, $r8;
        thredds.catalog.InvDatasetImpl r5;

        r9 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r10 := @parameter0: thredds.catalog.InvCatalogImpl;

        r5 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r11 := @parameter3: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("path");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("runsOnly");

        $r4 = new thredds.catalog.InvDatasetFmrc;

        $r6 = "true";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        specialinvoke $r4.<thredds.catalog.InvDatasetFmrc: void <init>(thredds.catalog.InvDatasetImpl,java.lang.String,java.lang.String,boolean)>(r5, $r1, $r2, $z0);

        $r7 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r8 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("fmrcInventory", $r7);

        if $r8 == null goto label1;

        $r12 = virtualinvoke $r8.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("location");

        $r13 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String expandDataRootLocationAlias(java.lang.String)>($r12);

        $r14 = virtualinvoke $r8.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("fmrcDefinition");

        $r15 = virtualinvoke $r8.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("suffix");

        $r16 = virtualinvoke $r8.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("olderThan");

        $r17 = virtualinvoke $r8.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("subdirs");

        virtualinvoke $r4.<thredds.catalog.InvDatasetFmrc: void setFmrcInventoryParams(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r13, $r14, $r15, $r16, $r17);

     label1:
        virtualinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readDatasetInfo(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r10, $r4, r0, r11);

        return $r4;
    }

    protected thredds.catalog.InvDatasetScan readDatasetScan(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        thredds.catalog.InvDatasetScan $r31, r35, $r45;
        org.jdom.Namespace $r38;
        java.net.URI r20;
        thredds.catalog.InvCatalogFactory $r5;
        boolean $z0, $z1, $z2, z3, z4;
        java.lang.Exception $r33;
        thredds.catalog.InvCatalogImpl r18;
        java.lang.StringBuilder $r6, $r7, $r8, $r23, $r25, $r28, $r29, $r43, $r44, $r46;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        int $i0, $i3, $i5, i6, $i7, $i8, $i9;
        java.lang.String $r1, $r2, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r24, $r26, $r30, r36, r37, r40, r41, r42;
        java.io.PrintStream $r22;
        org.slf4j.Logger $r32, $r34;
        char $c1, $c2, $c4;
        org.jdom.Element r0, $r39;
        thredds.catalog.InvDatasetImpl r19;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r18 := @parameter0: thredds.catalog.InvCatalogImpl;

        r19 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r20 := @parameter3: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("dirLocation");

        if $r1 != null goto label02;

        $r30 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("location");

        if $r30 != null goto label01;

        $r32 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String)>("readDatasetScan(): datasetScan has neither a \"location\" nor a \"dirLocation\" attribute.");

        r35 = null;

        goto label11;

     label01:
        $r31 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDatasetScan readDatasetScanNew(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r18, r19, r0, r20);

        return $r31;

     label02:
        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r5 = r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**Warning: Dataset ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using old form of DatasetScan (dirLocation instead of location)\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<thredds.catalog.InvCatalogFactory: void appendWarning(java.lang.String)>($r9);

        $r10 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("path");

        r36 = $r10;

        $r11 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("dirLocation");

        $r12 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String expandDataRootLocationAlias(java.lang.String)>($r11);

        r37 = $r12;

        $r13 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("filter");

        $r14 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("addDatasetSize");

        $r15 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("addLatest");

        $r16 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("sortOrderIncreasing");

        z3 = 0;

        if $r16 == null goto label03;

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z2 == 0 goto label03;

        z3 = 1;

     label03:
        z4 = 0;

        if $r14 == null goto label04;

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z1 == 0 goto label04;

        z4 = 1;

     label04:
        if $r10 == null goto label06;

        $c2 = virtualinvoke $r10.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c2;

        if $i7 != 47 goto label05;

        r36 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int)>(1);

     label05:
        $i3 = virtualinvoke r36.<java.lang.String: int length()>();

        $i5 = $i3 - 1;

        $c4 = virtualinvoke r36.<java.lang.String: char charAt(int)>($i5);

        $i8 = (int) $c4;

        if $i8 != 47 goto label06;

        r36 = virtualinvoke r36.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label06:
        if $r12 == null goto label07;

        $i0 = virtualinvoke $r12.<java.lang.String: int length()>();

        i6 = $i0 - 1;

        $c1 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(i6);

        $i9 = (int) $c1;

        if $i9 == 47 goto label07;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        r37 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r38 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r39 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("addTimeCoverage", $r38);

        r40 = null;

        r41 = null;

        r42 = null;

        if $r39 == null goto label08;

        r40 = virtualinvoke $r39.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("datasetNameMatchPattern");

        r41 = virtualinvoke $r39.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("startTimeSubstitutionPattern");

        r42 = virtualinvoke $r39.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("duration");

     label08:
        $r45 = new thredds.catalog.InvDatasetScan;

        specialinvoke $r45.<thredds.catalog.InvDatasetScan: void <init>(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String)>(r18, r19, $r2, r36, r37, $r13, z4, $r15, z3, r40, r41, r42);

        r35 = $r45;

        virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readDatasetInfo(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r18, $r45, r0, r20);

        $z0 = <thredds.catalog.InvCatalogFactory: boolean debugXML>;

        if $z0 == 0 goto label09;

        $r22 = <java.lang.System: java.io.PrintStream out>;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Dataset added: ");

        $r24 = virtualinvoke $r45.<thredds.catalog.InvDatasetScan: java.lang.String dump()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label09:
        goto label11;

     label10:
        $r33 := @caughtexception;

        $r34 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r34.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Reading DatasetScan", $r33);

        r35 = null;

     label11:
        return r35;

        catch java.lang.Exception from label08 to label09 with label10;
    }

    protected thredds.catalog.InvDatasetScan readDatasetScanNew(thredds.catalog.InvCatalogImpl, thredds.catalog.InvDatasetImpl, org.jdom.Element, java.net.URI)
    {
        thredds.catalog.InvDatasetScan $r25, r56;
        java.util.Map r52;
        thredds.crawlabledataset.CrawlableDatasetSorter r51;
        org.jdom.Namespace $r6, $r8, $r10, $r12, $r15, $r17, $r20, $r23, $r46, $r53;
        java.net.URI r27;
        boolean $z0, z1, $z2;
        thredds.crawlabledataset.CrawlableDatasetLabeler r49, r50;
        java.lang.Exception $r42;
        thredds.cataloggen.DatasetEnhancer $r37;
        java.util.List $r39, $r54;
        thredds.catalog.InvCatalogImpl r19;
        thredds.crawlabledataset.sorter.LexigraphicByNameSorter $r14;
        java.lang.StringBuilder $r28, $r30, $r32;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        java.util.HashMap $r38;
        thredds.crawlabledataset.CrawlableDatasetFilter r48;
        java.util.ArrayList $r22;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r4, $r5, $r31, $r33, r44;
        java.io.PrintStream $r29;
        org.slf4j.Logger $r40, $r41, $r43;
        java.util.Iterator $r55;
        java.lang.Object $r34, $r36, r45;
        org.jdom.Element r0, $r7, $r9, $r11, $r13, $r16, $r18, $r21, $r24, $r35, $r47;
        thredds.catalog.InvDatasetImpl r26;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r19 := @parameter0: thredds.catalog.InvCatalogImpl;

        r26 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r27 := @parameter3: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("path");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("location");

        $r5 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String expandDataRootLocationAlias(java.lang.String)>($r4);

        r44 = null;

        r45 = null;

        $r6 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r7 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("crawlableDatasetImpl", $r6);

        if $r7 == null goto label03;

        r44 = virtualinvoke $r7.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("className");

        $r39 = virtualinvoke $r7.<org.jdom.Element: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r39.<java.util.List: int size()>();

        if $i0 != 1 goto label01;

        r45 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(0);

        goto label03;

     label01:
        $i1 = interfaceinvoke $r39.<java.util.List: int size()>();

        if $i1 == 0 goto label02;

        $r41 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r41.<org.slf4j.Logger: void warn(java.lang.String)>("readDatasetScanNew(): content of datasetConfig element not a single element, using first element.");

        r45 = interfaceinvoke $r39.<java.util.List: java.lang.Object get(int)>(0);

        goto label03;

     label02:
        $r40 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r40.<org.slf4j.Logger: void debug(java.lang.String)>("readDatasetScanNew(): datasetConfig element has no children.");

        r45 = null;

     label03:
        $r46 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r47 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("filter", $r46);

        r48 = null;

        if $r47 == null goto label04;

        r48 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)>($r47);

     label04:
        $r8 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r9 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("addID", $r8);

        r49 = null;

        if $r9 == null goto label05;

        r49 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetLabeler readDatasetScanIdentifier(org.jdom.Element)>($r9);

     label05:
        $r10 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r11 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("namer", $r10);

        r50 = null;

        if $r11 == null goto label06;

        r50 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetLabeler readDatasetScanNamer(org.jdom.Element)>($r11);

     label06:
        $r12 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r13 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("sort", $r12);

        $r14 = new thredds.crawlabledataset.sorter.LexigraphicByNameSorter;

        specialinvoke $r14.<thredds.crawlabledataset.sorter.LexigraphicByNameSorter: void <init>(boolean)>(0);

        r51 = $r14;

        if $r13 == null goto label07;

        r51 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetSorter readDatasetScanSorter(org.jdom.Element)>($r13);

     label07:
        $r15 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r16 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("addLatest", $r15);

        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r18 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("addProxies", $r17);

        if $r16 != null goto label08;

        if $r18 == null goto label09;

     label08:
        r52 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.Map readDatasetScanAddProxies(org.jdom.Element,org.jdom.Element,thredds.catalog.InvCatalogImpl)>($r18, $r16, r19);

        goto label10;

     label09:
        $r38 = new java.util.HashMap;

        specialinvoke $r38.<java.util.HashMap: void <init>()>();

        r52 = $r38;

     label10:
        $r20 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r21 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("addDatasetSize", $r20);

        z1 = 0;

        if $r21 == null goto label11;

        z1 = 1;

     label11:
        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        $r23 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r24 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("addTimeCoverage", $r23);

        if $r24 == null goto label12;

        $r37 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.cataloggen.DatasetEnhancer readDatasetScanAddTimeCoverage(org.jdom.Element)>($r24);

        if $r37 == null goto label12;

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r37);

     label12:
        $r53 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r54 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("datasetEnhancerImpl", $r53);

        $r55 = interfaceinvoke $r54.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke $r55.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r34 = interfaceinvoke $r55.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (org.jdom.Element) $r34;

        $r36 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.Object readDatasetScanUserDefined(org.jdom.Element,java.lang.Class)>($r35, class "Lthredds/cataloggen/DatasetEnhancer;");

        if $r36 == null goto label14;

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r36);

     label14:
        goto label13;

     label15:
        $r25 = new thredds.catalog.InvDatasetScan;

        specialinvoke $r25.<thredds.catalog.InvDatasetScan: void <init>(thredds.catalog.InvDatasetImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,thredds.crawlabledataset.CrawlableDatasetFilter,thredds.crawlabledataset.CrawlableDatasetLabeler,thredds.crawlabledataset.CrawlableDatasetLabeler,boolean,thredds.crawlabledataset.CrawlableDatasetSorter,java.util.Map,java.util.List,thredds.cataloggen.CatalogRefExpander)>(r26, $r1, $r2, $r5, r44, r45, r48, r49, r50, z1, r51, r52, $r22, null);

        r56 = $r25;

        virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readDatasetInfo(thredds.catalog.InvCatalogImpl,thredds.catalog.InvDatasetImpl,org.jdom.Element,java.net.URI)>(r19, $r25, r0, r27);

        $z0 = <thredds.catalog.InvCatalogFactory: boolean debugXML>;

        if $z0 == 0 goto label16;

        $r29 = <java.lang.System: java.io.PrintStream out>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Dataset added: ");

        $r31 = virtualinvoke $r25.<thredds.catalog.InvDatasetScan: java.lang.String dump()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r33);

     label16:
        goto label18;

     label17:
        $r42 := @caughtexception;

        $r43 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r43.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("readDatasetScanNew(): failed to create DatasetScan", $r42);

        r56 = null;

     label18:
        return r56;

        catch java.lang.Exception from label15 to label16 with label17;
    }

    thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)
    {
        thredds.crawlabledataset.filter.LastModifiedLimitFilter $r16, $r75;
        org.jdom.Namespace $r3, $r37;
        thredds.catalog.InvCatalogFactory $r47, $r60, $r73, $r85;
        thredds.crawlabledataset.filter.MultiSelectorFilter$Selector $r15, $r17, $r19;
        org.jdom.Attribute $r1;
        java.lang.StringBuilder $r21, $r23, $r25, $r26, $r28, $r30, $r32, $r33, $r42, $r43, $r44, $r45, $r55, $r56, $r57, $r58, $r68, $r69, $r70, $r71, $r77, $r78, $r80, $r81, $r83;
        long $l0, $l7;
        thredds.crawlabledataset.CrawlableDatasetFilter $r41, $r51, $r54, $r64, $r67, r87, r88;
        java.util.ArrayList $r5;
        java.lang.String $r2, $r11, $r12, $r13, $r14, $r24, $r27, $r31, $r34, $r46, $r59, $r72, $r79, $r82, $r84, $r89, $r90, $r91;
        org.jdom.Element r0, $r4, r10, $r40, $r50, $r53, $r63, $r66;
        thredds.crawlabledataset.filter.RegExpMatchOnNameFilter $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, $z10, z11, z12, z13, z14, z15, z16, z17, z18, z19;
        java.util.List $r6, $r38;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r35;
        thredds.crawlabledataset.filter.MultiSelectorFilter $r8;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        org.slf4j.Logger $r22, $r29, $r48, $r61, $r74, $r86;
        java.util.Iterator $r7;
        org.jdom.DataConversionException $r76;
        thredds.crawlabledataset.filter.WildcardMatchOnNameFilter $r18;
        java.lang.Object $r9, $r36, $r39, $r49, $r52, $r62, $r65;

        r35 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r87 = null;

        $r1 = virtualinvoke r0.<org.jdom.Element: org.jdom.Attribute getAttribute(java.lang.String)>("lastModifiedLimit");

        if $r1 == null goto label05;

     label01:
        $l7 = virtualinvoke $r1.<org.jdom.Attribute: long getLongValue()>();

     label02:
        goto label04;

     label03:
        $r76 := @caughtexception;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanFilter(): bad lastModifedLimit value <");

        $r79 = virtualinvoke $r1.<org.jdom.Attribute: java.lang.String getValue()>();

        $r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79);

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">, couldn\'t parse into long: ");

        $r82 = virtualinvoke $r76.<org.jdom.DataConversionException: java.lang.String getMessage()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        $r85 = r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        virtualinvoke $r85.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r84);

        $r86 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r86.<org.slf4j.Logger: void warn(java.lang.String)>($r84);

        return null;

     label04:
        $r75 = new thredds.crawlabledataset.filter.LastModifiedLimitFilter;

        specialinvoke $r75.<thredds.crawlabledataset.filter.LastModifiedLimitFilter: void <init>(long)>($l7);

        return $r75;

     label05:
        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("logicalComp");

        if $r2 == null goto label12;

        $r37 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r38 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("filter", $r37);

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("AND");

        if $z3 == 0 goto label07;

        $i5 = interfaceinvoke $r38.<java.util.List: int size()>();

        if $i5 == 2 goto label06;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanFilter(): wrong number of filters <");

        $i6 = interfaceinvoke $r38.<java.util.List: int size()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> for AND (2 expected).");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        $r73 = r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        virtualinvoke $r73.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r72);

        $r74 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r74.<org.slf4j.Logger: void warn(java.lang.String)>($r72);

        return null;

     label06:
        $r62 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(0);

        $r63 = (org.jdom.Element) $r62;

        $r64 = virtualinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)>($r63);

        $r65 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(1);

        $r66 = (org.jdom.Element) $r65;

        $r67 = virtualinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)>($r66);

        r87 = staticinvoke <thredds.crawlabledataset.filter.LogicalFilterComposer: thredds.crawlabledataset.CrawlableDatasetFilter getAndFilter(thredds.crawlabledataset.CrawlableDatasetFilter,thredds.crawlabledataset.CrawlableDatasetFilter)>($r64, $r67);

        goto label11;

     label07:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("OR");

        if $z4 == 0 goto label09;

        $i3 = interfaceinvoke $r38.<java.util.List: int size()>();

        if $i3 == 2 goto label08;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanFilter(): wrong number of filters <");

        $i4 = interfaceinvoke $r38.<java.util.List: int size()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> for OR (2 expected).");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r60 = r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        virtualinvoke $r60.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r59);

        $r61 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r61.<org.slf4j.Logger: void warn(java.lang.String)>($r59);

        return null;

     label08:
        $r49 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(0);

        $r50 = (org.jdom.Element) $r49;

        $r51 = virtualinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)>($r50);

        $r52 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(1);

        $r53 = (org.jdom.Element) $r52;

        $r54 = virtualinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)>($r53);

        r87 = staticinvoke <thredds.crawlabledataset.filter.LogicalFilterComposer: thredds.crawlabledataset.CrawlableDatasetFilter getOrFilter(thredds.crawlabledataset.CrawlableDatasetFilter,thredds.crawlabledataset.CrawlableDatasetFilter)>($r51, $r54);

        goto label11;

     label09:
        $z5 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NOT");

        if $z5 == 0 goto label11;

        $i1 = interfaceinvoke $r38.<java.util.List: int size()>();

        if $i1 == 1 goto label10;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanFilter(): wrong number of filters <");

        $i2 = interfaceinvoke $r38.<java.util.List: int size()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> for NOT (1 expected).");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        virtualinvoke $r47.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r46);

        $r48 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r48.<org.slf4j.Logger: void warn(java.lang.String)>($r46);

        return null;

     label10:
        $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(0);

        $r40 = (org.jdom.Element) $r39;

        $r41 = virtualinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.crawlabledataset.CrawlableDatasetFilter readDatasetScanFilter(org.jdom.Element)>($r40);

        r87 = staticinvoke <thredds.crawlabledataset.filter.LogicalFilterComposer: thredds.crawlabledataset.CrawlableDatasetFilter getNotFilter(thredds.crawlabledataset.CrawlableDatasetFilter)>($r41);

     label11:
        return r87;

     label12:
        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("crawlableDatasetFilterImpl", $r3);

        if $r4 == null goto label13;

        $r36 = specialinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.Object readDatasetScanUserDefined(org.jdom.Element,java.lang.Class)>($r4, class "Lthredds/crawlabledataset/CrawlableDatasetFilter;");

        r88 = (thredds.crawlabledataset.CrawlableDatasetFilter) $r36;

        goto label24;

     label13:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z6 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label23;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.jdom.Element) $r9;

        $r11 = virtualinvoke r10.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("regExp");

        $r12 = virtualinvoke r10.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("wildcard");

        $r13 = virtualinvoke r10.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("lastModLimitInMillis");

        if $r11 != null goto label15;

        if $r12 != null goto label15;

        if $r13 != null goto label15;

        $r29 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanFilter(): no regExp, wildcard, or lastModLimitInMillis attribute in filter child <");

        $r31 = virtualinvoke r10.<org.jdom.Element: java.lang.String getName()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r34);

        goto label22;

     label15:
        z7 = 1;

        z16 = 1;

        z15 = 1;

        z14 = 1;

        $r89 = virtualinvoke r10.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("atomic");

        if $r89 == null goto label16;

        $z2 = virtualinvoke $r89.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z2 != 0 goto label16;

        z7 = 0;

        z16 = 0;

        z15 = 0;

        z14 = 0;

     label16:
        z8 = 0;

        z19 = 0;

        z18 = 0;

        z17 = 0;

        $r90 = virtualinvoke r10.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("collection");

        if $r90 == null goto label17;

        $z1 = virtualinvoke $r90.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z1 != 0 goto label17;

        z8 = 1;

        z19 = 1;

        z18 = 1;

        z17 = 1;

     label17:
        z9 = 1;

        z13 = 1;

        z12 = 1;

        z11 = 1;

        $r91 = virtualinvoke r10.<org.jdom.Element: java.lang.String getName()>();

        $z10 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>("exclude");

        if $z10 == 0 goto label18;

        z9 = 0;

        z13 = 0;

        z12 = 0;

        z11 = 0;

        goto label19;

     label18:
        $r14 = virtualinvoke r10.<org.jdom.Element: java.lang.String getName()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("include");

        if $z0 != 0 goto label19;

        $r22 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanFilter(): unhandled filter child <");

        $r24 = virtualinvoke r10.<org.jdom.Element: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String)>($r27);

        goto label14;

     label19:
        if $r11 == null goto label20;

        $r19 = new thredds.crawlabledataset.filter.MultiSelectorFilter$Selector;

        $r20 = new thredds.crawlabledataset.filter.RegExpMatchOnNameFilter;

        specialinvoke $r20.<thredds.crawlabledataset.filter.RegExpMatchOnNameFilter: void <init>(java.lang.String)>($r11);

        specialinvoke $r19.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: void <init>(thredds.crawlabledataset.CrawlableDatasetFilter,boolean,boolean,boolean)>($r20, z11, z16, z18);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r19);

        goto label22;

     label20:
        if $r12 == null goto label21;

        $r17 = new thredds.crawlabledataset.filter.MultiSelectorFilter$Selector;

        $r18 = new thredds.crawlabledataset.filter.WildcardMatchOnNameFilter;

        specialinvoke $r18.<thredds.crawlabledataset.filter.WildcardMatchOnNameFilter: void <init>(java.lang.String)>($r12);

        specialinvoke $r17.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: void <init>(thredds.crawlabledataset.CrawlableDatasetFilter,boolean,boolean,boolean)>($r18, z12, z14, z19);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label22;

     label21:
        if $r13 == null goto label22;

        $r15 = new thredds.crawlabledataset.filter.MultiSelectorFilter$Selector;

        $r16 = new thredds.crawlabledataset.filter.LastModifiedLimitFilter;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r13);

        specialinvoke $r16.<thredds.crawlabledataset.filter.LastModifiedLimitFilter: void <init>(long)>($l0);

        specialinvoke $r15.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: void <init>(thredds.crawlabledataset.CrawlableDatasetFilter,boolean,boolean,boolean)>($r16, z13, z15, z17);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r15);

     label22:
        goto label14;

     label23:
        $r8 = new thredds.crawlabledataset.filter.MultiSelectorFilter;

        specialinvoke $r8.<thredds.crawlabledataset.filter.MultiSelectorFilter: void <init>(java.util.List)>($r5);

        r88 = $r8;

     label24:
        return r88;

        catch org.jdom.DataConversionException from label01 to label02 with label03;
    }

    protected thredds.crawlabledataset.CrawlableDatasetLabeler readDatasetScanIdentifier(org.jdom.Element)
    {
        thredds.crawlabledataset.CrawlableDatasetLabeler r5;
        org.jdom.Namespace $r1;
        java.lang.Object $r4;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Element r0, $r2;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("crawlableDatasetLabelerImpl", $r1);

        if $r2 == null goto label1;

        $r4 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.Object readDatasetScanUserDefined(org.jdom.Element,java.lang.Class)>($r2, class "Lthredds/crawlabledataset/CrawlableDatasetLabeler;");

        r5 = (thredds.crawlabledataset.CrawlableDatasetLabeler) $r4;

        goto label2;

     label1:
        return null;

     label2:
        return r5;
    }

    protected thredds.crawlabledataset.CrawlableDatasetLabeler readDatasetScanNamer(org.jdom.Element)
    {
        java.util.ArrayList $r0;
        java.lang.String $r7, $r8, $r9, $r10, $r14, $r17;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r12;
        java.util.Iterator $r3;
        thredds.crawlabledataset.CrawlableDatasetLabeler r21;
        thredds.crawlabledataset.MultiLabeler $r4;
        java.util.List $r2;
        thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler $r18;
        thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler $r19;
        java.lang.Object $r5;
        java.lang.StringBuilder $r11, $r13, $r15, $r16;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r20;
        org.jdom.Element r1, r6;

        r20 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: org.jdom.Element;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.jdom.Element: java.util.List getChildren()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.jdom.Element) $r5;

        $r7 = virtualinvoke r6.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("regExp");

        $r8 = virtualinvoke r6.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("replaceString");

        $r9 = virtualinvoke r6.<org.jdom.Element: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("regExpOnName");

        if $z0 == 0 goto label2;

        $r19 = new thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler;

        specialinvoke $r19.<thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler: void <init>(java.lang.String,java.lang.String)>($r7, $r8);

        r21 = $r19;

        goto label4;

     label2:
        $r10 = virtualinvoke r6.<org.jdom.Element: java.lang.String getName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("regExpOnPath");

        if $z1 == 0 goto label3;

        $r18 = new thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler;

        specialinvoke $r18.<thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler: void <init>(java.lang.String,java.lang.String)>($r7, $r8);

        r21 = $r18;

        goto label4;

     label3:
        $r12 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanNamer(): unhandled namer child <");

        $r14 = virtualinvoke r6.<org.jdom.Element: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String)>($r17);

        goto label1;

     label4:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r21);

        goto label1;

     label5:
        $r4 = new thredds.crawlabledataset.MultiLabeler;

        specialinvoke $r4.<thredds.crawlabledataset.MultiLabeler: void <init>(java.util.List)>($r0);

        return $r4;
    }

    protected thredds.crawlabledataset.CrawlableDatasetSorter readDatasetScanSorter(org.jdom.Element)
    {
        thredds.crawlabledataset.sorter.LexigraphicByNameSorter $r6;
        thredds.crawlabledataset.CrawlableDatasetSorter r9;
        org.jdom.Namespace $r1, $r3;
        java.lang.Object $r8;
        java.lang.String $r5;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r7;
        org.jdom.Element r0, $r2, $r4;
        boolean $z0, z1;

        r7 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r9 = null;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("crawlableDatasetSorterImpl", $r1);

        if $r2 == null goto label1;

        $r8 = specialinvoke r7.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.Object readDatasetScanUserDefined(org.jdom.Element,java.lang.Class)>($r2, class "Lthredds/crawlabledataset/CrawlableDatasetSorter;");

        r9 = (thredds.crawlabledataset.CrawlableDatasetSorter) $r8;

        goto label4;

     label1:
        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("lexigraphicByName", $r3);

        if $r4 == null goto label4;

        $r5 = virtualinvoke $r4.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("increasing");

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r6 = new thredds.crawlabledataset.sorter.LexigraphicByNameSorter;

        specialinvoke $r6.<thredds.crawlabledataset.sorter.LexigraphicByNameSorter: void <init>(boolean)>(z1);

        r9 = $r6;

     label4:
        return r9;
    }

    protected java.util.Map readDatasetScanAddProxies(org.jdom.Element, org.jdom.Element, thredds.catalog.InvCatalogImpl)
    {
        thredds.cataloggen.inserter.LatestCompleteProxyDsHandler $r44;
        org.jdom.Namespace $r17, $r18, $r33, $r34, $r36;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        org.jdom.Attribute $r20;
        java.util.List $r3;
        thredds.catalog.InvCatalogImpl r21;
        java.lang.StringBuilder $r10, $r12, $r14, $r15, $r25, $r27, $r28, $r29;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r35;
        java.util.HashMap $r0;
        long l0;
        java.lang.String $r6, $r7, $r8, $r9, $r13, $r16, $r19, $r23, $r24, $r30, $r39, $r43;
        org.slf4j.Logger $r11, $r26, $r31, $r32;
        thredds.cataloggen.ProxyDatasetHandler $r38, r42;
        java.util.Iterator $r4;
        thredds.catalog.InvService $r22;
        org.jdom.DataConversionException $r40;
        java.lang.Object $r5;
        org.jdom.Element r1, r2, $r37, r41;

        r35 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: org.jdom.Element;

        r1 := @parameter1: org.jdom.Element;

        r21 := @parameter2: thredds.catalog.InvCatalogImpl;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        if r1 == null goto label01;

        $r36 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r37 = virtualinvoke r1.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("simpleLatest", $r36);

        $r38 = specialinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.cataloggen.ProxyDatasetHandler readDatasetScanAddLatest(org.jdom.Element,thredds.catalog.InvCatalogImpl)>($r37, r21);

        if $r38 == null goto label01;

        $r39 = interfaceinvoke $r38.<thredds.cataloggen.ProxyDatasetHandler: java.lang.String getProxyDatasetName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r38);

     label01:
        if r2 == null goto label18;

        $r3 = virtualinvoke r2.<org.jdom.Element: java.util.List getChildren()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label18;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r41 = (org.jdom.Element) $r5;

        $r6 = virtualinvoke r41.<org.jdom.Element: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("simpleLatest");

        if $z0 == 0 goto label03;

        $r33 = virtualinvoke r41.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        $r34 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $z5 = virtualinvoke $r33.<org.jdom.Namespace: boolean equals(java.lang.Object)>($r34);

        if $z5 == 0 goto label03;

        r42 = specialinvoke r35.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.cataloggen.ProxyDatasetHandler readDatasetScanAddLatest(org.jdom.Element,thredds.catalog.InvCatalogImpl)>(r41, r21);

        goto label15;

     label03:
        $r7 = virtualinvoke r41.<org.jdom.Element: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("latestComplete");

        if $z1 == 0 goto label14;

        $r17 = virtualinvoke r41.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        $r18 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $z3 = virtualinvoke $r17.<org.jdom.Namespace: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label14;

        $r19 = virtualinvoke r41.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        if $r19 != null goto label04;

        $r32 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String)>("readDatasetScanAddProxies(): unnamed latestComplete, skipping.");

        goto label02;

     label04:
        $r20 = virtualinvoke r41.<org.jdom.Element: org.jdom.Attribute getAttribute(java.lang.String)>("top");

        z7 = 1;

        if $r20 == null goto label08;

     label05:
        z7 = virtualinvoke $r20.<org.jdom.Attribute: boolean getBooleanValue()>();

     label06:
        goto label08;

     label07:
        $r40 := @caughtexception;

        z7 = 1;

     label08:
        $r43 = virtualinvoke r41.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("serviceName");

        if $r43 != null goto label09;

        $r31 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String)>("readDatasetScanAddProxies(): no service name given in latestComplete.");

        goto label02;

     label09:
        $r22 = virtualinvoke r21.<thredds.catalog.InvCatalogImpl: thredds.catalog.InvService findService(java.lang.String)>($r43);

        if $r22 != null goto label10;

        $r26 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanAddProxies(): named service <");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not found.");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String)>($r30);

        goto label02;

     label10:
        $r23 = virtualinvoke r41.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("lastModifiedLimit");

        if $r23 != null goto label11;

        l0 = 60L;

        goto label12;

     label11:
        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23);

     label12:
        $r24 = virtualinvoke r41.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("isResolver");

        z8 = 1;

        if $r24 == null goto label13;

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z4 == 0 goto label13;

        z8 = 0;

     label13:
        $r44 = new thredds.cataloggen.inserter.LatestCompleteProxyDsHandler;

        specialinvoke $r44.<thredds.cataloggen.inserter.LatestCompleteProxyDsHandler: void <init>(java.lang.String,boolean,thredds.catalog.InvService,boolean,long)>($r19, z7, $r22, z8, l0);

        r42 = $r44;

        goto label15;

     label14:
        r42 = null;

     label15:
        if r42 == null goto label17;

        $r8 = interfaceinvoke r42.<thredds.cataloggen.ProxyDatasetHandler: java.lang.String getProxyDatasetName()>();

        $z2 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z2 == 0 goto label16;

        $r11 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanAddProxies(): proxy map already contains key <");

        $r13 = interfaceinvoke r42.<thredds.cataloggen.ProxyDatasetHandler: java.lang.String getProxyDatasetName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">, skipping.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.slf4j.Logger: void warn(java.lang.String)>($r16);

        goto label02;

     label16:
        $r9 = interfaceinvoke r42.<thredds.cataloggen.ProxyDatasetHandler: java.lang.String getProxyDatasetName()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r42);

     label17:
        goto label02;

     label18:
        return $r0;

        catch org.jdom.DataConversionException from label05 to label06 with label07;
    }

    private thredds.cataloggen.ProxyDatasetHandler readDatasetScanAddLatest(org.jdom.Element, thredds.catalog.InvCatalogImpl)
    {
        thredds.cataloggen.inserter.SimpleLatestProxyDsHandler $r2, r14;
        java.lang.String $r8, $r9, $r11, r15, r16, $r17;
        boolean $z0, z1, z2;
        org.slf4j.Logger $r4;
        org.jdom.DataConversionException $r12;
        thredds.catalog.InvService $r18;
        org.jdom.Attribute $r10;
        thredds.catalog.InvCatalogImpl r1;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r13;
        org.jdom.Element r0;

        r13 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r1 := @parameter1: thredds.catalog.InvCatalogImpl;

        r14 = null;

        r15 = "latest.xml";

        z1 = 1;

        r16 = "latest";

        z2 = 1;

        if r0 == null goto label7;

        $r9 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        if $r9 == null goto label1;

        r15 = $r9;

     label1:
        $r10 = virtualinvoke r0.<org.jdom.Element: org.jdom.Attribute getAttribute(java.lang.String)>("top");

        if $r10 == null goto label5;

     label2:
        z1 = virtualinvoke $r10.<org.jdom.Attribute: boolean getBooleanValue()>();

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        z1 = 1;

     label5:
        $r17 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("serviceName");

        if $r17 == null goto label6;

        r16 = $r17;

     label6:
        $r11 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("isResolver");

        if $r11 == null goto label7;

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z0 == 0 goto label7;

        z2 = 0;

     label7:
        $r18 = virtualinvoke r1.<thredds.catalog.InvCatalogImpl: thredds.catalog.InvService findService(java.lang.String)>(r16);

        if $r18 != null goto label8;

        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanAddLatest(): named service <");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not found.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r8);

        goto label9;

     label8:
        $r2 = new thredds.cataloggen.inserter.SimpleLatestProxyDsHandler;

        specialinvoke $r2.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: void <init>(java.lang.String,boolean,thredds.catalog.InvService,boolean)>(r15, z1, $r18, z2);

        r14 = $r2;

     label9:
        return r14;

        catch org.jdom.DataConversionException from label2 to label3 with label4;
    }

    protected thredds.cataloggen.DatasetEnhancer readDatasetScanAddTimeCoverage(org.jdom.Element)
    {
        thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer r6;
        java.lang.String $r1, $r2, $r3, $r4;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        org.jdom.Element r0;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r6 = null;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("datasetNameMatchPattern");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("datasetPathMatchPattern");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("startTimeSubstitutionPattern");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("duration");

        if $r1 == null goto label1;

        if $r3 == null goto label1;

        if $r4 == null goto label1;

        r6 = staticinvoke <thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer: thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer getInstanceToMatchOnDatasetName(java.lang.String,java.lang.String,java.lang.String)>($r1, $r3, $r4);

        goto label2;

     label1:
        if $r2 == null goto label2;

        if $r3 == null goto label2;

        if $r4 == null goto label2;

        r6 = staticinvoke <thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer: thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer getInstanceToMatchOnDatasetPath(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

     label2:
        return r6;
    }

    private java.lang.Object readDatasetScanUserDefined(org.jdom.Element, java.lang.Class)
    {
        java.lang.NoSuchMethodException $r42;
        java.lang.InstantiationException $r35;
        boolean $z0;
        java.lang.IllegalAccessException $r28;
        java.lang.reflect.InvocationTargetException $r21;
        java.util.List $r2;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16, $r22, $r24, $r25, $r26, $r29, $r31, $r32, $r33, $r36, $r38, $r39, $r40, $r43, $r45, $r46, $r47, $r50, $r52, $r53, $r54;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r56;
        java.lang.Object[] $r6;
        java.lang.reflect.Constructor $r7;
        int $i0, $i1;
        java.lang.String $r1, $r14, $r17, $r27, $r34, $r41, $r48, $r55;
        org.slf4j.Logger $r3, $r18, $r23, $r30, $r37, $r44, $r51;
        java.lang.Class[] $r5;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class r4, $r58;
        java.lang.Object $r8, $r19, $r20;
        java.lang.ClassNotFoundException $r49;
        org.jdom.Element r0, r57;

        r56 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r4 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("className");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 1 goto label01;

        $r20 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r57 = (org.jdom.Element) $r20;

        goto label03;

     label01:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 == 0 goto label02;

        $r18 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>("readDatasetScanUserDefined(): config XML not a single element, using first element.");

        $r19 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        r57 = (org.jdom.Element) $r19;

        goto label03;

     label02:
        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>("readDatasetScanUserDefined(): no config XML elements.");

        r57 = null;

     label03:
        $r58 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $z0 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r58);

        if $z0 != 0 goto label04;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested class <");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not an implementation of ");

        $r14 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label04:
        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljava/lang/Object;";

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r57;

        $r7 = virtualinvoke $r58.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

        $r8 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

     label05:
        return $r8;

     label06:
        $r49 := @caughtexception;

        $r51 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanUserDefined(): exception creating user defined object <");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r51.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r55, $r49);

        return null;

     label07:
        $r42 := @caughtexception;

        $r44 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanUserDefined(): exception creating user defined object <");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r48, $r42);

        return null;

     label08:
        $r35 := @caughtexception;

        $r37 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanUserDefined(): exception creating user defined object <");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r37.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r41, $r35);

        return null;

     label09:
        $r28 := @caughtexception;

        $r30 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanUserDefined(): exception creating user defined object <");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r34, $r28);

        return null;

     label10:
        $r21 := @caughtexception;

        $r23 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("readDatasetScanUserDefined(): exception creating user defined object <");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r27, $r21);

        return null;

        catch java.lang.ClassNotFoundException from label03 to label05 with label06;
        catch java.lang.NoSuchMethodException from label03 to label05 with label07;
        catch java.lang.InstantiationException from label03 to label05 with label08;
        catch java.lang.IllegalAccessException from label03 to label05 with label09;
        catch java.lang.reflect.InvocationTargetException from label03 to label05 with label10;
    }

    protected thredds.catalog.DataRootConfig readDatasetRoot(org.jdom.Element)
    {
        int $i0, $i3, $i5, i6, $i7, $i8, $i9;
        java.lang.String $r1, $r2, $r4, r8, r9, r10, $r12;
        thredds.catalog.DataRootConfig $r14;
        char $c1, $c2, $c4;
        java.lang.StringBuilder $r6, $r7, $r13;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Element r0;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("path");

        r8 = $r1;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("location");

        r9 = $r2;

        if $r2 != null goto label1;

        r9 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("dirLocation");

     label1:
        $r4 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String expandDataRootLocationAlias(java.lang.String)>(r9);

        r10 = $r4;

        if $r1 == null goto label3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i7 = (int) $c2;

        if $i7 != 47 goto label2;

        r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

     label2:
        $i3 = virtualinvoke r8.<java.lang.String: int length()>();

        $i5 = $i3 - 1;

        $c4 = virtualinvoke r8.<java.lang.String: char charAt(int)>($i5);

        $i8 = (int) $c4;

        if $i8 != 47 goto label3;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label3:
        if $r4 == null goto label4;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        i6 = $i0 - 1;

        $c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i6);

        $i9 = (int) $c1;

        if $i9 == 47 goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r14 = new thredds.catalog.DataRootConfig;

        $r12 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("cache");

        specialinvoke $r14.<thredds.catalog.DataRootConfig: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r8, r10, $r12);

        return $r14;
    }

    protected ucar.nc2.units.DateType readDate(org.jdom.Element)
    {
        java.lang.String $r1, $r2, $r4;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Element r0;
        ucar.nc2.units.DateType $r5;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("format");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("type");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        $r5 = virtualinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.DateType makeDateType(java.lang.String,java.lang.String,java.lang.String)>($r4, $r1, $r2);

        return $r5;
    }

    protected ucar.nc2.units.DateType makeDateType(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r6, $r8, $r9, $r10;
        java.lang.String r0, r2, r3, $r11;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        java.text.ParseException $r4;
        thredds.catalog.InvCatalogFactory $r7;
        ucar.nc2.units.DateType $r1;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new ucar.nc2.units.DateType;

        specialinvoke $r1.<ucar.nc2.units.DateType: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r0, r2, r3);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        $r7 = r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Parse error: Bad date format = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r11);

        return null;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    protected ucar.nc2.units.TimeDuration readDuration(org.jdom.Element)
    {
        ucar.nc2.units.TimeDuration $r2;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String $r1, $r10, r11;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r4;
        java.text.ParseException $r3;
        org.jdom.Element r0;
        thredds.catalog.InvCatalogFactory $r6;

        r4 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        r11 = null;

     label2:
        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        r11 = $r1;

        $r2 = new ucar.nc2.units.TimeDuration;

        specialinvoke $r2.<ucar.nc2.units.TimeDuration: void <init>(java.lang.String)>($r1);

     label3:
        return $r2;

     label4:
        $r3 := @caughtexception;

        $r6 = r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Parse error: Bad duration format = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r10);

        return null;

        catch java.text.ParseException from label2 to label3 with label4;
    }

    protected thredds.catalog.InvDocumentation readDocumentation(thredds.catalog.InvCatalog, org.jdom.Element)
    {
        thredds.catalog.InvDocumentation $r25;
        org.jdom.Namespace $r1, $r3;
        java.lang.String $r2, $r4, $r5, $r6, $r11, $r20, $r23;
        java.net.URI r24;
        thredds.catalog.InvCatalogFactory $r16;
        boolean $z0;
        java.io.PrintStream $r8;
        thredds.catalog.InvCatalog r12;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r7, $r9, $r10, $r15, $r17, $r18, $r19, $r21, $r22;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r14;
        org.jdom.Element r0;

        r14 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r12 := @parameter0: thredds.catalog.InvCatalog;

        r0 := @parameter1: org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("href", $r1);

        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("title", $r3);

        $r5 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("type");

        $r6 = virtualinvoke r0.<org.jdom.Element: java.lang.String getTextNormalize()>();

        r24 = null;

        if $r2 == null goto label4;

     label1:
        r24 = virtualinvoke r12.<thredds.catalog.InvCatalog: java.net.URI resolveUri(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r16 = r14.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Invalid documentation href = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r20 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r16.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r23);

     label4:
        $r25 = new thredds.catalog.InvDocumentation;

        specialinvoke $r25.<thredds.catalog.InvDocumentation: void <init>(java.lang.String,java.net.URI,java.lang.String,java.lang.String,java.lang.String)>($r2, r24, $r4, $r5, $r6);

        $z0 = <thredds.catalog.InvCatalogFactory: boolean debugXML>;

        if $z0 == 0 goto label5;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Documentation added: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label5:
        return $r25;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected double readDouble(org.jdom.Element)
    {
        java.lang.NumberFormatException $r2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.lang.String $r1, $r9;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Element r0;
        thredds.catalog.InvCatalogFactory $r5;
        double $d0;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return #NaN;

     label1:
        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

     label2:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r1);

     label3:
        return $d0;

     label4:
        $r2 := @caughtexception;

        $r5 = r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Parse error: Bad double format = ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r9);

        return #NaN;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    protected thredds.catalog.ThreddsMetadata$GeospatialCoverage readGeospatialCoverage(org.jdom.Element)
    {
        java.util.ArrayList $r12;
        org.jdom.Namespace $r3, $r6, $r9, $r13;
        java.lang.String $r1;
        boolean $z0;
        thredds.catalog.ThreddsMetadata$Vocab $r19;
        java.util.Iterator $r15;
        thredds.catalog.ThreddsMetadata$GeospatialCoverage $r16;
        java.util.List $r14;
        thredds.catalog.ThreddsMetadata$Range $r5, $r8, $r11;
        java.lang.Object $r17;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r2;
        org.jdom.Element r0, $r4, $r7, $r10, r18;

        r2 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("zpositive");

        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("northsouth", $r3);

        $r5 = virtualinvoke r2.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Range readGeospatialRange(org.jdom.Element,java.lang.String)>($r4, "degrees_north");

        $r6 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r7 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("eastwest", $r6);

        $r8 = virtualinvoke r2.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Range readGeospatialRange(org.jdom.Element,java.lang.String)>($r7, "degrees_east");

        $r9 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r10 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("updown", $r9);

        $r11 = virtualinvoke r2.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Range readGeospatialRange(org.jdom.Element,java.lang.String)>($r10, "m");

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r14 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("name", $r13);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r17 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.jdom.Element) $r17;

        $r19 = virtualinvoke r2.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Vocab readControlledVocabulary(org.jdom.Element)>(r18);

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        goto label2;

     label3:
        $r16 = new thredds.catalog.ThreddsMetadata$GeospatialCoverage;

        specialinvoke $r16.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: void <init>(thredds.catalog.ThreddsMetadata$Range,thredds.catalog.ThreddsMetadata$Range,thredds.catalog.ThreddsMetadata$Range,java.util.List,java.lang.String)>($r8, $r5, $r11, $r12, $r1);

        return $r16;
    }

    protected thredds.catalog.ThreddsMetadata$Range readGeospatialRange(org.jdom.Element, java.lang.String)
    {
        org.jdom.Namespace $r2, $r4, $r6, $r8;
        java.lang.String $r9, r11, r12;
        double $d0, $d1, $d2;
        thredds.catalog.ThreddsMetadata$Range $r10;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r1;
        org.jdom.Element r0, $r3, $r5, $r7;

        r1 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r11 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("start", $r2);

        $d0 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: double readDouble(org.jdom.Element)>($r3);

        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r5 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("size", $r4);

        $d1 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: double readDouble(org.jdom.Element)>($r5);

        $r6 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r7 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("resolution", $r6);

        $d2 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: double readDouble(org.jdom.Element)>($r7);

        $r8 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r9 = virtualinvoke r0.<org.jdom.Element: java.lang.String getChildText(java.lang.String,org.jdom.Namespace)>("units", $r8);

        r12 = $r9;

        if $r9 != null goto label2;

        r12 = r11;

     label2:
        $r10 = new thredds.catalog.ThreddsMetadata$Range;

        specialinvoke $r10.<thredds.catalog.ThreddsMetadata$Range: void <init>(double,double,double,java.lang.String)>($d0, $d1, $d2, r12);

        return $r10;
    }

    protected thredds.catalog.InvMetadata readMetadata(thredds.catalog.InvCatalog, thredds.catalog.InvDatasetImpl, org.jdom.Element)
    {
        thredds.catalog.MetadataConverterIF $r49, r50;
        org.jdom.Namespace $r3, $r5, r46;
        thredds.catalog.InvCatalogFactory $r43, $r47;
        boolean z0, $z1, z2, $z3, $z4, $z5, $z6, $z7;
        thredds.catalog.InvCatalog r15;
        java.util.List $r1;
        java.lang.StringBuilder $r32, $r34, $r35, $r36, $r37, $r38, $r41;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r9;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r4, $r6, $r7, $r8, $r12, $r13, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r30, $r31, $r40, $r42, $r48;
        java.io.PrintStream $r33;
        thredds.catalog.InvMetadata $r10, $r16, $r19, $r22, $r25, $r29;
        thredds.catalog.ThreddsMetadata $r14;
        java.lang.Object $r28, $r44;
        java.lang.Class $r39;
        org.jdom.Element r0, $r45;
        thredds.catalog.InvDatasetImpl r11;

        r9 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r15 := @parameter0: thredds.catalog.InvCatalog;

        r11 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label01;

        $r44 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r45 = (org.jdom.Element) $r44;

        r46 = virtualinvoke $r45.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

        goto label02;

     label01:
        r46 = virtualinvoke r0.<org.jdom.Element: org.jdom.Namespace getNamespace()>();

     label02:
        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("metadataType");

        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("href", $r3);

        $r5 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r6 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("title", $r5);

        $r7 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("inherited");

        if $r7 == null goto label03;

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z5 == 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        z0 = $z6;

        if $r2 == null goto label05;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("THREDDS");

        if $z4 == 0 goto label06;

     label05:
        $r8 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("http://www.unidata.ucar.edu/namespaces/thredds/InvCatalog/v1.0");

        if $z1 == 0 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        z2 = $z7;

        $r47 = r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r48 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r49 = virtualinvoke $r47.<thredds.catalog.InvCatalogFactory: thredds.catalog.MetadataConverterIF getMetadataConverter(java.lang.String)>($r48);

        r50 = $r49;

        if $r49 != null goto label08;

        $r43 = r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        r50 = virtualinvoke $r43.<thredds.catalog.InvCatalogFactory: thredds.catalog.MetadataConverterIF getMetadataConverter(java.lang.String)>($r2);

     label08:
        if r50 == null goto label11;

        $z3 = r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean debugMetadataRead>;

        if $z3 == 0 goto label09;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found factory for metadata type = ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" namespace = ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r39 = virtualinvoke r50.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r42);

     label09:
        $i3 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i3 <= 0 goto label10;

        $r28 = interfaceinvoke r50.<thredds.catalog.MetadataConverterIF: java.lang.Object readMetadataContent(thredds.catalog.InvDataset,org.jdom.Element)>(r11, r0);

        $r29 = new thredds.catalog.InvMetadata;

        $r30 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r31 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r29.<thredds.catalog.InvMetadata: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,thredds.catalog.MetadataConverterIF,java.lang.Object)>(r11, $r2, $r30, $r31, z0, 0, r50, $r28);

        return $r29;

     label10:
        $r25 = new thredds.catalog.InvMetadata;

        $r26 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r27 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r25.<thredds.catalog.InvMetadata: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,thredds.catalog.MetadataConverterIF)>(r11, $r4, $r6, $r2, $r26, $r27, z0, 0, r50);

        return $r25;

     label11:
        if z2 != 0 goto label13;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i2 <= 0 goto label12;

        $r22 = new thredds.catalog.InvMetadata;

        $r23 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r24 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r22.<thredds.catalog.InvMetadata: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,thredds.catalog.MetadataConverterIF,java.lang.Object)>(r11, $r2, $r23, $r24, z0, 0, r9, r0);

        return $r22;

     label12:
        $r19 = new thredds.catalog.InvMetadata;

        $r20 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r21 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r19.<thredds.catalog.InvMetadata: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,thredds.catalog.MetadataConverterIF)>(r11, $r4, $r6, $r2, $r20, $r21, z0, 0, null);

        return $r19;

     label13:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 <= 0 goto label14;

        $r14 = new thredds.catalog.ThreddsMetadata;

        specialinvoke $r14.<thredds.catalog.ThreddsMetadata: void <init>(boolean)>(0);

        virtualinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: void readThreddsMetadata(thredds.catalog.InvCatalog,thredds.catalog.InvDatasetImpl,org.jdom.Element,thredds.catalog.ThreddsMetadata)>(r15, r11, r0, $r14);

        $r16 = new thredds.catalog.InvMetadata;

        $r17 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r18 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r16.<thredds.catalog.InvMetadata: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,thredds.catalog.MetadataConverterIF,java.lang.Object)>(r11, $r2, $r17, $r18, z0, 1, r9, $r14);

        return $r16;

     label14:
        $r10 = new thredds.catalog.InvMetadata;

        $r12 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getURI()>();

        $r13 = virtualinvoke r46.<org.jdom.Namespace: java.lang.String getPrefix()>();

        specialinvoke $r10.<thredds.catalog.InvMetadata: void <init>(thredds.catalog.InvDataset,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,thredds.catalog.MetadataConverterIF)>(r11, $r4, $r6, $r2, $r12, $r13, z0, 1, r9);

        return $r10;
    }

    public java.lang.Object readMetadataContent(thredds.catalog.InvDataset, org.jdom.Element)
    {
        thredds.catalog.ThreddsMetadata $r6;
        thredds.catalog.InvMetadata $r5;
        thredds.catalog.InvCatalog $r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        org.jdom.Element r3;
        thredds.catalog.InvDatasetImpl $r4;
        thredds.catalog.InvDataset r1;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.InvDataset;

        r3 := @parameter1: org.jdom.Element;

        $r2 = virtualinvoke r1.<thredds.catalog.InvDataset: thredds.catalog.InvCatalog getParentCatalog()>();

        $r4 = (thredds.catalog.InvDatasetImpl) r1;

        $r5 = virtualinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvMetadata readMetadata(thredds.catalog.InvCatalog,thredds.catalog.InvDatasetImpl,org.jdom.Element)>($r2, $r4, r3);

        $r6 = virtualinvoke $r5.<thredds.catalog.InvMetadata: thredds.catalog.ThreddsMetadata getThreddsMetadata()>();

        return $r6;
    }

    private org.jdom.Element readContentFromURL(java.net.URI) throws java.io.IOException
    {
        org.jdom.input.SAXBuilder $r1, $r3, $r7;
        java.net.URL $r4;
        java.io.IOException $r9;
        org.jdom.Document $r5;
        org.jdom.JDOMException $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        java.net.URI r2;
        java.lang.String $r10;
        org.jdom.Element $r6;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: java.net.URI;

        $r1 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.input.SAXBuilder saxBuilder>;

        if $r1 != null goto label1;

        $r7 = new org.jdom.input.SAXBuilder;

        specialinvoke $r7.<org.jdom.input.SAXBuilder: void <init>()>();

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.input.SAXBuilder saxBuilder> = $r7;

     label1:
        $r3 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.input.SAXBuilder saxBuilder>;

        $r4 = virtualinvoke r2.<java.net.URI: java.net.URL toURL()>();

        $r5 = virtualinvoke $r3.<org.jdom.input.SAXBuilder: org.jdom.Document build(java.net.URL)>($r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.io.IOException;

        $r10 = virtualinvoke $r8.<org.jdom.JDOMException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label4:
        $r6 = virtualinvoke $r5.<org.jdom.Document: org.jdom.Element getRootElement()>();

        return $r6;

        catch org.jdom.JDOMException from label1 to label2 with label3;
    }

    public java.lang.Object readMetadataContentFromURL(thredds.catalog.InvDataset, java.net.URI) throws java.io.IOException
    {
        java.io.PrintStream $r6;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r7, $r10;
        java.lang.Class $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        java.net.URI r1;
        java.lang.String $r9, $r11;
        org.jdom.Element $r2;
        thredds.catalog.InvDataset r3;
        boolean $z0;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r3 := @parameter0: thredds.catalog.InvDataset;

        r1 := @parameter1: java.net.URI;

        $r2 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element readContentFromURL(java.net.URI)>(r1);

        $r4 = virtualinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.Object readMetadataContent(thredds.catalog.InvDataset,org.jdom.Element)>(r3, $r2);

        $z0 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean debugMetadataRead>;

        if $z0 == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" convert to ");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label1:
        return $r4;
    }

    public boolean validateMetadataContent(java.lang.Object, java.lang.StringBuilder)
    {
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.StringBuilder;

        return 1;
    }

    public void addMetadataContent(org.jdom.Element, java.lang.Object)
    {
        java.lang.Object r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        org.jdom.Element r1;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: org.jdom.Element;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    protected thredds.catalog.InvProperty readProperty(org.jdom.Element)
    {
        thredds.catalog.InvProperty $r3;
        java.lang.String $r1, $r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r4;
        org.jdom.Element r0;

        r4 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("value");

        $r3 = new thredds.catalog.InvProperty;

        specialinvoke $r3.<thredds.catalog.InvProperty: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    protected thredds.catalog.ThreddsMetadata$Source readSource(org.jdom.Element)
    {
        thredds.catalog.ThreddsMetadata$Source $r7;
        org.jdom.Namespace $r2, $r5;
        java.lang.String $r8, $r9, $r13, $r16;
        thredds.catalog.InvCatalogFactory $r11;
        thredds.catalog.ThreddsMetadata$Vocab $r4;
        java.lang.StringBuilder $r10, $r12, $r14, $r15;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r1;
        org.jdom.Element r0, $r3, $r6;

        r1 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("name", $r2);

        $r4 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Vocab readControlledVocabulary(org.jdom.Element)>($r3);

        $r5 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r6 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("contact", $r5);

        if $r6 != null goto label2;

        $r11 = r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Parse error: Missing contact element in = ");

        $r13 = virtualinvoke r0.<org.jdom.Element: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r16);

        return null;

     label2:
        $r7 = new thredds.catalog.ThreddsMetadata$Source;

        $r8 = virtualinvoke $r6.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("url");

        $r9 = virtualinvoke $r6.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("email");

        specialinvoke $r7.<thredds.catalog.ThreddsMetadata$Source: void <init>(thredds.catalog.ThreddsMetadata$Vocab,java.lang.String,java.lang.String)>($r4, $r8, $r9);

        return $r7;
    }

    protected thredds.catalog.InvService readService(org.jdom.Element, java.net.URI)
    {
        org.jdom.Namespace $r7, $r10, $r13;
        java.net.URI r23;
        boolean $z0, $z1, $z2, $z3;
        thredds.catalog.InvProperty $r28;
        java.util.List $r8, $r11, $r14;
        java.lang.StringBuilder $r16, $r18, $r19;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r22;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r20;
        java.io.PrintStream $r17;
        thredds.catalog.DataRootConfig $r26;
        thredds.catalog.InvService $r6, $r24;
        java.util.Iterator $r9, $r12, $r15;
        java.lang.Object $r21, $r25, $r27;
        org.jdom.Element r0, r29, r30, r31;

        r22 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        r23 := @parameter1: java.net.URI;

        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("serviceType");

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("base");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("suffix");

        $r5 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("desc");

        $r6 = new thredds.catalog.InvService;

        specialinvoke $r6.<thredds.catalog.InvService: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4, $r5);

        $r7 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r8 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("property", $r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r27 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r29 = (org.jdom.Element) $r27;

        $r28 = virtualinvoke r22.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvProperty readProperty(org.jdom.Element)>(r29);

        virtualinvoke $r6.<thredds.catalog.InvService: void addProperty(thredds.catalog.InvProperty)>($r28);

        goto label1;

     label2:
        $r10 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r11 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("datasetRoot", $r10);

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r25 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r30 = (org.jdom.Element) $r25;

        $r26 = virtualinvoke r22.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.DataRootConfig readDatasetRoot(org.jdom.Element)>(r30);

        virtualinvoke $r6.<thredds.catalog.InvService: void addDatasetRoot(thredds.catalog.InvProperty)>($r26);

        goto label3;

     label4:
        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r14 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("service", $r13);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r21 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r31 = (org.jdom.Element) $r21;

        $r24 = virtualinvoke r22.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvService readService(org.jdom.Element,java.net.URI)>(r31, r23);

        virtualinvoke $r6.<thredds.catalog.InvService: void addService(thredds.catalog.InvService)>($r24);

        goto label5;

     label6:
        $z3 = <thredds.catalog.InvCatalogFactory: boolean debugXML>;

        if $z3 == 0 goto label7;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Service added: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20);

     label7:
        return $r6;
    }

    protected double readDataSize(org.jdom.Element)
    {
        int $i2, $i3, $i4, $i5, $i6;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r4, $r12;
        thredds.catalog.InvCatalogFactory $r8;
        double $d0, d1;
        char $c0, $c1;
        java.lang.NumberFormatException $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r13;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r6;
        org.jdom.Element r0, $r2;

        r6 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("dataSize", $r1);

        if $r2 != null goto label01;

        return #NaN;

     label01:
        $r3 = virtualinvoke $r2.<org.jdom.Element: java.lang.String getText()>();

     label02:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r3);

        d1 = $d0;

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

        $r8 = r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Parse error: Bad double format in size element = ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r12);

        return #NaN;

     label05:
        $r4 = virtualinvoke $r2.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("units");

        $c0 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        $i2 = (int) $c1;

        if $i2 != 75 goto label06;

        d1 = $d0 * 1000.0;

        goto label10;

     label06:
        $i3 = (int) $c1;

        if $i3 != 77 goto label07;

        d1 = $d0 * 1000000.0;

        goto label10;

     label07:
        $i4 = (int) $c1;

        if $i4 != 71 goto label08;

        d1 = $d0 * 1.0E9;

        goto label10;

     label08:
        $i5 = (int) $c1;

        if $i5 != 84 goto label09;

        d1 = $d0 * 1.0E12;

        goto label10;

     label09:
        $i6 = (int) $c1;

        if $i6 != 80 goto label10;

        d1 = $d0 * 1.0E15;

     label10:
        return d1;

        catch java.lang.NumberFormatException from label02 to label03 with label04;
    }

    protected ucar.nc2.units.DateRange readTimeCoverage(org.jdom.Element)
    {
        org.jdom.Namespace $r2, $r5, $r8, $r11;
        java.lang.String $r19, $r22;
        thredds.catalog.InvCatalogFactory $r17;
        ucar.nc2.units.TimeDuration $r10, $r13;
        java.lang.IllegalArgumentException $r15;
        ucar.nc2.units.DateRange $r14;
        java.lang.StringBuilder $r16, $r18, $r20, $r21;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r1;
        org.jdom.Element r0, $r3, $r6, $r9, $r12;
        ucar.nc2.units.DateType $r4, $r7;

        r1 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r3 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("start", $r2);

        $r4 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.DateType readDate(org.jdom.Element)>($r3);

        $r5 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r6 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("end", $r5);

        $r7 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.DateType readDate(org.jdom.Element)>($r6);

        $r8 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r9 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("duration", $r8);

        $r10 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.TimeDuration readDuration(org.jdom.Element)>($r9);

        $r11 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r12 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("resolution", $r11);

        $r13 = virtualinvoke r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.TimeDuration readDuration(org.jdom.Element)>($r12);

     label2:
        $r14 = new ucar.nc2.units.DateRange;

        specialinvoke $r14.<ucar.nc2.units.DateRange: void <init>(ucar.nc2.units.DateType,ucar.nc2.units.DateType,ucar.nc2.units.TimeDuration,ucar.nc2.units.TimeDuration)>($r4, $r7, $r10, $r13);

     label3:
        return $r14;

     label4:
        $r15 := @caughtexception;

        $r17 = r1.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** warning: TimeCoverage error = ");

        $r19 = virtualinvoke $r15.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<thredds.catalog.InvCatalogFactory: void appendWarning(java.lang.String)>($r22);

        return null;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    protected void readThreddsMetadata(thredds.catalog.InvCatalog, thredds.catalog.InvDatasetImpl, org.jdom.Element, thredds.catalog.ThreddsMetadata)
    {
        thredds.catalog.ThreddsMetadata$Variables $r67;
        thredds.catalog.ThreddsMetadata$Contributor $r83;
        org.jdom.Namespace $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r32, $r35, $r38, $r40, $r42, $r96;
        thredds.catalog.InvCatalogFactory $r48, $r57;
        ucar.nc2.constants.FeatureType $r55;
        thredds.catalog.ThreddsMetadata$Vocab $r73, $r77;
        thredds.catalog.InvProperty $r71;
        thredds.catalog.InvCatalog r65;
        thredds.catalog.DataFormatType $r46, r98;
        ucar.nc2.units.DateRange $r37;
        java.lang.StringBuilder $r47, $r49, $r50, $r51, $r56, $r58, $r59, $r60;
        thredds.catalog.InvDocumentation $r79;
        java.lang.String $r45, $r52, $r53, $r54, $r61, $r62, $r63;
        thredds.catalog.InvMetadata $r75;
        thredds.catalog.ThreddsMetadata$GeospatialCoverage $r34;
        org.jdom.Element r0, $r33, $r36, $r39, $r41, $r43, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, $r97;
        thredds.catalog.InvDatasetImpl r66;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.List $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r31;
        ucar.nc2.units.DateType $r81;
        thredds.catalog.ThreddsMetadata$Source $r69, $r85;
        int $i0, $i1;
        double $d0;
        java.util.Iterator $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30;
        thredds.catalog.ThreddsMetadata r44;
        java.lang.Object $r64, $r68, $r70, $r72, $r74, $r76, $r78, $r80, $r82, $r84;

        r31 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r65 := @parameter0: thredds.catalog.InvCatalog;

        r66 := @parameter1: thredds.catalog.InvDatasetImpl;

        r0 := @parameter2: org.jdom.Element;

        r44 := @parameter3: thredds.catalog.ThreddsMetadata;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r2 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("creator", $r1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r84 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r86 = (org.jdom.Element) $r84;

        $r85 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Source readSource(org.jdom.Element)>(r86);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addCreator(thredds.catalog.ThreddsMetadata$Source)>($r85);

        goto label01;

     label02:
        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r5 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("contributor", $r4);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r82 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r87 = (org.jdom.Element) $r82;

        $r83 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Contributor readContributor(org.jdom.Element)>(r87);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addContributor(thredds.catalog.ThreddsMetadata$Contributor)>($r83);

        goto label03;

     label04:
        $r7 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r8 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("date", $r7);

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r80 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r88 = (org.jdom.Element) $r80;

        $r81 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.DateType readDate(org.jdom.Element)>(r88);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addDate(ucar.nc2.units.DateType)>($r81);

        goto label05;

     label06:
        $r10 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r11 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("documentation", $r10);

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label08;

        $r78 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r89 = (org.jdom.Element) $r78;

        $r79 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvDocumentation readDocumentation(thredds.catalog.InvCatalog,org.jdom.Element)>(r65, r89);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addDocumentation(thredds.catalog.InvDocumentation)>($r79);

        goto label07;

     label08:
        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r14 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("keyword", $r13);

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r76 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r90 = (org.jdom.Element) $r76;

        $r77 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Vocab readControlledVocabulary(org.jdom.Element)>(r90);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addKeyword(thredds.catalog.ThreddsMetadata$Vocab)>($r77);

        goto label09;

     label10:
        $r16 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r17 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("metadata", $r16);

        $r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z5 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r74 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r91 = (org.jdom.Element) $r74;

        $r75 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvMetadata readMetadata(thredds.catalog.InvCatalog,thredds.catalog.InvDatasetImpl,org.jdom.Element)>(r65, r66, r91);

        if $r75 == null goto label12;

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addMetadata(thredds.catalog.InvMetadata)>($r75);

     label12:
        goto label11;

     label13:
        $r19 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r20 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("project", $r19);

        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z6 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label15;

        $r72 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r92 = (org.jdom.Element) $r72;

        $r73 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Vocab readControlledVocabulary(org.jdom.Element)>(r92);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addProject(thredds.catalog.ThreddsMetadata$Vocab)>($r73);

        goto label14;

     label15:
        $r22 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r23 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("property", $r22);

        $r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z7 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label17;

        $r70 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r93 = (org.jdom.Element) $r70;

        $r71 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvProperty readProperty(org.jdom.Element)>(r93);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addProperty(thredds.catalog.InvProperty)>($r71);

        goto label16;

     label17:
        $r25 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r26 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("publisher", $r25);

        $r27 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z8 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label19;

        $r68 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r94 = (org.jdom.Element) $r68;

        $r69 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Source readSource(org.jdom.Element)>(r94);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addPublisher(thredds.catalog.ThreddsMetadata$Source)>($r69);

        goto label18;

     label19:
        $r28 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r29 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variables", $r28);

        $r30 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z9 = interfaceinvoke $r30.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label21;

        $r64 = interfaceinvoke $r30.<java.util.Iterator: java.lang.Object next()>();

        r95 = (org.jdom.Element) $r64;

        $r67 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Variables readVariables(thredds.catalog.InvCatalog,thredds.catalog.InvDataset,org.jdom.Element)>(r65, r66, r95);

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void addVariables(thredds.catalog.ThreddsMetadata$Variables)>($r67);

        goto label20;

     label21:
        $r32 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r33 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("geospatialCoverage", $r32);

        $r34 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$GeospatialCoverage readGeospatialCoverage(org.jdom.Element)>($r33);

        if $r34 == null goto label22;

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setGeospatialCoverage(thredds.catalog.ThreddsMetadata$GeospatialCoverage)>($r34);

     label22:
        $r35 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r36 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("timeCoverage", $r35);

        $r37 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: ucar.nc2.units.DateRange readTimeCoverage(org.jdom.Element)>($r36);

        if $r37 == null goto label23;

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setTimeCoverage(ucar.nc2.units.DateRange)>($r37);

     label23:
        $r38 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r39 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("serviceName", $r38);

        if $r39 == null goto label24;

        $r63 = virtualinvoke $r39.<org.jdom.Element: java.lang.String getText()>();

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setServiceName(java.lang.String)>($r63);

     label24:
        $r40 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r41 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("authority", $r40);

        if $r41 == null goto label25;

        $r62 = virtualinvoke $r41.<org.jdom.Element: java.lang.String getText()>();

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setAuthority(java.lang.String)>($r62);

     label25:
        $r42 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r43 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("dataType", $r42);

        if $r43 == null goto label27;

        $r53 = virtualinvoke $r43.<org.jdom.Element: java.lang.String getText()>();

        if $r53 == null goto label27;

        $i1 = virtualinvoke $r53.<java.lang.String: int length()>();

        if $i1 <= 0 goto label27;

        $r54 = virtualinvoke $r53.<java.lang.String: java.lang.String toUpperCase()>();

        $r55 = staticinvoke <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType getType(java.lang.String)>($r54);

        if $r55 != null goto label26;

        $r57 = r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** warning: non-standard data type = ");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<thredds.catalog.InvCatalogFactory: void appendWarning(java.lang.String)>($r61);

     label26:
        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setDataType(ucar.nc2.constants.FeatureType)>($r55);

     label27:
        $r96 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r97 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("dataFormat", $r96);

        if $r97 == null goto label29;

        $r45 = virtualinvoke $r97.<org.jdom.Element: java.lang.String getText()>();

        if $r45 == null goto label29;

        $i0 = virtualinvoke $r45.<java.lang.String: int length()>();

        if $i0 <= 0 goto label29;

        $r46 = staticinvoke <thredds.catalog.DataFormatType: thredds.catalog.DataFormatType findType(java.lang.String)>($r45);

        r98 = $r46;

        if $r46 != null goto label28;

        r98 = staticinvoke <thredds.catalog.DataFormatType: thredds.catalog.DataFormatType getType(java.lang.String)>($r45);

        $r48 = r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** warning: non-standard dataFormat type = ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r48.<thredds.catalog.InvCatalogFactory: void appendWarning(java.lang.String)>($r52);

     label28:
        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setDataFormatType(thredds.catalog.DataFormatType)>(r98);

     label29:
        $d0 = virtualinvoke r31.<thredds.catalog.parser.jdom.InvCatalogFactory10: double readDataSize(org.jdom.Element)>(r0);

        $z10 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z10 != 0 goto label30;

        virtualinvoke r44.<thredds.catalog.ThreddsMetadata: void setDataSize(double)>($d0);

     label30:
        return;
    }

    protected thredds.catalog.ThreddsMetadata$Variable readVariable(org.jdom.Element)
    {
        thredds.catalog.ThreddsMetadata$Variable $r6;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r7;
        org.jdom.Element r0;

        r7 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: org.jdom.Element;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("name");

        $r2 = virtualinvoke r0.<org.jdom.Element: java.lang.String getText()>();

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("vocabulary_name");

        $r4 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("units");

        $r5 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("vocabulary_id");

        $r6 = new thredds.catalog.ThreddsMetadata$Variable;

        specialinvoke $r6.<thredds.catalog.ThreddsMetadata$Variable: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    protected thredds.catalog.ThreddsMetadata$Variables readVariables(thredds.catalog.InvCatalog, thredds.catalog.InvDataset, org.jdom.Element)
    {
        thredds.catalog.ThreddsMetadata$Variables $r54;
        org.jdom.Namespace $r2, $r6, $r22, $r48, $r52;
        java.net.URI r47, r51;
        thredds.catalog.InvCatalogFactory $r15, $r29, $r39;
        boolean $z0, $z1;
        thredds.catalog.InvDataset r17;
        thredds.catalog.InvCatalog r24;
        java.lang.Exception $r27, $r37;
        java.util.List $r7, $r49;
        java.lang.StringBuilder $r14, $r16, $r19, $r20, $r28, $r30, $r31, $r32, $r34, $r35, $r38, $r40, $r41, $r42, $r44, $r45;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r4;
        int $i0;
        java.lang.String $r1, $r3, $r18, $r21, $r23, $r33, $r36, $r43, $r46, r50;
        org.slf4j.Logger $r26;
        java.util.Iterator $r8, $r55;
        thredds.catalog.ThreddsMetadata$Variable $r11, $r13;
        java.io.IOException $r25;
        java.lang.Object $r9, $r12;
        org.jdom.Element r0, $r5, r10, $r53, r56;

        r4 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r24 := @parameter0: thredds.catalog.InvCatalog;

        r17 := @parameter1: thredds.catalog.InvDataset;

        r0 := @parameter2: org.jdom.Element;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String)>("vocabulary");

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r3 = virtualinvoke r0.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("href", $r2);

        r47 = null;

        if $r3 == null goto label05;

     label02:
        r47 = virtualinvoke r24.<thredds.catalog.InvCatalog: java.net.URI resolveUri(java.lang.String)>($r3);

     label03:
        goto label05;

     label04:
        $r37 := @caughtexception;

        $r39 = r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Invalid Variables vocabulary URI = ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r43 = virtualinvoke $r37.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r46);

     label05:
        $r48 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r49 = virtualinvoke r0.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variable", $r48);

        r50 = null;

        r51 = null;

        $r52 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r53 = virtualinvoke r0.<org.jdom.Element: org.jdom.Element getChild(java.lang.String,org.jdom.Namespace)>("variableMap", $r52);

        if $r53 == null goto label09;

        $r22 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        $r23 = virtualinvoke $r53.<org.jdom.Element: java.lang.String getAttributeValue(java.lang.String,org.jdom.Namespace)>("href", $r22);

        r50 = $r23;

     label06:
        r51 = virtualinvoke r24.<thredds.catalog.InvCatalog: java.net.URI resolveUri(java.lang.String)>($r23);

     label07:
        goto label09;

     label08:
        $r27 := @caughtexception;

        $r29 = r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Invalid Variables map URI = ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r33 = virtualinvoke $r27.<java.lang.Exception: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r29.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r36);

     label09:
        if r51 == null goto label10;

        $i0 = interfaceinvoke $r49.<java.util.List: int size()>();

        if $i0 <= 0 goto label10;

        $r15 = r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.InvCatalogFactory factory>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ** Catalog error: cant have variableMap and variable in same element (dataset = ");

        $r18 = virtualinvoke r17.<thredds.catalog.InvDataset: java.lang.String getName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<thredds.catalog.InvCatalogFactory: void appendErr(java.lang.String)>($r21);

        r51 = null;

     label10:
        $r54 = new thredds.catalog.ThreddsMetadata$Variables;

        specialinvoke $r54.<thredds.catalog.ThreddsMetadata$Variables: void <init>(java.lang.String,java.lang.String,java.net.URI,java.lang.String,java.net.URI)>($r1, $r3, r47, r50, r51);

        $r55 = interfaceinvoke $r49.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z1 = interfaceinvoke $r55.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r12 = interfaceinvoke $r55.<java.util.Iterator: java.lang.Object next()>();

        r56 = (org.jdom.Element) $r12;

        $r13 = virtualinvoke r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Variable readVariable(org.jdom.Element)>(r56);

        virtualinvoke $r54.<thredds.catalog.ThreddsMetadata$Variables: void addVariable(thredds.catalog.ThreddsMetadata$Variable)>($r13);

        goto label11;

     label12:
        if r51 == null goto label17;

     label13:
        $r5 = specialinvoke r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element readContentFromURL(java.net.URI)>(r51);

        $r6 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        $r7 = virtualinvoke $r5.<org.jdom.Element: java.util.List getChildren(java.lang.String,org.jdom.Namespace)>("variable", $r6);

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.jdom.Element) $r9;

        $r11 = virtualinvoke r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: thredds.catalog.ThreddsMetadata$Variable readVariable(org.jdom.Element)>(r10);

        virtualinvoke $r54.<thredds.catalog.ThreddsMetadata$Variables: void addVariable(thredds.catalog.ThreddsMetadata$Variable)>($r11);

        goto label14;

     label15:
        goto label17;

     label16:
        $r25 := @caughtexception;

        $r26 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Failure reading vaiable mapUri ", $r25);

     label17:
        return $r54;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.io.IOException from label13 to label15 with label16;
    }

    public void writeXML(thredds.catalog.InvCatalogImpl, java.io.OutputStream, boolean) throws java.io.IOException
    {
        java.io.OutputStream r2;
        thredds.catalog.InvCatalogImpl r1;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        boolean z0;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.InvCatalogImpl;

        r2 := @parameter1: java.io.OutputStream;

        z0 := @parameter2: boolean;

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw> = z0;

        virtualinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeXML(thredds.catalog.InvCatalogImpl,java.io.OutputStream)>(r1, r2);

        r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw> = 0;

        return;
    }

    public void writeXML(thredds.catalog.InvCatalogImpl, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r5;
        org.jdom.Document $r4;
        thredds.catalog.InvCatalogImpl r3;
        org.jdom.output.Format $r1;
        org.jdom.output.XMLOutputter $r0;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r2;

        r2 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r3 := @parameter0: thredds.catalog.InvCatalogImpl;

        r5 := @parameter1: java.io.OutputStream;

        $r0 = new org.jdom.output.XMLOutputter;

        $r1 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>();

        specialinvoke $r0.<org.jdom.output.XMLOutputter: void <init>(org.jdom.output.Format)>($r1);

        $r4 = virtualinvoke r2.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Document writeCatalog(thredds.catalog.InvCatalogImpl)>(r3);

        virtualinvoke $r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.OutputStream)>($r4, r5);

        return;
    }

    public org.jdom.Document writeCatalog(thredds.catalog.InvCatalogImpl)
    {
        thredds.catalog.InvCatalogRef $r17;
        org.jdom.Document $r2;
        thredds.catalog.InvDatasetScan $r19;
        org.jdom.Namespace $r1, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        thredds.catalog.InvProperty r33, r34;
        java.util.List $r9, $r11, $r13, $r23;
        thredds.catalog.InvCatalogImpl r3;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        ucar.nc2.units.DateType $r8, $r29;
        java.lang.String $r4, $r6, $r30, $r31;
        java.util.Iterator $r10, $r12, $r14, $r24;
        thredds.catalog.InvService r32;
        java.lang.Object $r15, $r21, $r25, $r27;
        org.jdom.Element $r0, $r16, $r18, $r20, $r22, $r26, $r28;
        thredds.catalog.InvDatasetImpl r35;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r3 := @parameter0: thredds.catalog.InvCatalogImpl;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("catalog", $r1);

        $r2 = new org.jdom.Document;

        specialinvoke $r2.<org.jdom.Document: void <init>(org.jdom.Element)>($r0);

        $r4 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: java.lang.String getName()>();

        if $r4 == null goto label01;

        $r31 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: java.lang.String getName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r31);

     label01:
        $r6 = r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.lang.String version>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("version", $r6);

        $r7 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: void addNamespaceDeclaration(org.jdom.Namespace)>($r7);

        $r8 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: ucar.nc2.units.DateType getExpires()>();

        if $r8 == null goto label02;

        $r29 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: ucar.nc2.units.DateType getExpires()>();

        $r30 = virtualinvoke $r29.<ucar.nc2.units.DateType: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("expires", $r30);

     label02:
        $r9 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: java.util.List getServices()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z5 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label04;

        $r27 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r32 = (thredds.catalog.InvService) $r27;

        $r28 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeService(thredds.catalog.InvService)>(r32);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r28);

        goto label03;

     label04:
        $z0 = r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw>;

        if $z0 == 0 goto label06;

        $r23 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: java.util.List getDatasetRoots()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z4 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r33 = (thredds.catalog.InvProperty) $r25;

        $r26 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetRoot(thredds.catalog.InvProperty)>(r33);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r26);

        goto label05;

     label06:
        $r11 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: java.util.List getProperties()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z6 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label08;

        $r21 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r34 = (thredds.catalog.InvProperty) $r21;

        $r22 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeProperty(thredds.catalog.InvProperty)>(r34);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r22);

        goto label07;

     label08:
        $r13 = virtualinvoke r3.<thredds.catalog.InvCatalogImpl: java.util.List getDatasets()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r35 = (thredds.catalog.InvDatasetImpl) $r15;

        $z2 = r35 instanceof thredds.catalog.InvDatasetScan;

        if $z2 == 0 goto label10;

        $r19 = (thredds.catalog.InvDatasetScan) r35;

        $r20 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScan(thredds.catalog.InvDatasetScan)>($r19);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r20);

        goto label12;

     label10:
        $z3 = r35 instanceof thredds.catalog.InvCatalogRef;

        if $z3 == 0 goto label11;

        $r17 = (thredds.catalog.InvCatalogRef) r35;

        $r18 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeCatalogRef(thredds.catalog.InvCatalogRef)>($r17);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r18);

        goto label12;

     label11:
        $r16 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDataset(thredds.catalog.InvDatasetImpl)>(r35);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r16);

     label12:
        goto label09;

     label13:
        return $r2;
    }

    private org.jdom.Element writeAccess(thredds.catalog.InvAccessImpl)
    {
        thredds.catalog.DataFormatType $r5, $r8;
        thredds.catalog.InvAccessImpl r2;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r4, $r9, $r10;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r6;
        org.jdom.Element $r0, $r7;
        boolean $z0;
        double $d0;

        r6 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvAccessImpl;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("access", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: java.lang.String getUrlPath()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("urlPath", $r3);

        $r4 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: java.lang.String getServiceName()>();

        if $r4 == null goto label1;

        $r10 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: java.lang.String getServiceName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("serviceName", $r10);

     label1:
        $r5 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: thredds.catalog.DataFormatType getDataFormatType()>();

        if $r5 == null goto label2;

        $r8 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: thredds.catalog.DataFormatType getDataFormatType()>();

        $r9 = virtualinvoke $r8.<thredds.catalog.DataFormatType: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("dataFormat", $r9);

     label2:
        $z0 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: boolean hasDataSize()>();

        if $z0 == 0 goto label3;

        $d0 = virtualinvoke r2.<thredds.catalog.InvAccessImpl: double getDataSize()>();

        $r7 = specialinvoke r6.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDataSize(double)>($d0);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

     label3:
        return $r0;
    }

    private org.jdom.Element writeCatalogRef(thredds.catalog.InvCatalogRef)
    {
        thredds.catalog.InvCatalogRef r2;
        org.jdom.Namespace $r1, $r4, $r6;
        java.lang.String $r3, $r5, $r7, $r8, $r9, $r10, $r12;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r11;
        org.jdom.Element $r0;

        r11 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvCatalogRef;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("catalogRef", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getXlinkHref()>();

        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("href", $r3, $r4);

        $r5 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getName()>();

        if $r5 != null goto label1;

        $r12 = "";

        goto label2;

     label1:
        $r12 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getName()>();

     label2:
        $r6 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("title", $r12, $r6);

        $r7 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getID()>();

        if $r7 == null goto label3;

        $r10 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getID()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("ID", $r10);

     label3:
        $r8 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getRestrictAccess()>();

        if $r8 == null goto label4;

        $r9 = virtualinvoke r2.<thredds.catalog.InvCatalogRef: java.lang.String getRestrictAccess()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("restrictAccess", $r9);

     label4:
        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", "");

        return $r0;
    }

    protected org.jdom.Element writeContributor(thredds.catalog.ThreddsMetadata$Contributor)
    {
        thredds.catalog.ThreddsMetadata$Contributor r2;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r4, $r5;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r6;
        org.jdom.Element $r0;

        r6 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.ThreddsMetadata$Contributor;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("contributor", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Contributor: java.lang.String getRole()>();

        if $r3 == null goto label1;

        $r5 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Contributor: java.lang.String getRole()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("role", $r5);

     label1:
        $r4 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Contributor: java.lang.String getName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r4);

        return $r0;
    }

    private org.jdom.Element writeControlledVocabulary(thredds.catalog.ThreddsMetadata$Vocab, java.lang.String)
    {
        thredds.catalog.ThreddsMetadata$Vocab r3;
        org.jdom.Namespace $r2;
        java.lang.String r1, $r4, $r5, $r6;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r7;
        org.jdom.Element $r0;

        r7 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r3 := @parameter0: thredds.catalog.ThreddsMetadata$Vocab;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.jdom.Element;

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        $r4 = virtualinvoke r3.<thredds.catalog.ThreddsMetadata$Vocab: java.lang.String getVocabulary()>();

        if $r4 == null goto label1;

        $r6 = virtualinvoke r3.<thredds.catalog.ThreddsMetadata$Vocab: java.lang.String getVocabulary()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("vocabulary", $r6);

     label1:
        $r5 = virtualinvoke r3.<thredds.catalog.ThreddsMetadata$Vocab: java.lang.String getText()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r5);

        return $r0;
    }

    private org.jdom.Element writeDataset(thredds.catalog.InvDatasetImpl)
    {
        org.jdom.Namespace $r1;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        java.lang.String $r5, $r6;
        org.jdom.Element $r0;
        thredds.catalog.InvDatasetImpl r2;
        thredds.catalog.InvDatasetImplProxy $r4;
        boolean $z0, $z1;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvDatasetImpl;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("dataset", $r1);

        $z0 = r2 instanceof thredds.catalog.InvDatasetImplProxy;

        if $z0 == 0 goto label1;

        $r4 = (thredds.catalog.InvDatasetImplProxy) r2;

        $r5 = virtualinvoke $r4.<thredds.catalog.InvDatasetImplProxy: java.lang.String getAliasName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r5);

        $r6 = virtualinvoke r2.<thredds.catalog.InvDatasetImpl: java.lang.String getID()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("alias", $r6);

        return $r0;

     label1:
        $z1 = r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw>;

        specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeDatasetInfo(thredds.catalog.InvDatasetImpl,org.jdom.Element,boolean,boolean)>(r2, $r0, 1, $z1);

        return $r0;
    }

    private org.jdom.Element writeDatasetFmrc(thredds.catalog.InvDatasetFmrc)
    {
        thredds.catalog.InvDatasetFmrc r1;
        org.jdom.Namespace $r3;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        java.lang.String $r4, $r5;
        org.jdom.Element $r2, r6;
        boolean $z0, $z1;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.InvDatasetFmrc;

        $z0 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw>;

        if $z0 == 0 goto label2;

        $r2 = new org.jdom.Element;

        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r2.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("datasetFmrc", $r3);

        r6 = $r2;

        $r4 = virtualinvoke r1.<thredds.catalog.InvDatasetFmrc: java.lang.String getName()>();

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r4);

        $r5 = virtualinvoke r1.<thredds.catalog.InvDatasetFmrc: java.lang.String getPath()>();

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("path", $r5);

        $z1 = virtualinvoke r1.<thredds.catalog.InvDatasetFmrc: boolean isRunsOnly()>();

        if $z1 == 0 goto label1;

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("runsOnly", "true");

     label1:
        specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeDatasetInfo(thredds.catalog.InvDatasetImpl,org.jdom.Element,boolean,boolean)>(r1, $r2, 0, 1);

        goto label3;

     label2:
        r6 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeCatalogRef(thredds.catalog.InvCatalogRef)>(r1);

     label3:
        return r6;
    }

    private org.jdom.Element writeDatasetRoot(thredds.catalog.InvProperty)
    {
        thredds.catalog.InvProperty r2;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r4;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        org.jdom.Element $r0;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvProperty;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("datasetRoot", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.InvProperty: java.lang.String getName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("path", $r3);

        $r4 = virtualinvoke r2.<thredds.catalog.InvProperty: java.lang.String getValue()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("location", $r4);

        return $r0;
    }

    private org.jdom.Element writeDatasetScan(thredds.catalog.InvDatasetScan)
    {
        thredds.catalog.InvDatasetScan r1;
        java.util.Map $r29, $r35;
        thredds.crawlabledataset.CrawlableDatasetSorter $r28, $r37;
        org.jdom.Namespace $r3, $r13, $r15, $r17, $r21, $r34, $r44;
        boolean $z0, $z1, $z2, $z3, $z4;
        thredds.catalog.InvProperty $r18;
        thredds.crawlabledataset.CrawlableDatasetLabeler $r25, $r27, $r39;
        java.util.List $r30, $r31, $r32;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r0;
        org.jdom.Comment $r10;
        thredds.crawlabledataset.CrawlableDatasetFilter $r41, $r51;
        java.lang.String $r6, $r9, $r11, $r14, $r16, $r22, $r23, $r24, $r45;
        java.lang.Object $r46, $r47, $r48;
        org.jdom.Element $r2, $r12, $r19, $r20, $r26, $r33, $r36, $r38, $r40, $r42, $r43, $r49, r50;

        r0 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.InvDatasetScan;

        $z0 = r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw>;

        if $z0 == 0 goto label7;

        $r20 = new org.jdom.Element;

        $r21 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r20.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("datasetScan", $r21);

        r50 = $r20;

        specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeDatasetInfo(thredds.catalog.InvDatasetImpl,org.jdom.Element,boolean,boolean)>(r1, $r20, 0, 1);

        $r22 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getPath()>();

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("path", $r22);

        $r23 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getScanLocation()>();

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("location", $r23);

        $r24 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getCrDsClassName()>();

        if $r24 == null goto label1;

        $r43 = new org.jdom.Element;

        $r44 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r43.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("crawlableDatasetImpl", $r44);

        $r45 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getCrDsClassName()>();

        virtualinvoke $r43.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("className", $r45);

        $r46 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.Object getCrDsConfigObj()>();

        if $r46 == null goto label1;

        $r47 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.Object getCrDsConfigObj()>();

        $z4 = $r47 instanceof org.jdom.Element;

        if $z4 == 0 goto label1;

        $r48 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.Object getCrDsConfigObj()>();

        $r49 = (org.jdom.Element) $r48;

        virtualinvoke $r43.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r49);

     label1:
        $r51 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetFilter getFilter()>();

        if $r51 == null goto label2;

        $r41 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetFilter getFilter()>();

        $r42 = virtualinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanFilter(thredds.crawlabledataset.CrawlableDatasetFilter)>($r41);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r42);

     label2:
        $r25 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetLabeler getIdentifier()>();

        $r26 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanIdentifier(thredds.crawlabledataset.CrawlableDatasetLabeler)>($r25);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r26);

        $r27 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetLabeler getNamer()>();

        if $r27 == null goto label3;

        $r39 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetLabeler getNamer()>();

        $r40 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanNamer(thredds.crawlabledataset.CrawlableDatasetLabeler)>($r39);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r40);

     label3:
        $r28 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetSorter getSorter()>();

        if $r28 == null goto label4;

        $r37 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: thredds.crawlabledataset.CrawlableDatasetSorter getSorter()>();

        $r38 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanSorter(thredds.crawlabledataset.CrawlableDatasetSorter)>($r37);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r38);

     label4:
        $r29 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.util.Map getProxyDatasetHandlers()>();

        $z2 = interfaceinvoke $r29.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $r35 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.util.Map getProxyDatasetHandlers()>();

        $r36 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanAddProxies(java.util.Map)>($r35);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r36);

     label5:
        $z3 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: boolean getAddDatasetSize()>();

        if $z3 == 0 goto label6;

        $r33 = new org.jdom.Element;

        $r34 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r33.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("addDatasetSize", $r34);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r33);

     label6:
        $r30 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.util.List getChildEnhancerList()>();

        if $r30 == null goto label9;

        $r31 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.util.List getChildEnhancerList()>();

        $r32 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: java.util.List writeDatasetScanEnhancer(java.util.List)>($r31);

        virtualinvoke $r20.<org.jdom.Element: org.jdom.Element addContent(java.util.Collection)>($r32);

        goto label9;

     label7:
        $z1 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: boolean isValid()>();

        if $z1 == 0 goto label8;

        $r12 = new org.jdom.Element;

        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r12.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("catalogRef", $r13);

        r50 = $r12;

        specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeDatasetInfo(thredds.catalog.InvDatasetImpl,org.jdom.Element,boolean,boolean)>(r1, $r12, 0, 0);

        $r14 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getXlinkHref()>();

        $r15 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("href", $r14, $r15);

        $r16 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getName()>();

        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("title", $r16, $r17);

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", "");

        $r18 = new thredds.catalog.InvProperty;

        specialinvoke $r18.<thredds.catalog.InvProperty: void <init>(java.lang.String,java.lang.String)>("DatasetScan", "true");

        $r19 = specialinvoke r0.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeProperty(thredds.catalog.InvProperty)>($r18);

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r19);

        goto label9;

     label8:
        $r2 = new org.jdom.Element;

        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r2.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("dataset", $r3);

        r50 = $r2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("** Misconfigured DatasetScan <");

        $r6 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getPath()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> **");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r9);

        $r10 = new org.jdom.Comment;

        $r11 = virtualinvoke r1.<thredds.catalog.InvDatasetScan: java.lang.String getInvalidMessage()>();

        specialinvoke $r10.<org.jdom.Comment: void <init>(java.lang.String)>($r11);

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r10);

     label9:
        return r50;
    }

    org.jdom.Element writeDatasetScanFilter(thredds.crawlabledataset.CrawlableDatasetFilter)
    {
        thredds.crawlabledataset.filter.LastModifiedLimitFilter $r25;
        thredds.crawlabledataset.filter.RegExpMatchOnNameFilter $r29;
        org.jdom.Namespace $r1, $r15, $r38;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        thredds.crawlabledataset.filter.MultiSelectorFilter$Selector r13;
        java.util.List $r10;
        java.lang.StringBuilder $r18, $r19, $r22, $r23;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r4;
        org.jdom.Comment $r17;
        long $l0;
        thredds.crawlabledataset.CrawlableDatasetFilter r2, $r16;
        java.lang.String $r6, $r21, $r24, $r26, $r30, $r34, $r40, $r41, $r42, $r43, $r44, $r45;
        java.util.Iterator $r11;
        thredds.crawlabledataset.filter.WildcardMatchOnNameFilter $r33;
        java.lang.Class $r3, $r5, $r20;
        java.lang.Object $r7, $r9, $r12;
        org.jdom.Element $r0, $r8, $r14, $r27, $r28, $r31, $r32, $r35, $r36, $r37, r39;

        r4 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.crawlabledataset.CrawlableDatasetFilter;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("filter", $r1);

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Lthredds/crawlabledataset/filter/MultiSelectorFilter;");

        if $z0 == 0 goto label21;

        $r9 = interfaceinvoke r2.<thredds.crawlabledataset.CrawlableDatasetFilter: java.lang.Object getConfigObject()>();

        $r10 = (java.util.List) $r9;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label20;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r13 = (thredds.crawlabledataset.filter.MultiSelectorFilter$Selector) $r12;

        $z2 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isIncluder()>();

        if $z2 == 0 goto label02;

        $r37 = new org.jdom.Element;

        $r38 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r37.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("include", $r38);

        r39 = $r37;

        goto label03;

     label02:
        $r14 = new org.jdom.Element;

        $r15 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("exclude", $r15);

        r39 = $r14;

     label03:
        $r16 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: thredds.crawlabledataset.CrawlableDatasetFilter getFilter()>();

        $z3 = $r16 instanceof thredds.crawlabledataset.filter.WildcardMatchOnNameFilter;

        if $z3 == 0 goto label08;

        $r33 = (thredds.crawlabledataset.filter.WildcardMatchOnNameFilter) $r16;

        $r34 = virtualinvoke $r33.<thredds.crawlabledataset.filter.WildcardMatchOnNameFilter: java.lang.String getWildcardString()>();

        virtualinvoke r39.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("wildcard", $r34);

        $r36 = r39;

        $z10 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isApplyToAtomicDataset()>();

        if $z10 == 0 goto label04;

        $r40 = "true";

        goto label05;

     label04:
        $r40 = "false";

     label05:
        virtualinvoke $r36.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("atomic", $r40);

        $r35 = r39;

        $z11 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isApplyToCollectionDataset()>();

        if $z11 == 0 goto label06;

        $r41 = "true";

        goto label07;

     label06:
        $r41 = "false";

     label07:
        virtualinvoke $r35.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("collection", $r41);

        goto label19;

     label08:
        $z4 = $r16 instanceof thredds.crawlabledataset.filter.RegExpMatchOnNameFilter;

        if $z4 == 0 goto label13;

        $r29 = (thredds.crawlabledataset.filter.RegExpMatchOnNameFilter) $r16;

        $r30 = virtualinvoke $r29.<thredds.crawlabledataset.filter.RegExpMatchOnNameFilter: java.lang.String getRegExpString()>();

        virtualinvoke r39.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("regExp", $r30);

        $r32 = r39;

        $z8 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isApplyToAtomicDataset()>();

        if $z8 == 0 goto label09;

        $r42 = "true";

        goto label10;

     label09:
        $r42 = "false";

     label10:
        virtualinvoke $r32.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("atomic", $r42);

        $r31 = r39;

        $z9 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isApplyToCollectionDataset()>();

        if $z9 == 0 goto label11;

        $r43 = "true";

        goto label12;

     label11:
        $r43 = "false";

     label12:
        virtualinvoke $r31.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("collection", $r43);

        goto label19;

     label13:
        $z5 = $r16 instanceof thredds.crawlabledataset.filter.LastModifiedLimitFilter;

        if $z5 == 0 goto label18;

        $r25 = (thredds.crawlabledataset.filter.LastModifiedLimitFilter) $r16;

        $l0 = virtualinvoke $r25.<thredds.crawlabledataset.filter.LastModifiedLimitFilter: long getLastModifiedLimitInMillis()>();

        $r26 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke r39.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("lastModLimitInMillis", $r26);

        $r28 = r39;

        $z6 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isApplyToAtomicDataset()>();

        if $z6 == 0 goto label14;

        $r44 = "true";

        goto label15;

     label14:
        $r44 = "false";

     label15:
        virtualinvoke $r28.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("atomic", $r44);

        $r27 = r39;

        $z7 = virtualinvoke r13.<thredds.crawlabledataset.filter.MultiSelectorFilter$Selector: boolean isApplyToCollectionDataset()>();

        if $z7 == 0 goto label16;

        $r45 = "true";

        goto label17;

     label16:
        $r45 = "false";

     label17:
        virtualinvoke $r27.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("collection", $r45);

        goto label19;

     label18:
        $r17 = new org.jdom.Comment;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown selector type <");

        $r20 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.jdom.Comment: void <init>(java.lang.String)>($r24);

        virtualinvoke r39.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r17);

     label19:
        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>(r39);

        goto label01;

     label20:
        goto label22;

     label21:
        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = interfaceinvoke r2.<thredds.crawlabledataset.CrawlableDatasetFilter: java.lang.Object getConfigObject()>();

        $r8 = specialinvoke r4.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanUserDefined(java.lang.String,java.lang.String,java.lang.Object)>("crawlableDatasetFilterImpl", $r6, $r7);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r8);

     label22:
        return $r0;
    }

    private org.jdom.Element writeDatasetScanNamer(thredds.crawlabledataset.CrawlableDatasetLabeler)
    {
        org.jdom.Namespace $r2, $r23, $r29;
        boolean $z0, $z1, $z2, $z3;
        thredds.crawlabledataset.CrawlableDatasetLabeler r0, r12;
        java.util.List $r9;
        thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler $r24, $r26;
        thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler $r30, $r32;
        java.lang.StringBuilder $r13, $r14, $r17, $r18;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Comment $r21;
        java.lang.String $r5, $r16, $r19, $r25, $r27, $r31, $r33;
        org.slf4j.Logger $r20;
        java.util.Iterator $r10;
        thredds.crawlabledataset.MultiLabeler $r8;
        java.lang.Class $r4, $r15;
        java.lang.Object $r6, $r11;
        org.jdom.Element $r1, $r7, $r22, $r28, r34;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: thredds.crawlabledataset.CrawlableDatasetLabeler;

        r34 = null;

        if r0 == null goto label7;

        $r1 = new org.jdom.Element;

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r1.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("namer", $r2);

        r34 = $r1;

        $z0 = r0 instanceof thredds.crawlabledataset.MultiLabeler;

        if $z0 == 0 goto label6;

        $r8 = (thredds.crawlabledataset.MultiLabeler) r0;

        $r9 = virtualinvoke $r8.<thredds.crawlabledataset.MultiLabeler: java.util.List getLabelerList()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (thredds.crawlabledataset.CrawlableDatasetLabeler) $r11;

        $z2 = r12 instanceof thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler;

        if $z2 == 0 goto label2;

        $r28 = new org.jdom.Element;

        $r29 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r28.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("regExpOnName", $r29);

        $r30 = (thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler) r12;

        $r31 = virtualinvoke $r30.<thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler: java.lang.String getRegExp()>();

        virtualinvoke $r28.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("regExp", $r31);

        $r32 = (thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler) r12;

        $r33 = virtualinvoke $r32.<thredds.crawlabledataset.RegExpAndReplaceOnNameLabeler: java.lang.String getReplaceString()>();

        virtualinvoke $r28.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("replaceString", $r33);

        virtualinvoke $r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r28);

        goto label4;

     label2:
        $z3 = r12 instanceof thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler;

        if $z3 == 0 goto label3;

        $r22 = new org.jdom.Element;

        $r23 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r22.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("regExpOnPath", $r23);

        $r24 = (thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler) r12;

        $r25 = virtualinvoke $r24.<thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler: java.lang.String getRegExp()>();

        virtualinvoke $r22.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("regExp", $r25);

        $r26 = (thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler) r12;

        $r27 = virtualinvoke $r26.<thredds.crawlabledataset.RegExpAndReplaceOnPathLabeler: java.lang.String getReplaceString()>();

        virtualinvoke $r22.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("replaceString", $r27);

        virtualinvoke $r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r22);

        goto label4;

     label3:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("writeDatasetScanNamer(): unsupported namer <");

        $r15 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r20.<org.slf4j.Logger: void warn(java.lang.String)>($r19);

        $r21 = new org.jdom.Comment;

        specialinvoke $r21.<org.jdom.Comment: void <init>(java.lang.String)>($r19);

        virtualinvoke $r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r21);

     label4:
        goto label1;

     label5:
        goto label7;

     label6:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = interfaceinvoke r0.<thredds.crawlabledataset.CrawlableDatasetLabeler: java.lang.Object getConfigObject()>();

        $r7 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanUserDefined(java.lang.String,java.lang.String,java.lang.Object)>("crawlableDatasetLabelerImpl", $r5, $r6);

        virtualinvoke $r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

     label7:
        return r34;
    }

    private org.jdom.Element writeDatasetScanIdentifier(thredds.crawlabledataset.CrawlableDatasetLabeler)
    {
        thredds.crawlabledataset.CrawlableDatasetLabeler r2;
        org.jdom.Namespace $r1, $r4;
        java.lang.Class $r6;
        java.lang.Object $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        java.lang.String $r7;
        org.jdom.Element $r0, $r3, $r9, r10;
        boolean $z0;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.crawlabledataset.CrawlableDatasetLabeler;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("addID", $r1);

        r10 = $r0;

        if r2 == null goto label2;

        $z0 = r2 instanceof thredds.cataloggen.inserter.SimpleLatestProxyDsHandler;

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        $r3 = new org.jdom.Element;

        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r3.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("addID", $r4);

        r10 = $r3;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = interfaceinvoke r2.<thredds.crawlabledataset.CrawlableDatasetLabeler: java.lang.Object getConfigObject()>();

        $r9 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanUserDefined(java.lang.String,java.lang.String,java.lang.Object)>("crawlableDatasetLabelerImpl", $r7, $r8);

        virtualinvoke $r3.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r9);

     label2:
        return r10;
    }

    private org.jdom.Element writeDatasetScanAddProxies(java.util.Map)
    {
        thredds.cataloggen.inserter.LatestCompleteProxyDsHandler r40;
        java.util.Map r0;
        thredds.cataloggen.inserter.SimpleLatestProxyDsHandler r28, r38;
        org.jdom.Namespace $r11, $r17, $r26, $r30, $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.Set $r34;
        java.lang.StringBuilder $r3, $r5, $r7, $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r27;
        long $l1;
        int $i0;
        java.lang.String $r6, $r9, $r12, $r14, $r15, $r18, $r20, $r22, $r24, $r31, r36, $r39, $r41;
        org.slf4j.Logger $r4;
        thredds.cataloggen.ProxyDatasetHandler r37;
        thredds.catalog.InvService $r13, $r19, $r23;
        java.util.Iterator $r35;
        java.lang.Object $r1, $r2, $r21;
        org.jdom.Element $r10, $r16, $r25, $r29, $r32;

        r27 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r0 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 != 1 goto label04;

        $z4 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>("latest.xml");

        if $z4 == 0 goto label04;

        $r21 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("latest.xml");

        $z5 = $r21 instanceof thredds.cataloggen.inserter.SimpleLatestProxyDsHandler;

        if $z5 == 0 goto label04;

        r28 = (thredds.cataloggen.inserter.SimpleLatestProxyDsHandler) $r21;

        $r22 = virtualinvoke r28.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: java.lang.String getProxyDatasetName()>();

        $z6 = virtualinvoke r28.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: boolean isLocateAtTopOrBottom()>();

        $r23 = virtualinvoke r28.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: thredds.catalog.InvService getProxyDatasetService(thredds.crawlabledataset.CrawlableDataset)>(null);

        $r24 = virtualinvoke $r23.<thredds.catalog.InvService: java.lang.String getName()>();

        $r25 = new org.jdom.Element;

        $r26 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r25.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("addLatest", $r26);

        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("latest.xml");

        if $z7 == 0 goto label01;

        if $z6 == 0 goto label01;

        $z8 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("latest");

        if $z8 == 0 goto label01;

        return $r25;

     label01:
        $r29 = new org.jdom.Element;

        $r30 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r29.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("simpleLatest", $r30);

        virtualinvoke $r29.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r22);

        if $z6 == 0 goto label02;

        $r31 = "true";

        goto label03;

     label02:
        $r31 = "false";

     label03:
        virtualinvoke $r29.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("top", $r31);

        virtualinvoke $r29.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("servicName", $r24);

        virtualinvoke $r25.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r29);

        return $r25;

     label04:
        $r32 = new org.jdom.Element;

        $r33 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r32.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("addProxies", $r33);

        $r34 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $r35 = interfaceinvoke $r34.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z9 = interfaceinvoke $r35.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label13;

        $r1 = interfaceinvoke $r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (java.lang.String) $r1;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r36);

        r37 = (thredds.cataloggen.ProxyDatasetHandler) $r2;

        $z0 = r37 instanceof thredds.cataloggen.inserter.SimpleLatestProxyDsHandler;

        if $z0 == 0 goto label08;

        r38 = (thredds.cataloggen.inserter.SimpleLatestProxyDsHandler) r37;

        $r16 = new org.jdom.Element;

        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r16.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("simpleLatest", $r17);

        $r18 = virtualinvoke r38.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: java.lang.String getProxyDatasetName()>();

        virtualinvoke $r16.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r18);

        $z3 = virtualinvoke r38.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: boolean isLocateAtTopOrBottom()>();

        if $z3 == 0 goto label06;

        $r39 = "true";

        goto label07;

     label06:
        $r39 = "false";

     label07:
        virtualinvoke $r16.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("top", $r39);

        $r19 = virtualinvoke r38.<thredds.cataloggen.inserter.SimpleLatestProxyDsHandler: thredds.catalog.InvService getProxyDatasetService(thredds.crawlabledataset.CrawlableDataset)>(null);

        $r20 = virtualinvoke $r19.<thredds.catalog.InvService: java.lang.String getName()>();

        virtualinvoke $r16.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("servicName", $r20);

        virtualinvoke $r32.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r16);

        goto label12;

     label08:
        $z1 = r37 instanceof thredds.cataloggen.inserter.LatestCompleteProxyDsHandler;

        if $z1 == 0 goto label11;

        r40 = (thredds.cataloggen.inserter.LatestCompleteProxyDsHandler) r37;

        $r10 = new org.jdom.Element;

        $r11 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r10.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("latestComplete", $r11);

        $r12 = virtualinvoke r40.<thredds.cataloggen.inserter.LatestCompleteProxyDsHandler: java.lang.String getProxyDatasetName()>();

        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r12);

        $z2 = virtualinvoke r40.<thredds.cataloggen.inserter.LatestCompleteProxyDsHandler: boolean isLocateAtTopOrBottom()>();

        if $z2 == 0 goto label09;

        $r41 = "true";

        goto label10;

     label09:
        $r41 = "false";

     label10:
        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("top", $r41);

        $r13 = virtualinvoke r40.<thredds.cataloggen.inserter.LatestCompleteProxyDsHandler: thredds.catalog.InvService getProxyDatasetService(thredds.crawlabledataset.CrawlableDataset)>(null);

        $r14 = virtualinvoke $r13.<thredds.catalog.InvService: java.lang.String getName()>();

        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("servicName", $r14);

        $l1 = virtualinvoke r40.<thredds.cataloggen.inserter.LatestCompleteProxyDsHandler: long getLastModifiedLimit()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("lastModifiedLimit", $r15);

        virtualinvoke $r32.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r10);

        goto label12;

     label11:
        $r4 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("writeDatasetScanAddProxies(): unknown type of ProxyDatasetHandler <");

        $r6 = interfaceinvoke r37.<thredds.cataloggen.ProxyDatasetHandler: java.lang.String getProxyDatasetName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.slf4j.Logger: void warn(java.lang.String)>($r9);

     label12:
        goto label05;

     label13:
        return $r32;
    }

    private org.jdom.Element writeDatasetScanSorter(thredds.crawlabledataset.CrawlableDatasetSorter)
    {
        thredds.crawlabledataset.sorter.LexigraphicByNameSorter $r10;
        thredds.crawlabledataset.CrawlableDatasetSorter r2;
        org.jdom.Namespace $r1, $r9;
        java.lang.Class $r4;
        java.lang.Object $r6;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        java.lang.String $r5, $r11;
        org.jdom.Element $r0, $r7, $r8;
        boolean $z0, $z1;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.crawlabledataset.CrawlableDatasetSorter;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("sort", $r1);

        $z0 = r2 instanceof thredds.crawlabledataset.sorter.LexigraphicByNameSorter;

        if $z0 == 0 goto label3;

        $r8 = new org.jdom.Element;

        $r9 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r8.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("lexigraphicByName", $r9);

        $r10 = (thredds.crawlabledataset.sorter.LexigraphicByNameSorter) r2;

        $z1 = virtualinvoke $r10.<thredds.crawlabledataset.sorter.LexigraphicByNameSorter: boolean isIncreasing()>();

        if $z1 == 0 goto label1;

        $r11 = "true";

        goto label2;

     label1:
        $r11 = "false";

     label2:
        virtualinvoke $r8.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("increasing", $r11);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r8);

        goto label4;

     label3:
        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = interfaceinvoke r2.<thredds.crawlabledataset.CrawlableDatasetSorter: java.lang.Object getConfigObject()>();

        $r7 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanUserDefined(java.lang.String,java.lang.String,java.lang.Object)>("crawlableDatasetSorterImpl", $r5, $r6);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

     label4:
        return $r0;
    }

    private java.util.List writeDatasetScanEnhancer(java.util.List)
    {
        java.util.ArrayList $r0;
        int i0;
        org.jdom.Namespace $r11;
        java.lang.String $r7, $r13, $r14, $r15;
        boolean $z0, $z1;
        org.slf4j.Logger $r16;
        java.util.Iterator $r2;
        thredds.cataloggen.DatasetEnhancer r4;
        java.util.List r1;
        java.lang.Object $r3, $r8;
        java.lang.Class $r6;
        thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer r12;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        org.jdom.Element $r9, $r10;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i0 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (thredds.cataloggen.DatasetEnhancer) $r3;

        $z0 = r4 instanceof thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer;

        if $z0 == 0 goto label3;

        if i0 <= 0 goto label2;

        $r16 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger>;

        interfaceinvoke $r16.<org.slf4j.Logger: void warn(java.lang.String)>("writeDatasetScanEnhancer(): More than one addTimeCoverage element, skipping.");

        goto label1;

     label2:
        i0 = i0 + 1;

        $r10 = new org.jdom.Element;

        $r11 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r10.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("addTimeCoverage", $r11);

        r12 = (thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer) r4;

        $r13 = virtualinvoke r12.<thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer: java.lang.String getMatchPattern()>();

        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("datasetNameMatchPattern", $r13);

        $r14 = virtualinvoke r12.<thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer: java.lang.String getSubstitutionPattern()>();

        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("startTimeSubstitutionPattern", $r14);

        $r15 = virtualinvoke r12.<thredds.cataloggen.datasetenhancer.RegExpAndDurationTimeCoverageEnhancer: java.lang.String getDuration()>();

        virtualinvoke $r10.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("duration", $r15);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label4;

     label3:
        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = interfaceinvoke r4.<thredds.cataloggen.DatasetEnhancer: java.lang.Object getConfigObject()>();

        $r9 = specialinvoke r5.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScanUserDefined(java.lang.String,java.lang.String,java.lang.Object)>("datasetEnhancerImpl", $r7, $r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        goto label1;

     label5:
        return $r0;
    }

    private org.jdom.Element writeDatasetScanUserDefined(java.lang.String, java.lang.String, java.lang.Object)
    {
        org.jdom.Comment $r5;
        org.jdom.Namespace $r2;
        java.lang.String r1, r3, $r11, $r14;
        boolean $z0;
        java.lang.Object r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r12, $r13;
        java.lang.Class $r10;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r16;
        org.jdom.Element $r0, $r15;

        r16 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Object;

        $r0 = new org.jdom.Element;

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("className", r3);

        if r4 == null goto label2;

        $z0 = r4 instanceof org.jdom.Element;

        if $z0 == 0 goto label1;

        $r15 = (org.jdom.Element) r4;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r15);

        goto label2;

     label1:
        $r5 = new org.jdom.Comment;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This class <");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not yet supported. This XML is missing configuration information (of type ");

        $r10 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.jdom.Comment: void <init>(java.lang.String)>($r14);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r5);

     label2:
        return $r0;
    }

    private void writeDatasetInfo(thredds.catalog.InvDatasetImpl, org.jdom.Element, boolean, boolean)
    {
        thredds.catalog.InvCatalogRef $r19;
        thredds.catalog.InvDatasetScan $r23;
        thredds.catalog.CollectionType $r3, $r35, $r36, $r37;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        thredds.catalog.InvAccessImpl r40;
        java.util.List $r7, $r12, $r14;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r9;
        thredds.catalog.InvDatasetFmrc $r21;
        java.lang.String $r2, $r4, $r5, $r6, $r32, $r33, $r34, $r38;
        java.util.Iterator $r8, $r13, $r15;
        thredds.catalog.InvService r39;
        thredds.catalog.ThreddsMetadata $r10, $r11;
        java.lang.Object $r16, $r27, $r28, $r30;
        org.jdom.Element r0, $r18, $r20, $r22, $r24, $r25, $r26, $r29, $r31, r41;
        thredds.catalog.InvDatasetImpl r1, r17;

        r9 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: thredds.catalog.InvDatasetImpl;

        r0 := @parameter1: org.jdom.Element;

        z2 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r2 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getName()>();

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r2);

        $r3 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: thredds.catalog.CollectionType getCollectionType()>();

        if $r3 == null goto label01;

        $r35 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: thredds.catalog.CollectionType getCollectionType()>();

        $r36 = <thredds.catalog.CollectionType: thredds.catalog.CollectionType NONE>;

        if $r35 == $r36 goto label01;

        $r37 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: thredds.catalog.CollectionType getCollectionType()>();

        $r38 = virtualinvoke $r37.<thredds.catalog.CollectionType: java.lang.String toString()>();

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("collectionType", $r38);

     label01:
        $z7 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: boolean isHarvest()>();

        if $z7 == 0 goto label02;

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("harvest", "true");

     label02:
        $r4 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getID()>();

        if $r4 == null goto label03;

        $r34 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getID()>();

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("ID", $r34);

     label03:
        $r5 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getUrlPath()>();

        if $r5 == null goto label04;

        $r33 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getUrlPath()>();

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("urlPath", $r33);

     label04:
        $r6 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getRestrictAccess()>();

        if $r6 == null goto label05;

        $r32 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.lang.String getRestrictAccess()>();

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("restrictAccess", $r32);

     label05:
        $r7 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.util.List getServicesLocal()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z8 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label07;

        $r30 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r39 = (thredds.catalog.InvService) $r30;

        $r31 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeService(thredds.catalog.InvService)>(r39);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r31);

        goto label06;

     label07:
        $r10 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: thredds.catalog.ThreddsMetadata getLocalMetadata()>();

        virtualinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeThreddsMetadata(org.jdom.Element,thredds.catalog.ThreddsMetadata)>(r0, $r10);

        $r11 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: thredds.catalog.ThreddsMetadata getLocalMetadataInheritable()>();

        virtualinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeInheritedMetadata(org.jdom.Element,thredds.catalog.ThreddsMetadata)>(r0, $r11);

        $r12 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.util.List getAccessLocal()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r28 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r40 = (thredds.catalog.InvAccessImpl) $r28;

        $r29 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeAccess(thredds.catalog.InvAccessImpl)>(r40);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r29);

        goto label08;

     label09:
        if z1 == 0 goto label10;

        $r25 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: org.jdom.Element getNcmlElement()>();

        if $r25 == null goto label10;

        $r26 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: org.jdom.Element getNcmlElement()>();

        $r27 = virtualinvoke $r26.<org.jdom.Element: java.lang.Object clone()>();

        r41 = (org.jdom.Element) $r27;

        virtualinvoke r41.<org.jdom.Element: org.jdom.Content detach()>();

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>(r41);

     label10:
        if z2 != 0 goto label11;

        return;

     label11:
        $r14 = virtualinvoke r1.<thredds.catalog.InvDatasetImpl: java.util.List getDatasets()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label17;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (thredds.catalog.InvDatasetImpl) $r16;

        $z4 = r17 instanceof thredds.catalog.InvDatasetScan;

        if $z4 == 0 goto label13;

        $r23 = (thredds.catalog.InvDatasetScan) r17;

        $r24 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetScan(thredds.catalog.InvDatasetScan)>($r23);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r24);

        goto label16;

     label13:
        $z5 = r17 instanceof thredds.catalog.InvDatasetFmrc;

        if $z5 == 0 goto label14;

        $r21 = (thredds.catalog.InvDatasetFmrc) r17;

        $r22 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetFmrc(thredds.catalog.InvDatasetFmrc)>($r21);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r22);

        goto label16;

     label14:
        $z6 = r17 instanceof thredds.catalog.InvCatalogRef;

        if $z6 == 0 goto label15;

        $r19 = (thredds.catalog.InvCatalogRef) r17;

        $r20 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeCatalogRef(thredds.catalog.InvCatalogRef)>($r19);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r20);

        goto label16;

     label15:
        $r18 = specialinvoke r9.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDataset(thredds.catalog.InvDatasetImpl)>(r17);

        virtualinvoke r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r18);

     label16:
        goto label12;

     label17:
        return;
    }

    protected org.jdom.Element writeDate(java.lang.String, ucar.nc2.units.DateType)
    {
        org.jdom.Namespace $r2;
        java.lang.String r1, $r4, $r5, $r6, $r7, $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r9;
        org.jdom.Element $r0;
        ucar.nc2.units.DateType r3;

        r9 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: ucar.nc2.units.DateType;

        $r0 = new org.jdom.Element;

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        $r4 = virtualinvoke r3.<ucar.nc2.units.DateType: java.lang.String getText()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r4);

        $r5 = virtualinvoke r3.<ucar.nc2.units.DateType: java.lang.String getType()>();

        if $r5 == null goto label1;

        $r8 = virtualinvoke r3.<ucar.nc2.units.DateType: java.lang.String getType()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("type", $r8);

     label1:
        $r6 = virtualinvoke r3.<ucar.nc2.units.DateType: java.lang.String getFormat()>();

        if $r6 == null goto label2;

        $r7 = virtualinvoke r3.<ucar.nc2.units.DateType: java.lang.String getFormat()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("format", $r7);

     label2:
        return $r0;
    }

    private org.jdom.Element writeDocumentation(thredds.catalog.InvDocumentation, java.lang.String)
    {
        thredds.catalog.InvDocumentation r3;
        org.jdom.Namespace $r2, $r6, $r11;
        java.lang.String r1, $r4, $r5, $r7, $r9, $r10, $r12, $r14;
        java.net.URI $r8;
        boolean $z0, $z1;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r13;
        org.jdom.Element $r0;

        r13 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r3 := @parameter0: thredds.catalog.InvDocumentation;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.jdom.Element;

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        $r4 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.lang.String getType()>();

        if $r4 == null goto label1;

        $r12 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.lang.String getType()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("type", $r12);

     label1:
        $z0 = virtualinvoke r3.<thredds.catalog.InvDocumentation: boolean hasXlink()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.lang.String getXlinkHref()>();

        $r6 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("href", $r5, $r6);

        $r7 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.lang.String getXlinkTitle()>();

        $r8 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.net.URI getURI()>();

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label2;

        $r10 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.lang.String getXlinkTitle()>();

        $r11 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("title", $r10, $r11);

     label2:
        $r14 = virtualinvoke r3.<thredds.catalog.InvDocumentation: java.lang.String getInlineContent()>();

        if $r14 == null goto label3;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r14);

     label3:
        return $r0;
    }

    public org.jdom.Element writeGeospatialCoverage(thredds.catalog.ThreddsMetadata$GeospatialCoverage)
    {
        org.jdom.Namespace $r1, $r14, $r17, $r20;
        java.lang.String $r3, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        thredds.catalog.ThreddsMetadata$Vocab $r8, r10;
        java.util.Iterator $r23;
        thredds.catalog.ThreddsMetadata$GeospatialCoverage r2;
        java.util.List $r7;
        thredds.catalog.ThreddsMetadata$Range $r4, $r5, $r6, $r15, $r18, $r21;
        java.lang.Object $r9;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r11;
        org.jdom.Element $r0, $r12, $r13, $r16, $r19;

        r11 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.ThreddsMetadata$GeospatialCoverage;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("geospatialCoverage", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: java.lang.String getZPositive()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("down");

        if $z0 == 0 goto label1;

        $r22 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: java.lang.String getZPositive()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("zpositive", $r22);

     label1:
        $r4 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: thredds.catalog.ThreddsMetadata$Range getNorthSouthRange()>();

        if $r4 == null goto label2;

        $r19 = new org.jdom.Element;

        $r20 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r19.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("northsouth", $r20);

        $r21 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: thredds.catalog.ThreddsMetadata$Range getNorthSouthRange()>();

        specialinvoke r11.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeGeospatialRange(org.jdom.Element,org.jdom.Element,thredds.catalog.ThreddsMetadata$Range)>($r0, $r19, $r21);

     label2:
        $r5 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: thredds.catalog.ThreddsMetadata$Range getEastWestRange()>();

        if $r5 == null goto label3;

        $r16 = new org.jdom.Element;

        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r16.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("eastwest", $r17);

        $r18 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: thredds.catalog.ThreddsMetadata$Range getEastWestRange()>();

        specialinvoke r11.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeGeospatialRange(org.jdom.Element,org.jdom.Element,thredds.catalog.ThreddsMetadata$Range)>($r0, $r16, $r18);

     label3:
        $r6 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: thredds.catalog.ThreddsMetadata$Range getUpDownRange()>();

        if $r6 == null goto label4;

        $r13 = new org.jdom.Element;

        $r14 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r13.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("updown", $r14);

        $r15 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: thredds.catalog.ThreddsMetadata$Range getUpDownRange()>();

        specialinvoke r11.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeGeospatialRange(org.jdom.Element,org.jdom.Element,thredds.catalog.ThreddsMetadata$Range)>($r0, $r13, $r15);

     label4:
        $r7 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: java.util.List getNames()>();

        $r8 = new thredds.catalog.ThreddsMetadata$Vocab;

        specialinvoke $r8.<thredds.catalog.ThreddsMetadata$Vocab: void <init>(java.lang.String,java.lang.String)>("global", null);

        $z1 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: boolean isGlobal()>();

        if $z1 == 0 goto label5;

        $z4 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>($r8);

        if $z4 != 0 goto label5;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label6;

     label5:
        $z2 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: boolean isGlobal()>();

        if $z2 != 0 goto label6;

        $z3 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>($r8);

        if $z3 == 0 goto label6;

        interfaceinvoke $r7.<java.util.List: boolean remove(java.lang.Object)>($r8);

     label6:
        $r23 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z5 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label8;

        $r9 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r10 = (thredds.catalog.ThreddsMetadata$Vocab) $r9;

        $r12 = specialinvoke r11.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeControlledVocabulary(thredds.catalog.ThreddsMetadata$Vocab,java.lang.String)>(r10, "name");

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r12);

        goto label7;

     label8:
        return $r0;
    }

    private void writeGeospatialRange(org.jdom.Element, org.jdom.Element, thredds.catalog.ThreddsMetadata$Range)
    {
        org.jdom.Namespace $r3, $r7, $r13, $r17;
        java.lang.String $r4, $r8, $r10, $r14, $r18;
        double $d0, $d1, $d2;
        boolean $z0;
        thredds.catalog.ThreddsMetadata$Range r0;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r20;
        org.jdom.Element r1, $r2, $r5, $r6, $r9, r11, $r12, $r15, $r16, $r19;

        r20 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r11 := @parameter0: org.jdom.Element;

        r1 := @parameter1: org.jdom.Element;

        r0 := @parameter2: thredds.catalog.ThreddsMetadata$Range;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = new org.jdom.Element;

        $r3 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r2.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("start", $r3);

        $d0 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Range: double getStart()>();

        $r4 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r5 = virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r4);

        virtualinvoke r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r5);

        $r6 = new org.jdom.Element;

        $r7 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r6.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("size", $r7);

        $d1 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Range: double getSize()>();

        $r8 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d1);

        $r9 = virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r8);

        virtualinvoke r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r9);

        $z0 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Range: boolean hasResolution()>();

        if $z0 == 0 goto label2;

        $r16 = new org.jdom.Element;

        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r16.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("resolution", $r17);

        $d2 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Range: double getResolution()>();

        $r18 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d2);

        $r19 = virtualinvoke $r16.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r18);

        virtualinvoke r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r19);

     label2:
        $r10 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Range: java.lang.String getUnits()>();

        if $r10 == null goto label3;

        $r12 = new org.jdom.Element;

        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r12.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("units", $r13);

        $r14 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata$Range: java.lang.String getUnits()>();

        $r15 = virtualinvoke $r12.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r14);

        virtualinvoke r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r15);

     label3:
        virtualinvoke r11.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>(r1);

        return;
    }

    private org.jdom.Element writeMetadata(thredds.catalog.InvMetadata)
    {
        thredds.catalog.MetadataConverterIF $r6;
        org.jdom.Namespace $r1, $r21, $r24, $r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r12;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r18;
        java.lang.String $r3, $r4, $r20, $r22, $r23, $r25, $r27;
        thredds.catalog.InvMetadata r2;
        java.util.Iterator $r13;
        thredds.catalog.ThreddsMetadata $r5, $r19;
        java.lang.Object $r7, $r8, $r9, $r10, $r14, $r16;
        org.jdom.Element $r0, r11, r15, $r17;

        r18 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvMetadata;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("metadata", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getMetadataType()>();

        if $r3 == null goto label1;

        $r27 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getMetadataType()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("metadataType", $r27);

     label1:
        $z0 = virtualinvoke r2.<thredds.catalog.InvMetadata: boolean isInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("inherited", "true");

     label2:
        $r4 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getNamespaceURI()>();

        if $r4 == null goto label3;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("http://www.unidata.ucar.edu/namespaces/thredds/InvCatalog/v1.0");

        if $z3 != 0 goto label3;

        $r25 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getNamespacePrefix()>();

        $r26 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>($r25, $r4);

        virtualinvoke $r0.<org.jdom.Element: void addNamespaceDeclaration(org.jdom.Namespace)>($r26);

     label3:
        $z4 = virtualinvoke r2.<thredds.catalog.InvMetadata: boolean hasXlink()>();

        if $z4 == 0 goto label4;

        $r20 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getXlinkHref()>();

        $r21 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("href", $r20, $r21);

        $r22 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getXlinkTitle()>();

        if $r22 == null goto label9;

        $r23 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.String getXlinkTitle()>();

        $r24 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("title", $r23, $r24);

        goto label9;

     label4:
        $r5 = virtualinvoke r2.<thredds.catalog.InvMetadata: thredds.catalog.ThreddsMetadata getThreddsMetadata()>();

        if $r5 == null goto label5;

        $r19 = virtualinvoke r2.<thredds.catalog.InvMetadata: thredds.catalog.ThreddsMetadata getThreddsMetadata()>();

        virtualinvoke r18.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeThreddsMetadata(org.jdom.Element,thredds.catalog.ThreddsMetadata)>($r0, $r19);

        goto label9;

     label5:
        $r6 = virtualinvoke r2.<thredds.catalog.InvMetadata: thredds.catalog.MetadataConverterIF getConverter()>();

        if $r6 == null goto label9;

        $r7 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.Object getContentObject()>();

        if $r7 == null goto label9;

        $r8 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.Object getContentObject()>();

        $z1 = $r8 instanceof org.jdom.Element;

        if $z1 == 0 goto label8;

        $r10 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.Object getContentObject()>();

        r11 = (org.jdom.Element) $r10;

        $r12 = virtualinvoke r11.<org.jdom.Element: java.util.List getChildren()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.jdom.Element) $r14;

        $r16 = virtualinvoke r15.<org.jdom.Element: java.lang.Object clone()>();

        $r17 = (org.jdom.Element) $r16;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r17);

        goto label6;

     label7:
        goto label9;

     label8:
        $r9 = virtualinvoke r2.<thredds.catalog.InvMetadata: java.lang.Object getContentObject()>();

        interfaceinvoke $r6.<thredds.catalog.MetadataConverterIF: void addMetadataContent(org.jdom.Element,java.lang.Object)>($r0, $r9);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Content detach()>();

     label9:
        return $r0;
    }

    private org.jdom.Element writeProperty(thredds.catalog.InvProperty)
    {
        thredds.catalog.InvProperty r2;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r4;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r5;
        org.jdom.Element $r0;

        r5 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvProperty;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("property", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.InvProperty: java.lang.String getName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r3);

        $r4 = virtualinvoke r2.<thredds.catalog.InvProperty: java.lang.String getValue()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("value", $r4);

        return $r0;
    }

    protected org.jdom.Element writeSource(java.lang.String, thredds.catalog.ThreddsMetadata$Source)
    {
        thredds.catalog.ThreddsMetadata$Vocab $r5;
        thredds.catalog.ThreddsMetadata$Source r4;
        org.jdom.Namespace $r2, $r8;
        java.lang.String r1, $r9, $r10, $r11, $r12;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Element $r0, $r6, $r7;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: thredds.catalog.ThreddsMetadata$Source;

        $r0 = new org.jdom.Element;

        $r2 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>(r1, $r2);

        $r5 = virtualinvoke r4.<thredds.catalog.ThreddsMetadata$Source: thredds.catalog.ThreddsMetadata$Vocab getNameVocab()>();

        $r6 = specialinvoke r3.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeControlledVocabulary(thredds.catalog.ThreddsMetadata$Vocab,java.lang.String)>($r5, "name");

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r6);

        $r7 = new org.jdom.Element;

        $r8 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r7.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("contact", $r8);

        $r9 = virtualinvoke r4.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getUrl()>();

        if $r9 == null goto label1;

        $r12 = virtualinvoke r4.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getUrl()>();

        virtualinvoke $r7.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("url", $r12);

     label1:
        $r10 = virtualinvoke r4.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getEmail()>();

        if $r10 == null goto label2;

        $r11 = virtualinvoke r4.<thredds.catalog.ThreddsMetadata$Source: java.lang.String getEmail()>();

        virtualinvoke $r7.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("email", $r11);

     label2:
        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

        return $r0;
    }

    private org.jdom.Element writeService(thredds.catalog.InvService)
    {
        thredds.catalog.ServiceType $r4;
        int $i0;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r5, $r6, $r7, $r20, $r21;
        boolean $z0, $z1, $z2, $z3;
        thredds.catalog.InvProperty r14, r24;
        thredds.catalog.InvService r2, r25;
        java.util.Iterator $r9, $r12, $r23;
        java.util.List $r8, $r11, $r22;
        java.lang.Object $r13, $r16, $r18;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r10;
        org.jdom.Element $r0, $r15, $r17, $r19;

        r10 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.InvService;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("service", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.InvService: java.lang.String getName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r3);

        $r4 = virtualinvoke r2.<thredds.catalog.InvService: thredds.catalog.ServiceType getServiceType()>();

        $r5 = virtualinvoke $r4.<thredds.catalog.ServiceType: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("serviceType", $r5);

        $r6 = virtualinvoke r2.<thredds.catalog.InvService: java.lang.String getBase()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("base", $r6);

        $r7 = virtualinvoke r2.<thredds.catalog.InvService: java.lang.String getSuffix()>();

        if $r7 == null goto label1;

        $r20 = virtualinvoke r2.<thredds.catalog.InvService: java.lang.String getSuffix()>();

        $i0 = virtualinvoke $r20.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r21 = virtualinvoke r2.<thredds.catalog.InvService: java.lang.String getSuffix()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("suffix", $r21);

     label1:
        $r22 = virtualinvoke r2.<thredds.catalog.InvService: java.util.List getProperties()>();

        $r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r18 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (thredds.catalog.InvProperty) $r18;

        $r19 = specialinvoke r10.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeProperty(thredds.catalog.InvProperty)>(r24);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r19);

        goto label2;

     label3:
        $r8 = virtualinvoke r2.<thredds.catalog.InvService: java.util.List getServices()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r16 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r25 = (thredds.catalog.InvService) $r16;

        $r17 = specialinvoke r10.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeService(thredds.catalog.InvService)>(r25);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r17);

        goto label4;

     label5:
        $z1 = r10.<thredds.catalog.parser.jdom.InvCatalogFactory10: boolean raw>;

        if $z1 == 0 goto label7;

        $r11 = virtualinvoke r2.<thredds.catalog.InvService: java.util.List getDatasetRoots()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (thredds.catalog.InvProperty) $r13;

        $r15 = specialinvoke r10.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDatasetRoot(thredds.catalog.InvProperty)>(r14);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r15);

        goto label6;

     label7:
        return $r0;
    }

    private org.jdom.Element writeDataSize(double)
    {
        long l5;
        byte $b0, $b1, $b2, $b3, $b4;
        int $i6, $i7, $i8, $i9, $i10;
        org.jdom.Namespace $r1;
        java.lang.String $r2, r4, $r5;
        boolean $z0;
        double d0;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r3;
        org.jdom.Element $r6;

        r3 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        d0 := @parameter0: double;

        $r6 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r6.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("dataSize", $r1);

        $z0 = <thredds.catalog.parser.jdom.InvCatalogFactory10: boolean useBytesForDataSize>;

        if $z0 == 0 goto label1;

        virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("units", "bytes");

        l5 = (long) d0;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l5);

        virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r2);

        return $r6;

     label1:
        $b0 = d0 cmpl 1.0E15;

        $i6 = (int) $b0;

        if $i6 <= 0 goto label2;

        r4 = "Pbytes";

        d0 = d0 * 1.0E-15;

        goto label7;

     label2:
        $b1 = d0 cmpl 1.0E12;

        $i7 = (int) $b1;

        if $i7 <= 0 goto label3;

        r4 = "Tbytes";

        d0 = d0 * 1.0E-12;

        goto label7;

     label3:
        $b2 = d0 cmpl 1.0E9;

        $i8 = (int) $b2;

        if $i8 <= 0 goto label4;

        r4 = "Gbytes";

        d0 = d0 * 1.0E-9;

        goto label7;

     label4:
        $b3 = d0 cmpl 1000000.0;

        $i9 = (int) $b3;

        if $i9 <= 0 goto label5;

        r4 = "Mbytes";

        d0 = d0 * 1.0E-6;

        goto label7;

     label5:
        $b4 = d0 cmpl 1000.0;

        $i10 = (int) $b4;

        if $i10 <= 0 goto label6;

        r4 = "Kbytes";

        d0 = d0 * 0.001;

        goto label7;

     label6:
        r4 = "bytes";

     label7:
        virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("units", r4);

        $r5 = staticinvoke <ucar.unidata.util.Format: java.lang.String d(double,int)>(d0, 4);

        virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r5);

        return $r6;
    }

    protected void writeInheritedMetadata(org.jdom.Element, thredds.catalog.ThreddsMetadata)
    {
        thredds.catalog.ThreddsMetadata r3;
        java.util.List $r4;
        int $i0;
        org.jdom.Namespace $r1;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r2;
        org.jdom.Element $r0, r5;

        r2 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r5 := @parameter0: org.jdom.Element;

        r3 := @parameter1: thredds.catalog.ThreddsMetadata;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("metadata", $r1);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("inherited", "true");

        virtualinvoke r2.<thredds.catalog.parser.jdom.InvCatalogFactory10: void writeThreddsMetadata(org.jdom.Element,thredds.catalog.ThreddsMetadata)>($r0, r3);

        $r4 = virtualinvoke $r0.<org.jdom.Element: java.util.List getChildren()>();

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        virtualinvoke r5.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r0);

     label1:
        return;
    }

    protected void writeThreddsMetadata(org.jdom.Element, thredds.catalog.ThreddsMetadata)
    {
        thredds.catalog.ThreddsMetadata$Variables r26;
        thredds.catalog.ThreddsMetadata$Contributor r73;
        org.jdom.Namespace $r54, $r62, $r66, $r69;
        ucar.nc2.constants.FeatureType $r3, $r57, $r58, $r59, $r60, $r63;
        thredds.catalog.ThreddsMetadata$Vocab r75, r77;
        thredds.catalog.InvProperty r78;
        thredds.catalog.DataFormatType $r51, $r52, $r55, $r71;
        ucar.nc2.units.DateRange $r81;
        thredds.catalog.InvDocumentation r72;
        java.lang.String $r1, $r2, $r56, $r64, $r67, $r70;
        thredds.catalog.InvMetadata r76;
        thredds.catalog.ThreddsMetadata$GeospatialCoverage $r22;
        org.jdom.Element r27, $r29, $r30, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r50, $r53, $r61, $r65, $r68;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.List $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r23;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r28;
        ucar.nc2.units.DateType r80;
        thredds.catalog.ThreddsMetadata$Source r74, r79;
        double $d0;
        java.util.Iterator $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r24;
        thredds.catalog.ThreddsMetadata r0;
        java.lang.Object $r25, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48;

        r28 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r27 := @parameter0: org.jdom.Element;

        r0 := @parameter1: thredds.catalog.ThreddsMetadata;

        $r1 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.lang.String getServiceName()>();

        if $r1 == null goto label01;

        $r68 = new org.jdom.Element;

        $r69 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r68.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("serviceName", $r69);

        $r70 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.lang.String getServiceName()>();

        virtualinvoke $r68.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r70);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r68);

     label01:
        $r2 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.lang.String getAuthority()>();

        if $r2 == null goto label02;

        $r65 = new org.jdom.Element;

        $r66 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r65.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("authority", $r66);

        $r67 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.lang.String getAuthority()>();

        virtualinvoke $r65.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r67);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r65);

     label02:
        $r3 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: ucar.nc2.constants.FeatureType getDataType()>();

        if $r3 == null goto label03;

        $r57 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: ucar.nc2.constants.FeatureType getDataType()>();

        $r58 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType NONE>;

        if $r57 == $r58 goto label03;

        $r59 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: ucar.nc2.constants.FeatureType getDataType()>();

        $r60 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType ANY>;

        if $r59 == $r60 goto label03;

        $r61 = new org.jdom.Element;

        $r62 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r61.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("dataType", $r62);

        $r63 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: ucar.nc2.constants.FeatureType getDataType()>();

        $r64 = virtualinvoke $r63.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        virtualinvoke $r61.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r64);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r61);

     label03:
        $r71 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: thredds.catalog.DataFormatType getDataFormatType()>();

        if $r71 == null goto label04;

        $r51 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: thredds.catalog.DataFormatType getDataFormatType()>();

        $r52 = <thredds.catalog.DataFormatType: thredds.catalog.DataFormatType NONE>;

        if $r51 == $r52 goto label04;

        $r53 = new org.jdom.Element;

        $r54 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r53.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("dataFormat", $r54);

        $r55 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: thredds.catalog.DataFormatType getDataFormatType()>();

        $r56 = virtualinvoke $r55.<thredds.catalog.DataFormatType: java.lang.String toString()>();

        virtualinvoke $r53.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r56);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r53);

     label04:
        $z9 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: boolean hasDataSize()>();

        if $z9 == 0 goto label05;

        $d0 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: double getDataSize()>();

        $r50 = specialinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDataSize(double)>($d0);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r50);

     label05:
        $r4 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getDocumentation()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z10 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label07;

        $r48 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r72 = (thredds.catalog.InvDocumentation) $r48;

        $r49 = specialinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDocumentation(thredds.catalog.InvDocumentation,java.lang.String)>(r72, "documentation");

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r49);

        goto label06;

     label07:
        $r6 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getContributors()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r46 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r73 = (thredds.catalog.ThreddsMetadata$Contributor) $r46;

        $r47 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeContributor(thredds.catalog.ThreddsMetadata$Contributor)>(r73);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r47);

        goto label08;

     label09:
        $r8 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getCreators()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r44 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r74 = (thredds.catalog.ThreddsMetadata$Source) $r44;

        $r45 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeSource(java.lang.String,thredds.catalog.ThreddsMetadata$Source)>("creator", r74);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r45);

        goto label10;

     label11:
        $r10 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getKeywords()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z2 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label13;

        $r42 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r75 = (thredds.catalog.ThreddsMetadata$Vocab) $r42;

        $r43 = specialinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeControlledVocabulary(thredds.catalog.ThreddsMetadata$Vocab,java.lang.String)>(r75, "keyword");

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r43);

        goto label12;

     label13:
        $r12 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getMetadata()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r40 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r76 = (thredds.catalog.InvMetadata) $r40;

        $r41 = specialinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeMetadata(thredds.catalog.InvMetadata)>(r76);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r41);

        goto label14;

     label15:
        $r14 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getProjects()>();

        $r15 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label16:
        $z4 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r38 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r77 = (thredds.catalog.ThreddsMetadata$Vocab) $r38;

        $r39 = specialinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeControlledVocabulary(thredds.catalog.ThreddsMetadata$Vocab,java.lang.String)>(r77, "project");

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r39);

        goto label16;

     label17:
        $r16 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getProperties()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label18:
        $z5 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label19;

        $r36 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r78 = (thredds.catalog.InvProperty) $r36;

        $r37 = specialinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeProperty(thredds.catalog.InvProperty)>(r78);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r37);

        goto label18;

     label19:
        $r18 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getPublishers()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z6 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label21;

        $r34 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r79 = (thredds.catalog.ThreddsMetadata$Source) $r34;

        $r35 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeSource(java.lang.String,thredds.catalog.ThreddsMetadata$Source)>("publisher", r79);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r35);

        goto label20;

     label21:
        $r20 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getDates()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z7 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label23;

        $r32 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>();

        r80 = (ucar.nc2.units.DateType) $r32;

        $r33 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeDate(java.lang.String,ucar.nc2.units.DateType)>("date", r80);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r33);

        goto label22;

     label23:
        $r22 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: thredds.catalog.ThreddsMetadata$GeospatialCoverage getGeospatialCoverage()>();

        if $r22 == null goto label24;

        $z8 = virtualinvoke $r22.<thredds.catalog.ThreddsMetadata$GeospatialCoverage: boolean isEmpty()>();

        if $z8 != 0 goto label24;

        $r31 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeGeospatialCoverage(thredds.catalog.ThreddsMetadata$GeospatialCoverage)>($r22);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r31);

     label24:
        $r81 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: ucar.nc2.units.DateRange getTimeCoverage()>();

        if $r81 == null goto label25;

        $r30 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeTimeCoverage(ucar.nc2.units.DateRange)>($r81);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r30);

     label25:
        $r23 = virtualinvoke r0.<thredds.catalog.ThreddsMetadata: java.util.List getVariables()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label26:
        $z11 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label27;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r26 = (thredds.catalog.ThreddsMetadata$Variables) $r25;

        $r29 = virtualinvoke r28.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeVariables(thredds.catalog.ThreddsMetadata$Variables)>(r26);

        virtualinvoke r27.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r29);

        goto label26;

     label27:
        return;
    }

    protected org.jdom.Element writeTimeCoverage(ucar.nc2.units.DateRange)
    {
        org.jdom.Namespace $r1, $r8, $r12, $r15, $r18;
        java.lang.String $r10, $r13, $r16, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        ucar.nc2.units.TimeDuration $r5, $r6, $r9;
        ucar.nc2.units.DateRange r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r20;
        org.jdom.Element $r0, $r7, $r11, $r14, $r17;
        ucar.nc2.units.DateType $r3, $r4;

        r20 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: ucar.nc2.units.DateRange;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("timeCoverage", $r1);

        $r3 = virtualinvoke r2.<ucar.nc2.units.DateRange: ucar.nc2.units.DateType getStart()>();

        $r4 = virtualinvoke r2.<ucar.nc2.units.DateRange: ucar.nc2.units.DateType getEnd()>();

        $r5 = virtualinvoke r2.<ucar.nc2.units.DateRange: ucar.nc2.units.TimeDuration getDuration()>();

        $r6 = virtualinvoke r2.<ucar.nc2.units.DateRange: ucar.nc2.units.TimeDuration getResolution()>();

        $z0 = virtualinvoke r2.<ucar.nc2.units.DateRange: boolean useStart()>();

        if $z0 == 0 goto label1;

        if $r3 == null goto label1;

        $z4 = virtualinvoke $r3.<ucar.nc2.units.DateType: boolean isBlank()>();

        if $z4 != 0 goto label1;

        $r17 = new org.jdom.Element;

        $r18 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r17.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("start", $r18);

        $r19 = virtualinvoke $r3.<ucar.nc2.units.DateType: java.lang.String toString()>();

        virtualinvoke $r17.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r19);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r17);

     label1:
        $z5 = virtualinvoke r2.<ucar.nc2.units.DateRange: boolean useEnd()>();

        if $z5 == 0 goto label2;

        if $r4 == null goto label2;

        $z3 = virtualinvoke $r4.<ucar.nc2.units.DateType: boolean isBlank()>();

        if $z3 != 0 goto label2;

        $r14 = new org.jdom.Element;

        $r15 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("end", $r15);

        $r16 = virtualinvoke $r4.<ucar.nc2.units.DateType: java.lang.String toString()>();

        virtualinvoke $r14.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r16);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r14);

     label2:
        $z6 = virtualinvoke r2.<ucar.nc2.units.DateRange: boolean useDuration()>();

        if $z6 == 0 goto label3;

        if $r5 == null goto label3;

        $z2 = virtualinvoke $r5.<ucar.nc2.units.TimeDuration: boolean isBlank()>();

        if $z2 != 0 goto label3;

        $r11 = new org.jdom.Element;

        $r12 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r11.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("duration", $r12);

        $r13 = virtualinvoke $r5.<ucar.nc2.units.TimeDuration: java.lang.String toString()>();

        virtualinvoke $r11.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r13);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r11);

     label3:
        $z7 = virtualinvoke r2.<ucar.nc2.units.DateRange: boolean useResolution()>();

        if $z7 == 0 goto label4;

        if $r6 == null goto label4;

        $z1 = virtualinvoke $r6.<ucar.nc2.units.TimeDuration: boolean isBlank()>();

        if $z1 != 0 goto label4;

        $r7 = new org.jdom.Element;

        $r8 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r7.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("resolution", $r8);

        $r9 = virtualinvoke r2.<ucar.nc2.units.DateRange: ucar.nc2.units.TimeDuration getResolution()>();

        $r10 = virtualinvoke $r9.<ucar.nc2.units.TimeDuration: java.lang.String toString()>();

        virtualinvoke $r7.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r10);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

     label4:
        return $r0;
    }

    protected org.jdom.Element writeVariable(thredds.catalog.ThreddsMetadata$Variable)
    {
        int $i0;
        org.jdom.Namespace $r1;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14;
        thredds.catalog.ThreddsMetadata$Variable r2;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r13;
        org.jdom.Element $r0;

        r13 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.ThreddsMetadata$Variable;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("variable", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getName()>();

        if $r3 == null goto label1;

        $r12 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r12);

     label1:
        $r4 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getDescription()>();

        if $r4 == null goto label2;

        $r9 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getDescription()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r11 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getDescription()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setText(java.lang.String)>($r11);

     label2:
        $r14 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getVocabularyName()>();

        if $r14 == null goto label3;

        $r8 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getVocabularyName()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("vocabulary_name", $r8);

     label3:
        $r5 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getUnits()>();

        if $r5 == null goto label4;

        $r7 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getUnits()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("units", $r7);

     label4:
        $r6 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variable: java.lang.String getVocabularyId()>();

        if $r6 == null goto label5;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("vocabulary_id", $r6);

     label5:
        return $r0;
    }

    protected org.jdom.Element writeVariables(thredds.catalog.ThreddsMetadata$Variables)
    {
        thredds.catalog.ThreddsMetadata$Variables r2;
        org.jdom.Namespace $r1, $r13, $r15, $r17;
        java.lang.String $r3, $r4, $r5, $r14, $r16, $r18;
        boolean $z0;
        java.util.Iterator $r7;
        thredds.catalog.ThreddsMetadata$Variable r9;
        java.util.List $r6;
        java.lang.Object $r8;
        thredds.catalog.parser.jdom.InvCatalogFactory10 r10;
        org.jdom.Element $r0, $r11, $r12;

        r10 := @this: thredds.catalog.parser.jdom.InvCatalogFactory10;

        r2 := @parameter0: thredds.catalog.ThreddsMetadata$Variables;

        $r0 = new org.jdom.Element;

        $r1 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("variables", $r1);

        $r3 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.lang.String getVocabulary()>();

        if $r3 == null goto label1;

        $r18 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.lang.String getVocabulary()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("vocabulary", $r18);

     label1:
        $r4 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.lang.String getVocabHref()>();

        if $r4 == null goto label2;

        $r16 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.lang.String getVocabHref()>();

        $r17 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("href", $r16, $r17);

     label2:
        $r5 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.lang.String getMapHref()>();

        if $r5 == null goto label3;

        $r12 = new org.jdom.Element;

        $r13 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS>;

        specialinvoke $r12.<org.jdom.Element: void <init>(java.lang.String,org.jdom.Namespace)>("variableMap", $r13);

        $r14 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.lang.String getMapHref()>();

        $r15 = <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS>;

        virtualinvoke $r12.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String,org.jdom.Namespace)>("href", $r14, $r15);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r12);

        goto label5;

     label3:
        $r6 = virtualinvoke r2.<thredds.catalog.ThreddsMetadata$Variables: java.util.List getVariableList()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (thredds.catalog.ThreddsMetadata$Variable) $r8;

        $r11 = virtualinvoke r10.<thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Element writeVariable(thredds.catalog.ThreddsMetadata$Variable)>(r9);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r11);

        goto label4;

     label5:
        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        org.jdom.Namespace $r1, $r2, $r3;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lthredds/catalog/parser/jdom/InvCatalogFactory10;");

        <thredds.catalog.parser.jdom.InvCatalogFactory10: org.slf4j.Logger logger> = $r0;

        $r1 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String)>("http://www.unidata.ucar.edu/namespaces/thredds/InvCatalog/v1.0");

        <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace defNS> = $r1;

        $r2 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("xlink", "http://www.w3.org/1999/xlink");

        <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace xlinkNS> = $r2;

        $r3 = staticinvoke <org.jdom.Namespace: org.jdom.Namespace getNamespace(java.lang.String,java.lang.String)>("ncml", "http://www.unidata.ucar.edu/namespaces/netcdf/ncml-2.2");

        <thredds.catalog.parser.jdom.InvCatalogFactory10: org.jdom.Namespace ncmlNS> = $r3;

        <thredds.catalog.parser.jdom.InvCatalogFactory10: boolean useBytesForDataSize> = 0;

        return;
    }
}
