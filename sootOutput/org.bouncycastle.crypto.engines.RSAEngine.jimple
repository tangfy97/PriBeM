public class org.bouncycastle.crypto.engines.RSAEngine extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private org.bouncycastle.crypto.engines.RSACoreEngine core;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RSAEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.engines.RSAEngine r0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1, $r3, $r4;
        boolean z0;
        org.bouncycastle.crypto.CipherParameters r2;

        r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        z0 := @parameter0: boolean;

        r2 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        if $r1 != null goto label1;

        $r4 = new org.bouncycastle.crypto.engines.RSACoreEngine;

        specialinvoke $r4.<org.bouncycastle.crypto.engines.RSACoreEngine: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core> = $r4;

     label1:
        $r3 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        virtualinvoke $r3.<org.bouncycastle.crypto.engines.RSACoreEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(z0, r2);

        return;
    }

    public int getInputBlockSize()
    {
        int $i0;
        org.bouncycastle.crypto.engines.RSAEngine r0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: int getInputBlockSize()>();

        return $i0;
    }

    public int getOutputBlockSize()
    {
        int $i0;
        org.bouncycastle.crypto.engines.RSAEngine r0;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1;

        r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.engines.RSACoreEngine: int getOutputBlockSize()>();

        return $i0;
    }

    public byte[] processBlock(byte[], int, int)
    {
        org.bouncycastle.crypto.engines.RSAEngine r0;
        byte[] r2, $r8;
        java.lang.IllegalStateException $r9;
        org.bouncycastle.crypto.engines.RSACoreEngine $r1, $r3, $r4, $r5;
        int i0, i1;
        java.math.BigInteger $r6, $r7;

        r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        if $r1 != null goto label1;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("RSA engine not initialised");

        throw $r9;

     label1:
        $r4 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r5 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r3 = r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.engines.RSACoreEngine core>;

        $r6 = virtualinvoke $r3.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger convertInput(byte[],int,int)>(r2, i0, i1);

        $r7 = virtualinvoke $r5.<org.bouncycastle.crypto.engines.RSACoreEngine: java.math.BigInteger processBlock(java.math.BigInteger)>($r6);

        $r8 = virtualinvoke $r4.<org.bouncycastle.crypto.engines.RSACoreEngine: byte[] convertOutput(java.math.BigInteger)>($r7);

        return $r8;
    }
}
