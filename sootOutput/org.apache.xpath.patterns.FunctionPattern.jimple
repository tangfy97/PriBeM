public class org.apache.xpath.patterns.FunctionPattern extends org.apache.xpath.patterns.StepPattern
{
    org.apache.xpath.Expression m_functionExpr;

    public void <init>(org.apache.xpath.Expression, int, int)
    {
        org.apache.xpath.Expression r1;
        org.apache.xpath.patterns.FunctionPattern r0;
        int i0, i1;

        r0 := @this: org.apache.xpath.patterns.FunctionPattern;

        r1 := @parameter0: org.apache.xpath.Expression;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.patterns.StepPattern: void <init>(int,java.lang.String,java.lang.String,int,int)>(0, null, null, i0, i1);

        r0.<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.Expression m_functionExpr> = r1;

        return;
    }

    public final void calcScore()
    {
        java.lang.String $r2;
        org.apache.xpath.patterns.FunctionPattern r0;
        org.apache.xpath.objects.XNumber $r1;

        r0 := @this: org.apache.xpath.patterns.FunctionPattern;

        $r1 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        r0.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber m_score> = $r1;

        $r2 = r0.<org.apache.xpath.patterns.StepPattern: java.lang.String m_targetString>;

        if null != $r2 goto label1;

        virtualinvoke r0.<org.apache.xpath.patterns.StepPattern: void calcTargetString()>();

     label1:
        return;
    }

    public void fixupVariables(java.util.Vector, int)
    {
        org.apache.xpath.Expression $r2;
        java.util.Vector r1;
        org.apache.xpath.patterns.FunctionPattern r0;
        int i0;

        r0 := @this: org.apache.xpath.patterns.FunctionPattern;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.patterns.StepPattern: void fixupVariables(java.util.Vector,int)>(r1, i0);

        $r2 = r0.<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.Expression m_functionExpr>;

        virtualinvoke $r2.<org.apache.xpath.Expression: void fixupVariables(java.util.Vector,int)>(r1, i0);

        return;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression $r2;
        org.apache.xpath.objects.XNumber $r4, r5, $r6;
        org.apache.xml.dtm.DTMIterator $r3;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.patterns.FunctionPattern r0;
        int $i0, i1, $i3;

        r0 := @this: org.apache.xpath.patterns.FunctionPattern;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i1 := @parameter1: int;

        $r2 = r0.<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.Expression m_functionExpr>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.Expression: org.apache.xml.dtm.DTMIterator asIterator(org.apache.xpath.XPathContext,int)>(r1, i1);

        r5 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if null == $r3 goto label5;

        goto label4;

     label1:
        if $i0 != i1 goto label2;

        $r6 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        goto label3;

     label2:
        $r6 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label3:
        r5 = $r6;

        $r4 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        if $r6 != $r4 goto label4;

        goto label5;

     label4:
        $i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i3 = (int) -1;

        if $i3 != $i0 goto label1;

     label5:
        interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: void detach()>();

        return r5;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, int, org.apache.xml.dtm.DTM, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression $r2;
        org.apache.xpath.objects.XNumber $r4, r6, $r7;
        org.apache.xml.dtm.DTMIterator $r3;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.patterns.FunctionPattern r0;
        int $i0, i1, i2, $i4;
        org.apache.xml.dtm.DTM r5;

        r0 := @this: org.apache.xpath.patterns.FunctionPattern;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i2 := @parameter1: int;

        r5 := @parameter2: org.apache.xml.dtm.DTM;

        i1 := @parameter3: int;

        $r2 = r0.<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.Expression m_functionExpr>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.Expression: org.apache.xml.dtm.DTMIterator asIterator(org.apache.xpath.XPathContext,int)>(r1, i2);

        r6 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if null == $r3 goto label6;

        goto label4;

     label1:
        if $i0 != i2 goto label2;

        $r7 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        goto label3;

     label2:
        $r7 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label3:
        r6 = $r7;

        $r4 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        if $r7 != $r4 goto label4;

        goto label5;

     label4:
        $i0 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i4 = (int) -1;

        if $i4 != $i0 goto label1;

     label5:
        interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: void detach()>();

     label6:
        return r6;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression $r2;
        org.apache.xpath.objects.XNumber $r4, r5, $r6;
        org.apache.xml.dtm.DTMIterator $r3;
        org.apache.xpath.XPathContext r0;
        org.apache.xpath.patterns.FunctionPattern r1;
        int $i0, $i1, $i3;

        r1 := @this: org.apache.xpath.patterns.FunctionPattern;

        r0 := @parameter0: org.apache.xpath.XPathContext;

        $i0 = virtualinvoke r0.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        $r2 = r1.<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.Expression m_functionExpr>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.Expression: org.apache.xml.dtm.DTMIterator asIterator(org.apache.xpath.XPathContext,int)>(r0, $i0);

        r5 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if null == $r3 goto label6;

        goto label4;

     label1:
        if $i1 != $i0 goto label2;

        $r6 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        goto label3;

     label2:
        $r6 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

     label3:
        r5 = $r6;

        $r4 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_OTHER>;

        if $r6 != $r4 goto label4;

        goto label5;

     label4:
        $i1 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        $i3 = (int) -1;

        if $i3 != $i1 goto label1;

     label5:
        interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: void detach()>();

     label6:
        return r5;
    }

    protected void callSubtreeVisitors(org.apache.xpath.XPathVisitor)
    {
        org.apache.xpath.Expression $r2;
        org.apache.xpath.XPathVisitor r3;
        org.apache.xpath.patterns.FunctionPattern r0;
        org.apache.xpath.patterns.FunctionPattern$FunctionOwner $r1;

        r0 := @this: org.apache.xpath.patterns.FunctionPattern;

        r3 := @parameter0: org.apache.xpath.XPathVisitor;

        $r2 = r0.<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.Expression m_functionExpr>;

        $r1 = new org.apache.xpath.patterns.FunctionPattern$FunctionOwner;

        specialinvoke $r1.<org.apache.xpath.patterns.FunctionPattern$FunctionOwner: void <init>(org.apache.xpath.patterns.FunctionPattern)>(r0);

        virtualinvoke $r2.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r1, r3);

        specialinvoke r0.<org.apache.xpath.patterns.StepPattern: void callSubtreeVisitors(org.apache.xpath.XPathVisitor)>(r3);

        return;
    }
}
