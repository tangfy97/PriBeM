class org.waveprotocol.wave.client.editor.content.ContentDocument$4$1 extends org.waveprotocol.wave.client.scheduler.FinalTaskRunnerImpl
{
    final org.waveprotocol.wave.client.editor.content.ContentDocument$4 this$1;

    void <init>(org.waveprotocol.wave.client.editor.content.ContentDocument$4)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentDocument$4;

        r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4$1: org.waveprotocol.wave.client.editor.content.ContentDocument$4 this$1> = r1;

        specialinvoke r0.<org.waveprotocol.wave.client.scheduler.FinalTaskRunnerImpl: void <init>()>();

        return;
    }

    protected void begin()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4$1: org.waveprotocol.wave.client.editor.content.ContentDocument$4 this$1>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: void beginDeferredMutation()>();

        return;
    }

    protected void end()
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$4 $r1;
        org.waveprotocol.wave.client.editor.content.ContentDocument$4$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$4$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$4$1: org.waveprotocol.wave.client.editor.content.ContentDocument$4 this$1>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.content.ContentDocument$4: void endDeferredMutation()>();

        return;
    }
}
