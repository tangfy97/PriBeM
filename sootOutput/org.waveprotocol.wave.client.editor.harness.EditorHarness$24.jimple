class org.waveprotocol.wave.client.editor.harness.EditorHarness$24 extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    final org.waveprotocol.wave.client.editor.harness.EditorHarness this$0;

    void <init>(org.waveprotocol.wave.client.editor.harness.EditorHarness)
    {
        org.waveprotocol.wave.client.editor.harness.EditorHarness r1;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$24 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$24;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.EditorHarness;

        r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp)
    {
        java.lang.Throwable $r5, $r7;
        com.google.gwt.core.client.GWT$UncaughtExceptionHandler $r8;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$24 r1;
        org.waveprotocol.wave.model.document.operation.DocOp r0;
        org.waveprotocol.wave.client.editor.harness.EditorHarness $r2, $r3, $r6, $r9, $r10;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle $r4;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$24;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

     label1:
        if r0 == null goto label2;

        $r2 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $z0 = $r2.<org.waveprotocol.wave.client.editor.harness.EditorHarness: boolean sendOps>;

        if $z0 == 0 goto label2;

        $r3 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        $r4 = $r3.<org.waveprotocol.wave.client.editor.harness.EditorHarness: org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle editorBundle1>;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.harness.EditorHarness$EditorBundle: void execute(org.waveprotocol.wave.model.document.operation.DocOp)>(r0);

     label2:
        $r10 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$2000(org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.model.document.operation.DocOp)>($r10, r0);

        goto label7;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <com.google.gwt.core.client.GWT: com.google.gwt.core.client.GWT$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r8.<com.google.gwt.core.client.GWT$UncaughtExceptionHandler: void onUncaughtException(java.lang.Throwable)>($r7);

     label4:
        $r9 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$2000(org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.model.document.operation.DocOp)>($r9, r0);

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        $r6 = r1.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: org.waveprotocol.wave.client.editor.harness.EditorHarness this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.harness.EditorHarness: void access$2000(org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.model.document.operation.DocOp)>($r6, r0);

        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        org.waveprotocol.wave.client.editor.harness.EditorHarness$24 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.EditorHarness$24;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.document.operation.DocOp) r1;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.harness.EditorHarness$24: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        return;
    }
}
