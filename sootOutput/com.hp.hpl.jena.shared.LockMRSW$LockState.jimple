class com.hp.hpl.jena.shared.LockMRSW$LockState extends java.lang.Object
{
    int readLocks;
    int writeLocks;
    com.hp.hpl.jena.shared.LockMRSW lock;
    java.lang.Thread thread;

    void <init>(com.hp.hpl.jena.shared.LockMRSW)
    {
        com.hp.hpl.jena.shared.LockMRSW r1;
        com.hp.hpl.jena.shared.LockMRSW$LockState r0;
        java.lang.Thread $r2;

        r0 := @this: com.hp.hpl.jena.shared.LockMRSW$LockState;

        r1 := @parameter0: com.hp.hpl.jena.shared.LockMRSW;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: int readLocks> = 0;

        r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: int writeLocks> = 0;

        r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: com.hp.hpl.jena.shared.LockMRSW lock> = r1;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: java.lang.Thread thread> = $r2;

        return;
    }

    void clean()
    {
        com.hp.hpl.jena.shared.LockMRSW$LockState r0;
        com.hp.hpl.jena.shared.LockMRSW $r1, $r3, $r6;
        java.util.concurrent.atomic.AtomicInteger $r2, $r4;
        java.lang.Thread $r5;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.shared.LockMRSW$LockState;

        $r1 = r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: com.hp.hpl.jena.shared.LockMRSW lock>;

        $r2 = $r1.<com.hp.hpl.jena.shared.LockMRSW: java.util.concurrent.atomic.AtomicInteger activeReadLocks>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 != 0 goto label1;

        $r3 = r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: com.hp.hpl.jena.shared.LockMRSW lock>;

        $r4 = $r3.<com.hp.hpl.jena.shared.LockMRSW: java.util.concurrent.atomic.AtomicInteger activeWriteLocks>;

        $i1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 != 0 goto label1;

        $r6 = r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: com.hp.hpl.jena.shared.LockMRSW lock>;

        $r5 = r0.<com.hp.hpl.jena.shared.LockMRSW$LockState: java.lang.Thread thread>;

        virtualinvoke $r6.<com.hp.hpl.jena.shared.LockMRSW: void removeLockState(java.lang.Thread)>($r5);

     label1:
        return;
    }
}
