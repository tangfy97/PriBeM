public abstract class org.apache.batik.ext.awt.g2d.AbstractGraphics2D extends java.awt.Graphics2D implements java.lang.Cloneable
{
    protected org.apache.batik.ext.awt.g2d.GraphicContext gc;
    protected boolean textAsShapes;

    public void <init>(boolean)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.awt.Graphics2D: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes> = 0;

        r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes> = z0;

        return;
    }

    public void <init>(org.apache.batik.ext.awt.g2d.AbstractGraphics2D)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0, r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2, $r4, $r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        specialinvoke r0.<java.awt.Graphics2D: void <init>()>();

        r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes> = 0;

        $r2 = r1.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: java.lang.Object clone()>();

        $r4 = (org.apache.batik.ext.awt.g2d.GraphicContext) $r3;

        r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc> = $r4;

        $r5 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r5.<org.apache.batik.ext.awt.g2d.GraphicContext: void validateTransformStack()>();

        $z0 = r1.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes>;

        r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean textAsShapes> = $z0;

        return;
    }

    public void translate(int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void translate(int,int)>(i0, i1);

        return;
    }

    public java.awt.Color getColor()
    {
        java.awt.Color $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color getColor()>();

        return $r2;
    }

    public void setColor(java.awt.Color)
    {
        java.awt.Color r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Color;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setColor(java.awt.Color)>(r1);

        return;
    }

    public void setPaintMode()
    {
        java.awt.AlphaComposite $r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r1 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setComposite(java.awt.Composite)>($r1);

        return;
    }

    public java.awt.Font getFont()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        java.awt.Font $r2;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font getFont()>();

        return $r2;
    }

    public void setFont(java.awt.Font)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        java.awt.Font r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Font;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setFont(java.awt.Font)>(r1);

        return;
    }

    public java.awt.Rectangle getClipBounds()
    {
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Rectangle getClipBounds()>();

        return $r2;
    }

    public void clipRect(int, int, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1, i2, i3;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void clipRect(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void setClip(int, int, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1, i2, i3;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void setClip(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public java.awt.Shape getClip()
    {
        java.awt.Shape $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Shape getClip()>();

        return $r2;
    }

    public void setClip(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Shape;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setClip(java.awt.Shape)>(r1);

        return;
    }

    public void drawLine(int, int, int, int)
    {
        java.awt.geom.Line2D$Float $r0;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.geom.Line2D$Float;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        specialinvoke $r0.<java.awt.geom.Line2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void fillRect(int, int, int, int)
    {
        java.awt.Rectangle $r0;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawRect(int, int, int, int)
    {
        java.awt.Rectangle $r0;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void clearRect(int, int, int, int)
    {
        java.awt.Color $r5;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1, $r3, $r4, $r6;
        java.awt.Paint $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint getPaint()>();

        $r4 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r3 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r5 = virtualinvoke $r3.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color getBackground()>();

        virtualinvoke $r4.<org.apache.batik.ext.awt.g2d.GraphicContext: void setColor(java.awt.Color)>($r5);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void fillRect(int,int,int,int)>(i0, i1, i2, i3);

        $r6 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r6.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>($r2);

        return;
    }

    public void drawRoundRect(int, int, int, int, int, int)
    {
        java.awt.geom.RoundRectangle2D$Float $r0;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.RoundRectangle2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.RoundRectangle2D$Float: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void fillRoundRect(int, int, int, int, int, int)
    {
        java.awt.geom.RoundRectangle2D$Float $r0;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.RoundRectangle2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.RoundRectangle2D$Float: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawOval(int, int, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.Ellipse2D$Float $r0;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.geom.Ellipse2D$Float;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        specialinvoke $r0.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void fillOval(int, int, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.Ellipse2D$Float $r0;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r0 = new java.awt.geom.Ellipse2D$Float;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        specialinvoke $r0.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawArc(int, int, int, int, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.awt.geom.Arc2D$Float $r0;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.Arc2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.Arc2D$Float: void <init>(float,float,float,float,float,float,int)>($f5, $f4, $f3, $f2, $f1, $f0, 0);

        virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void fillArc(int, int, int, int, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r1;
        int i0, i1, i2, i3, i4, i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.awt.geom.Arc2D$Float $r0;

        r1 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r0 = new java.awt.geom.Arc2D$Float;

        $f5 = (float) i0;

        $f4 = (float) i1;

        $f3 = (float) i2;

        $f2 = (float) i3;

        $f1 = (float) i4;

        $f0 = (float) i5;

        specialinvoke $r0.<java.awt.geom.Arc2D$Float: void <init>(float,float,float,float,float,float,int)>($f5, $f4, $f3, $f2, $f1, $f0, 2);

        virtualinvoke r1.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawPolyline(int[], int[], int)
    {
        int[] r1, r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.GeneralPath $r0;

        r3 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        if i0 <= 0 goto label3;

        $r0 = new java.awt.geom.GeneralPath;

        specialinvoke $r0.<java.awt.geom.GeneralPath: void <init>()>();

        $i1 = r1[0];

        $f1 = (float) $i1;

        $i2 = r2[0];

        $f0 = (float) $i2;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f1, $f0);

        i5 = 1;

        goto label2;

     label1:
        $i3 = r1[i5];

        $f3 = (float) $i3;

        $i4 = r2[i5];

        $f2 = (float) $i4;

        virtualinvoke $r0.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f3, $f2);

        i5 = i5 + 1;

     label2:
        if i5 < i0 goto label1;

        virtualinvoke r3.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

     label3:
        return;
    }

    public void drawPolygon(int[], int[], int)
    {
        java.awt.Polygon $r0;
        int[] r1, r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r3;
        int i0;

        r3 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        $r0 = new java.awt.Polygon;

        specialinvoke $r0.<java.awt.Polygon: void <init>(int[],int[],int)>(r1, r2, i0);

        virtualinvoke r3.<java.awt.Graphics2D: void draw(java.awt.Shape)>($r0);

        return;
    }

    public void fillPolygon(int[], int[], int)
    {
        java.awt.Polygon $r0;
        int[] r1, r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r3;
        int i0;

        r3 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        $r0 = new java.awt.Polygon;

        specialinvoke $r0.<java.awt.Polygon: void <init>(int[],int[],int)>(r1, r2, i0);

        virtualinvoke r3.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r0);

        return;
    }

    public void drawString(java.lang.String, int, int)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1;
        float $f0, $f1;
        java.lang.String r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r0.<java.awt.Graphics2D: void drawString(java.lang.String,float,float)>(r1, $f1, $f0);

        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, int, int)
    {
        java.text.AttributedCharacterIterator r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1;
        float $f0, $f1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r0.<java.awt.Graphics2D: void drawString(java.text.AttributedCharacterIterator,float,float)>(r1, $f1, $f0);

        return;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        java.awt.Color r2;
        java.awt.Image r1;
        java.awt.image.ImageObserver r3;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.awt.Color;

        r3 := @parameter4: java.awt.image.ImageObserver;

        $i2 = virtualinvoke r1.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i3 = virtualinvoke r1.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)>(r1, i0, i1, $i2, $i3, r2, r3);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        java.awt.Color r3;
        java.awt.Image r6;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1, $r4, $r5;
        java.awt.image.ImageObserver r7;
        java.awt.Paint $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r6 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r3 := @parameter5: java.awt.Color;

        r7 := @parameter6: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint getPaint()>();

        $r4 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r4.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>(r3);

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void fillRect(int,int,int,int)>(i0, i1, i2, i3);

        $r5 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r5.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>($r2);

        virtualinvoke r0.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>(r6, i0, i1, i2, i3, r7);

        return 1;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver)
    {
        java.awt.image.ImageObserver r5;
        java.awt.Graphics2D $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r4;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i7, i8, i9, i10, i11, $i12, $i13;
        boolean $z0;
        java.awt.image.BufferedImage $r0, $r3;
        java.awt.Image r1;

        r4 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Image;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        i11 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        r5 := @parameter9: java.awt.image.ImageObserver;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i1 = virtualinvoke r1.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r2 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r1, 0, 0, null);

        virtualinvoke $r2.<java.awt.Graphics: void dispose()>();

        $i7 = i4 - i2;

        $i6 = i5 - i3;

        $r3 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.BufferedImage getSubimage(int,int,int,int)>(i2, i3, $i7, $i6);

        $i13 = i10 - i8;

        $i12 = i11 - i9;

        $z0 = virtualinvoke r4.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.image.ImageObserver)>($r3, i8, i9, $i13, $i12, r5);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        java.awt.Color r3;
        java.awt.image.ImageObserver r7;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8, i9;
        boolean $z0;
        java.awt.Image r6;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1, $r4, $r5;
        java.awt.Paint $r2;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r6 := @parameter0: java.awt.Image;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i6 := @parameter5: int;

        i7 := @parameter6: int;

        i8 := @parameter7: int;

        i9 := @parameter8: int;

        r3 := @parameter9: java.awt.Color;

        r7 := @parameter10: java.awt.image.ImageObserver;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint getPaint()>();

        $r4 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r4.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>(r3);

        $i5 = i2 - i0;

        $i4 = i3 - i1;

        virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: void fillRect(int,int,int,int)>(i0, i1, $i5, $i4);

        $r5 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r5.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>($r2);

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.image.ImageObserver)>(r6, i0, i1, i2, i3, i6, i7, i8, i9, r7);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)
    {
        java.lang.Error $r12;
        java.awt.image.ImageObserver r14;
        byte $b0;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r2;
        java.awt.geom.NoninvertibleTransformException $r11;
        java.lang.String $r13;
        double $d0;
        boolean z0;
        java.awt.Image r6;
        org.apache.batik.ext.awt.g2d.GraphicContext $r3, $r5, $r7, $r9, $r10;
        java.awt.geom.AffineTransform r0, $r1, $r4, $r8;

        r2 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r6 := @parameter0: java.awt.Image;

        r0 := @parameter1: java.awt.geom.AffineTransform;

        r14 := @parameter2: java.awt.image.ImageObserver;

        $d0 = virtualinvoke r0.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 == 0 goto label5;

     label1:
        $r8 = virtualinvoke r0.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.Error;

        $r13 = virtualinvoke $r11.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r9 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r9.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r0);

        z0 = virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, null);

        $r10 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r10.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>($r8);

        goto label6;

     label5:
        $r1 = new java.awt.geom.AffineTransform;

        $r3 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r4 = virtualinvoke $r3.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform getTransform()>();

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r4);

        $r5 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r5.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r0);

        z0 = virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r6, 0, 0, null);

        $r7 = r2.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r7.<org.apache.batik.ext.awt.g2d.GraphicContext: void setTransform(java.awt.geom.AffineTransform)>($r1);

     label6:
        return z0;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)
    {
        java.awt.image.BufferedImage $r1, r3;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r2;
        int i0, i1;
        java.awt.image.BufferedImageOp r0;

        r2 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r3 := @parameter0: java.awt.image.BufferedImage;

        r0 := @parameter1: java.awt.image.BufferedImageOp;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r1 = interfaceinvoke r0.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r3, null);

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r1, i0, i1, null);

        return;
    }

    public void drawGlyphVector(java.awt.font.GlyphVector, float, float)
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r2;
        float f0, f1;
        java.awt.font.GlyphVector r0;

        r2 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r0 := @parameter0: java.awt.font.GlyphVector;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r1 = virtualinvoke r0.<java.awt.font.GlyphVector: java.awt.Shape getOutline(float,float)>(f0, f1);

        virtualinvoke r2.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r1);

        return;
    }

    public boolean hit(java.awt.Rectangle, java.awt.Shape, boolean)
    {
        java.awt.Shape $r3, r7;
        java.awt.Stroke $r6;
        java.awt.Rectangle r4;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1, $r5;
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        boolean z0, $z1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r4 := @parameter0: java.awt.Rectangle;

        r7 := @parameter1: java.awt.Shape;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r5 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r6 = virtualinvoke $r5.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke getStroke()>();

        r7 = interfaceinvoke $r6.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>(r7);

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform getTransform()>();

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r7);

        $z1 = interfaceinvoke $r3.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(r4);

        return $z1;
    }

    public void setComposite(java.awt.Composite)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        java.awt.Composite r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Composite;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setComposite(java.awt.Composite)>(r1);

        return;
    }

    public void setPaint(java.awt.Paint)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        java.awt.Paint r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Paint;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setPaint(java.awt.Paint)>(r1);

        return;
    }

    public void setStroke(java.awt.Stroke)
    {
        java.awt.Stroke r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Stroke;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setStroke(java.awt.Stroke)>(r1);

        return;
    }

    public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        java.awt.RenderingHints$Key r1;
        java.lang.Object r2;
        org.apache.batik.ext.awt.g2d.GraphicContext $r3;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.RenderingHints$Key;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r3.<org.apache.batik.ext.awt.g2d.GraphicContext: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        java.awt.RenderingHints$Key r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.RenderingHints$Key;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r3 = virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>(r1);

        return $r3;
    }

    public void setRenderingHints(java.util.Map)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        java.util.Map r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setRenderingHints(java.util.Map)>(r1);

        return;
    }

    public void addRenderingHints(java.util.Map)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        java.util.Map r1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void addRenderingHints(java.util.Map)>(r1);

        return;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        java.awt.RenderingHints $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.RenderingHints getRenderingHints()>();

        return $r2;
    }

    public void translate(double, double)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void translate(double,double)>(d0, d1);

        return;
    }

    public void rotate(double)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        double d0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void rotate(double)>(d0);

        return;
    }

    public void rotate(double, double, double)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        double d0, d1, d2;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void rotate(double,double,double)>(d0, d1, d2);

        return;
    }

    public void scale(double, double)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void scale(double,double)>(d0, d1);

        return;
    }

    public void shear(double, double)
    {
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        double d0, d1;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: void shear(double,double)>(d0, d1);

        return;
    }

    public void transform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void transform(java.awt.geom.AffineTransform)>(r1);

        return;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        java.awt.geom.AffineTransform r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setTransform(java.awt.geom.AffineTransform)>(r1);

        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.geom.AffineTransform getTransform()>();

        return $r2;
    }

    public java.awt.Paint getPaint()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        java.awt.Paint $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Paint getPaint()>();

        return $r2;
    }

    public java.awt.Composite getComposite()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        java.awt.Composite $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Composite getComposite()>();

        return $r2;
    }

    public void setBackground(java.awt.Color)
    {
        java.awt.Color r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Color;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void setBackground(java.awt.Color)>(r1);

        return;
    }

    public java.awt.Color getBackground()
    {
        java.awt.Color $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Color getBackground()>();

        return $r2;
    }

    public java.awt.Stroke getStroke()
    {
        java.awt.Stroke $r2;
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Stroke getStroke()>();

        return $r2;
    }

    public void clip(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.g2d.GraphicContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        r1 := @parameter0: java.awt.Shape;

        $r2 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        virtualinvoke $r2.<org.apache.batik.ext.awt.g2d.GraphicContext: void clip(java.awt.Shape)>(r1);

        return;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        java.awt.font.FontRenderContext $r2;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        $r2 = virtualinvoke $r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.font.FontRenderContext getFontRenderContext()>();

        return $r2;
    }

    public org.apache.batik.ext.awt.g2d.GraphicContext getGraphicContext()
    {
        org.apache.batik.ext.awt.g2d.GraphicContext $r1;
        org.apache.batik.ext.awt.g2d.AbstractGraphics2D r0;

        r0 := @this: org.apache.batik.ext.awt.g2d.AbstractGraphics2D;

        $r1 = r0.<org.apache.batik.ext.awt.g2d.AbstractGraphics2D: org.apache.batik.ext.awt.g2d.GraphicContext gc>;

        return $r1;
    }
}
