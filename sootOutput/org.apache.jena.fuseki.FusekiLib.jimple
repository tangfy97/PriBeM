public class org.apache.jena.fuseki.FusekiLib extends java.lang.Object
{

    public void <init>()
    {
        org.apache.jena.fuseki.FusekiLib r0;

        r0 := @this: org.apache.jena.fuseki.FusekiLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.jena.atlas.web.ContentType getContentType(org.apache.jena.fuseki.servlets.HttpAction)
    {
        javax.servlet.http.HttpServletRequest $r1;
        org.apache.jena.atlas.web.ContentType $r2;
        org.apache.jena.fuseki.servlets.HttpAction r0;

        r0 := @parameter0: org.apache.jena.fuseki.servlets.HttpAction;

        $r1 = r0.<org.apache.jena.fuseki.servlets.HttpAction: javax.servlet.http.HttpServletRequest request>;

        $r2 = staticinvoke <org.apache.jena.fuseki.FusekiLib: org.apache.jena.atlas.web.ContentType getContentType(javax.servlet.http.HttpServletRequest)>($r1);

        return $r2;
    }

    public static org.apache.jena.atlas.web.ContentType getContentType(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r1;
        org.apache.jena.atlas.web.ContentType $r2;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.jena.atlas.web.ContentType: org.apache.jena.atlas.web.ContentType create(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.jena.riot.Lang getLangFromAction(org.apache.jena.fuseki.servlets.HttpAction, org.apache.jena.riot.Lang)
    {
        javax.servlet.http.HttpServletRequest $r1;
        org.apache.jena.riot.Lang $r3, r4;
        org.apache.jena.fuseki.servlets.HttpAction r0;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.jena.fuseki.servlets.HttpAction;

        r4 := @parameter1: org.apache.jena.riot.Lang;

        $r1 = r0.<org.apache.jena.fuseki.servlets.HttpAction: javax.servlet.http.HttpServletRequest request>;

        $r2 = interfaceinvoke $r1.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>();

        if $r2 != null goto label1;

        return r4;

     label1:
        $r3 = staticinvoke <org.apache.jena.riot.WebContent: org.apache.jena.riot.Lang contentTypeToLang(java.lang.String)>($r2);

        return $r3;
    }

    static java.lang.String fmtRequest(javax.servlet.http.HttpServletRequest)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.lang.StringBuffer $r0, $r3, $r11;
        java.lang.String $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r3 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.StringBuffer getRequestURL()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.Convert: java.lang.String decWWWForm(java.lang.StringBuffer)>($r3);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r5 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        if $r5 == null goto label1;

        $r7 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.Convert: java.lang.String decWWWForm(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(char,char)>(10, 32);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(13, 32);

        $r11 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("?");

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

     label1:
        $r6 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static org.apache.jena.atlas.lib.MultiMap parseQueryString(javax.servlet.http.HttpServletRequest)
    {
        java.lang.String[] $r4, $r6;
        javax.servlet.http.HttpServletRequest r1;
        int $i0, $i1, $i2, i3;
        java.lang.String $r2, $r3, r5, r7, r8;
        org.apache.jena.atlas.lib.MultiMapToList $r0;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r0 = staticinvoke <org.apache.jena.atlas.lib.MultiMapToList: org.apache.jena.atlas.lib.MultiMapToList create()>();

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        if $r2 == null goto label5;

        $r3 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getQueryString()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("&");

        i3 = 0;

     label1:
        $i0 = lengthof $r4;

        if i3 >= $i0 goto label5;

        r5 = $r4[i3];

        $r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", 2);

        $i1 = lengthof $r6;

        if $i1 != 0 goto label2;

        r7 = r5;

        r8 = "";

        goto label4;

     label2:
        $i2 = lengthof $r6;

        if $i2 != 1 goto label3;

        r7 = $r6[0];

        r8 = "";

        goto label4;

     label3:
        r7 = $r6[0];

        r8 = $r6[1];

     label4:
        virtualinvoke $r0.<org.apache.jena.atlas.lib.MultiMap: void put(java.lang.Object,java.lang.Object)>(r7, r8);

        i3 = i3 + 1;

        goto label1;

     label5:
        return $r0;
    }

    public static java.lang.String safeParameter(javax.servlet.http.HttpServletRequest, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String r1, $r2, $r3, $r4;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>(r1);

        $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>($r2, "\r", "");

        $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String replaceChars(java.lang.String,java.lang.String,java.lang.String)>($r3, "\n", "");

        return $r4;
    }

    public static void addDataInto(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.sparql.core.DatasetGraph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3, $r10, $r11, $r12, r13;
        com.hp.hpl.jena.graph.Graph r0, $r7;
        boolean $z0;
        com.hp.hpl.jena.sparql.core.DatasetGraph r6;
        com.hp.hpl.jena.graph.Triple r14;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.lang.Object $r9;
        com.hp.hpl.jena.shared.PrefixMapping $r5, $r8;

        r0 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r6 := @parameter1: com.hp.hpl.jena.sparql.core.DatasetGraph;

        r13 := @parameter2: com.hp.hpl.jena.graph.Node;

        if r13 != null goto label1;

        r13 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

     label1:
        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2, $r1);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.graph.Triple) $r9;

        $r10 = virtualinvoke r14.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r11 = virtualinvoke r14.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r12 = virtualinvoke r14.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        interfaceinvoke r6.<com.hp.hpl.jena.sparql.core.DatasetGraph: void add(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r13, $r10, $r11, $r12);

        goto label2;

     label3:
        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        $r7 = interfaceinvoke r6.<com.hp.hpl.jena.sparql.core.DatasetGraph: com.hp.hpl.jena.graph.Graph getDefaultGraph()>();

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        interfaceinvoke $r8.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping withDefaultMappings(com.hp.hpl.jena.shared.PrefixMapping)>($r5);

        return;
    }
}
