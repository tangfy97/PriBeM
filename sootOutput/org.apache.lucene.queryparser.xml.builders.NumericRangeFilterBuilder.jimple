public class org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder extends java.lang.Object implements org.apache.lucene.queryparser.xml.FilterBuilder
{
    private static final org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter NO_MATCH_FILTER;
    private boolean strictMode;

    public void <init>()
    {
        org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder: boolean strictMode> = 0;

        return;
    }

    public void setStrictMode(boolean)
    {
        org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder r0;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder: boolean strictMode> = z0;

        return;
    }

    public org.apache.lucene.search.Filter getFilter(org.w3c.dom.Element) throws org.apache.lucene.queryparser.xml.ParserException
    {
        java.lang.Float $r6, $r7;
        org.apache.lucene.queryparser.xml.ParserException $r5, $r17;
        org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder r15;
        java.lang.Double $r8, $r9;
        java.lang.Integer $r12, $r13;
        java.lang.Long $r10, $r11;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter $r16;
        java.lang.NumberFormatException $r14;
        org.apache.lucene.search.NumericRangeFilter r18;
        org.w3c.dom.Element r0;

        r15 := @this: org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getAttributeWithInheritanceOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "fieldName");

        $r2 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getAttributeOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "lowerTerm");

        $r3 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getAttributeOrFail(org.w3c.dom.Element,java.lang.String)>(r0, "upperTerm");

        $z0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: boolean getAttribute(org.w3c.dom.Element,java.lang.String,boolean)>(r0, "includeLower", 1);

        $z1 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: boolean getAttribute(org.w3c.dom.Element,java.lang.String,boolean)>(r0, "includeUpper", 1);

        $i0 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: int getAttribute(org.w3c.dom.Element,java.lang.String,int)>(r0, "precisionStep", 4);

        $r4 = staticinvoke <org.apache.lucene.queryparser.xml.DOMUtils: java.lang.String getAttribute(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r0, "type", "int");

     label1:
        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("int");

        if $z2 == 0 goto label2;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        r18 = staticinvoke <org.apache.lucene.search.NumericRangeFilter: org.apache.lucene.search.NumericRangeFilter newIntRange(java.lang.String,int,java.lang.Integer,java.lang.Integer,boolean,boolean)>($r1, $i0, $r12, $r13, $z0, $z1);

        goto label6;

     label2:
        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("long");

        if $z3 == 0 goto label3;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r2);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r3);

        r18 = staticinvoke <org.apache.lucene.search.NumericRangeFilter: org.apache.lucene.search.NumericRangeFilter newLongRange(java.lang.String,int,java.lang.Long,java.lang.Long,boolean,boolean)>($r1, $i0, $r10, $r11, $z0, $z1);

        goto label6;

     label3:
        $z4 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("double");

        if $z4 == 0 goto label4;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r3);

        r18 = staticinvoke <org.apache.lucene.search.NumericRangeFilter: org.apache.lucene.search.NumericRangeFilter newDoubleRange(java.lang.String,int,java.lang.Double,java.lang.Double,boolean,boolean)>($r1, $i0, $r8, $r9, $z0, $z1);

        goto label6;

     label4:
        $z5 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("float");

        if $z5 == 0 goto label5;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r3);

        r18 = staticinvoke <org.apache.lucene.search.NumericRangeFilter: org.apache.lucene.search.NumericRangeFilter newFloatRange(java.lang.String,int,java.lang.Float,java.lang.Float,boolean,boolean)>($r1, $i0, $r6, $r7, $z0, $z1);

        goto label6;

     label5:
        $r5 = new org.apache.lucene.queryparser.xml.ParserException;

        specialinvoke $r5.<org.apache.lucene.queryparser.xml.ParserException: void <init>(java.lang.String)>("type attribute must be one of: [long, int, double, float]");

        throw $r5;

     label6:
        return r18;

     label7:
        $r14 := @caughtexception;

        $z6 = r15.<org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder: boolean strictMode>;

        if $z6 == 0 goto label8;

        $r17 = new org.apache.lucene.queryparser.xml.ParserException;

        specialinvoke $r17.<org.apache.lucene.queryparser.xml.ParserException: void <init>(java.lang.String,java.lang.Throwable)>("Could not parse lowerTerm or upperTerm into a number", $r14);

        throw $r17;

     label8:
        $r16 = <org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder: org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter NO_MATCH_FILTER>;

        return $r16;

        catch java.lang.NumberFormatException from label1 to label6 with label7;
    }

    static void <clinit>()
    {
        org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter $r0;

        $r0 = new org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter;

        specialinvoke $r0.<org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter: void <init>()>();

        <org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder: org.apache.lucene.queryparser.xml.builders.NumericRangeFilterBuilder$NoMatchFilter NO_MATCH_FILTER> = $r0;

        return;
    }
}
