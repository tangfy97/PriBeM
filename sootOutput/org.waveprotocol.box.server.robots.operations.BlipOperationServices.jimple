public class org.waveprotocol.box.server.robots.operations.BlipOperationServices extends java.lang.Object implements org.waveprotocol.box.server.robots.operations.OperationService
{

    private void <init>()
    {
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r0;

        r0 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void execute(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r1;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r14;
        org.waveprotocol.wave.model.id.WaveletId $r9;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;
        com.google.wave.api.OperationType $r12;
        org.waveprotocol.wave.model.conversation.ObservableConversation $r11;
        int[] $r13;
        int $i0, $i1;
        org.waveprotocol.wave.model.conversation.ObservableConversationView $r4;
        java.lang.String r7, $r10, $r18, $r20;
        org.waveprotocol.wave.model.id.IdSerialiser $r8;
        com.google.wave.api.InvalidRequestException $r22;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r5;
        java.lang.UnsupportedOperationException $r15;
        org.waveprotocol.box.server.robots.OperationContext r0;
        org.waveprotocol.wave.model.id.InvalidIdException $r21;
        java.lang.Object $r6;
        java.lang.StringBuilder $r16, $r17, $r19;

        r14 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r1 := @parameter0: com.google.wave.api.OperationRequest;

        r0 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r3 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet openWavelet(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        $r4 = interfaceinvoke r0.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ObservableConversationView openConversation(com.google.wave.api.OperationRequest,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2);

        $r5 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty WAVELET_ID>;

        $r6 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r1, $r5);

        r7 = (java.lang.String) $r6;

     label01:
        $r8 = staticinvoke <com.google.wave.api.ApiIdSerializer: org.waveprotocol.wave.model.id.IdSerialiser instance()>();

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.id.IdSerialiser: org.waveprotocol.wave.model.id.WaveletId deserialiseWaveletId(java.lang.String)>(r7);

        $r10 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversation: java.lang.String idFor(org.waveprotocol.wave.model.id.WaveletId)>($r9);

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

        $r22 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r22.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest,java.lang.Exception)>("Invalid conversation id", r1, $r21);

        throw $r22;

     label04:
        $r11 = interfaceinvoke $r4.<org.waveprotocol.wave.model.conversation.ObservableConversationView: org.waveprotocol.wave.model.conversation.ObservableConversation getConversation(java.lang.String)>($r10);

        $r12 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r1);

        $r13 = <org.waveprotocol.box.server.robots.operations.BlipOperationServices$1: int[] $SwitchMap$com$google$wave$api$OperationType>;

        $i0 = virtualinvoke $r12.<com.google.wave.api.OperationType: int ordinal()>();

        $i1 = $r13[$i0];

        tableswitch($i1)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label10;
            case 7: goto label11;
            case 8: goto label12;
            default: goto label13;
        };

     label05:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void continueThread(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r11);

        goto label14;

     label06:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void createChild(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r11);

        goto label14;

     label07:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void appendBlip(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r11);

        goto label14;

     label08:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void appendInlineBlip(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r3, $r11);

        goto label14;

     label09:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void appendMarkup(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r3, $r11);

        goto label14;

     label10:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void insertInlineBlip(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.ObservableWavelet,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r3, $r11);

        goto label14;

     label11:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void insertInlineBlipAfterElement(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r3, $r11);

        goto label14;

     label12:
        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void delete(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation)>(r1, r0, r2, $r11);

        goto label14;

     label13:
        $r15 = new java.lang.UnsupportedOperationException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This OperationService does not implement operation of type ");

        $r18 = virtualinvoke $r12.<com.google.wave.api.OperationType: java.lang.String method()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label14:
        return;

        catch org.waveprotocol.wave.model.id.InvalidIdException from label01 to label02 with label03;
    }

    private void continueThread(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r17;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r19;
        org.waveprotocol.wave.model.conversation.ObservableConversation r12;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r13, $r15;
        java.lang.String $r6, $r16, $r18, $r21;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7, $r9;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r11;
        org.waveprotocol.wave.model.conversation.ConversationThread $r14;
        com.google.wave.api.BlipData $r20;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Object $r8, $r10;

        r17 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r11 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r19 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r12 := @parameter3: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType BLIP_CONTINUE_THREAD>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_DATA>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r20 = (com.google.wave.api.BlipData) $r8;

        $r9 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r10 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r9);

        $r21 = (java.lang.String) $r10;

        $r13 = interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r12, $r21);

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread getThread()>();

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip()>();

        $r16 = virtualinvoke $r20.<com.google.wave.api.BlipData: java.lang.String getBlipId()>();

        interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: void putBlip(java.lang.String,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r16, $r15);

        $r18 = virtualinvoke $r20.<com.google.wave.api.BlipData: java.lang.String getContent()>();

        specialinvoke r17.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip,java.lang.String)>($r15, $r18);

        specialinvoke r17.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void processBlipCreatedEvent(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r11, r19, r12, $r15);

        return;
    }

    private void createChild(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r17;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r19;
        org.waveprotocol.wave.model.conversation.ObservableConversation r12;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r13, $r15;
        java.lang.String $r6, $r16, $r18, $r21;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7, $r9;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r11;
        org.waveprotocol.wave.model.conversation.ConversationThread $r14;
        com.google.wave.api.BlipData $r20;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Object $r8, $r10;

        r17 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r11 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r19 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r12 := @parameter3: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType BLIP_CREATE_CHILD>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_DATA>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r20 = (com.google.wave.api.BlipData) $r8;

        $r9 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r10 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r9);

        $r21 = (java.lang.String) $r10;

        $r13 = interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r12, $r21);

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread addReplyThread()>();

        $r15 = interfaceinvoke $r14.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip()>();

        $r16 = virtualinvoke $r20.<com.google.wave.api.BlipData: java.lang.String getBlipId()>();

        interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: void putBlip(java.lang.String,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r16, $r15);

        $r18 = virtualinvoke $r20.<com.google.wave.api.BlipData: java.lang.String getContent()>();

        specialinvoke r17.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip,java.lang.String)>($r15, $r18);

        specialinvoke r17.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void processBlipCreatedEvent(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r11, r19, r12, $r15);

        return;
    }

    private void appendBlip(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationThread $r10;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r14;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r16;
        org.waveprotocol.wave.model.conversation.ObservableConversation r9;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip $r11;
        java.lang.String $r6, $r13, $r15;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r12;
        com.google.wave.api.BlipData $r17;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Object $r8;

        r14 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r12 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r16 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r9 := @parameter3: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType WAVELET_APPEND_BLIP>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_DATA>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r17 = (com.google.wave.api.BlipData) $r8;

        $r10 = interfaceinvoke r9.<org.waveprotocol.wave.model.conversation.ObservableConversation: org.waveprotocol.wave.model.conversation.ObservableConversationThread getRootThread()>();

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.conversation.ObservableConversationThread: org.waveprotocol.wave.model.conversation.ObservableConversationBlip appendBlip()>();

        $r13 = virtualinvoke $r17.<com.google.wave.api.BlipData: java.lang.String getBlipId()>();

        interfaceinvoke r12.<org.waveprotocol.box.server.robots.OperationContext: void putBlip(java.lang.String,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r13, $r11);

        $r15 = virtualinvoke $r17.<com.google.wave.api.BlipData: java.lang.String getContent()>();

        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip,java.lang.String)>($r11, $r15);

        specialinvoke r14.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void processBlipCreatedEvent(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r12, r16, r9, $r11);

        return;
    }

    private void appendInlineBlip(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r15;
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r21;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r23;
        org.waveprotocol.wave.model.conversation.ObservableConversation r12;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r13, $r19;
        int $i0;
        org.waveprotocol.wave.model.wave.ObservableWavelet r27;
        java.lang.String $r6, $r20, $r22, $r25;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7, $r9;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r11;
        org.waveprotocol.wave.model.conversation.ConversationThread $r18;
        org.waveprotocol.wave.model.document.Document $r14;
        org.waveprotocol.wave.model.document.util.Point$El $r17;
        com.google.wave.api.BlipData $r24;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Object $r8, $r10, $r16;
        org.waveprotocol.wave.model.document.Doc$E $r26;

        r21 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r11 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r23 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r27 := @parameter3: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r12 := @parameter4: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType DOCUMENT_APPEND_INLINE_BLIP>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_DATA>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r24 = (com.google.wave.api.BlipData) $r8;

        $r9 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r10 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r9);

        $r25 = (java.lang.String) $r10;

        $r13 = interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r12, $r25);

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createEmpty()>();

        $r16 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r14, $r15);

        $r26 = (org.waveprotocol.wave.model.document.Doc$E) $r16;

        $r17 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El after(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r14, $r26);

        $i0 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.Document: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r17);

        $r18 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread addReplyThread(int)>($i0);

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip()>();

        $r20 = virtualinvoke $r24.<com.google.wave.api.BlipData: java.lang.String getBlipId()>();

        interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: void putBlip(java.lang.String,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r20, $r19);

        $r22 = virtualinvoke $r24.<com.google.wave.api.BlipData: java.lang.String getContent()>();

        specialinvoke r21.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip,java.lang.String)>($r19, $r22);

        specialinvoke r21.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void processBlipCreatedEvent(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r11, r23, r12, $r19);

        return;
    }

    private void appendMarkup(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r14;
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r19;
        java.util.HashMap $r16;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r20;
        org.waveprotocol.wave.model.conversation.ObservableConversation r12;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r13;
        org.waveprotocol.wave.model.wave.ObservableWavelet r21;
        java.lang.String $r6, $r17, $r18;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7, $r9;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r11;
        org.waveprotocol.wave.model.document.Document $r15;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Object $r8, $r10;

        r19 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r11 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r20 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r21 := @parameter3: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r12 := @parameter4: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType DOCUMENT_APPEND_MARKUP>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty CONTENT>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r17 = (java.lang.String) $r8;

        $r9 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r10 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r9);

        $r18 = (java.lang.String) $r10;

        $r13 = interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r12, $r18);

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createFromXmlString(java.lang.String)>($r17);

        $r15 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r15, $r14);

        $r16 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: void constructResponse(com.google.wave.api.OperationRequest,java.util.Map)>(r0, $r16);

        return;
    }

    private void insertInlineBlip(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r22;
        org.waveprotocol.wave.model.wave.ParticipantId r24;
        java.lang.Integer $r32;
        org.waveprotocol.wave.model.conversation.ObservableConversation r12;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7, $r9, $r14;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r11;
        com.google.wave.api.BlipData $r30;
        java.lang.StringBuilder $r3, $r4, $r5, $r26, $r27, $r28;
        com.google.wave.api.OperationRequest r0;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r13, $r20;
        com.google.wave.api.data.ApiView $r16;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.wave.ObservableWavelet r18;
        java.lang.String $r6, $r21, $r23, $r29, $r31;
        com.google.wave.api.InvalidRequestException $r25;
        org.waveprotocol.wave.model.conversation.ConversationThread $r19;
        org.waveprotocol.wave.model.document.Document $r17;
        java.lang.Object $r8, $r10, $r15;

        r22 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r11 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r24 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r18 := @parameter3: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r12 := @parameter4: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType DOCUMENT_INSERT_INLINE_BLIP>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_DATA>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r30 = (com.google.wave.api.BlipData) $r8;

        $r9 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r10 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r9);

        $r31 = (java.lang.String) $r10;

        $r13 = interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r12, $r31);

        $r14 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty INDEX>;

        $r15 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r14);

        $r32 = (java.lang.Integer) $r15;

        $i0 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

        if $i0 > 0 goto label3;

        $r25 = new com.google.wave.api.InvalidRequestException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t inline a blip on position <= 0, got ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>($r29, r0);

        throw $r25;

     label3:
        $r16 = new com.google.wave.api.data.ApiView;

        $r17 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        specialinvoke $r16.<com.google.wave.api.data.ApiView: void <init>(org.waveprotocol.wave.model.document.Document,org.waveprotocol.wave.model.wave.Wavelet)>($r17, r18);

        $i1 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke $r16.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i1);

        $r19 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread addReplyThread(int)>($i2);

        $r20 = interfaceinvoke $r19.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip()>();

        $r21 = virtualinvoke $r30.<com.google.wave.api.BlipData: java.lang.String getBlipId()>();

        interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: void putBlip(java.lang.String,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r21, $r20);

        $r23 = virtualinvoke $r30.<com.google.wave.api.BlipData: java.lang.String getContent()>();

        specialinvoke r22.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip,java.lang.String)>($r20, $r23);

        specialinvoke r22.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void processBlipCreatedEvent(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r11, r24, r12, $r20);

        return;
    }

    private void insertInlineBlipAfterElement(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r22;
        org.waveprotocol.wave.model.wave.ParticipantId r24;
        org.waveprotocol.wave.model.conversation.ObservableConversation r12;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7, $r9, $r14;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r11;
        com.google.wave.api.BlipData $r26;
        java.lang.StringBuilder $r4, $r5, $r29;
        com.google.wave.api.OperationRequest r0;
        com.google.wave.api.Element $r28;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r18;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r13, $r20;
        com.google.wave.api.data.ApiView $r30;
        int $i0, $i1, $i2, $i4;
        java.lang.String $r6, $r21, $r23, $r27;
        com.google.wave.api.InvalidRequestException $r31;
        org.waveprotocol.wave.model.conversation.ConversationThread $r19;
        org.waveprotocol.wave.model.document.Document $r17;
        java.lang.Object $r8, $r10, $r15;

        r22 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r11 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r24 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r18 := @parameter3: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r12 := @parameter4: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType DOCUMENT_INSERT_INLINE_BLIP_AFTER_ELEMENT>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_DATA>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r26 = (com.google.wave.api.BlipData) $r8;

        $r9 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r10 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r9);

        $r27 = (java.lang.String) $r10;

        $r13 = interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r12, $r27);

        $r14 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty ELEMENT>;

        $r15 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r14);

        $r28 = (com.google.wave.api.Element) $r15;

        $r30 = new com.google.wave.api.data.ApiView;

        $r17 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        specialinvoke $r30.<com.google.wave.api.data.ApiView: void <init>(org.waveprotocol.wave.model.document.Document,org.waveprotocol.wave.model.wave.Wavelet)>($r17, r18);

        $i0 = virtualinvoke $r30.<com.google.wave.api.data.ApiView: int locateElement(com.google.wave.api.Element)>($r28);

        $i4 = (int) -1;

        if $i0 != $i4 goto label3;

        $r31 = new com.google.wave.api.InvalidRequestException;

        specialinvoke $r31.<com.google.wave.api.InvalidRequestException: void <init>(java.lang.String,com.google.wave.api.OperationRequest)>("Requested element not found", r0);

        throw $r31;

     label3:
        $i1 = $i0 + 1;

        $i2 = virtualinvoke $r30.<com.google.wave.api.data.ApiView: int transformToXmlOffset(int)>($i1);

        $r19 = interfaceinvoke $r13.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.conversation.ConversationThread addReplyThread(int)>($i2);

        $r20 = interfaceinvoke $r19.<org.waveprotocol.wave.model.conversation.ConversationThread: org.waveprotocol.wave.model.conversation.ConversationBlip appendBlip()>();

        $r21 = virtualinvoke $r26.<com.google.wave.api.BlipData: java.lang.String getBlipId()>();

        interfaceinvoke r11.<org.waveprotocol.box.server.robots.OperationContext: void putBlip(java.lang.String,org.waveprotocol.wave.model.conversation.ConversationBlip)>($r21, $r20);

        $r23 = virtualinvoke $r26.<com.google.wave.api.BlipData: java.lang.String getContent()>();

        specialinvoke r22.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip,java.lang.String)>($r20, $r23);

        specialinvoke r22.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void processBlipCreatedEvent(com.google.wave.api.OperationRequest,org.waveprotocol.box.server.robots.OperationContext,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.conversation.ObservableConversation,org.waveprotocol.wave.model.conversation.ConversationBlip)>(r0, r11, r24, r12, $r20);

        return;
    }

    private void delete(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.conversation.ObservableConversation) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r0;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r14;
        java.util.HashMap $r12;
        com.google.wave.api.OperationType $r1, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r15;
        org.waveprotocol.wave.model.conversation.ObservableConversation r10;
        org.waveprotocol.wave.model.conversation.ConversationBlip $r11;
        java.lang.String $r6, $r13;
        com.google.wave.api.JsonRpcConstant$ParamsProperty $r7;
        boolean $z0;
        org.waveprotocol.box.server.robots.OperationContext r9;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.Object $r8;

        r14 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: com.google.wave.api.OperationRequest;

        r9 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r15 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r10 := @parameter3: org.waveprotocol.wave.model.conversation.ObservableConversation;

        $r1 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: com.google.wave.api.OperationType getOperationType(com.google.wave.api.OperationRequest)>(r0);

        $r2 = <com.google.wave.api.OperationType: com.google.wave.api.OperationType BLIP_DELETE>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported operation ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r6);

        $r7 = <com.google.wave.api.JsonRpcConstant$ParamsProperty: com.google.wave.api.JsonRpcConstant$ParamsProperty BLIP_ID>;

        $r8 = staticinvoke <org.waveprotocol.box.server.robots.util.OperationUtil: java.lang.Object getRequiredParameter(com.google.wave.api.OperationRequest,com.google.wave.api.JsonRpcConstant$ParamsProperty)>(r0, $r7);

        $r13 = (java.lang.String) $r8;

        $r11 = interfaceinvoke r9.<org.waveprotocol.box.server.robots.OperationContext: org.waveprotocol.wave.model.conversation.ConversationBlip getBlip(org.waveprotocol.wave.model.conversation.Conversation,java.lang.String)>(r10, $r13);

        interfaceinvoke $r11.<org.waveprotocol.wave.model.conversation.ConversationBlip: void delete()>();

        $r12 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        interfaceinvoke r9.<org.waveprotocol.box.server.robots.OperationContext: void constructResponse(com.google.wave.api.OperationRequest,java.util.Map)>(r0, $r12);

        return;
    }

    private void putContentForNewBlip(org.waveprotocol.wave.model.conversation.ConversationBlip, java.lang.String)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder $r3;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r1;
        char $c1;
        org.waveprotocol.wave.model.document.Document $r4;
        org.waveprotocol.wave.model.conversation.ConversationBlip r0;
        int $i0, $i2;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        $i2 = (int) $c1;

        if $i2 != 10 goto label1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.XmlStringBuilder: org.waveprotocol.wave.model.document.util.XmlStringBuilder createText(java.lang.String)>(r2);

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationBlip: org.waveprotocol.wave.model.document.Document getContent()>();

        staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: java.lang.Object appendToLastLine(org.waveprotocol.wave.model.document.MutableDocument,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r4, $r3);

        return;
    }

    private void processBlipCreatedEvent(com.google.wave.api.OperationRequest, org.waveprotocol.box.server.robots.OperationContext, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.conversation.ObservableConversation, org.waveprotocol.wave.model.conversation.ConversationBlip) throws com.google.wave.api.InvalidRequestException
    {
        com.google.wave.api.OperationRequest r9;
        org.waveprotocol.box.server.robots.OperationContext r8;
        org.waveprotocol.box.server.robots.operations.BlipOperationServices r10;
        long $l0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.conversation.ObservableConversation r4;
        org.waveprotocol.wave.model.conversation.ConversationBlip r6;
        java.lang.Long $r3;
        com.google.wave.api.event.WaveletBlipCreatedEvent $r0;
        java.lang.String $r2, $r5, $r7;

        r10 := @this: org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        r9 := @parameter0: com.google.wave.api.OperationRequest;

        r8 := @parameter1: org.waveprotocol.box.server.robots.OperationContext;

        r1 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter3: org.waveprotocol.wave.model.conversation.ObservableConversation;

        r6 := @parameter4: org.waveprotocol.wave.model.conversation.ConversationBlip;

        $r0 = new com.google.wave.api.event.WaveletBlipCreatedEvent;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5 = staticinvoke <org.waveprotocol.box.server.robots.util.ConversationUtil: java.lang.String getRootBlipId(org.waveprotocol.wave.model.conversation.Conversation)>(r4);

        $r7 = interfaceinvoke r6.<org.waveprotocol.wave.model.conversation.ConversationBlip: java.lang.String getId()>();

        specialinvoke $r0.<com.google.wave.api.event.WaveletBlipCreatedEvent: void <init>(com.google.wave.api.Wavelet,com.google.wave.api.impl.EventMessageBundle,java.lang.String,java.lang.Long,java.lang.String,java.lang.String)>(null, null, $r2, $r3, $r5, $r7);

        interfaceinvoke r8.<org.waveprotocol.box.server.robots.OperationContext: void processEvent(com.google.wave.api.OperationRequest,com.google.wave.api.event.Event)>(r9, $r0);

        return;
    }

    public static org.waveprotocol.box.server.robots.operations.BlipOperationServices create()
    {
        org.waveprotocol.box.server.robots.operations.BlipOperationServices $r0;

        $r0 = new org.waveprotocol.box.server.robots.operations.BlipOperationServices;

        specialinvoke $r0.<org.waveprotocol.box.server.robots.operations.BlipOperationServices: void <init>()>();

        return $r0;
    }
}
