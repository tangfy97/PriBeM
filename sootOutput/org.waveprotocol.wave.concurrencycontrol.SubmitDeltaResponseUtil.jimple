public final class org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isEqual(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse, org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse r0, r2;
        long $l2, $l3;
        byte $b4;
        int $i0, $i1;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r1, $r3;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        $z0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ResponseStatusUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.ResponseStatus,org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r1, $r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: int getOperationsApplied()>();

        $i1 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: int getOperationsApplied()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        $z2 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z1 == $z2 goto label3;

        return 0;

     label3:
        $z3 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z3 == 0 goto label4;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()>();

        $r5 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()>();

        $z7 = staticinvoke <org.waveprotocol.wave.federation.ProtocolHashedVersionUtil: boolean isEqual(org.waveprotocol.wave.federation.ProtocolHashedVersion,org.waveprotocol.wave.federation.ProtocolHashedVersion)>($r4, $r5);

        if $z7 != 0 goto label4;

        return 0;

     label4:
        $z4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        $z5 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z4 == $z5 goto label5;

        return 0;

     label5:
        $z6 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z6 == 0 goto label6;

        $l2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: long getTimestampAfterApplication()>();

        $l3 = interfaceinvoke r2.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: long getTimestampAfterApplication()>();

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public static boolean areAllEqual(java.util.List, java.util.List)
    {
        java.util.Iterator $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse $r5, $r7;
        java.util.List r0, r1;
        int $i0, $i1;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse) $r4;

        $r6 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse) $r6;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponseUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse,org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)>($r5, $r7);

        if $z1 != 0 goto label2;

        return 0;

     label3:
        return 1;
    }

    public static int getHashCode(org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse)
    {
        org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse r0;
        long $l6;
        java.lang.Integer $r2;
        java.lang.Long $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, i9, i10, $i11, $i12;
        org.waveprotocol.wave.federation.ProtocolHashedVersion $r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i9 = 31 + $i0;

        $i1 = 31 * i9;

        $i2 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: int getOperationsApplied()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = virtualinvoke $r2.<java.lang.Integer: int hashCode()>();

        i10 = $i1 + $i3;

        $i4 = 31 * i10;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasHashedVersionAfterApplication()>();

        if $z0 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: org.waveprotocol.wave.federation.ProtocolHashedVersion getHashedVersionAfterApplication()>();

        $i11 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i11 = 0;

     label2:
        $i8 = $i4 + $i11;

        $i5 = 31 * $i8;

        $z1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: boolean hasTimestampAfterApplication()>();

        if $z1 == 0 goto label3;

        $l6 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.SubmitDeltaResponse: long getTimestampAfterApplication()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $i12 = virtualinvoke $r3.<java.lang.Long: int hashCode()>();

        goto label4;

     label3:
        $i12 = 0;

     label4:
        $i7 = $i5 + $i12;

        return $i7;
    }
}
