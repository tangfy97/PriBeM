public class org.apache.jena.riot.system.IO_JenaWriters extends java.lang.Object
{
    private static java.util.Map mapJenaNameToFormat;

    public void <init>()
    {
        org.apache.jena.riot.system.IO_JenaWriters r0;

        r0 := @this: org.apache.jena.riot.system.IO_JenaWriters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.jena.riot.RDFFormat getFormatForJenaWriter(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0;
        org.apache.jena.riot.RDFFormat $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.riot.system.IO_JenaWriters: java.util.Map mapJenaNameToFormat>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.jena.riot.RDFFormat) $r2;

        return $r3;
    }

    public static void setFormatForJenaWriter(java.lang.String, org.apache.jena.riot.RDFFormat)
    {
        java.lang.String r0;
        org.apache.jena.riot.RDFFormat r1;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.jena.riot.RDFFormat;

        $r2 = <org.apache.jena.riot.system.IO_JenaWriters: java.util.Map mapJenaNameToFormat>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public static java.util.Collection getJenaWriterNames()
    {
        java.util.Set $r1;
        java.util.Map $r0;

        $r0 = <org.apache.jena.riot.system.IO_JenaWriters: java.util.Map mapJenaNameToFormat>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        return $r1;
    }

    public static void wireIntoJena()
    {
        org.apache.jena.riot.RDFFormat $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        $r0 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat RDFXML_PLAIN>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("RDF/XML", $r0);

        $r1 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat RDFXML_ABBREV>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("RDF/XML-ABBREV", $r1);

        $r2 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat NTRIPLES>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N-TRIPLE", $r2);

        $r3 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat NTRIPLES>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("NT", $r3);

        $r4 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat NTRIPLES>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N-TRIPLES", $r4);

        $r5 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat NTRIPLES>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N-Triples", $r5);

        $r6 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N3", $r6);

        $r7 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE_PRETTY>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N3-PP", $r7);

        $r8 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE_BLOCKS>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N3-PLAIN", $r8);

        $r9 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE_FLAT>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N3-TRIPLES", $r9);

        $r10 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE_FLAT>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("N3-TRIPLE", $r10);

        $r11 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("TURTLE", $r11);

        $r12 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("Turtle", $r12);

        $r13 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat TURTLE>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("TTL", $r13);

        $r14 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat RDFJSON>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("RDF/JSON", $r14);

        $r15 = <org.apache.jena.riot.RDFFormat: org.apache.jena.riot.RDFFormat RDFJSON>;

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void setFormatForJenaWriter(java.lang.String,org.apache.jena.riot.RDFFormat)>("RDFJSON", $r15);

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("RDF/XML", class "Lcom/hp/hpl/jena/xmloutput/impl/Basic;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("RDF/XML-ABBREV", class "Lcom/hp/hpl/jena/xmloutput/impl/Abbreviated;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N-TRIPLE", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_NTriples;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N-TRIPLES", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_NTriples;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N-Triples", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_NTriples;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("NT", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_NTriples;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N3", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_N3;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N3-PP", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_N3_PP;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N3-PLAIN", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_N3Plain;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N3-TRIPLES", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_N3Triples;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("N3-TRIPLE", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_N3TriplesAlt;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("TURTLE", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_Turtle;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("Turtle", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_Turtle1;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("TTL", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_Turtle2;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("RDF/JSON", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_RDFJSON;");

        staticinvoke <org.apache.jena.riot.system.IO_JenaWriters: void registerForModelWrite(java.lang.String,java.lang.Class)>("RDFJSON", class "Lorg/apache/jena/riot/adapters/JenaReadersWriters$RDFWriterRIOT_RDFJSON;");

        return;
    }

    public static void resetJena()
    {
        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("RDF/XML", "com.hp.hpl.jena.xmloutput.impl.Basic");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("RDF/XML-ABBREV", "com.hp.hpl.jena.xmloutput.impl.Abbreviated");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N-TRIPLE", "com.hp.hpl.jena.rdf.model.impl.NTripleWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("NT", "");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N-TRIPLES", "com.hp.hpl.jena.rdf.model.impl.NTripleWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N-Triples", "com.hp.hpl.jena.rdf.model.impl.NTripleWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N3", "com.hp.hpl.jena.n3.N3JenaWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N3-PP", "com.hp.hpl.jena.n3.N3JenaWriterPP");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N3-PLAIN", "com.hp.hpl.jena.n3.N3TurtleJenaWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N3-TRIPLES", "com.hp.hpl.jena.n3.N3TurtleJenaWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("N3-TRIPLE", "com.hp.hpl.jena.n3.N3JenaWriterTriples");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("TURTLE", "com.hp.hpl.jena.n3.N3TurtleJenaWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("Turtle", "com.hp.hpl.jena.n3.N3TurtleJenaWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("TTL", "com.hp.hpl.jena.n3.N3TurtleJenaWriter");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("RDF/JSON", "");

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>("RDFJSON", "");

        return;
    }

    public static void registerForModelWrite(java.lang.String, java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.hp.hpl.jena.rdf.model.impl.RDFWriterFImpl: java.lang.String setBaseWriterClassName(java.lang.String,java.lang.String)>(r0, $r2);

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.jena.riot.system.IO_JenaWriters: java.util.Map mapJenaNameToFormat> = $r0;

        return;
    }
}
