public final class org.apache.lucene.util.PagedBytes$Reader extends java.lang.Object
{
    private final byte[][] blocks;
    private final int[] blockEnds;
    private final int blockBits;
    private final int blockMask;
    private final int blockSize;
    static final boolean $assertionsDisabled;

    private void <init>(org.apache.lucene.util.PagedBytes)
    {
        byte[] $r15;
        org.apache.lucene.util.PagedBytes$Reader r0;
        org.apache.lucene.util.PagedBytes r1;
        java.lang.Integer $r11;
        int[] $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.util.List $r2, $r9, $r13;
        byte[][] $r3, $r4, $r5, $r12;
        java.lang.Object $r10, $r14;

        r0 := @this: org.apache.lucene.util.PagedBytes$Reader;

        r1 := @parameter0: org.apache.lucene.util.PagedBytes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.lucene.util.PagedBytes: java.util.List access$000(org.apache.lucene.util.PagedBytes)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (byte[])[$i0];

        r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks> = $r3;

        i8 = 0;

     label1:
        $r4 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $i1 = lengthof $r4;

        if i8 >= $i1 goto label2;

        $r12 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $r13 = staticinvoke <org.apache.lucene.util.PagedBytes: java.util.List access$000(org.apache.lucene.util.PagedBytes)>(r1);

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i8);

        $r15 = (byte[]) $r14;

        $r12[i8] = $r15;

        i8 = i8 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $i2 = lengthof $r5;

        $r6 = newarray (int)[$i2];

        r0.<org.apache.lucene.util.PagedBytes$Reader: int[] blockEnds> = $r6;

        i9 = 0;

     label3:
        $r7 = r0.<org.apache.lucene.util.PagedBytes$Reader: int[] blockEnds>;

        $i3 = lengthof $r7;

        if i9 >= $i3 goto label4;

        $r8 = r0.<org.apache.lucene.util.PagedBytes$Reader: int[] blockEnds>;

        $r9 = staticinvoke <org.apache.lucene.util.PagedBytes: java.util.List access$100(org.apache.lucene.util.PagedBytes)>(r1);

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i9);

        $r11 = (java.lang.Integer) $r10;

        $i7 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r8[i9] = $i7;

        i9 = i9 + 1;

        goto label3;

     label4:
        $i4 = staticinvoke <org.apache.lucene.util.PagedBytes: int access$200(org.apache.lucene.util.PagedBytes)>(r1);

        r0.<org.apache.lucene.util.PagedBytes$Reader: int blockBits> = $i4;

        $i5 = staticinvoke <org.apache.lucene.util.PagedBytes: int access$300(org.apache.lucene.util.PagedBytes)>(r1);

        r0.<org.apache.lucene.util.PagedBytes$Reader: int blockMask> = $i5;

        $i6 = staticinvoke <org.apache.lucene.util.PagedBytes: int access$400(org.apache.lucene.util.PagedBytes)>(r1);

        r0.<org.apache.lucene.util.PagedBytes$Reader: int blockSize> = $i6;

        return;
    }

    public void fillSlice(org.apache.lucene.util.BytesRef, long, int)
    {
        byte[] $r2, $r4, $r5, $r7, $r8, $r10;
        boolean $z0, $z1;
        org.apache.lucene.util.BytesRef r1;
        byte[][] $r3, $r6, $r9;
        java.lang.StringBuilder $r13, $r14, $r15;
        long l0, $l2, $l4, $l5;
        java.lang.AssertionError $r11, $r12;
        org.apache.lucene.util.PagedBytes$Reader r0;
        int $i1, $i3, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r16;

        r0 := @this: org.apache.lucene.util.PagedBytes$Reader;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        l0 := @parameter1: long;

        i6 := @parameter2: int;

        $z0 = <org.apache.lucene.util.PagedBytes$Reader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i6 >= 0 goto label1;

        $r12 = new java.lang.AssertionError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.util.PagedBytes$Reader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $i17 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockSize>;

        $i18 = $i17 + 1;

        if i6 <= $i18 goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $i1 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockBits>;

        $l2 = l0 >> $i1;

        $i19 = (int) $l2;

        $i3 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockMask>;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        $i20 = (int) $l5;

        r1.<org.apache.lucene.util.BytesRef: int length> = i6;

        $i7 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockSize>;

        $i8 = $i7 - $i20;

        if $i8 < i6 goto label3;

        $r9 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $r10 = $r9[$i19];

        r1.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r10;

        r1.<org.apache.lucene.util.BytesRef: int offset> = $i20;

        goto label4;

     label3:
        $r2 = newarray (byte)[i6];

        r1.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r2;

        r1.<org.apache.lucene.util.BytesRef: int offset> = 0;

        $r3 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $r5 = $r3[$i19];

        $r4 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i9 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockSize>;

        $i10 = $i9 - $i20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i20, $r4, 0, $i10);

        $r6 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $i11 = 1 + $i19;

        $r8 = $r6[$i11];

        $r7 = r1.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i12 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockSize>;

        $i16 = $i12 - $i20;

        $i13 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockSize>;

        $i14 = $i13 - $i20;

        $i15 = i6 - $i14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, $i16, $i15);

     label4:
        return;
    }

    public void fill(org.apache.lucene.util.BytesRef, long)
    {
        byte[] $r3;
        byte $b8, $b10, $b11, $b13, $b19;
        boolean $z0;
        org.apache.lucene.util.BytesRef r1;
        byte[][] $r2;
        long l0, $l2, $l5, $l6;
        java.lang.AssertionError $r5;
        org.apache.lucene.util.PagedBytes$Reader r0;
        short $s9, $s14, $s21, $s24;
        int $i1, i3, $i4, i7, $i12, $i15, $i16, $i17, $i18, $i20, $i22, $i23, $i25;

        r0 := @this: org.apache.lucene.util.PagedBytes$Reader;

        r1 := @parameter0: org.apache.lucene.util.BytesRef;

        l0 := @parameter1: long;

        $i1 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockBits>;

        $l2 = l0 >> $i1;

        i3 = (int) $l2;

        $i4 = r0.<org.apache.lucene.util.PagedBytes$Reader: int blockMask>;

        $l5 = (long) $i4;

        $l6 = l0 & $l5;

        i7 = (int) $l6;

        $r2 = r0.<org.apache.lucene.util.PagedBytes$Reader: byte[][] blocks>;

        $r3 = $r2[i3];

        r1.<org.apache.lucene.util.BytesRef: byte[] bytes> = $r3;

        $b8 = $r3[i7];

        $s21 = (short) $b8;

        $s9 = $s21 & 128;

        if $s9 != 0 goto label1;

        $b19 = $r3[i7];

        $i22 = (int) $b19;

        r1.<org.apache.lucene.util.BytesRef: int length> = $i22;

        $i20 = i7 + 1;

        r1.<org.apache.lucene.util.BytesRef: int offset> = $i20;

        goto label2;

     label1:
        $b10 = $r3[i7];

        $b11 = $b10 & 127;

        $i23 = (int) $b11;

        $i15 = $i23 << 8;

        $i12 = 1 + i7;

        $b13 = $r3[$i12];

        $s24 = (short) $b13;

        $s14 = $s24 & 255;

        $i25 = (int) $s14;

        $i16 = $i15 | $i25;

        r1.<org.apache.lucene.util.BytesRef: int length> = $i16;

        $i17 = i7 + 2;

        r1.<org.apache.lucene.util.BytesRef: int offset> = $i17;

        $z0 = <org.apache.lucene.util.PagedBytes$Reader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i18 = r1.<org.apache.lucene.util.BytesRef: int length>;

        if $i18 > 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        return;
    }

    void <init>(org.apache.lucene.util.PagedBytes, org.apache.lucene.util.PagedBytes$1)
    {
        org.apache.lucene.util.PagedBytes$Reader r0;
        org.apache.lucene.util.PagedBytes r1;
        org.apache.lucene.util.PagedBytes$1 r2;

        r0 := @this: org.apache.lucene.util.PagedBytes$Reader;

        r1 := @parameter0: org.apache.lucene.util.PagedBytes;

        r2 := @parameter1: org.apache.lucene.util.PagedBytes$1;

        specialinvoke r0.<org.apache.lucene.util.PagedBytes$Reader: void <init>(org.apache.lucene.util.PagedBytes)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/PagedBytes;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.PagedBytes$Reader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
