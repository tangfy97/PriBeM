final class org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint
{
    private final com.google.gwt.dom.client.Node ref;
    private final org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type pointType;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.extract.SelectionMatcher this$0;

    void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher, com.google.gwt.dom.client.Node, org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r1;
        java.lang.AssertionError $r5, $r6;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type r3;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl r0;
        com.google.gwt.dom.client.Node r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r2 := @parameter1: com.google.gwt.dom.client.Node;

        r3 := @parameter2: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: org.waveprotocol.wave.client.editor.extract.SelectionMatcher this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $z1 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.extract.SelectionMatcher: com.google.gwt.dom.client.Node access$000(org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r1);

        $z2 = virtualinvoke $r4.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>(r2);

        if $z2 != 0 goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Reference node not attached");

        throw $r5;

     label2:
        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref> = r2;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type pointType> = r3;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getPoint()
    {
        java.lang.AssertionError $r19;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type $r1;
        int[] $r2;
        int $i0, $i1;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl r0;
        boolean $z0;
        java.lang.RuntimeException $r16;
        org.waveprotocol.wave.model.document.util.Point$El $r6, $r10, $r15;
        com.google.gwt.dom.client.Element $r8, $r12, $r18;
        com.google.gwt.dom.client.Node $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r14, $r17;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl;

        $z0 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r17 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r18 = virtualinvoke $r17.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        if $r18 != null goto label1;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>("Reference node must be attached when getting point");

        throw $r19;

     label1:
        $r2 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$1: int[] $SwitchMap$org$waveprotocol$wave$client$editor$extract$SelectionMatcher$LazyPoint$Type>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type pointType>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint$Type: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label2:
        $r11 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r12 = virtualinvoke $r11.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $r13 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r14 = virtualinvoke $r13.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getNextSibling()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r12, $r14);

        return $r15;

     label3:
        $r7 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r8 = virtualinvoke $r7.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Element getParentElement()>();

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r8, $r9);

        return $r10;

     label4:
        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: com.google.gwt.dom.client.Node ref>;

        $r5 = virtualinvoke $r3.<com.google.gwt.dom.client.Node: com.google.gwt.dom.client.Node getFirstChild()>();

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $r6;

     label5:
        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("invalid case");

        throw $r16;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/SelectionMatcher;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPointImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
