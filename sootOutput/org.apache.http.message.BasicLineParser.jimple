public class org.apache.http.message.BasicLineParser extends java.lang.Object implements org.apache.http.message.LineParser
{
    public static final org.apache.http.message.BasicLineParser DEFAULT;
    protected final org.apache.http.ProtocolVersion protocol;

    public void <init>(org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion r1;

        r0 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        r1 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label1:
        r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol> = r1;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicLineParser r0;

        r0 := @this: org.apache.http.message.BasicLineParser;

        specialinvoke r0.<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>(null);

        return;
    }

    public static final org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        org.apache.http.message.LineParser r5;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.ProtocolVersion $r3;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r2;
        java.lang.StringBuilder $r10, $r12, $r16, $r18, $r22, $r24, $r31, $r33, $r38, $r40, $r44, $r46, $r48, $r50, $r52;
        java.lang.String $r4, $r5, $r6, $r11, $r13, $r17, $r19, $r23, $r25, $r32, $r34, $r39, $r41;
        java.lang.NumberFormatException $r28, $r35;
        org.apache.http.ProtocolVersion $r3, $r7;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, i16, i17, i18, i19, $i20, $i21, $i22, $i24, $i26;
        org.apache.http.ParseException $r45, $r47, $r49, $r51, $r53;
        char $c12, $c14, $c15;
        java.lang.IllegalArgumentException $r42, $r43;
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.message.ParserCursor r1;

        r2 := @this: org.apache.http.message.BasicLineParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label01;

        $r42 = new java.lang.IllegalArgumentException;

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r42;

     label01:
        if r1 != null goto label02;

        $r43 = new java.lang.IllegalArgumentException;

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r43;

     label02:
        $r3 = r2.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r4 = virtualinvoke $r3.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i2 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

        virtualinvoke r2.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        $i3 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i4 = $i3 + $i0;

        $i5 = $i4 + 4;

        if $i5 <= $i2 goto label03;

        $r45 = new org.apache.http.ParseException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r23 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<org.apache.http.ParseException: void <init>(java.lang.String)>($r25);

        throw $r45;

     label03:
        z0 = 1;

        i16 = 0;

     label04:
        if z0 == 0 goto label07;

        if i16 >= $i0 goto label07;

        $i13 = $i3 + i16;

        $c14 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i13);

        $c15 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i16);

        $i20 = (int) $c14;

        $i21 = (int) $c15;

        if $i20 != $i21 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        z0 = $z1;

        i16 = i16 + 1;

        goto label04;

     label07:
        if z0 == 0 goto label10;

        $i11 = $i3 + $i0;

        $c12 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i11);

        $i22 = (int) $c12;

        if $i22 != 47 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        z0 = $z2;

     label10:
        if z0 != 0 goto label11;

        $r47 = new org.apache.http.ParseException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r17 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<org.apache.http.ParseException: void <init>(java.lang.String)>($r19);

        throw $r47;

     label11:
        $i6 = $i0 + 1;

        i17 = $i3 + $i6;

        $i7 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(46, i17, $i2);

        $i24 = (int) -1;

        if $i7 != $i24 goto label12;

        $r49 = new org.apache.http.ParseException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol version number: ");

        $r11 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<org.apache.http.ParseException: void <init>(java.lang.String)>($r13);

        throw $r49;

     label12:
        $r5 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i17, $i7);

        $i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label13:
        goto label15;

     label14:
        $r35 := @caughtexception;

        $r51 = new org.apache.http.ParseException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol major version number: ");

        $r39 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<org.apache.http.ParseException: void <init>(java.lang.String)>($r41);

        throw $r51;

     label15:
        i18 = $i7 + 1;

        $i9 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, i18, $i2);

        i19 = $i9;

        $i26 = (int) -1;

        if $i9 != $i26 goto label16;

        i19 = $i2;

     label16:
        $r6 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i18, i19);

        $i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

     label17:
        goto label19;

     label18:
        $r28 := @caughtexception;

        $r53 = new org.apache.http.ParseException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol minor version number: ");

        $r32 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<org.apache.http.ParseException: void <init>(java.lang.String)>($r34);

        throw $r53;

     label19:
        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>(i19);

        $r7 = virtualinvoke r2.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>($i8, $i10);

        return $r7;

        catch java.lang.NumberFormatException from label12 to label13 with label14;
        catch java.lang.NumberFormatException from label16 to label17 with label18;
    }

    protected org.apache.http.ProtocolVersion createProtocolVersion(int, int)
    {
        org.apache.http.message.BasicLineParser r0;
        org.apache.http.ProtocolVersion $r1, $r2;
        int i0, i1;

        r0 := @this: org.apache.http.message.BasicLineParser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r2 = virtualinvoke $r1.<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>(i0, i1);

        return $r2;
    }

    public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser r2;
        boolean $z0, z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i9, $i11, $i12, i13, $i14, $i15, $i16, i17, $i18, $i19, $i20;
        java.lang.String $r4;
        char $c5, $c7, $c8, $c10;
        java.lang.IllegalArgumentException $r7, $r8;
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.ProtocolVersion $r3;
        org.apache.http.message.ParserCursor r1;

        r2 := @this: org.apache.http.message.BasicLineParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label01;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r7;

     label01:
        if r1 != null goto label02;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r8;

     label02:
        $i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        i13 = $i0;

        $r3 = r2.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r4 = virtualinvoke $r3.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i2 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i3 = $i1 + 4;

        if $i2 >= $i3 goto label03;

        return 0;

     label03:
        if $i0 >= 0 goto label04;

        $i11 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i12 = $i11 - 4;

        i13 = $i12 - $i1;

        goto label06;

     label04:
        if $i0 != 0 goto label06;

     label05:
        $i9 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int length()>();

        if i13 >= $i9 goto label06;

        $c10 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i13);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c10);

        if $z0 == 0 goto label06;

        i13 = i13 + 1;

        goto label05;

     label06:
        $i14 = i13 + $i1;

        $i15 = $i14 + 4;

        $i16 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i15 <= $i16 goto label07;

        return 0;

     label07:
        z1 = 1;

        i17 = 0;

     label08:
        if z1 == 0 goto label11;

        if i17 >= $i1 goto label11;

        $i6 = i13 + i17;

        $c7 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i6);

        $c8 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i17);

        $i18 = (int) $c7;

        $i19 = (int) $c8;

        if $i18 != $i19 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        z1 = $z2;

        i17 = i17 + 1;

        goto label08;

     label11:
        if z1 == 0 goto label14;

        $i4 = i13 + $i1;

        $c5 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i4);

        $i20 = (int) $c5;

        if $i20 != 47 goto label12;

        $z3 = 1;

        goto label13;

     label12:
        $z3 = 0;

     label13:
        z1 = $z3;

     label14:
        return z1;
    }

    public static final org.apache.http.RequestLine parseRequestLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        org.apache.http.message.LineParser r5;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.RequestLine $r3;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r2;
        java.lang.IndexOutOfBoundsException $r27;
        org.apache.http.RequestLine $r6;
        boolean $z0;
        java.lang.StringBuilder $r8, $r9, $r11, $r14, $r15, $r17, $r20, $r21, $r23, $r29, $r30, $r32;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3, $r4, $r10, $r12, $r16, $r18, $r22, $r24, $r31, $r33;
        org.apache.http.ParseException $r7, $r13, $r19, $r28;
        java.lang.IllegalArgumentException $r25, $r26;
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.ProtocolVersion $r5;
        org.apache.http.message.ParserCursor r1;

        r2 := @this: org.apache.http.message.BasicLineParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label1;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r26;

     label1:
        if r1 != null goto label2;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r25;

     label2:
        $i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label3:
        virtualinvoke r2.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        $i2 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i2, $i1);

        if $i3 >= 0 goto label4;

        $r19 = new org.apache.http.ParseException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r22 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.apache.http.ParseException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label4:
        $r3 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i2, $i3);

        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>($i3);

        virtualinvoke r2.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        $i4 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i5 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i4, $i1);

        if $i5 >= 0 goto label5;

        $r13 = new org.apache.http.ParseException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r16 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.ParseException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label5:
        $r4 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i4, $i5);

        virtualinvoke r1.<org.apache.http.message.ParserCursor: void updatePos(int)>($i5);

        $r5 = virtualinvoke r2.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        virtualinvoke r2.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        $z0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label6;

        $r7 = new org.apache.http.ParseException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r10 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.http.ParseException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        $r6 = virtualinvoke r2.<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>($r3, $r4, $r5);

     label7:
        return $r6;

     label8:
        $r27 := @caughtexception;

        $r28 = new org.apache.http.ParseException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r31 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.http.ParseException: void <init>(java.lang.String)>($r33);

        throw $r28;

        catch java.lang.IndexOutOfBoundsException from label3 to label7 with label8;
    }

    protected org.apache.http.RequestLine createRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser r4;
        org.apache.http.ProtocolVersion r3;
        org.apache.http.message.BasicRequestLine $r0;
        java.lang.String r1, r2;

        r4 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.http.ProtocolVersion;

        $r0 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r0.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>(r1, r2, r3);

        return $r0;
    }

    public static final org.apache.http.StatusLine parseStatusLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        org.apache.http.message.LineParser r5;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.StatusLine $r3;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        java.lang.String r0;
        org.apache.http.message.ParserCursor $r2;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r4;

     label1:
        if r5 != null goto label2;

        r5 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i1);

        $r3 = interfaceinvoke r5.<org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser r2;
        java.lang.IndexOutOfBoundsException $r14;
        org.apache.http.StatusLine $r5;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r10, $r16, $r17, $r19, $r23, $r24, $r26;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, $i8;
        java.lang.String $r4, $r9, $r11, $r18, $r20, $r25, $r27, r28;
        org.apache.http.ParseException $r6, $r15, $r22;
        char $c5;
        java.lang.NumberFormatException $r21;
        java.lang.IllegalArgumentException $r12, $r13;
        org.apache.http.util.CharArrayBuffer r0;
        org.apache.http.ProtocolVersion $r3;
        org.apache.http.message.ParserCursor r1;

        r2 := @this: org.apache.http.message.BasicLineParser;

        r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r1 := @parameter1: org.apache.http.message.ParserCursor;

        if r0 != null goto label01;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r13;

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r12;

     label02:
        $i0 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        $r3 = virtualinvoke r2.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        virtualinvoke r2.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>(r0, r1);

        $i2 = virtualinvoke r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i2, $i1);

        i6 = $i3;

        if $i3 >= 0 goto label04;

        i6 = $i1;

     label04:
        $r4 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i2, i6);

        i7 = 0;

     label05:
        $i8 = virtualinvoke $r4.<java.lang.String: int length()>();

        if i7 >= $i8 goto label07;

        $c5 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i7);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c5);

        if $z0 != 0 goto label06;

        $r6 = new org.apache.http.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Status line contains invalid status code: ");

        $r9 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label06:
        i7 = i7 + 1;

        goto label05;

     label07:
        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

        $r22 = new org.apache.http.ParseException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Status line contains invalid status code: ");

        $r25 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<org.apache.http.ParseException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label10:
        if i6 >= $i1 goto label11;

        r28 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(i6, $i1);

        goto label12;

     label11:
        r28 = "";

     label12:
        $r5 = virtualinvoke r2.<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>($r3, $i4, r28);

     label13:
        return $r5;

     label14:
        $r14 := @caughtexception;

        $r15 = new org.apache.http.ParseException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid status line: ");

        $r18 = virtualinvoke r0.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.http.ParseException: void <init>(java.lang.String)>($r20);

        throw $r15;

        catch java.lang.NumberFormatException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label03 to label13 with label14;
    }

    protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
    {
        org.apache.http.message.BasicLineParser r3;
        org.apache.http.ProtocolVersion r1;
        org.apache.http.message.BasicStatusLine $r0;
        int i0;
        java.lang.String r2;

        r3 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.ProtocolVersion;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r0 = new org.apache.http.message.BasicStatusLine;

        specialinvoke $r0.<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>(r1, i0, r2);

        return $r0;
    }

    public static final org.apache.http.Header parseHeader(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.LineParser r4;
        int $i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.Header $r2;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.apache.http.message.LineParser;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r3;

     label1:
        if r4 != null goto label2;

        r4 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(r0);

        $r2 = interfaceinvoke r4.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>($r1);

        return $r2;
    }

    public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException
    {
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.BasicLineParser r2;
        org.apache.http.message.BufferedHeader $r0;

        r2 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r0 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r0.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>(r1);

        return $r0;
    }

    protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.util.CharArrayBuffer r1;
        org.apache.http.message.BasicLineParser r2;
        int $i0, i2;
        char $c1;
        org.apache.http.message.ParserCursor r0;
        boolean $z0;

        r2 := @this: org.apache.http.message.BasicLineParser;

        r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        r0 := @parameter1: org.apache.http.message.ParserCursor;

        i2 = virtualinvoke r0.<org.apache.http.message.ParserCursor: int getPos()>();

        $i0 = virtualinvoke r0.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label1:
        if i2 >= $i0 goto label2;

        $c1 = virtualinvoke r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>(i2);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c1);

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.http.message.ParserCursor: void updatePos(int)>(i2);

        return;
    }

    static void <clinit>()
    {
        org.apache.http.message.BasicLineParser $r0;

        $r0 = new org.apache.http.message.BasicLineParser;

        specialinvoke $r0.<org.apache.http.message.BasicLineParser: void <init>()>();

        <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT> = $r0;

        return;
    }
}
