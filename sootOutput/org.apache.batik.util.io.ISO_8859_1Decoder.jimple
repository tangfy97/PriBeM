public class org.apache.batik.util.io.ISO_8859_1Decoder extends org.apache.batik.util.io.AbstractCharDecoder
{

    public void <init>(java.io.InputStream)
    {
        org.apache.batik.util.io.ISO_8859_1Decoder r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.batik.util.io.ISO_8859_1Decoder;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.batik.util.io.AbstractCharDecoder: void <init>(java.io.InputStream)>(r1);

        return;
    }

    public int readChar() throws java.io.IOException
    {
        byte[] $r1;
        org.apache.batik.util.io.ISO_8859_1Decoder r0;
        short $s6, $s11;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i10, $i12;

        r0 := @this: org.apache.batik.util.io.ISO_8859_1Decoder;

        $i1 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int position>;

        $i0 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int count>;

        if $i1 != $i0 goto label1;

        virtualinvoke r0.<org.apache.batik.util.io.AbstractCharDecoder: void fillBuffer()>();

     label1:
        $i2 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int count>;

        $i8 = (int) -1;

        if $i2 != $i8 goto label2;

        $i10 = (int) -1;

        return $i10;

     label2:
        $r1 = r0.<org.apache.batik.util.io.AbstractCharDecoder: byte[] buffer>;

        $i3 = r0.<org.apache.batik.util.io.AbstractCharDecoder: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.batik.util.io.AbstractCharDecoder: int position> = $i4;

        $b5 = $r1[$i3];

        $s11 = (short) $b5;

        $s6 = $s11 & 255;

        $i12 = (int) $s6;

        return $i12;
    }
}
