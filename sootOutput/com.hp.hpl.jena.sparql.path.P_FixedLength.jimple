public class com.hp.hpl.jena.sparql.path.P_FixedLength extends com.hp.hpl.jena.sparql.path.P_Path1
{
    private final long count;

    public void <init>(com.hp.hpl.jena.sparql.path.Path, long)
    {
        long l0;
        com.hp.hpl.jena.sparql.path.Path r1;
        com.hp.hpl.jena.sparql.path.P_FixedLength r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_FixedLength;

        r1 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        l0 := @parameter1: long;

        specialinvoke r0.<com.hp.hpl.jena.sparql.path.P_Path1: void <init>(com.hp.hpl.jena.sparql.path.Path)>(r1);

        r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: long count> = l0;

        return;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        long $l0, $l1;
        com.hp.hpl.jena.sparql.path.P_FixedLength r1, r2;
        com.hp.hpl.jena.sparql.path.Path r0, $r3, $r4;
        byte $b2;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r5;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.sparql.path.P_FixedLength;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r5 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.path.P_FixedLength;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.path.P_FixedLength) r0;

        $l1 = r1.<com.hp.hpl.jena.sparql.path.P_FixedLength: long count>;

        $l0 = r2.<com.hp.hpl.jena.sparql.path.P_FixedLength: long count>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.P_FixedLength: com.hp.hpl.jena.sparql.path.Path getSubPath()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.path.P_FixedLength: com.hp.hpl.jena.sparql.path.Path getSubPath()>();

        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.path.Path: boolean equalTo(com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r4, r5);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public long getCount()
    {
        long $l0;
        com.hp.hpl.jena.sparql.path.P_FixedLength r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_FixedLength;

        $l0 = r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: long count>;

        return $l0;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.path.Path $r1;
        int $i1, $i2, $i3, $i4;
        long $l0;
        com.hp.hpl.jena.sparql.path.P_FixedLength r0;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_FixedLength;

        $l0 = r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: long count>;

        $i1 = (int) $l0;

        $i2 = 514 ^ $i1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_FixedLength: com.hp.hpl.jena.sparql.path.Path getSubPath()>();

        $i3 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i4 = $i2 ^ $i3;

        return $i4;
    }

    public void visit(com.hp.hpl.jena.sparql.path.PathVisitor)
    {
        com.hp.hpl.jena.sparql.path.PathVisitor r0;
        com.hp.hpl.jena.sparql.path.P_FixedLength r1;

        r1 := @this: com.hp.hpl.jena.sparql.path.P_FixedLength;

        r0 := @parameter0: com.hp.hpl.jena.sparql.path.PathVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.path.PathVisitor: void visit(com.hp.hpl.jena.sparql.path.P_FixedLength)>(r1);

        return;
    }
}
