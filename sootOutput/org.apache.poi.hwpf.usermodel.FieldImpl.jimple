class org.apache.poi.hwpf.usermodel.FieldImpl extends java.lang.Object implements org.apache.poi.hwpf.usermodel.Field
{
    private org.apache.poi.hwpf.model.PlexOfField endPlex;
    private org.apache.poi.hwpf.model.PlexOfField separatorPlex;
    private org.apache.poi.hwpf.model.PlexOfField startPlex;

    public void <init>(org.apache.poi.hwpf.model.PlexOfField, org.apache.poi.hwpf.model.PlexOfField, org.apache.poi.hwpf.model.PlexOfField)
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        org.apache.poi.hwpf.model.PlexOfField r1, r2, r4;
        int $i0, $i1, $i2;
        java.lang.String $r11, $r18, $r24;
        org.apache.poi.hwpf.model.FieldDescriptor $r3, $r5, $r12;
        java.lang.IllegalArgumentException $r6, $r13, $r19, $r25, $r26;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        r1 := @parameter0: org.apache.poi.hwpf.model.PlexOfField;

        r4 := @parameter1: org.apache.poi.hwpf.model.PlexOfField;

        r2 := @parameter2: org.apache.poi.hwpf.model.PlexOfField;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("startPlex == null");

        throw $r26;

     label1:
        if r2 != null goto label2;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("endPlex == null");

        throw $r25;

     label2:
        $r3 = virtualinvoke r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $i0 = virtualinvoke $r3.<org.apache.poi.hwpf.model.FieldDescriptor: int getBoundaryType()>();

        if $i0 == 19 goto label3;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startPlex (");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not type of FIELD_BEGIN");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label3:
        if r4 == null goto label4;

        $r12 = virtualinvoke r4.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $i2 = virtualinvoke $r12.<org.apache.poi.hwpf.model.FieldDescriptor: int getBoundaryType()>();

        if $i2 == 20 goto label4;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("separatorPlex");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not type of FIELD_SEPARATOR");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label4:
        $r5 = virtualinvoke r2.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $i1 = virtualinvoke $r5.<org.apache.poi.hwpf.model.FieldDescriptor: int getBoundaryType()>();

        if $i1 == 21 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endPlex (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not type of FIELD_END");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField startPlex> = r1;

        r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField separatorPlex> = r4;

        r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex> = r2;

        return;
    }

    public org.apache.poi.hwpf.usermodel.Range firstSubrange(org.apache.poi.hwpf.usermodel.Range)
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        org.apache.poi.hwpf.usermodel.FieldImpl$2 $r1;
        org.apache.poi.hwpf.usermodel.FieldImpl$1 $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0;
        org.apache.poi.hwpf.usermodel.Range r2;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        r2 := @parameter0: org.apache.poi.hwpf.usermodel.Range;

        $z0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: boolean hasSeparator()>();

        if $z0 == 0 goto label2;

        $i6 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkStartOffset()>();

        $i7 = $i6 + 1;

        $i8 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkSeparatorOffset()>();

        if $i7 != $i8 goto label1;

        return null;

     label1:
        $r3 = new org.apache.poi.hwpf.usermodel.FieldImpl$1;

        $i9 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkStartOffset()>();

        $i10 = $i9 + 1;

        $i11 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkSeparatorOffset()>();

        specialinvoke $r3.<org.apache.poi.hwpf.usermodel.FieldImpl$1: void <init>(org.apache.poi.hwpf.usermodel.FieldImpl,int,int,org.apache.poi.hwpf.usermodel.Range)>(r0, $i10, $i11, r2);

        return $r3;

     label2:
        $i0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkStartOffset()>();

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkEndOffset()>();

        if $i1 != $i2 goto label3;

        return null;

     label3:
        $r1 = new org.apache.poi.hwpf.usermodel.FieldImpl$2;

        $i3 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkStartOffset()>();

        $i4 = $i3 + 1;

        $i5 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkEndOffset()>();

        specialinvoke $r1.<org.apache.poi.hwpf.usermodel.FieldImpl$2: void <init>(org.apache.poi.hwpf.usermodel.FieldImpl,int,int,org.apache.poi.hwpf.usermodel.Range)>(r0, $i4, $i5, r2);

        return $r1;
    }

    public int getFieldEndOffset()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        int $i0, $i1;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: int getFcStart()>();

        $i1 = $i0 + 1;

        return $i1;
    }

    public int getFieldStartOffset()
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        int $i0;
        org.apache.poi.hwpf.model.PlexOfField $r1;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField startPlex>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: int getFcStart()>();

        return $i0;
    }

    public org.apache.poi.hwpf.usermodel.CharacterRun getMarkEndCharacterRun(org.apache.poi.hwpf.usermodel.Range)
    {
        org.apache.poi.hwpf.usermodel.Range $r0, r2;
        org.apache.poi.hwpf.usermodel.CharacterRun $r3;
        org.apache.poi.hwpf.usermodel.FieldImpl r1;
        int $i0, $i1, $i2;

        r1 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        r2 := @parameter0: org.apache.poi.hwpf.usermodel.Range;

        $r0 = new org.apache.poi.hwpf.usermodel.Range;

        $i0 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkEndOffset()>();

        $i1 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkEndOffset()>();

        $i2 = $i1 + 1;

        specialinvoke $r0.<org.apache.poi.hwpf.usermodel.Range: void <init>(int,int,org.apache.poi.hwpf.usermodel.Range)>($i0, $i2, r2);

        $r3 = virtualinvoke $r0.<org.apache.poi.hwpf.usermodel.Range: org.apache.poi.hwpf.usermodel.CharacterRun getCharacterRun(int)>(0);

        return $r3;
    }

    public int getMarkEndOffset()
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        int $i0;
        org.apache.poi.hwpf.model.PlexOfField $r1;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: int getFcStart()>();

        return $i0;
    }

    public org.apache.poi.hwpf.usermodel.CharacterRun getMarkSeparatorCharacterRun(org.apache.poi.hwpf.usermodel.Range)
    {
        org.apache.poi.hwpf.usermodel.CharacterRun $r3;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        org.apache.poi.hwpf.usermodel.Range $r1, r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        r2 := @parameter0: org.apache.poi.hwpf.usermodel.Range;

        $z0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: boolean hasSeparator()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new org.apache.poi.hwpf.usermodel.Range;

        $i0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkSeparatorOffset()>();

        $i1 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkSeparatorOffset()>();

        $i2 = $i1 + 1;

        specialinvoke $r1.<org.apache.poi.hwpf.usermodel.Range: void <init>(int,int,org.apache.poi.hwpf.usermodel.Range)>($i0, $i2, r2);

        $r3 = virtualinvoke $r1.<org.apache.poi.hwpf.usermodel.Range: org.apache.poi.hwpf.usermodel.CharacterRun getCharacterRun(int)>(0);

        return $r3;
    }

    public int getMarkSeparatorOffset()
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        int $i0;
        org.apache.poi.hwpf.model.PlexOfField $r1;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField separatorPlex>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: int getFcStart()>();

        return $i0;
    }

    public org.apache.poi.hwpf.usermodel.CharacterRun getMarkStartCharacterRun(org.apache.poi.hwpf.usermodel.Range)
    {
        org.apache.poi.hwpf.usermodel.Range $r0, r2;
        org.apache.poi.hwpf.usermodel.CharacterRun $r3;
        org.apache.poi.hwpf.usermodel.FieldImpl r1;
        int $i0, $i1, $i2;

        r1 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        r2 := @parameter0: org.apache.poi.hwpf.usermodel.Range;

        $r0 = new org.apache.poi.hwpf.usermodel.Range;

        $i0 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkStartOffset()>();

        $i1 = virtualinvoke r1.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkStartOffset()>();

        $i2 = $i1 + 1;

        specialinvoke $r0.<org.apache.poi.hwpf.usermodel.Range: void <init>(int,int,org.apache.poi.hwpf.usermodel.Range)>($i0, $i2, r2);

        $r3 = virtualinvoke $r0.<org.apache.poi.hwpf.usermodel.Range: org.apache.poi.hwpf.usermodel.CharacterRun getCharacterRun(int)>(0);

        return $r3;
    }

    public int getMarkStartOffset()
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        int $i0;
        org.apache.poi.hwpf.model.PlexOfField $r1;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField startPlex>;

        $i0 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: int getFcStart()>();

        return $i0;
    }

    public int getType()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        int $i0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField startPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $i0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: int getFieldType()>();

        return $i0;
    }

    public boolean hasSeparator()
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        org.apache.poi.hwpf.model.PlexOfField $r1;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField separatorPlex>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isHasSep()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFHasSep()>();

        return $z0;
    }

    public boolean isLocked()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFLocked()>();

        return $z0;
    }

    public boolean isNested()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFNested()>();

        return $z0;
    }

    public boolean isPrivateResult()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFPrivateResult()>();

        return $z0;
    }

    public boolean isResultDirty()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFResultDirty()>();

        return $z0;
    }

    public boolean isResultEdited()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFResultEdited()>();

        return $z0;
    }

    public boolean isZombieEmbed()
    {
        org.apache.poi.hwpf.model.PlexOfField $r1;
        org.apache.poi.hwpf.model.FieldDescriptor $r2;
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r1 = r0.<org.apache.poi.hwpf.usermodel.FieldImpl: org.apache.poi.hwpf.model.PlexOfField endPlex>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hwpf.model.PlexOfField: org.apache.poi.hwpf.model.FieldDescriptor getFld()>();

        $z0 = virtualinvoke $r2.<org.apache.poi.hwpf.model.FieldDescriptor: boolean isFZombieEmbed()>();

        return $z0;
    }

    public org.apache.poi.hwpf.usermodel.Range secondSubrange(org.apache.poi.hwpf.usermodel.Range)
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r0;
        org.apache.poi.hwpf.usermodel.FieldImpl$3 $r1;
        org.apache.poi.hwpf.usermodel.Range r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        r2 := @parameter0: org.apache.poi.hwpf.usermodel.Range;

        $z0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: boolean hasSeparator()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkSeparatorOffset()>();

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkEndOffset()>();

        if $i1 != $i2 goto label2;

     label1:
        return null;

     label2:
        $r1 = new org.apache.poi.hwpf.usermodel.FieldImpl$3;

        $i3 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkSeparatorOffset()>();

        $i4 = $i3 + 1;

        $i5 = virtualinvoke r0.<org.apache.poi.hwpf.usermodel.FieldImpl: int getMarkEndOffset()>();

        specialinvoke $r1.<org.apache.poi.hwpf.usermodel.FieldImpl$3: void <init>(org.apache.poi.hwpf.usermodel.FieldImpl,int,int,org.apache.poi.hwpf.usermodel.Range)>(r0, $i4, $i5, r2);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.poi.hwpf.usermodel.FieldImpl r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r7, $r12;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11;

        r2 := @this: org.apache.poi.hwpf.usermodel.FieldImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field [");

        $i0 = virtualinvoke r2.<org.apache.poi.hwpf.usermodel.FieldImpl: int getFieldStartOffset()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $i1 = virtualinvoke r2.<org.apache.poi.hwpf.usermodel.FieldImpl: int getFieldEndOffset()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] (type: 0x");

        $i2 = virtualinvoke r2.<org.apache.poi.hwpf.usermodel.FieldImpl: int getType()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $i3 = virtualinvoke r2.<org.apache.poi.hwpf.usermodel.FieldImpl: int getType()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }
}
