public final class com.jidesoft.utils.BigDecimalMathUtils extends java.lang.Object
{
    public static final java.math.BigDecimal TWO;

    protected void <init>()
    {
        com.jidesoft.utils.BigDecimalMathUtils r0;

        r0 := @this: com.jidesoft.utils.BigDecimalMathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.math.BigDecimal sum(java.util.List)
    {
        java.math.BigDecimal $r0, r4, r5;
        java.util.List r1;
        java.util.Iterator $r2;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);

        r5 = $r0;

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.math.BigDecimal) $r3;

        r5 = virtualinvoke r5.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(r4);

        goto label1;

     label2:
        return r5;
    }

    public static java.math.BigDecimal mean(java.util.List, java.math.MathContext)
    {
        java.math.BigDecimal $r1, $r2, $r4;
        java.util.List r0;
        java.math.MathContext r3;
        int $i0;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: java.math.MathContext;

        $r1 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal sum(java.util.List)>(r0);

        $r2 = new java.math.BigDecimal;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0);

        $r4 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.MathContext)>($r2, r3);

        return $r4;
    }

    public static java.math.BigDecimal min(java.util.List)
    {
        java.math.BigDecimal $r3;
        java.util.List r1;
        java.lang.Object $r2;
        java.util.TreeSet $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>(r1);

        $r2 = virtualinvoke $r0.<java.util.TreeSet: java.lang.Object first()>();

        $r3 = (java.math.BigDecimal) $r2;

        return $r3;
    }

    public static java.math.BigDecimal max(java.util.List)
    {
        java.math.BigDecimal $r3;
        java.util.List r1;
        java.lang.Object $r2;
        java.util.TreeSet $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.TreeSet;

        specialinvoke $r0.<java.util.TreeSet: void <init>(java.util.Collection)>(r1);

        $r2 = virtualinvoke $r0.<java.util.TreeSet: java.lang.Object last()>();

        $r3 = (java.math.BigDecimal) $r2;

        return $r3;
    }

    public static java.math.BigDecimal stddev(java.util.List, boolean, java.math.MathContext)
    {
        java.math.BigDecimal $r2, r3;
        java.util.List r0;
        java.math.MathContext r1;
        int $i0;
        boolean z0;

        r0 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.math.MathContext;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        if $i0 <= 1 goto label1;

        $r2 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal var(java.util.List,boolean,java.math.MathContext)>(r0, z0, r1);

        r3 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal sqrt(java.math.BigDecimal)>($r2);

        goto label3;

     label1:
        r3 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        goto label3;

     label2:
        r3 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(#NaN);

     label3:
        return r3;
    }

    public static java.math.BigDecimal var(java.util.List, boolean, java.math.MathContext)
    {
        java.util.ArrayList $r3;
        java.math.BigDecimal $r2, $r5, $r6, $r7, r9, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2;
        boolean $z0, z1;
        java.util.Iterator $r4;
        java.math.MathContext r1;
        java.util.List r0;
        java.lang.Object $r8;

        r0 := @parameter0: java.util.List;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.math.MathContext;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(#NaN);

        return $r13;

     label1:
        if $i0 != 1 goto label2;

        $r12 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        return $r12;

     label2:
        $r2 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal mean(java.util.List,java.math.MathContext)>(r0, r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.math.BigDecimal) $r8;

        $r10 = virtualinvoke r9.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r2);

        $r11 = virtualinvoke $r10.<java.math.BigDecimal: java.math.BigDecimal pow(int,java.math.MathContext)>(2, r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label3;

     label4:
        $r5 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal sum(java.util.List)>($r3);

        $r6 = new java.math.BigDecimal;

        if z1 == 0 goto label5;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        goto label6;

     label5:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

     label6:
        specialinvoke $r6.<java.math.BigDecimal: void <init>(int)>($i2);

        $r7 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.MathContext)>($r6, r1);

        return $r7;
    }

    public static java.math.BigDecimal sqrt(java.math.BigDecimal)
    {
        java.math.BigDecimal r0, $r11, $r17, $r18, $r19, $r20, r23, r24, $r28, $r30, $r31;
        byte $b2, $b3, $b5, b11;
        java.math.BigInteger $r12, $r13;
        java.lang.ArithmeticException $r27;
        java.math.RoundingMode $r2, $r10, $r16;
        java.math.MathContext $r25, $r29, $r32;
        java.lang.Double $r4, $r7;
        int $i0, $i1, $i4, $i6, $i7, i8, $i9, i10, $i12;
        java.lang.String $r5, $r8;
        double $d0, $d1, $d2;
        java.lang.IllegalArgumentException $r26;

        r0 := @parameter0: java.math.BigDecimal;

        $i0 = virtualinvoke r0.<java.math.BigDecimal: int precision()>();

        i10 = $i0;

        $r25 = new java.math.MathContext;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        specialinvoke $r25.<java.math.MathContext: void <init>(int,java.math.RoundingMode)>($i0, $r2);

        $d0 = virtualinvoke r0.<java.math.BigDecimal: double doubleValue()>();

        $i1 = virtualinvoke $r25.<java.math.MathContext: int getPrecision()>();

        if $i1 != 0 goto label1;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\nRoots need a MathContext precision > 0");

        throw $r26;

     label1:
        $b2 = $d0 cmpg 0.0;

        $i12 = (int) $b2;

        if $i12 >= 0 goto label2;

        $r27 = new java.lang.ArithmeticException;

        specialinvoke $r27.<java.lang.ArithmeticException: void <init>(java.lang.String)>("\nCannot calculate the square root of a negative number");

        throw $r27;

     label2:
        $b3 = $d0 cmpl 0.0;

        if $b3 != 0 goto label3;

        $r20 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigDecimal round(java.math.MathContext)>($r25);

        return $r20;

     label3:
        $i4 = virtualinvoke $r25.<java.math.MathContext: int getPrecision()>();

        if $i4 >= 50 goto label4;

        i10 = $i0 + 10;

     label4:
        b11 = 1;

        $b5 = $d0 cmpl #Infinity;

        if $b5 != 0 goto label5;

        $r12 = virtualinvoke r0.<java.math.BigDecimal: java.math.BigInteger unscaledValue()>();

        $i7 = virtualinvoke $r12.<java.math.BigInteger: int bitLength()>();

        i8 = $i7 / 2;

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i8);

        $r28 = new java.math.BigDecimal;

        specialinvoke $r28.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r13);

        r23 = $r28;

        $r29 = new java.math.MathContext;

        $r16 = <java.math.RoundingMode: java.math.RoundingMode HALF_DOWN>;

        specialinvoke $r29.<java.math.MathContext: void <init>(int,java.math.RoundingMode)>(5, $r16);

        i10 = i10 + 10;

        $r18 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        $r17 = <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal TWO>;

        $r19 = virtualinvoke $r17.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>($r28, $r29);

        r24 = virtualinvoke $r18.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.MathContext)>($r19, $r29);

        goto label6;

     label5:
        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $r30 = new java.math.BigDecimal;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r5 = virtualinvoke $r4.<java.lang.Double: java.lang.String toString()>();

        specialinvoke $r30.<java.math.BigDecimal: void <init>(java.lang.String)>($r5);

        r23 = $r30;

        $r31 = new java.math.BigDecimal;

        $d2 = 0.5 / $d1;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.Double: java.lang.String toString()>();

        specialinvoke $r31.<java.math.BigDecimal: void <init>(java.lang.String)>($r8);

        r24 = $r31;

        b11 = 64;

     label6:
        $i6 = virtualinvoke $r25.<java.math.MathContext: int getPrecision()>();

        $i9 = $i6 + i10;

        $r32 = new java.math.MathContext;

        $r10 = virtualinvoke $r25.<java.math.MathContext: java.math.RoundingMode getRoundingMode()>();

        specialinvoke $r32.<java.math.MathContext: void <init>(int,java.math.RoundingMode)>(b11, $r10);

        $r11 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal sqrtProcedure(java.math.MathContext,int,java.math.BigDecimal,java.math.BigDecimal,java.math.BigDecimal,java.math.BigDecimal,java.math.BigDecimal)>($r32, $i9, r0, r23, r24, null, null);

        return $r11;
    }

    private static java.math.BigDecimal sqrtProcedure(java.math.MathContext, int, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal)
    {
        java.math.BigDecimal $r0, $r1, $r2, $r3, $r4, $r5, $r6, r7, $r8, $r9, $r10, $r11, r15, r16, r17, r18;
        int $i0, $i1, i2, $i3, i4;
        java.math.RoundingMode $r13;
        java.math.MathContext $r12, r14;

        r14 := @parameter0: java.math.MathContext;

        i2 := @parameter1: int;

        r7 := @parameter2: java.math.BigDecimal;

        r15 := @parameter3: java.math.BigDecimal;

        r16 := @parameter4: java.math.BigDecimal;

        r17 := @parameter5: java.math.BigDecimal;

        r18 := @parameter6: java.math.BigDecimal;

        $r1 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        $r0 = <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal TWO>;

        $r2 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>(r15, r14);

        $r3 = virtualinvoke $r2.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>(r16, r14);

        $r4 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal,java.math.MathContext)>($r3, r14);

        $r5 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>(r16, r14);

        $r6 = virtualinvoke r16.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal,java.math.MathContext)>($r5, r14);

        $r8 = virtualinvoke r15.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>(r15, r14);

        $r9 = virtualinvoke r7.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal,java.math.MathContext)>($r8, r14);

        $r10 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal,java.math.MathContext)>($r6, r14);

        $r11 = virtualinvoke r15.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal,java.math.MathContext)>($r10, r14);

        $i0 = virtualinvoke r14.<java.math.MathContext: int getPrecision()>();

        if $i0 >= 2 goto label1;

        i4 = $i0 + 1;

        goto label2;

     label1:
        $i1 = $i0 * 2;

        i4 = $i1 - 1;

     label2:
        $i3 = 2 * i2;

        if i4 >= $i3 goto label3;

        $r12 = new java.math.MathContext;

        $r13 = virtualinvoke r14.<java.math.MathContext: java.math.RoundingMode getRoundingMode()>();

        specialinvoke $r12.<java.math.MathContext: void <init>(int,java.math.RoundingMode)>(i4, $r13);

        staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal sqrtProcedure(java.math.MathContext,int,java.math.BigDecimal,java.math.BigDecimal,java.math.BigDecimal,java.math.BigDecimal,java.math.BigDecimal)>($r12, i2, r7, $r11, $r6, $r4, $r9);

     label3:
        return $r11;
    }

    public static void main(java.lang.String[])
    {
        java.io.PrintStream $r1;
        java.math.BigDecimal $r0, $r2;
        java.lang.String[] r3;

        r3 := @parameter0: java.lang.String[];

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>("25029.33333");

        $r2 = staticinvoke <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal sqrt(java.math.BigDecimal)>($r0);

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.Object)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r0;

        $r0 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(2L);

        <com.jidesoft.utils.BigDecimalMathUtils: java.math.BigDecimal TWO> = $r0;

        return;
    }
}
