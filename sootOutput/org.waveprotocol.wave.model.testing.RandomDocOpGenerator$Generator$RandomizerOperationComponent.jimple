abstract class org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent extends java.lang.Object
{
    final org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator r1;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    abstract org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult check(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector);

    abstract void apply(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton);

    abstract void output(org.waveprotocol.wave.model.document.operation.DocOpCursor);

    boolean isAnnotationBoundary()
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Generator$RandomizerOperationComponent;

        return 0;
    }
}
