public class ucar.nc2.iosp.hdf4.ODLparser extends java.lang.Object
{
    private static org.slf4j.Logger log;
    private org.jdom.Document doc;
    private boolean debug;
    private boolean showRaw;
    private boolean show;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        ucar.nc2.iosp.hdf4.ODLparser r0;

        r0 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.hdf4.ODLparser: boolean debug> = 0;

        r0.<ucar.nc2.iosp.hdf4.ODLparser: boolean showRaw> = 0;

        r0.<ucar.nc2.iosp.hdf4.ODLparser: boolean show> = 0;

        return;
    }

    void showDoc(java.io.OutputStream)
    {
        java.io.OutputStream r3;
        org.jdom.Document $r4;
        ucar.nc2.iosp.hdf4.ODLparser r2;
        org.jdom.output.Format $r1;
        java.io.IOException $r5;
        org.jdom.output.XMLOutputter $r0;

        r2 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r3 := @parameter0: java.io.OutputStream;

        $r0 = new org.jdom.output.XMLOutputter;

        $r1 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>();

        specialinvoke $r0.<org.jdom.output.XMLOutputter: void <init>(org.jdom.output.Format)>($r1);

     label1:
        $r4 = r2.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Document doc>;

        virtualinvoke $r0.<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.OutputStream)>($r4, r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void parseFile(java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        ucar.nc2.iosp.hdf4.ODLparser r3;
        java.lang.String $r0, r1;

        r3 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.String;

        $r2 = staticinvoke <ucar.nc2.util.IO: byte[] readFileToByteArray(java.lang.String)>(r1);

        specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2);

        virtualinvoke r3.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Element parseFromString(java.lang.String)>($r0);

        return;
    }

    public org.jdom.Element parseFromString(java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.ODLparser r0;
        org.jdom.Document $r2;
        java.util.StringTokenizer $r3;
        java.lang.String r4, $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.PrintStream $r5, $r8;
        java.lang.StringBuilder $r7, $r9, $r10;
        org.jdom.Element $r1, r12;

        r0 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r4 := @parameter0: java.lang.String;

        $z0 = r0.<ucar.nc2.iosp.hdf4.ODLparser: boolean showRaw>;

        if $z0 == 0 goto label1;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Raw ODL=\n");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label1:
        $r1 = new org.jdom.Element;

        specialinvoke $r1.<org.jdom.Element: void <init>(java.lang.String)>("odl");

        $r2 = new org.jdom.Document;

        specialinvoke $r2.<org.jdom.Document: void <init>(org.jdom.Element)>($r1);

        r0.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Document doc> = $r2;

        r12 = $r1;

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r4, "\t\n\r\f");

     label2:
        $z6 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z6 == 0 goto label8;

        $r6 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("GROUP");

        if $z2 == 0 goto label3;

        r12 = virtualinvoke r0.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Element startGroup(org.jdom.Element,java.lang.String)>(r12, $r6);

        goto label7;

     label3:
        $z3 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("OBJECT");

        if $z3 == 0 goto label4;

        r12 = virtualinvoke r0.<ucar.nc2.iosp.hdf4.ODLparser: org.jdom.Element startObject(org.jdom.Element,java.lang.String)>(r12, $r6);

        goto label7;

     label4:
        $z4 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("END_OBJECT");

        if $z4 == 0 goto label5;

        virtualinvoke r0.<ucar.nc2.iosp.hdf4.ODLparser: void endObject(org.jdom.Element,java.lang.String)>(r12, $r6);

        r12 = virtualinvoke r12.<org.jdom.Element: org.jdom.Element getParentElement()>();

        goto label7;

     label5:
        $z5 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("END_GROUP");

        if $z5 == 0 goto label6;

        virtualinvoke r0.<ucar.nc2.iosp.hdf4.ODLparser: void endGroup(org.jdom.Element,java.lang.String)>(r12, $r6);

        r12 = virtualinvoke r12.<org.jdom.Element: org.jdom.Element getParentElement()>();

        goto label7;

     label6:
        virtualinvoke r0.<ucar.nc2.iosp.hdf4.ODLparser: void addField(org.jdom.Element,java.lang.String)>(r12, $r6);

     label7:
        goto label2;

     label8:
        $z1 = r0.<ucar.nc2.iosp.hdf4.ODLparser: boolean show>;

        if $z1 == 0 goto label9;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r0.<ucar.nc2.iosp.hdf4.ODLparser: void showDoc(java.io.OutputStream)>($r5);

     label9:
        return $r1;
    }

    org.jdom.Element startGroup(org.jdom.Element, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.ODLparser r7;
        java.lang.AssertionError $r6;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r2, $r3;
        org.jdom.Element $r4, r5;
        boolean $z0, $z1;

        r7 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r5 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "=");

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("GROUP");

        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = new org.jdom.Element;

        specialinvoke $r4.<org.jdom.Element: void <init>(java.lang.String)>($r3);

        virtualinvoke r5.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r4);

        return $r4;
    }

    void endGroup(org.jdom.Element, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.ODLparser r4;
        java.lang.AssertionError $r7, $r14;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r2, $r3, $r6, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r9;
        java.lang.StringBuilder $r8, $r10, $r11, $r12;
        org.jdom.Element r5;

        r4 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r5 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "=");

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("END_GROUP");

        if $z4 != 0 goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = r4.<ucar.nc2.iosp.hdf4.ODLparser: boolean debug>;

        if $z1 == 0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label2:
        $z2 = <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r6 = virtualinvoke r5.<org.jdom.Element: java.lang.String getName()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label3:
        return;
    }

    org.jdom.Element startObject(org.jdom.Element, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.ODLparser r7;
        java.lang.AssertionError $r6;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r2, $r3;
        org.jdom.Element $r4, r5;
        boolean $z0, $z1;

        r7 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r5 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "=");

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("OBJECT");

        if $z1 != 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = new org.jdom.Element;

        specialinvoke $r4.<org.jdom.Element: void <init>(java.lang.String)>($r3);

        virtualinvoke r5.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r4);

        return $r4;
    }

    void endObject(org.jdom.Element, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.ODLparser r4;
        java.lang.AssertionError $r7, $r20;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r2, $r3, $r6, $r11, $r13, $r19;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r15;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r14, $r16, $r17, $r18;
        org.jdom.Element r5;

        r4 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r5 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "=");

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("END_OBJECT");

        if $z4 != 0 goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label1:
        $r3 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = r4.<ucar.nc2.iosp.hdf4.ODLparser: boolean debug>;

        if $z1 == 0 goto label2;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label2:
        $z2 = <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r6 = virtualinvoke r5.<org.jdom.Element: java.lang.String getName()>();

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" !+ ");

        $r11 = virtualinvoke r5.<org.jdom.Element: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r7;

     label3:
        return;
    }

    void addField(org.jdom.Element, java.lang.String) throws java.io.IOException
    {
        ucar.nc2.iosp.hdf4.ODLparser r6;
        java.util.StringTokenizer $r0;
        java.lang.String r1, $r2, $r5, $r7;
        org.jdom.Element $r3, r4;
        boolean $z0, $z1;

        r6 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r4 := @parameter0: org.jdom.Element;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, "=");

        $r2 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r3 = new org.jdom.Element;

        specialinvoke $r3.<org.jdom.Element: void <init>(java.lang.String)>($r2);

        virtualinvoke r4.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r3);

        $r5 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z1 == 0 goto label1;

        virtualinvoke r6.<ucar.nc2.iosp.hdf4.ODLparser: void parseValueCollection(org.jdom.Element,java.lang.String)>($r3, $r5);

        return;

     label1:
        $r7 = virtualinvoke r6.<ucar.nc2.iosp.hdf4.ODLparser: java.lang.String stripQuotes(java.lang.String)>($r5);

        virtualinvoke $r3.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r7);

     label2:
        return;
    }

    void parseValueCollection(org.jdom.Element, java.lang.String)
    {
        ucar.nc2.iosp.hdf4.ODLparser r3;
        java.util.StringTokenizer $r0;
        int $i0, $i1;
        java.lang.String $r4, $r5, r7;
        org.jdom.Element r1, $r2, $r6;
        boolean $z0, $z1, $z2;

        r3 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r1 := @parameter0: org.jdom.Element;

        r7 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z0 == 0 goto label1;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $z1 = virtualinvoke r7.<java.lang.String: boolean endsWith(java.lang.String)>(")");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r7, "\",");

     label3:
        $z2 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label4;

        $r2 = new org.jdom.Element;

        specialinvoke $r2.<org.jdom.Element: void <init>(java.lang.String)>("value");

        $r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = virtualinvoke r3.<ucar.nc2.iosp.hdf4.ODLparser: java.lang.String stripQuotes(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r5);

        virtualinvoke r1.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r6);

        goto label3;

     label4:
        return;
    }

    java.lang.String stripQuotes(java.lang.String)
    {
        ucar.nc2.iosp.hdf4.ODLparser r0;
        int $i0, $i1;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.iosp.hdf4.ODLparser;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label2:
        return r1;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r1;
        ucar.nc2.iosp.hdf4.ODLparser $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new ucar.nc2.iosp.hdf4.ODLparser;

        specialinvoke $r0.<ucar.nc2.iosp.hdf4.ODLparser: void <init>()>();

        virtualinvoke $r0.<ucar.nc2.iosp.hdf4.ODLparser: void parseFile(java.lang.String)>("c:/temp/odl.struct.txt");

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/hdf4/ODLparser;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.hdf4.ODLparser: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/hdf4/ODLparser;");

        <ucar.nc2.iosp.hdf4.ODLparser: org.slf4j.Logger log> = $r1;

        return;
    }
}
