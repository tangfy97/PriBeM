public class com.jhlabs.image.FlipFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    public static final int FLIP_H;
    public static final int FLIP_V;
    public static final int FLIP_HV;
    public static final int FLIP_90CW;
    public static final int FLIP_90CCW;
    public static final int FLIP_180;
    private int operation;
    private int width;
    private int height;
    private int newWidth;
    private int newHeight;

    public void <init>()
    {
        com.jhlabs.image.FlipFilter r0;

        r0 := @this: com.jhlabs.image.FlipFilter;

        specialinvoke r0.<com.jhlabs.image.FlipFilter: void <init>(int)>(3);

        return;
    }

    public void <init>(int)
    {
        int i0;
        com.jhlabs.image.FlipFilter r0;

        r0 := @this: com.jhlabs.image.FlipFilter;

        i0 := @parameter0: int;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.FlipFilter: int operation> = i0;

        return;
    }

    public void setOperation(int)
    {
        int i0;
        com.jhlabs.image.FlipFilter r0;

        r0 := @this: com.jhlabs.image.FlipFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.FlipFilter: int operation> = i0;

        return;
    }

    public int getOperation()
    {
        int $i0;
        com.jhlabs.image.FlipFilter r0;

        r0 := @this: com.jhlabs.image.FlipFilter;

        $i0 = r0.<com.jhlabs.image.FlipFilter: int operation>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.FlipFilter r1;
        int[] $r2, $r7;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14, i15, i16, i17, i18, $i19, $i20, $i21;
        boolean $z0;
        java.awt.image.BufferedImage r0, $r4, r6;
        java.awt.image.ColorModel $r3;
        java.awt.image.WritableRaster $r5;

        r1 := @this: com.jhlabs.image.FlipFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r2 = virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, 0, $i0, $i1, null);

        i12 = $i0;

        i13 = $i1;

        $i2 = r1.<com.jhlabs.image.FlipFilter: int operation>;

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            default: goto label06;
        };

     label01:
        goto label06;

     label02:
        goto label06;

     label03:
        i12 = $i1;

        i13 = $i0;

        goto label06;

     label04:
        i12 = $i1;

        i13 = $i0;

        goto label06;

     label05:
        i12 = $i1;

        i13 = $i0;

        goto label06;

     label06:
        $i14 = i12 * i13;

        $r7 = newarray (int)[$i14];

        i15 = 0;

     label07:
        if i15 >= $i1 goto label17;

        i16 = 0;

     label08:
        if i16 >= $i0 goto label16;

        $i3 = i15 * $i0;

        i4 = $i3 + i16;

        i17 = i15;

        i18 = i16;

        $i5 = r1.<com.jhlabs.image.FlipFilter: int operation>;

        tableswitch($i5)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label12;
            case 5: goto label13;
            case 6: goto label14;
            default: goto label15;
        };

     label09:
        $i11 = $i0 - i16;

        i18 = $i11 - 1;

        goto label15;

     label10:
        $i10 = $i1 - i15;

        i17 = $i10 - 1;

        goto label15;

     label11:
        i17 = i16;

        i18 = i15;

        goto label15;

     label12:
        i17 = i16;

        $i9 = $i1 - i15;

        i18 = $i9 - 1;

        goto label15;

     label13:
        $i8 = $i0 - i16;

        i17 = $i8 - 1;

        i18 = i15;

        goto label15;

     label14:
        $i6 = $i1 - i15;

        i17 = $i6 - 1;

        $i7 = $i0 - i16;

        i18 = $i7 - 1;

     label15:
        $i19 = i17 * i12;

        $i20 = $i19 + i18;

        $i21 = $r2[i4];

        $r7[$i20] = $i21;

        i16 = i16 + 1;

        goto label08;

     label16:
        i15 = i15 + 1;

        goto label07;

     label17:
        if r6 != null goto label18;

        $r3 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = new java.awt.image.BufferedImage;

        $r5 = virtualinvoke $r3.<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>(i12, i13);

        $z0 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, $r5, $z0, null);

        r6 = $r4;

     label18:
        virtualinvoke r6.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke r1.<com.jhlabs.image.AbstractBufferedImageOp: void setRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r6, 0, 0, i12, i13, $r7);

        return r6;
    }

    public java.lang.String toString()
    {
        int $i0;
        com.jhlabs.image.FlipFilter r0;

        r0 := @this: com.jhlabs.image.FlipFilter;

        $i0 = r0.<com.jhlabs.image.FlipFilter: int operation>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        return "Flip Horizontal";

     label2:
        return "Flip Vertical";

     label3:
        return "Flip Diagonal";

     label4:
        return "Rotate 90";

     label5:
        return "Rotate -90";

     label6:
        return "Rotate 180";

     label7:
        return "Flip";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.FlipFilter: int FLIP_180> = 6;

        <com.jhlabs.image.FlipFilter: int FLIP_90CCW> = 5;

        <com.jhlabs.image.FlipFilter: int FLIP_90CW> = 4;

        <com.jhlabs.image.FlipFilter: int FLIP_HV> = 3;

        <com.jhlabs.image.FlipFilter: int FLIP_V> = 2;

        <com.jhlabs.image.FlipFilter: int FLIP_H> = 1;

        return;
    }
}
