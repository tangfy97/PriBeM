class org.apache.lucene.index.TermVectorsReader extends java.lang.Object implements java.lang.Cloneable, java.io.Closeable
{
    static final int FORMAT_VERSION;
    static final int FORMAT_VERSION2;
    static final int FORMAT_UTF8_LENGTH_IN_BYTES;
    static final int FORMAT_CURRENT;
    static final int FORMAT_SIZE;
    static final byte STORE_POSITIONS_WITH_TERMVECTOR;
    static final byte STORE_OFFSET_WITH_TERMVECTOR;
    private org.apache.lucene.index.FieldInfos fieldInfos;
    private org.apache.lucene.store.IndexInput tvx;
    private org.apache.lucene.store.IndexInput tvd;
    private org.apache.lucene.store.IndexInput tvf;
    private int size;
    private int numTotalDocs;
    private int docStoreOffset;
    private final int format;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.store.Directory r1;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos r3;
        org.apache.lucene.index.TermVectorsReader r0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.index.FieldInfos;

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.index.FieldInfos,int)>(r1, r2, r3, 1024);

        return;
    }

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.store.Directory r1;
        int i0, $i2;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos r3;
        org.apache.lucene.index.TermVectorsReader r0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.lucene.index.FieldInfos;

        i0 := @parameter3: int;

        $i2 = (int) -1;

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void <init>(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.index.FieldInfos,int,int,int)>(r1, r2, r3, i0, $i2, 0);

        return;
    }

    void <init>(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, int, int, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        byte $b18;
        org.apache.lucene.store.Directory r3;
        org.apache.lucene.index.FieldInfos r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.lucene.index.TermVectorsReader r0;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r21, $r34;
        java.lang.Throwable $r29;
        long $l5, $l6, $l15, $l16, $l17, $l19, $l20;
        java.lang.AssertionError $r30, $r31, $r32, $r33, $r35;
        int i0, $i1, $i2, $i3, $i4, $i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i21, $i22, $i23, $i25;
        java.lang.String r1, $r2, $r6, $r9, $r22;
        org.apache.lucene.store.IndexInput $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r24, $r26;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        r3 := @parameter0: org.apache.lucene.store.Directory;

        r1 := @parameter1: java.lang.String;

        r13 := @parameter2: org.apache.lucene.index.FieldInfos;

        i0 := @parameter3: int;

        i8 := @parameter4: int;

        i9 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r2 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r1, "tvx");

        $r4 = virtualinvoke r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,int)>($r2, i0);

        r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx> = $r4;

        $r5 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $i1 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: int checkValidFormat(java.lang.String,org.apache.lucene.store.IndexInput)>($r2, $r5);

        r0.<org.apache.lucene.index.TermVectorsReader: int format> = $i1;

        $r6 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r1, "tvd");

        $r7 = virtualinvoke r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,int)>($r6, i0);

        r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd> = $r7;

        $r8 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $i2 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: int checkValidFormat(java.lang.String,org.apache.lucene.store.IndexInput)>($r6, $r8);

        $r9 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String)>(r1, "tvf");

        $r10 = virtualinvoke r3.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,int)>($r9, i0);

        r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf> = $r10;

        $r11 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i3 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: int checkValidFormat(java.lang.String,org.apache.lucene.store.IndexInput)>($r9, $r11);

        $z0 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $i23 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i23 == $i2 goto label02;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>()>();

        throw $r30;

     label02:
        $z1 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $i22 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i22 == $i3 goto label03;

        $r31 = new java.lang.AssertionError;

        specialinvoke $r31.<java.lang.AssertionError: void <init>()>();

        throw $r31;

     label03:
        $i4 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i4 < 3 goto label04;

        $r26 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l19 = virtualinvoke $r26.<org.apache.lucene.store.IndexInput: long length()>();

        $l20 = $l19 >> 4;

        $i21 = (int) $l20;

        r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs> = $i21;

        goto label06;

     label04:
        $z2 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $r24 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l15 = virtualinvoke $r24.<org.apache.lucene.store.IndexInput: long length()>();

        $l16 = $l15 - 4L;

        $l17 = $l16 % 8L;

        $b18 = $l17 cmp 0L;

        if $b18 == 0 goto label05;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label05:
        $r12 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l5 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: long length()>();

        $l6 = $l5 >> 3;

        $i7 = (int) $l6;

        r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs> = $i7;

     label06:
        $i25 = (int) -1;

        if $i25 != i8 goto label07;

        r0.<org.apache.lucene.index.TermVectorsReader: int docStoreOffset> = 0;

        $i13 = r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs>;

        r0.<org.apache.lucene.index.TermVectorsReader: int size> = $i13;

        $z4 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z4 != 0 goto label08;

        if i9 == 0 goto label08;

        $i14 = r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs>;

        if $i14 == i9 goto label08;

        $r33 = new java.lang.AssertionError;

        specialinvoke $r33.<java.lang.AssertionError: void <init>()>();

        throw $r33;

     label07:
        r0.<org.apache.lucene.index.TermVectorsReader: int docStoreOffset> = i8;

        r0.<org.apache.lucene.index.TermVectorsReader: int size> = i9;

        $z3 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z3 != 0 goto label08;

        $i11 = r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs>;

        $i10 = i9 + i8;

        if $i11 >= $i10 goto label08;

        $r35 = new java.lang.AssertionError;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numTotalDocs=");

        $i12 = r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" docStoreOffset=");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.AssertionError: void <init>(java.lang.Object)>($r22);

        throw $r35;

     label08:
        r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos> = r13;

     label09:
        if 1 != 0 goto label13;

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsReader: void close()>();

        goto label13;

     label10:
        $r29 := @caughtexception;

     label11:
        if 0 != 0 goto label12;

        virtualinvoke r0.<org.apache.lucene.index.TermVectorsReader: void close()>();

     label12:
        throw $r29;

     label13:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    org.apache.lucene.store.IndexInput getTvdStream()
    {
        org.apache.lucene.store.IndexInput $r1;
        org.apache.lucene.index.TermVectorsReader r0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        return $r1;
    }

    org.apache.lucene.store.IndexInput getTvfStream()
    {
        org.apache.lucene.store.IndexInput $r1;
        org.apache.lucene.index.TermVectorsReader r0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        return $r1;
    }

    private final void seekTvx(int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2;
        long $l4, $l5, $l6, $l9, $l10, $l11;
        org.apache.lucene.index.TermVectorsReader r0;
        int $i0, i1, $i2, $i3, $i7, $i8;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i0 >= 3 goto label1;

        $r2 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $i7 = r0.<org.apache.lucene.index.TermVectorsReader: int docStoreOffset>;

        $i8 = i1 + $i7;

        $l9 = (long) $i8;

        $l10 = $l9 * 8L;

        $l11 = $l10 + 4L;

        virtualinvoke $r2.<org.apache.lucene.store.IndexInput: void seek(long)>($l11);

        goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $i2 = r0.<org.apache.lucene.index.TermVectorsReader: int docStoreOffset>;

        $i3 = i1 + $i2;

        $l4 = (long) $i3;

        $l5 = $l4 * 16L;

        $l6 = $l5 + 4L;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void seek(long)>($l6);

     label2:
        return;
    }

    boolean canReadRawDocs()
    {
        int $i0;
        org.apache.lucene.index.TermVectorsReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        $i0 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i0 < 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final void rawDocs(int[], int[], int, int) throws java.io.IOException
    {
        java.lang.IllegalStateException $r14;
        int[] r8, r9;
        boolean $z0, $z1;
        org.apache.lucene.index.TermVectorsReader r0;
        long $l2, $l3, l12, l13, l15, l16, $l17, $l19;
        java.lang.AssertionError $r10, $r13;
        int $i0, i1, i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, i14, $i18, $i20;
        org.apache.lucene.store.IndexInput $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r11, $r12;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        r8 := @parameter0: int[];

        r9 := @parameter1: int[];

        i1 := @parameter2: int;

        i4 := @parameter3: int;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        if $r1 != null goto label1;

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r8, 0);

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r9, 0);

        return;

     label1:
        $i0 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i0 >= 3 goto label2;

        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot read raw docs with older term vector formats");

        throw $r14;

     label2:
        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void seekTvx(int)>(i1);

        $r2 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l2 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void seek(long)>($l2);

        $r4 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l3 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r5 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r5.<org.apache.lucene.store.IndexInput: void seek(long)>($l3);

        l12 = $l2;

        l13 = $l3;

        i14 = 0;

     label3:
        if i14 >= i4 goto label7;

        $i5 = r0.<org.apache.lucene.index.TermVectorsReader: int docStoreOffset>;

        $i6 = $i5 + i1;

        $i7 = $i6 + i14;

        i8 = $i7 + 1;

        $z0 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $i11 = r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs>;

        if i8 <= $i11 goto label4;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label4:
        $i9 = r0.<org.apache.lucene.index.TermVectorsReader: int numTotalDocs>;

        if i8 >= $i9 goto label5;

        $r11 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        l15 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r12 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        l16 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: long readLong()>();

        goto label6;

     label5:
        $r6 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        l15 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: long length()>();

        $r7 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        l16 = virtualinvoke $r7.<org.apache.lucene.store.IndexInput: long length()>();

        $z1 = <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $i10 = i4 - 1;

        if i14 == $i10 goto label6;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label6:
        $l17 = l15 - l12;

        $i18 = (int) $l17;

        r8[i14] = $i18;

        $l19 = l16 - l13;

        $i20 = (int) $l19;

        r9[i14] = $i20;

        i14 = i14 + 1;

        l12 = l15;

        l13 = l16;

        goto label3;

     label7:
        return;
    }

    private int checkValidFormat(java.lang.String, org.apache.lucene.store.IndexInput) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.store.IndexInput r0;
        org.apache.lucene.index.IndexFormatTooNewException $r1;
        int $i0;
        java.lang.String r3;
        org.apache.lucene.index.TermVectorsReader r2;

        r2 := @this: org.apache.lucene.index.TermVectorsReader;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.lucene.store.IndexInput;

        $i0 = virtualinvoke r0.<org.apache.lucene.store.IndexInput: int readInt()>();

        if $i0 <= 4 goto label1;

        $r1 = new org.apache.lucene.index.IndexFormatTooNewException;

        specialinvoke $r1.<org.apache.lucene.index.IndexFormatTooNewException: void <init>(org.apache.lucene.store.DataInput,int,int,int)>(r0, $i0, 1, 4);

        throw $r1;

     label1:
        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r2, $r3, $r4;
        java.io.Closeable[] $r0;
        org.apache.lucene.index.TermVectorsReader r1;

        r1 := @this: org.apache.lucene.index.TermVectorsReader;

        $r0 = newarray (java.io.Closeable)[3];

        $r2 = r1.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $r0[0] = $r2;

        $r3 = r1.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $r0[1] = $r3;

        $r4 = r1.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $r0[2] = $r4;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.io.Closeable[])>($r0);

        return;
    }

    int size()
    {
        int $i0;
        org.apache.lucene.index.TermVectorsReader r0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        $i0 = r0.<org.apache.lucene.index.TermVectorsReader: int size>;

        return $i0;
    }

    public void get(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        long $l2, $l5, l11;
        org.apache.lucene.index.TermVectorMapper r8;
        int $i0, i1, $i3, $i4, $i6, $i7, i8, i9, i10, i12, $i14, $i16;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos $r3;
        org.apache.lucene.store.IndexInput $r1, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12;
        org.apache.lucene.index.TermVectorsReader r0;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        i1 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r8 := @parameter2: org.apache.lucene.index.TermVectorMapper;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        if $r1 == null goto label10;

        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        $i0 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: int fieldNumber(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void seekTvx(int)>(i1);

        $r4 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l2 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r5 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        virtualinvoke $r5.<org.apache.lucene.store.IndexInput: void seek(long)>($l2);

        $r6 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $i3 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i8 = 0;

        $i14 = (int) -1;

        i9 = $i14;

        i10 = 0;

     label01:
        if i10 >= $i3 goto label05;

        $i6 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i6 < 2 goto label02;

        $r12 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        i8 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: int readVInt()>();

        goto label03;

     label02:
        $r11 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $i7 = virtualinvoke $r11.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i8 = i8 + $i7;

     label03:
        if i8 != $i0 goto label04;

        i9 = i10;

     label04:
        i10 = i10 + 1;

        goto label01;

     label05:
        $i16 = (int) -1;

        if i9 == $i16 goto label10;

        $i4 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i4 < 3 goto label06;

        $r10 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        l11 = virtualinvoke $r10.<org.apache.lucene.store.IndexInput: long readLong()>();

        goto label07;

     label06:
        $r7 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        l11 = virtualinvoke $r7.<org.apache.lucene.store.IndexInput: long readVLong()>();

     label07:
        i12 = 1;

     label08:
        if i12 > i9 goto label09;

        $r9 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $l5 = virtualinvoke $r9.<org.apache.lucene.store.IndexInput: long readVLong()>();

        l11 = l11 + $l5;

        i12 = i12 + 1;

        goto label08;

     label09:
        virtualinvoke r8.<org.apache.lucene.index.TermVectorMapper: void setDocumentNumber(int)>(i1);

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void readTermVector(java.lang.String,long,org.apache.lucene.index.TermVectorMapper)>(r2, l11, r8);

     label10:
        return;
    }

    org.apache.lucene.index.TermFreqVector get(int, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.TermFreqVector $r3;
        int i0;
        java.lang.String r2;
        org.apache.lucene.index.TermVectorsReader r1;
        org.apache.lucene.index.ParallelArrayTermVectorMapper $r0;

        r1 := @this: org.apache.lucene.index.TermVectorsReader;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.lucene.index.ParallelArrayTermVectorMapper;

        specialinvoke $r0.<org.apache.lucene.index.ParallelArrayTermVectorMapper: void <init>()>();

        virtualinvoke r1.<org.apache.lucene.index.TermVectorsReader: void get(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)>(i0, r2, $r0);

        $r3 = virtualinvoke $r0.<org.apache.lucene.index.ParallelArrayTermVectorMapper: org.apache.lucene.index.TermFreqVector materializeVector()>();

        return $r3;
    }

    private final java.lang.String[] readFields(int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r2, $r5;
        java.lang.String[] r0;
        org.apache.lucene.index.TermVectorsReader r1;
        int i0, $i1, $i2, i3, i4;
        java.lang.String $r4;
        org.apache.lucene.index.FieldInfos $r3;

        r1 := @this: org.apache.lucene.index.TermVectorsReader;

        i0 := @parameter0: int;

        i3 = 0;

        r0 = newarray (java.lang.String)[i0];

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $i1 = r1.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i1 < 2 goto label2;

        $r5 = r1.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        i3 = virtualinvoke $r5.<org.apache.lucene.store.IndexInput: int readVInt()>();

        goto label3;

     label2:
        $r2 = r1.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $i2 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i3 = i3 + $i2;

     label3:
        $r3 = r1.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.FieldInfos fieldInfos>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfos: java.lang.String fieldName(int)>(i3);

        r0[i4] = $r4;

        i4 = i4 + 1;

        goto label1;

     label4:
        return r0;
    }

    private final long[] readTvfPointers(int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2, $r3;
        long $l2, l3;
        org.apache.lucene.index.TermVectorsReader r0;
        long[] $r4;
        int $i0, i1, i4;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        i1 := @parameter0: int;

        $i0 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i0 < 3 goto label1;

        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        l3 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: long readLong()>();

        goto label2;

     label1:
        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        l3 = virtualinvoke $r1.<org.apache.lucene.store.IndexInput: long readVLong()>();

     label2:
        $r4 = newarray (long)[i1];

        $r4[0] = l3;

        i4 = 1;

     label3:
        if i4 >= i1 goto label4;

        $r2 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $l2 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: long readVLong()>();

        l3 = l3 + $l2;

        $r4[i4] = l3;

        i4 = i4 + 1;

        goto label3;

     label4:
        return $r4;
    }

    org.apache.lucene.index.TermFreqVector[] get(int) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2, $r3, $r4;
        long $l1;
        java.lang.String[] $r5;
        org.apache.lucene.index.TermVectorsReader r0;
        org.apache.lucene.index.SegmentTermVector[] r7;
        long[] $r6;
        int i0, $i2;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        i0 := @parameter0: int;

        r7 = null;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void seekTvx(int)>(i0);

        $r2 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l1 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r4 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $i2 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if $i2 == 0 goto label1;

        $r5 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: java.lang.String[] readFields(int)>($i2);

        $r6 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: long[] readTvfPointers(int)>($i2);

        r7 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.SegmentTermVector[] readTermVectors(int,java.lang.String[],long[])>(i0, $r5, $r6);

     label1:
        return r7;
    }

    public void get(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        org.apache.lucene.store.IndexInput $r1, $r2, $r3, $r4;
        long $l1;
        java.lang.String[] $r5;
        org.apache.lucene.index.TermVectorsReader r0;
        org.apache.lucene.index.TermVectorMapper r7;
        long[] $r6;
        int i0, $i2;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        i0 := @parameter0: int;

        r7 := @parameter1: org.apache.lucene.index.TermVectorMapper;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void seekTvx(int)>(i0);

        $r2 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $l1 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: long readLong()>();

        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void seek(long)>($l1);

        $r4 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $i2 = virtualinvoke $r4.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if $i2 == 0 goto label1;

        $r5 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: java.lang.String[] readFields(int)>($i2);

        $r6 = specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: long[] readTvfPointers(int)>($i2);

        virtualinvoke r7.<org.apache.lucene.index.TermVectorMapper: void setDocumentNumber(int)>(i0);

        specialinvoke r0.<org.apache.lucene.index.TermVectorsReader: void readTermVectors(java.lang.String[],long[],org.apache.lucene.index.TermVectorMapper)>($r5, $r6, r7);

     label1:
        return;
    }

    private org.apache.lucene.index.SegmentTermVector[] readTermVectors(int, java.lang.String[], long[]) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentTermVector $r7;
        org.apache.lucene.index.TermFreqVector $r6;
        java.lang.String[] r0;
        long $l3;
        org.apache.lucene.index.TermVectorsReader r3;
        org.apache.lucene.index.SegmentTermVector[] r1;
        long[] r4;
        int $i0, $i1, i2, i4;
        java.lang.String $r5;
        org.apache.lucene.index.ParallelArrayTermVectorMapper $r2;

        r3 := @this: org.apache.lucene.index.TermVectorsReader;

        i2 := @parameter0: int;

        r0 := @parameter1: java.lang.String[];

        r4 := @parameter2: long[];

        $i0 = lengthof r0;

        r1 = newarray (org.apache.lucene.index.SegmentTermVector)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r0;

        if i4 >= $i1 goto label2;

        $r2 = new org.apache.lucene.index.ParallelArrayTermVectorMapper;

        specialinvoke $r2.<org.apache.lucene.index.ParallelArrayTermVectorMapper: void <init>()>();

        virtualinvoke $r2.<org.apache.lucene.index.ParallelArrayTermVectorMapper: void setDocumentNumber(int)>(i2);

        $r5 = r0[i4];

        $l3 = r4[i4];

        specialinvoke r3.<org.apache.lucene.index.TermVectorsReader: void readTermVector(java.lang.String,long,org.apache.lucene.index.TermVectorMapper)>($r5, $l3, $r2);

        $r6 = virtualinvoke $r2.<org.apache.lucene.index.ParallelArrayTermVectorMapper: org.apache.lucene.index.TermFreqVector materializeVector()>();

        $r7 = (org.apache.lucene.index.SegmentTermVector) $r6;

        r1[i4] = $r7;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void readTermVectors(java.lang.String[], long[], org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        java.lang.String[] r0;
        long $l1;
        org.apache.lucene.index.TermVectorsReader r1;
        org.apache.lucene.index.TermVectorMapper r3;
        long[] r2;
        int $i0, i2;
        java.lang.String $r4;

        r1 := @this: org.apache.lucene.index.TermVectorsReader;

        r0 := @parameter0: java.lang.String[];

        r2 := @parameter1: long[];

        r3 := @parameter2: org.apache.lucene.index.TermVectorMapper;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label2;

        $r4 = r0[i2];

        $l1 = r2[i2];

        specialinvoke r1.<org.apache.lucene.index.TermVectorsReader: void readTermVector(java.lang.String,long,org.apache.lucene.index.TermVectorMapper)>($r4, $l1, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void readTermVector(java.lang.String, long, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        byte[] r21;
        byte $b14, $b15, $b16;
        int[] r24;
        boolean z0, $z1, $z2, $z3, z4, $z5, z6, $z8, $z9;
        org.apache.lucene.index.TermVectorOffsetInfo[] r25;
        org.apache.lucene.index.TermVectorsReader r0;
        org.apache.lucene.index.TermVectorOffsetInfo $r14;
        long l0;
        org.apache.lucene.index.TermVectorMapper r4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, $i11, $i12, $i13, i17, i18, $i19, i20, i21, i22, i23, i24, i25;
        java.lang.String r5, $r9, $r18, r22;
        org.apache.lucene.store.IndexInput $r1, $r2, $r3, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r23;
        char[] r20;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r4 := @parameter2: org.apache.lucene.index.TermVectorMapper;

        $r1 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r1.<org.apache.lucene.store.IndexInput: void seek(long)>(l0);

        $r2 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i1 = virtualinvoke $r2.<org.apache.lucene.store.IndexInput: int readVInt()>();

        if $i1 != 0 goto label01;

        return;

     label01:
        $i2 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i2 < 2 goto label06;

        $r19 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $b14 = virtualinvoke $r19.<org.apache.lucene.store.IndexInput: byte readByte()>();

        $b15 = $b14 & 1;

        if $b15 == 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        z4 = $z3;

        $b16 = $b14 & 2;

        if $b16 == 0 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        z6 = $z5;

        goto label07;

     label06:
        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readVInt()>();

        z4 = 0;

        z6 = 0;

     label07:
        virtualinvoke r4.<org.apache.lucene.index.TermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)>(r5, $i1, z6, z4);

        $i3 = r0.<org.apache.lucene.index.TermVectorsReader: int format>;

        if $i3 >= 4 goto label08;

        $z9 = 1;

        $z8 = 1;

        goto label09;

     label08:
        $z9 = 0;

        $z8 = 0;

     label09:
        z0 = $z8;

        if $z9 == 0 goto label10;

        r20 = newarray (char)[10];

        r21 = null;

        goto label11;

     label10:
        r20 = null;

        r21 = newarray (byte)[20];

     label11:
        i17 = 0;

     label12:
        if i17 >= $i1 goto label27;

        $r6 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i4 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r7 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i5 = virtualinvoke $r7.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i18 = $i4 + $i5;

        if z0 == 0 goto label14;

        $i13 = lengthof r20;

        if $i13 >= i18 goto label13;

        r20 = staticinvoke <org.apache.lucene.util.ArrayUtil: char[] grow(char[],int)>(r20, i18);

     label13:
        $r17 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r17.<org.apache.lucene.store.IndexInput: void readChars(char[],int,int)>(r20, $i4, $i5);

        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(char[],int,int)>(r20, 0, i18);

        r22 = $r18;

        goto label16;

     label14:
        $i6 = lengthof r21;

        if $i6 >= i18 goto label15;

        r21 = staticinvoke <org.apache.lucene.util.ArrayUtil: byte[] grow(byte[],int)>(r21, i18);

     label15:
        $r8 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r8.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>(r21, $i4, $i5);

        $r9 = new java.lang.String;

        specialinvoke $r9.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r21, 0, i18, "UTF-8");

        r22 = $r9;

     label16:
        $r23 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i19 = virtualinvoke $r23.<org.apache.lucene.store.IndexInput: int readVInt()>();

        r24 = null;

        if z4 == 0 goto label21;

        $z2 = virtualinvoke r4.<org.apache.lucene.index.TermVectorMapper: boolean isIgnoringPositions()>();

        if $z2 != 0 goto label19;

        r24 = newarray (int)[$i19];

        i20 = 0;

        i21 = 0;

     label17:
        if i21 >= $i19 goto label18;

        $r16 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i11 = virtualinvoke $r16.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $i12 = i20 + $i11;

        r24[i21] = $i12;

        i20 = r24[i21];

        i21 = i21 + 1;

        goto label17;

     label18:
        goto label21;

     label19:
        i22 = 0;

     label20:
        if i22 >= $i19 goto label21;

        $r15 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r15.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i22 = i22 + 1;

        goto label20;

     label21:
        r25 = null;

        if z6 == 0 goto label26;

        $z1 = virtualinvoke r4.<org.apache.lucene.index.TermVectorMapper: boolean isIgnoringOffsets()>();

        if $z1 != 0 goto label24;

        r25 = newarray (org.apache.lucene.index.TermVectorOffsetInfo)[$i19];

        i23 = 0;

        i24 = 0;

     label22:
        if i24 >= $i19 goto label23;

        $r12 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i7 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i8 = i23 + $i7;

        $r13 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $i9 = virtualinvoke $r13.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i10 = i8 + $i9;

        $r14 = new org.apache.lucene.index.TermVectorOffsetInfo;

        specialinvoke $r14.<org.apache.lucene.index.TermVectorOffsetInfo: void <init>(int,int)>(i8, i10);

        r25[i24] = $r14;

        i23 = i10;

        i24 = i24 + 1;

        goto label22;

     label23:
        goto label26;

     label24:
        i25 = 0;

     label25:
        if i25 >= $i19 goto label26;

        $r10 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r10.<org.apache.lucene.store.IndexInput: int readVInt()>();

        $r11 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        virtualinvoke $r11.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i25 = i25 + 1;

        goto label25;

     label26:
        virtualinvoke r4.<org.apache.lucene.index.TermVectorMapper: void map(java.lang.String,int,org.apache.lucene.index.TermVectorOffsetInfo[],int[])>(r22, $i19, r25, r24);

        i17 = i17 + 1;

        goto label12;

     label27:
        return;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.store.IndexInput $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r14;
        org.apache.lucene.index.TermVectorsReader r0, r2;
        java.lang.Object $r1, $r7, $r10, $r13;

        r0 := @this: org.apache.lucene.index.TermVectorsReader;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (org.apache.lucene.index.TermVectorsReader) $r1;

        $r3 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        if $r4 == null goto label1;

        $r5 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        if $r5 == null goto label1;

        $r6 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r8 = (org.apache.lucene.store.IndexInput) $r7;

        r2.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvx> = $r8;

        $r9 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r11 = (org.apache.lucene.store.IndexInput) $r10;

        r2.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvd> = $r11;

        $r12 = r0.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf>;

        $r13 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: java.lang.Object clone()>();

        $r14 = (org.apache.lucene.store.IndexInput) $r13;

        r2.<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput tvf> = $r14;

     label1:
        return r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.index.TermVectorsReader: byte STORE_OFFSET_WITH_TERMVECTOR> = 2;

        <org.apache.lucene.index.TermVectorsReader: byte STORE_POSITIONS_WITH_TERMVECTOR> = 1;

        <org.apache.lucene.index.TermVectorsReader: int FORMAT_SIZE> = 4;

        <org.apache.lucene.index.TermVectorsReader: int FORMAT_CURRENT> = 4;

        <org.apache.lucene.index.TermVectorsReader: int FORMAT_UTF8_LENGTH_IN_BYTES> = 4;

        <org.apache.lucene.index.TermVectorsReader: int FORMAT_VERSION2> = 3;

        <org.apache.lucene.index.TermVectorsReader: int FORMAT_VERSION> = 2;

        $r0 = class "Lorg/apache/lucene/index/TermVectorsReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.TermVectorsReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
