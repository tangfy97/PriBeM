class org.mozilla.javascript.optimizer.Block$FatBlock extends java.lang.Object
{
    private org.mozilla.javascript.ObjToIntMap successors;
    private org.mozilla.javascript.ObjToIntMap predecessors;
    org.mozilla.javascript.optimizer.Block realBlock;

    private void <init>()
    {
        org.mozilla.javascript.optimizer.Block$FatBlock r0;
        org.mozilla.javascript.ObjToIntMap $r1, $r2;

        r0 := @this: org.mozilla.javascript.optimizer.Block$FatBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r1.<org.mozilla.javascript.ObjToIntMap: void <init>()>();

        r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.ObjToIntMap successors> = $r1;

        $r2 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r2.<org.mozilla.javascript.ObjToIntMap: void <init>()>();

        r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.ObjToIntMap predecessors> = $r2;

        return;
    }

    private static org.mozilla.javascript.optimizer.Block[] reduceToArray(org.mozilla.javascript.ObjToIntMap)
    {
        org.mozilla.javascript.optimizer.Block $r4;
        org.mozilla.javascript.optimizer.Block$FatBlock r3;
        org.mozilla.javascript.ObjToIntMap$Iterator $r1;
        org.mozilla.javascript.optimizer.Block[] r5;
        int $i0, $i1, i2;
        java.lang.Object $r2;
        org.mozilla.javascript.ObjToIntMap r0;
        boolean $z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.ObjToIntMap;

        r5 = null;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.ObjToIntMap: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke r0.<org.mozilla.javascript.ObjToIntMap: int size()>();

        r5 = newarray (org.mozilla.javascript.optimizer.Block)[$i0];

        i2 = 0;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.ObjToIntMap: org.mozilla.javascript.ObjToIntMap$Iterator newIterator()>();

        virtualinvoke $r1.<org.mozilla.javascript.ObjToIntMap$Iterator: void start()>();

     label1:
        $z1 = virtualinvoke $r1.<org.mozilla.javascript.ObjToIntMap$Iterator: boolean done()>();

        if $z1 != 0 goto label2;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.ObjToIntMap$Iterator: java.lang.Object getKey()>();

        r3 = (org.mozilla.javascript.optimizer.Block$FatBlock) $r2;

        $i1 = i2;

        i2 = i2 + 1;

        $r4 = r3.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block realBlock>;

        r5[$i1] = $r4;

        virtualinvoke $r1.<org.mozilla.javascript.ObjToIntMap$Iterator: void next()>();

        goto label1;

     label2:
        return r5;
    }

    void addSuccessor(org.mozilla.javascript.optimizer.Block$FatBlock)
    {
        org.mozilla.javascript.optimizer.Block$FatBlock r0, r1;
        org.mozilla.javascript.ObjToIntMap $r2;

        r0 := @this: org.mozilla.javascript.optimizer.Block$FatBlock;

        r1 := @parameter0: org.mozilla.javascript.optimizer.Block$FatBlock;

        $r2 = r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.ObjToIntMap successors>;

        virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r1, 0);

        return;
    }

    void addPredecessor(org.mozilla.javascript.optimizer.Block$FatBlock)
    {
        org.mozilla.javascript.optimizer.Block$FatBlock r0, r1;
        org.mozilla.javascript.ObjToIntMap $r2;

        r0 := @this: org.mozilla.javascript.optimizer.Block$FatBlock;

        r1 := @parameter0: org.mozilla.javascript.optimizer.Block$FatBlock;

        $r2 = r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.ObjToIntMap predecessors>;

        virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r1, 0);

        return;
    }

    org.mozilla.javascript.optimizer.Block[] getSuccessors()
    {
        org.mozilla.javascript.optimizer.Block$FatBlock r0;
        org.mozilla.javascript.ObjToIntMap $r1;
        org.mozilla.javascript.optimizer.Block[] $r2;

        r0 := @this: org.mozilla.javascript.optimizer.Block$FatBlock;

        $r1 = r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.ObjToIntMap successors>;

        $r2 = staticinvoke <org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block[] reduceToArray(org.mozilla.javascript.ObjToIntMap)>($r1);

        return $r2;
    }

    org.mozilla.javascript.optimizer.Block[] getPredecessors()
    {
        org.mozilla.javascript.optimizer.Block$FatBlock r0;
        org.mozilla.javascript.ObjToIntMap $r1;
        org.mozilla.javascript.optimizer.Block[] $r2;

        r0 := @this: org.mozilla.javascript.optimizer.Block$FatBlock;

        $r1 = r0.<org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.ObjToIntMap predecessors>;

        $r2 = staticinvoke <org.mozilla.javascript.optimizer.Block$FatBlock: org.mozilla.javascript.optimizer.Block[] reduceToArray(org.mozilla.javascript.ObjToIntMap)>($r1);

        return $r2;
    }

    void <init>(org.mozilla.javascript.optimizer.Block$1)
    {
        org.mozilla.javascript.optimizer.Block$FatBlock r0;
        org.mozilla.javascript.optimizer.Block$1 r1;

        r0 := @this: org.mozilla.javascript.optimizer.Block$FatBlock;

        r1 := @parameter0: org.mozilla.javascript.optimizer.Block$1;

        specialinvoke r0.<org.mozilla.javascript.optimizer.Block$FatBlock: void <init>()>();

        return;
    }
}
