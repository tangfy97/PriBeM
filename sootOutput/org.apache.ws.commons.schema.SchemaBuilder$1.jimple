class org.apache.ws.commons.schema.SchemaBuilder$1 extends java.lang.Object implements org.apache.ws.commons.schema.utils.TargetNamespaceValidator
{
    final java.lang.String val$uri;
    final org.apache.ws.commons.schema.SchemaBuilder this$0;

    void <init>(org.apache.ws.commons.schema.SchemaBuilder, java.lang.String)
    {
        org.apache.ws.commons.schema.SchemaBuilder$1 r0;
        java.lang.String r2;
        org.apache.ws.commons.schema.SchemaBuilder r1;

        r0 := @this: org.apache.ws.commons.schema.SchemaBuilder$1;

        r1 := @parameter0: org.apache.ws.commons.schema.SchemaBuilder;

        r2 := @parameter1: java.lang.String;

        r0.<org.apache.ws.commons.schema.SchemaBuilder$1: org.apache.ws.commons.schema.SchemaBuilder this$0> = r1;

        r0.<org.apache.ws.commons.schema.SchemaBuilder$1: java.lang.String val$uri> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void validate(org.apache.ws.commons.schema.XmlSchema)
    {
        org.apache.ws.commons.schema.SchemaBuilder$1 r0;
        org.apache.ws.commons.schema.XmlSchemaException $r5;
        org.apache.ws.commons.schema.XmlSchema r2;
        java.lang.String $r1, $r3, $r4, $r8, $r11, $r13, $r14;
        boolean $z0, z1;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12;

        r0 := @this: org.apache.ws.commons.schema.SchemaBuilder$1;

        r2 := @parameter0: org.apache.ws.commons.schema.XmlSchema;

        $r1 = r0.<org.apache.ws.commons.schema.SchemaBuilder$1: java.lang.String val$uri>;

        $z0 = specialinvoke r0.<org.apache.ws.commons.schema.SchemaBuilder$1: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r2.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getSyntacticalTargetNamespace()>();

        z1 = specialinvoke r0.<org.apache.ws.commons.schema.SchemaBuilder$1: boolean isEmpty(java.lang.String)>($r14);

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getSyntacticalTargetNamespace()>();

        $r4 = r0.<org.apache.ws.commons.schema.SchemaBuilder$1: java.lang.String val$uri>;

        z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

     label2:
        if z1 != 0 goto label3;

        $r5 = new org.apache.ws.commons.schema.XmlSchemaException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An imported schema was announced to have the namespace ");

        $r8 = r0.<org.apache.ws.commons.schema.SchemaBuilder$1: java.lang.String val$uri>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but has the namespace ");

        $r11 = virtualinvoke r2.<org.apache.ws.commons.schema.XmlSchema: java.lang.String getSyntacticalTargetNamespace()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.ws.commons.schema.XmlSchemaException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label3:
        return;
    }

    private boolean isEmpty(java.lang.String)
    {
        org.apache.ws.commons.schema.SchemaBuilder$1 r2;
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r2 := @this: org.apache.ws.commons.schema.SchemaBuilder$1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = "";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }
}
