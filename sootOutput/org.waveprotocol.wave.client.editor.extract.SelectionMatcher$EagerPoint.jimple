final class org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint extends java.lang.Object implements org.waveprotocol.wave.client.editor.extract.SelectionMatcher$LazyPoint
{
    private final org.waveprotocol.wave.model.document.util.Point explicit;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.extract.SelectionMatcher this$0;

    void <init>(org.waveprotocol.wave.client.editor.extract.SelectionMatcher, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher r1;
        java.lang.AssertionError $r6, $r7;
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint r0;
        java.lang.Object $r4;
        com.google.gwt.dom.client.Node $r3, $r5;
        org.waveprotocol.wave.model.document.util.Point r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.SelectionMatcher;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: org.waveprotocol.wave.client.editor.extract.SelectionMatcher this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $z1 = <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.extract.SelectionMatcher: com.google.gwt.dom.client.Node access$000(org.waveprotocol.wave.client.editor.extract.SelectionMatcher)>(r1);

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        $z2 = virtualinvoke $r3.<com.google.gwt.dom.client.Node: boolean isOrHasChild(com.google.gwt.dom.client.Node)>($r5);

        if $z2 != 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("container not attached");

        throw $r6;

     label2:
        r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: org.waveprotocol.wave.model.document.util.Point explicit> = r2;

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point getPoint()
    {
        org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint r0;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: org.waveprotocol.wave.model.document.util.Point explicit>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/SelectionMatcher;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.SelectionMatcher$EagerPoint: boolean $assertionsDisabled> = $z1;

        return;
    }
}
