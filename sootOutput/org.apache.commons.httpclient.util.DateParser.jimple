public class org.apache.commons.httpclient.util.DateParser extends java.lang.Object
{
    public static final java.lang.String PATTERN_RFC1123;
    public static final java.lang.String PATTERN_RFC1036;
    public static final java.lang.String PATTERN_ASCTIME;
    private static final java.util.Collection DEFAULT_PATTERNS;

    public static java.util.Date parseDate(java.lang.String) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.lang.String r0;
        java.util.Date $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.httpclient.util.DateParser: java.util.Date parseDate(java.lang.String,java.util.Collection)>(r0, null);

        return $r1;
    }

    public static java.util.Date parseDate(java.lang.String, java.util.Collection) throws org.apache.commons.httpclient.util.DateParseException
    {
        java.util.Date $r7;
        java.text.SimpleDateFormat $r8, r15;
        java.lang.StringBuffer $r1, $r2, $r3;
        java.util.Locale $r9;
        int $i0, $i1, $i2;
        java.lang.String $r4, r6, r13;
        java.text.ParseException $r12;
        boolean $z0, $z1, $z2;
        org.apache.commons.httpclient.util.DateParseException $r0;
        java.util.Iterator $r16;
        java.util.TimeZone $r10;
        java.util.Collection r14;
        java.lang.IllegalArgumentException $r11;
        java.lang.Object $r5;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.util.Collection;

        if r13 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r11;

     label1:
        if r14 != null goto label2;

        r14 = <org.apache.commons.httpclient.util.DateParser: java.util.Collection DEFAULT_PATTERNS>;

     label2:
        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i0 <= 1 goto label3;

        $z0 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r13.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z1 == 0 goto label3;

        $i1 = virtualinvoke r13.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

     label3:
        r15 = null;

        $r16 = interfaceinvoke r14.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r5 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        if r15 != null goto label5;

        $r8 = new java.text.SimpleDateFormat;

        $r9 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r6, $r9);

        r15 = $r8;

        $r10 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r8.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r10);

        goto label6;

     label5:
        virtualinvoke r15.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(r6);

     label6:
        $r7 = virtualinvoke r15.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r13);

     label7:
        return $r7;

     label8:
        $r12 := @caughtexception;

        goto label4;

     label9:
        $r0 = new org.apache.commons.httpclient.util.DateParseException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to parse the date ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r13);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.commons.httpclient.util.DateParseException: void <init>(java.lang.String)>($r4);

        throw $r0;

        catch java.text.ParseException from label6 to label7 with label8;
    }

    private void <init>()
    {
        org.apache.commons.httpclient.util.DateParser r0;

        r0 := @this: org.apache.commons.httpclient.util.DateParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1;

        <org.apache.commons.httpclient.util.DateParser: java.lang.String PATTERN_ASCTIME> = "EEE MMM d HH:mm:ss yyyy";

        <org.apache.commons.httpclient.util.DateParser: java.lang.String PATTERN_RFC1036> = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        <org.apache.commons.httpclient.util.DateParser: java.lang.String PATTERN_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "EEE MMM d HH:mm:ss yyyy";

        $r0[1] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r0[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <org.apache.commons.httpclient.util.DateParser: java.util.Collection DEFAULT_PATTERNS> = $r1;

        return;
    }
}
