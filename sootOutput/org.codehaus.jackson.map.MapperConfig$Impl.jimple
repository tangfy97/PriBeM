abstract class org.codehaus.jackson.map.MapperConfig$Impl extends org.codehaus.jackson.map.MapperConfig
{
    protected int _featureFlags;

    protected void <init>(org.codehaus.jackson.map.ClassIntrospector, org.codehaus.jackson.map.AnnotationIntrospector, org.codehaus.jackson.map.introspect.VisibilityChecker, org.codehaus.jackson.map.jsontype.SubtypeResolver, org.codehaus.jackson.map.PropertyNamingStrategy, org.codehaus.jackson.map.type.TypeFactory, org.codehaus.jackson.map.HandlerInstantiator, int)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver r4;
        org.codehaus.jackson.map.HandlerInstantiator r7;
        org.codehaus.jackson.map.PropertyNamingStrategy r5;
        org.codehaus.jackson.map.AnnotationIntrospector r2;
        org.codehaus.jackson.map.MapperConfig$Impl r0;
        org.codehaus.jackson.map.type.TypeFactory r6;
        org.codehaus.jackson.map.introspect.VisibilityChecker r3;
        int i0;
        org.codehaus.jackson.map.ClassIntrospector r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.ClassIntrospector;

        r2 := @parameter1: org.codehaus.jackson.map.AnnotationIntrospector;

        r3 := @parameter2: org.codehaus.jackson.map.introspect.VisibilityChecker;

        r4 := @parameter3: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        r5 := @parameter4: org.codehaus.jackson.map.PropertyNamingStrategy;

        r6 := @parameter5: org.codehaus.jackson.map.type.TypeFactory;

        r7 := @parameter6: org.codehaus.jackson.map.HandlerInstantiator;

        i0 := @parameter7: int;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.ClassIntrospector,org.codehaus.jackson.map.AnnotationIntrospector,org.codehaus.jackson.map.introspect.VisibilityChecker,org.codehaus.jackson.map.jsontype.SubtypeResolver,org.codehaus.jackson.map.PropertyNamingStrategy,org.codehaus.jackson.map.type.TypeFactory,org.codehaus.jackson.map.HandlerInstantiator)>(r1, r2, r3, r4, r5, r6, r7);

        r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags> = i0;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.MapperConfig$Impl)
    {
        int $i0;
        org.codehaus.jackson.map.MapperConfig$Impl r0, r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$Impl;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig)>(r1);

        $i0 = r1.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags>;

        r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags> = $i0;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.MapperConfig$Impl, int)
    {
        int i0;
        org.codehaus.jackson.map.MapperConfig$Impl r0, r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$Impl;

        i0 := @parameter1: int;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig)>(r1);

        r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags> = i0;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.MapperConfig$Impl, org.codehaus.jackson.map.MapperConfig$Base, org.codehaus.jackson.map.jsontype.SubtypeResolver)
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver r3;
        int $i0;
        org.codehaus.jackson.map.MapperConfig$Base r2;
        org.codehaus.jackson.map.MapperConfig$Impl r0, r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$Impl;

        r2 := @parameter1: org.codehaus.jackson.map.MapperConfig$Base;

        r3 := @parameter2: org.codehaus.jackson.map.jsontype.SubtypeResolver;

        specialinvoke r0.<org.codehaus.jackson.map.MapperConfig: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.MapperConfig$Base,org.codehaus.jackson.map.jsontype.SubtypeResolver)>(r1, r2, r3);

        $i0 = r1.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags>;

        r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags> = $i0;

        return;
    }

    static int collectFeatureDefaults(java.lang.Class)
    {
        java.lang.Object[] $r1;
        java.lang.Enum r3;
        int i0, $i1, i2, i3;
        java.lang.Enum[] r2;
        java.lang.Class r0;
        org.codehaus.jackson.map.MapperConfig$ConfigFeature $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        i2 = 0;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        r2 = (java.lang.Enum[]) $r1;

        i0 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r2[i3];

        $r4 = (org.codehaus.jackson.map.MapperConfig$ConfigFeature) r3;

        $z0 = interfaceinvoke $r4.<org.codehaus.jackson.map.MapperConfig$ConfigFeature: boolean enabledByDefault()>();

        if $z0 == 0 goto label2;

        $r5 = (org.codehaus.jackson.map.MapperConfig$ConfigFeature) r3;

        $i1 = interfaceinvoke $r5.<org.codehaus.jackson.map.MapperConfig$ConfigFeature: int getMask()>();

        i2 = i2 | $i1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public abstract transient org.codehaus.jackson.map.MapperConfig$Impl 'with'(org.codehaus.jackson.map.MapperConfig$ConfigFeature[]);

    public abstract transient org.codehaus.jackson.map.MapperConfig$Impl without(org.codehaus.jackson.map.MapperConfig$ConfigFeature[]);

    public boolean isEnabled(org.codehaus.jackson.map.MapperConfig$ConfigFeature)
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.map.MapperConfig$Impl r0;
        org.codehaus.jackson.map.MapperConfig$ConfigFeature r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$ConfigFeature;

        $i0 = r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags>;

        $i1 = interfaceinvoke r1.<org.codehaus.jackson.map.MapperConfig$ConfigFeature: int getMask()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void enable(org.codehaus.jackson.map.MapperConfig$ConfigFeature)
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.map.MapperConfig$Impl r0;
        org.codehaus.jackson.map.MapperConfig$ConfigFeature r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$ConfigFeature;

        $i0 = r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags>;

        $i1 = interfaceinvoke r1.<org.codehaus.jackson.map.MapperConfig$ConfigFeature: int getMask()>();

        $i2 = $i0 | $i1;

        r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags> = $i2;

        return;
    }

    public void disable(org.codehaus.jackson.map.MapperConfig$ConfigFeature)
    {
        int $i0, $i1, $i2, $i3, $i5;
        org.codehaus.jackson.map.MapperConfig$Impl r0;
        org.codehaus.jackson.map.MapperConfig$ConfigFeature r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$ConfigFeature;

        $i0 = r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags>;

        $i1 = interfaceinvoke r1.<org.codehaus.jackson.map.MapperConfig$ConfigFeature: int getMask()>();

        $i5 = (int) -1;

        $i2 = $i1 ^ $i5;

        $i3 = $i0 & $i2;

        r0.<org.codehaus.jackson.map.MapperConfig$Impl: int _featureFlags> = $i3;

        return;
    }

    public void set(org.codehaus.jackson.map.MapperConfig$ConfigFeature, boolean)
    {
        boolean z0;
        org.codehaus.jackson.map.MapperConfig$Impl r0;
        org.codehaus.jackson.map.MapperConfig$ConfigFeature r1;

        r0 := @this: org.codehaus.jackson.map.MapperConfig$Impl;

        r1 := @parameter0: org.codehaus.jackson.map.MapperConfig$ConfigFeature;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig$Impl: void enable(org.codehaus.jackson.map.MapperConfig$ConfigFeature)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.map.MapperConfig$Impl: void disable(org.codehaus.jackson.map.MapperConfig$ConfigFeature)>(r1);

     label2:
        return;
    }
}
