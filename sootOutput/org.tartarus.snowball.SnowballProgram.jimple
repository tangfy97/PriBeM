public abstract class org.tartarus.snowball.SnowballProgram extends java.lang.Object
{
    private static final java.lang.Object[] EMPTY_ARGS;
    private char[] current;
    protected int cursor;
    protected int limit;
    protected int limit_backward;
    protected int bra;
    protected int ket;

    protected void <init>()
    {
        org.tartarus.snowball.SnowballProgram r0;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[8];

        r0.<org.tartarus.snowball.SnowballProgram: char[] current> = $r1;

        virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: void setCurrent(java.lang.String)>("");

        return;
    }

    public abstract boolean stem();

    public void setCurrent(java.lang.String)
    {
        org.tartarus.snowball.SnowballProgram r0;
        int $i0, $i1, $i2;
        char[] $r2;
        java.lang.String r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r0.<org.tartarus.snowball.SnowballProgram: char[] current> = $r2;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<org.tartarus.snowball.SnowballProgram: int limit> = $i0;

        r0.<org.tartarus.snowball.SnowballProgram: int limit_backward> = 0;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        r0.<org.tartarus.snowball.SnowballProgram: int bra> = $i1;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        r0.<org.tartarus.snowball.SnowballProgram: int ket> = $i2;

        return;
    }

    public java.lang.String getCurrent()
    {
        org.tartarus.snowball.SnowballProgram r1;
        int $i0;
        char[] $r2;
        java.lang.String $r0;

        r1 := @this: org.tartarus.snowball.SnowballProgram;

        $r0 = new java.lang.String;

        $r2 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i0 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r0;
    }

    public void setCurrent(char[], int)
    {
        org.tartarus.snowball.SnowballProgram r0;
        int i0, $i1, $i2;
        char[] r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r0.<org.tartarus.snowball.SnowballProgram: char[] current> = r1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = 0;

        r0.<org.tartarus.snowball.SnowballProgram: int limit> = i0;

        r0.<org.tartarus.snowball.SnowballProgram: int limit_backward> = 0;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        r0.<org.tartarus.snowball.SnowballProgram: int bra> = $i1;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        r0.<org.tartarus.snowball.SnowballProgram: int ket> = $i2;

        return;
    }

    public char[] getCurrentBuffer()
    {
        org.tartarus.snowball.SnowballProgram r0;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        return $r1;
    }

    public int getCurrentBufferLength()
    {
        org.tartarus.snowball.SnowballProgram r0;
        int $i0;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        return $i0;
    }

    protected void copy_from(org.tartarus.snowball.SnowballProgram)
    {
        org.tartarus.snowball.SnowballProgram r0, r1;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r2;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: org.tartarus.snowball.SnowballProgram;

        $r2 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        r0.<org.tartarus.snowball.SnowballProgram: char[] current> = $r2;

        $i0 = r1.<org.tartarus.snowball.SnowballProgram: int cursor>;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i0;

        $i1 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        r0.<org.tartarus.snowball.SnowballProgram: int limit> = $i1;

        $i2 = r1.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        r0.<org.tartarus.snowball.SnowballProgram: int limit_backward> = $i2;

        $i3 = r1.<org.tartarus.snowball.SnowballProgram: int bra>;

        r0.<org.tartarus.snowball.SnowballProgram: int bra> = $i3;

        $i4 = r1.<org.tartarus.snowball.SnowballProgram: int ket>;

        r0.<org.tartarus.snowball.SnowballProgram: int ket> = $i4;

        return;
    }

    protected boolean in_grouping(char[], int, int)
    {
        int $i0, $i1, $i2, i3, i4, $i5, $i6, $i8, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20;
        org.tartarus.snowball.SnowballProgram r0;
        char $c7, $c9, c13, c14;
        char[] $r1, r2;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r2 := @parameter0: char[];

        i4 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        c13 = $r1[$i2];

        $i15 = (int) c13;

        if $i15 > i3 goto label2;

        $i16 = (int) c13;

        if $i16 >= i4 goto label3;

     label2:
        return 0;

     label3:
        $i17 = (int) c13;

        $i5 = $i17 - i4;

        c14 = (char) $i5;

        $i18 = (int) c14;

        $i6 = $i18 >> 3;

        $c9 = r2[$i6];

        $c7 = c14 & 7;

        $i19 = (int) $c7;

        $i8 = 1 << $i19;

        $i20 = (int) $c9;

        $i10 = $i20 & $i8;

        if $i10 != 0 goto label4;

        return 0;

     label4:
        $i11 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i12 = $i11 + 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i12;

        return 1;
    }

    protected boolean in_grouping_b(char[], int, int)
    {
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i9, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21;
        org.tartarus.snowball.SnowballProgram r0;
        char $c8, $c10, c14, c15;
        char[] $r1, r2;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r2 := @parameter0: char[];

        i5 := @parameter1: int;

        i4 := @parameter2: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        if $i1 > $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i3 = $i2 - 1;

        c14 = $r1[$i3];

        $i16 = (int) c14;

        if $i16 > i4 goto label2;

        $i17 = (int) c14;

        if $i17 >= i5 goto label3;

     label2:
        return 0;

     label3:
        $i18 = (int) c14;

        $i6 = $i18 - i5;

        c15 = (char) $i6;

        $i19 = (int) c15;

        $i7 = $i19 >> 3;

        $c10 = r2[$i7];

        $c8 = c15 & 7;

        $i20 = (int) $c8;

        $i9 = 1 << $i20;

        $i21 = (int) $c10;

        $i11 = $i21 & $i9;

        if $i11 != 0 goto label4;

        return 0;

     label4:
        $i12 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i13 = $i12 - 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i13;

        return 1;
    }

    protected boolean out_grouping(char[], int, int)
    {
        int $i0, $i1, $i2, i3, $i4, $i5, i6, $i7, $i8, $i10, $i12, $i13, $i14, $i17, $i18, $i19, $i20, $i21, $i22;
        org.tartarus.snowball.SnowballProgram r0;
        char $c9, $c11, c15, c16;
        char[] $r1, r2;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r2 := @parameter0: char[];

        i6 := @parameter1: int;

        i3 := @parameter2: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        c15 = $r1[$i2];

        $i17 = (int) c15;

        if $i17 > i3 goto label2;

        $i18 = (int) c15;

        if $i18 >= i6 goto label3;

     label2:
        $i4 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i5 = $i4 + 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i5;

        return 1;

     label3:
        $i19 = (int) c15;

        $i7 = $i19 - i6;

        c16 = (char) $i7;

        $i20 = (int) c16;

        $i8 = $i20 >> 3;

        $c11 = r2[$i8];

        $c9 = c16 & 7;

        $i21 = (int) $c9;

        $i10 = 1 << $i21;

        $i22 = (int) $c11;

        $i12 = $i22 & $i10;

        if $i12 != 0 goto label4;

        $i13 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i14 = $i13 + 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i14;

        return 1;

     label4:
        return 0;
    }

    protected boolean out_grouping_b(char[], int, int)
    {
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, i7, $i8, $i9, $i11, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22, $i23;
        org.tartarus.snowball.SnowballProgram r0;
        char $c10, $c12, c16, c17;
        char[] $r1, r2;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r2 := @parameter0: char[];

        i7 := @parameter1: int;

        i4 := @parameter2: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        if $i1 > $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i3 = $i2 - 1;

        c16 = $r1[$i3];

        $i18 = (int) c16;

        if $i18 > i4 goto label2;

        $i19 = (int) c16;

        if $i19 >= i7 goto label3;

     label2:
        $i5 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i6 = $i5 - 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i6;

        return 1;

     label3:
        $i20 = (int) c16;

        $i8 = $i20 - i7;

        c17 = (char) $i8;

        $i21 = (int) c17;

        $i9 = $i21 >> 3;

        $c12 = r2[$i9];

        $c10 = c17 & 7;

        $i22 = (int) $c10;

        $i11 = 1 << $i22;

        $i23 = (int) $c12;

        $i13 = $i23 & $i11;

        if $i13 != 0 goto label4;

        $i14 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i15 = $i14 - 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i15;

        return 1;

     label4:
        return 0;
    }

    protected boolean in_range(int, int)
    {
        org.tartarus.snowball.SnowballProgram r0;
        char c3;
        int $i0, $i1, $i2, i4, i5, $i6, $i7, $i8, $i9;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i5 := @parameter0: int;

        i4 := @parameter1: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        c3 = $r1[$i2];

        $i8 = (int) c3;

        if $i8 > i4 goto label2;

        $i9 = (int) c3;

        if $i9 >= i5 goto label3;

     label2:
        return 0;

     label3:
        $i6 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i7 = $i6 + 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i7;

        return 1;
    }

    protected boolean in_range_b(int, int)
    {
        org.tartarus.snowball.SnowballProgram r0;
        char c4;
        int $i0, $i1, $i2, $i3, i5, i6, $i7, $i8, $i9, $i10;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i6 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        if $i1 > $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i3 = $i2 - 1;

        c4 = $r1[$i3];

        $i9 = (int) c4;

        if $i9 > i5 goto label2;

        $i10 = (int) c4;

        if $i10 >= i6 goto label3;

     label2:
        return 0;

     label3:
        $i7 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i8 = $i7 - 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i8;

        return 1;
    }

    protected boolean out_range(int, int)
    {
        org.tartarus.snowball.SnowballProgram r0;
        char c3;
        int $i0, $i1, $i2, i4, $i5, $i6, i7, $i8, $i9;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i7 := @parameter0: int;

        i4 := @parameter1: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        c3 = $r1[$i2];

        $i8 = (int) c3;

        if $i8 > i4 goto label2;

        $i9 = (int) c3;

        if $i9 < i7 goto label2;

        return 0;

     label2:
        $i5 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i6 = $i5 + 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i6;

        return 1;
    }

    protected boolean out_range_b(int, int)
    {
        org.tartarus.snowball.SnowballProgram r0;
        char c4;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7, i8, $i9, $i10;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i8 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        if $i1 > $i0 goto label1;

        return 0;

     label1:
        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i3 = $i2 - 1;

        c4 = $r1[$i3];

        $i9 = (int) c4;

        if $i9 > i5 goto label2;

        $i10 = (int) c4;

        if $i10 < i8 goto label2;

        return 0;

     label2:
        $i6 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i7 = $i6 - 1;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i7;

        return 1;
    }

    protected boolean eq_s(int, java.lang.CharSequence)
    {
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, i10, $i11, $i12;
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.CharSequence r2;
        char $c8, $c9;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i2 := @parameter0: int;

        r2 := @parameter1: java.lang.CharSequence;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i3 = $i1 - $i0;

        if $i3 >= i2 goto label1;

        return 0;

     label1:
        i10 = 0;

     label2:
        if i10 == i2 goto label4;

        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i6 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i7 = $i6 + i10;

        $c8 = $r1[$i7];

        $c9 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i10);

        $i11 = (int) $c8;

        $i12 = (int) $c9;

        if $i11 == $i12 goto label3;

        return 0;

     label3:
        i10 = i10 + 1;

        goto label2;

     label4:
        $i4 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i5 = $i4 + i2;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i5;

        return 1;
    }

    protected boolean eq_s_b(int, java.lang.CharSequence)
    {
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i11, $i12, $i13;
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.CharSequence r2;
        char $c9, $c10;
        char[] $r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i2 := @parameter0: int;

        r2 := @parameter1: java.lang.CharSequence;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        $i3 = $i1 - $i0;

        if $i3 >= i2 goto label1;

        return 0;

     label1:
        i11 = 0;

     label2:
        if i11 == i2 goto label4;

        $r1 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i6 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i7 = $i6 - i2;

        $i8 = $i7 + i11;

        $c9 = $r1[$i8];

        $c10 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i11);

        $i12 = (int) $c9;

        $i13 = (int) $c10;

        if $i12 == $i13 goto label3;

        return 0;

     label3:
        i11 = i11 + 1;

        goto label2;

     label4:
        $i4 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i5 = $i4 - i2;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i5;

        return 1;
    }

    protected boolean eq_v(java.lang.CharSequence)
    {
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.CharSequence r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $z0 = virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: boolean eq_s(int,java.lang.CharSequence)>($i0, r1);

        return $z0;
    }

    protected boolean eq_v_b(java.lang.CharSequence)
    {
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.CharSequence r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $z0 = virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: boolean eq_s_b(int,java.lang.CharSequence)>($i0, r1);

        return $z0;
    }

    protected int find_among(org.tartarus.snowball.Among[], int)
    {
        org.tartarus.snowball.Among $r10, $r13;
        java.lang.reflect.Method $r2, $r5;
        boolean z0, z1;
        org.tartarus.snowball.SnowballProgram r0, $r4;
        java.lang.IllegalAccessException $r11;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.Object[] $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i16, i17, i18, i19, i20, $i21, i22, i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31;
        java.lang.String $r7;
        char $c14, $c15;
        org.tartarus.snowball.Among[] r1;
        char[] $r8, $r9;
        java.lang.Object $r6;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: org.tartarus.snowball.Among[];

        i0 := @parameter1: int;

        i16 = 0;

        i17 = i0;

        i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        i2 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        i18 = 0;

        i19 = 0;

        z0 = 0;

     label01:
        $i3 = i17 - i16;

        $i4 = $i3 >> 1;

        $i6 = i16 + $i4;

        i20 = 0;

        if i18 >= i19 goto label02;

        $i21 = i18;

        goto label03;

     label02:
        $i21 = i19;

     label03:
        i22 = $i21;

        $r10 = r1[$i6];

        i23 = $i21;

     label04:
        $i24 = $r10.<org.tartarus.snowball.Among: int s_size>;

        if i23 >= $i24 goto label07;

        $i12 = i1 + i22;

        if $i12 != i2 goto label05;

        $i29 = (int) -1;

        i20 = $i29;

        goto label07;

     label05:
        $r8 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i13 = i1 + i22;

        $c15 = $r8[$i13];

        $r9 = $r10.<org.tartarus.snowball.Among: char[] s>;

        $c14 = $r9[i23];

        $i30 = (int) $c15;

        $i31 = (int) $c14;

        i20 = $i30 - $i31;

        if i20 == 0 goto label06;

        goto label07;

     label06:
        i22 = i22 + 1;

        i23 = i23 + 1;

        goto label04;

     label07:
        if i20 >= 0 goto label08;

        i17 = $i6;

        i19 = i22;

        goto label09;

     label08:
        i16 = $i6;

        i18 = i22;

     label09:
        $i5 = i17 - i16;

        if $i5 > 1 goto label13;

        if i16 <= 0 goto label10;

        goto label14;

     label10:
        if i17 != i16 goto label11;

        goto label14;

     label11:
        if z0 == 0 goto label12;

        goto label14;

     label12:
        z0 = 1;

     label13:
        goto label01;

     label14:
        $r13 = r1[i16];

        $i25 = $r13.<org.tartarus.snowball.Among: int s_size>;

        if i18 < $i25 goto label20;

        $i7 = $r13.<org.tartarus.snowball.Among: int s_size>;

        $i8 = i1 + $i7;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i8;

        $r2 = $r13.<org.tartarus.snowball.Among: java.lang.reflect.Method method>;

        if $r2 != null goto label15;

        $i11 = $r13.<org.tartarus.snowball.Among: int result>;

        return $i11;

     label15:
        $r5 = $r13.<org.tartarus.snowball.Among: java.lang.reflect.Method method>;

        $r4 = $r13.<org.tartarus.snowball.Among: org.tartarus.snowball.SnowballProgram methodobject>;

        $r3 = <org.tartarus.snowball.SnowballProgram: java.lang.Object[] EMPTY_ARGS>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r3);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("true");

     label16:
        goto label19;

     label17:
        $r12 := @caughtexception;

        z1 = 0;

        goto label19;

     label18:
        $r11 := @caughtexception;

        z1 = 0;

     label19:
        $i26 = $r13.<org.tartarus.snowball.Among: int s_size>;

        $i27 = i1 + $i26;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i27;

        if z1 == 0 goto label20;

        $i10 = $r13.<org.tartarus.snowball.Among: int result>;

        return $i10;

     label20:
        $i9 = $r13.<org.tartarus.snowball.Among: int substring_i>;

        i16 = $i9;

        if $i9 >= 0 goto label21;

        return 0;

     label21:
        goto label14;

        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label17;
        catch java.lang.IllegalAccessException from label15 to label16 with label18;
    }

    protected int find_among_b(org.tartarus.snowball.Among[], int)
    {
        org.tartarus.snowball.Among $r10, $r13;
        java.lang.reflect.Method $r2, $r5;
        boolean z0, z1;
        org.tartarus.snowball.SnowballProgram r0, $r4;
        java.lang.IllegalAccessException $r11;
        java.lang.reflect.InvocationTargetException $r12;
        java.lang.Object[] $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i19, i20, i21, i22, i23, $i24, i25, i26, $i27, $i28, $i29, $i31, $i32, $i33, $i35;
        java.lang.String $r7;
        char $c17, $c18;
        org.tartarus.snowball.Among[] r1;
        char[] $r8, $r9;
        java.lang.Object $r6;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: org.tartarus.snowball.Among[];

        i0 := @parameter1: int;

        i19 = 0;

        i20 = i0;

        i1 = r0.<org.tartarus.snowball.SnowballProgram: int cursor>;

        i2 = r0.<org.tartarus.snowball.SnowballProgram: int limit_backward>;

        i21 = 0;

        i22 = 0;

        z0 = 0;

     label01:
        $i3 = i20 - i19;

        $i4 = $i3 >> 1;

        $i8 = i19 + $i4;

        i23 = 0;

        if i21 >= i22 goto label02;

        $i24 = i21;

        goto label03;

     label02:
        $i24 = i22;

     label03:
        i25 = $i24;

        $r10 = r1[$i8];

        $i5 = $r10.<org.tartarus.snowball.Among: int s_size>;

        $i6 = $i5 - 1;

        i26 = $i6 - $i24;

     label04:
        if i26 < 0 goto label07;

        $i14 = i1 - i25;

        if $i14 != i2 goto label05;

        $i31 = (int) -1;

        i23 = $i31;

        goto label07;

     label05:
        $r8 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i15 = i1 - 1;

        $i16 = $i15 - i25;

        $c18 = $r8[$i16];

        $r9 = $r10.<org.tartarus.snowball.Among: char[] s>;

        $c17 = $r9[i26];

        $i32 = (int) $c18;

        $i33 = (int) $c17;

        i23 = $i32 - $i33;

        if i23 == 0 goto label06;

        goto label07;

     label06:
        i25 = i25 + 1;

        $i35 = (int) -1;

        i26 = i26 + $i35;

        goto label04;

     label07:
        if i23 >= 0 goto label08;

        i20 = $i8;

        i22 = i25;

        goto label09;

     label08:
        i19 = $i8;

        i21 = i25;

     label09:
        $i7 = i20 - i19;

        if $i7 > 1 goto label13;

        if i19 <= 0 goto label10;

        goto label14;

     label10:
        if i20 != i19 goto label11;

        goto label14;

     label11:
        if z0 == 0 goto label12;

        goto label14;

     label12:
        z0 = 1;

     label13:
        goto label01;

     label14:
        $r13 = r1[i19];

        $i27 = $r13.<org.tartarus.snowball.Among: int s_size>;

        if i21 < $i27 goto label20;

        $i9 = $r13.<org.tartarus.snowball.Among: int s_size>;

        $i10 = i1 - $i9;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i10;

        $r2 = $r13.<org.tartarus.snowball.Among: java.lang.reflect.Method method>;

        if $r2 != null goto label15;

        $i13 = $r13.<org.tartarus.snowball.Among: int result>;

        return $i13;

     label15:
        $r5 = $r13.<org.tartarus.snowball.Among: java.lang.reflect.Method method>;

        $r4 = $r13.<org.tartarus.snowball.Among: org.tartarus.snowball.SnowballProgram methodobject>;

        $r3 = <org.tartarus.snowball.SnowballProgram: java.lang.Object[] EMPTY_ARGS>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r3);

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>();

        z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("true");

     label16:
        goto label19;

     label17:
        $r12 := @caughtexception;

        z1 = 0;

        goto label19;

     label18:
        $r11 := @caughtexception;

        z1 = 0;

     label19:
        $i28 = $r13.<org.tartarus.snowball.Among: int s_size>;

        $i29 = i1 - $i28;

        r0.<org.tartarus.snowball.SnowballProgram: int cursor> = $i29;

        if z1 == 0 goto label20;

        $i12 = $r13.<org.tartarus.snowball.Among: int result>;

        return $i12;

     label20:
        $i11 = $r13.<org.tartarus.snowball.Among: int substring_i>;

        i19 = $i11;

        if $i11 >= 0 goto label21;

        return 0;

     label21:
        goto label14;

        catch java.lang.reflect.InvocationTargetException from label15 to label16 with label17;
        catch java.lang.IllegalAccessException from label15 to label16 with label18;
    }

    protected int replace_s(int, int, java.lang.CharSequence)
    {
        org.tartarus.snowball.SnowballProgram r1;
        java.lang.CharSequence r0;
        int $i0, i1, i2, $i3, i4, $i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24;
        char $c15;
        char[] $r2, $r3, $r4, $r5, $r6, r7;

        r1 := @this: org.tartarus.snowball.SnowballProgram;

        i2 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = i1 - i2;

        i4 = $i0 - $i3;

        $i5 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        i6 = $i5 + i4;

        $r2 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i7 = lengthof $r2;

        if i6 <= $i7 goto label1;

        $i21 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i6, 2);

        r7 = newarray (char)[$i21];

        $r6 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i22 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r7, 0, $i22);

        r1.<org.tartarus.snowball.SnowballProgram: char[] current> = r7;

     label1:
        if i4 == 0 goto label2;

        $i16 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        if i1 >= $i16 goto label2;

        $r4 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $r5 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i17 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i20 = i2 + $i17;

        $i18 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        $i19 = $i18 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r5, $i20, $i19);

     label2:
        i23 = 0;

     label3:
        $i24 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i23 >= $i24 goto label4;

        $r3 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i14 = i2 + i23;

        $c15 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i23);

        $r3[$i14] = $c15;

        i23 = i23 + 1;

        goto label3;

     label4:
        $i8 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        $i9 = $i8 + i4;

        r1.<org.tartarus.snowball.SnowballProgram: int limit> = $i9;

        $i10 = r1.<org.tartarus.snowball.SnowballProgram: int cursor>;

        if $i10 < i1 goto label5;

        $i12 = r1.<org.tartarus.snowball.SnowballProgram: int cursor>;

        $i13 = $i12 + i4;

        r1.<org.tartarus.snowball.SnowballProgram: int cursor> = $i13;

        goto label6;

     label5:
        $i11 = r1.<org.tartarus.snowball.SnowballProgram: int cursor>;

        if $i11 <= i2 goto label6;

        r1.<org.tartarus.snowball.SnowballProgram: int cursor> = i2;

     label6:
        return i4;
    }

    protected void slice_check()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r9;
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        if $i0 < 0 goto label1;

        $i2 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        if $i2 > $i1 goto label1;

        $i4 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        $i3 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        if $i4 <= $i3 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("faulty slice operation: bra=");

        $i5 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",ket=");

        $i6 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",limit=");

        $i7 = r0.<org.tartarus.snowball.SnowballProgram: int limit>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r1;

     label2:
        return;
    }

    protected void slice_from(java.lang.CharSequence)
    {
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.CharSequence r1;
        int $i0, $i1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: java.lang.CharSequence;

        virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: void slice_check()>();

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: int replace_s(int,int,java.lang.CharSequence)>($i1, $i0, r1);

        return;
    }

    protected void slice_del()
    {
        org.tartarus.snowball.SnowballProgram r0;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: void slice_from(java.lang.CharSequence)>("");

        return;
    }

    protected void insert(int, int, java.lang.CharSequence)
    {
        org.tartarus.snowball.SnowballProgram r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.CharSequence;

        $i2 = virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: int replace_s(int,int,java.lang.CharSequence)>(i0, i1, r1);

        $i3 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        if i0 > $i3 goto label1;

        $i7 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        $i8 = $i7 + $i2;

        r0.<org.tartarus.snowball.SnowballProgram: int bra> = $i8;

     label1:
        $i4 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        if i0 > $i4 goto label2;

        $i5 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        $i6 = $i5 + $i2;

        r0.<org.tartarus.snowball.SnowballProgram: int ket> = $i6;

     label2:
        return;
    }

    protected java.lang.StringBuilder slice_to(java.lang.StringBuilder)
    {
        org.tartarus.snowball.SnowballProgram r0;
        int $i0, $i1, i2, $i3;
        char[] $r2;
        java.lang.StringBuilder r1;

        r0 := @this: org.tartarus.snowball.SnowballProgram;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<org.tartarus.snowball.SnowballProgram: void slice_check()>();

        $i1 = r0.<org.tartarus.snowball.SnowballProgram: int ket>;

        $i0 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        i2 = $i1 - $i0;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(0);

        $r2 = r0.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i3 = r0.<org.tartarus.snowball.SnowballProgram: int bra>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, $i3, i2);

        return r1;
    }

    protected java.lang.StringBuilder assign_to(java.lang.StringBuilder)
    {
        org.tartarus.snowball.SnowballProgram r1;
        int $i0;
        char[] $r2;
        java.lang.StringBuilder r0;

        r1 := @this: org.tartarus.snowball.SnowballProgram;

        r0 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0);

        $r2 = r1.<org.tartarus.snowball.SnowballProgram: char[] current>;

        $i0 = r1.<org.tartarus.snowball.SnowballProgram: int limit>;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r2, 0, $i0);

        return r0;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <org.tartarus.snowball.SnowballProgram: java.lang.Object[] EMPTY_ARGS> = $r0;

        return;
    }
}
