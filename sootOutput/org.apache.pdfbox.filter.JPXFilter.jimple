public class org.apache.pdfbox.filter.JPXFilter extends java.lang.Object implements org.apache.pdfbox.filter.Filter
{
    private static final org.apache.commons.logging.Log LOG;

    public void <init>()
    {
        org.apache.pdfbox.filter.JPXFilter r0;

        r0 := @this: org.apache.pdfbox.filter.JPXFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void decode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        byte[] $r18, $r20;
        java.awt.image.DataBufferByte $r17, $r19;
        byte b9, $b11;
        java.awt.image.BufferedImage $r1;
        org.apache.pdfbox.cos.COSDictionary r10;
        org.apache.pdfbox.cos.COSBase $r12;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.awt.image.DataBuffer $r3;
        java.awt.color.ColorSpace $r22;
        java.awt.image.Raster $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12, i13, i14;
        java.lang.String $r8;
        org.apache.pdfbox.cos.COSName $r11, $r13, $r14, $r15, $r21;
        java.io.OutputStream r16;
        org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace $r23;
        java.awt.image.ColorModel $r9;
        org.apache.pdfbox.filter.JPXFilter r24;
        org.apache.commons.logging.Log $r5;
        java.io.InputStream r0;

        r24 := @this: org.apache.pdfbox.filter.JPXFilter;

        r0 := @parameter0: java.io.InputStream;

        r16 := @parameter1: java.io.OutputStream;

        r10 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i13 := @parameter3: int;

        $r1 = staticinvoke <javax.imageio.ImageIO: java.awt.image.BufferedImage read(java.io.InputStream)>(r0);

        if $r1 == null goto label7;

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.image.Raster getData()>();

        $r3 = virtualinvoke $r2.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i0 = virtualinvoke $r3.<java.awt.image.DataBuffer: int getDataType()>();

        if $i0 != 0 goto label6;

        $r9 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>;

        $r12 = virtualinvoke r10.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r11);

        if $r12 != null goto label1;

        $r21 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>;

        $r22 = virtualinvoke $r9.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r23 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace createColorSpace(org.apache.pdfbox.pdmodel.PDDocument,java.awt.color.ColorSpace)>(null, $r22);

        virtualinvoke r10.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r21, $r23);

     label1:
        $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>;

        $i2 = virtualinvoke $r9.<java.awt.image.ColorModel: int getPixelSize()>();

        $i3 = virtualinvoke $r9.<java.awt.image.ColorModel: int getNumComponents()>();

        $i4 = $i2 / $i3;

        virtualinvoke r10.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r13, $i4);

        $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT>;

        $i5 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r10.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r14, $i5);

        $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH>;

        $i6 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke r10.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r15, $i6);

        $i7 = virtualinvoke $r1.<java.awt.image.BufferedImage: int getType()>();

        if $i7 != 5 goto label4;

        $r19 = (java.awt.image.DataBufferByte) $r3;

        $r20 = virtualinvoke $r19.<java.awt.image.DataBufferByte: byte[] getData()>();

        i14 = 0;

     label2:
        $i8 = lengthof $r20;

        if i14 >= $i8 goto label3;

        b9 = $r20[i14];

        $i10 = i14 + 2;

        $b11 = $r20[$i10];

        $r20[i14] = $b11;

        $i12 = i14 + 2;

        $r20[$i12] = b9;

        i14 = i14 + 3;

        goto label2;

     label3:
        virtualinvoke r16.<java.io.OutputStream: void write(byte[])>($r20);

        goto label5;

     label4:
        $r17 = (java.awt.image.DataBufferByte) $r3;

        $r18 = virtualinvoke $r17.<java.awt.image.DataBufferByte: byte[] getData()>();

        virtualinvoke r16.<java.io.OutputStream: void write(byte[])>($r18);

     label5:
        goto label7;

     label6:
        $r5 = <org.apache.pdfbox.filter.JPXFilter: org.apache.commons.logging.Log LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Image data buffer not of type byte but type ");

        $i1 = virtualinvoke $r3.<java.awt.image.DataBuffer: int getDataType()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r8);

     label7:
        return;
    }

    public void encode(java.io.InputStream, java.io.OutputStream, org.apache.pdfbox.cos.COSDictionary, int) throws java.io.IOException
    {
        java.io.OutputStream r3;
        org.apache.pdfbox.cos.COSDictionary r4;
        org.apache.pdfbox.filter.JPXFilter r1;
        int i0;
        org.apache.commons.logging.Log $r0;
        java.io.InputStream r2;

        r1 := @this: org.apache.pdfbox.filter.JPXFilter;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.OutputStream;

        r4 := @parameter2: org.apache.pdfbox.cos.COSDictionary;

        i0 := @parameter3: int;

        $r0 = <org.apache.pdfbox.filter.JPXFilter: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void error(java.lang.Object)>("Warning: JPXFilter.encode is not implemented yet, skipping this stream.");

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/filter/JPXFilter;");

        <org.apache.pdfbox.filter.JPXFilter: org.apache.commons.logging.Log LOG> = $r0;

        return;
    }
}
