class org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator extends org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator
{
    final org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0;

    void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator r1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator;

        r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomMutationComponentGenerator: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator)>(r1);

        return;
    }

    int potential()
    {
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator r0;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator;

        return 0;
    }

    org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$RandomizerMutationComponent generate(boolean)
    {
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters $r2, $r6;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider $r7, $r13;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator$1 $r15;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator r0;
        org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption r10;
        java.lang.String $r11, $r14;
        boolean z0, $z1;
        org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator $r1, $r4, $r5, $r12;
        java.util.List $r3, $r8;
        java.lang.Object $r9;

        r0 := @this: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r2 = $r1.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAnnotationOptions()>();

        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        return null;

     label2:
        $r4 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r7 = $r4.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r5 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r6 = $r5.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters p>;

        $r8 = virtualinvoke $r6.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters: java.util.List getAnnotationOptions()>();

        $r9 = staticinvoke <org.waveprotocol.wave.model.testing.RandomNindoGenerator: java.lang.Object access$200(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider,java.util.List)>($r7, $r8);

        r10 = (org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption) $r9;

        $r11 = virtualinvoke r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption: java.lang.String getKey()>();

        $r12 = r0.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator: org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator this$0>;

        $r13 = $r12.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator: org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider r>;

        $r14 = virtualinvoke r10.<org.waveprotocol.wave.model.testing.RandomDocOpGenerator$Parameters$AnnotationOption: java.lang.String randomValue(org.waveprotocol.wave.model.testing.RandomDocOpGenerator$RandomProvider)>($r13);

        $r15 = new org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator$1;

        specialinvoke $r15.<org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator$1: void <init>(org.waveprotocol.wave.model.testing.RandomNindoGenerator$Generator$StartAnnotationGenerator,java.lang.String,java.lang.String)>(r0, $r11, $r14);

        return $r15;
    }
}
