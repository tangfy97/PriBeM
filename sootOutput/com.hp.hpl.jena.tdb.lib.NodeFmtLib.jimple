public class com.hp.hpl.jena.tdb.lib.NodeFmtLib extends java.lang.Object
{
    private static final boolean onlySafeBNodeLabels;
    static char encodeMarkerChar;
    static char[] invalidBNodeLabelChars;

    public void <init>()
    {
        com.hp.hpl.jena.tdb.lib.NodeFmtLib r0;

        r0 := @this: com.hp.hpl.jena.tdb.lib.NodeFmtLib;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String str(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.graph.Node $r2, $r6, $r10;
        com.hp.hpl.jena.graph.Triple r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12;
        java.lang.String $r3, $r7, $r11, $r13;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r3 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r11 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static java.lang.String str(com.hp.hpl.jena.sparql.core.Quad)
    {
        com.hp.hpl.jena.graph.Node $r2, $r6, $r10, $r14;
        java.lang.String $r3, $r7, $r11, $r15, $r17;
        com.hp.hpl.jena.sparql.core.Quad r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8, $r9, $r12, $r13, $r16;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r3 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r2);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getSubject()>();

        $r7 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r11 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getObject()>();

        $r15 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    public static java.lang.String displayStr(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    public static java.lang.String serialize(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r1;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node,java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r0, null, null);

        return $r1;
    }

    public static java.lang.String serialize(com.hp.hpl.jena.graph.Node, org.apache.jena.riot.system.Prologue)
    {
        org.apache.jena.riot.system.PrefixMap $r3;
        org.apache.jena.riot.system.Prologue r1;
        com.hp.hpl.jena.graph.Node r0;
        java.lang.String $r2, $r4;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: org.apache.jena.riot.system.Prologue;

        $r2 = virtualinvoke r1.<org.apache.jena.riot.system.Prologue: java.lang.String getBaseURI()>();

        $r3 = virtualinvoke r1.<org.apache.jena.riot.system.Prologue: org.apache.jena.riot.system.PrefixMap getPrefixMap()>();

        $r4 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String serialize(com.hp.hpl.jena.graph.Node,java.lang.String,org.apache.jena.riot.system.PrefixMap)>(r0, $r2, $r3);

        return $r4;
    }

    public static java.lang.String serialize(com.hp.hpl.jena.graph.Node, java.lang.String, org.apache.jena.riot.system.PrefixMap)
    {
        com.hp.hpl.jena.graph.Node r0;
        org.apache.jena.riot.system.PrefixMap r13;
        java.lang.String $r5, $r8, $r10, $r11, r12, $r14, $r16, $r17, $r21;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.tdb.TDBException $r1;
        com.hp.hpl.jena.graph.Node_Literal $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r9, $r18, $r19, $r20;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r12 := @parameter1: java.lang.String;

        r13 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        if r0 != null goto label1;

        return "<<null>>";

     label1:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z0 == 0 goto label2;

        $r17 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getBlankNodeLabel()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_:");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;

     label2:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label3;

        $r15 = (com.hp.hpl.jena.graph.Node_Literal) r0;

        $r16 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForLiteral(com.hp.hpl.jena.graph.Node_Literal,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r15, null);

        return $r16;

     label3:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z2 == 0 goto label4;

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r14 = staticinvoke <com.hp.hpl.jena.tdb.lib.NodeFmtLib: java.lang.String stringForURI(java.lang.String,java.lang.String,org.apache.jena.riot.system.PrefixMap)>($r11, r12, r13);

        return $r14;

     label4:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?");

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label5:
        $r1 = new com.hp.hpl.jena.tdb.TDBException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to turn a node into a string: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    static java.lang.String stringForURI(java.lang.String, java.lang.String, org.apache.jena.riot.system.PrefixMap)
    {
        org.apache.jena.riot.system.PrefixMap r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r1, r2, $r3, $r4, $r9, $r10;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r0 := @parameter2: org.apache.jena.riot.system.PrefixMap;

        if r0 == null goto label1;

        $r10 = interfaceinvoke r0.<org.apache.jena.riot.system.PrefixMap: java.lang.String abbreviate(java.lang.String)>(r2);

        if $r10 == null goto label1;

        return $r10;

     label1:
        if r1 == null goto label2;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String abbrevByBase(java.lang.String,java.lang.String)>(r2, r1);

        if $r4 == null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label2:
        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForURI(java.lang.String)>(r2);

        return $r3;
    }

    public static java.lang.String safeBNodeLabel(java.lang.String)
    {
        char $c1, $c2;
        int $i0, i3, $i4;
        java.lang.StringBuilder $r3;
        java.lang.String r1, $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("B");

        i3 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 >= $i0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c1;

        $z0 = staticinvoke <org.apache.jena.riot.system.RiotChars: boolean isA2ZN(int)>($i4);

        if $z0 == 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label3;

     label2:
        $c2 = <com.hp.hpl.jena.tdb.lib.NodeFmtLib: char encodeMarkerChar>;

        staticinvoke <org.apache.jena.atlas.lib.Chars: void encodeAsHex(java.lang.StringBuilder,char,char)>($r3, $c2, $c1);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String displayStr(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.shared.PrefixMapping)
    {
        java.lang.String $r2;
        com.hp.hpl.jena.shared.PrefixMapping r1;
        com.hp.hpl.jena.graph.Triple r0;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForTriple(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.shared.PrefixMapping)>(r0, r1);

        return $r2;
    }

    public static java.lang.String displayStr(com.hp.hpl.jena.rdf.model.RDFNode)
    {
        java.lang.String $r1;
        com.hp.hpl.jena.rdf.model.RDFNode r0;

        r0 := @parameter0: com.hp.hpl.jena.rdf.model.RDFNode;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForRDFNode(com.hp.hpl.jena.rdf.model.RDFNode)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        char[] $r0;
        char $c0;

        <com.hp.hpl.jena.tdb.lib.NodeFmtLib: boolean onlySafeBNodeLabels> = 0;

        <com.hp.hpl.jena.tdb.lib.NodeFmtLib: char encodeMarkerChar> = 88;

        $r0 = newarray (char)[3];

        $c0 = <com.hp.hpl.jena.tdb.lib.NodeFmtLib: char encodeMarkerChar>;

        $r0[0] = $c0;

        $r0[1] = 58;

        $r0[2] = 45;

        <com.hp.hpl.jena.tdb.lib.NodeFmtLib: char[] invalidBNodeLabelChars> = $r0;

        return;
    }
}
