public class org.springframework.expression.spel.ExpressionState extends java.lang.Object
{
    private final org.springframework.expression.EvaluationContext relatedContext;
    private java.util.Stack variableScopes;
    private java.util.Stack contextObjects;
    private final org.springframework.expression.TypedValue rootObject;
    private org.springframework.expression.spel.SpelParserConfiguration configuration;

    public void <init>(org.springframework.expression.EvaluationContext)
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.TypedValue $r2;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext> = r1;

        $r2 = interfaceinvoke r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypedValue getRootObject()>();

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue rootObject> = $r2;

        return;
    }

    public void <init>(org.springframework.expression.EvaluationContext, org.springframework.expression.spel.SpelParserConfiguration)
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.SpelParserConfiguration r2;
        org.springframework.expression.TypedValue $r3;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: org.springframework.expression.spel.SpelParserConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext> = r1;

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration configuration> = r2;

        $r3 = interfaceinvoke r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypedValue getRootObject()>();

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue rootObject> = $r3;

        return;
    }

    public void <init>(org.springframework.expression.EvaluationContext, org.springframework.expression.TypedValue)
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.TypedValue r2;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: org.springframework.expression.TypedValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext> = r1;

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue rootObject> = r2;

        return;
    }

    public void <init>(org.springframework.expression.EvaluationContext, org.springframework.expression.TypedValue, org.springframework.expression.spel.SpelParserConfiguration)
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.SpelParserConfiguration r2;
        org.springframework.expression.TypedValue r3;
        org.springframework.expression.EvaluationContext r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r1 := @parameter0: org.springframework.expression.EvaluationContext;

        r3 := @parameter1: org.springframework.expression.TypedValue;

        r2 := @parameter2: org.springframework.expression.spel.SpelParserConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext> = r1;

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration configuration> = r2;

        r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue rootObject> = r3;

        return;
    }

    private void ensureVariableScopesInitialized()
    {
        org.springframework.expression.spel.ExpressionState$VariableScope $r3;
        org.springframework.expression.spel.ExpressionState r0;
        java.util.Stack $r1, $r2, $r4;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        if $r1 != null goto label1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes> = $r2;

        $r4 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $r3 = new org.springframework.expression.spel.ExpressionState$VariableScope;

        specialinvoke $r3.<org.springframework.expression.spel.ExpressionState$VariableScope: void <init>()>();

        virtualinvoke $r4.<java.util.Stack: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    public org.springframework.expression.TypedValue getActiveContextObject()
    {
        java.util.Stack $r1, $r3, $r4;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r5;
        org.springframework.expression.TypedValue $r2, $r6;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        if $r1 == null goto label1;

        $r3 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        $z0 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue rootObject>;

        return $r2;

     label2:
        $r4 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        $r5 = virtualinvoke $r4.<java.util.Stack: java.lang.Object peek()>();

        $r6 = (org.springframework.expression.TypedValue) $r5;

        return $r6;
    }

    public void pushActiveContextObject(org.springframework.expression.TypedValue)
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.TypedValue r2;
        java.util.Stack $r1, $r3, $r4;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r2 := @parameter0: org.springframework.expression.TypedValue;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        if $r1 != null goto label1;

        $r4 = new java.util.Stack;

        specialinvoke $r4.<java.util.Stack: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects> = $r4;

     label1:
        $r3 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r2);

        return;
    }

    public void popActiveContextObject()
    {
        org.springframework.expression.spel.ExpressionState r0;
        java.util.Stack $r1, $r2, $r3;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        if $r1 != null goto label1;

        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects> = $r3;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack contextObjects>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object pop()>();

        return;
    }

    public org.springframework.expression.TypedValue getRootContextObject()
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.TypedValue $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.TypedValue rootObject>;

        return $r1;
    }

    public void setVariable(java.lang.String, java.lang.Object)
    {
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object r2;
        java.lang.String r1;
        org.springframework.expression.EvaluationContext $r3;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        interfaceinvoke $r3.<org.springframework.expression.EvaluationContext: void setVariable(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    public org.springframework.expression.TypedValue lookupVariable(java.lang.String)
    {
        org.springframework.core.convert.TypeDescriptor $r5;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r3;
        java.lang.String r1;
        org.springframework.expression.TypedValue $r4, $r6;
        org.springframework.expression.EvaluationContext $r2;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r3 = interfaceinvoke $r2.<org.springframework.expression.EvaluationContext: java.lang.Object lookupVariable(java.lang.String)>(r1);

        if $r3 != null goto label1;

        $r6 = <org.springframework.expression.TypedValue: org.springframework.expression.TypedValue NULL>;

        return $r6;

     label1:
        $r4 = new org.springframework.expression.TypedValue;

        $r5 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r3);

        specialinvoke $r4.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r3, $r5);

        return $r4;
    }

    public org.springframework.expression.TypeComparator getTypeComparator()
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.TypeComparator $r2;
        org.springframework.expression.EvaluationContext $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeComparator getTypeComparator()>();

        return $r2;
    }

    public java.lang.Class findType(java.lang.String) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.TypeLocator $r2;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Class $r4;
        java.lang.String r3;
        org.springframework.expression.EvaluationContext $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeLocator getTypeLocator()>();

        $r4 = interfaceinvoke $r2.<org.springframework.expression.TypeLocator: java.lang.Class findType(java.lang.String)>(r3);

        return $r4;
    }

    public java.lang.Object convertValue(java.lang.Object, org.springframework.core.convert.TypeDescriptor) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.TypeConverter $r2;
        org.springframework.core.convert.TypeDescriptor $r4, r5;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object r3, $r6;
        org.springframework.expression.EvaluationContext $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r4 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>(r3);

        $r6 = interfaceinvoke $r2.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>(r3, $r4, r5);

        return $r6;
    }

    public java.lang.Object convertValue(org.springframework.expression.TypedValue, org.springframework.core.convert.TypeDescriptor) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.TypeConverter $r2;
        org.springframework.expression.EvaluationContext $r1;
        org.springframework.core.convert.TypeDescriptor $r6, r7;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r4, $r5, $r8;
        org.springframework.expression.TypedValue r3;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter0: org.springframework.expression.TypedValue;

        r7 := @parameter1: org.springframework.core.convert.TypeDescriptor;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r4 = virtualinvoke r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r5 = virtualinvoke r3.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r6 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r5);

        $r8 = interfaceinvoke $r2.<org.springframework.expression.TypeConverter: java.lang.Object convertValue(java.lang.Object,org.springframework.core.convert.TypeDescriptor,org.springframework.core.convert.TypeDescriptor)>($r4, $r6, r7);

        return $r8;
    }

    public void enterScope(java.util.Map)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope $r1;
        java.util.Map r2;
        org.springframework.expression.spel.ExpressionState r0;
        java.util.Stack $r3;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<org.springframework.expression.spel.ExpressionState: void ensureVariableScopesInitialized()>();

        $r3 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $r1 = new org.springframework.expression.spel.ExpressionState$VariableScope;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState$VariableScope: void <init>(java.util.Map)>(r2);

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r1);

        return;
    }

    public void enterScope(java.lang.String, java.lang.Object)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope $r1;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object r3;
        java.lang.String r2;
        java.util.Stack $r4;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.springframework.expression.spel.ExpressionState: void ensureVariableScopesInitialized()>();

        $r4 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $r1 = new org.springframework.expression.spel.ExpressionState$VariableScope;

        specialinvoke $r1.<org.springframework.expression.spel.ExpressionState$VariableScope: void <init>(java.lang.String,java.lang.Object)>(r2, r3);

        virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r1);

        return;
    }

    public void exitScope()
    {
        org.springframework.expression.spel.ExpressionState r0;
        java.util.Stack $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        specialinvoke r0.<org.springframework.expression.spel.ExpressionState: void ensureVariableScopesInitialized()>();

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        return;
    }

    public void setLocalVariable(java.lang.String, java.lang.Object)
    {
        org.springframework.expression.spel.ExpressionState$VariableScope $r5;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r2, r4;
        java.lang.String r3;
        java.util.Stack $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.springframework.expression.spel.ExpressionState: void ensureVariableScopesInitialized()>();

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        $r5 = (org.springframework.expression.spel.ExpressionState$VariableScope) $r2;

        virtualinvoke $r5.<org.springframework.expression.spel.ExpressionState$VariableScope: void setVariable(java.lang.String,java.lang.Object)>(r3, r4);

        return;
    }

    public java.lang.Object lookupLocalVariable(java.lang.String)
    {
        java.util.Stack $r1, $r2, $r6;
        org.springframework.expression.spel.ExpressionState$VariableScope $r5, $r8;
        int $i0, i1, i2, $i4;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object $r3, $r7, $r9;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<org.springframework.expression.spel.ExpressionState: void ensureVariableScopesInitialized()>();

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $i0 = virtualinvoke $r1.<java.util.Stack: int size()>();

        i1 = $i0 - 1;

        i2 = i1;

        goto label3;

     label1:
        $r2 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $r3 = virtualinvoke $r2.<java.util.Stack: java.lang.Object get(int)>(i2);

        $r5 = (org.springframework.expression.spel.ExpressionState$VariableScope) $r3;

        $z0 = virtualinvoke $r5.<org.springframework.expression.spel.ExpressionState$VariableScope: boolean definesVariable(java.lang.String)>(r4);

        if $z0 == 0 goto label2;

        $r6 = r0.<org.springframework.expression.spel.ExpressionState: java.util.Stack variableScopes>;

        $r7 = virtualinvoke $r6.<java.util.Stack: java.lang.Object get(int)>(i2);

        $r8 = (org.springframework.expression.spel.ExpressionState$VariableScope) $r7;

        $r9 = virtualinvoke $r8.<org.springframework.expression.spel.ExpressionState$VariableScope: java.lang.Object lookupVariable(java.lang.String)>(r4);

        return $r9;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label3:
        if i2 >= 0 goto label1;

        return null;
    }

    public org.springframework.expression.TypedValue operate(org.springframework.expression.Operation, java.lang.Object, java.lang.Object) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.SpelEvaluationException $r8;
        java.lang.Object[] $r9;
        org.springframework.expression.Operation r3;
        org.springframework.core.convert.TypeDescriptor $r13;
        org.springframework.expression.OperatorOverloader $r2;
        java.lang.String $r14, r15, $r16;
        org.springframework.expression.TypedValue $r12;
        boolean $z0;
        org.springframework.expression.spel.SpelMessage $r10;
        org.springframework.expression.EvaluationContext $r1;
        org.springframework.expression.spel.ExpressionState r0;
        java.lang.Object r4, r5, $r11;
        java.lang.Class $r6, $r7;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        r3 := @parameter0: org.springframework.expression.Operation;

        r4 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: org.springframework.expression.OperatorOverloader getOperatorOverloader()>();

        $z0 = interfaceinvoke $r2.<org.springframework.expression.OperatorOverloader: boolean overridesOperation(org.springframework.expression.Operation,java.lang.Object,java.lang.Object)>(r3, r4, r5);

        if $z0 == 0 goto label1;

        $r11 = interfaceinvoke $r2.<org.springframework.expression.OperatorOverloader: java.lang.Object operate(org.springframework.expression.Operation,java.lang.Object,java.lang.Object)>(r3, r4, r5);

        $r12 = new org.springframework.expression.TypedValue;

        $r13 = staticinvoke <org.springframework.core.convert.TypeDescriptor: org.springframework.core.convert.TypeDescriptor forObject(java.lang.Object)>($r11);

        specialinvoke $r12.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r11, $r13);

        return $r12;

     label1:
        if r4 != null goto label2;

        $r14 = "null";

        goto label3;

     label2:
        $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

     label3:
        r15 = $r14;

        if r5 != null goto label4;

        $r16 = "null";

        goto label5;

     label4:
        $r7 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

     label5:
        $r8 = new org.springframework.expression.spel.SpelEvaluationException;

        $r10 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r3;

        $r9[1] = r15;

        $r9[2] = $r16;

        specialinvoke $r8.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r10, $r9);

        throw $r8;
    }

    public java.util.List getPropertyAccessors()
    {
        org.springframework.expression.spel.ExpressionState r0;
        java.util.List $r2;
        org.springframework.expression.EvaluationContext $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        $r2 = interfaceinvoke $r1.<org.springframework.expression.EvaluationContext: java.util.List getPropertyAccessors()>();

        return $r2;
    }

    public org.springframework.expression.EvaluationContext getEvaluationContext()
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.EvaluationContext $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.EvaluationContext relatedContext>;

        return $r1;
    }

    public org.springframework.expression.spel.SpelParserConfiguration getConfiguration()
    {
        org.springframework.expression.spel.ExpressionState r0;
        org.springframework.expression.spel.SpelParserConfiguration $r1;

        r0 := @this: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ExpressionState: org.springframework.expression.spel.SpelParserConfiguration configuration>;

        return $r1;
    }
}
