public abstract class org.apache.cxf.interceptor.AbstractLoggingInterceptor extends org.apache.cxf.phase.AbstractPhaseInterceptor
{
    protected static final java.lang.String BINARY_CONTENT_MESSAGE;
    private static final java.util.List BINARY_CONTENT_MEDIA_TYPES;
    protected int limit;
    protected long threshold;
    protected java.io.PrintWriter writer;
    protected boolean prettyLogging;
    private boolean showBinaryContent;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String)>(r1);

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit> = 102400;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: long threshold> = -1L;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.cxf.phase.AbstractPhaseInterceptor: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit> = 102400;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: long threshold> = -1L;

        return;
    }

    protected abstract java.util.logging.Logger getLogger();

    java.util.logging.Logger getMessageLogger(org.apache.cxf.message.Message)
    {
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r23;
        org.apache.cxf.service.model.ServiceInfo $r4, $r6, $r9;
        java.lang.String $r8, $r12, $r14, $r22;
        org.apache.cxf.service.model.EndpointInfo $r3;
        org.apache.cxf.service.model.InterfaceInfo $r10;
        org.apache.cxf.message.Message r0;
        java.util.logging.Logger $r25, $r26, r27;
        org.apache.cxf.message.Exchange $r1;
        org.apache.cxf.endpoint.Endpoint $r2;
        java.lang.Object $r5;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.Class $r24;
        javax.xml.namespace.QName $r7, $r11, $r13;

        r23 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        $r3 = interfaceinvoke $r2.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r4 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.ServiceInfo getService()>();

        if $r4 != null goto label1;

        $r26 = virtualinvoke r23.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.logging.Logger getLogger()>();

        return $r26;

     label1:
        $r5 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: java.lang.Object getProperty(java.lang.String,java.lang.Class)>("MessageLogger", class "Ljava/util/logging/Logger;");

        r27 = (java.util.logging.Logger) $r5;

        if r27 != null goto label2;

        $r6 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.ServiceInfo getService()>();

        $r7 = virtualinvoke $r6.<org.apache.cxf.service.model.ServiceInfo: javax.xml.namespace.QName getName()>();

        $r8 = virtualinvoke $r7.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r9 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: org.apache.cxf.service.model.ServiceInfo getService()>();

        $r10 = virtualinvoke $r9.<org.apache.cxf.service.model.ServiceInfo: org.apache.cxf.service.model.InterfaceInfo getInterface()>();

        $r11 = virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: javax.xml.namespace.QName getName()>();

        $r12 = virtualinvoke $r11.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r13 = virtualinvoke $r10.<org.apache.cxf.service.model.InterfaceInfo: javax.xml.namespace.QName getName()>();

        $r14 = virtualinvoke $r13.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.cxf.services.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = virtualinvoke r23.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class,java.lang.String,java.lang.String)>($r24, null, $r22);

        r27 = $r25;

        virtualinvoke $r3.<org.apache.cxf.service.model.EndpointInfo: void setProperty(java.lang.String,java.lang.Object)>("MessageLogger", $r25);

     label2:
        return r27;
    }

    public void setOutputLocation(java.lang.String)
    {
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r1;
        java.util.logging.Level $r16;
        java.lang.String r0, $r2, $r3, $r4, $r19;
        java.net.URI $r5;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter $r7, $r9, $r11;
        java.io.PrintStream $r10, $r12;
        java.io.FileWriter $r8;
        java.util.logging.Logger $r14;
        java.io.File $r6;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r15, $r17, $r18;

        r1 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = "<logger>";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        r1.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer> = null;

        goto label7;

     label2:
        $r3 = "<stdout>";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r11 = new java.io.PrintWriter;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r12, 1);

        r1.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer> = $r11;

        goto label7;

     label3:
        $r4 = "<stderr>";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        $r9 = new java.io.PrintWriter;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r9.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r10, 1);

        r1.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer> = $r9;

        goto label7;

     label4:
        $r5 = new java.net.URI;

        specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>(r0);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.net.URI)>($r5);

        $r7 = new java.io.PrintWriter;

        $r8 = new java.io.FileWriter;

        specialinvoke $r8.<java.io.FileWriter: void <init>(java.io.File,boolean)>($r6, 1);

        specialinvoke $r7.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r8, 1);

        r1.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer> = $r7;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r1.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.logging.Logger getLogger()>();

        $r16 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error configuring log location ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r16, $r19, $r13);

     label7:
        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void setPrintWriter(java.io.PrintWriter)
    {
        java.io.PrintWriter r1;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r1 := @parameter0: java.io.PrintWriter;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer> = r1;

        return;
    }

    public java.io.PrintWriter getPrintWriter()
    {
        java.io.PrintWriter $r1;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        $r1 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer>;

        return $r1;
    }

    public void setLimit(int)
    {
        int i0;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        i0 := @parameter0: int;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit> = i0;

        return;
    }

    public int getLimit()
    {
        int $i0;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        $i0 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        return $i0;
    }

    public void setPrettyLogging(boolean)
    {
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: boolean prettyLogging> = z0;

        return;
    }

    public boolean isPrettyLogging()
    {
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        $z0 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: boolean prettyLogging>;

        return $z0;
    }

    public void setInMemThreshold(long)
    {
        long l0;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        l0 := @parameter0: long;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: long threshold> = l0;

        return;
    }

    public long getInMemThreshold()
    {
        long $l0;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        $l0 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: long threshold>;

        return $l0;
    }

    protected void writePayload(java.lang.StringBuilder, org.apache.cxf.io.CachedOutputStream, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        javax.xml.transform.Transformer $r6;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        javax.xml.transform.stream.StreamSource $r16;
        javax.xml.transform.stream.StreamResult $r17;
        long $l1, $l3, $l6;
        byte $b7;
        int $i0, $i2, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i14;
        java.lang.String r1, r4, $r5, $r11, $r12, $r13, $r14;
        boolean $z0, $z1;
        java.io.StringWriter $r15;
        java.lang.StringBuilder r3;
        org.apache.cxf.io.CachedOutputStream r2;
        java.io.InputStream $r9;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r3 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: org.apache.cxf.io.CachedOutputStream;

        r1 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: boolean isPrettyLogging()>();

        if $z0 == 0 goto label4;

        if r4 == null goto label4;

        $i4 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("xml");

        if $i4 < 0 goto label4;

        $r5 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>();

        $i5 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("multipart/related");

        if $i5 >= 0 goto label4;

        $l6 = virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: long size()>();

        $b7 = $l6 cmp 0L;

        $i12 = (int) $b7;

        if $i12 <= 0 goto label4;

        $r6 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.Transformer newTransformer(int)>(2);

        virtualinvoke $r6.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        virtualinvoke $r6.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", "2");

        $r15 = new java.io.StringWriter;

        specialinvoke $r15.<java.io.StringWriter: void <init>()>();

        $r16 = new javax.xml.transform.stream.StreamSource;

        $r9 = virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: java.io.InputStream getInputStream()>();

        specialinvoke $r16.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r9);

        $r17 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r17.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r15);

        virtualinvoke $r6.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r16, $r17);

        $r11 = virtualinvoke $r15.<java.io.StringWriter: java.lang.String toString()>();

        $i8 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i9 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        if $i8 < $i9 goto label1;

        $i10 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $i14 = (int) -1;

        if $i10 != $i14 goto label2;

     label1:
        $r12 = virtualinvoke $r15.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label3;

     label2:
        $r13 = virtualinvoke $r15.<java.io.StringWriter: java.lang.String toString()>();

        $i11 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label3:
        goto label6;

     label4:
        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r1);

        if $z1 == 0 goto label5;

        $i2 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $l3 = (long) $i2;

        virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,long)>(r3, $l3);

        goto label6;

     label5:
        $i0 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $l1 = (long) $i0;

        virtualinvoke r2.<org.apache.cxf.io.CachedOutputStream: void writeCacheTo(java.lang.StringBuilder,java.lang.String,long)>(r3, r1, $l1);

     label6:
        return;
    }

    protected void writePayload(java.lang.StringBuilder, java.io.StringWriter, java.lang.String) throws java.lang.Exception
    {
        javax.xml.transform.Transformer $r6;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        javax.xml.transform.stream.StreamSource $r20;
        javax.xml.transform.stream.StreamResult $r21;
        java.lang.StringBuffer $r5, $r10, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String r4, $r11, $r13, $r14, $r15, $r16;
        boolean $z0;
        java.lang.CharSequence $r3;
        java.io.StringWriter r1, $r18;
        java.io.StringReader $r19;
        java.lang.StringBuilder r2;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r2 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.io.StringWriter;

        r4 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: boolean isPrettyLogging()>();

        if $z0 == 0 goto label4;

        if r4 == null goto label4;

        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("xml");

        if $i1 < 0 goto label4;

        $r5 = virtualinvoke r1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $i2 = virtualinvoke $r5.<java.lang.StringBuffer: int length()>();

        if $i2 <= 0 goto label4;

        $r6 = staticinvoke <org.apache.cxf.helpers.XMLUtils: javax.xml.transform.Transformer newTransformer(int)>(2);

        virtualinvoke $r6.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "yes");

        virtualinvoke $r6.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("{http://xml.apache.org/xslt}indent-amount", "2");

        $r18 = new java.io.StringWriter;

        specialinvoke $r18.<java.io.StringWriter: void <init>()>();

        $r20 = new javax.xml.transform.stream.StreamSource;

        $r19 = new java.io.StringReader;

        $r10 = virtualinvoke r1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r19.<java.io.StringReader: void <init>(java.lang.String)>($r11);

        specialinvoke $r20.<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader)>($r19);

        $r21 = new javax.xml.transform.stream.StreamResult;

        specialinvoke $r21.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r18);

        virtualinvoke $r6.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>($r20, $r21);

        $r13 = virtualinvoke $r18.<java.io.StringWriter: java.lang.String toString()>();

        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        $i4 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        if $i3 < $i4 goto label1;

        $i5 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $i10 = (int) -1;

        if $i5 != $i10 goto label2;

     label1:
        $r14 = virtualinvoke $r18.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        goto label3;

     label2:
        $r15 = virtualinvoke $r18.<java.io.StringWriter: java.lang.String toString()>();

        $i6 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

     label3:
        goto label6;

     label4:
        $r17 = virtualinvoke r1.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $i7 = virtualinvoke $r17.<java.lang.StringBuffer: int length()>();

        $i8 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        if $i7 <= $i8 goto label5;

        $i0 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: int limit>;

        $r3 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

        goto label6;

     label5:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>($r17);

     label6:
        return;
    }

    protected java.lang.String transform(java.lang.String)
    {
        java.lang.String r0;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r1;

        r1 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    protected void log(java.util.logging.Logger, java.lang.String)
    {
        java.io.PrintWriter $r2, $r9, $r10;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        java.util.logging.Logger r3;
        java.util.logging.LogRecord $r5;
        java.util.logging.Level $r4, $r6;
        java.lang.String $r1, $r7, $r8, r11;
        boolean $z0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r3 := @parameter0: java.util.logging.Logger;

        r11 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.lang.String transform(java.lang.String)>(r11);

        $r2 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer>;

        if $r2 == null goto label1;

        $r9 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer>;

        virtualinvoke $r9.<java.io.PrintWriter: void println(java.lang.String)>($r1);

        $r10 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.io.PrintWriter writer>;

        virtualinvoke $r10.<java.io.PrintWriter: void flush()>();

        goto label2;

     label1:
        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z0 == 0 goto label2;

        $r5 = new java.util.logging.LogRecord;

        $r6 = <java.util.logging.Level: java.util.logging.Level INFO>;

        specialinvoke $r5.<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>($r6, $r1);

        $r7 = virtualinvoke r3.<java.util.logging.Logger: java.lang.String getName()>();

        virtualinvoke $r5.<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)>($r7);

        virtualinvoke $r5.<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)>(null);

        $r8 = virtualinvoke r3.<java.util.logging.Logger: java.lang.String getName()>();

        virtualinvoke $r5.<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>($r8);

        virtualinvoke r3.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r5);

     label2:
        return;
    }

    public void setShowBinaryContent(boolean)
    {
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        boolean z0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: boolean showBinaryContent> = z0;

        return;
    }

    public boolean isShowBinaryContent()
    {
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        $z0 = r0.<org.apache.cxf.interceptor.AbstractLoggingInterceptor: boolean showBinaryContent>;

        return $z0;
    }

    public boolean isBinaryContent(java.lang.String)
    {
        java.util.List $r1;
        org.apache.cxf.interceptor.AbstractLoggingInterceptor r2;
        java.lang.String r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.cxf.interceptor.AbstractLoggingInterceptor;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.List BINARY_CONTENT_MEDIA_TYPES>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        java.util.List $r1, $r2, $r3, $r4;
        java.util.ArrayList $r0;

        <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.lang.String BINARY_CONTENT_MESSAGE> = "--- Binary Content ---";

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.List BINARY_CONTENT_MEDIA_TYPES> = $r0;

        $r1 = <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.List BINARY_CONTENT_MEDIA_TYPES>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("application/octet-stream");

        $r2 = <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.List BINARY_CONTENT_MEDIA_TYPES>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("image/png");

        $r3 = <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.List BINARY_CONTENT_MEDIA_TYPES>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("image/jpeg");

        $r4 = <org.apache.cxf.interceptor.AbstractLoggingInterceptor: java.util.List BINARY_CONTENT_MEDIA_TYPES>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("image/gif");

        return;
    }
}
