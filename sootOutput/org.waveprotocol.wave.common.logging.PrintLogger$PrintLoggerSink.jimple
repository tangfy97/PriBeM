final class org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink extends org.waveprotocol.wave.common.logging.LogSink
{
    private final java.lang.StringBuilder log;
    private final java.io.PrintStream echoPrinter;
    private org.waveprotocol.wave.common.logging.AbstractLogger$Level allowedMinLogLevel;

    public void <init>(java.io.PrintStream)
    {
        java.io.PrintStream r3;
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level $r2;
        java.lang.StringBuilder $r1;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        r3 := @parameter0: java.io.PrintStream;

        specialinvoke r0.<org.waveprotocol.wave.common.logging.LogSink: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: java.lang.StringBuilder log> = $r1;

        $r2 = <org.waveprotocol.wave.common.logging.AbstractLogger$Level: org.waveprotocol.wave.common.logging.AbstractLogger$Level FATAL>;

        r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: org.waveprotocol.wave.common.logging.AbstractLogger$Level allowedMinLogLevel> = $r2;

        r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: java.io.PrintStream echoPrinter> = r3;

        return;
    }

    public void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.String)
    {
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r5, $r6, $r10;
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink r0;
        int $i0, $i1;
        java.lang.String r1, $r17;
        java.io.PrintStream $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r2, $r3, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        r5 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: java.lang.StringBuilder log>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r4 = r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: java.io.PrintStream echoPrinter>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r1);

        $i0 = virtualinvoke r5.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: int value()>();

        $r6 = r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: org.waveprotocol.wave.common.logging.AbstractLogger$Level allowedMinLogLevel>;

        $i1 = virtualinvoke $r6.<org.waveprotocol.wave.common.logging.AbstractLogger$Level: int value()>();

        if $i0 >= $i1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot log below the [min log level:");

        $r10 = r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: org.waveprotocol.wave.common.logging.AbstractLogger$Level allowedMinLogLevel>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with [log level:");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] and [msg:");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r7;

     label1:
        return;
    }

    public void setAllowedMinLogLevel(org.waveprotocol.wave.common.logging.AbstractLogger$Level)
    {
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: org.waveprotocol.wave.common.logging.AbstractLogger$Level allowedMinLogLevel> = r1;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink r0;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        $r1 = r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: java.lang.StringBuilder log>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public transient void lazyLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level, java.lang.Object[])
    {
        java.lang.Object[] r2;
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        r2 := @parameter1: java.lang.Object[];

        $r3 = staticinvoke <org.waveprotocol.wave.common.logging.LogUtils: java.lang.String stringifyLogObject(java.lang.Object)>(r2);

        virtualinvoke r0.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: void log(org.waveprotocol.wave.common.logging.AbstractLogger$Level,java.lang.String)>(r1, $r3);

        return;
    }
}
