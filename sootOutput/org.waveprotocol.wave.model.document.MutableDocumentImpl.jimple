public class org.waveprotocol.wave.model.document.MutableDocumentImpl extends java.lang.Object implements org.waveprotocol.wave.model.document.MutableDocument
{
    protected final org.waveprotocol.wave.model.operation.OperationSequencer sequencer;
    private final org.waveprotocol.wave.model.document.ReadableWDocument doc;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.operation.OperationSequencer, org.waveprotocol.wave.model.document.ReadableWDocument)
    {
        org.waveprotocol.wave.model.operation.OperationSequencer r1;
        org.waveprotocol.wave.model.document.ReadableWDocument r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.OperationSequencer;

        r2 := @parameter1: org.waveprotocol.wave.model.document.ReadableWDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.operation.OperationSequencer sequencer> = r1;

        r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc> = r2;

        return;
    }

    protected void begin()
    {
        org.waveprotocol.wave.model.operation.OperationSequencer $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.operation.OperationSequencer sequencer>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.operation.OperationSequencer: void begin()>();

        return;
    }

    protected void end()
    {
        org.waveprotocol.wave.model.operation.OperationSequencer $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.operation.OperationSequencer sequencer>;

        interfaceinvoke $r1.<org.waveprotocol.wave.model.operation.OperationSequencer: void end()>();

        return;
    }

    private void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.operation.Nindo $r3;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r1;
        org.waveprotocol.wave.model.operation.OperationSequencer $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.operation.OperationSequencer sequencer>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void consume(java.lang.Object)>($r3);

        return;
    }

    private void consume(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        org.waveprotocol.wave.model.operation.OperationSequencer $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.Nindo r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.operation.OperationSequencer sequencer>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.operation.OperationSequencer: void consume(java.lang.Object)>(r1);

        return;
    }

    public void deleteNode(java.lang.Object)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r3, $r4;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int before(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r2, r1);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteElement(java.lang.Object,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r1, $r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r4);

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void emptyElement(java.lang.Object)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r3, $r4;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int start(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r2, r1);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r4 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder emptyElement(java.lang.Object,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r1, $r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r4);

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void insertText(int, java.lang.String)
    {
        java.lang.Throwable $r4;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r2, $r3;
        int i0, $i1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndex(int,int)>(i0, $i1);

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>(i0);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder insertText(java.lang.String,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r1, $r2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r3);

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void insertText(org.waveprotocol.wave.model.document.util.Point, java.lang.String)
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r3 := @parameter1: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r0, r1, "MutableDocumentImpl.insertText");

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void insertText(int,java.lang.String)>($i0, r3);

        return;
    }

    public java.lang.Object appendXml(org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r4;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object $r2, $r5;
        org.waveprotocol.wave.model.document.util.Point$El $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getDocumentElement()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r2);

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.XmlStringBuilder)>($r3, r4);

        return $r5;
    }

    public static void appendXmlToBuilder(org.waveprotocol.wave.model.document.util.XmlStringBuilder, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r0;
        org.waveprotocol.wave.model.document.parser.XmlParseException $r11;
        org.waveprotocol.wave.model.util.StringMap $r8;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r5;
        int[] $r3;
        java.util.Map $r9;
        int $i0, $i1;
        java.lang.String $r1, $r6, $r10, $r16;
        org.waveprotocol.wave.model.document.parser.XmlPullParser $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r12;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r7;
        org.waveprotocol.wave.model.document.parser.ItemType $r4;
        java.lang.StringBuilder $r13, $r14, $r15;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        r5 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.XmlStringBuilder: java.lang.String getXmlString()>();

     label1:
        $r2 = staticinvoke <org.waveprotocol.wave.model.document.parser.XmlParserFactory: org.waveprotocol.wave.model.document.parser.XmlPullParser unbuffered(java.lang.String)>($r1);

     label2:
        $z0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.parser.XmlPullParser: boolean hasNext()>();

        if $z0 == 0 goto label7;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.parser.XmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType next()>();

        $r3 = <org.waveprotocol.wave.model.document.MutableDocumentImpl$4: int[] $SwitchMap$org$waveprotocol$wave$model$document$parser$ItemType>;

        $r4 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.parser.XmlPullParser: org.waveprotocol.wave.model.document.parser.ItemType getCurrentType()>();

        $i0 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.parser.ItemType: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label3:
        $r10 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.parser.XmlPullParser: java.lang.String getText()>();

        virtualinvoke r5.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void characters(java.lang.String)>($r10);

        goto label6;

     label4:
        $r6 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.parser.XmlPullParser: java.lang.String getTagName()>();

        $r7 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        $r8 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.parser.XmlPullParser: org.waveprotocol.wave.model.util.StringMap getAttributes()>();

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Map newJavaMap(org.waveprotocol.wave.model.util.ReadableStringMap)>($r8);

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>($r9);

        virtualinvoke r5.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>($r6, $r7);

        goto label6;

     label5:
        virtualinvoke r5.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementEnd()>();

     label6:
        goto label2;

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ill-formed xml: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r11);

        throw $r12;

     label9:
        return;

        catch org.waveprotocol.wave.model.document.parser.XmlParseException from label1 to label7 with label8;
    }

    public java.lang.Object insertXml(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.XmlStringBuilder)
    {
        org.waveprotocol.wave.model.document.util.XmlStringBuilder r4;
        java.lang.Throwable $r8;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r3;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r5;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object $r7;
        org.waveprotocol.wave.model.document.util.Point r1, $r6;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r4 := @parameter1: org.waveprotocol.wave.model.document.util.XmlStringBuilder;

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r0, r1, "MutableDocumentImpl.insertXml");

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r3 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        staticinvoke <org.waveprotocol.wave.model.document.MutableDocumentImpl: void appendXmlToBuilder(org.waveprotocol.wave.model.document.util.XmlStringBuilder,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r4, $r3);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r3);

        $r5 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object elementAfter(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point)>(r0, $r6);

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        return $r7;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.waveprotocol.wave.model.document.util.Range deleteRange(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.util.Range $r6;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        org.waveprotocol.wave.model.document.util.Point $r2, $r4, $r8, $r10;
        org.waveprotocol.wave.model.document.util.PointRange $r5;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r3, $r7, $r9;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i1);

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r2, $r4);

        $r6 = new org.waveprotocol.wave.model.document.util.Range;

        $r7 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r8 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        $i3 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r8);

        $r9 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r10 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getSecond()>();

        $i4 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r10);

        specialinvoke $r6.<org.waveprotocol.wave.model.document.util.Range: void <init>(int,int)>($i3, $i4);

        return $r6;
    }

    public org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r19, $r22, $r27, $r33;
        java.lang.Throwable $r37;
        java.lang.AssertionError $r48;
        java.util.ArrayList $r47;
        org.waveprotocol.wave.model.document.util.Point r1, r2, r38, $r43;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        boolean $z0, $z1, $z2, z3, $z5, $z6;
        org.waveprotocol.wave.model.document.util.PointRange $r46, $r49;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3, $r4, $r5, $r10, $r13, $r17, $r18, $r20, $r21, $r23, $r25, $r29, $r30, $r32, $r34, $r42;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9, $i10, i11, $i13, $i15, $i17;
        java.lang.IllegalArgumentException $r45;
        java.lang.Object $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15, $r24, $r26, $r31, r39, r40, r41;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r0, r1, "MutableDocumentImpl.deleteRange start point");

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r0, r2, "MutableDocumentImpl.deleteRange end point");

        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r4 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i1 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r2);

        if $i0 <= $i1 goto label01;

        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MutableDocumentImpl.deleteRange: start is after end");

        throw $r45;

     label01:
        if $i0 != $i1 goto label02;

        $r46 = new org.waveprotocol.wave.model.document.util.PointRange;

        specialinvoke $r46.<org.waveprotocol.wave.model.document.util.PointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>(r1, r2);

        return $r46;

     label02:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        r38 = null;

        $r5 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r7 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r6);

        $r8 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r8);

        $z0 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ReadableWDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r7, $r9);

        if $z0 == 0 goto label03;

        $r33 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteRangeInternal(int,int)>($i0, $i1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r33);

        $r34 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r38 = interfaceinvoke $r34.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        goto label21;

     label03:
        $r10 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r11 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r12 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r10, $r11);

        $r13 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r14 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r15 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r13, $r14);

        $r47 = new java.util.ArrayList;

        specialinvoke $r47.<java.util.ArrayList: void <init>()>();

        r39 = $r12;

     label04:
        if r39 == null goto label05;

        interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>(r39);

        $r32 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r39 = interfaceinvoke $r32.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r39);

        goto label04;

     label05:
        $i13 = (int) -2;

        i7 = $i13;

        z3 = 1;

        r40 = $r15;

        r41 = $r15;

     label06:
        $z1 = interfaceinvoke $r47.<java.util.List: boolean contains(java.lang.Object)>(r40);

        if $z1 == 0 goto label11;

        $i6 = interfaceinvoke $r47.<java.util.List: int indexOf(java.lang.Object)>(r40);

        i7 = $i6 - 1;

        if i7 < 0 goto label07;

        $z6 = 1;

        $z5 = 1;

        goto label08;

     label07:
        $z6 = 0;

        $z5 = 0;

     label08:
        z3 = $z5;

        if $z6 == 0 goto label09;

        $r30 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r31 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(i7);

        $i8 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int after(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r30, $r31);

        goto label10;

     label09:
        $i8 = $i0;

     label10:
        i9 = $i8;

        goto label12;

     label11:
        $r17 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        i9 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int start(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r17, r40);

     label12:
        if r40 != $r15 goto label13;

        $i10 = $i1;

        goto label14;

     label13:
        $r18 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i10 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int before(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r18, r41);

     label14:
        $r19 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteRangeInternal(int,int)>(i9, $i10);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r19);

        if r38 != null goto label15;

        $r29 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r38 = interfaceinvoke $r29.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i9);

     label15:
        r41 = r40;

        if $z1 == 0 goto label16;

        goto label17;

     label16:
        $r20 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r40 = interfaceinvoke $r20.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r40);

        goto label06;

     label17:
        $z2 = <org.waveprotocol.wave.model.document.MutableDocumentImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label18;

        $i15 = (int) -2;

        if i7 != $i15 goto label18;

        $r48 = new java.lang.AssertionError;

        specialinvoke $r48.<java.lang.AssertionError: void <init>()>();

        throw $r48;

     label18:
        i11 = i7;

     label19:
        if i11 <= 0 goto label20;

        $r23 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i3 = i11 - 1;

        $r24 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>($i3);

        $i4 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int after(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r23, $r24);

        $r25 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r26 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(i11);

        $i5 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int end(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r25, $r26);

        $r27 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteRangeInternal(int,int)>($i4, $i5);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r27);

        $i17 = (int) -1;

        i11 = i11 + $i17;

        goto label19;

     label20:
        if z3 == 0 goto label21;

        $r21 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int end(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r21, $r12);

        $r22 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteRangeInternal(int,int)>($i0, $i2);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r22);

     label21:
        $r42 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r43 = interfaceinvoke $r42.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $r49 = new org.waveprotocol.wave.model.document.util.PointRange;

        specialinvoke $r49.<org.waveprotocol.wave.model.document.util.PointRange: void <init>(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r43, r38);

     label22:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        return $r49;

     label23:
        $r37 := @caughtexception;

     label24:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r37;

        catch java.lang.Throwable from label02 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public void moveSiblings(org.waveprotocol.wave.model.document.util.Point, java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.operation.DocOp $r24, $r26, $r27;
        org.waveprotocol.wave.model.util.ReadableStringSet $r16, $r22;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        org.waveprotocol.wave.model.util.ReadableStringMap $r30;
        boolean $z0, $z1, $z2;
        org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer $r13;
        org.waveprotocol.wave.model.document.util.Point$El $r4, $r8, $r38;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r3, $r6, $r7, $r10, $r11, $r15, $r18, $r21, $r32, $r33, $r35, $r36;
        org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer $r14;
        java.lang.AssertionError $r34, $r39;
        java.lang.Iterable $r19;
        org.waveprotocol.wave.model.operation.OperationException $r40;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.waveprotocol.wave.model.document.MutableDocumentImpl$2 $r31;
        org.waveprotocol.wave.model.document.MutableDocumentImpl$1 $r17;
        org.waveprotocol.wave.model.document.MutableDocumentImpl$3 $r23;
        org.waveprotocol.wave.model.document.util.Point r9;
        org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer $r12;
        java.util.Iterator $r20;
        org.waveprotocol.wave.model.document.operation.Nindo $r28;
        java.lang.Object r1, r5, $r25, $r29, $r37, r41;
        org.waveprotocol.wave.model.document.AnnotationInterval r42;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r9 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r1 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        $z0 = <org.waveprotocol.wave.model.document.MutableDocumentImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if r1 != null goto label01;

        $r39 = new java.lang.AssertionError;

        specialinvoke $r39.<java.lang.AssertionError: void <init>()>();

        throw $r39;

     label01:
        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r2, r1);

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r4);

        if r5 != null goto label02;

        $r36 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r35 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r37 = interfaceinvoke $r35.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        $r38 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>($r37);

        $i8 = interfaceinvoke $r36.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r38);

        goto label03;

     label02:
        $r7 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El before(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r6, r5);

        $i8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r8);

     label03:
        i1 = $i8;

        $i7 = $i8 - $i0;

        $z1 = <org.waveprotocol.wave.model.document.MutableDocumentImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label04;

        if $i7 > 0 goto label04;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label04:
        $r10 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r9);

        i9 = $i2;

        if $i2 < i1 goto label05;

        i9 = $i2 - $i7;

     label05:
        $r11 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i3 = interfaceinvoke $r11.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        $i4 = $i3 - $i7;

        $i6 = $i4 - i9;

        $r12 = new org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer;

        specialinvoke $r12.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void <init>()>();

        $r13 = new org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer;

        $r14 = new org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer;

        specialinvoke $r14.<org.waveprotocol.wave.model.document.operation.impl.UncheckedDocOpBuffer: void <init>()>();

        specialinvoke $r13.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void <init>(org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor)>($r14);

        if i9 <= 0 goto label06;

        virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>(i9);

        virtualinvoke $r12.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void retain(int)>(i9);

     label06:
        r41 = r1;

     label07:
        if r41 == r5 goto label08;

        $r32 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        staticinvoke <org.waveprotocol.wave.model.document.util.DomOperationUtil: void buildDomInitializationFromSubtree(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,org.waveprotocol.wave.model.document.operation.DocInitializationCursor)>($r32, r41, $r12);

        $r33 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r41 = interfaceinvoke $r33.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r41);

        goto label07;

     label08:
        $r15 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r17 = new org.waveprotocol.wave.model.document.MutableDocumentImpl$1;

        specialinvoke $r17.<org.waveprotocol.wave.model.document.MutableDocumentImpl$1: void <init>(org.waveprotocol.wave.model.document.MutableDocumentImpl,org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer,int)>(r0, $r13, $i0);

        interfaceinvoke $r16.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r17);

        $r18 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>($i0, i1, null);

        $r20 = interfaceinvoke $r19.<java.lang.Iterable: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r29 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r42 = (org.waveprotocol.wave.model.document.AnnotationInterval) $r29;

        $r30 = interfaceinvoke r42.<org.waveprotocol.wave.model.document.AnnotationInterval: org.waveprotocol.wave.model.util.ReadableStringMap diffFromLeft()>();

        $r31 = new org.waveprotocol.wave.model.document.MutableDocumentImpl$2;

        specialinvoke $r31.<org.waveprotocol.wave.model.document.MutableDocumentImpl$2: void <init>(org.waveprotocol.wave.model.document.MutableDocumentImpl,org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer)>(r0, $r13);

        interfaceinvoke $r30.<org.waveprotocol.wave.model.util.ReadableStringMap: void each(org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>($r31);

        $i5 = interfaceinvoke r42.<org.waveprotocol.wave.model.document.AnnotationInterval: int length()>();

        virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>($i5);

        goto label09;

     label10:
        $r21 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r22 = interfaceinvoke $r21.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        $r23 = new org.waveprotocol.wave.model.document.MutableDocumentImpl$3;

        specialinvoke $r23.<org.waveprotocol.wave.model.document.MutableDocumentImpl$3: void <init>(org.waveprotocol.wave.model.document.MutableDocumentImpl,org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer)>(r0, $r13);

        interfaceinvoke $r22.<org.waveprotocol.wave.model.util.ReadableStringSet: void each(org.waveprotocol.wave.model.util.ReadableStringSet$Proc)>($r23);

        if $i6 <= 0 goto label11;

        virtualinvoke $r12.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: void retain(int)>($i6);

        virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: void retain(int)>($i6);

     label11:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.util.Range deleteRange(int,int)>($i0, i1);

     label12:
        $r24 = virtualinvoke $r12.<org.waveprotocol.wave.model.document.operation.impl.DocOpBuffer: org.waveprotocol.wave.model.document.operation.DocOp finish()>();

        $r25 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.algorithm.AnnotationsNormalizer: java.lang.Object finish()>();

        $r26 = (org.waveprotocol.wave.model.document.operation.DocOp) $r25;

        $r27 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.Composer: org.waveprotocol.wave.model.document.operation.DocOp compose(org.waveprotocol.wave.model.document.operation.DocOp,org.waveprotocol.wave.model.document.operation.DocOp)>($r24, $r26);

        $r28 = staticinvoke <org.waveprotocol.wave.model.document.operation.Nindo: org.waveprotocol.wave.model.document.operation.Nindo fromDocOp(org.waveprotocol.wave.model.document.operation.DocOp,boolean)>($r27, 1);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void hackConsume(org.waveprotocol.wave.model.document.operation.Nindo)>($r28);

     label13:
        goto label15;

     label14:
        $r40 := @caughtexception;

     label15:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label12 to label13 with label14;
    }

    public void setElementAttribute(java.lang.Object, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r6, $r7;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r5;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String r2, $r3, r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r1, r2);

        if r4 != null goto label1;

        if $r3 == null goto label2;

     label1:
        if r4 == null goto label3;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r5 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int before(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r5, r1);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r7 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder setAttribute(java.lang.String,java.lang.String,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r2, r4, $r6);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r7);

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label7;

     label5:
        $r8 := @caughtexception;

     label6:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setElementAttributes(java.lang.Object, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        java.lang.Throwable $r7;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r5, $r6;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r4;
        java.lang.Object r0, $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.Object getDocumentElement()>();

        if r0 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot touch root element");

     label3:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r4 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int before(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r4, r0);

        $r5 = specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder setAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r3, $r5);

        specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r6);

     label4:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void updateElementAttributes(java.lang.Object, java.util.Map)
    {
        java.lang.Throwable $r7;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r5, $r6;
        java.util.Map r3;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r4;
        java.lang.Object r0, $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.util.Map;

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.Object getDocumentElement()>();

        if r0 == $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Cannot touch root element");

     label3:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r4 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = staticinvoke <org.waveprotocol.wave.model.document.indexed.Locator: int before(org.waveprotocol.wave.model.document.ReadableWDocument,java.lang.Object)>($r4, r0);

        $r5 = specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder updateAttributes(java.util.Map,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r3, $r5);

        specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r6);

     label4:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

     label6:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r7;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.Object createChildElement(java.lang.Object, java.lang.String, java.util.Map)
    {
        java.util.Map r4;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r5;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.util.Point$El $r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Map;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El end(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>($r2, r3, r4);

        return $r5;
    }

    public java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point, java.lang.String, java.util.Map)
    {
        java.lang.Throwable $r14;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r6, $r7;
        java.util.Map r5;
        int $i0;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.util.Point r2, $r9;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r4;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3, $r8, $r10, $r12;
        java.lang.Object $r11, $r13, $r15;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: java.util.Map;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "createElement: tagName must not be null");

        staticinvoke <org.waveprotocol.wave.model.document.util.Point: void checkPoint(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point,java.lang.String)>(r1, r2, "MutableDocumentImpl.createElement");

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r3 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r2);

        $r4 = new org.waveprotocol.wave.model.document.operation.impl.AttributesImpl;

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: void <init>(java.util.Map)>(r5);

        $r6 = specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>($i0);

        $r7 = specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder createElement(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r0, $r4, $r6);

        specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r7);

        $r8 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>($i0);

        $r10 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $z0 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label2;

        $r12 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r13 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r15 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>($r13);

        goto label3;

     label2:
        $r15 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

     label3:
        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>($r15);

     label4:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        return $r11;

     label5:
        $r14 := @caughtexception;

     label6:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r14;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setAnnotation(int, int, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r5;
        org.waveprotocol.wave.model.document.operation.Nindo $r4;
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        java.lang.String r0, r3;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: void checkPersistentKey(java.lang.String)>(r0);

        $r2 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        if i0 != i1 goto label1;

        return;

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.operation.Nindo: org.waveprotocol.wave.model.document.operation.Nindo setAnnotation(int,int,java.lang.String,java.lang.String)>(i0, i1, r0, r3);

        specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo)>($r4);

     label2:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void resetAnnotation(int, int, java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r8;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        java.lang.String r0, r7;
        org.waveprotocol.wave.model.document.operation.Nindo $r5;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r4, $r6;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r7 := @parameter3: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.document.util.Annotations: void checkPersistentKey(java.lang.String)>(r0);

        $r2 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r3 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        if i0 <= 0 goto label2;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r0, null);

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>(i0);

     label2:
        if i0 == i1 goto label3;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r0, r7);

        $i6 = i1 - i0;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>($i6);

     label3:
        $r4 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i3 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        if $i3 == i1 goto label4;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r0, null);

        $r6 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i4 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        $i5 = $i4 - i1;

        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>($i5);

     label4:
        virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void endAnnotation(java.lang.String)>(r0);

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo)>($r5);

     label5:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label8;

     label6:
        $r8 := @caughtexception;

     label7:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void resetAnnotationsInRange(int, int, java.lang.String, java.util.List)
    {
        java.lang.Throwable $r12;
        org.waveprotocol.wave.model.document.util.AnnotationBuilder $r2;
        org.waveprotocol.wave.model.document.MutableAnnotationSet$RangedValue r9;
        int i0, i1, $i2, i3, i4, $i5;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String r3, $r11;
        boolean $z0, $z1;
        java.util.Iterator $r6;
        java.util.List r5;
        org.waveprotocol.wave.model.document.operation.Nindo $r7;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1, $r4;
        java.lang.Object $r8, $r10;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        r5 := @parameter3: java.util.List;

        if i0 != i1 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexes(int,int,int)>(i0, i1, $i2);

        $r2 = new org.waveprotocol.wave.model.document.util.AnnotationBuilder;

        $r4 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        specialinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: void <init>(org.waveprotocol.wave.model.document.ReadableWDocument,int,int,java.lang.String)>($r4, i0, i1, r3);

        $r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.waveprotocol.wave.model.document.MutableAnnotationSet$RangedValue) $r8;

        i3 = r9.<org.waveprotocol.wave.model.document.MutableAnnotationSet$RangedValue: int start>;

        i4 = r9.<org.waveprotocol.wave.model.document.MutableAnnotationSet$RangedValue: int end>;

        $i5 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: int getCurrentPos()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkPositionIndexesInRange(int,int,int,int)>($i5, i3, i4, i1);

        if i3 != i4 goto label3;

        goto label2;

     label3:
        virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: void setUpTo(java.lang.String,int)>(null, i3);

        $r10 = r9.<org.waveprotocol.wave.model.document.MutableAnnotationSet$RangedValue: java.lang.Object value>;

        $r11 = (java.lang.String) $r10;

        virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: void setUpTo(java.lang.String,int)>($r11, i4);

        goto label2;

     label4:
        virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: void setUpTo(java.lang.String,int)>(null, i1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: boolean getDirty()>();

        if $z0 == 0 goto label9;

     label5:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

        $r7 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.AnnotationBuilder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo)>($r7);

     label6:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label9;

     label7:
        $r12 := @caughtexception;

     label8:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r12;

     label9:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r0;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        $r0 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        if i0 <= 0 goto label1;

        virtualinvoke $r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void skip(int)>(i0);

     label1:
        return $r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder createElement(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r0;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2;

        r3 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r0 := @parameter2: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r2);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementEnd()>();

        return r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder insertText(java.lang.String, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.MutableDocumentImpl r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r0;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void characters(java.lang.String)>(r1);

        return r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteElement(java.lang.Object, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r0;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteElementStart()>();

        specialinvoke r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder emptyElement(java.lang.Object,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r2, r0);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteElementEnd()>();

        return r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder emptyElement(java.lang.Object, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r3;
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r4, $r6, $r7, $r10;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r5, $r8, r11;
        java.lang.String $r9;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r11 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

     label1:
        if r11 == null goto label4;

        $r4 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>(r11);

        if $r5 == null goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteElement(java.lang.Object,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r5, r3);

        goto label3;

     label2:
        $r7 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r6 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>(r11);

        $r9 = interfaceinvoke $r7.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getData(java.lang.Object)>($r8);

        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        virtualinvoke r3.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteCharacters(int)>($i0);

     label3:
        $r10 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        goto label1;

     label4:
        return r3;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder setAttribute(java.lang.String, java.lang.String, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r0;
        java.util.Map $r3;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r4;
        java.lang.String r1, r2;

        r4 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $r3 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r1, r2);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void updateAttributes(java.util.Map)>($r3);

        return r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder setAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.MutableDocumentImpl r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r0;
        org.waveprotocol.wave.model.document.operation.Attributes r1;

        r2 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes)>(r1);

        return r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder updateAttributes(java.util.Map, org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        org.waveprotocol.wave.model.document.MutableDocumentImpl r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r0;
        java.util.Map r1;

        r2 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.util.Map;

        r0 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void updateAttributes(java.util.Map)>(r1);

        return r0;
    }

    private org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteRangeInternal(int, int)
    {
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r17, $r18, $r21, $r23, $r24, $r27;
        java.lang.AssertionError $r30;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String $r13;
        org.waveprotocol.wave.model.document.util.Point $r3, $r5;
        java.lang.Object $r7, $r9, $r11, $r15, $r16, $r19, $r20, $r22, $r25, $r26, $r28, $r29, r31, r32;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder at(int)>(i0);

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        $r4 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i1);

        $z0 = <org.waveprotocol.wave.model.document.MutableDocumentImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $r23 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r24 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r25 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r26 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r24, $r25);

        $r27 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r28 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r29 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r27, $r28);

        $z5 = interfaceinvoke $r23.<org.waveprotocol.wave.model.document.ReadableWDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r26, $r29);

        if $z5 != 0 goto label01;

        $r30 = new java.lang.AssertionError;

        specialinvoke $r30.<java.lang.AssertionError: void <init>(java.lang.Object)>("Range must be within a single element");

        throw $r30;

     label01:
        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z1 == 0 goto label05;

        $r14 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r15 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r16 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $z4 = interfaceinvoke $r14.<org.waveprotocol.wave.model.document.ReadableWDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>($r15, $r16);

        if $z4 == 0 goto label03;

        $i6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i7 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        i8 = $i6 - $i7;

        if i8 <= 0 goto label02;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteCharacters(int)>(i8);

     label02:
        return $r1;

     label03:
        $r17 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r18 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r19 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r20 = interfaceinvoke $r18.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>($r19);

        $i4 = interfaceinvoke $r17.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLength(java.lang.Object)>($r20);

        $i5 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        i9 = $i4 - $i5;

        $r21 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r22 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        r31 = interfaceinvoke $r21.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>($r22);

        if i9 <= 0 goto label04;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteCharacters(int)>(i9);

     label04:
        goto label06;

     label05:
        r31 = virtualinvoke $r3.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

     label06:
        $z2 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z2 == 0 goto label07;

        r32 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        goto label08;

     label07:
        r32 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

     label08:
        if r31 == r32 goto label11;

        $r6 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r7 = interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r31);

        $r8 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>(r31);

        if $r9 == null goto label09;

        $r12 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getData(java.lang.Object)>($r9);

        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteCharacters(int)>($i3);

        goto label10;

     label09:
        $r10 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r11 = interfaceinvoke $r10.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>(r31);

        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.operation.Nindo$Builder deleteElement(java.lang.Object,org.waveprotocol.wave.model.document.operation.Nindo$Builder)>($r11, $r1);

     label10:
        r31 = $r7;

        goto label08;

     label11:
        $z3 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z3 == 0 goto label12;

        $i2 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i2 <= 0 goto label12;

        virtualinvoke $r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void deleteCharacters(int)>($i2);

     label12:
        return $r1;
    }

    public void 'with'(org.waveprotocol.wave.model.document.MutableDocument$Action)
    {
        org.waveprotocol.wave.model.document.MutableDocument$Action r0;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument$Action;

        interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument$Action: void exec(org.waveprotocol.wave.model.document.MutableDocument)>(r1);

        return;
    }

    public java.lang.Object 'with'(org.waveprotocol.wave.model.document.MutableDocument$Method)
    {
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.MutableDocument$Method r0;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocument$Method;

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.MutableDocument$Method: java.lang.Object exec(org.waveprotocol.wave.model.document.MutableDocument)>(r1);

        return $r2;
    }

    public void hackConsume(org.waveprotocol.wave.model.document.operation.Nindo)
    {
        java.lang.Throwable $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        org.waveprotocol.wave.model.document.operation.Nindo r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void begin()>();

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void consume(org.waveprotocol.wave.model.document.operation.Nindo)>(r1);

     label2:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void end()>();

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int size()
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: int size()>();

        return $i0;
    }

    public java.lang.Object asElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object asText(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object asText(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.Map getAttributes(java.lang.Object)
    {
        java.util.Map $r3;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.util.Map getAttributes(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String getData(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getData(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getDocumentElement()
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object $r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getDocumentElement()>();

        return $r2;
    }

    public java.lang.Object getFirstChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getLastChild(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getLastChild(java.lang.Object)>(r1);

        return $r3;
    }

    public int getLength(java.lang.Object)
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLength(java.lang.Object)>(r1);

        return $i0;
    }

    public java.lang.Object getNextSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getNextSibling(java.lang.Object)>(r1);

        return $r3;
    }

    public short getNodeType(java.lang.Object)
    {
        short $s0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $s0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: short getNodeType(java.lang.Object)>(r1);

        return $s0;
    }

    public java.lang.Object getParentElement(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getParentElement(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object getPreviousSibling(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getPreviousSibling(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.String getTagName(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getTagName(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isSameNode(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r3;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $z0 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: boolean isSameNode(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    public java.lang.String getAttribute(java.lang.Object, java.lang.String)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r3;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;
        java.lang.String r2, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String getAttribute(java.lang.Object,java.lang.String)>(r1, r2);

        return $r4;
    }

    public int firstAnnotationChange(int, int, java.lang.String, java.lang.String)
    {
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int firstAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        return $i2;
    }

    public int lastAnnotationChange(int, int, java.lang.String, java.lang.String)
    {
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.ReadableWDocument $r3;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String r1, r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i2 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableWDocument: int lastAnnotationChange(int,int,java.lang.String,java.lang.Object)>(i0, i1, r1, r2);

        return $i2;
    }

    public java.lang.String getAnnotation(int, java.lang.String)
    {
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object $r3;
        java.lang.String r1, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Object getAnnotation(int,java.lang.String)>(i0, r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        org.waveprotocol.wave.model.document.AnnotationCursor $r3;
        int i0, i1;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.AnnotationCursor annotationCursor(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(i0, i1, r1);

        return $r3;
    }

    public org.waveprotocol.wave.model.document.util.Point locate(int)
    {
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        org.waveprotocol.wave.model.document.util.Point $r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.util.Point locate(int)>(i0);

        return $r2;
    }

    public int getLocation(java.lang.Object)
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r1;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(java.lang.Object)>(r1);

        return $i0;
    }

    public int getLocation(org.waveprotocol.wave.model.document.util.Point)
    {
        int $i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r1;
        org.waveprotocol.wave.model.document.util.Point r0;

        r1 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "getLocation: Null point");

        $r2 = r1.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $i0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r0);

        return $i0;
    }

    public void forEachAnnotationAt(int, org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)
    {
        org.waveprotocol.wave.model.util.ReadableStringMap$ProcV r1;
        int i0;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.model.util.ReadableStringMap$ProcV;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: void forEachAnnotationAt(int,org.waveprotocol.wave.model.util.ReadableStringMap$ProcV)>(i0, r1);

        return;
    }

    public java.lang.Iterable annotationIntervals(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        int i0, i1;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Iterable $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Iterable annotationIntervals(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(i0, i1, r1);

        return $r3;
    }

    public java.lang.Iterable rangedAnnotations(int, int, org.waveprotocol.wave.model.util.ReadableStringSet)
    {
        org.waveprotocol.wave.model.util.ReadableStringSet r1;
        int i0, i1;
        org.waveprotocol.wave.model.document.ReadableWDocument $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Iterable $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.waveprotocol.wave.model.util.ReadableStringSet;

        $r2 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.Iterable rangedAnnotations(int,int,org.waveprotocol.wave.model.util.ReadableStringSet)>(i0, i1, r1);

        return $r3;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.util.ReadableStringSet $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.util.ReadableStringSet knownKeys()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization toInitialization()
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: org.waveprotocol.wave.model.document.operation.DocInitialization toInitialization()>();

        return $r2;
    }

    public java.lang.String toXmlString()
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String toXmlString()>();

        return $r2;
    }

    public java.lang.String toDebugString()
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.ReadableWDocument: java.lang.String toDebugString()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r2;
        java.lang.String $r3, $r6, $r9;

        r2 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MutableDI@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.String toDebugString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public volatile java.lang.Object getAnnotation(int, java.lang.String)
    {
        int i0;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: java.lang.String getAnnotation(int,java.lang.String)>(i0, r1);

        return $r2;
    }

    public volatile int lastAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = (java.lang.String) r2;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: int lastAnnotationChange(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, $r3);

        return $i2;
    }

    public volatile int firstAnnotationChange(int, int, java.lang.String, java.lang.Object)
    {
        int i0, i1, $i2;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = (java.lang.String) r2;

        $i2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: int firstAnnotationChange(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, $r3);

        return $i2;
    }

    public volatile void resetAnnotation(int, int, java.lang.String, java.lang.Object)
    {
        int i0, i1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void resetAnnotation(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, $r3);

        return;
    }

    public volatile void setAnnotation(int, int, java.lang.String, java.lang.Object)
    {
        int i0, i1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;
        java.lang.Object r2;
        java.lang.String r1, $r3;

        r0 := @this: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: void setAnnotation(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, $r3);

        return;
    }

    static org.waveprotocol.wave.model.document.ReadableWDocument access$000(org.waveprotocol.wave.model.document.MutableDocumentImpl)
    {
        org.waveprotocol.wave.model.document.ReadableWDocument $r1;
        org.waveprotocol.wave.model.document.MutableDocumentImpl r0;

        r0 := @parameter0: org.waveprotocol.wave.model.document.MutableDocumentImpl;

        $r1 = r0.<org.waveprotocol.wave.model.document.MutableDocumentImpl: org.waveprotocol.wave.model.document.ReadableWDocument doc>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/MutableDocumentImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.MutableDocumentImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
